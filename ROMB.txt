 ROMB:4000 EF 01 1C 40                          // Graphics holding: VRA0($8000) to VRA0($852F) holds in order: blank space, all Hiragana, Dash, LV symbol; VRA0($8800) to VRA0($880F) holds blank space; VRA0($88B0) to VRA0($8B7F) holds in order: English alphabet, then miscellaneous text graphics; VRA0($8540) to VRA0($857F) holds in order: Left/Right symbols, Question Mark, Period; VRA0($9000) to VRA0($95FF) holds terrain map graphics; VRA1($9000) to VRA1($97FF) then VRA1($8800) to VRA1($859F) holds unit map graphics
 ROMB:4004 3E 00            ld   a,00
 ROMB:4006 E0 83            ld   (ff00+83),a
 ROMB:4008 E0 4F            ld   (ff00+4F),a    // VRA0
 ROMB:400A CD 21 46         call 4621           // Sets up Cursor tiles in VRA0 tiles 96~122
 ROMB:400D EF 0C 53 4E                          // VRA1($8000 ~ $824F) = 0C:($53C6 ~ $5615)
 ROMB:4011 CD 3E 40         call 403E           // Establishes unit/terrain color palette tables in ($C4E0) table
 ROMB:4014 CD 57 40         call 4057           // Establishes potential cursor sprite graphic palettes
 ROMB:4017 CD F2 06         call 06F2           // Both BG and Sprite Palette tables are updated
 ROMB:401A EF 10 A8 68                          // Sets up basic covered graphics values
 ROMB:401E 3E AB            ld   a,AB           // Border basic graphics is held at ($8AB0)
 ROMB:4020 EF 10 CE 68                          // WRA4($DC6C) = 171
 ROMB:4024 AF               xor  a
 ROMB:4025 EF 10 E4 68                          // WRA4($DC6D) = 0
 ROMB:4029 AF               xor  a
 ROMB:402A EA CB FF         ld   (FFCB),a
 ROMB:402D CD 67 2E         call 2E67           // Handles clear-up of all sprite portions and entire ($C400) table, sets ($C00E) to 1
 ROMB:4030 CD 34 46         call 4634           // Basic Cursor Sprite stats set up
 ROMB:4033 CD 2B 76         call 762B           // ($CA9A) to ($CA9E) set to -1
 ROMB:4036 CD 82 42         call 4282           // Empties $FFAC, $FFB1, and $FFB2
 ROMB:4039 3E 02            ld   a,02
 ROMB:403B E0 94            ld   (ff00+94),a    // Button held default cooldown set to 2 frames
 ROMB:403D C9               ret                 // Sets up graphics holding and palettes for the map where gameplay takes place
 ROMB:403E 3E 00            ld   a,00
 ROMB:4040 06 01            ld   b,01
 ROMB:4042 0E 01            ld   c,01
 ROMB:4044 21 18 51         ld   hl,5118
 ROMB:4047 CD D9 06         call 06D9           // ($C4E0) to ($C4E7) hold 00 00 00 69 FF 7F 40 72
 ROMB:404A 3E 01            ld   a,01
 ROMB:404C 06 06            ld   b,06
 ROMB:404E 0E 01            ld   c,01
 ROMB:4050 21 68 58         ld   hl,5868
 ROMB:4053 CD D9 06         call 06D9           // ($C4E8) to ($C517) hold 01:($5868) to 01:($5897)
 ROMB:4056 C9               ret                 // Establishes unit/terrain color palette tables in ($C4E0) table
 ROMB:4057 3E 08            ld   a,08
 ROMB:4059 06 01            ld   b,01
 ROMB:405B 0E 01            ld   c,01
 ROMB:405D 21 18 51         ld   hl,5118
 ROMB:4060 CD D9 06         call 06D9           // ($C520) to ($C527) hold 00 00 00 69 FF 7F 40 72
 ROMB:4063 3E 09            ld   a,09
 ROMB:4065 06 01            ld   b,01
 ROMB:4067 21 78 40         ld   hl,4078
 ROMB:406A CD BC 06         call 06BC           // ($C528) to ($C52F) hold ($4078) to ($407F)
 ROMB:406D 3E 0A            ld   a,0A
 ROMB:406F 06 03            ld   b,03
 ROMB:4071 21 54 1C         ld   hl,1C54
 ROMB:4074 CD BC 06         call 06BC           // ($C530) to ($C547) hold ($1C54) to ($1C6B)
 ROMB:4077 C9               ret                 // Establishes potential cursor sprite graphic palettes
 
 ROMB:4078 FF 7F 1B 00 FF 7F 9F 41
 ROMB:4080 00 00 80 69 FF 7F C0 72
 
 ROMB:4088 11 1A CA         ld   de,CA1A
 ROMB:408B 21 7E C8         ld   hl,C87E
 ROMB:408E 01 35 00         ld   bc,0035
 ROMB:4091 CD 50 3B         call 3B50           // ($C87E~$C8B2) = ($CA1A~$CA4E)
 ROMB:4094 EF 12 00 40                          // Unit stats table emptied, ($CD09) and ($CD0A) emptied
 ROMB:4098 CD 14 16         call 1614           // Active map data set up in WRAM banks 1 and 2
 ROMB:409B CD F3 41         call 41F3           // WRAM Bank 1 updated with any End and/or Transporting units in mind, headcounts also set up
 ROMB:409E EF 0C 26 56                          // Sets all base properties' Strength and coordinates within WRAM Bank 1
 ROMB:40A2 CD 78 41         call 4178           // Sets base counts of each property type, as well as each HQ's coordinates
 ROMB:40A5 CD 2F 7C         call 7C2F           // Establishes income values
 ROMB:40A8 CD 1B 41         call 411B           // Establishes starting monetary resources
 ROMB:40AB AF               xor  a
 ROMB:40AC EA 33 C6         ld   (C633),a
 ROMB:40AF FA 33 C6         ld   a,(C633)
 ROMB:40B2 E6 01            and  a,01
 ROMB:40B4 87               add  a
 ROMB:40B5 21 46 C6         ld   hl,C646
 ROMB:40B8 CD BC 29         call 29BC           // HL += A
 ROMB:40BB 2A               ldi  a,(hl)
 ROMB:40BC 47               ld   b,a
 ROMB:40BD 4E               ld   c,(hl)         // BC = active player's HQ coordinates
 ROMB:40BE CD CB 7A         call 7ACB           // Establishes view area around active player's HQ, then cursor's within view and overall coordinates, and finally cursor's sprite grapics location center
 ROMB:40C1 3E 00            ld   a,00
 ROMB:40C3 EA 97 C9         ld   (C997),a
 ROMB:40C6 21 B3 C8         ld   hl,C8B3
 ROMB:40C9 01 08 00         ld   bc,0008
 ROMB:40CC AF               xor  a
 ROMB:40CD CD 79 3B         call 3B79           // Empties Built/Lost Unit counts
 ROMB:40D0 CD FD 6C         call 6CFD           // ($C686) holds Mode music basis
 ROMB:40D3 EF 11 7B 4D                          // Work Car command usage check shut off due to map transition
 ROMB:40D7 EF 11 9F 4D                          // Map Summon check flag shut off due to map transition
 ROMB:40DB CD E3 40         call 40E3           // Reserve Units' stats established in unit list if playing on Campaign
 ROMB:40DE EF 11 19 4E                          // Establishes given starting stats for given Beginner Maps
 ROMB:40E2 C9               ret                 // Establishes stats for a new start on a map
 ROMB:40E3 FA 2F C6         ld   a,(C62F)
 ROMB:40E6 FE 01            cp   a,01
 ROMB:40E8 C0               ret  nz
 ROMB:40E9 EF 12 01 48                          // Reserve Units' stats established in unit list if playing on Campaign
 ROMB:40ED C9               ret
 ROMB:40EE F5               push af
 ROMB:40EF 11 1A CA         ld   de,CA1A
 ROMB:40F2 21 7E C8         ld   hl,C87E
 ROMB:40F5 01 35 00         ld   bc,0035
 ROMB:40F8 CD 50 3B         call 3B50           // ($C87E~$C8B2) = ($CA1A~$CA4E)
 ROMB:40FB F1               pop  af
 ROMB:40FC EF 13 72 60                          // Saved data for active map reestablished
 ROMB:4100 CD F3 41         call 41F3           // WRAM Bank 1 updated with any End and/or Transporting units in mind, headcounts also set up
 ROMB:4103 CD 78 41         call 4178           // Sets base counts of each property type, as well as each HQ's coordinates
 ROMB:4106 CD 2F 7C         call 7C2F           // Establishes income values
 ROMB:4109 3E 01            ld   a,01
 ROMB:410B EA 97 C9         ld   (C997),a
 ROMB:410E 11 7E C8         ld   de,C87E
 ROMB:4111 21 1A CA         ld   hl,CA1A
 ROMB:4114 01 35 00         ld   bc,0035
 ROMB:4117 CD 50 3B         call 3B50           // ($CA1A~$CA4E) = ($C87E~$C8B2)
 ROMB:411A C9               ret                 // Reestablishes interrupt save data (A is the given file)
 ROMB:411B AF               xor  a
 ROMB:411C EA 34 C6         ld   (C634),a
 ROMB:411F EA 35 C6         ld   (C635),a
 ROMB:4122 EA 36 C6         ld   (C636),a
 ROMB:4125 EA 37 C6         ld   (C637),a
 ROMB:4128 EA 38 C6         ld   (C638),a
 ROMB:412B EA 39 C6         ld   (C639),a
 ROMB:412E EA 3A C6         ld   (C63A),a
 ROMB:4131 EA 3B C6         ld   (C63B),a
 ROMB:4134 EA 3C C6         ld   (C63C),a
 ROMB:4137 EA 3D C6         ld   (C63D),a
 ROMB:413A EA 33 C6         ld   (C633),a       // Day holder and funds bytes all emptied
 ROMB:413D FA AD C8         ld   a,(C8AD)
 ROMB:4140 5F               ld   e,a
 ROMB:4141 CD 5F 41         call 415F           // Red Star's starting Gold
 ROMB:4144 FA AF C8         ld   a,(C8AF)
 ROMB:4147 5F               ld   e,a
 ROMB:4148 CD 6D 41         call 416D           // Red Star's starting Materials
 ROMB:414B 3E 01            ld   a,01
 ROMB:414D EA 33 C6         ld   (C633),a
 ROMB:4150 FA AE C8         ld   a,(C8AE)
 ROMB:4153 5F               ld   e,a
 ROMB:4154 CD 5F 41         call 415F           // White Moon's starting Gold
 ROMB:4157 FA B0 C8         ld   a,(C8B0)
 ROMB:415A 5F               ld   e,a
 ROMB:415B CD 6D 41         call 416D           // White Moon's starting Materials
 ROMB:415E C9               ret                 // Establishes starting monetary resources
 ROMB:415F 16 00            ld   d,00
 ROMB:4161 01 E8 03         ld   bc,03E8
 ROMB:4164 CD 6F 7B         call 7B6F           // Adds E to country's Gold, capping at 99999
 ROMB:4167 0B               dec  bc
 ROMB:4168 78               ld   a,b
 ROMB:4169 B1               or   c
 ROMB:416A 20 F8            jr   nz,4164        // Process repeated 1000 times
 ROMB:416C C9               ret                 // Adds E * 1000 to country's Gold
 ROMB:416D 16 00            ld   d,00
 ROMB:416F 0E 0A            ld   c,0A
 ROMB:4171 CD EC 7B         call 7BEC           // Adds E to used Materials bytes, caps at 999
 ROMB:4174 0D               dec  c
 ROMB:4175 20 FA            jr   nz,4171        // Repeated 10 times
 ROMB:4177 C9               ret                 // Adds E * 10 to country's Materials
 ROMB:4178 C5               push bc
 ROMB:4179 E5               push hl
 ROMB:417A F0 82            ld   a,(ff00+82)
 ROMB:417C F5               push af
 ROMB:417D 3E 01            ld   a,01
 ROMB:417F E0 82            ld   (ff00+82),a
 ROMB:4181 E0 70            ld   (ff00+70),a
 ROMB:4183 3E FF            ld   a,FF
 ROMB:4185 EA 46 C6         ld   (C646),a
 ROMB:4188 EA 47 C6         ld   (C647),a
 ROMB:418B EA 48 C6         ld   (C648),a
 ROMB:418E EA 49 C6         ld   (C649),a
 ROMB:4191 21 4A C6         ld   hl,C64A
 ROMB:4194 01 34 00         ld   bc,0034
 ROMB:4197 AF               xor  a
 ROMB:4198 CD 79 3B         call 3B79           // Empties $C64A to $C67D
 ROMB:419B 0E 00            ld   c,00
 ROMB:419D 06 00            ld   b,00           // Loop begins here or 2 lines later
 ROMB:419F CD F8 15         call 15F8           // HL = $D000 + B + C * 64
 ROMB:41A2 2A               ldi  a,(hl)
 ROMB:41A3 E6 3F            and  a,3F           // Terrain data
 ROMB:41A5 CD BE 41         call 41BE           // Increments count of given property type, establishes HQ coordinates if feasible
 ROMB:41A8 04               inc  b
 ROMB:41A9 FA 89 C9         ld   a,(C989)
 ROMB:41AC B8               cp   b
 ROMB:41AD 20 F3            jr   nz,41A2
 ROMB:41AF 0C               inc  c
 ROMB:41B0 FA 8A C9         ld   a,(C98A)
 ROMB:41B3 B9               cp   c
 ROMB:41B4 20 E7            jr   nz,419D
 ROMB:41B6 F1               pop  af
 ROMB:41B7 E0 82            ld   (ff00+82),a
 ROMB:41B9 E0 70            ld   (ff00+70),a
 ROMB:41BB E1               pop  hl
 ROMB:41BC C1               pop  bc
 ROMB:41BD C9               ret                 // Sets base counts of each property type, as well as each HQ's coordinates
 ROMB:41BE F5               push af
 ROMB:41BF E5               push hl
 ROMB:41C0 CD DB 41         call 41DB           // Increments count of given property type
 ROMB:41C3 FE 01            cp   a,01
 ROMB:41C5 28 06            jr   z,41CD
 ROMB:41C7 FE 0C            cp   a,0C
 ROMB:41C9 28 07            jr   z,41D2
 ROMB:41CB 18 0B            jr   41D8           // End if neither is HQ
 ROMB:41CD 21 46 C6         ld   hl,C646
 ROMB:41D0 18 03            jr   41D5
 ROMB:41D2 21 48 C6         ld   hl,C648
 ROMB:41D5 70               ld   (hl),b
 ROMB:41D6 23               inc  hl
 ROMB:41D7 71               ld   (hl),c
 ROMB:41D8 E1               pop  hl
 ROMB:41D9 F1               pop  af
 ROMB:41DA C9               ret                 // Increments count of given property type, establishes HQ coordinates if feasible
 ROMB:41DB F5               push af
 ROMB:41DC E5               push hl
 ROMB:41DD 21 4A C6         ld   hl,C64A
 ROMB:41E0 CD BC 29         call 29BC           // HL += A
 ROMB:41E3 34               inc  (hl)
 ROMB:41E4 E1               pop  hl
 ROMB:41E5 F1               pop  af
 ROMB:41E6 C9               ret                 // Increments ($C64A + A)
 ROMB:41E7 F5               push af
 ROMB:41E8 E5               push hl
 ROMB:41E9 21 4A C6         ld   hl,C64A
 ROMB:41EC CD BC 29         call 29BC           // HL += A
 ROMB:41EF 35               dec  (hl)
 ROMB:41F0 E1               pop  hl
 ROMB:41F1 F1               pop  af
 ROMB:41F2 C9               ret                 // Decrements ($C64A + A)
 ROMB:41F3 F0 82            ld   a,(ff00+82)
 ROMB:41F5 F5               push af
 ROMB:41F6 AF               xor  a
 ROMB:41F7 EA 09 CD         ld   (CD09),a
 ROMB:41FA EA 0A CD         ld   (CD0A),a
 ROMB:41FD 16 00            ld   d,00
 ROMB:41FF 7A               ld   a,d            // Loop begins here
 ROMB:4200 0E 00            ld   c,00
 ROMB:4202 EF 12 66 40                          
 ROMB:4206 A7               and  a
 ROMB:4207 28 62            jr   z,426B         // Cycle ends if unit doesn't exist
 ROMB:4209 EA 40 C9         ld   (C940),a
 ROMB:420C CD 77 42         call 4277           // Increment ($CD09) for Red Star unit, ($CD0A) for White Moon unit
 ROMB:420F 7A               ld   a,d
 ROMB:4210 0E 03            ld   c,03
 ROMB:4212 EF 12 66 40                          
 ROMB:4216 CB 47            bit  0,a
 ROMB:4218 20 51            jr   nz,426B        // Cycle ends if Loaded
 ROMB:421A 7A               ld   a,d
 ROMB:421B 0E 01            ld   c,01
 ROMB:421D EF 12 66 40                          
 ROMB:4221 EA 41 C9         ld   (C941),a
 ROMB:4224 7A               ld   a,d
 ROMB:4225 0E 02            ld   c,02
 ROMB:4227 EF 12 66 40                          
 ROMB:422B EA 42 C9         ld   (C942),a       // ($C941) 2 byte holds coordinates
 ROMB:422E FA 41 C9         ld   a,(C941)
 ROMB:4231 47               ld   b,a
 ROMB:4232 FA 42 C9         ld   a,(C942)
 ROMB:4235 4F               ld   c,a
 ROMB:4236 FA 40 C9         ld   a,(C940)       // A = Unit Type, BC holds coordinates
 ROMB:4239 CD 98 47         call 4798           // Unit tile updated with Unit Type
 ROMB:423C 7A               ld   a,d
 ROMB:423D 0E 03            ld   c,03
 ROMB:423F EF 12 66 40                          
 ROMB:4243 CB 7F            bit  7,a
 ROMB:4245 28 0D            jr   z,4254
 ROMB:4247 FA 41 C9         ld   a,(C941)
 ROMB:424A 47               ld   b,a
 ROMB:424B FA 42 C9         ld   a,(C942)
 ROMB:424E 4F               ld   c,a
 ROMB:424F 3E 02            ld   a,02
 ROMB:4251 CD 9C 47         call 479C           // set 7,($D000 + B + C * 64) WRAM Bank 1 (done if unit has moved)
 ROMB:4254 7A               ld   a,d
 ROMB:4255 0E 05            ld   c,05
 ROMB:4257 EF 12 66 40                          
 ROMB:425B A7               and  a
 ROMB:425C 28 0D            jr   z,426B
 ROMB:425E FA 41 C9         ld   a,(C941)
 ROMB:4261 47               ld   b,a
 ROMB:4262 FA 42 C9         ld   a,(C942)
 ROMB:4265 4F               ld   c,a
 ROMB:4266 3E 01            ld   a,01
 ROMB:4268 CD 9C 47         call 479C           // set 6,($D000 + B + C * 64) WRAM Bank 1 (done if unit is Loaded)
 ROMB:426B 14               inc  d
 ROMB:426C 7A               ld   a,d
 ROMB:426D FE 64            cp   a,64
 ROMB:426F 20 8E            jr   nz,41FF
 ROMB:4271 F1               pop  af
 ROMB:4272 E0 82            ld   (ff00+82),a
 ROMB:4274 E0 70            ld   (ff00+70),a
 ROMB:4276 C9               ret                 // WRAM Bank 1 updated with any End and/or Transporting units in mind
 ROMB:4277 21 09 CD         ld   hl,CD09
 ROMB:427A 7A               ld   a,d
 ROMB:427B FE 32            cp   a,32
 ROMB:427D 38 01            jr   c,4280
 ROMB:427F 23               inc  hl
 ROMB:4280 34               inc  (hl)
 ROMB:4281 C9               ret                 // Increment ($CD09) for Red Star unit, ($CD0A) for White Moon unit
 ROMB:4282 AF               xor  a
 ROMB:4283 E0 AC            ld   (ff00+AC),a
 ROMB:4285 E0 B1            ld   (ff00+B1),a
 ROMB:4287 E0 B2            ld   (ff00+B2),a
 ROMB:4289 C9               ret                 // Empties $FFAC, $FFB1, and $FFB2
 ROMB:428A C5               push bc
 ROMB:428B D5               push de
 ROMB:428C F0 82            ld   a,(ff00+82)
 ROMB:428E F5               push af
 ROMB:428F CD B8 42         call 42B8           // ($FF95) = X shift % 16 * 16, ($FF96) = Y shift % 16 * 16; Button update
 ROMB:4292 1E 09            ld   e,09
 ROMB:4294 FA 8C C9         ld   a,(C98C)
 ROMB:4297 4F               ld   c,a
 ROMB:4298 FA 8B C9         ld   a,(C98B)       // Loop begins here
 ROMB:429B 47               ld   b,a
 ROMB:429C 16 0A            ld   d,0A           // BC holds coordinates of upper-left most tile in view, D = 10, E = 9 - handled rows
 ROMB:429E 79               ld   a,c
 ROMB:429F E6 01            and  a,01
 ROMB:42A1 28 02            jr   z,42A5         // Jumps if columns above view is an even number
 ROMB:42A3 05               dec  b
 ROMB:42A4 14               inc  d              // (X - Y%2), Y, (10 + Y%2), (9 - handled rows); loop lasting for row begins next line
 ROMB:42A5 CD D1 43         call 43D1           // Establishes tile BC's entire graphics
 ROMB:42A8 04               inc  b
 ROMB:42A9 15               dec  d
 ROMB:42AA 20 F9            jr   nz,42A5        // Handles next column
 ROMB:42AC 0C               inc  c
 ROMB:42AD 1D               dec  e
 ROMB:42AE 20 E8            jr   nz,4298        // Handles next row
 ROMB:42B0 F1               pop  af
 ROMB:42B1 E0 82            ld   (ff00+82),a
 ROMB:42B3 E0 70            ld   (ff00+70),a
 ROMB:42B5 D1               pop  de
 ROMB:42B6 C1               pop  bc
 ROMB:42B7 C9               ret                 // Establishes all on-screen tiles' entire graphics
 ROMB:42B8 FA 8B C9         ld   a,(C98B)
 ROMB:42BB E6 0F            and  a,0F
 ROMB:42BD CB 37            swap a
 ROMB:42BF E0 95            ld   (ff00+95),a
 ROMB:42C1 FA 8C C9         ld   a,(C98C)
 ROMB:42C4 E6 0F            and  a,0F
 ROMB:42C6 CB 37            swap a
 ROMB:42C8 E0 96            ld   (ff00+96),a
 ROMB:42CA CD A2 05         call 05A2           // Button update, next frame
 ROMB:42CD C9               ret                 // ($FF95) = X shift % 16 * 16, ($FF96) = Y shift % 16 * 16; Button update
 ROMB:42CE C5               push bc
 ROMB:42CF D5               push de
 ROMB:42D0 F0 82            ld   a,(ff00+82)
 ROMB:42D2 F5               push af
 ROMB:42D3 CD B8 42         call 42B8           // ($FF95) = X shift % 16 * 16, ($FF96) = Y shift % 16 * 16; Button update
 ROMB:42D6 1E 09            ld   e,09
 ROMB:42D8 FA 8C C9         ld   a,(C98C)
 ROMB:42DB 4F               ld   c,a
 ROMB:42DC FA 8B C9         ld   a,(C98B)       // Bigger loop begins here
 ROMB:42DF 47               ld   b,a
 ROMB:42E0 16 0A            ld   d,0A
 ROMB:42E2 79               ld   a,c
 ROMB:42E3 E6 01            and  a,01
 ROMB:42E5 28 02            jr   z,42E9
 ROMB:42E7 05               dec  b
 ROMB:42E8 14               inc  d
 ROMB:42E9 C5               push bc             // Smaller loop begins here ((X - Y%2), Y, (10 + Y%2), (9 - finished rows))
 ROMB:42EA CD F8 15         call 15F8           // HL = $D000 + B + C * 64
 ROMB:42ED 3E 01            ld   a,01
 ROMB:42EF E0 82            ld   (ff00+82),a
 ROMB:42F1 E0 70            ld   (ff00+70),a
 ROMB:42F3 7E               ld   a,(hl)
 ROMB:42F4 E6 3F            and  a,3F           // A = Terrain ID
 ROMB:42F6 CD 4D 44         call 444D           // Establishes terrain tile graphics (A is terrain/unit, BC is tile's coordinates)
 ROMB:42F9 C1               pop  bc
 ROMB:42FA 04               inc  b
 ROMB:42FB 15               dec  d
 ROMB:42FC 20 EB            jr   nz,42E9
 ROMB:42FE 0C               inc  c
 ROMB:42FF 1D               dec  e
 ROMB:4300 20 DA            jr   nz,42DC
 ROMB:4302 F1               pop  af
 ROMB:4303 E0 82            ld   (ff00+82),a
 ROMB:4305 E0 70            ld   (ff00+70),a
 ROMB:4307 D1               pop  de
 ROMB:4308 C1               pop  bc
 ROMB:4309 C9               ret                 // Establishes all on-screen tiles' terrain graphics, ($FF95) 2 byte holds screen shift coordinates
 ROMB:430A C3 0D 43         jp   430D
 ROMB:430D C5               push bc
 ROMB:430E D5               push de
 ROMB:430F F0 82            ld   a,(ff00+82)
 ROMB:4311 F5               push af
 ROMB:4312 3E 07            ld   a,07
 ROMB:4314 E0 82            ld   (ff00+82),a
 ROMB:4316 E0 70            ld   (ff00+70),a
 ROMB:4318 3E FF            ld   a,FF
 ROMB:431A 21 00 D0         ld   hl,D000
 ROMB:431D 01 80 0D         ld   bc,0D80
 ROMB:4320 CD 79 3B         call 3B79           // WRA7($D000) to ($DD7F) = -1
 ROMB:4323 CD B8 42         call 42B8           // ($FF95) = X shift % 16 * 16, ($FF96) = Y shift % 16 * 16; Button update
 ROMB:4326 21 A3 FF         ld   hl,FFA3
 ROMB:4329 11 5E 43         ld   de,435E        // Starting procedure: Sets ($FF99) and ($FF9A) default of 0, prepares BC tile graphics, sets the stage for $0850 process
 ROMB:432C CD C0 08         call 08C0
 ROMB:432F 11 6A 43         ld   de,436A        // Procedure for each tile: ($FF99) = WRA7($D000 + B + C * 64)
 ROMB:4332 CD C0 08         call 08C0
 ROMB:4335 11 7C 43         ld   de,437C        // Procedure for each relative tile: If ($D000 + B + C * 64) = -1 and coordinates are in view, A = 0, H = 0, and D = ($FF99) + 1; otherwise, A = 1, H = 1, and D isn't set
 ROMB:4338 CD C0 08         call 08C0
 ROMB:433B 11 A1 43         ld   de,43A1        // Conditional procedure for each relative tile: Prepares tiles graphics; ($FF9A) defaulted to D with required change playing out 4 frame loading before tile graphics preparation
 ROMB:433E CD C0 08         call 08C0
 ROMB:4341 AF               xor  a
 ROMB:4342 E0 9A            ld   (ff00+9A),a    // ($FF9A) defaulted to 0
 ROMB:4344 FA 33 C6         ld   a,(C633)
 ROMB:4347 E6 01            and  a,01
 ROMB:4349 87               add  a
 ROMB:434A 21 46 C6         ld   hl,C646
 ROMB:434D CD BC 29         call 29BC           // HL += A
 ROMB:4350 2A               ldi  a,(hl)
 ROMB:4351 47               ld   b,a
 ROMB:4352 4E               ld   c,(hl)         // BC = active player's HQ coordinates
 ROMB:4353 CD 50 08         call 0850           // ($FFA3) process; then loop making use of list of tiles starting at WRA7($DE00), starting with ($FFA5) process, and then loop per adjacent tile that does ($FFA7) process where result A = 0 adds the tile to the WRA7($DE00) table list and manages the ($FFA9) process; big loop done when all tiles are checked
 ROMB:4356 F1               pop  af
 ROMB:4357 E0 82            ld   (ff00+82),a
 ROMB:4359 E0 70            ld   (ff00+70),a
 ROMB:435B D1               pop  de
 ROMB:435C C1               pop  bc
 ROMB:435D C9               ret                 // Initial loading animation of map for gameplay
 ROMB:435E AF               xor  a
 ROMB:435F E0 99            ld   (ff00+99),a
 ROMB:4361 CD C5 08         call 08C5           // ($DE00 + ($FFA2) * 2) 2 byte = BC, ($FFA2) += 1
 ROMB:4364 16 00            ld   d,00
 ROMB:4366 CD A1 43         call 43A1           // Prepares tiles graphics; ($FF9A) defaulted to 0 with required change playing out 4 frame loading before tile graphics preparation
 ROMB:4369 C9               ret                 // Sets ($FF99) and ($FF9A) default of 0, prepares BC tile graphics, sets the stage for $0850 process
 ROMB:436A 79               ld   a,c
 ROMB:436B 0F               rrca 
 ROMB:436C 0F               rrca 
 ROMB:436D 6F               ld   l,a
 ROMB:436E E6 0F            and  a,0F
 ROMB:4370 C6 D0            add  a,D0
 ROMB:4372 67               ld   h,a
 ROMB:4373 7D               ld   a,l
 ROMB:4374 E6 F0            and  a,F0
 ROMB:4376 80               add  b
 ROMB:4377 6F               ld   l,a
 ROMB:4378 7E               ld   a,(hl)         // A = ($D000 + B + C * 64)
 ROMB:4379 E0 99            ld   (ff00+99),a    // ($FF99) = ($D000 + B + C * 64)
 ROMB:437B C9               ret  
 ROMB:437C 79               ld   a,c
 ROMB:437D 0F               rrca 
 ROMB:437E 0F               rrca 
 ROMB:437F 6F               ld   l,a
 ROMB:4380 E6 0F            and  a,0F
 ROMB:4382 C6 D0            add  a,D0
 ROMB:4384 67               ld   h,a
 ROMB:4385 7D               ld   a,l
 ROMB:4386 E6 F0            and  a,F0
 ROMB:4388 80               add  b
 ROMB:4389 6F               ld   l,a            // HL = $D000 + B + C * 64
 ROMB:438A 7E               ld   a,(hl)
 ROMB:438B FE FF            cp   a,FF
 ROMB:438D 20 0E            jr   nz,439D        // End with A = 1 and H = 1 if ($D000 + B + C * 64) != -1
 ROMB:438F CD C6 44         call 44C6           // A = 0 if coordinates are in view; 1 if not
 ROMB:4392 A7               and  a
 ROMB:4393 20 08            jr   nz,439D        // End with A = 1 and H = 1 if coordinates are not in view
 ROMB:4395 F0 99            ld   a,(ff00+99)
 ROMB:4397 3C               inc  a
 ROMB:4398 57               ld   d,a
 ROMB:4399 26 00            ld   h,00
 ROMB:439B 18 02            jr   439F
 ROMB:439D 26 01            ld   h,01
 ROMB:439F 7C               ld   a,h
 ROMB:43A0 C9               ret                 // If ($D000 + B + C * 64) = -1 and coordinates are in view, A = 0, H = 0, and D = ($FF99) + 1; otherwise, A = 1, H = 1, and D isn't set
 ROMB:43A1 79               ld   a,c
 ROMB:43A2 0F               rrca 
 ROMB:43A3 0F               rrca 
 ROMB:43A4 6F               ld   l,a            // L = C / 4 + C%4 * 64
 ROMB:43A5 E6 0F            and  a,0F
 ROMB:43A7 C6 D0            add  a,D0
 ROMB:43A9 67               ld   h,a
 ROMB:43AA 7D               ld   a,l
 ROMB:43AB E6 F0            and  a,F0
 ROMB:43AD 80               add  b
 ROMB:43AE 6F               ld   l,a            // HL = $D000 + B + C * 64
 ROMB:43AF 72               ld   (hl),d         // ($D000 + B + C * 64) = D
 ROMB:43B0 F0 9A            ld   a,(ff00+9A)
 ROMB:43B2 BA               cp   d
 ROMB:43B3 28 18            jr   z,43CD         // End with just preparing this tile's graphics if ($FF9A) = D
 ROMB:43B5 7A               ld   a,d
 ROMB:43B6 E0 9A            ld   (ff00+9A),a
 ROMB:43B8 C5               push bc
 ROMB:43B9 D5               push de
 ROMB:43BA 3E 01            ld   a,01
 ROMB:43BC CD 44 38         call 3844
 ROMB:43BF CD A2 05         call 05A2           // Button update, next frame
 ROMB:43C2 CD A2 05         call 05A2           // Button update, next frame
 ROMB:43C5 CD A2 05         call 05A2           // Button update, next frame
 ROMB:43C8 CD A2 05         call 05A2           // Button update, next frame
 ROMB:43CB D1               pop  de
 ROMB:43CC C1               pop  bc
 ROMB:43CD CD D1 43         call 43D1           // Establishes tile BC's entire graphics
 ROMB:43D0 C9               ret                 // Prepares tiles graphics; ($FF9A) defaulted to D with required change playing out 4 frame loading before tile graphics preparation
 ROMB:43D1 F0 82            ld   a,(ff00+82)
 ROMB:43D3 F5               push af
 ROMB:43D4 D5               push de
 ROMB:43D5 78               ld   a,b
 ROMB:43D6 FE FF            cp   a,FF
 ROMB:43D8 28 06            jr   z,43E0
 ROMB:43DA CD C6 44         call 44C6           // A = 0 if coordinates are in view; 1 if not
 ROMB:43DD A7               and  a
 ROMB:43DE 20 26            jr   nz,4406        // End immediately if tile is out of view
 ROMB:43E0 CD F8 15         call 15F8           // HL = tile table location
 ROMB:43E3 3E 01            ld   a,01
 ROMB:43E5 E0 82            ld   (ff00+82),a
 ROMB:43E7 E0 70            ld   (ff00+70),a
 ROMB:43E9 56               ld   d,(hl)         // D = Terrain Type, bit 6 is is Loaded status, bit 7 is End Turn status
 ROMB:43EA 3E 02            ld   a,02
 ROMB:43EC E0 82            ld   (ff00+82),a
 ROMB:43EE E0 70            ld   (ff00+70),a
 ROMB:43F0 5E               ld   e,(hl)         // E = Occupying Unit Type, bit 7 holds viable movement
 ROMB:43F1 CB 7B            bit  7,e
 ROMB:43F3 20 25            jr   nz,441A        // Jump if movement is viable
 ROMB:43F5 7A               ld   a,d
 ROMB:43F6 E6 C0            and  a,C0           // Has unit moved or have units Loaded?
 ROMB:43F8 20 13            jr   nz,440D        // Jump if occupying unit has moved or has units Loaded
 ROMB:43FA 7B               ld   a,e
 ROMB:43FB A7               and  a
 ROMB:43FC 20 03            jr   nz,4401        // Invalid movement, no movement or Loading, but unit exists results in Jump
 ROMB:43FE 7A               ld   a,d
 ROMB:43FF 18 02            jr   4403
 ROMB:4401 C6 34            add  a,34
 ROMB:4403 CD 4D 44         call 444D           // Establishes terrain/unit tile graphics (A is terrain/unit, BC is tile's coordinates)
 ROMB:4406 D1               pop  de
 ROMB:4407 F1               pop  af
 ROMB:4408 E0 82            ld   (ff00+82),a
 ROMB:440A E0 70            ld   (ff00+70),a
 ROMB:440C C9               ret  
 ROMB:440D 7B               ld   a,e            // A = occupying unit's type; occupying unit has moved or has units Loaded
 ROMB:440E A7               and  a
 ROMB:440F 20 05            jr   nz,4416        // Jump if occupying unit exists and has moved or Loaded units
 ROMB:4411 7A               ld   a,d
 ROMB:4412 E6 3F            and  a,3F           // Terrain type
 ROMB:4414 18 12            jr   4428           // A holds terrain, D's last 2 bits will hold Transport/End Turn--but those should be empty
 ROMB:4416 C6 34            add  a,34
 ROMB:4418 18 0E            jr   4428           // A holds unit, D's last 2 bits will hold Transport/End Turn
 ROMB:441A 7B               ld   a,e
 ROMB:441B E6 7F            and  a,7F
 ROMB:441D 20 05            jr   nz,4424        // Jump if movement is viable and tile is occupied by unit
 ROMB:441F 7A               ld   a,d
 ROMB:4420 E6 3F            and  a,3F
 ROMB:4422 18 02            jr   4426
 ROMB:4424 C6 34            add  a,34           // Get here when movement viable and tile is occupied by unit
 ROMB:4426 16 00            ld   d,00
 ROMB:4428 CD 4D 44         call 444D           // Establishes terrain/unit tile graphics (A is terrain/unit, BC is tile's coordinates)
 ROMB:442B 3E 00            ld   a,00
 ROMB:442D E0 83            ld   (ff00+83),a
 ROMB:442F E0 4F            ld   (ff00+4F),a    // VRA0
 ROMB:4431 7A               ld   a,d
 ROMB:4432 07               rlca 
 ROMB:4433 07               rlca 
 ROMB:4434 E6 03            and  a,03
 ROMB:4436 C6 B4            add  a,B4           // Movement, Transport, End Turn, Transport/End Turn
 ROMB:4438 CD 2D 0F         call 0F2D           // (HL) = A with cooldown based on bit 1,($FF41)
 ROMB:443B 3E 01            ld   a,01
 ROMB:443D E0 83            ld   (ff00+83),a
 ROMB:443F E0 4F            ld   (ff00+4F),a    // VRA1
 ROMB:4441 3E 00            ld   a,00
 ROMB:4443 CD 2D 0F         call 0F2D           // (HL) = 0 with cooldown based on bit 1,($FF41)
 ROMB:4446 D1               pop  de
 ROMB:4447 F1               pop  af
 ROMB:4448 E0 82            ld   (ff00+82),a
 ROMB:444A E0 70            ld   (ff00+70),a
 ROMB:444C C9               ret                 // Establishes tile BC's entire graphics
 ROMB:444D C5               push bc
 ROMB:444E D5               push de
 ROMB:444F 5F               ld   e,a
 ROMB:4450 CD DD 15         call 15DD           // HL = $9800 + C%16 * 64 + B%16 * 2 + C%2
 ROMB:4453 E5               push hl
 ROMB:4454 26 00            ld   h,00
 ROMB:4456 6B               ld   l,e
 ROMB:4457 29               add  hl,hl
 ROMB:4458 29               add  hl,hl
 ROMB:4459 29               add  hl,hl          // HL = A * 8
 ROMB:445A 11 6C 1C         ld   de,1C6C
 ROMB:445D 19               add  hl,de          // HL = $1C6C + A * 8
 ROMB:445E 44               ld   b,h
 ROMB:445F 4D               ld   c,l            // BC = $1C6C + A * 8
 ROMB:4460 E1               pop  hl             // HL = $9800 + C%16 * 64 + B%16 * 2 + C%2
 ROMB:4461 3E 00            ld   a,00
 ROMB:4463 E0 83            ld   (ff00+83),a
 ROMB:4465 E0 4F            ld   (ff00+4F),a    // VRA0
 ROMB:4467 0A               ld   a,(bc)
 ROMB:4468 03               inc  bc
 ROMB:4469 CD 2D 0F         call 0F2D           // VRA0($9800 + C%16 * 64 + B%16 * 2 + C%2) holds tile upper-left graphics portion
 ROMB:446C 3E 01            ld   a,01
 ROMB:446E E0 83            ld   (ff00+83),a
 ROMB:4470 E0 4F            ld   (ff00+4F),a    // VRA1
 ROMB:4472 0A               ld   a,(bc)
 ROMB:4473 03               inc  bc
 ROMB:4474 CD 2D 0F         call 0F2D           // VRA1($9800 + C%16 * 64 + B%16 * 2 + C%2) holds tile upper-left graphics portion palette
 ROMB:4477 E5               push hl
 ROMB:4478 CD EA 0E         call 0EEA           // L = (L/32)*32 + (L+1)%32
 ROMB:447B 3E 00            ld   a,00
 ROMB:447D E0 83            ld   (ff00+83),a
 ROMB:447F E0 4F            ld   (ff00+4F),a    // VRA0
 ROMB:4481 0A               ld   a,(bc)
 ROMB:4482 03               inc  bc
 ROMB:4483 CD 2D 0F         call 0F2D           // VRA0(HL) = A with cooldown based on bit 1,($FF41)
 ROMB:4486 3E 01            ld   a,01
 ROMB:4488 E0 83            ld   (ff00+83),a
 ROMB:448A E0 4F            ld   (ff00+4F),a    // VRA1
 ROMB:448C 0A               ld   a,(bc)
 ROMB:448D 03               inc  bc
 ROMB:448E CD 2D 0F         call 0F2D           // (HL) = A with cooldown based on bit 1,($FF41) (Upper-right)
 ROMB:4491 E1               pop  hl             // HL = $9800 + C%16 * 64 + B%16 * 2 + C%2
 ROMB:4492 CD F7 0E         call 0EF7           // HL = AND (HL + $20),$9BFF
 ROMB:4495 3E 00            ld   a,00
 ROMB:4497 E0 83            ld   (ff00+83),a
 ROMB:4499 E0 4F            ld   (ff00+4F),a    // VRA0
 ROMB:449B 0A               ld   a,(bc)
 ROMB:449C 03               inc  bc
 ROMB:449D CD 2D 0F         call 0F2D           // (HL) = A with cooldown based on bit 1,($FF41)
 ROMB:44A0 3E 01            ld   a,01
 ROMB:44A2 E0 83            ld   (ff00+83),a
 ROMB:44A4 E0 4F            ld   (ff00+4F),a    // VRA1
 ROMB:44A6 0A               ld   a,(bc)
 ROMB:44A7 03               inc  bc
 ROMB:44A8 CD 2D 0F         call 0F2D           // (HL) = A with cooldown based on bit 1,($FF41) (Lower-left)
 ROMB:44AB CD EA 0E         call 0EEA           // L = (L/32)*32 + (L+1)%32
 ROMB:44AE 3E 00            ld   a,00
 ROMB:44B0 E0 83            ld   (ff00+83),a
 ROMB:44B2 E0 4F            ld   (ff00+4F),a    // VRA0
 ROMB:44B4 0A               ld   a,(bc)
 ROMB:44B5 03               inc  bc
 ROMB:44B6 CD 2D 0F         call 0F2D           // (HL) = A with cooldown based on bit 1,($FF41)
 ROMB:44B9 3E 01            ld   a,01
 ROMB:44BB E0 83            ld   (ff00+83),a
 ROMB:44BD E0 4F            ld   (ff00+4F),a    // VRA1
 ROMB:44BF 0A               ld   a,(bc)
 ROMB:44C0 CD 2D 0F         call 0F2D           // (HL) = A with cooldown based on bit 1,($FF41) (Lower-right)
 ROMB:44C3 D1               pop  de
 ROMB:44C4 C1               pop  bc
 ROMB:44C5 C9               ret                 // Establishes terrain/unit tile graphics (A is terrain/unit, BC is tile's coordinates)
 ROMB:44C6 C5               push bc
 ROMB:44C7 D5               push de
 ROMB:44C8 E5               push hl
 ROMB:44C9 79               ld   a,c
 ROMB:44CA E6 01            and  a,01
 ROMB:44CC 5F               ld   e,a
 ROMB:44CD 21 8B C9         ld   hl,C98B
 ROMB:44D0 78               ld   a,b
 ROMB:44D1 83               add  e              // A = B + C%2
 ROMB:44D2 BE               cp   (hl)           // Compare result to X Shift
 ROMB:44D3 38 1A            jr   c,44EF         // End with A = 1 if B + C%2 < X Shift
 ROMB:44D5 FA 8B C9         ld   a,(C98B)
 ROMB:44D8 C6 09            add  a,09
 ROMB:44DA B8               cp   b
 ROMB:44DB 38 12            jr   c,44EF         // End with A = 1 if B - 9 > X Shift
 ROMB:44DD 21 8C C9         ld   hl,C98C
 ROMB:44E0 79               ld   a,c
 ROMB:44E1 BE               cp   (hl)
 ROMB:44E2 38 0B            jr   c,44EF         // End with A = 1 if C < Y Shift
 ROMB:44E4 FA 8C C9         ld   a,(C98C)
 ROMB:44E7 C6 08            add  a,08
 ROMB:44E9 B9               cp   c
 ROMB:44EA 38 03            jr   c,44EF         // End with A = 1 if C - 8 > Y Shift
 ROMB:44EC AF               xor  a
 ROMB:44ED 18 02            jr   44F1
 ROMB:44EF 3E 01            ld   a,01
 ROMB:44F1 E1               pop  hl
 ROMB:44F2 D1               pop  de
 ROMB:44F3 C1               pop  bc
 ROMB:44F4 C9               ret                 // A = 0 if coordinates are in view; 1 if not
 ROMB:44F5 C5               push bc
 ROMB:44F6 D5               push de
 ROMB:44F7 E5               push hl
 ROMB:44F8 79               ld   a,c
 ROMB:44F9 E6 01            and  a,01
 ROMB:44FB 5F               ld   e,a
 ROMB:44FC 21 8B C9         ld   hl,C98B
 ROMB:44FF 78               ld   a,b
 ROMB:4500 BE               cp   (hl)
 ROMB:4501 38 1B            jr   c,451E         // End with A = 1 if tile left of full view
 ROMB:4503 FA 8B C9         ld   a,(C98B)
 ROMB:4506 C6 09            add  a,09
 ROMB:4508 93               sub  e
 ROMB:4509 B8               cp   b
 ROMB:450A 38 12            jr   c,451E         // End with A = 1 if tile right of full view
 ROMB:450C 21 8C C9         ld   hl,C98C
 ROMB:450F 79               ld   a,c
 ROMB:4510 BE               cp   (hl)
 ROMB:4511 38 0B            jr   c,451E
 ROMB:4513 FA 8C C9         ld   a,(C98C)
 ROMB:4516 C6 08            add  a,08
 ROMB:4518 B9               cp   c
 ROMB:4519 38 03            jr   c,451E
 ROMB:451B AF               xor  a
 ROMB:451C 18 02            jr   4520
 ROMB:451E 3E 01            ld   a,01
 ROMB:4520 E1               pop  hl
 ROMB:4521 D1               pop  de
 ROMB:4522 C1               pop  bc
 ROMB:4523 C9               ret                 // A = 1 if tile is outside full view, 0 otherwise
 ROMB:4524 F0 82            ld   a,(ff00+82)
 ROMB:4526 F5               push af
 ROMB:4527 C5               push bc
 ROMB:4528 E5               push hl
 ROMB:4529 3E 01            ld   a,01
 ROMB:452B E0 82            ld   (ff00+82),a
 ROMB:452D E0 70            ld   (ff00+70),a
 ROMB:452F AF               xor  a
 ROMB:4530 21 00 D0         ld   hl,D000
 ROMB:4533 01 80 0D         ld   bc,0D80
 ROMB:4536 CD 79 3B         call 3B79           // Empties WRA1($D000) to ($DD7F)
 ROMB:4539 3E 02            ld   a,02
 ROMB:453B E0 82            ld   (ff00+82),a
 ROMB:453D E0 70            ld   (ff00+70),a
 ROMB:453F AF               xor  a
 ROMB:4540 21 00 D0         ld   hl,D000
 ROMB:4543 01 80 0D         ld   bc,0D80
 ROMB:4546 CD 79 3B         call 3B79           // Empties WRA2($D000) to ($DD7F)
 ROMB:4549 E1               pop  hl
 ROMB:454A C1               pop  bc
 ROMB:454B F1               pop  af
 ROMB:454C E0 82            ld   (ff00+82),a
 ROMB:454E E0 70            ld   (ff00+70),a
 ROMB:4550 C9               ret                 // Empties map data stored on WRAM Banks 1 and 2
 ROMB:4551 D5               push de
 ROMB:4552 16 0A            ld   d,0A
 ROMB:4554 79               ld   a,c
 ROMB:4555 E6 01            and  a,01
 ROMB:4557 28 07            jr   z,4560         // If C is even: set 7, ($FFAC); B; C; 10
 ROMB:4559 05               dec  b
 ROMB:455A 14               inc  d
 ROMB:455B 18 03            jr   4560           // If C is odd: set 7, ($FFAC); B - 1; C; 11
 ROMB:455D D5               push de
 ROMB:455E 16 09            ld   d,09           // set 7,($FFAC); B; C; 9
 ROMB:4560 7A               ld   a,d
 ROMB:4561 E0 AF            ld   (ff00+AF),a
 ROMB:4563 78               ld   a,b
 ROMB:4564 E0 AD            ld   (ff00+AD),a
 ROMB:4566 79               ld   a,c
 ROMB:4567 E0 AE            ld   (ff00+AE),a
 ROMB:4569 F0 AC            ld   a,(ff00+AC)
 ROMB:456B CB FF            set  7,a
 ROMB:456D E0 AC            ld   (ff00+AC),a
 ROMB:456F D1               pop  de
 ROMB:4570 C9               ret  
 ROMB:4571 F0 AC            ld   a,(ff00+AC)
 ROMB:4573 CB 77            bit  6,a
 ROMB:4575 C8               ret  z
 ROMB:4576 CB 47            bit  0,a            // Left
 ROMB:4578 20 0D            jr   nz,4587
 ROMB:457A CB 4F            bit  1,a            // Right
 ROMB:457C 20 12            jr   nz,4590
 ROMB:457E CB 57            bit  2,a            // Up
 ROMB:4580 20 1F            jr   nz,45A1
 ROMB:4582 CB 5F            bit  3,a            // Down
 ROMB:4584 20 24            jr   nz,45AA
 ROMB:4586 C9               ret  
 ROMB:4587 FA 8B C9         ld   a,(C98B)       // Left
 ROMB:458A 3D               dec  a
 ROMB:458B EA 8B C9         ld   (C98B),a
 ROMB:458E 18 07            jr   4597
 ROMB:4590 FA 8B C9         ld   a,(C98B)       // Right
 ROMB:4593 3C               inc  a
 ROMB:4594 EA 8B C9         ld   (C98B),a
 ROMB:4597 E6 0F            and  a,0F
 ROMB:4599 CB 37            swap a
 ROMB:459B E0 95            ld   (ff00+95),a
 ROMB:459D E0 43            ld   (ff00+43),a    // SCX = 16 * Upper Left new X coordinate
 ROMB:459F 18 1C            jr   45BD           // Finishes horizontal movement with clearing ($FFAC)
 ROMB:45A1 FA 8C C9         ld   a,(C98C)       // Up
 ROMB:45A4 3D               dec  a
 ROMB:45A5 EA 8C C9         ld   (C98C),a
 ROMB:45A8 18 0B            jr   45B5
 ROMB:45AA CB 9F            res  3,a            // Down
 ROMB:45AC E0 AC            ld   (ff00+AC),a
 ROMB:45AE FA 8C C9         ld   a,(C98C)
 ROMB:45B1 3C               inc  a
 ROMB:45B2 EA 8C C9         ld   (C98C),a
 ROMB:45B5 E6 0F            and  a,0F
 ROMB:45B7 CB 37            swap a
 ROMB:45B9 E0 96            ld   (ff00+96),a
 ROMB:45BB E0 42            ld   (ff00+42),a    // SCY = 16 * Upper Left new Y coordinate
 ROMB:45BD AF               xor  a
 ROMB:45BE E0 AC            ld   (ff00+AC),a
 ROMB:45C0 C9               ret                 // Handles new View area coordinates and scroll
 ROMB:45C1 FA 8F C9         ld   a,(C98F)
 ROMB:45C4 47               ld   b,a
 ROMB:45C5 FA 8B C9         ld   a,(C98B)
 ROMB:45C8 80               add  b
 ROMB:45C9 EA 91 C9         ld   (C991),a       // Sets up Cursor's overall X coordinate
 ROMB:45CC FA 90 C9         ld   a,(C990)
 ROMB:45CF 47               ld   b,a
 ROMB:45D0 FA 8C C9         ld   a,(C98C)
 ROMB:45D3 80               add  b
 ROMB:45D4 EA 92 C9         ld   (C992),a       // Sets up Cursor's overall Y coordinate
 ROMB:45D7 18 26            jr   45FF           // WRA4($D001 + ($C98D) * 16) 2 byte reverse effectively points to center of cursor's tile, after overall coordinate are set up

 ROMB:45D9 D5               push de
 ROMB:45DA FA 8B C9         ld   a,(C98B)
 ROMB:45DD 57               ld   d,a
 ROMB:45DE 78               ld   a,b
 ROMB:45DF 92               sub  d
 ROMB:45E0 38 1B            jr   c,45FD         // End immediately if B < X
 ROMB:45E2 57               ld   d,a            // D holds difference with X
 ROMB:45E3 FA 8C C9         ld   a,(C98C)
 ROMB:45E6 5F               ld   e,a
 ROMB:45E7 79               ld   a,c
 ROMB:45E8 93               sub  e
 ROMB:45E9 38 12            jr   c,45FD         // End immediately if C < Y
 ROMB:45EB EA 90 C9         ld   (C990),a
 ROMB:45EE 7A               ld   a,d
 ROMB:45EF EA 8F C9         ld   (C98F),a       // Cursor's Within View Coordinates established
 ROMB:45F2 78               ld   a,b
 ROMB:45F3 EA 91 C9         ld   (C991),a
 ROMB:45F6 79               ld   a,c
 ROMB:45F7 EA 92 C9         ld   (C992),a       // Cursor's Overall Coordinates established
 ROMB:45FA CD FF 45         call 45FF           // WRA4($D001 + ($C98D) * 16) 2 byte reverse effectively points to center of cursor's tile
 ROMB:45FD D1               pop  de
 ROMB:45FE C9               ret  
 ROMB:45FF FA 8F C9         ld   a,(C98F)
 ROMB:4602 CB 37            swap a
 ROMB:4604 C6 10            add  a,10
 ROMB:4606 47               ld   b,a            // B = 16 * (1 + Cursor's Within View X)
 ROMB:4607 FA 90 C9         ld   a,(C990)
 ROMB:460A CB 37            swap a
 ROMB:460C C6 18            add  a,18
 ROMB:460E 4F               ld   c,a            // C = 16 * (1 + Cursor's Within View Y) + 8
 ROMB:460F FA 92 C9         ld   a,(C992)
 ROMB:4612 E6 01            and  a,01
 ROMB:4614 28 04            jr   z,461A         // Jumps if Cursor Overall Y is odd
 ROMB:4616 78               ld   a,b
 ROMB:4617 C6 08            add  a,08
 ROMB:4619 47               ld   b,a            // Accounts for even-numbered rows
 ROMB:461A FA 8D C9         ld   a,(C98D)
 ROMB:461D CD AE 2E         call 2EAE           // WRA4($D001 + ($C98D) * 16) 2 byte reverse effectively points to center of cursor's tile
 ROMB:4620 C9               ret  
 ROMB:4621 3E 00            ld   a,00
 ROMB:4623 E0 83            ld   (ff00+83),a
 ROMB:4625 E0 4F            ld   (ff00+4F),a    // VRA0
 ROMB:4627 11 A4 1A         ld   de,1AA4
 ROMB:462A 21 00 86         ld   hl,8600
 ROMB:462D 01 B0 01         ld   bc,01B0
 ROMB:4630 CD 59 3B         call 3B59           // VRA0($8600 ~ $87AF) = ($1AA4 ~ $1C53)
 ROMB:4633 C9               ret                 // Sets up Cursor tiles in VRA0 tiles 96~122
 ROMB:4634 3E 20            ld   a,20
 ROMB:4636 0E 30            ld   c,30
 ROMB:4638 06 0B            ld   b,0B
 ROMB:463A 11 59 1A         ld   de,1A59        // Normal Cursor
 ROMB:463D CD E8 2D         call 2DE8           // A = number of already active sprites; $Dxx5~$DxxB prepared (B is ROM Block of Sprite, C is base Character Tile # / 2 with bit 7 determining VRAM Bank; and DE is pointer to sprite stats modification tables pointers)
 ROMB:4640 EA 8D C9         ld   (C98D),a
 ROMB:4643 06 02            ld   b,02
 ROMB:4645 CD C9 2E         call 2EC9           // WRA4($D003 + A * 16) has Palette bits modified according to B
 ROMB:4648 AF               xor  a
 ROMB:4649 EA 8E C9         ld   (C98E),a
 ROMB:464C C9               ret                 // Basic Cursor Sprite stats set up
 ROMB:464D FA 8D C9         ld   a,(C98D)
 ROMB:4650 CD 1F 2E         call 2E1F           // Handles clear-up of sprite
 ROMB:4653 C9               ret                 // Handles clear-up of Cursor Sprite
 ROMB:4654 FA 91 C9         ld   a,(C991)
 ROMB:4657 47               ld   b,a
 ROMB:4658 FA 92 C9         ld   a,(C992)
 ROMB:465B 4F               ld   c,a
 ROMB:465C FA 8E C9         ld   a,(C98E)
 ROMB:465F A7               and  a
 ROMB:4660 20 10            jr   nz,4672        // Branches if flag for building possible is already active
 ROMB:4662 CD BD 59         call 59BD           // A = property number value if controlled by active player and within 3 spaces of their Capital; otherwise, A = 0 (BC holds current coordinates)
 ROMB:4665 A7               and  a
 ROMB:4666 28 17            jr   z,467F         // Ends immediately if building is still not happening
 ROMB:4668 CD 8C 46         call 468C           // Updates Cursor Sprite to Arrowed Cursor
 ROMB:466B 3E 01            ld   a,01
 ROMB:466D EA 8E C9         ld   (C98E),a
 ROMB:4670 18 0D            jr   467F
 ROMB:4672 CD BD 59         call 59BD           // A = property number value if controlled by active player and within 3 spaces of their Capital; otherwise, A = 0 (BC holds current coordinates)
 ROMB:4675 A7               and  a
 ROMB:4676 20 07            jr   nz,467F        // Ends immediately if building is still possible
 ROMB:4678 CD 80 46         call 4680           // Updates Cursor Sprite to Normal Cursor
 ROMB:467B AF               xor  a
 ROMB:467C EA 8E C9         ld   (C98E),a
 ROMB:467F C9               ret                 // Updates Cursor Sprite based on if building on tile is possible
 ROMB:4680 FA 8D C9         ld   a,(C98D)
 ROMB:4683 06 0B            ld   b,0B
 ROMB:4685 11 59 1A         ld   de,1A59
 ROMB:4688 CD E8 2E         call 2EE8           // WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
 ROMB:468B C9               ret                 // Updates Cursor Sprite to Normal Cursor
 ROMB:468C FA 8D C9         ld   a,(C98D)
 ROMB:468F 06 0B            ld   b,0B
 ROMB:4691 11 61 1A         ld   de,1A61
 ROMB:4694 CD E8 2E         call 2EE8           // WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
 ROMB:4697 C9               ret                 // Updates Cursor Sprite to Arrowed Cursor
 ROMB:4698 FA 8D C9         ld   a,(C98D)
 ROMB:469B 06 0B            ld   b,0B
 ROMB:469D 11 69 1A         ld   de,1A69
 ROMB:46A0 CD E8 2E         call 2EE8           // WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
 ROMB:46A3 C9               ret                 // Updates Cursor Sprite to Missile Aiming Cursor Valid
 ROMB:46A4 FA 8D C9         ld   a,(C98D)
 ROMB:46A7 06 0B            ld   b,0B
 ROMB:46A9 11 6E 1A         ld   de,1A6E
 ROMB:46AC CD E8 2E         call 2EE8           // WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
 ROMB:46AF C9               ret                 // Updates Cursor Sprite to Missile Aiming Cursor Invalid
 ROMB:46B0 FA 8D C9         ld   a,(C98D)
 ROMB:46B3 06 0B            ld   b,0B
 ROMB:46B5 11 8A 1A         ld   de,1A8A
 ROMB:46B8 CD E8 2E         call 2EE8           // WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
 ROMB:46BB C9               ret                 // Updates Cursor Sprite to Surrounding Area Cursor
 ROMB:46BC FA 8D C9         ld   a,(C98D)
 ROMB:46BF 06 02            ld   b,02
 ROMB:46C1 CD C9 2E         call 2EC9           // WRA4($D003 + A * 16) has Palette bits modified according to B
 ROMB:46C4 C9               ret                 // Cursor Sprite Palette White/Teal
 ROMB:46C5 FA 8D C9         ld   a,(C98D)
 ROMB:46C8 06 03            ld   b,03
 ROMB:46CA CD C9 2E         call 2EC9           // WRA4($D003 + A * 16) has Palette bits modified according to B
 ROMB:46CD C9               ret                 // Cursor Sprite Palette Aqua/Dark Blue
 ROMB:46CE FA 8D C9         ld   a,(C98D)
 ROMB:46D1 06 04            ld   b,04
 ROMB:46D3 CD C9 2E         call 2EC9           // WRA4($D003 + A * 16) has Palette bits modified according to B
 ROMB:46D6 C9               ret                 // Cursor Sprite Palette Orange/Dark Red
 ROMB:46D7 3E 20            ld   a,20
 ROMB:46D9 0E 30            ld   c,30
 ROMB:46DB 06 0B            ld   b,0B
 ROMB:46DD 11 82 1A         ld   de,1A82        // Big Cursor
 ROMB:46E0 CD E8 2D         call 2DE8           // A = number of already active sprites; $Dxx5~$DxxB prepared (B is ROM Block of Sprite, C is base Character Tile # / 2 with bit 7 determining VRAM Bank; and DE is pointer to sprite stats modification tables pointers)
 ROMB:46E3 EA 8D C9         ld   (C98D),a       // ($C98D) = number of sprites before Big Cursor
 ROMB:46E6 06 02            ld   b,02
 ROMB:46E8 CD C9 2E         call 2EC9           // WRA4($D003 + A * 16) has Palette bits modified according to B
 ROMB:46EB FA 8D C9         ld   a,(C98D)
 ROMB:46EE 01 5C 58         ld   bc,585C
 ROMB:46F1 CD AE 2E         call 2EAE           // WRA4($D001 + A * 16) 2 byte reverse has on-screen pixel coordinates 80,76
 ROMB:46F4 AF               xor  a
 ROMB:46F5 EA 8E C9         ld   (C98E),a
 ROMB:46F8 C9               ret                 // Establishes Big Cursor basic sprite info
 ROMB:46F9 FA 8D C9         ld   a,(C98D)
 ROMB:46FC CD 45 2F         call 2F45           // res 0,($D000 + ($C98D) * 16) WRAM bank 4
 ROMB:46FF C9               ret                 // res 0,($D000 + ($C98D) * 16) WRAM bank 4
 ROMB:4700 FA 8D C9         ld   a,(C98D)
 ROMB:4703 CD 5F 2F         call 2F5F           // set 0,($D000 + ($C98D) * 16) WRAM bank 4
 ROMB:4706 C9               ret                 // set 0,($D000 + ($C98D) * 16) WRAM bank 4
 ROMB:4707 E5               push hl
 ROMB:4708 21 AB 18         ld   hl,18AB
 ROMB:470B 85               add  l
 ROMB:470C 6F               ld   l,a
 ROMB:470D 7C               ld   a,h
 ROMB:470E CE 00            adc  a,00
 ROMB:4710 67               ld   h,a            // HL = $18AB + A
 ROMB:4711 7E               ld   a,(hl)         // A = Terrain base ID
 ROMB:4712 E1               pop  hl
 ROMB:4713 C9               ret 
 ROMB:4714 C5               push bc
 ROMB:4715 F0 82            ld   a,(ff00+82)
 ROMB:4717 F5               push af
 ROMB:4718 3E 01            ld   a,01
 ROMB:471A E0 82            ld   (ff00+82),a
 ROMB:471C E0 70            ld   (ff00+70),a    // Map WRAM Bank
 ROMB:471E CD F8 15         call 15F8
 ROMB:4721 46               ld   b,(hl)         // B = Terrain Type (non-ownsership)
 ROMB:4722 F1               pop  af
 ROMB:4723 E0 82            ld   (ff00+82),a
 ROMB:4725 E0 70            ld   (ff00+70),a
 ROMB:4727 78               ld   a,b
 ROMB:4728 C1               pop  bc
 ROMB:4729 C9               ret                 // A = Terrain Type (non-ownsership)
 ROMB:472A C5               push bc
 ROMB:472B F0 82            ld   a,(ff00+82)
 ROMB:472D F5               push af
 ROMB:472E 3E 02            ld   a,02
 ROMB:4730 E0 82            ld   (ff00+82),a
 ROMB:4732 E0 70            ld   (ff00+70),a
 ROMB:4734 CD F8 15         call 15F8           // HL = $D000 + B + C * 64
 ROMB:4737 46               ld   b,(hl)
 ROMB:4738 F1               pop  af
 ROMB:4739 E0 82            ld   (ff00+82),a
 ROMB:473B E0 70            ld   (ff00+70),a
 ROMB:473D 78               ld   a,b
 ROMB:473E C1               pop  bc
 ROMB:473F C9               ret                 // A = Unit Type of occupying unit with bit 7 holding viable movement
 ROMB:4740 C5               push bc
 ROMB:4741 D5               push de
 ROMB:4742 57               ld   d,a
 ROMB:4743 F0 82            ld   a,(ff00+82)
 ROMB:4745 F5               push af
 ROMB:4746 3E 01            ld   a,01
 ROMB:4748 E0 82            ld   (ff00+82),a
 ROMB:474A E0 70            ld   (ff00+70),a
 ROMB:474C CD F8 15         call 15F8           // HL = $D000 + B + C * 64
 ROMB:474F 72               ld   (hl),d
 ROMB:4750 F1               pop  af
 ROMB:4751 E0 82            ld   (ff00+82),a
 ROMB:4753 E0 70            ld   (ff00+70),a
 ROMB:4755 D1               pop  de
 ROMB:4756 C1               pop  bc
 ROMB:4757 C9               ret                 // Terrain tile updated with A
 ROMB:4758 C5               push bc
 ROMB:4759 D5               push de
 ROMB:475A 57               ld   d,a
 ROMB:475B F0 82            ld   a,(ff00+82)
 ROMB:475D F5               push af
 ROMB:475E 3E 02            ld   a,02
 ROMB:4760 E0 82            ld   (ff00+82),a
 ROMB:4762 E0 70            ld   (ff00+70),a
 ROMB:4764 CD F8 15         call 15F8           // HL = $D000 + B + C * 64
 ROMB:4767 72               ld   (hl),d
 ROMB:4768 F1               pop  af
 ROMB:4769 E0 82            ld   (ff00+82),a
 ROMB:476B E0 70            ld   (ff00+70),a
 ROMB:476D D1               pop  de
 ROMB:476E C1               pop  bc
 ROMB:476F C9               ret                 // Unit tile updated with A (generally Unit Type)
 ROMB:4770 CD 14 47         call 4714           // A = Terrain Type (non-ownsership)
 ROMB:4773 E6 3F            and  a,3F
 ROMB:4775 C9               ret                 // A = Terrain base ID
 ROMB:4776 C5               push bc
 ROMB:4777 D5               push de
 ROMB:4778 57               ld   d,a
 ROMB:4779 F0 82            ld   a,(ff00+82)
 ROMB:477B F5               push af
 ROMB:477C 3E 01            ld   a,01
 ROMB:477E E0 82            ld   (ff00+82),a
 ROMB:4780 E0 70            ld   (ff00+70),a
 ROMB:4782 CD F8 15         call 15F8           // HL = $D000 + B + C * 64
 ROMB:4785 7E               ld   a,(hl)
 ROMB:4786 E6 C0            and  a,C0
 ROMB:4788 B2               or   d
 ROMB:4789 77               ld   (hl),a
 ROMB:478A F1               pop  af
 ROMB:478B E0 82            ld   (ff00+82),a
 ROMB:478D E0 70            ld   (ff00+70),a
 ROMB:478F D1               pop  de
 ROMB:4790 C1               pop  bc
 ROMB:4791 C9               ret                 // Terrain on tile BC updated with A
 ROMB:4792 CD 2A 47         call 472A           // A = Unit Type of occupying unit with bit 7 holding viable movement
 ROMB:4795 E6 7F            and  a,7F           // A = Unit Type of occupying unit
 ROMB:4797 C9               ret  
 ROMB:4798 CD 58 47         call 4758
 ROMB:479B C9               ret                 // Unit tile updated with A (generally Unit Type)
 ROMB:479C A7               and  a
 ROMB:479D 28 1C            jr   z,47BB         // If A = 0, set 7,($D000 + B + C * 64) WRAM Bank #2
 ROMB:479F D5               push de
 ROMB:47A0 5F               ld   e,a
 ROMB:47A1 F0 82            ld   a,(ff00+82)
 ROMB:47A3 F5               push af
 ROMB:47A4 3E 01            ld   a,01
 ROMB:47A6 E0 82            ld   (ff00+82),a
 ROMB:47A8 E0 70            ld   (ff00+70),a
 ROMB:47AA CD F8 15         call 15F8           // HL = $D000 + B + C * 64
 ROMB:47AD CB 0B            rrc  e
 ROMB:47AF CB 0B            rrc  e              // E = A/4 + 64 * A%4
 ROMB:47B1 7E               ld   a,(hl)
 ROMB:47B2 B3               or   e              // OR ($D000 + B + C * 64), A/4 + 64 * A%4
 ROMB:47B3 77               ld   (hl),a
 ROMB:47B4 F1               pop  af
 ROMB:47B5 E0 82            ld   (ff00+82),a
 ROMB:47B7 E0 70            ld   (ff00+70),a
 ROMB:47B9 D1               pop  de
 ROMB:47BA C9               ret                 // A determines which flags in ($D000 + B + C * 64) WRAM Bank 1 are shut off
 ROMB:47BB CD FA 47         call 47FA           // set 7,($D000 + B + C * 64) WRAM Bank #2
 ROMB:47BE C9               ret  
 ROMB:47BF A7               and  a
 ROMB:47C0 28 1B            jr   z,47DD         // If A = 0, res 7,($D000 + B + C * 64) WRAM Bank #2
 ROMB:47C2 D5               push de
 ROMB:47C3 2F               cpl  
 ROMB:47C4 0F               rrca 
 ROMB:47C5 0F               rrca 
 ROMB:47C6 5F               ld   e,a            // E = 255 - A/4 - 64 * A%4
 ROMB:47C7 F0 82            ld   a,(ff00+82)
 ROMB:47C9 F5               push af
 ROMB:47CA 3E 01            ld   a,01
 ROMB:47CC E0 82            ld   (ff00+82),a
 ROMB:47CE E0 70            ld   (ff00+70),a
 ROMB:47D0 CD F8 15         call 15F8           // HL = $D000 + B + C * 64
 ROMB:47D3 7E               ld   a,(hl)
 ROMB:47D4 A3               and  e              // AND ($D000 + B + C * 64), 255 - A/4 - 64 * A%4
 ROMB:47D5 77               ld   (hl),a
 ROMB:47D6 F1               pop  af
 ROMB:47D7 E0 82            ld   (ff00+82),a
 ROMB:47D9 E0 70            ld   (ff00+70),a
 ROMB:47DB D1               pop  de
 ROMB:47DC C9               ret                 // A determines which flags in ($D000 + B + C * 64) WRAM Bank 1 are shut off
 ROMB:47DD CD 0E 48         call 480E
 ROMB:47E0 C9               ret                 // res 7,($D000 + B + C * 64) WRAM Bank #2
 ROMB:47E1 F0 82            ld   a,(ff00+82)
 ROMB:47E3 F5               push af
 ROMB:47E4 3E 01            ld   a,01
 ROMB:47E6 E0 82            ld   (ff00+82),a
 ROMB:47E8 E0 70            ld   (ff00+70),a
 ROMB:47EA CD F8 15         call 15F8           // HL = $D000 + B + C * 64
 ROMB:47ED 7E               ld   a,(hl)
 ROMB:47EE E6 3F            and  a,3F           // A = Terrain type
 ROMB:47F0 77               ld   (hl),a
 ROMB:47F1 CD 0E 48         call 480E
 ROMB:47F4 F1               pop  af
 ROMB:47F5 E0 82            ld   (ff00+82),a
 ROMB:47F7 E0 70            ld   (ff00+70),a
 ROMB:47F9 C9               ret                 // Tile on WRAM Bank #1 has Loaded and End Turn Flags cleared, Viable Movement Flag cleared from WRAM Bank #2 equivalent
 ROMB:47FA F0 82            ld   a,(ff00+82)
 ROMB:47FC F5               push af
 ROMB:47FD 3E 02            ld   a,02
 ROMB:47FF E0 82            ld   (ff00+82),a
 ROMB:4801 E0 70            ld   (ff00+70),a
 ROMB:4803 CD F8 15         call 15F8
 ROMB:4806 CB FE            set  7,(hl)
 ROMB:4808 F1               pop  af
 ROMB:4809 E0 82            ld   (ff00+82),a
 ROMB:480B E0 70            ld   (ff00+70),a
 ROMB:480D C9               ret                 // set 7,($D000 + B + C * 64) WRAM Bank #2
 ROMB:480E F0 82            ld   a,(ff00+82)
 ROMB:4810 F5               push af
 ROMB:4811 3E 02            ld   a,02
 ROMB:4813 E0 82            ld   (ff00+82),a
 ROMB:4815 E0 70            ld   (ff00+70),a
 ROMB:4817 CD F8 15         call 15F8
 ROMB:481A CB BE            res  7,(hl)
 ROMB:481C F1               pop  af
 ROMB:481D E0 82            ld   (ff00+82),a
 ROMB:481F E0 70            ld   (ff00+70),a
 ROMB:4821 C9               ret                 // res 7,($D000 + B + C * 64) WRAM Bank #2
 ROMB:4822 E5               push hl
 ROMB:4823 F3               di   
 ROMB:4824 E0 B0            ld   (ff00+B0),a
 ROMB:4826 21 99 18         ld   hl,1899
 ROMB:4829 CD 35 03         call 0335           // LCD Stat Interrupt procedure: Sets BG & Window Tile Data portion to ($8000~$8FFF)
 ROMB:482C 21 41 FF         ld   hl,FF41
 ROMB:482F CB F6            set  6,(hl)         // LYC=LY Coincident Interrupt Enabled
 ROMB:4831 3E 8C            ld   a,8C
 ROMB:4833 E0 45            ld   (ff00+45),a
 ROMB:4835 E0 98            ld   (ff00+98),a
 ROMB:4837 E0 4A            ld   (ff00+4A),a
 ROMB:4839 3E 07            ld   a,07
 ROMB:483B E0 97            ld   (ff00+97),a
 ROMB:483D E0 4B            ld   (ff00+4B),a
 ROMB:483F CD 51 05         call 0551           // ($FF0F) = 0; set 1,($FFFF) (LCD STAT On)
 ROMB:4842 FB               ei   
 ROMB:4843 CD 14 05         call 0514           // Turns on Window Display
 ROMB:4846 F0 B0            ld   a,(ff00+B0)    // Initial A
 ROMB:4848 4F               ld   c,a
 ROMB:4849 06 8C            ld   b,8C
 ROMB:484B CD D2 04         call 04D2           // Next frame; loop begins here
 ROMB:484E 05               dec  b
 ROMB:484F 05               dec  b
 ROMB:4850 05               dec  b
 ROMB:4851 05               dec  b
 ROMB:4852 78               ld   a,b
 ROMB:4853 3D               dec  a
 ROMB:4854 E0 45            ld   (ff00+45),a
 ROMB:4856 78               ld   a,b
 ROMB:4857 E0 98            ld   (ff00+98),a
 ROMB:4859 E0 4A            ld   (ff00+4A),a
 ROMB:485B B9               cp   c
 ROMB:485C 20 ED            jr   nz,484B
 ROMB:485E E1               pop  hl
 ROMB:485F C9               ret                 // Window scrolls up 4 pixels per frame from Y = 152 to Y = A (A must be a multiple of 4 to avoid an infinite loop error)
 ROMB:4860 CD 1F 05         call 051F           // Shuts off Window Display
 ROMB:4863 F3               di   
 ROMB:4864 CD 5B 05         call 055B           // ($FF0F) = 0; res 1,($FFFF) (LCD STAT Off)
 ROMB:4867 21 41 FF         ld   hl,FF41
 ROMB:486A CB B6            res  6,(hl)         // LYC=LY Coincidence Interrupt Disabled
 ROMB:486C CD 44 03         call 0344           // ($C002) holds $D9
 ROMB:486F FB               ei   
 ROMB:4870 C9               ret                 // Shuts off Window Display, LCD STAT Interrupt, and LYC=LY Coincidence Interrupt
 ROMB:4871 D5               push de
 ROMB:4872 FA DD CC         ld   a,(CCDD)
 ROMB:4875 CB 3F            srl  a
 ROMB:4877 FE 04            cp   a,04
 ROMB:4879 20 1D            jr   nz,4898        // End with A = 1 if unit isn't Work Car
 ROMB:487B CD 70 47         call 4770
 ROMB:487E 57               ld   d,a            // D = Terrain Type
 ROMB:487F CD 6D 7D         call 7D6D           // A = 1 for anything other than a Ruined property, 0 for any Ruined property
 ROMB:4882 A7               and  a
 ROMB:4883 20 02            jr   nz,4887
 ROMB:4885 18 08            jr   488F
 ROMB:4887 7A               ld   a,d
 ROMB:4888 CD F7 7C         call 7CF7           // A = 0 for owner's turn, 1 for opponent's turn, 2 for Neutral property, or 3 for non-property tile
 ROMB:488B FE 00            cp   a,00
 ROMB:488D 20 09            jr   nz,4898        // End with A = 1 if not owner's turn
 ROMB:488F EF 0C BA 58                          // Compares Current Property Strength to max Property Strength
 ROMB:4893 28 03            jr   z,4898         // End with A = 1 if property already at max Strength
 ROMB:4895 AF               xor  a
 ROMB:4896 18 02            jr   489A
 ROMB:4898 3E 01            ld   a,01
 ROMB:489A D1               pop  de
 ROMB:489B C9               ret                 // A = 0 if Develop is viable; 1 otherwise
 ROMB:489C C5               push bc
 ROMB:489D D5               push de
 ROMB:489E FA E5 CC         ld   a,(CCE5)
 ROMB:48A1 A7               and  a
 ROMB:48A2 CA 33 49         jp   z,4933         // Ends with Invalid Sound, "Insufficient Materials" popup, and A = -1 if out of ammo
 ROMB:48A5 FA 91 C9         ld   a,(C991)
 ROMB:48A8 47               ld   b,a
 ROMB:48A9 FA 92 C9         ld   a,(C992)
 ROMB:48AC 4F               ld   c,a            // BC = cursor coordinates
 ROMB:48AD CD 70 47         call 4770           // A = Terrain Type
 ROMB:48B0 CD 6D 7D         call 7D6D           // A = 1 for anything other than a Ruined property, 0 for any Ruined property
 ROMB:48B3 A7               and  a
 ROMB:48B4 20 07            jr   nz,48BD
 ROMB:48B6 FA E5 CC         ld   a,(CCE5)
 ROMB:48B9 FE 02            cp   a,02
 ROMB:48BB 38 76            jr   c,4933         // Corrects Ruined property cost to 2
 ROMB:48BD EF 11 8A 4D                          // set 6,($C783), intended to signify Work Car command usage for the map
 ROMB:48C1 3E 01            ld   a,01           // Develop
 ROMB:48C3 EF 0C BB 66                          // Action Animation cutscenes play out where applicable
 ROMB:48C7 FA 91 C9         ld   a,(C991)
 ROMB:48CA 47               ld   b,a
 ROMB:48CB FA 92 C9         ld   a,(C992)
 ROMB:48CE 4F               ld   c,a
 ROMB:48CF FA E1 CC         ld   a,(CCE1)       // A = unit's HP
 ROMB:48D2 EF 0C F2 58                          // Show Property Strength update for given task on Property (A is increase amount)
 ROMB:48D6 FA E5 CC         ld   a,(CCE5)
 ROMB:48D9 3D               dec  a
 ROMB:48DA EA E5 CC         ld   (CCE5),a
 ROMB:48DD EF 0C BA 58                          // Compares Current Property Strength to max Property Strength
 ROMB:48E1 20 4D            jr   nz,4930        // End immediately if not at max
 ROMB:48E3 3E 13            ld   a,13
 ROMB:48E5 CD 44 38         call 3844
 ROMB:48E8 3E 00            ld   a,00           // Buildup Complete
 ROMB:48EA CD B5 51         call 51B5           // Handles Popup Message as a whole including momentary cursor disabling (A is Popup Message #)
 ROMB:48ED CD 70 47         call 4770
 ROMB:48F0 5F               ld   e,a            // E = Terrain Type
 ROMB:48F1 CD 6D 7D         call 7D6D           // A = 1 for anything other than a Ruined property, 0 for any Ruined property
 ROMB:48F4 A7               and  a
 ROMB:48F5 20 39            jr   nz,4930        // End immediately if non-ruined property
 ROMB:48F7 7B               ld   a,e            // A = Terrain Type
 ROMB:48F8 CD E7 41         call 41E7           // Decrements count of given (ruined) property type
 ROMB:48FB CD 07 47         call 4707           // A = Terrain base ID
 ROMB:48FE 57               ld   d,a            // D = Terrain base ID
 ROMB:48FF 1E 00            ld   e,00
 ROMB:4901 FA 33 C6         ld   a,(C633)
 ROMB:4904 E6 01            and  a,01
 ROMB:4906 28 02            jr   z,490A
 ROMB:4908 1E 0B            ld   e,0B           // Accounts for White Moon
 ROMB:490A 7A               ld   a,d
 ROMB:490B 83               add  e
 ROMB:490C 3D               dec  a
 ROMB:490D 5F               ld   e,a            // E = Non-ruined property
 ROMB:490E CD 76 47         call 4776           // Terrain on tile updated as grateful property
 ROMB:4911 7B               ld   a,e
 ROMB:4912 CD 07 47         call 4707           // A = Terrain base ID
 ROMB:4915 EF 0C AF 58                          // A = initial Property Strength
 ROMB:4919 EF 0C 87 58                          // Initializes Property Strength
 ROMB:491D 7B               ld   a,e
 ROMB:491E CD DB 41         call 41DB           // Increments count of given property type
 ROMB:4921 CD 2F 7C         call 7C2F           // Establishes income values
 ROMB:4924 FA E5 CC         ld   a,(CCE5)
 ROMB:4927 3D               dec  a
 ROMB:4928 EA E5 CC         ld   (CCE5),a
 ROMB:492B EF 11 67 4D                          // Terrain change count incremented (Craft Medal)
 ROMB:492F AF               xor  a
 ROMB:4930 D1               pop  de
 ROMB:4931 C1               pop  bc
 ROMB:4932 C9               ret                 // Develop process fully handled; A = -1 instead if insufficient "ammo"
 ROMB:4933 3E 03            ld   a,03
 ROMB:4935 CD 44 38         call 3844
 ROMB:4938 3E 10            ld   a,10           // Insufficient Materials
 ROMB:493A CD B5 51         call 51B5           // Handles Popup Message as a whole including momentary cursor disabling (A is Popup Message #)
 ROMB:493D 3E FF            ld   a,FF
 ROMB:493F 18 EF            jr   4930
 ROMB:4941 FA DD CC         ld   a,(CCDD)
 ROMB:4944 CB 3F            srl  a
 ROMB:4946 FE 04            cp   a,04
 ROMB:4948 20 15            jr   nz,495F        // End with A = 1 if unit isn't Work Car
 ROMB:494A CD 62 49         call 4962           // Establishes viable Simple Airport building data with $C948 (number) and $C949 7 byte (relative locations); A holds the former
 ROMB:494D A7               and  a
 ROMB:494E 20 0C            jr   nz,495C        // End with A = 0 if there are any viable Simple Airport building points
 ROMB:4950 CD B4 49         call 49B4           // Establishes viable Plains building data with $C948 (number) and $C949 7 byte (relative locations); A holds the former
 ROMB:4953 A7               and  a
 ROMB:4954 20 06            jr   nz,495C        // End with A = 0 if there are any viable Plains building points
 ROMB:4956 CD 08 4A         call 4A08           // Establishes viable Bridge building data with $C948 (number) and $C949 6 byte (relative locations); A holds the former
 ROMB:4959 A7               and  a
 ROMB:495A 28 03            jr   z,495F         // End with A = 1 if there are no viable Bridge building points
 ROMB:495C AF               xor  a
 ROMB:495D 18 02            jr   4961
 ROMB:495F 3E 01            ld   a,01
 ROMB:4961 C9               ret                 // A = 0 if Build is viable; 1 otherwise
 ROMB:4962 D5               push de
 ROMB:4963 F0 82            ld   a,(ff00+82)
 ROMB:4965 F5               push af
 ROMB:4966 3E 05            ld   a,05
 ROMB:4968 E0 82            ld   (ff00+82),a
 ROMB:496A E0 70            ld   (ff00+70),a
 ROMB:496C AF               xor  a
 ROMB:496D EA 48 C9         ld   (C948),a
 ROMB:4970 1E 00            ld   e,00
 ROMB:4972 16 03            ld   d,03           // NW, NE, W
 ROMB:4974 CD 8F 49         call 498F           // $C949 bytes hold given viable Simple Airport locations with $C948 incremented by number of those
 ROMB:4977 1E 06            ld   e,06
 ROMB:4979 CD 9F 49         call 499F           // If Simple Airport can be built at direct location, ($C949 + ($C948)) = 6 and $C948 is incremented; otherwise, Zero Flag on
 ROMB:497C 1E 03            ld   e,03
 ROMB:497E 16 06            ld   d,06           // E, SW, SE
 ROMB:4980 CD 8F 49         call 498F           // $C949 bytes hold given viable Simple Airport locations with $C948 incremented by number of those
 ROMB:4983 FA 48 C9         ld   a,(C948)
 ROMB:4986 57               ld   d,a
 ROMB:4987 F1               pop  af
 ROMB:4988 E0 82            ld   (ff00+82),a
 ROMB:498A E0 70            ld   (ff00+70),a
 ROMB:498C 7A               ld   a,d
 ROMB:498D D1               pop  de
 ROMB:498E C9               ret                 // Establishes viable Simple Airport building data with $C948 (number) and $C949 7 byte (relative locations); A holds the former
 ROMB:498F C5               push bc
 ROMB:4990 CD D9 28         call 28D9           // BC = relative coordinates, Set Carry Flag based on relative coordinates being out of bounds
 ROMB:4993 38 03            jr   c,4998
 ROMB:4995 CD 9F 49         call 499F           // If Simple Airport can be built at location, ($C949 + ($C948)) = E and $C948 is incremented; otherwise, Zero Flag on
 ROMB:4998 C1               pop  bc
 ROMB:4999 1C               inc  e
 ROMB:499A 7B               ld   a,e
 ROMB:499B BA               cp   d
 ROMB:499C 20 F1            jr   nz,498F
 ROMB:499E C9               ret                 // $C949 bytes hold given viable Simple Airport locations with $C948 incremented by number of those
 ROMB:499F CD 4B 4A         call 4A4B           // A = Simple Airport cost
 ROMB:49A2 FE FF            cp   a,FF
 ROMB:49A4 C8               ret  z
 ROMB:49A5 FA 48 C9         ld   a,(C948)
 ROMB:49A8 21 49 C9         ld   hl,C949
 ROMB:49AB CD BC 29         call 29BC           // HL += A
 ROMB:49AE 73               ld   (hl),e
 ROMB:49AF 21 48 C9         ld   hl,C948
 ROMB:49B2 34               inc  (hl)
 ROMB:49B3 C9               ret                 // If Simple Airport can be built at location, ($C949 + ($C948)) = E and $C948 is incremented; otherwise, Zero Flag on
 ROMB:49B4 C5               push bc
 ROMB:49B5 D5               push de
 ROMB:49B6 F0 82            ld   a,(ff00+82)
 ROMB:49B8 F5               push af
 ROMB:49B9 3E 05            ld   a,05
 ROMB:49BB E0 82            ld   (ff00+82),a
 ROMB:49BD E0 70            ld   (ff00+70),a
 ROMB:49BF AF               xor  a
 ROMB:49C0 EA 48 C9         ld   (C948),a
 ROMB:49C3 1E 00            ld   e,00
 ROMB:49C5 16 03            ld   d,03           // NW, NE, W
 ROMB:49C7 CD E3 49         call 49E3           // $C949 bytes hold given viable Plains locations with $C948 incremented by number of those
 ROMB:49CA 1E 06            ld   e,06
 ROMB:49CC CD F3 49         call 49F3           // If Plains can be built at direct location, ($C949 + ($C948)) = 6 and $C948 is incremented; otherwise, Zero Flag on
 ROMB:49CF 1E 03            ld   e,03
 ROMB:49D1 16 06            ld   d,06           // E, SW, SE
 ROMB:49D3 CD E3 49         call 49E3           // $C949 bytes hold given viable Plains locations with $C948 incremented by number of those
 ROMB:49D6 FA 48 C9         ld   a,(C948)
 ROMB:49D9 57               ld   d,a
 ROMB:49DA F1               pop  af
 ROMB:49DB E0 82            ld   (ff00+82),a
 ROMB:49DD E0 70            ld   (ff00+70),a
 ROMB:49DF 7A               ld   a,d
 ROMB:49E0 D1               pop  de
 ROMB:49E1 C1               pop  bc
 ROMB:49E2 C9               ret                 // Establishes viable Plains building data with $C948 (number) and $C949 7 byte (relative locations); A holds the former
 ROMB:49E3 C5               push bc
 ROMB:49E4 CD D9 28         call 28D9           // BC = relative coordinates, Set Carry Flag based on relative coordinates being out of bounds
 ROMB:49E7 38 03            jr   c,49EC
 ROMB:49E9 CD F3 49         call 49F3           // If Plains can be built at location, ($C949 + ($C948)) = E and $C948 is incremented; otherwise, Zero Flag on
 ROMB:49EC C1               pop  bc
 ROMB:49ED 1C               inc  e
 ROMB:49EE 7B               ld   a,e
 ROMB:49EF BA               cp   d
 ROMB:49F0 20 F1            jr   nz,49E3
 ROMB:49F2 C9               ret                 // $C949 bytes hold given viable Plains locations with $C948 incremented by number of those
 ROMB:49F3 CD 58 4A         call 4A58           // Plains cost
 ROMB:49F6 FE FF            cp   a,FF
 ROMB:49F8 C8               ret  z
 ROMB:49F9 FA 48 C9         ld   a,(C948)
 ROMB:49FC 21 49 C9         ld   hl,C949
 ROMB:49FF CD BC 29         call 29BC           // HL += A
 ROMB:4A02 73               ld   (hl),e
 ROMB:4A03 21 48 C9         ld   hl,C948
 ROMB:4A06 34               inc  (hl)
 ROMB:4A07 C9               ret                 // If Plains can be built at location, ($C949 + ($C948)) = E and $C948 is incremented; otherwise, Zero Flag on
 ROMB:4A08 C5               push bc
 ROMB:4A09 D5               push de
 ROMB:4A0A F0 82            ld   a,(ff00+82)
 ROMB:4A0C F5               push af
 ROMB:4A0D 3E 05            ld   a,05
 ROMB:4A0F E0 82            ld   (ff00+82),a
 ROMB:4A11 E0 70            ld   (ff00+70),a
 ROMB:4A13 AF               xor  a
 ROMB:4A14 EA 48 C9         ld   (C948),a
 ROMB:4A17 1E 00            ld   e,00
 ROMB:4A19 C5               push bc             // Loop begins here
 ROMB:4A1A CD D9 28         call 28D9           // BC = relative coordinates, Set Carry Flag based on relative coordinates being out of bounds
 ROMB:4A1D 38 18            jr   c,4A37
 ROMB:4A1F CD 70 47         call 4770           // A = Terrain Type
 ROMB:4A22 CD 07 47         call 4707           // A = Terrain base ID
 ROMB:4A25 FE 14            cp   a,14           // River?
 ROMB:4A27 20 0E            jr   nz,4A37
 ROMB:4A29 FA 48 C9         ld   a,(C948)
 ROMB:4A2C 21 49 C9         ld   hl,C949
 ROMB:4A2F CD BC 29         call 29BC           // HL += A
 ROMB:4A32 73               ld   (hl),e
 ROMB:4A33 21 48 C9         ld   hl,C948
 ROMB:4A36 34               inc  (hl)           // For valid River, ($C949 + ($C948)) = E and $C948 is incremented
 ROMB:4A37 C1               pop  bc
 ROMB:4A38 1C               inc  e
 ROMB:4A39 7B               ld   a,e
 ROMB:4A3A FE 06            cp   a,06
 ROMB:4A3C 20 DB            jr   nz,4A19
 ROMB:4A3E FA 48 C9         ld   a,(C948)       // A = number of surrounding River tiles
 ROMB:4A41 57               ld   d,a
 ROMB:4A42 F1               pop  af
 ROMB:4A43 E0 82            ld   (ff00+82),a
 ROMB:4A45 E0 70            ld   (ff00+70),a
 ROMB:4A47 7A               ld   a,d
 ROMB:4A48 D1               pop  de
 ROMB:4A49 C1               pop  bc
 ROMB:4A4A C9               ret                 // Establishes viable Bridge building data with $C948 (number) and $C949 6 byte (relative locations); A holds the former
 ROMB:4A4B CD 70 47         call 4770           // A = Terrain Type
 ROMB:4A4E CD 64 4A         call 4A64           // A = 0 for Plains, 1 for Forest or Moor, -1 for other terrain
 ROMB:4A51 FE FF            cp   a,FF
 ROMB:4A53 28 02            jr   z,4A57
 ROMB:4A55 C6 03            add  a,03
 ROMB:4A57 C9               ret                 // A = 3 for Plains, 4 for Forest or Moor, -1 for other terrain
 ROMB:4A58 CD 70 47         call 4770
 ROMB:4A5B CD 64 4A         call 4A64
 ROMB:4A5E A7               and  a
 ROMB:4A5F 20 02            jr   nz,4A63
 ROMB:4A61 3E FF            ld   a,FF
 ROMB:4A63 C9               ret                 // A = 1 for Forest or Moor, -1 for other terrain
 ROMB:4A64 D5               push de
 ROMB:4A65 16 00            ld   d,00
 ROMB:4A67 CD 07 47         call 4707           // A = Terrain base ID
 ROMB:4A6A FE 0C            cp   a,0C
 ROMB:4A6C 28 0B            jr   z,4A79         // End with A = 0 if terrain is Plains
 ROMB:4A6E 14               inc  d
 ROMB:4A6F FE 11            cp   a,11
 ROMB:4A71 28 06            jr   z,4A79         // End with A = 1 if terrain is Forest
 ROMB:4A73 FE 12            cp   a,12
 ROMB:4A75 28 02            jr   z,4A79         // End with A = 1 if terrain is Moor
 ROMB:4A77 16 FF            ld   d,FF
 ROMB:4A79 7A               ld   a,d
 ROMB:4A7A D1               pop  de
 ROMB:4A7B C9               ret                 // A = 0 for Plains, 1 for Forest or Moor, -1 for other terrain
 ROMB:4A7C 3E C0            ld   a,C0
 ROMB:4A7E CD 82 4F         call 4F82           // Clears Command Menu data, prepares blank space command (A is first data tile of Commands)
 ROMB:4A81 FA DE CC         ld   a,(CCDE)
 ROMB:4A84 47               ld   b,a
 ROMB:4A85 FA DF CC         ld   a,(CCDF)
 ROMB:4A88 4F               ld   c,a
 ROMB:4A89 CD 08 4A         call 4A08           // Establishes viable Bridge building data with $C948 (number) and $C949 6 byte (relative locations); A holds the former
 ROMB:4A8C A7               and  a
 ROMB:4A8D 28 05            jr   z,4A94         // Moves onto Simple Airport if no Bridge building is viable
 ROMB:4A8F 3E 17            ld   a,17           // Bridge
 ROMB:4A91 CD A6 4F         call 4FA6           // ($C9B6 + menu choice number) = 23, ($C9BE) is incremented
 ROMB:4A94 CD 62 49         call 4962           // Establishes viable Simple Airport building data with $C948 (number) and $C949 7 byte (relative locations); A holds the former
 ROMB:4A97 A7               and  a
 ROMB:4A98 28 05            jr   z,4A9F         // Moves onto Plains if no Simple Airport building is viable
 ROMB:4A9A 3E 16            ld   a,16           // Simple Airport
 ROMB:4A9C CD A6 4F         call 4FA6           // ($C9B6 + menu choice number) = 22, ($C9BE) is incremented
 ROMB:4A9F CD B4 49         call 49B4           // Establishes viable Plains building data with $C948 (number) and $C949 7 byte (relative locations); A holds the former
 ROMB:4AA2 A7               and  a
 ROMB:4AA3 28 05            jr   z,4AAA
 ROMB:4AA5 3E 18            ld   a,18           // Plains
 ROMB:4AA7 CD A6 4F         call 4FA6           // ($C9B6 + menu choice number) = 24, ($C9BE) is incremented
 ROMB:4AAA CD C0 4F         call 4FC0           // Controls for Command Menu, ending with A = Map Menu choice if selected, or 0 if backspaced with B button
 ROMB:4AAD FE 16            cp   a,16           // Simple Airport
 ROMB:4AAF 28 0C            jr   z,4ABD
 ROMB:4AB1 FE 17            cp   a,17           // Bridge
 ROMB:4AB3 28 14            jr   z,4AC9
 ROMB:4AB5 FE 18            cp   a,18           // Plains
 ROMB:4AB7 28 1C            jr   z,4AD5
 ROMB:4AB9 3E FF            ld   a,FF
 ROMB:4ABB 18 22            jr   4ADF           // B Button press ends immediately with A = -1
 ROMB:4ABD CD E0 4A         call 4AE0           // Controls for Simple Airport chosen on Work Car's Build command; ends immediately instead with A = -1 if already at 100 properties; ends with A = -1 for B Button press, or 0 for A button press with sufficient Materials, latter also handles Simple Airport building
 ROMB:4AC0 FE FF            cp   a,FF
 ROMB:4AC2 28 B8            jr   z,4A7C         // B Button press restarts procedure
 ROMB:4AC4 CD 78 41         call 4178           // Sets base counts of each property type, as well as each HQ's coordinates
 ROMB:4AC7 18 16            jr   4ADF
 ROMB:4AC9 CD BC 4B         call 4BBC           // Controls for Bridge chosen on Work Car's Build command; ends with A = -1 for B Button press, or 0 for A button press with success (A Button press with insufficient Materials oddly just has invalidity warning)
 ROMB:4ACC FE FF            cp   a,FF
 ROMB:4ACE 28 AC            jr   z,4A7C         // B Button press restarts procedure
 ROMB:4AD0 CD 78 41         call 4178           // Sets base counts of each property type, as well as each HQ's coordinates
 ROMB:4AD3 18 0A            jr   4ADF
 ROMB:4AD5 CD 6C 4B         call 4B6C           // Controls for Plains chosen on Work Car's Build command; ends with A = -1 for B Button press, or 0 for A button press with success (A Button press with insufficient Materials oddly just has invalidity warning)
 ROMB:4AD8 FE FF            cp   a,FF
 ROMB:4ADA 28 A0            jr   z,4A7C         // B Button press restarts procedure
 ROMB:4ADC CD 78 41         call 4178           // Sets base counts of each property type, as well as each HQ's coordinates
 ROMB:4ADF C9               ret                 // Build command as a whole; A = -1 for B Button press
 ROMB:4AE0 AF               xor  a
 ROMB:4AE1 EA 40 C9         ld   (C940),a
 ROMB:4AE4 F0 82            ld   a,(ff00+82)
 ROMB:4AE6 F5               push af
 ROMB:4AE7 3E 01            ld   a,01
 ROMB:4AE9 E0 82            ld   (ff00+82),a
 ROMB:4AEB E0 70            ld   (ff00+70),a
 ROMB:4AED FA 80 DD         ld   a,(DD80)
 ROMB:4AF0 47               ld   b,a
 ROMB:4AF1 F1               pop  af
 ROMB:4AF2 E0 82            ld   (ff00+82),a
 ROMB:4AF4 E0 70            ld   (ff00+70),a
 ROMB:4AF6 78               ld   a,b            // A = Property Count
 ROMB:4AF7 FE 64            cp   a,64
 ROMB:4AF9 20 0E            jr   nz,4B09
 ROMB:4AFB 3E 03            ld   a,03
 ROMB:4AFD CD 44 38         call 3844
 ROMB:4B00 3E 15            ld   a,15           // Facilities Max
 ROMB:4B02 EF 0B B5 51                          // Handles Popup Message as a whole including momentary cursor disabling (A is Popup Message #)
 ROMB:4B06 3E FF            ld   a,FF
 ROMB:4B08 C9               ret                 // A = Property Count, -1 if already at 100 with accommodating Popup Message
 ROMB:4B09 FA DE CC         ld   a,(CCDE)
 ROMB:4B0C 47               ld   b,a
 ROMB:4B0D FA DF CC         ld   a,(CCDF)
 ROMB:4B10 4F               ld   c,a
 ROMB:4B11 CD 62 49         call 4962           // Establishes viable Simple Airport building data with $C948 (number) and $C949 7 byte (relative locations); A holds the former
 ROMB:4B14 CD 5F 4B         call 4B5F           // A = active player's Simple Airport ID #
 ROMB:4B17 EA A6 C9         ld   (C9A6),a
 ROMB:4B1A CD 18 4C         call 4C18           // Controls for Work Car's Build command tile selection; ends with A = -1 for B Button ending, A = 0 for A Button ending
 ROMB:4B1D FE FF            cp   a,FF
 ROMB:4B1F 28 3D            jr   z,4B5E         // End immediately on B Button press
 ROMB:4B21 CD 4B 4A         call 4A4B           // A = Simple Airport cost
 ROMB:4B24 67               ld   h,a
 ROMB:4B25 FA E5 CC         ld   a,(CCE5)
 ROMB:4B28 94               sub  h
 ROMB:4B29 30 0D            jr   nc,4B38
 ROMB:4B2B 3E 03            ld   a,03
 ROMB:4B2D CD 44 38         call 3844
 ROMB:4B30 3E 10            ld   a,10           // Insufficient Materials
 ROMB:4B32 EF 0B B5 51                          // Handles Popup Message as a whole including momentary cursor disabling (A is Popup Message #)
 ROMB:4B36 18 D1            jr   4B09
 ROMB:4B38 EA E5 CC         ld   (CCE5),a
 ROMB:4B3B C5               push bc
 ROMB:4B3C 3E 06            ld   a,06           // Build Simple Airport
 ROMB:4B3E EF 0C BB 66                          // Action Animation cutscenes play out where applicable
 ROMB:4B42 C1               pop  bc
 ROMB:4B43 CD 5F 4B         call 4B5F           // A = active player's Simple Airport ID #
 ROMB:4B46 CD 76 47         call 4776           // Terrain on tile updated as active player's Simple Airport
 ROMB:4B49 CD D1 43         call 43D1           // Establishes tile BC's entire graphics
 ROMB:4B4C EF 0C 97 56                          // Establishes new Simple Airport using first WRA1($DD81) slot (BC holds coordinates of new Simple Airport)
 ROMB:4B50 EF 11 8A 4D                          // set 6,($C783), intended to signify Work Car command usage for the map
 ROMB:4B54 EF 11 67 4D                          // Terrain change count incremented (Craft Medal)
 ROMB:4B58 3E 0A            ld   a,0A
 ROMB:4B5A CD 44 38         call 3844
 ROMB:4B5D AF               xor  a
 ROMB:4B5E C9               ret                 // Controls for Simple Airport chosen on Work Car's Build command; ends immediately instead with A = -1 if already at 100 properties; ends with A = -1 for B Button press, or 0 for A button press with sufficient Materials, latter also handles Simple Airport building
 ROMB:4B5F 26 08            ld   h,08
 ROMB:4B61 FA DD CC         ld   a,(CCDD)
 ROMB:4B64 CB 47            bit  0,a
 ROMB:4B66 28 02            jr   z,4B6A
 ROMB:4B68 26 13            ld   h,13
 ROMB:4B6A 7C               ld   a,h
 ROMB:4B6B C9               ret                 // A = active player's Simple Airport ID #
 ROMB:4B6C AF               xor  a
 ROMB:4B6D EA 40 C9         ld   (C940),a
 ROMB:4B70 FA DE CC         ld   a,(CCDE)
 ROMB:4B73 47               ld   b,a
 ROMB:4B74 FA DF CC         ld   a,(CCDF)
 ROMB:4B77 4F               ld   c,a
 ROMB:4B78 CD B4 49         call 49B4           // Establishes viable Plains building data with $C948 (number) and $C949 7 byte (relative locations); A holds the former
 ROMB:4B7B 3E 20            ld   a,20
 ROMB:4B7D EA A6 C9         ld   (C9A6),a
 ROMB:4B80 CD 18 4C         call 4C18           // Controls for Work Car's Build command tile selection; ends with A = -1 for B Button ending, A = 0 for A Button ending
 ROMB:4B83 FE FF            cp   a,FF
 ROMB:4B85 28 34            jr   z,4BBB         // End immediately on B Button press
 ROMB:4B87 CD 58 4A         call 4A58           // Plains cost
 ROMB:4B8A 67               ld   h,a
 ROMB:4B8B FA E5 CC         ld   a,(CCE5)
 ROMB:4B8E 94               sub  h
 ROMB:4B8F 30 0D            jr   nc,4B9E
 ROMB:4B91 3E 03            ld   a,03
 ROMB:4B93 CD 44 38         call 3844
 ROMB:4B96 3E 10            ld   a,10           // Insufficient Materials
 ROMB:4B98 EF 0B B5 51                          // Handles Popup Message as a whole including momentary cursor disabling (A is Popup Message #)
 ROMB:4B9C 18 D2            jr   4B70           // Restarts procedure for insufficient Materials
 ROMB:4B9E EA E5 CC         ld   (CCE5),a
 ROMB:4BA1 C5               push bc
 ROMB:4BA2 3E 07            ld   a,07           // Build Plains
 ROMB:4BA4 EF 0C BB 66                          // Action Animation cutscenes play out where applicable
 ROMB:4BA8 C1               pop  bc
 ROMB:4BA9 3E 20            ld   a,20
 ROMB:4BAB CD 76 47         call 4776           // Terrain on tile updated as Plains
 ROMB:4BAE CD D1 43         call 43D1           // Establishes tile BC's entire graphics
 ROMB:4BB1 EF 11 8A 4D                          // set 6,(C783), intended to signify Work Car command usage for the map
 ROMB:4BB5 3E 0A            ld   a,0A
 ROMB:4BB7 CD 44 38         call 3844
 ROMB:4BBA AF               xor  a
 ROMB:4BBB C9               ret                 // Controls for Plains chosen on Work Car's Build command; ends with A = -1 for B Button press, or 0 for A button press with success (A Button press with insufficient Materials oddly just has invalidity warning)
 ROMB:4BBC AF               xor  a
 ROMB:4BBD EA 40 C9         ld   (C940),a
 ROMB:4BC0 FA DE CC         ld   a,(CCDE)
 ROMB:4BC3 47               ld   b,a
 ROMB:4BC4 FA DF CC         ld   a,(CCDF)
 ROMB:4BC7 4F               ld   c,a
 ROMB:4BC8 CD 08 4A         call 4A08           // Establishes viable Bridge building data with $C948 (number) and $C949 6 byte (relative locations); A holds the former
 ROMB:4BCB 3E 22            ld   a,22
 ROMB:4BCD EA A6 C9         ld   (C9A6),a
 ROMB:4BD0 CD 18 4C         call 4C18           // Controls for Work Car's Build command tile selection; ends with A = -1 for B Button ending, A = 0 for A Button ending
 ROMB:4BD3 FE FF            cp   a,FF
 ROMB:4BD5 28 1A            jr   z,4BF1         // End immediately on B Button press
 ROMB:4BD7 FA E5 CC         ld   a,(CCE5)
 ROMB:4BDA D6 02            sub  a,02
 ROMB:4BDC 38 06            jr   c,4BE4         // Procedure restart with Invalid sound and "Insufficient Materials" popup for insufficient Materials
 ROMB:4BDE CD F2 4B         call 4BF2           // Build Bridge process
 ROMB:4BE1 AF               xor  a
 ROMB:4BE2 18 0D            jr   4BF1           // Ends immediately with A = 0 for success
 ROMB:4BE4 3E 03            ld   a,03
 ROMB:4BE6 CD 44 38         call 3844
 ROMB:4BE9 3E 10            ld   a,10           // Insufficient Materials
 ROMB:4BEB EF 0B B5 51                          // Handles Popup Message as a whole including momentary cursor disabling (A is Popup Message #)
 ROMB:4BEF 18 CF            jr   4BC0
 ROMB:4BF1 C9               ret                 // Controls for Bridge chosen on Work Car's Build command; ends with A = -1 for B Button press, or 0 for A button press with success (A Button press with insufficient Materials oddly just has invalidity warning)
 ROMB:4BF2 FA E5 CC         ld   a,(CCE5)
 ROMB:4BF5 D6 02            sub  a,02
 ROMB:4BF7 EA E5 CC         ld   (CCE5),a
 ROMB:4BFA C5               push bc
 ROMB:4BFB 3E 05            ld   a,05           // Build Bridge
 ROMB:4BFD EF 0C BB 66                          // Action Animation cutscenes play out where applicable
 ROMB:4C01 C1               pop  bc
 ROMB:4C02 3E 22            ld   a,22
 ROMB:4C04 CD 76 47         call 4776           // Terrain on tile updated as Bridge
 ROMB:4C07 CD D1 43         call 43D1           // Establishes tile BC's entire graphics
 ROMB:4C0A EF 11 8A 4D                          // set 6,(C783), intended to signify Work Car command usage for the map
 ROMB:4C0E EF 11 67 4D                          // Terrain change count incremented (Craft Medal)
 ROMB:4C12 3E 0A            ld   a,0A
 ROMB:4C14 CD 44 38         call 3844
 ROMB:4C17 C9               ret                 // Build Bridge process
 ROMB:4C18 D5               push de
 ROMB:4C19 F0 82            ld   a,(ff00+82)
 ROMB:4C1B F5               push af
 ROMB:4C1C 3E 05            ld   a,05
 ROMB:4C1E E0 82            ld   (ff00+82),a
 ROMB:4C20 E0 70            ld   (ff00+70),a
 ROMB:4C22 CD D4 4C         call 4CD4           // BC = coordinates of placement, E = relative location number if not direct location
 ROMB:4C25 CD D9 45         call 45D9           // If BC is not north or west of view, establishes cursor's within view and overall coordinates, and then cursor's sprite graphics location center
 ROMB:4C28 CD F9 46         call 46F9           // res 0,WRA4[$D000 + ($C98D) * 16]
 ROMB:4C2B CD 0B 4D         call 4D0B           // Establishes planned terrain graphics for cursor location, resets Work Car build check timer
 ROMB:4C2E CD FA 74         call 74FA           // General map view graphics update (button input loop begins here)
 ROMB:4C31 CD F3 4C         call 4CF3           // Work Car build check flashing
 ROMB:4C34 FA 91 CA         ld   a,(CA91)
 ROMB:4C37 CB 47            bit  0,a            // A
 ROMB:4C39 20 16            jr   nz,4C51
 ROMB:4C3B CB 4F            bit  1,a            // B
 ROMB:4C3D 20 28            jr   nz,4C67
 ROMB:4C3F CB 6F            bit  5,a            // Left
 ROMB:4C41 20 38            jr   nz,4C7B
 ROMB:4C43 CB 77            bit  6,a            // Up
 ROMB:4C45 20 34            jr   nz,4C7B
 ROMB:4C47 CB 67            bit  4,a            // Right
 ROMB:4C49 20 3E            jr   nz,4C89
 ROMB:4C4B CB 7F            bit  7,a            // Down
 ROMB:4C4D 20 3A            jr   nz,4C89
 ROMB:4C4F 18 DD            jr   4C2E
 ROMB:4C51 FA 91 C9         ld   a,(C991)       // A was pressed
 ROMB:4C54 47               ld   b,a
 ROMB:4C55 FA 92 C9         ld   a,(C992)
 ROMB:4C58 4F               ld   c,a
 ROMB:4C59 CD 1F 4D         call 4D1F           // Establishes default graphics of cursor location
 ROMB:4C5C 3E 0A            ld   a,0A
 ROMB:4C5E CD 44 38         call 3844
 ROMB:4C61 CD D4 4C         call 4CD4           // BC = coordinates of placement, E = relative location number if not direct location
 ROMB:4C64 AF               xor  a
 ROMB:4C65 18 55            jr   4CBC           // End with A = 0 if A was pressed
 ROMB:4C67 FA 91 C9         ld   a,(C991)       // B was pressed
 ROMB:4C6A 47               ld   b,a
 ROMB:4C6B FA 92 C9         ld   a,(C992)
 ROMB:4C6E 4F               ld   c,a
 ROMB:4C6F CD 1F 4D         call 4D1F           // Establishes default graphics of cursor location
 ROMB:4C72 3E 0C            ld   a,0C
 ROMB:4C74 CD 44 38         call 3844
 ROMB:4C77 3E FF            ld   a,FF
 ROMB:4C79 18 41            jr   4CBC           // Ends with A = -1 if B was pressed
 ROMB:4C7B FA 40 C9         ld   a,(C940)       // Left/Up was pressed
 ROMB:4C7E 3D               dec  a
 ROMB:4C7F FE FF            cp   a,FF
 ROMB:4C81 20 12            jr   nz,4C95
 ROMB:4C83 FA 48 C9         ld   a,(C948)       // Number of choices
 ROMB:4C86 3D               dec  a
 ROMB:4C87 18 0C            jr   4C95
 ROMB:4C89 FA 48 C9         ld   a,(C948)       // Right/Down was pressed
 ROMB:4C8C 67               ld   h,a
 ROMB:4C8D FA 40 C9         ld   a,(C940)       // Choice #
 ROMB:4C90 3C               inc  a
 ROMB:4C91 BC               cp   h
 ROMB:4C92 20 01            jr   nz,4C95
 ROMB:4C94 AF               xor  a
 ROMB:4C95 EA 40 C9         ld   (C940),a
 ROMB:4C98 3E 09            ld   a,09
 ROMB:4C9A CD 44 38         call 3844
 ROMB:4C9D FA 91 C9         ld   a,(C991)
 ROMB:4CA0 47               ld   b,a
 ROMB:4CA1 FA 92 C9         ld   a,(C992)
 ROMB:4CA4 4F               ld   c,a
 ROMB:4CA5 CD 1F 4D         call 4D1F           // Establishes default graphics of cursor location
 ROMB:4CA8 CD D4 4C         call 4CD4           // BC = coordinates of placement, E = relative location number if not direct location
 ROMB:4CAB CD D9 45         call 45D9           // If BC is not north or west of view, establishes cursor's within view and overall coordinates, and then cursor's sprite graphics location center
 ROMB:4CAE FA 91 C9         ld   a,(C991)
 ROMB:4CB1 47               ld   b,a
 ROMB:4CB2 FA 92 C9         ld   a,(C992)
 ROMB:4CB5 4F               ld   c,a
 ROMB:4CB6 CD 0B 4D         call 4D0B           // Establishes planned terrain graphics for cursor location, resets Work Car build check flash timer
 ROMB:4CB9 C3 2E 4C         jp   4C2E           // Further waiting for button input after finishing D-Pad direction press
 ROMB:4CBC C5               push bc
 ROMB:4CBD F5               push af
 ROMB:4CBE FA DE CC         ld   a,(CCDE)
 ROMB:4CC1 47               ld   b,a
 ROMB:4CC2 FA DF CC         ld   a,(CCDF)
 ROMB:4CC5 4F               ld   c,a
 ROMB:4CC6 CD D9 45         call 45D9           // If BC is not north or west of view, establishes cursor's within view and overall coordinates, and then cursor's sprite graphics location center
 ROMB:4CC9 F1               pop  af
 ROMB:4CCA C1               pop  bc
 ROMB:4CCB 57               ld   d,a
 ROMB:4CCC F1               pop  af
 ROMB:4CCD E0 82            ld   (ff00+82),a
 ROMB:4CCF E0 70            ld   (ff00+70),a
 ROMB:4CD1 7A               ld   a,d
 ROMB:4CD2 D1               pop  de
 ROMB:4CD3 C9               ret                 // Controls for Work Car's Build command tile selection; ends with A = -1 for B Button ending, A = 0 for A Button ending
 ROMB:4CD4 D5               push de
 ROMB:4CD5 E5               push hl
 ROMB:4CD6 FA DE CC         ld   a,(CCDE)
 ROMB:4CD9 47               ld   b,a
 ROMB:4CDA FA DF CC         ld   a,(CCDF)
 ROMB:4CDD 4F               ld   c,a
 ROMB:4CDE FA 40 C9         ld   a,(C940)
 ROMB:4CE1 21 49 C9         ld   hl,C949
 ROMB:4CE4 CD BC 29         call 29BC           // HL += A
 ROMB:4CE7 7E               ld   a,(hl)
 ROMB:4CE8 FE 06            cp   a,06
 ROMB:4CEA 28 04            jr   z,4CF0         // Ends immediately for direct location
 ROMB:4CEC 5F               ld   e,a
 ROMB:4CED CD D9 28         call 28D9           // BC = relative coordinates, Set Carry Flag based on relative coordinates being out of bounds
 ROMB:4CF0 E1               pop  hl
 ROMB:4CF1 D1               pop  de
 ROMB:4CF2 C9               ret                 // BC = coordinates of placement, E = relative location number if not direct location
 ROMB:4CF3 FA A5 C9         ld   a,(C9A5)
 ROMB:4CF6 3C               inc  a
 ROMB:4CF7 EA A5 C9         ld   (C9A5),a
 ROMB:4CFA FE 0A            cp   a,0A
 ROMB:4CFC 28 09            jr   z,4D07
 ROMB:4CFE FE 14            cp   a,14
 ROMB:4D00 20 08            jr   nz,4D0A        // End immediately outside an update frame
 ROMB:4D02 CD 0B 4D         call 4D0B           // Establishes planned terrain graphics for cursor location, resets Work Car build check flash timer
 ROMB:4D05 18 03            jr   4D0A
 ROMB:4D07 CD 1F 4D         call 4D1F           // Establishes default graphics of cursor location
 ROMB:4D0A C9               ret                 // Work Car build check flashing
 ROMB:4D0B AF               xor  a
 ROMB:4D0C EA A5 C9         ld   (C9A5),a
 ROMB:4D0F FA 91 C9         ld   a,(C991)
 ROMB:4D12 47               ld   b,a
 ROMB:4D13 FA 92 C9         ld   a,(C992)
 ROMB:4D16 4F               ld   c,a
 ROMB:4D17 FA A6 C9         ld   a,(C9A6)
 ROMB:4D1A EF 0B 4D 44                          // Establishes terrain/unit tile graphics (A is terrain/unit, BC is tile's coordinates)
 ROMB:4D1E C9               ret                 // Establishes planned terrain graphics for cursor location, resets Work Car build check flash timer
 ROMB:4D1F FA 91 C9         ld   a,(C991)
 ROMB:4D22 47               ld   b,a
 ROMB:4D23 FA 92 C9         ld   a,(C992)
 ROMB:4D26 4F               ld   c,a
 ROMB:4D27 EF 0B D1 43                          // Establishes default graphics of cursor location
 ROMB:4D2B C9               ret  
 ROMB:4D2C FA E1 CC         ld   a,(CCE1)
 ROMB:4D2F 6F               ld   l,a
 ROMB:4D30 26 00            ld   h,00
 ROMB:4D32 FA D8 C9         ld   a,(C9D8)
 ROMB:4D35 EF 12 DB 40                          // EXP incremented by HP
 ROMB:4D39 C9               ret  
 ROMB:4D3A C5               push bc
 ROMB:4D3B D5               push de
 ROMB:4D3C E5               push hl
 ROMB:4D3D FA E2 CC         ld   a,(CCE2)       // A = Load Count
 ROMB:4D40 A7               and  a
 ROMB:4D41 20 18            jr   nz,4D5B        // End with A = 1 if any units are Loaded
 ROMB:4D43 FA DD CC         ld   a,(CCDD)
 ROMB:4D46 CB 3F            srl  a
 ROMB:4D48 EF 18 DD 4A                          // A = 0 for land unit, jet, or helicopter; 1 for big plane or sea unit
 ROMB:4D4C A7               and  a
 ROMB:4D4D 20 0C            jr   nz,4D5B        // End with A = 1 if unit type is big plane or sea unit
 ROMB:4D4F FA DD CC         ld   a,(CCDD)
 ROMB:4D52 CD 61 4D         call 4D61           // A = number of Linkup compatible units (A is primary unit's type, BC is primary coordinates)
 ROMB:4D55 A7               and  a
 ROMB:4D56 28 03            jr   z,4D5B         // End with A = 1 if no Linkup compatible units at coordinates BC
 ROMB:4D58 AF               xor  a
 ROMB:4D59 18 02            jr   4D5D
 ROMB:4D5B 3E 01            ld   a,01
 ROMB:4D5D E1               pop  hl
 ROMB:4D5E D1               pop  de
 ROMB:4D5F C1               pop  bc
 ROMB:4D60 C9               ret                 // A = inverse of Linkup Command viability at coordinates BC
 ROMB:4D61 C5               push bc
 ROMB:4D62 D5               push de
 ROMB:4D63 E5               push hl
 ROMB:4D64 57               ld   d,a
 ROMB:4D65 F0 82            ld   a,(ff00+82)
 ROMB:4D67 F5               push af
 ROMB:4D68 3E 05            ld   a,05
 ROMB:4D6A E0 82            ld   (ff00+82),a
 ROMB:4D6C E0 70            ld   (ff00+70),a
 ROMB:4D6E 1E 00            ld   e,00
 ROMB:4D70 AF               xor  a
 ROMB:4D71 EA 48 C9         ld   (C948),a
 ROMB:4D74 C5               push bc             // Loop begins here
 ROMB:4D75 D5               push de
 ROMB:4D76 CD D9 28         call 28D9           // BC = relative coordinates, Set Carry Flag based on relative coordinates being out of bounds
 ROMB:4D79 38 2F            jr   c,4DAA         // End cycle if out of bounds
 ROMB:4D7B CD C0 4D         call 4DC0           // A = Unit Type and L = Unit # if coordinates BC is primarily occupied by a unit other than the primary selected one; otherwise, A = -1
 ROMB:4D7E FE FF            cp   a,FF
 ROMB:4D80 28 28            jr   z,4DAA         // End cycle if no primary occupying unit other than the primary selected one (primary selected unit would have planned to move to an adjacent tile if it comes up)
 ROMB:4D82 BA               cp   d
 ROMB:4D83 20 25            jr   nz,4DAA        // End cycle if unit type doesn't match
 ROMB:4D85 E5               push hl
 ROMB:4D86 C5               push bc
 ROMB:4D87 7D               ld   a,l
 ROMB:4D88 0E 05            ld   c,05
 ROMB:4D8A EF 12 66 40                          
 ROMB:4D8E A7               and  a
 ROMB:4D8F C1               pop  bc
 ROMB:4D90 E1               pop  hl
 ROMB:4D91 20 17            jr   nz,4DAA        // End loop if occupying unit is carrying
 ROMB:4D93 7D               ld   a,l
 ROMB:4D94 CD E2 4D         call 4DE2           // cp (Current HP + ($CCE1)), 20
 ROMB:4D97 28 11            jr   z,4DAA         // End loop if direct and occupying units are at 10 HP already
 ROMB:4D99 C5               push bc
 ROMB:4D9A 45               ld   b,l
 ROMB:4D9B FA 48 C9         ld   a,(C948)
 ROMB:4D9E 21 49 C9         ld   hl,C949
 ROMB:4DA1 CD BC 29         call 29BC           // HL = $C949 + ($C948)
 ROMB:4DA4 70               ld   (hl),b         // ($C949 + ($C948)) = L
 ROMB:4DA5 C1               pop  bc
 ROMB:4DA6 21 48 C9         ld   hl,C948
 ROMB:4DA9 34               inc  (hl)
 ROMB:4DAA D1               pop  de
 ROMB:4DAB C1               pop  bc
 ROMB:4DAC 1C               inc  e
 ROMB:4DAD 7B               ld   a,e
 ROMB:4DAE FE 06            cp   a,06
 ROMB:4DB0 20 C2            jr   nz,4D74
 ROMB:4DB2 FA 48 C9         ld   a,(C948)
 ROMB:4DB5 47               ld   b,a
 ROMB:4DB6 F1               pop  af
 ROMB:4DB7 E0 82            ld   (ff00+82),a
 ROMB:4DB9 E0 70            ld   (ff00+70),a
 ROMB:4DBB 78               ld   a,b
 ROMB:4DBC E1               pop  hl
 ROMB:4DBD D1               pop  de
 ROMB:4DBE C1               pop  bc
 ROMB:4DBF C9               ret                 // A = number of Linkup compatible units (A is primary unit's type, BC is primary coordinates)
 ROMB:4DC0 C5               push bc
 ROMB:4DC1 D5               push de
 ROMB:4DC2 EF 12 4E 41                          // A = unit number of primary occupying unit, -1 if there is none
 ROMB:4DC6 FE FF            cp   a,FF
 ROMB:4DC8 28 13            jr   z,4DDD         // End with A = -1 if no occupying unit
 ROMB:4DCA 4F               ld   c,a
 ROMB:4DCB FA D8 C9         ld   a,(C9D8)
 ROMB:4DCE B9               cp   c
 ROMB:4DCF 28 0C            jr   z,4DDD         // End with A = -1 if selected unit is the same as the primary occupying unit
 ROMB:4DD1 79               ld   a,c
 ROMB:4DD2 6F               ld   l,a
 ROMB:4DD3 E5               push hl
 ROMB:4DD4 0E 00            ld   c,00
 ROMB:4DD6 EF 12 66 40                          // A = Unit Type
 ROMB:4DDA E1               pop  hl
 ROMB:4DDB 18 02            jr   4DDF
 ROMB:4DDD 3E FF            ld   a,FF
 ROMB:4DDF D1               pop  de
 ROMB:4DE0 C1               pop  bc
 ROMB:4DE1 C9               ret                 // A = Unit Type and L = Unit # if coordinates BC is primarily occupied by a unit other than the primary selected one; otherwise, A = -1
 ROMB:4DE2 C5               push bc
 ROMB:4DE3 0E 04            ld   c,04
 ROMB:4DE5 EF 12 66 40                          // A = Current HP
 ROMB:4DE9 47               ld   b,a            // B = Current HP
 ROMB:4DEA FA E1 CC         ld   a,(CCE1)       // A = Unit's HP
 ROMB:4DED 80               add  b
 ROMB:4DEE FE 14            cp   a,14
 ROMB:4DF0 C1               pop  bc
 ROMB:4DF1 C9               ret                 // cp (Current HP + ($CCE1)), 20
 ROMB:4DF2 FA 91 C9         ld   a,(C991)
 ROMB:4DF5 47               ld   b,a
 ROMB:4DF6 FA 92 C9         ld   a,(C992)
 ROMB:4DF9 4F               ld   c,a
 ROMB:4DFA FA DD CC         ld   a,(CCDD)
 ROMB:4DFD CD 61 4D         call 4D61           // A = number of Linkup compatible units (A is primary unit's type, BC is primary coordinates)
 ROMB:4E00 CD C8 4E         call 4EC8           // Controls for Linkup Command unit selection; ends with A = -1 for B Button press, or selected partner's unit # for A Button press
 ROMB:4E03 FE FF            cp   a,FF
 ROMB:4E05 CA C2 4E         jp   z,4EC2         // Ends immediately on B Button press
 ROMB:4E08 FA 41 C9         ld   a,(C941)
 ROMB:4E0B 0E 04            ld   c,04
 ROMB:4E0D EF 12 66 40                          
 ROMB:4E11 EA 43 C9         ld   (C943),a       // ($C943) = Partner's Current HP
 ROMB:4E14 FA E1 CC         ld   a,(CCE1)
 ROMB:4E17 EA 42 C9         ld   (C942),a       // ($C942) = Unit's HP
 ROMB:4E1A FA DD CC         ld   a,(CCDD)
 ROMB:4E1D 0E 0A            ld   c,0A
 ROMB:4E1F EF 12 37 40                          // Max HP
 ROMB:4E23 EA 44 C9         ld   (C944),a
 ROMB:4E26 CD 64 21         call 2164           // Empties $FFB1 and $FFB2
 ROMB:4E29 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMB:4E2C EF 25 10 41                          // Controls for Linkup Screen; A = Buttons active upon exiting Linkup
 ROMB:4E30 CB 47            bit  0,a
 ROMB:4E32 20 09            jr   nz,4E3D        // Continuation if Linkup screen was exited with A pressed
 ROMB:4E34 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMB:4E37 CD E6 69         call 69E6           // Reestablishes map graphics
 ROMB:4E3A C3 F2 4D         jp   4DF2           // Restarts entire procedure for B Button press
 ROMB:4E3D CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMB:4E40 CD E6 69         call 69E6           // Reestablishes map graphics
 ROMB:4E43 EF 0C 9B 5C                          // Sets up Linkup command data of which unit is receiving, which is giving, and how much HP is being transferred
 ROMB:4E47 FA 42 C9         ld   a,(C942)
 ROMB:4E4A EA E1 CC         ld   (CCE1),a
 ROMB:4E4D CD F4 68         call 68F4           // Updates the graphics of tiles BC and the original starting tile
 ROMB:4E50 FA 41 C9         ld   a,(C941)
 ROMB:4E53 EF 12 85 45                          // Unit's End Turn Flag Set
 ROMB:4E57 FA 43 C9         ld   a,(C943)
 ROMB:4E5A 47               ld   b,a
 ROMB:4E5B 0E 04            ld   c,04
 ROMB:4E5D FA 41 C9         ld   a,(C941)
 ROMB:4E60 EF 12 A1 40                          // Unit's HP set to ($C943)
 ROMB:4E64 EF 0C 24 5C                          // Linkup Star sprite animation plays out
 ROMB:4E68 FA 42 C9         ld   a,(C942)
 ROMB:4E6B A7               and  a
 ROMB:4E6C 20 21            jr   nz,4E8F
 ROMB:4E6E FA DE CC         ld   a,(CCDE)
 ROMB:4E71 47               ld   b,a
 ROMB:4E72 FA DF CC         ld   a,(CCDF)
 ROMB:4E75 4F               ld   c,a
 ROMB:4E76 EF 0C 8F 5B                          // Tile Iris Out sprite plays out
 ROMB:4E7A FA D8 C9         ld   a,(C9D8)
 ROMB:4E7D EF 12 5C 42                          // Handles destroyed unit's stats, along with any of their cargo's
 ROMB:4E81 CD E1 47         call 47E1           // Tile on WRAM Bank #1 has Loaded and End Turn Flags cleared, Viable Movement Flag cleared from WRAM Bank #2 equivalent
 ROMB:4E84 AF               xor  a
 ROMB:4E85 CD 98 47         call 4798           // Unit tile updated with 0
 ROMB:4E88 CD D1 43         call 43D1           // Establishes tile BC's entire graphics
 ROMB:4E8B EF 0C A0 5B                          // Tile Pop In sprite plays out
 ROMB:4E8F FA 41 C9         ld   a,(C941)       // Meets back here if primary unit wasn't lost
 ROMB:4E92 0E 01            ld   c,01
 ROMB:4E94 EF 12 83 40                          
 ROMB:4E98 43               ld   b,e
 ROMB:4E99 4A               ld   c,d            // BC holds coordinates
 ROMB:4E9A FA 43 C9         ld   a,(C943)
 ROMB:4E9D A7               and  a
 ROMB:4E9E 20 1B            jr   nz,4EBB
 ROMB:4EA0 EF 0C 8F 5B                          // Tile Iris Out sprite plays out
 ROMB:4EA4 FA 41 C9         ld   a,(C941)
 ROMB:4EA7 EF 12 5C 42                          // Handles destroyed unit's stats, along with any of their cargo's
 ROMB:4EAB CD E1 47         call 47E1           // Tile on WRAM Bank #1 has Loaded and End Turn Flags cleared, Viable Movement Flag cleared from WRAM Bank #2 equivalent
 ROMB:4EAE AF               xor  a
 ROMB:4EAF CD 98 47         call 4798           // Unit tile updated with 0
 ROMB:4EB2 CD D1 43         call 43D1           // Establishes tile BC's entire graphics
 ROMB:4EB5 EF 0C A0 5B                          // Tile Pop In sprite plays out
 ROMB:4EB9 18 07            jr   4EC2
 ROMB:4EBB FA 41 C9         ld   a,(C941)       // Meets back here if partner unit wasn't lost
 ROMB:4EBE CD 93 68         call 6893           // Sets up tile's graphics with Unit A
 ROMB:4EC1 AF               xor  a
 ROMB:4EC2 F5               push af
 ROMB:4EC3 CD F9 46         call 46F9           // res 0,WRA4[$D000 + ($C98D) * 16]
 ROMB:4EC6 F1               pop  af
 ROMB:4EC7 C9               ret                 // Linkup Command as a whole; A = -1 for B Button press, or 0 for success with A Button press
 ROMB:4EC8 C5               push bc
 ROMB:4EC9 D5               push de
 ROMB:4ECA E5               push hl
 ROMB:4ECB F0 82            ld   a,(ff00+82)
 ROMB:4ECD F5               push af
 ROMB:4ECE 3E 05            ld   a,05
 ROMB:4ED0 E0 82            ld   (ff00+82),a
 ROMB:4ED2 E0 70            ld   (ff00+70),a
 ROMB:4ED4 AF               xor  a
 ROMB:4ED5 EA 40 C9         ld   (C940),a
 ROMB:4ED8 CD 4E 4F         call 4F4E           // Establishes Linkup first partner candidate unit stats holder graphics
 ROMB:4EDB CD F9 46         call 46F9           // res 0,WRA4[$D000 + ($C98D) * 16]
 ROMB:4EDE CD FA 74         call 74FA           // General map view graphics update (loop begins here)
 ROMB:4EE1 FA 91 CA         ld   a,(CA91)
 ROMB:4EE4 CB 6F            bit  5,a            // Left
 ROMB:4EE6 20 0E            jr   nz,4EF6
 ROMB:4EE8 CB 67            bit  4,a            // Right
 ROMB:4EEA 20 18            jr   nz,4F04
 ROMB:4EEC CB 47            bit  0,a            // A
 ROMB:4EEE 20 30            jr   nz,4F20
 ROMB:4EF0 CB 4F            bit  1,a            // B
 ROMB:4EF2 20 36            jr   nz,4F2A
 ROMB:4EF4 18 E8            jr   4EDE
 ROMB:4EF6 FA 40 C9         ld   a,(C940)
 ROMB:4EF9 3D               dec  a
 ROMB:4EFA FE FF            cp   a,FF
 ROMB:4EFC 20 12            jr   nz,4F10
 ROMB:4EFE FA 48 C9         ld   a,(C948)
 ROMB:4F01 3D               dec  a
 ROMB:4F02 18 0C            jr   4F10
 ROMB:4F04 FA 48 C9         ld   a,(C948)
 ROMB:4F07 47               ld   b,a
 ROMB:4F08 FA 40 C9         ld   a,(C940)
 ROMB:4F0B 3C               inc  a
 ROMB:4F0C B8               cp   b
 ROMB:4F0D 20 01            jr   nz,4F10
 ROMB:4F0F AF               xor  a
 ROMB:4F10 EA 40 C9         ld   (C940),a
 ROMB:4F13 3E 09            ld   a,09
 ROMB:4F15 CD 44 38         call 3844
 ROMB:4F18 CD C2 77         call 77C2           // Handles clear-up of all selected unit info sprites
 ROMB:4F1B CD 4E 4F         call 4F4E           // Establishes Linkup highlighted partner unit stats holder graphics
 ROMB:4F1E 18 BE            jr   4EDE           // Further wait for button input after finishing Left/Right
 ROMB:4F20 3E 0A            ld   a,0A
 ROMB:4F22 CD 44 38         call 3844
 ROMB:4F25 CD C2 77         call 77C2           // Handles clear-up of all selected unit info sprites
 ROMB:4F28 18 0D            jr   4F37
 ROMB:4F2A 3E 0C            ld   a,0C
 ROMB:4F2C CD 44 38         call 3844
 ROMB:4F2F CD C2 77         call 77C2           // Handles clear-up of all selected unit info sprites
 ROMB:4F32 3E FF            ld   a,FF
 ROMB:4F34 EA 41 C9         ld   (C941),a
 ROMB:4F37 FA DE CC         ld   a,(CCDE)
 ROMB:4F3A 47               ld   b,a
 ROMB:4F3B FA DF CC         ld   a,(CCDF)
 ROMB:4F3E 4F               ld   c,a
 ROMB:4F3F CD D9 45         call 45D9           // If BC is not north or west of view, establishes cursor's within view and overall coordinates, and then cursor's sprite graphics location center
 ROMB:4F42 F1               pop  af
 ROMB:4F43 E0 82            ld   (ff00+82),a
 ROMB:4F45 E0 70            ld   (ff00+70),a
 ROMB:4F47 E1               pop  hl
 ROMB:4F48 D1               pop  de
 ROMB:4F49 C1               pop  bc
 ROMB:4F4A FA 41 C9         ld   a,(C941)
 ROMB:4F4D C9               ret                 // Controls for Linkup Command unit selection; ends with A = -1 for B Button press, or selected partner's unit # for A Button press
 ROMB:4F4E FA 40 C9         ld   a,(C940)
 ROMB:4F51 21 49 C9         ld   hl,C949
 ROMB:4F54 CD BC 29         call 29BC           // HL += A
 ROMB:4F57 7E               ld   a,(hl)         // Selected unit's #
 ROMB:4F58 EA 41 C9         ld   (C941),a
 ROMB:4F5B 0E 01            ld   c,01
 ROMB:4F5D EF 12 83 40                          
 ROMB:4F61 43               ld   b,e
 ROMB:4F62 4A               ld   c,d            // BC holds coordinates
 ROMB:4F63 CD D9 45         call 45D9           // If BC is not north or west of view, establishes cursor's within view and overall coordinates, and then cursor's sprite graphics location center
 ROMB:4F66 FA 41 C9         ld   a,(C941)
 ROMB:4F69 0E 04            ld   c,04
 ROMB:4F6B EF 12 66 40                          
 ROMB:4F6F EA 9F CA         ld   (CA9F),a       // ($CA9F) = Partner's Current HP
 ROMB:4F72 FA 41 C9         ld   a,(C941)
 ROMB:4F75 0E 07            ld   c,07
 ROMB:4F77 EF 12 66 40                          
 ROMB:4F7B EA A0 CA         ld   (CAA0),a       // ($CAA0) = Partner's Current Fuel
 ROMB:4F7E CD 63 77         call 7763           // Establishes selected unit stats holder graphics
 ROMB:4F81 C9               ret                 // Establishes Linkup highlighted partner unit stats holder graphics
 ROMB:4F82 EA BF C9         ld   (C9BF),a
 ROMB:4F85 AF               xor  a
 ROMB:4F86 EA BE C9         ld   (C9BE),a
 ROMB:4F89 21 B6 C9         ld   hl,C9B6
 ROMB:4F8C 06 08            ld   b,08
 ROMB:4F8E 22               ldi  (hl),a
 ROMB:4F8F 05               dec  b
 ROMB:4F90 20 FC            jr   nz,4F8E        // ($C9B6) to ($C9BE) are emptied, ($C9BF) is set to A
 ROMB:4F92 3E 00            ld   a,00
 ROMB:4F94 E0 83            ld   (ff00+83),a
 ROMB:4F96 E0 4F            ld   (ff00+4F),a    // VRA0
 ROMB:4F98 11 88 4E         ld   de,4E88
 ROMB:4F9B 21 80 8B         ld   hl,8B80
 ROMB:4F9E 01 80 00         ld   bc,0080
 ROMB:4FA1 EF 11 59 3B                          // (HL ~ HL+BC-1) = (DE ~ DE+BC-1)
 ROMB:4FA5 C9               ret                 // Clears Command Menu data, prepares blank space command (A is first data tile of Commands)
 ROMB:4FA6 C5               push bc
 ROMB:4FA7 E5               push hl
 ROMB:4FA8 47               ld   b,a
 ROMB:4FA9 FA BE C9         ld   a,(C9BE)
 ROMB:4FAC FE 08            cp   a,08
 ROMB:4FAE 28 0E            jr   z,4FBE         // There should not be more than 9 menu choices
 ROMB:4FB0 21 B6 C9         ld   hl,C9B6
 ROMB:4FB3 CD BC 29         call 29BC           // HL += A
 ROMB:4FB6 70               ld   (hl),b         // ($C9B6 + menu choice number) = A
 ROMB:4FB7 21 BE C9         ld   hl,C9BE
 ROMB:4FBA 34               inc  (hl)
 ROMB:4FBB E1               pop  hl
 ROMB:4FBC C1               pop  bc
 ROMB:4FBD C9               ret                 // ($C9B6 + menu choice number) = A, ($C9BE) is incremented
 ROMB:4FBE 18 FE            jr   4FBE
 ROMB:4FC0 C5               push bc             // Map menu controls?
 ROMB:4FC1 D5               push de
 ROMB:4FC2 E5               push hl
 ROMB:4FC3 3E 04            ld   a,04
 ROMB:4FC5 E0 94            ld   (ff00+94),a
 ROMB:4FC7 CD 64 51         call 5164           // Stores menu choices' graphics within data tiles starting at VRA0($8C00)
 ROMB:4FCA CD 00 47         call 4700           // set 0,($D000 + ($C98D) * 16) WRAM bank 4
 ROMB:4FCD CD 52 50         call 5052           // Establishes menu choice graphics as a whole
 ROMB:4FD0 CD A2 05         call 05A2           // Button update, next frame
 ROMB:4FD3 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1 (loop begins here)
 ROMB:4FD6 CD A2 05         call 05A2           // Button update, next frame
 ROMB:4FD9 CD B4 50         call 50B4           // Highlighted menu choice flashes blank for 8 frames every 16 frames
 ROMB:4FDC F0 92            ld   a,(ff00+92)
 ROMB:4FDE CB 77            bit  6,a            // Up
 ROMB:4FE0 20 0E            jr   nz,4FF0
 ROMB:4FE2 CB 7F            bit  7,a            // Down
 ROMB:4FE4 20 1F            jr   nz,5005
 ROMB:4FE6 CB 47            bit  0,a            // A button
 ROMB:4FE8 20 38            jr   nz,5022
 ROMB:4FEA CB 4F            bit  1,a            // B button
 ROMB:4FEC 20 45            jr   nz,5033
 ROMB:4FEE 18 E3            jr   4FD3           // Wait for button input
 ROMB:4FF0 3E 01            ld   a,01           // Up being pressed begins here
 ROMB:4FF2 CD 44 38         call 3844
 ROMB:4FF5 CD D0 50         call 50D0           // Sets up highlighted menu choice's display graphics at its original location
 ROMB:4FF8 FA C0 C9         ld   a,(C9C0)
 ROMB:4FFB D6 01            sub  a,01
 ROMB:4FFD 30 1A            jr   nc,5019        // Jumps if initial choice wasn't top choice
 ROMB:4FFF FA BE C9         ld   a,(C9BE)
 ROMB:5002 3D               dec  a              // Handles rotation
 ROMB:5003 18 14            jr   5019
 ROMB:5005 3E 01            ld   a,01           // Down being pressed begins here
 ROMB:5007 CD 44 38         call 3844
 ROMB:500A CD D0 50         call 50D0           // Sets up highlighted menu choice's display graphics at its original location
 ROMB:500D FA BE C9         ld   a,(C9BE)
 ROMB:5010 47               ld   b,a
 ROMB:5011 FA C0 C9         ld   a,(C9C0)
 ROMB:5014 3C               inc  a
 ROMB:5015 B8               cp   b
 ROMB:5016 20 01            jr   nz,5019        // Jumps if initial choice wasn't bottom choice
 ROMB:5018 AF               xor  a              // Handles rotation
 ROMB:5019 EA C0 C9         ld   (C9C0),a
 ROMB:501C AF               xor  a
 ROMB:501D EA C2 C9         ld   (C9C2),a       // Resets flashing blank timer
 ROMB:5020 18 B1            jr   4FD3           // Further wait for button input after pressing Up/Down
 ROMB:5022 3E 02            ld   a,02           // A being pressed begins here
 ROMB:5024 CD 44 38         call 3844
 ROMB:5027 FA C0 C9         ld   a,(C9C0)
 ROMB:502A 21 B6 C9         ld   hl,C9B6
 ROMB:502D CD BC 29         call 29BC
 ROMB:5030 7E               ld   a,(hl)         // A = Map Menu choice
 ROMB:5031 18 06            jr   5039
 ROMB:5033 3E 0C            ld   a,0C           // B being pressed begins here
 ROMB:5035 CD 44 38         call 3844
 ROMB:5038 AF               xor  a
 ROMB:5039 F5               push af
 ROMB:503A CD D2 04         call 04D2           // Next frame
 ROMB:503D CD D2 04         call 04D2           // Next frame
 ROMB:5040 CD D2 04         call 04D2           // Next frame
 ROMB:5043 CD F9 46         call 46F9           // res 0,WRA4[$D000 + ($C98D) * 16]
 ROMB:5046 CD 86 50         call 5086           // Restores last table of covered graphics
 ROMB:5049 3E 02            ld   a,02
 ROMB:504B E0 94            ld   (ff00+94),a
 ROMB:504D F1               pop  af
 ROMB:504E E1               pop  hl
 ROMB:504F D1               pop  de
 ROMB:5050 C1               pop  bc
 ROMB:5051 C9               ret                 // Controls for Command Menu, ending with A = Map Menu choice if selected, or 0 if backspaced with B button
 ROMB:5052 AF               xor  a
 ROMB:5053 EA C0 C9         ld   (C9C0),a
 ROMB:5056 EA C2 C9         ld   (C9C2),a
 ROMB:5059 06 0F            ld   b,0F
 ROMB:505B FA 8F C9         ld   a,(C98F)
 ROMB:505E FE 05            cp   a,05
 ROMB:5060 38 02            jr   c,5064
 ROMB:5062 06 01            ld   b,01           // B is set based on side of cursor
 ROMB:5064 78               ld   a,b
 ROMB:5065 EA C1 C9         ld   (C9C1),a
 ROMB:5068 0E 01            ld   c,01
 ROMB:506A 16 04            ld   d,04
 ROMB:506C FA BE C9         ld   a,(C9BE)
 ROMB:506F 07               rlca 
 ROMB:5070 5F               ld   e,a            // 15 or 1, 1, 4, Choices * 2
 ROMB:5071 CD 3D 76         call 763D           // Sets up next table of covered graphics within late WRA4 Bank (BC is starting location relative to scroll, DE is size)
 ROMB:5074 CD D4 0E         call 0ED4           // HL = $9800 + B + C * 32
 ROMB:5077 FA BF C9         ld   a,(C9BF)
 ROMB:507A 5F               ld   e,a
 ROMB:507B FA BE C9         ld   a,(C9BE)       // Number of choices on command menu
 ROMB:507E 4F               ld   c,a
 ROMB:507F CD 8A 50         call 508A           // Sets up listed menu choice E/8's display graphics at HL
 ROMB:5082 0D               dec  c
 ROMB:5083 20 FA            jr   nz,507F
 ROMB:5085 C9               ret                 // Establishes menu choice graphics on display
 ROMB:5086 CD 45 76         call 7645           // Restores last table of covered graphics
 ROMB:5089 C9               ret  
 ROMB:508A C5               push bc
 ROMB:508B 0E 02            ld   c,02
 ROMB:508D 06 04            ld   b,04           // Big loop begins here
 ROMB:508F E5               push hl
 ROMB:5090 3E 00            ld   a,00           // Loop begins here
 ROMB:5092 E0 83            ld   (ff00+83),a
 ROMB:5094 E0 4F            ld   (ff00+4F),a    // VRA0
 ROMB:5096 7B               ld   a,e
 ROMB:5097 CD 2D 0F         call 0F2D           // (HL) = E with cooldown based on bit 1,($FF41)
 ROMB:509A 3E 01            ld   a,01
 ROMB:509C E0 83            ld   (ff00+83),a
 ROMB:509E E0 4F            ld   (ff00+4F),a    // VRA1
 ROMB:50A0 AF               xor  a
 ROMB:50A1 CD 2D 0F         call 0F2D           // (HL) = 0 with cooldown based on bit 1,($FF41)
 ROMB:50A4 CD EA 0E         call 0EEA           // L = (L/32)*32 + (L+1)%32
 ROMB:50A7 1C               inc  e
 ROMB:50A8 05               dec  b
 ROMB:50A9 20 E5            jr   nz,5090
 ROMB:50AB E1               pop  hl
 ROMB:50AC CD F7 0E         call 0EF7           // HL = AND (HL + $20),$9BFF
 ROMB:50AF 0D               dec  c
 ROMB:50B0 20 DB            jr   nz,508D
 ROMB:50B2 C1               pop  bc
 ROMB:50B3 C9               ret                 // Sets up listed menu choice E/8's display graphics at HL
 ROMB:50B4 FA C2 C9         ld   a,(C9C2)
 ROMB:50B7 A7               and  a
 ROMB:50B8 28 09            jr   z,50C3
 ROMB:50BA FE 08            cp   a,08
 ROMB:50BC 20 08            jr   nz,50C6
 ROMB:50BE CD D0 50         call 50D0           // Sets up highlighted menu choice's display graphics at its original location
 ROMB:50C1 18 03            jr   50C6
 ROMB:50C3 CD F1 50         call 50F1           // Sets up blank menu choice's display graphics at location of highlighted menu choice
 ROMB:50C6 FA C2 C9         ld   a,(C9C2)
 ROMB:50C9 3C               inc  a
 ROMB:50CA E6 0F            and  a,0F
 ROMB:50CC EA C2 C9         ld   (C9C2),a
 ROMB:50CF C9               ret                 // Highlighted menu choice flashes blank for 8 frames every 16 frames
 ROMB:50D0 FA C1 C9         ld   a,(C9C1)       // Map Menu side value 15 or 1
 ROMB:50D3 47               ld   b,a
 ROMB:50D4 FA C0 C9         ld   a,(C9C0)       // Map Menu list choice
 ROMB:50D7 87               add  a
 ROMB:50D8 C6 01            add  a,01
 ROMB:50DA 4F               ld   c,a
 ROMB:50DB CD 4A 76         call 764A           // B = (($FF95)/8 + B) % 32; C = (($FF96)/8 + C) % 32
 ROMB:50DE CD D4 0E         call 0ED4           // HL = $9800 + B + C * 32
 ROMB:50E1 FA C0 C9         ld   a,(C9C0)
 ROMB:50E4 87               add  a
 ROMB:50E5 87               add  a
 ROMB:50E6 87               add  a
 ROMB:50E7 5F               ld   e,a
 ROMB:50E8 FA BF C9         ld   a,(C9BF)
 ROMB:50EB 83               add  e
 ROMB:50EC 5F               ld   e,a
 ROMB:50ED CD 8A 50         call 508A           // Sets up highlighted menu choice's display graphics at its original location
 ROMB:50F0 C9               ret  
 ROMB:50F1 FA C1 C9         ld   a,(C9C1)       // Map Menu side value 15 or 1
 ROMB:50F4 47               ld   b,a
 ROMB:50F5 FA C0 C9         ld   a,(C9C0)
 ROMB:50F8 87               add  a
 ROMB:50F9 C6 01            add  a,01
 ROMB:50FB 4F               ld   c,a
 ROMB:50FC CD 4A 76         call 764A           // B = (($FF95)/8 + B) % 32; C = (($FF96)/8 + C) % 32
 ROMB:50FF CD D4 0E         call 0ED4           // HL = $9800 + B + C * 32
 ROMB:5102 1E B8            ld   e,B8
 ROMB:5104 CD 8A 50         call 508A           // Sets up blank menu choice's display graphics at location of highlighted menu choice
 ROMB:5107 C9               ret  
 ROMB:5108 C5               push bc
 ROMB:5109 D5               push de
 ROMB:510A E5               push hl
 ROMB:510B 06 01            ld   b,01
 ROMB:510D FA 8F C9         ld   a,(C98F)       // Cursor X within View
 ROMB:5110 FE 05            cp   a,05
 ROMB:5112 38 02            jr   c,5116         // B = 14 if cursor is on the right side, 1 otherwise
 ROMB:5114 06 0E            ld   b,0E
 ROMB:5116 0E 01            ld   c,01
 ROMB:5118 CD 4A 76         call 764A           // B = (($FF95)/8 + (1 or 14)) % 32; C = (($FF96)/8 + 1) % 32
 ROMB:511B 11 03 05         ld   de,0503
 ROMB:511E EF 10 FA 68                          // Sets up table of covered graphics within late WRA4 Bank, as well as defaulted table of graphics (BC is starting location, DE is size)
 ROMB:5122 78               ld   a,b
 ROMB:5123 3C               inc  a
 ROMB:5124 E6 1F            and  a,1F           // BG Location X
 ROMB:5126 47               ld   b,a
 ROMB:5127 79               ld   a,c
 ROMB:5128 3C               inc  a
 ROMB:5129 E6 1F            and  a,1F           // BG Location Y
 ROMB:512B 4F               ld   c,a
 ROMB:512C CD D4 0E         call 0ED4           // HL = $9800 + B + C * 32
 ROMB:512F 3E 00            ld   a,00
 ROMB:5131 E0 83            ld   (ff00+83),a
 ROMB:5133 E0 4F            ld   (ff00+4F),a    // VRA0
 ROMB:5135 FA 33 C6         ld   a,(C633)
 ROMB:5138 CB 3F            srl  a
 ROMB:513A 3C               inc  a              // A = Day #
 ROMB:513B CD 7E 29         call 297E           // A = ((Day # % 160) / 10) * 16 + (Day # % 10), add 1 if Day # is an even number at least 160
 ROMB:513E F5               push af
 ROMB:513F CB 37            swap a
 ROMB:5141 E6 0F            and  a,0F           // A = (Day # % 160) / 10
 ROMB:5143 C6 81            add  a,81           // Number
 ROMB:5145 CD 2D 0F         call 0F2D           // (HL) = A with cooldown based on bit 1,($FF41)
 ROMB:5148 CD EA 0E         call 0EEA           // L = (L/32)*32 + (L+1)%32
 ROMB:514B F1               pop  af
 ROMB:514C E6 0F            and  a,0F           // A = Day # % 10
 ROMB:514E C6 81            add  a,81
 ROMB:5150 CD 2D 0F         call 0F2D           // (HL) = A with cooldown based on bit 1,($FF41)
 ROMB:5153 CD EA 0E         call 0EEA           // L = (L/32)*32 + (L+1)%32
 ROMB:5156 3E A8            ld   a,A8           // Day Kanji
 ROMB:5158 CD 2D 0F         call 0F2D           // (HL) = A with cooldown based on bit 1,($FF41)
 ROMB:515B E1               pop  hl
 ROMB:515C D1               pop  de
 ROMB:515D C1               pop  bc
 ROMB:515E C9               ret                 // Places Day Number Window
 ROMB:515F EF 10 08 69                          // Restores last table of covered graphics
 ROMB:5163 C9               ret  
 ROMB:5164 3E 00            ld   a,00
 ROMB:5166 E0 83            ld   (ff00+83),a
 ROMB:5168 E0 4F            ld   (ff00+4F),a    // VRA0
 ROMB:516A 06 00            ld   b,00
 ROMB:516C C5               push bc             // Loop begins here
 ROMB:516D 78               ld   a,b
 ROMB:516E 21 B6 C9         ld   hl,C9B6
 ROMB:5171 CD BC 29         call 29BC           // HL += A
 ROMB:5174 7E               ld   a,(hl)         // Grabs menu choice value
 ROMB:5175 CD 8C 51         call 518C           // DE = $4E88 + A * 128
 ROMB:5178 78               ld   a,b            // A holds location of menu choice's graphics
 ROMB:5179 CD 9F 51         call 519F           // H = 128 + (A/32 + (A%32) * 8 + ($C9BF)) / 16; L = ((A/32 + (A%32) * 8 + ($C9BF)) * 16)%256
 ROMB:517C 01 80 00         ld   bc,0080
 ROMB:517F EF 11 59 3B                          // (HL ~ HL+BC-1) = (DE ~ DE+BC-1)
 ROMB:5183 C1               pop  bc
 ROMB:5184 04               inc  b
 ROMB:5185 FA BE C9         ld   a,(C9BE)
 ROMB:5188 B8               cp   b
 ROMB:5189 20 E1            jr   nz,516C
 ROMB:518B C9               ret                 // Stores menu choices' graphics within data tiles starting at VRA0($8C00)
 ROMB:518C E5               push hl
 ROMB:518D 6F               ld   l,a
 ROMB:518E 26 00            ld   h,00
 ROMB:5190 29               add  hl,hl
 ROMB:5191 29               add  hl,hl
 ROMB:5192 29               add  hl,hl
 ROMB:5193 29               add  hl,hl
 ROMB:5194 29               add  hl,hl
 ROMB:5195 29               add  hl,hl
 ROMB:5196 29               add  hl,hl          // HL = A * 128
 ROMB:5197 11 88 4E         ld   de,4E88
 ROMB:519A 19               add  hl,de          // HL = $4E88 + A * 128
 ROMB:519B 54               ld   d,h
 ROMB:519C 5D               ld   e,l
 ROMB:519D E1               pop  hl
 ROMB:519E C9               ret                 // DE = $4E88 + A * 128
 ROMB:519F D5               push de
 ROMB:51A0 07               rlca 
 ROMB:51A1 07               rlca 
 ROMB:51A2 07               rlca 
 ROMB:51A3 6F               ld   l,a            // L = A/32 + (A%32) * 8
 ROMB:51A4 FA BF C9         ld   a,(C9BF)
 ROMB:51A7 85               add  l
 ROMB:51A8 6F               ld   l,a
 ROMB:51A9 26 00            ld   h,00           // HL = A/32 + (A%32) * 8 + ($C9BF)
 ROMB:51AB 29               add  hl,hl
 ROMB:51AC 29               add  hl,hl
 ROMB:51AD 29               add  hl,hl
 ROMB:51AE 29               add  hl,hl          // HL = (A/32 + (A%32) * 8 + ($C9BF)) * 16
 ROMB:51AF 11 00 80         ld   de,8000
 ROMB:51B2 19               add  hl,de          // H = 128 + (A/32 + (A%32) * 8 + ($C9BF)) / 16; L = ((A/32 + (A%32) * 8 + ($C9BF)) * 16)%256
 ROMB:51B3 D1               pop  de
 ROMB:51B4 C9               ret  
 ROMB:51B5 C5               push bc
 ROMB:51B6 D5               push de
 ROMB:51B7 E5               push hl
 ROMB:51B8 F5               push af
 ROMB:51B9 CD 00 47         call 4700           // set 0,($D000 + ($C98D) * 16) WRAM bank 4
 ROMB:51BC CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMB:51BF F1               pop  af
 ROMB:51C0 CD CD 51         call 51CD           // Handles Popup Message graphics (A is Popup Message #)
 ROMB:51C3 CD F9 46         call 46F9           // res 0,WRA4[$D000 + ($C98D) * 16]
 ROMB:51C6 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMB:51C9 E1               pop  hl
 ROMB:51CA D1               pop  de
 ROMB:51CB C1               pop  bc
 ROMB:51CC C9               ret                 // Handles Popup Message as a whole including momentary cursor disabling (A is Popup Message #)
 ROMB:51CD C5               push bc
 ROMB:51CE D5               push de
 ROMB:51CF E5               push hl
 ROMB:51D0 47               ld   b,a
 ROMB:51D1 87               add  a              // A = A * 2
 ROMB:51D2 80               add  b              // A = A * 3
 ROMB:51D3 21 71 52         ld   hl,5271
 ROMB:51D6 CD BC 29         call 29BC           // HL = $5271 + A * 3
 ROMB:51D9 2A               ldi  a,(hl)
 ROMB:51DA 4E               ld   c,(hl)
 ROMB:51DB 23               inc  hl
 ROMB:51DC 46               ld   b,(hl)
 ROMB:51DD C5               push bc
 ROMB:51DE 6F               ld   l,a
 ROMB:51DF 61               ld   h,c            // L = Value #1; H = Value #2
 ROMB:51E0 29               add  hl,hl
 ROMB:51E1 29               add  hl,hl
 ROMB:51E2 29               add  hl,hl
 ROMB:51E3 29               add  hl,hl          // HL = 16 * (Value #1 + Value #2 * 256)
 ROMB:51E4 11 10 5E         ld   de,5E10
 ROMB:51E7 19               add  hl,de
 ROMB:51E8 54               ld   d,h
 ROMB:51E9 5D               ld   e,l            // DE = $5E10 + 16 * (Value #1 + Value #2 * 256)
 ROMB:51EA 68               ld   l,b
 ROMB:51EB 26 00            ld   h,00
 ROMB:51ED 29               add  hl,hl
 ROMB:51EE 29               add  hl,hl
 ROMB:51EF 29               add  hl,hl
 ROMB:51F0 29               add  hl,hl
 ROMB:51F1 29               add  hl,hl          // HL = 32 * Value #3
 ROMB:51F2 44               ld   b,h
 ROMB:51F3 4D               ld   c,l            // BC = 32 * Value #3
 ROMB:51F4 3E 00            ld   a,00
 ROMB:51F6 E0 83            ld   (ff00+83),a
 ROMB:51F8 E0 4F            ld   (ff00+4F),a    // VRA0
 ROMB:51FA 21 00 8C         ld   hl,8C00
 ROMB:51FD EF 11 59 3B                          // (HL ~ HL+BC-1) = (DE ~ DE+BC-1)
 ROMB:5201 C1               pop  bc
 ROMB:5202 50               ld   d,b
 ROMB:5203 1E 02            ld   e,02
 ROMB:5205 3E 14            ld   a,14
 ROMB:5207 92               sub  d
 ROMB:5208 CB 3F            srl  a
 ROMB:520A 47               ld   b,a
 ROMB:520B 0E 05            ld   c,05           // B = trunc((20 - Popup length)/2); C = 5
 ROMB:520D CD 3D 76         call 763D           // Sets up next table of covered graphics within late WRA4 Bank (BC is starting location relative to scroll, DE is size)
 ROMB:5210 CD D4 0E         call 0ED4           // HL = $9800 + B + C * 32
 ROMB:5213 0E C0            ld   c,C0
 ROMB:5215 D5               push de
 ROMB:5216 E5               push hl
 ROMB:5217 3E 00            ld   a,00           // Loop begins here or 2 lines earlier
 ROMB:5219 E0 83            ld   (ff00+83),a
 ROMB:521B E0 4F            ld   (ff00+4F),a    // VRA0
 ROMB:521D 79               ld   a,c
 ROMB:521E CD 2D 0F         call 0F2D           // (HL) = A with cooldown based on bit 1,($FF41)
 ROMB:5221 3E 01            ld   a,01
 ROMB:5223 E0 83            ld   (ff00+83),a
 ROMB:5225 E0 4F            ld   (ff00+4F),a    // VRA1
 ROMB:5227 AF               xor  a
 ROMB:5228 CD 2D 0F         call 0F2D           // (HL) = A with cooldown based on bit 1,($FF41)
 ROMB:522B CD EA 0E         call 0EEA           // L = (L/32)*32 + (L+1)%32
 ROMB:522E 0C               inc  c
 ROMB:522F 15               dec  d
 ROMB:5230 20 E5            jr   nz,5217
 ROMB:5232 E1               pop  hl
 ROMB:5233 CD F7 0E         call 0EF7           // HL = AND (HL + $20),$9BFF
 ROMB:5236 D1               pop  de
 ROMB:5237 1D               dec  e
 ROMB:5238 20 DB            jr   nz,5215        // Establishes Popup Message graphics
 ROMB:523A FA 33 C6         ld   a,(C633)
 ROMB:523D E6 01            and  a,01
 ROMB:523F 21 31 C6         ld   hl,C631
 ROMB:5242 CD BC 29         call 29BC           // HL = $C631 + active player
 ROMB:5245 4E               ld   c,(hl)         // C = active player's AI check
 ROMB:5246 79               ld   a,c
 ROMB:5247 A7               and  a
 ROMB:5248 28 04            jr   z,524E
 ROMB:524A 06 1E            ld   b,1E
 ROMB:524C 18 02            jr   5250
 ROMB:524E 06 3C            ld   b,3C           // B = 60 for human, 30 for AI
 ROMB:5250 C5               push bc             // Loop begins here
 ROMB:5251 CD A2 05         call 05A2           // Button update, next frame
 ROMB:5254 C1               pop  bc
 ROMB:5255 79               ld   a,c
 ROMB:5256 A7               and  a
 ROMB:5257 20 0E            jr   nz,5267        // Skip Button checks if AI
 ROMB:5259 F0 91            ld   a,(ff00+91)
 ROMB:525B CB 47            bit  0,a            // A button?
 ROMB:525D 20 0B            jr   nz,526A
 ROMB:525F CB 4F            bit  1,a            // B button?
 ROMB:5261 20 07            jr   nz,526A
 ROMB:5263 CB 5F            bit  3,a            // Start button?
 ROMB:5265 20 03            jr   nz,526A
 ROMB:5267 05               dec  b
 ROMB:5268 20 E6            jr   nz,5250
 ROMB:526A CD 45 76         call 7645           // Restores last table of covered graphics
 ROMB:526D E1               pop  hl
 ROMB:526E D1               pop  de
 ROMB:526F C1               pop  bc
 ROMB:5270 C9               ret                 // Handles Popup Message graphics (A is Popup Message #)

 ROMB:5271 00 00 08                             // Buildup Complete
 ROMB:5274 10 00 08                             // City Captured
 ROMB:5277 20 00 08                             // Airport Captured
 ROMB:527A 30 00 06                             // Harbor Captured
 ROMB:527D 3C 00 08                             // Simple Airport Captured
 ROMB:5280 4C 00 08                             // Loading Complete
 ROMB:5283 5C 00 04                             // Linkup
 ROMB:5286 64 00 04                             // Dispose
 ROMB:5289 6C 00 04                             // Standby (same Kanji as the command)
 ROMB:528C 74 00 08                             // All Supply Complete
 ROMB:528F 84 00 08                             // Fuel Exhausted
 ROMB:5292 94 00 08                             // Supply Complete
 ROMB:5295 A4 00 06                             // Thinking
 ROMB:5298 B0 00 08                             // HQ Captured
 ROMB:529B C0 00 08                             // Forces Routed (unused due to (neat) animation for routing)
 ROMB:529E D0 00 08                             // Gold Insufficient
 ROMB:52A1 E0 00 08                             // Materials Insufficient
 ROMB:52A4 F0 00 08                             // Factory Captured
 ROMB:52A7 00 01 0A                             // Communication Tower Captured
 ROMB:52AA 14 01 0A                             // News from Enemy Army
 ROMB:52AD 28 01 0A                             // Units Max
 ROMB:52B0 3C 01 0A                             // Facilities Max
 ROMB:52B3 50 01 08                             // Ammo Exhausted
 ROMB:52B6 60 01 08                             // Supplies Insuffficient
 ROMB:52B9 70 01 0D                             // News from Military HQ

 ROMB:52BC CD F3 04         call 04F3           // Shuts off LCD Display if necessary
 ROMB:52BF 3E 00            ld   a,00
 ROMB:52C1 E0 83            ld   (ff00+83),a
 ROMB:52C3 E0 4F            ld   (ff00+4F),a    // VRA0
 ROMB:52C5 11 38 66         ld   de,6638
 ROMB:52C8 21 00 90         ld   hl,9000
 ROMB:52CB 01 20 03         ld   bc,0320
 ROMB:52CE EF 01 50 3B                          // VRA0($9000 ~ $931F) holds terrain zoomed out graphics
 ROMB:52D2 CD 21 46         call 4621           // Sets up Cursor tiles in VRA0 tiles 96~122
 ROMB:52D5 3E 00            ld   a,00
 ROMB:52D7 06 06            ld   b,06
 ROMB:52D9 0E 01            ld   c,01
 ROMB:52DB 21 58 69         ld   hl,6958
 ROMB:52DE CD D9 06         call 06D9           // ($C4E0) to ($C50F) hold $1:($6958) to $1:($6987)
 ROMB:52E1 CD F2 06         call 06F2           // Both BG and Sprite Palette tables are updated
 ROMB:52E4 CD 57 40         call 4057           // Establishes potential cursor sprite graphic palettes
 ROMB:52E7 CD D7 46         call 46D7           // Establishes Big Cursor basic sprite info
 ROMB:52EA CD F9 46         call 46F9           // res 0,WRA4[$D000 + ($C98D) * 16]
 ROMB:52ED CD 02 0F         call 0F02           // Empties ($9800) to ($9BFF) in both VRAM banks
 ROMB:52F0 CD 66 53         call 5366           // Establishes all on-screen tiles' terrain graphics for zoomed out map
 ROMB:52F3 CD A0 53         call 53A0           // LCD Stat and V-Blank Interrupt procedures changed for zoomed out map view
 ROMB:52F6 CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 ROMB:52F9 CD A2 05         call 05A2           // Button update, next frame (loop begins here)
 ROMB:52FC CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMB:52FF CD CA 53         call 53CA           // Zoomed out map view coordinates update if bit 6,($FFAC) is active
 ROMB:5302 F0 AC            ld   a,(ff00+AC)
 ROMB:5304 CB 7F            bit  7,a
 ROMB:5306 20 F1            jr   nz,52F9        // Goes back to button update if camera needs to move
 ROMB:5308 F0 92            ld   a,(ff00+92)
 ROMB:530A CB 47            bit  0,a            // A
 ROMB:530C 20 1A            jr   nz,5328
 ROMB:530E CB 4F            bit  1,a            // B
 ROMB:5310 20 30            jr   nz,5342
 ROMB:5312 CB 57            bit  2,a            // Z
 ROMB:5314 20 2C            jr   nz,5342
 ROMB:5316 CB 67            bit  4,a            // R
 ROMB:5318 20 37            jr   nz,5351
 ROMB:531A CB 6F            bit  5,a            // L
 ROMB:531C 20 38            jr   nz,5356
 ROMB:531E CB 77            bit  6,a            // U
 ROMB:5320 20 39            jr   nz,535B
 ROMB:5322 CB 7F            bit  7,a            // D
 ROMB:5324 20 3A            jr   nz,5360
 ROMB:5326 18 D1            jr   52F9           // Still waiting
 ROMB:5328 3E 0A            ld   a,0A
 ROMB:532A CD 44 38         call 3844
 ROMB:532D CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMB:5330 CD B9 53         call 53B9           // V-Blank Interrupt procedure changed for standard zoom map; LCD Stat Interrupt rendered unavailable
 ROMB:5333 FA C3 C9         ld   a,(C9C3)
 ROMB:5336 C6 09            add  a,09
 ROMB:5338 47               ld   b,a
 ROMB:5339 FA C4 C9         ld   a,(C9C4)
 ROMB:533C C6 09            add  a,09
 ROMB:533E 4F               ld   c,a            // BC = view selection center tile
 ROMB:533F AF               xor  a
 ROMB:5340 18 23            jr   5365           // End with A = 0, BC = view selection center tile (A button pressing)
 ROMB:5342 3E 0C            ld   a,0C
 ROMB:5344 CD 44 38         call 3844
 ROMB:5347 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMB:534A CD B9 53         call 53B9           // V-Blank Interrupt procedure changed for standard zoom map; LCD Stat Interrupt rendered unavailable
 ROMB:534D 3E FF            ld   a,FF
 ROMB:534F 18 14            jr   5365           // End with A = -1 (B/Select button pressing; rest of directions below is RLUD)
 ROMB:5351 CD 06 54         call 5406           // If view moves any further right, ($FFAC) 4 byte holds: OR ($FFAC),$82; new rightmost column; topmost row; 18
 ROMB:5354 18 A3            jr   52F9
 ROMB:5356 CD 31 54         call 5431           // If view moves any further left, ($FFAC) 4 byte holds: OR ($FFAC),$81; new leftmost column; topmost row; 18
 ROMB:5359 18 9E            jr   52F9
 ROMB:535B CD 7D 54         call 547D           // If view moves any further up, ($FFAC) 4 byte holds: OR ($FFAC),$84; leftmost column; new topmost row; 20 + HEX modifier
 ROMB:535E 18 99            jr   52F9
 ROMB:5360 CD 54 54         call 5454           // If view moves any further down, ($FFAC) 4 byte holds: OR ($FFAC),$88; leftmost column; new bottommost row; 20 + HEX modifier
 ROMB:5363 18 94            jr   52F9
 ROMB:5365 C9               ret                 // Zoomed out map view controls, ending with A = -1 for B Button, or 0 for A Button; latter has BC as view selection center tile
 ROMB:5366 F0 82            ld   a,(ff00+82)
 ROMB:5368 F5               push af
 ROMB:5369 CD 8F 53         call 538F           // Establishes coordinates of upper-left corner tile in zoomed out map view within ($C9C3) 2 byte
 ROMB:536C FA C4 C9         ld   a,(C9C4)
 ROMB:536F 4F               ld   c,a            // Upper left corner Y coordinate held for Hex gridding stuff
 ROMB:5370 1E 12            ld   e,12
 ROMB:5372 16 14            ld   d,14           // New row loop begins here
 ROMB:5374 FA C3 C9         ld   a,(C9C3)
 ROMB:5377 47               ld   b,a
 ROMB:5378 CB 41            bit  0,c
 ROMB:537A 28 02            jr   z,537E
 ROMB:537C 05               dec  b
 ROMB:537D 14               inc  d
 ROMB:537E CD 14 28         call 2814           // Establishes zoomed out map tile's graphics
 ROMB:5381 04               inc  b
 ROMB:5382 15               dec  d
 ROMB:5383 20 F9            jr   nz,537E        // Loops back for continuing with the row
 ROMB:5385 0C               inc  c
 ROMB:5386 1D               dec  e
 ROMB:5387 20 E9            jr   nz,5372
 ROMB:5389 F1               pop  af
 ROMB:538A E0 82            ld   (ff00+82),a
 ROMB:538C E0 70            ld   (ff00+70),a
 ROMB:538E C9               ret                 // Establishes all on-screen tiles' terrain graphics for zoomed out map
 ROMB:538F FA 8B C9         ld   a,(C98B)
 ROMB:5392 D6 05            sub  a,05
 ROMB:5394 EA C3 C9         ld   (C9C3),a
 ROMB:5397 FA 8C C9         ld   a,(C98C)
 ROMB:539A D6 05            sub  a,05
 ROMB:539C EA C4 C9         ld   (C9C4),a
 ROMB:539F C9               ret                 // Establishes coordinates of upper-left corner tile in zoomed out map view within ($C9C3) 2 byte
 ROMB:53A0 E5               push hl
 ROMB:53A1 F3               di   
 ROMB:53A2 21 CB 26         ld   hl,26CB
 ROMB:53A5 CD 35 03         call 0335           // LCD Stat Interrupt procedure: Shifts SCX if advancing to next row of zoomed out map tiles
 ROMB:53A8 21 41 FF         ld   hl,FF41
 ROMB:53AB CB DE            set  3,(hl)
 ROMB:53AD CD 51 05         call 0551           // ($FF0F) = 0; set 1,($FFFF) (LCD STAT Enable On)
 ROMB:53B0 21 FF 26         ld   hl,26FF
 ROMB:53B3 CD 60 03         call 0360           // V-Blank Interrupt procedure: sets up graphics stats for zoomed out map
 ROMB:53B6 FB               ei   
 ROMB:53B7 E1               pop  hl
 ROMB:53B8 C9               ret                 // LCD Stat and V-Blank Interrupt procedures changed for zoomed out map view
 ROMB:53B9 F3               di   
 ROMB:53BA CD 5B 05         call 055B           // ($FF0F) = 0; res 1,($FFFF) (LCD STAT Enable Off)
 ROMB:53BD 21 41 FF         ld   hl,FF41
 ROMB:53C0 CB 9E            res  3,(hl)
 ROMB:53C2 CD 44 03         call 0344           // Basically No LCD Stat Interrupt procedure
 ROMB:53C5 CD 6F 03         call 036F           // V-Blank Interrupt procedure: sets up text and graphics stats for standard zoom map
 ROMB:53C8 FB               ei   
 ROMB:53C9 C9               ret                 // V-Blank Interrupt procedure changed for standard zoom map; LCD Stat Interrupt rendered unavailable
 ROMB:53CA F0 AC            ld   a,(ff00+AC)
 ROMB:53CC CB 77            bit  6,a
 ROMB:53CE C8               ret  z
 ROMB:53CF CB 47            bit  0,a            // Left
 ROMB:53D1 20 0D            jr   nz,53E0
 ROMB:53D3 CB 4F            bit  1,a            // Right
 ROMB:53D5 20 12            jr   nz,53E9
 ROMB:53D7 CB 57            bit  2,a            // Up
 ROMB:53D9 20 17            jr   nz,53F2
 ROMB:53DB CB 5F            bit  3,a            // Down
 ROMB:53DD 20 1C            jr   nz,53FB
 ROMB:53DF C9               ret  
 ROMB:53E0 FA C3 C9         ld   a,(C9C3)       // Left
 ROMB:53E3 3D               dec  a
 ROMB:53E4 EA C3 C9         ld   (C9C3),a
 ROMB:53E7 18 07            jr   53F0           // Effectively jumps to end
 ROMB:53E9 FA C3 C9         ld   a,(C9C3)       // Right
 ROMB:53EC 3C               inc  a
 ROMB:53ED EA C3 C9         ld   (C9C3),a
 ROMB:53F0 18 10            jr   5402
 ROMB:53F2 FA C4 C9         ld   a,(C9C4)       // Up
 ROMB:53F5 3D               dec  a
 ROMB:53F6 EA C4 C9         ld   (C9C4),a
 ROMB:53F9 18 07            jr   5402
 ROMB:53FB FA C4 C9         ld   a,(C9C4)       // Down
 ROMB:53FE 3C               inc  a
 ROMB:53FF EA C4 C9         ld   (C9C4),a
 ROMB:5402 AF               xor  a
 ROMB:5403 E0 AC            ld   (ff00+AC),a
 ROMB:5405 C9               ret                 // Zoomed out map view coordinates update
 ROMB:5406 FA 89 C9         ld   a,(C989)
 ROMB:5409 C6 05            add  a,05
 ROMB:540B 47               ld   b,a            // B = Map's horizontal measure + 5
 ROMB:540C FA C3 C9         ld   a,(C9C3)
 ROMB:540F C6 13            add  a,13
 ROMB:5411 B8               cp   b
 ROMB:5412 28 1C            jr   z,5430         // Ends immediately if view won't move any further right
 ROMB:5414 F0 AC            ld   a,(ff00+AC)
 ROMB:5416 CB CF            set  1,a
 ROMB:5418 E0 AC            ld   (ff00+AC),a
 ROMB:541A FA C3 C9         ld   a,(C9C3)
 ROMB:541D C6 14            add  a,14
 ROMB:541F 47               ld   b,a
 ROMB:5420 FA C4 C9         ld   a,(C9C4)
 ROMB:5423 4F               ld   c,a
 ROMB:5424 3E 12            ld   a,12
 ROMB:5426 CD A7 54         call 54A7           // ($FFAC) 4 byte holds: OR ($FFAC),$80, B, C, A
 ROMB:5429 3E 09            ld   a,09
 ROMB:542B CD 44 38         call 3844
 ROMB:542E 18 00            jr   5430
 ROMB:5430 C9               ret                 // If view moves any further right, ($FFAC) 4 byte holds: OR ($FFAC),$82; new rightmost column; topmost row; 18
 ROMB:5431 FA C3 C9         ld   a,(C9C3)
 ROMB:5434 FE FB            cp   a,FB
 ROMB:5436 28 1B            jr   z,5453
 ROMB:5438 F0 AC            ld   a,(ff00+AC)
 ROMB:543A CB C7            set  0,a
 ROMB:543C E0 AC            ld   (ff00+AC),a
 ROMB:543E FA C3 C9         ld   a,(C9C3)
 ROMB:5441 3D               dec  a
 ROMB:5442 47               ld   b,a
 ROMB:5443 FA C4 C9         ld   a,(C9C4)
 ROMB:5446 4F               ld   c,a
 ROMB:5447 3E 12            ld   a,12
 ROMB:5449 CD A7 54         call 54A7           // ($FFAC) 4 byte holds: OR ($FFAC),$80, B, C, A
 ROMB:544C 3E 09            ld   a,09
 ROMB:544E CD 44 38         call 3844
 ROMB:5451 18 00            jr   5453
 ROMB:5453 C9               ret                 // If view moves any further left, ($FFAC) 4 byte holds: OR ($FFAC),$81; new leftmost column; topmost row; 18
 ROMB:5454 FA 8A C9         ld   a,(C98A)
 ROMB:5457 C6 04            add  a,04
 ROMB:5459 4F               ld   c,a
 ROMB:545A FA C4 C9         ld   a,(C9C4)
 ROMB:545D C6 12            add  a,12
 ROMB:545F B9               cp   c
 ROMB:5460 28 1A            jr   z,547C
 ROMB:5462 F0 AC            ld   a,(ff00+AC)
 ROMB:5464 CB DF            set  3,a
 ROMB:5466 E0 AC            ld   (ff00+AC),a
 ROMB:5468 FA C3 C9         ld   a,(C9C3)
 ROMB:546B 47               ld   b,a
 ROMB:546C FA C4 C9         ld   a,(C9C4)
 ROMB:546F C6 12            add  a,12
 ROMB:5471 4F               ld   c,a
 ROMB:5472 CD 9E 54         call 549E           // ($FFAC) 4 byte holds: OR ($FFAC),$80, B - (C%2), C, 20 + (C%2)
 ROMB:5475 3E 09            ld   a,09
 ROMB:5477 CD 44 38         call 3844
 ROMB:547A 18 00            jr   547C
 ROMB:547C C9               ret                 // If view moves any further down, ($FFAC) 4 byte holds: OR ($FFAC),$88; leftmost column; new bottommost row; 20 + HEX modifier
 ROMB:547D FA C4 C9         ld   a,(C9C4)
 ROMB:5480 FE FB            cp   a,FB
 ROMB:5482 28 19            jr   z,549D
 ROMB:5484 F0 AC            ld   a,(ff00+AC)
 ROMB:5486 CB D7            set  2,a
 ROMB:5488 E0 AC            ld   (ff00+AC),a
 ROMB:548A FA C3 C9         ld   a,(C9C3)
 ROMB:548D 47               ld   b,a
 ROMB:548E FA C4 C9         ld   a,(C9C4)
 ROMB:5491 3D               dec  a
 ROMB:5492 4F               ld   c,a
 ROMB:5493 CD 9E 54         call 549E           // ($FFAC) 4 byte holds: OR ($FFAC),$80, B - (C%2), C, 20 + (C%2)
 ROMB:5496 3E 09            ld   a,09
 ROMB:5498 CD 44 38         call 3844
 ROMB:549B 18 00            jr   549D
 ROMB:549D C9               ret                 // If view moves any further up, ($FFAC) 4 byte holds: OR ($FFAC),$84; leftmost column; new topmost row; 20 + HEX modifier
 ROMB:549E 3E 14            ld   a,14
 ROMB:54A0 CB 41            bit  0,c
 ROMB:54A2 28 03            jr   z,54A7
 ROMB:54A4 05               dec  b
 ROMB:54A5 3E 15            ld   a,15
 ROMB:54A7 E0 AF            ld   (ff00+AF),a
 ROMB:54A9 78               ld   a,b
 ROMB:54AA E0 AD            ld   (ff00+AD),a
 ROMB:54AC 79               ld   a,c
 ROMB:54AD E0 AE            ld   (ff00+AE),a
 ROMB:54AF F0 AC            ld   a,(ff00+AC)
 ROMB:54B1 CB FF            set  7,a
 ROMB:54B3 E0 AC            ld   (ff00+AC),a
 ROMB:54B5 C9               ret                 // ($FFAC) 4 byte holds: OR ($FFAC),$80, B - (C%2), C, 20 + (C%2)
 ROMB:54B6 FA DD CC         ld   a,(CCDD)       // Unit Type
 ROMB:54B9 EA C5 C9         ld   (C9C5),a
 ROMB:54BC FA E4 CC         ld   a,(CCE4)       // Fuel
 ROMB:54BF EA C6 C9         ld   (C9C6),a
 ROMB:54C2 FA DE CC         ld   a,(CCDE)       // Coordinates
 ROMB:54C5 EA C7 C9         ld   (C9C7),a
 ROMB:54C8 FA DF CC         ld   a,(CCDF)
 ROMB:54CB EA C8 C9         ld   (C9C8),a
 ROMB:54CE FA E5 CC         ld   a,(CCE5)       // Ammo
 ROMB:54D1 EA C9 C9         ld   (C9C9),a
 ROMB:54D4 FA DD C9         ld   a,(C9DD)
 ROMB:54D7 A7               and  a
 ROMB:54D8 CA E0 54         jp   z,54E0
 ROMB:54DB EF 0C E6 70                          // Establishes Movement for Pave Command
 ROMB:54DF C9               ret                 // Establishes Movement for Movement/Pave Commands
 ROMB:54E0 C5               push bc
 ROMB:54E1 D5               push de
 ROMB:54E2 F0 82            ld   a,(ff00+82)
 ROMB:54E4 F5               push af
 ROMB:54E5 3E 05            ld   a,05
 ROMB:54E7 E0 82            ld   (ff00+82),a
 ROMB:54E9 E0 70            ld   (ff00+70),a
 ROMB:54EB FA 85 C6         ld   a,(C685)
 ROMB:54EE F5               push af
 ROMB:54EF 21 85 C6         ld   hl,C685
 ROMB:54F2 CB E6            set  4,(hl)
 ROMB:54F4 FA C5 C9         ld   a,(C9C5)
 ROMB:54F7 CB 3F            srl  a              // A = Unit type
 ROMB:54F9 FE 22            cp   a,22           // Lite Bomber?
 ROMB:54FB 28 06            jr   z,5503
 ROMB:54FD FE 24            cp   a,24           // Mercenary Bomber?
 ROMB:54FF 28 02            jr   z,5503
 ROMB:5501 18 05            jr   5508
 ROMB:5503 21 85 C6         ld   hl,C685
 ROMB:5506 CB A6            res  4,(hl)
 ROMB:5508 FA C5 C9         ld   a,(C9C5)
 ROMB:550B E6 01            and  a,01
 ROMB:550D EE 01            xor  a,01           // A = 1 if Red Star, 0 if White Moon
 ROMB:550F CD 3C 57         call 573C           // WRAM Bank #6 map has enemy occupied (bit 1) and ZOC tiles (bit 0) marked
 ROMB:5512 F1               pop  af
 ROMB:5513 EA 85 C6         ld   (C685),a       // Configuration settings restored
 ROMB:5516 3E FF            ld   a,FF
 ROMB:5518 21 00 D0         ld   hl,D000
 ROMB:551B 01 80 0D         ld   bc,0D80
 ROMB:551E CD 79 3B         call 3B79           // WRAM Bank #5 map emptied
 ROMB:5521 CD 39 55         call 5539           // A = swap(min(Movement Power,Fuel))
 ROMB:5524 E0 B5            ld   (ff00+B5),a    // ($FFB5) = swap(min(Movement Power,Fuel))
 ROMB:5526 FA C7 C9         ld   a,(C9C7)
 ROMB:5529 47               ld   b,a
 ROMB:552A FA C8 C9         ld   a,(C9C8)
 ROMB:552D 4F               ld   c,a            // BC = coordinates
 ROMB:552E CD 5F 55         call 555F           // WRAM Bank #5 holds Movement requirements, WRAM Bank #2 has set 7 done to viable movement tiles
 ROMB:5531 F1               pop  af
 ROMB:5532 E0 82            ld   (ff00+82),a
 ROMB:5534 E0 70            ld   (ff00+70),a
 ROMB:5536 D1               pop  de
 ROMB:5537 C1               pop  bc
 ROMB:5538 C9               ret                 // WRAM Bank #2 has set 7 done to viable movement tiles, WRAM Bank #5 map has Movement requirements, WRAM Bank #6 map has enemy occupied (bit 1) and ZOC tiles (bit 0) marked
 ROMB:5539 C5               push bc
 ROMB:553A D5               push de
 ROMB:553B FA C5 C9         ld   a,(C9C5)
 ROMB:553E 0E 19            ld   c,19
 ROMB:5540 EF 12 37 40                          // A = Movement Type
 ROMB:5544 EF 12 AD 47                          // ($CD43) to ($CD76) hold Movement Costs
 ROMB:5548 FA C5 C9         ld   a,(C9C5)
 ROMB:554B 0E 0C            ld   c,0C
 ROMB:554D EF 12 37 40                          // A = Movement Power
 ROMB:5551 57               ld   d,a            // D = Movement Power
 ROMB:5552 FA C6 C9         ld   a,(C9C6)       // A = Fuel
 ROMB:5555 BA               cp   d
 ROMB:5556 30 01            jr   nc,5559        // Skips next 2 lines if Movement Power > Fuel
 ROMB:5558 57               ld   d,a
 ROMB:5559 7A               ld   a,d            // Minimizes Movement Power to Fuel
 ROMB:555A CB 37            swap a
 ROMB:555C D1               pop  de
 ROMB:555D C1               pop  bc
 ROMB:555E C9               ret                 // A = swap(min(Movement Power,Fuel))
 ROMB:555F AF               xor  a
 ROMB:5560 E0 B3            ld   (ff00+B3),a
 ROMB:5562 E0 B4            ld   (ff00+B4),a
 ROMB:5564 E0 B6            ld   (ff00+B6),a
 ROMB:5566 CD F8 15         call 15F8           // HL = $D000 + B + C * 64
 ROMB:5569 AF               xor  a
 ROMB:556A 77               ld   (hl),a         // Empties WRAM Bank map location
 ROMB:556B F0 82            ld   a,(ff00+82)
 ROMB:556D F5               push af
 ROMB:556E 3E 02            ld   a,02
 ROMB:5570 E0 82            ld   (ff00+82),a
 ROMB:5572 E0 70            ld   (ff00+70),a
 ROMB:5574 CB FE            set  7,(hl)
 ROMB:5576 F1               pop  af
 ROMB:5577 E0 82            ld   (ff00+82),a
 ROMB:5579 E0 70            ld   (ff00+70),a
 ROMB:557B F0 B4            ld   a,(ff00+B4)
 ROMB:557D 6F               ld   l,a
 ROMB:557E 26 00            ld   h,00
 ROMB:5580 29               add  hl,hl          // HL = ($FFB4) * 2
 ROMB:5581 7C               ld   a,h
 ROMB:5582 C6 DE            add  a,DE
 ROMB:5584 67               ld   h,a
 ROMB:5585 70               ld   (hl),b
 ROMB:5586 23               inc  hl
 ROMB:5587 71               ld   (hl),c         // ($DE00) 2 byte holds base coordinates
 ROMB:5588 21 B4 FF         ld   hl,FFB4
 ROMB:558B 34               inc  (hl)
 ROMB:558C F0 B3            ld   a,(ff00+B3)    // Big loop starts here
 ROMB:558E 6F               ld   l,a
 ROMB:558F 26 00            ld   h,00
 ROMB:5591 29               add  hl,hl
 ROMB:5592 7C               ld   a,h
 ROMB:5593 C6 DE            add  a,DE
 ROMB:5595 67               ld   h,a
 ROMB:5596 46               ld   b,(hl)
 ROMB:5597 23               inc  hl
 ROMB:5598 4E               ld   c,(hl)         // BC holds coordinates to check
 ROMB:5599 79               ld   a,c
 ROMB:559A 0F               rrca 
 ROMB:559B 0F               rrca 
 ROMB:559C 6F               ld   l,a
 ROMB:559D E6 0F            and  a,0F
 ROMB:559F C6 D0            add  a,D0
 ROMB:55A1 67               ld   h,a
 ROMB:55A2 7D               ld   a,l
 ROMB:55A3 E6 F0            and  a,F0
 ROMB:55A5 80               add  b
 ROMB:55A6 6F               ld   l,a            // HL = $D000 + x + y * 64
 ROMB:55A7 7E               ld   a,(hl)         // Minimum movement Requirement
 ROMB:55A8 E0 B6            ld   (ff00+B6),a
 ROMB:55AA 1E 00            ld   e,00
 ROMB:55AC C5               push bc             // Surrounding tiles loop starts here
 ROMB:55AD D5               push de
 ROMB:55AE CD D9 28         call 28D9           // BC hold relative coordinates
 ROMB:55B1 38 2D            jr   c,55E0
 ROMB:55B3 CD F4 55         call 55F4           // A = 0 if movement requirement needs updating, 1 otherwise; D = Movement requirement just in case
 ROMB:55B6 A7               and  a
 ROMB:55B7 20 27            jr   nz,55E0        // End smaller cycle if no update needed
 ROMB:55B9 72               ld   (hl),d         // Base WRAM Bank relative coordinates holds minimum Movement requirement
 ROMB:55BA F0 82            ld   a,(ff00+82)
 ROMB:55BC F5               push af
 ROMB:55BD 3E 02            ld   a,02
 ROMB:55BF E0 82            ld   (ff00+82),a
 ROMB:55C1 E0 70            ld   (ff00+70),a
 ROMB:55C3 CB FE            set  7,(hl)
 ROMB:55C5 F1               pop  af
 ROMB:55C6 E0 82            ld   (ff00+82),a
 ROMB:55C8 E0 70            ld   (ff00+70),a    // set 7,WRAM Bank #2 (HL)
 ROMB:55CA CD AE 57         call 57AE           // Zero Flag triggered by Enemy ZOC flag inactive on map tile indicated by HL
 ROMB:55CD 20 11            jr   nz,55E0        // Won't get listed if within Enemy ZOC
 ROMB:55CF F0 B4            ld   a,(ff00+B4)
 ROMB:55D1 6F               ld   l,a
 ROMB:55D2 26 00            ld   h,00
 ROMB:55D4 29               add  hl,hl
 ROMB:55D5 7C               ld   a,h
 ROMB:55D6 C6 DE            add  a,DE
 ROMB:55D8 67               ld   h,a
 ROMB:55D9 70               ld   (hl),b
 ROMB:55DA 23               inc  hl
 ROMB:55DB 71               ld   (hl),c
 ROMB:55DC 21 B4 FF         ld   hl,FFB4
 ROMB:55DF 34               inc  (hl)           // Listing more coordinates
 ROMB:55E0 D1               pop  de
 ROMB:55E1 C1               pop  bc
 ROMB:55E2 1C               inc  e
 ROMB:55E3 7B               ld   a,e
 ROMB:55E4 FE 06            cp   a,06
 ROMB:55E6 20 C4            jr   nz,55AC        // End of surrounding tiles loop
 ROMB:55E8 F0 B3            ld   a,(ff00+B3)
 ROMB:55EA 3C               inc  a
 ROMB:55EB E0 B3            ld   (ff00+B3),a
 ROMB:55ED 21 B4 FF         ld   hl,FFB4
 ROMB:55F0 BE               cp   (hl)
 ROMB:55F1 20 99            jr   nz,558C        // End of big loop (finishes when full list is checked out)
 ROMB:55F3 C9               ret                 // Base WRAM Bank holds Movement requirements, WRAM Bank #2 has set 7 done to viable movement tiles
 ROMB:55F4 C5               push bc
 ROMB:55F5 79               ld   a,c
 ROMB:55F6 0F               rrca 
 ROMB:55F7 0F               rrca 
 ROMB:55F8 6F               ld   l,a
 ROMB:55F9 E6 0F            and  a,0F
 ROMB:55FB C6 D0            add  a,D0
 ROMB:55FD 67               ld   h,a
 ROMB:55FE 7D               ld   a,l
 ROMB:55FF E6 F0            and  a,F0
 ROMB:5601 80               add  b
 ROMB:5602 6F               ld   l,a            // HL = $D000 + B + C * 64
 ROMB:5603 CD C2 57         call 57C2           // Zero Flag triggered by Enemy Occupation flag inactive on map tile indicated by HL
 ROMB:5606 20 18            jr   nz,5620        // End with A = 1 if tile is occupied by enemy
 ROMB:5608 CD 24 56         call 5624           // E = used Movement Cost
 ROMB:560B 7B               ld   a,e            // A = used Movement Cost
 ROMB:560C A7               and  a
 ROMB:560D 28 11            jr   z,5620         // End with A = 1 if Movement not happening
 ROMB:560F F0 B6            ld   a,(ff00+B6)
 ROMB:5611 83               add  e              // A = ($FFB6) + Movement Cost
 ROMB:5612 38 0C            jr   c,5620
 ROMB:5614 57               ld   d,a
 ROMB:5615 BE               cp   (hl)
 ROMB:5616 30 08            jr   nc,5620        // Flooring
 ROMB:5618 F0 B5            ld   a,(ff00+B5)    // A = alloted movement
 ROMB:561A BA               cp   d
 ROMB:561B 38 03            jr   c,5620
 ROMB:561D AF               xor  a
 ROMB:561E 18 02            jr   5622
 ROMB:5620 3E 01            ld   a,01
 ROMB:5622 C1               pop  bc
 ROMB:5623 C9               ret                 // A = 0 if movement needs updating, 1 otherwise; D = Movement Requirement just in case
 ROMB:5624 E5               push hl
 ROMB:5625 F0 82            ld   a,(ff00+82)
 ROMB:5627 F5               push af
 ROMB:5628 3E 01            ld   a,01
 ROMB:562A E0 82            ld   (ff00+82),a
 ROMB:562C E0 70            ld   (ff00+70),a    // Map WRAM Bank
 ROMB:562E 7E               ld   a,(hl)
 ROMB:562F E6 3F            and  a,3F           // A = Terrain Type
 ROMB:5631 FE 2A            cp   a,2A
 ROMB:5633 20 27            jr   nz,565C        // Jump unless Beach
 ROMB:5635 3E 02            ld   a,02
 ROMB:5637 E0 82            ld   (ff00+82),a
 ROMB:5639 E0 70            ld   (ff00+70),a    // WRAM Bank #2
 ROMB:563B 7E               ld   a,(hl)
 ROMB:563C E6 7F            and  a,7F
 ROMB:563E 28 1A            jr   z,565A         // Jump if tile unoccupied
 ROMB:5640 EF 12 4E 41                          // A = unit number of primary occupying unit, -1 if there is none
 ROMB:5644 FE FF            cp   a,FF
 ROMB:5646 28 12            jr   z,565A         // Jump if space is unoccupied
 ROMB:5648 C5               push bc
 ROMB:5649 0E 00            ld   c,00
 ROMB:564B EF 12 66 40                          // A = occupying unit's Type
 ROMB:564F C1               pop  bc             // BC = coordinates
 ROMB:5650 CB 3F            srl  a
 ROMB:5652 FE 30            cp   a,30
 ROMB:5654 20 04            jr   nz,565A        // Jump unless Lander
 ROMB:5656 3E 21            ld   a,21
 ROMB:5658 18 02            jr   565C           // Beach Terrain treated as Road
 ROMB:565A 3E 2A            ld   a,2A
 ROMB:565C 5F               ld   e,a            // Meet back here
 ROMB:565D 16 00            ld   d,00
 ROMB:565F 21 43 CD         ld   hl,CD43
 ROMB:5662 19               add  hl,de
 ROMB:5663 5E               ld   e,(hl)         // E = Movement Cost
 ROMB:5664 F1               pop  af
 ROMB:5665 E0 82            ld   (ff00+82),a
 ROMB:5667 E0 70            ld   (ff00+70),a
 ROMB:5669 E1               pop  hl
 ROMB:566A C9               ret                 // E = used Movement Cost
 ROMB:566B C5               push bc
 ROMB:566C D5               push de
 ROMB:566D E5               push hl
 ROMB:566E F0 82            ld   a,(ff00+82)
 ROMB:5670 F5               push af
 ROMB:5671 3E 02            ld   a,02
 ROMB:5673 E0 82            ld   (ff00+82),a
 ROMB:5675 E0 70            ld   (ff00+70),a
 ROMB:5677 FA 89 C9         ld   a,(C989)
 ROMB:567A 57               ld   d,a
 ROMB:567B FA 8A C9         ld   a,(C98A)
 ROMB:567E 5F               ld   e,a            // DE = Map Size
 ROMB:567F 0E 00            ld   c,00
 ROMB:5681 06 00            ld   b,00           // Loop starts here or next line
 ROMB:5683 CD F8 15         call 15F8           // HL = $D000 + B + C * 64
 ROMB:5686 CB BE            res  7,(hl)         // res 7 on every tile in WRAM Bank #2
 ROMB:5688 04               inc  b
 ROMB:5689 78               ld   a,b
 ROMB:568A BA               cp   d
 ROMB:568B 38 F6            jr   c,5683
 ROMB:568D 0C               inc  c
 ROMB:568E 79               ld   a,c
 ROMB:568F BB               cp   e
 ROMB:5690 38 EF            jr   c,5681         // Check every tile, of course
 ROMB:5692 F1               pop  af
 ROMB:5693 E0 82            ld   (ff00+82),a
 ROMB:5695 E0 70            ld   (ff00+70),a
 ROMB:5697 E1               pop  hl
 ROMB:5698 D1               pop  de
 ROMB:5699 C1               pop  bc
 ROMB:569A C9               ret                 // res 7 on every tile in WRAM Bank #2
 ROMB:569B C5               push bc
 ROMB:569C D5               push de
 ROMB:569D E5               push hl
 ROMB:569E F0 82            ld   a,(ff00+82)
 ROMB:56A0 F5               push af
 ROMB:56A1 3E 05            ld   a,05
 ROMB:56A3 E0 82            ld   (ff00+82),a
 ROMB:56A5 E0 70            ld   (ff00+70),a
 ROMB:56A7 CD 39 55         call 5539           // A = swap(min(Movement Power,Fuel))
 ROMB:56AA E0 B5            ld   (ff00+B5),a
 ROMB:56AC AF               xor  a
 ROMB:56AD EA 80 DD         ld   (DD80),a
 ROMB:56B0 CD F8 15         call 15F8           // HL = $D000 + B + C * 64
 ROMB:56B3 7E               ld   a,(hl)         // A = Movement requirement
 ROMB:56B4 E0 B6            ld   (ff00+B6),a
 ROMB:56B6 FA 80 DD         ld   a,(DD80)       // Loop begins here
 ROMB:56B9 87               add  a
 ROMB:56BA 21 81 DD         ld   hl,DD81
 ROMB:56BD CD BC 29         call 29BC
 ROMB:56C0 70               ld   (hl),b
 ROMB:56C1 23               inc  hl
 ROMB:56C2 71               ld   (hl),c         // ($DD81) 2 byte holds initial BC
 ROMB:56C3 21 80 DD         ld   hl,DD80
 ROMB:56C6 34               inc  (hl)
 ROMB:56C7 CD F8 15         call 15F8           // HL = Tile information location
 ROMB:56CA CD 24 56         call 5624           // E = used Movement Cost
 ROMB:56CD 7B               ld   a,e
 ROMB:56CE 2F               cpl  
 ROMB:56CF 3C               inc  a
 ROMB:56D0 5F               ld   e,a            // E = used Movement Cost * -1
 ROMB:56D1 F0 B6            ld   a,(ff00+B6)
 ROMB:56D3 A7               and  a
 ROMB:56D4 28 24            jr   z,56FA         // Go to ending if Movement requirement is 0
 ROMB:56D6 83               add  e
 ROMB:56D7 E0 B6            ld   (ff00+B6),a    // Subtract Movement Cost from ($FFB6)
 ROMB:56D9 1E 00            ld   e,00
 ROMB:56DB C5               push bc             // Smaller loop begins here
 ROMB:56DC CD D9 28         call 28D9           // BC = relative coordinates, Set Carry Flag based on relative coordinates being out of bounds
 ROMB:56DF 38 0A            jr   c,56EB         // End smaller cycle if tile doesn't exist
 ROMB:56E1 CD F8 15         call 15F8           // HL = $D000 + B + C * 64
 ROMB:56E4 7E               ld   a,(hl)         // A = relative tile's Movement requirement
 ROMB:56E5 21 B6 FF         ld   hl,FFB6
 ROMB:56E8 BE               cp   (hl)
 ROMB:56E9 28 0C            jr   z,56F7         // End big cycle if approaching from given tile
 ROMB:56EB C1               pop  bc
 ROMB:56EC 1C               inc  e
 ROMB:56ED 7B               ld   a,e
 ROMB:56EE FE 06            cp   a,06
 ROMB:56F0 20 E9            jr   nz,56DB
 ROMB:56F2 CD A2 05         call 05A2           // Button update, next frame
 ROMB:56F5 18 FB            jr   56F2
 ROMB:56F7 D1               pop  de
 ROMB:56F8 18 BC            jr   56B6
 ROMB:56FA FA 80 DD         ld   a,(DD80)
 ROMB:56FD 3D               dec  a              // A = Tiles traversed to reach initial BC
 ROMB:56FE 47               ld   b,a
 ROMB:56FF F1               pop  af
 ROMB:5700 E0 82            ld   (ff00+82),a
 ROMB:5702 E0 70            ld   (ff00+70),a
 ROMB:5704 78               ld   a,b
 ROMB:5705 E1               pop  hl
 ROMB:5706 D1               pop  de
 ROMB:5707 C1               pop  bc
 ROMB:5708 C9               ret                 // ($FFB5) has movement capacity, WRA5($DD81) has coordinates for path starting from BC, A has travel distance
 ROMB:5709 F0 82            ld   a,(ff00+82)
 ROMB:570B F5               push af
 ROMB:570C 3E 05            ld   a,05
 ROMB:570E E0 82            ld   (ff00+82),a
 ROMB:5710 E0 70            ld   (ff00+70),a
 ROMB:5712 FA D8 C9         ld   a,(C9D8)
 ROMB:5715 EF 12 06 41                          // ($CCDD) to ($CCEC) holds unit's stats
 ROMB:5719 21 81 DD         ld   hl,DD81
 ROMB:571C 46               ld   b,(hl)
 ROMB:571D 23               inc  hl
 ROMB:571E 4E               ld   c,(hl)         // BC is destination
 ROMB:571F CD F8 15         call 15F8           // HL = $D000 + B + C * 64
 ROMB:5722 7E               ld   a,(hl)
 ROMB:5723 CB 37            swap a
 ROMB:5725 E6 0F            and  a,0F           // Movement Power requirement (truncated, uh okay?)
 ROMB:5727 57               ld   d,a
 ROMB:5728 FA E4 CC         ld   a,(CCE4)
 ROMB:572B 92               sub  d
 ROMB:572C EA E4 CC         ld   (CCE4),a       // Fuel reduction handled--ignores remainder, makes sense
 ROMB:572F FA D8 C9         ld   a,(C9D8)
 ROMB:5732 EF 12 2B 41                          // Unit's stats now holds ($CCDD) to ($CCEC)
 ROMB:5736 F1               pop  af
 ROMB:5737 E0 82            ld   (ff00+82),a
 ROMB:5739 E0 70            ld   (ff00+70),a
 ROMB:573B C9               ret                 // Handles selected unit's fuel reduction (NOTICE: mixed number Movement Power requirement is truncated)
 ROMB:573C C5               push bc
 ROMB:573D D5               push de
 ROMB:573E 5F               ld   e,a
 ROMB:573F F0 82            ld   a,(ff00+82)
 ROMB:5741 F5               push af
 ROMB:5742 3E 06            ld   a,06
 ROMB:5744 E0 82            ld   (ff00+82),a
 ROMB:5746 E0 70            ld   (ff00+70),a
 ROMB:5748 21 00 D0         ld   hl,D000
 ROMB:574B 01 80 0D         ld   bc,0D80
 ROMB:574E AF               xor  a
 ROMB:574F CD 79 3B         call 3B79           // Empties WRA6($D000) to ($DD7F)
 ROMB:5752 26 32            ld   h,32
 ROMB:5754 3E 32            ld   a,32
 ROMB:5756 EA 40 C9         ld   (C940),a
 ROMB:5759 7B               ld   a,e
 ROMB:575A A7               and  a
 ROMB:575B 20 04            jr   nz,5761
 ROMB:575D AF               xor  a
 ROMB:575E EA 40 C9         ld   (C940),a       // ($C940) = 0 if A = 0, 50 otherwise
 ROMB:5761 E5               push hl             // Loop starts here
 ROMB:5762 FA 40 C9         ld   a,(C940)
 ROMB:5765 0E 00            ld   c,00
 ROMB:5767 EF 12 66 40                          // A = Unit type
 ROMB:576B A7               and  a
 ROMB:576C 28 2D            jr   z,579B         // End cycle if unit doesn't exist
 ROMB:576E FA 40 C9         ld   a,(C940)
 ROMB:5771 0E 01            ld   c,01
 ROMB:5773 EF 12 83 40                          // DE = coordinates
 ROMB:5777 43               ld   b,e
 ROMB:5778 4A               ld   c,d            // BC = coordinates in reverse
 ROMB:5779 CD F8 15         call 15F8           // HL = $D000 + B + C * 64
 ROMB:577C CB CE            set  1,(hl)         // Occupied by enemy flag set
 ROMB:577E FA 85 C6         ld   a,(C685)
 ROMB:5781 CB 67            bit  4,a
 ROMB:5783 28 16            jr   z,579B         // Cycle continues if unit starting this isn't Lite Bomber or Mercenary Bomber
 ROMB:5785 1E 00            ld   e,00
 ROMB:5787 D5               push de             // Mini-loop starts here
 ROMB:5788 C5               push bc
 ROMB:5789 CD D9 28         call 28D9           // BC = relative coordinates, Set Carry Flag based on relative coordinates being out of bounds
 ROMB:578C 38 05            jr   c,5793
 ROMB:578E CD F8 15         call 15F8           // HL = $D000 + B + C * 64
 ROMB:5791 CB C6            set  0,(hl)         // Enemy ZOC flag set
 ROMB:5793 C1               pop  bc
 ROMB:5794 D1               pop  de
 ROMB:5795 1C               inc  e
 ROMB:5796 7B               ld   a,e
 ROMB:5797 FE 06            cp   a,06
 ROMB:5799 20 EC            jr   nz,5787        // Marks surrounding tiles as ZOC where applicable
 ROMB:579B E1               pop  hl
 ROMB:579C FA 40 C9         ld   a,(C940)
 ROMB:579F 3C               inc  a
 ROMB:57A0 EA 40 C9         ld   (C940),a
 ROMB:57A3 25               dec  h
 ROMB:57A4 20 BB            jr   nz,5761        // Loops for all enemy units
 ROMB:57A6 F1               pop  af
 ROMB:57A7 E0 82            ld   (ff00+82),a
 ROMB:57A9 E0 70            ld   (ff00+70),a
 ROMB:57AB D1               pop  de
 ROMB:57AC C1               pop  bc
 ROMB:57AD C9               ret                 // WRAM Bank #6 map has enemy occupied (bit 1) and ZOC tiles (bit 0) marked
 ROMB:57AE C5               push bc
 ROMB:57AF F0 82            ld   a,(ff00+82)
 ROMB:57B1 F5               push af
 ROMB:57B2 3E 06            ld   a,06
 ROMB:57B4 E0 82            ld   (ff00+82),a
 ROMB:57B6 E0 70            ld   (ff00+70),a
 ROMB:57B8 46               ld   b,(hl)
 ROMB:57B9 F1               pop  af
 ROMB:57BA E0 82            ld   (ff00+82),a
 ROMB:57BC E0 70            ld   (ff00+70),a
 ROMB:57BE CB 40            bit  0,b
 ROMB:57C0 C1               pop  bc
 ROMB:57C1 C9               ret                 // Zero Flag triggered by Enemy ZOC flag inactive on map tile indicated by HL
 ROMB:57C2 C5               push bc
 ROMB:57C3 F0 82            ld   a,(ff00+82)
 ROMB:57C5 F5               push af
 ROMB:57C6 3E 06            ld   a,06
 ROMB:57C8 E0 82            ld   (ff00+82),a
 ROMB:57CA E0 70            ld   (ff00+70),a
 ROMB:57CC 46               ld   b,(hl)
 ROMB:57CD F1               pop  af
 ROMB:57CE E0 82            ld   (ff00+82),a
 ROMB:57D0 E0 70            ld   (ff00+70),a
 ROMB:57D2 CB 48            bit  1,b
 ROMB:57D4 C1               pop  bc
 ROMB:57D5 C9               ret                 // Zero Flag triggered by Enemy Occupation flag inactive on map tile indicated by HL
 ROMB:57D6 EF 12 F4 43                          // ($CD0B) holds number of allowed units, ($CD0C) holds allowed units in as many bytes as needed
 ROMB:57DA AF               xor  a              // To clarify, this must be the Deployment menu
 ROMB:57DB EA CA C9         ld   (C9CA),a
 ROMB:57DE AF               xor  a
 ROMB:57DF EA 40 C9         ld   (C940),a
 ROMB:57E2 CD 00 47         call 4700           // set 0,($D000 + ($C98D) * 16) WRAM bank 4
 ROMB:57E5 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMB:57E8 CD D2 04         call 04D2           // Next frame
 ROMB:57EB EF 01 FC 40                          // Graphics holding: VRA0($8600) to VRA0($87FF) holds Hiragana up to "ma", then VRA0($8D00) to ($8FFF) holds rest of Hiragana
 ROMB:57EF CD 0D 5A         call 5A0D           // Establishes non-variable text of Build/Call Unit window
 ROMB:57F2 FA 40 C9         ld   a,(C940)
 ROMB:57F5 CD 9D 5A         call 5A9D           // Handles variable text of Build/Call Unit window, sets ($C942) 2 byte to Gold Cost / 100G and ($C944) 2 byte to Materials Cost (A is highlighted unit on Build/Call)
 ROMB:57F8 3E 58            ld   a,58
 ROMB:57FA CD 22 48         call 4822           // Window scrolls up 4 pixels per frame from Y = 152 to Y = A (A must be a multiple of 4 to avoid an infinite loop error)
 ROMB:57FD CD 53 7A         call 7A53           // Sets up box showing active player's current Gold and Materials
 ROMB:5800 CD A2 05         call 05A2           // Button update, next frame (loop begins here)
 ROMB:5803 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMB:5806 F0 92            ld   a,(ff00+92)
 ROMB:5808 CB 4F            bit  1,a            // B
 ROMB:580A 20 64            jr   nz,5870
 ROMB:580C CB 47            bit  0,a            // A
 ROMB:580E 20 73            jr   nz,5883
 ROMB:5810 CB 77            bit  6,a            // Up
 ROMB:5812 20 2B            jr   nz,583F
 ROMB:5814 CB 7F            bit  7,a            // Down
 ROMB:5816 20 40            jr   nz,5858
 ROMB:5818 CB 57            bit  2,a            // Z
 ROMB:581A 20 02            jr   nz,581E
 ROMB:581C 18 E2            jr   5800
 ROMB:581E CD 60 48         call 4860           // Shuts off Window Display, LCD STAT Interrupt, and LYC=LY Coincidence Interrupt
 ROMB:5821 CD 98 7A         call 7A98           // Restores last table of covered graphics
 ROMB:5824 CD 64 21         call 2164           // Empties $FFB1 and $FFB2
 ROMB:5827 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMB:582A FA 41 C9         ld   a,(C941)
 ROMB:582D E6 01            and  a,01
 ROMB:582F 47               ld   b,a
 ROMB:5830 FA 41 C9         ld   a,(C941)
 ROMB:5833 CB 3F            srl  a
 ROMB:5835 EF 25 A5 5D                          // Controls for Unit Information Screen as a whole including unit selection list (A is Unit Type, B is Side; A is -1 if no Unit Type)
 ROMB:5839 CD E6 69         call 69E6           // Reestablishes map graphics
 ROMB:583C C3 E2 57         jp   57E2           // Basically restarts procedure after pressing Select
 ROMB:583F 3E 09            ld   a,09
 ROMB:5841 CD 44 38         call 3844
 ROMB:5844 FA 40 C9         ld   a,(C940)
 ROMB:5847 3D               dec  a
 ROMB:5848 FE FF            cp   a,FF
 ROMB:584A 20 04            jr   nz,5850
 ROMB:584C FA 0B CD         ld   a,(CD0B)
 ROMB:584F 3D               dec  a              // Handles rotation
 ROMB:5850 EA 40 C9         ld   (C940),a
 ROMB:5853 CD 9D 5A         call 5A9D           // Handles variable text of Build/Call Unit window, sets ($C942) 2 byte to Gold Cost / 100G and ($C944) 2 byte to Materials Cost (A is highlighted unit on Build/Call)
 ROMB:5856 18 A8            jr   5800           // Further wait for button input after handling Up
 ROMB:5858 3E 09            ld   a,09
 ROMB:585A CD 44 38         call 3844
 ROMB:585D FA 40 C9         ld   a,(C940)
 ROMB:5860 3C               inc  a
 ROMB:5861 21 0B CD         ld   hl,CD0B
 ROMB:5864 BE               cp   (hl)
 ROMB:5865 20 01            jr   nz,5868
 ROMB:5867 AF               xor  a              // Handles rotation
 ROMB:5868 EA 40 C9         ld   (C940),a
 ROMB:586B CD 9D 5A         call 5A9D           // Handles variable text of Build/Call Unit window, sets ($C942) 2 byte to Gold Cost / 100G and ($C944) 2 byte to Materials Cost (A is highlighted unit on Build/Call)
 ROMB:586E 18 90            jr   5800           // Further wait for button input after handling Down
 ROMB:5870 3E 0C            ld   a,0C
 ROMB:5872 CD 44 38         call 3844
 ROMB:5875 CD 98 7A         call 7A98           // Restores last table of covered graphics
 ROMB:5878 CD 60 48         call 4860           // Shuts off Window Display, LCD STAT Interrupt, and LYC=LY Coincidence Interrupt
 ROMB:587B EF 0B 21 46                          // Sets up Cursor tiles in VRA0 tiles 96~122
 ROMB:587F CD F9 46         call 46F9           // res 0,WRA4[$D000 + ($C98D) * 16]
 ROMB:5882 C9               ret  
 ROMB:5883 FA 41 C9         ld   a,(C941)       // A = unit being chosen
 ROMB:5886 CD 1F 5C         call 5C1F           // A = 0 if all conditions are met; 1 if insufficient Gold; 2 if insufficient Materials; or 3 if 50 Unit Cap is already met
 ROMB:5889 FE 01            cp   a,01
 ROMB:588B 28 53            jr   z,58E0         // "Gold Insufficient" popup message then further wait for button input
 ROMB:588D FE 02            cp   a,02
 ROMB:588F 28 5C            jr   z,58ED         // "Materials Insufficient" popup message then further wait for button input
 ROMB:5891 FE 03            cp   a,03
 ROMB:5893 28 65            jr   z,58FA         // "Units Max" popup message then further wait for button input
 ROMB:5895 FA 41 C9         ld   a,(C941)
 ROMB:5898 CD 68 5C         call 5C68           // Handles deployment expenditures
 ROMB:589B FA 91 C9         ld   a,(C991)
 ROMB:589E 47               ld   b,a
 ROMB:589F FA 92 C9         ld   a,(C992)
 ROMB:58A2 4F               ld   c,a
 ROMB:58A3 FA 41 C9         ld   a,(C941)       // A = Unit Type, BC = deployment point coordinates
 ROMB:58A6 EF 12 41 42                          // Units built incremented by 1, cap of 65,535
 ROMB:58AA EF 12 E3 41                          // Establishes newly created unit's stats with first available unit slot
 ROMB:58AE EF 12 85 45                          // Unit's End Turn Flag Set
 ROMB:58B2 CD 98 7A         call 7A98           // Restores last table of covered graphics
 ROMB:58B5 CD 60 48         call 4860           // Shuts off Window Display, LCD STAT Interrupt, and LYC=LY Coincidence Interrupt
 ROMB:58B8 3E 08            ld   a,08
 ROMB:58BA CD 44 38         call 3844
 ROMB:58BD EF 0C 75 5B                          // Factory Gate Close sprite plays out
 ROMB:58C1 FA 41 C9         ld   a,(C941)
 ROMB:58C4 CD 98 47         call 4798           // Unit tile updated with ($C941)
 ROMB:58C7 CD D1 43         call 43D1           // Establishes tile BC's entire graphics
 ROMB:58CA EF 0C 86 5B                          // Factory Gate Open sprite plays out
 ROMB:58CE 3E 02            ld   a,02
 ROMB:58D0 CD 9C 47         call 479C           // set 7,($D000 + B + C * 64) WRAM Bank 1 (Turn Ended)
 ROMB:58D3 CD D1 43         call 43D1           // Establishes tile BC's entire graphics
 ROMB:58D6 FA 41 C9         ld   a,(C941)
 ROMB:58D9 EF 11 3F 4D                          // All Unit Medal progress flag for unit Set as necessary by ($C941)
 ROMB:58DD C3 78 58         jp   5878
 ROMB:58E0 3E 03            ld   a,03
 ROMB:58E2 CD 44 38         call 3844
 ROMB:58E5 3E 0F            ld   a,0F           // Gold Insufficient
 ROMB:58E7 CD CD 51         call 51CD           // Handles Popup Message graphics (A is Popup Message #)
 ROMB:58EA C3 00 58         jp   5800           // Further wait for button input
 ROMB:58ED 3E 03            ld   a,03
 ROMB:58EF CD 44 38         call 3844
 ROMB:58F2 3E 10            ld   a,10           // Materials Insufficient
 ROMB:58F4 CD CD 51         call 51CD           // Handles Popup Message graphics (A is Popup Message #)
 ROMB:58F7 C3 00 58         jp   5800
 ROMB:58FA 3E 03            ld   a,03
 ROMB:58FC CD 44 38         call 3844
 ROMB:58FF 3E 14            ld   a,14           // Units Max
 ROMB:5901 CD CD 51         call 51CD           // Handles Popup Message graphics (A is Popup Message #)
 ROMB:5904 C3 00 58         jp   5800

 ROMB:5907 EF 12 58 44                          // Mercenary Units stuff using ($CD0B) et al
 ROMB:590B 3E 01            ld   a,01
 ROMB:590D EA CA C9         ld   (C9CA),a       // Call Flag
 ROMB:5910 AF               xor  a
 ROMB:5911 EA 40 C9         ld   (C940),a
 ROMB:5914 CD 00 47         call 4700           // set 0,($D000 + ($C98D) * 16) WRAM bank 4
 ROMB:5917 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMB:591A CD D2 04         call 04D2           // Next frame
 ROMB:591D EF 01 FC 40                          // Graphics holding: VRA0($8600) to VRA0($87FF) holds Hiragana up to "ma", then VRA0($8D00) to ($8FFF) holds rest of Hiragana
 ROMB:5921 CD 0D 5A         call 5A0D           // Establishes non-variable text of Build/Call Unit window
 ROMB:5924 FA 40 C9         ld   a,(C940)
 ROMB:5927 CD 9D 5A         call 5A9D           // Handles variable text of Build/Call Unit window, sets ($C942) 2 byte to Gold Cost / 100G and ($C944) 2 byte to Materials Cost (A is highlighted unit on Build/Call)
 ROMB:592A 3E 58            ld   a,58
 ROMB:592C CD 22 48         call 4822           // Window scrolls up 4 pixels per frame from Y = 152 to Y = A (A must be a multiple of 4 to avoid an infinite loop error)
 ROMB:592F CD A2 05         call 05A2           // Button update, next frame
 ROMB:5932 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMB:5935 F0 92            ld   a,(ff00+92)
 ROMB:5937 CB 4F            bit  1,a            // B
 ROMB:5939 20 64            jr   nz,599F
 ROMB:593B CB 47            bit  0,a            // A
 ROMB:593D 20 69            jr   nz,59A8
 ROMB:593F CB 77            bit  6,a            // Up
 ROMB:5941 20 2B            jr   nz,596E
 ROMB:5943 CB 7F            bit  7,a            // Down
 ROMB:5945 20 40            jr   nz,5987
 ROMB:5947 CB 57            bit  2,a            // Z
 ROMB:5949 20 02            jr   nz,594D
 ROMB:594B 18 E2            jr   592F           // Waiting for button press
 ROMB:594D CD 60 48         call 4860           // Shuts off Window Display, LCD STAT Interrupt, and LYC=LY Coincidence Interrupt
 ROMB:5950 CD 98 7A         call 7A98           // Restores last table of covered graphics
 ROMB:5953 CD 64 21         call 2164           // Empties $FFB1 and $FFB2
 ROMB:5956 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMB:5959 FA 41 C9         ld   a,(C941)       // Unit Type/Side
 ROMB:595C E6 01            and  a,01
 ROMB:595E 47               ld   b,a
 ROMB:595F FA 41 C9         ld   a,(C941)
 ROMB:5962 CB 3F            srl  a
 ROMB:5964 EF 25 A5 5D                          // Controls for Unit Information Screen as a whole including unit selection list (A is Unit Type, B is Side; A is -1 if no Unit Type)
 ROMB:5968 CD E6 69         call 69E6           // Reestablishes map graphics
 ROMB:596B C3 14 59         jp   5914           // Restoration after pressing Select
 ROMB:596E 3E 09            ld   a,09
 ROMB:5970 CD 44 38         call 3844
 ROMB:5973 FA 40 C9         ld   a,(C940)
 ROMB:5976 3D               dec  a
 ROMB:5977 FE FF            cp   a,FF
 ROMB:5979 20 04            jr   nz,597F
 ROMB:597B FA 0B CD         ld   a,(CD0B)       // Buyable Unit Type count
 ROMB:597E 3D               dec  a
 ROMB:597F EA 40 C9         ld   (C940),a
 ROMB:5982 CD 9D 5A         call 5A9D           // Handles variable text of Build/Call Unit window, sets ($C942) 2 byte to Gold Cost / 100G and ($C944) 2 byte to Materials Cost (A is highlighted unit on Build/Call)
 ROMB:5985 18 A8            jr   592F           // Further wait for button press after pressing Up
 ROMB:5987 3E 09            ld   a,09
 ROMB:5989 CD 44 38         call 3844
 ROMB:598C FA 40 C9         ld   a,(C940)
 ROMB:598F 3C               inc  a
 ROMB:5990 21 0B CD         ld   hl,CD0B
 ROMB:5993 BE               cp   (hl)
 ROMB:5994 20 01            jr   nz,5997
 ROMB:5996 AF               xor  a
 ROMB:5997 EA 40 C9         ld   (C940),a
 ROMB:599A CD 9D 5A         call 5A9D           // Handles variable text of Build/Call Unit window, sets ($C942) 2 byte to Gold Cost / 100G and ($C944) 2 byte to Materials Cost (A is highlighted unit on Build/Call)
 ROMB:599D 18 90            jr   592F           // Further wait for button press after pressing Down
 ROMB:599F 3E 0C            ld   a,0C
 ROMB:59A1 CD 44 38         call 3844
 ROMB:59A4 3E FF            ld   a,FF
 ROMB:59A6 18 08            jr   59B0           // Ending after pressing B
 ROMB:59A8 3E 08            ld   a,08
 ROMB:59AA CD 44 38         call 3844
 ROMB:59AD FA 41 C9         ld   a,(C941)
 ROMB:59B0 F5               push af
 ROMB:59B1 CD 60 48         call 4860           // Shuts off Window Display, LCD STAT Interrupt, and LYC=LY Coincidence Interrupt
 ROMB:59B4 EF 0B 21 46                          // Sets up Cursor tiles in VRA0 tiles 96~122
 ROMB:59B8 CD F9 46         call 46F9           // res 0,WRA4[$D000 + ($C98D) * 16]
 ROMB:59BB F1               pop  af
 ROMB:59BC C9               ret                 // Mercenary Unit purchase window management
 ROMB:59BD C5               push bc
 ROMB:59BE D5               push de
 ROMB:59BF E5               push hl
 ROMB:59C0 CD 92 47         call 4792           // A = Occupying unit's Type
 ROMB:59C3 A7               and  a
 ROMB:59C4 20 42            jr   nz,5A08
 ROMB:59C6 CD 70 47         call 4770           // A = Terrain Type
 ROMB:59C9 5F               ld   e,a            // E = Terrain Type
 ROMB:59CA CD F7 7C         call 7CF7           // A = 0 for owner's turn, 1 for opponent's turn, 2 for Neutral property, or 3 for non-property tile
 ROMB:59CD FE 00            cp   a,00
 ROMB:59CF 20 37            jr   nz,5A08        // End with A = 0 if not owner's turn
 ROMB:59D1 7B               ld   a,e            // A = Terrain Type
 ROMB:59D2 CD 07 47         call 4707           // A = Terrain base ID
 ROMB:59D5 FE 01            cp   a,01           // HQ?
 ROMB:59D7 28 12            jr   z,59EB
 ROMB:59D9 FE 02            cp   a,02           // City?
 ROMB:59DB 28 0E            jr   z,59EB
 ROMB:59DD FE 04            cp   a,04           // Factory?
 ROMB:59DF 28 0A            jr   z,59EB
 ROMB:59E1 FE 06            cp   a,06           // Airport?
 ROMB:59E3 28 06            jr   z,59EB
 ROMB:59E5 FE 09            cp   a,09           // Harbor?
 ROMB:59E7 28 02            jr   z,59EB
 ROMB:59E9 18 1D            jr   5A08           // End with A = 0 if not viable deployment point
 ROMB:59EB 5F               ld   e,a
 ROMB:59EC D5               push de
 ROMB:59ED FA 33 C6         ld   a,(C633)
 ROMB:59F0 E6 01            and  a,01
 ROMB:59F2 07               rlca 
 ROMB:59F3 5F               ld   e,a
 ROMB:59F4 16 00            ld   d,00
 ROMB:59F6 21 46 C6         ld   hl,C646
 ROMB:59F9 19               add  hl,de
 ROMB:59FA 56               ld   d,(hl)
 ROMB:59FB 23               inc  hl
 ROMB:59FC 5E               ld   e,(hl)         // DE = active player's HQ coordinates
 ROMB:59FD CD 1D 29         call 291D           // A = distance from HQ
 ROMB:5A00 D1               pop  de
 ROMB:5A01 FE 04            cp   a,04
 ROMB:5A03 30 03            jr   nc,5A08        // End with A = 0 if more than 3 spaces away from HQ
 ROMB:5A05 7B               ld   a,e            // A = Terrain base ID
 ROMB:5A06 18 01            jr   5A09
 ROMB:5A08 AF               xor  a
 ROMB:5A09 E1               pop  hl
 ROMB:5A0A D1               pop  de
 ROMB:5A0B C1               pop  bc
 ROMB:5A0C C9               ret  
 ROMB:5A0D 3E 07            ld   a,07
 ROMB:5A0F CD 9D 7A         call 7A9D           // Window tiles in starting area covering 20 by 7 cleared for both VRAM Banks
 ROMB:5A12 FA CA C9         ld   a,(C9CA)
 ROMB:5A15 A7               and  a
 ROMB:5A16 20 05            jr   nz,5A1D
 ROMB:5A18 21 57 5A         ld   hl,5A57        // "Build which unit?"
 ROMB:5A1B 18 03            jr   5A20
 ROMB:5A1D 21 67 5A         ld   hl,5A67        // "Call which unit?"
 ROMB:5A20 01 20 01         ld   bc,0120
 ROMB:5A23 CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 ROMB:5A26 21 74 5A         ld   hl,5A74        // Gold symbol, Dash
 ROMB:5A29 01 23 04         ld   bc,0423
 ROMB:5A2C CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 ROMB:5A2F 21 7C 5A         ld   hl,5A7C        // Parts symbol, Dash
 ROMB:5A32 01 23 0C         ld   bc,0C23
 ROMB:5A35 CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 ROMB:5A38 21 7F 5A         ld   hl,5A7F        // Movement symbol, Vertical Separator
 ROMB:5A3B 01 25 01         ld   bc,0125
 ROMB:5A3E CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 ROMB:5A41 21 84 5A         ld   hl,5A84        // Fuel symbol, Vertical Separator
 ROMB:5A44 01 26 01         ld   bc,0126
 ROMB:5A47 CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 ROMB:5A4A 21 89 5A         ld   hl,5A89        // Horizontal Separator
 ROMB:5A4D 01 24 01         ld   bc,0124
 ROMB:5A50 CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 ROMB:5A53 CD 2E 35         call 352E           // Text catchup
 ROMB:5A56 C9               ret  

 ROMB:5A57 EC 79 26 17 50 15 60 6E 62 6B DD 6C 7F 6D 66 00

 ROMB:5A67 EC 79 26 17 50 15 60 D6 EE 7F 6D 66 00

 ROMB:5A74 B1 A7 80 80 80 81 81 00
 ROMB:5A7C B2 A7 00
 ROMB:5A7F AF 80 80 A9 00
 ROMB:5A84 B0 80 80 A9 00

 ROMB:5A89 AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA 00

 ROMB:5A9D C5               push bc
 ROMB:5A9E D5               push de
 ROMB:5A9F E5               push hl
 ROMB:5AA0 21 0C CD         ld   hl,CD0C
 ROMB:5AA3 4F               ld   c,a
 ROMB:5AA4 06 00            ld   b,00
 ROMB:5AA6 09               add  hl,bc
 ROMB:5AA7 7E               ld   a,(hl)         // A = buyable unit type highlighted
 ROMB:5AA8 07               rlca 
 ROMB:5AA9 47               ld   b,a
 ROMB:5AAA FA 33 C6         ld   a,(C633)
 ROMB:5AAD E6 01            and  a,01
 ROMB:5AAF 80               add  b
 ROMB:5AB0 EA 41 C9         ld   (C941),a
 ROMB:5AB3 CD 89 5C         call 5C89           // Establishes unit type A's graphics on Build/Call Unit window
 ROMB:5AB6 3E 00            ld   a,00
 ROMB:5AB8 E0 83            ld   (ff00+83),a
 ROMB:5ABA E0 4F            ld   (ff00+4F),a    // VRA0
 ROMB:5ABC FA 41 C9         ld   a,(C941)
 ROMB:5ABF EF 12 4F 40                          // ($CD28) to ($CD32) holds unit type's name
 ROMB:5AC3 21 28 CD         ld   hl,CD28
 ROMB:5AC6 01 22 04         ld   bc,0422
 ROMB:5AC9 CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 ROMB:5ACC 21 17 5C         ld   hl,5C17        // Blanks 7 tiles
 ROMB:5ACF 01 22 0F         ld   bc,0F22
 ROMB:5AD2 CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 ROMB:5AD5 FA 41 C9         ld   a,(C941)
 ROMB:5AD8 0E 0D            ld   c,0D
 ROMB:5ADA EF 12 37 40                          // Transport Capacity
 ROMB:5ADE A7               and  a
 ROMB:5ADF 28 10            jr   z,5AF1         // Transport stuff kept blank if unable to carry
 ROMB:5AE1 F5               push af
 ROMB:5AE2 3E B5            ld   a,B5           // (T)ransport
 ROMB:5AE4 01 22 0F         ld   bc,0F22
 ROMB:5AE7 CD ED 34         call 34ED           // [$C300 + [$FFC8]] 3 byte holds: 1, $49, $9C, 181; [$FFCA] incremented
 ROMB:5AEA F1               pop  af
 ROMB:5AEB 04               inc  b
 ROMB:5AEC C6 81            add  a,81           // Transport Capacity #
 ROMB:5AEE CD ED 34         call 34ED           // [$C300 + [$FFC8]] 3 byte holds: 1, $4A, $9C, 129; [$FFCA] incremented
 ROMB:5AF1 3E 00            ld   a,00
 ROMB:5AF3 E0 83            ld   (ff00+83),a
 ROMB:5AF5 E0 4F            ld   (ff00+4F),a    // VRA0
 ROMB:5AF7 FA 41 C9         ld   a,(C941)
 ROMB:5AFA 0E 10            ld   c,10
 ROMB:5AFC EF 12 43 40                          // DE = Gold Cost / 100G
 ROMB:5B00 7B               ld   a,e
 ROMB:5B01 EA 42 C9         ld   (C942),a
 ROMB:5B04 7A               ld   a,d
 ROMB:5B05 EA 43 C9         ld   (C943),a
 ROMB:5B08 62               ld   h,d
 ROMB:5B09 6B               ld   l,e
 ROMB:5B0A 01 23 06         ld   bc,0623
 ROMB:5B0D 16 03            ld   d,03
 ROMB:5B0F CD 72 79         call 7972           // VRA0($9C66) holds Gold Cost / 100G
 ROMB:5B12 FA 41 C9         ld   a,(C941)
 ROMB:5B15 0E 12            ld   c,12
 ROMB:5B17 EF 12 43 40                          // DE = Materials Cost
 ROMB:5B1B 7B               ld   a,e
 ROMB:5B1C EA 44 C9         ld   (C944),a
 ROMB:5B1F 7A               ld   a,d
 ROMB:5B20 EA 45 C9         ld   (C945),a
 ROMB:5B23 62               ld   h,d
 ROMB:5B24 6B               ld   l,e
 ROMB:5B25 01 23 0E         ld   bc,0E23
 ROMB:5B28 16 03            ld   d,03
 ROMB:5B2A CD 72 79         call 7972           // VRA0($9C6E) holds Materials Cost
 ROMB:5B2D FA 41 C9         ld   a,(C941)
 ROMB:5B30 0E 0C            ld   c,0C
 ROMB:5B32 EF 12 37 40                          // Movement Power
 ROMB:5B36 01 25 02         ld   bc,0225
 ROMB:5B39 16 02            ld   d,02
 ROMB:5B3B CD 2A 79         call 792A           // VRA0($9CA2) holds Movement Power
 ROMB:5B3E FA 41 C9         ld   a,(C941)
 ROMB:5B41 0E 0B            ld   c,0B
 ROMB:5B43 EF 12 37 40                          // Max Fuel
 ROMB:5B47 01 26 02         ld   bc,0226
 ROMB:5B4A 16 02            ld   d,02
 ROMB:5B4C CD 2A 79         call 792A           // VRA0($9CC2) holds Max Fuel
 ROMB:5B4F FA 41 C9         ld   a,(C941)
 ROMB:5B52 0E 14            ld   c,14
 ROMB:5B54 EF 12 37 48                          // ($CD28) to ($CD30) carries Primary Weapon's name
 ROMB:5B58 FA 41 C9         ld   a,(C941)
 ROMB:5B5B 0E 15            ld   c,15
 ROMB:5B5D EF 12 37 40                          // Primary Weapon Ammo
 ROMB:5B61 EA FA CC         ld   (CCFA),a
 ROMB:5B64 FA 41 C9         ld   a,(C941)
 ROMB:5B67 0E 14            ld   c,14
 ROMB:5B69 EF 12 37 40                          // Primary Weapon Type
 ROMB:5B6D 47               ld   b,a
 ROMB:5B6E 0E 08            ld   c,08
 ROMB:5B70 EF 12 55 48                          // Primary Weapon Minimum Range
 ROMB:5B74 EA F8 CC         ld   (CCF8),a
 ROMB:5B77 78               ld   a,b
 ROMB:5B78 0E 09            ld   c,09
 ROMB:5B7A EF 12 55 48                          // Primary Weapon Maximum Range
 ROMB:5B7E EA F9 CC         ld   (CCF9),a
 ROMB:5B81 01 25 05         ld   bc,0525
 ROMB:5B84 CD C3 5B         call 5BC3           // Handles weapon line at coordinates BC for Build/Call Unit window
 ROMB:5B87 FA 41 C9         ld   a,(C941)
 ROMB:5B8A 0E 16            ld   c,16
 ROMB:5B8C EF 12 37 48                          // ($CD28) to ($CD30) carries Secondary Weapon's name
 ROMB:5B90 FA 41 C9         ld   a,(C941)
 ROMB:5B93 0E 17            ld   c,17
 ROMB:5B95 EF 12 37 40                          // Secondary Weapon Ammo
 ROMB:5B99 EA FA CC         ld   (CCFA),a
 ROMB:5B9C FA 41 C9         ld   a,(C941)
 ROMB:5B9F 0E 16            ld   c,16
 ROMB:5BA1 EF 12 37 40                          // Secondary Weapon Type
 ROMB:5BA5 47               ld   b,a
 ROMB:5BA6 0E 08            ld   c,08
 ROMB:5BA8 EF 12 55 48                          // Secondary Weapon Minimum Range
 ROMB:5BAC EA F8 CC         ld   (CCF8),a
 ROMB:5BAF 78               ld   a,b
 ROMB:5BB0 0E 09            ld   c,09
 ROMB:5BB2 EF 12 55 48                          // Secondary Weapon Maximum Range
 ROMB:5BB6 EA F9 CC         ld   (CCF9),a
 ROMB:5BB9 01 26 05         ld   bc,0526
 ROMB:5BBC CD C3 5B         call 5BC3           // Handles weapon line at coordinates BC for Build/Call Unit window
 ROMB:5BBF E1               pop  hl
 ROMB:5BC0 D1               pop  de
 ROMB:5BC1 C1               pop  bc
 ROMB:5BC2 C9               ret                 // Handles variable text of Build/Call Unit window, sets ($C942) 2 byte to Gold Cost / 100G and ($C944) 2 byte to Materials Cost (A is highlighted unit on Build/Call)
 ROMB:5BC3 21 28 CD         ld   hl,CD28
 ROMB:5BC6 CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 ROMB:5BC9 78               ld   a,b
 ROMB:5BCA C6 08            add  a,08
 ROMB:5BCC 47               ld   b,a
 ROMB:5BCD 21 17 5C         ld   hl,5C17        // Blanks 7 tiles
 ROMB:5BD0 CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 ROMB:5BD3 FA 28 CD         ld   a,(CD28)
 ROMB:5BD6 FE 80            cp   a,80
 ROMB:5BD8 28 3C            jr   z,5C16         // Ends immediately if no weapon
 ROMB:5BDA 3E A7            ld   a,A7           // Dash
 ROMB:5BDC CD ED 34         call 34ED           // [$C300 + [$FFC8]] 3 byte holds: 1, B + C%8 * 32, 152 or 24 + C / 8, A; [$FFCA] incremented (152 or 24 + C / 8 is 24 + C / 8 if [$FFCB] != 0)
 ROMB:5BDF 04               inc  b
 ROMB:5BE0 FA FA CC         ld   a,(CCFA)
 ROMB:5BE3 C6 81            add  a,81           // Ammo left
 ROMB:5BE5 CD ED 34         call 34ED           // [$C300 + [$FFC8]] 3 byte holds: 1, B + C%8 * 32, 152 or 24 + C / 8, A; [$FFCA] incremented (152 or 24 + C / 8 is 24 + C / 8 if [$FFCB] != 0)
 ROMB:5BE8 04               inc  b
 ROMB:5BE9 04               inc  b
 ROMB:5BEA 3E B3            ld   a,B3           // (R)ange
 ROMB:5BEC CD ED 34         call 34ED           // [$C300 + [$FFC8]] 3 byte holds: 1, B + C%8 * 32, 152 or 24 + C / 8, A; [$FFCA] incremented (152 or 24 + C / 8 is 24 + C / 8 if [$FFCB] != 0)
 ROMB:5BEF 04               inc  b
 ROMB:5BF0 FA F8 CC         ld   a,(CCF8)
 ROMB:5BF3 C6 81            add  a,81           // Minimum Range
 ROMB:5BF5 CD ED 34         call 34ED           // [$C300 + [$FFC8]] 3 byte holds: 1, B + C%8 * 32, 152 or 24 + C / 8, A; [$FFCA] incremented (152 or 24 + C / 8 is 24 + C / 8 if [$FFCB] != 0)
 ROMB:5BF8 04               inc  b
 ROMB:5BF9 21 17 5C         ld   hl,5C17        // Blanks 7 tiles
 ROMB:5BFC CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 ROMB:5BFF FA F8 CC         ld   a,(CCF8)
 ROMB:5C02 21 F9 CC         ld   hl,CCF9
 ROMB:5C05 BE               cp   (hl)
 ROMB:5C06 28 0E            jr   z,5C16         // Ends immediately if Maximum Range is same as Minimum Range
 ROMB:5C08 3E A7            ld   a,A7           // Dash
 ROMB:5C0A CD ED 34         call 34ED           // [$C300 + [$FFC8]] 3 byte holds: 1, B + C%8 * 32, 152 or 24 + C / 8, A; [$FFCA] incremented (152 or 24 + C / 8 is 24 + C / 8 if [$FFCB] != 0)
 ROMB:5C0D 04               inc  b
 ROMB:5C0E FA F9 CC         ld   a,(CCF9)
 ROMB:5C11 C6 81            add  a,81           // Maximum Range
 ROMB:5C13 CD ED 34         call 34ED           // [$C300 + [$FFC8]] 3 byte holds: 1, B + C%8 * 32, 152 or 24 + C / 8, A; [$FFCA] incremented (152 or 24 + C / 8 is 24 + C / 8 if [$FFCB] != 0)
 ROMB:5C16 C9               ret                 // Handles weapon line at coordinates BC for Build/Call Unit window

 ROMB:5C17 80 80 80 80 80 80 80 00

 ROMB:5C1F C5               push bc
 ROMB:5C20 D5               push de
 ROMB:5C21 47               ld   b,a
 ROMB:5C22 FA 33 C6         ld   a,(C633)
 ROMB:5C25 E6 01            and  a,01
 ROMB:5C27 21 09 CD         ld   hl,CD09
 ROMB:5C2A CD BC 29         call 29BC
 ROMB:5C2D 7E               ld   a,(hl)
 ROMB:5C2E FE 32            cp   a,32
 ROMB:5C30 28 31            jr   z,5C63         // 50 unit cap
 ROMB:5C32 78               ld   a,b
 ROMB:5C33 0E 10            ld   c,10
 ROMB:5C35 EF 12 43 40                          // DE = Gold Cost / 100G
 ROMB:5C39 62               ld   h,d
 ROMB:5C3A 6B               ld   l,e
 ROMB:5C3B CD AD 29         call 29AD
 ROMB:5C3E 54               ld   d,h
 ROMB:5C3F 5D               ld   e,l
 ROMB:5C40 CD B0 7B         call 7BB0           // Carry Flag On if Gold Cost > Player's Gold
 ROMB:5C43 38 16            jr   c,5C5B
 ROMB:5C45 78               ld   a,b
 ROMB:5C46 0E 12            ld   c,12
 ROMB:5C48 EF 12 43 40                          // DE = Materials Cost
 ROMB:5C4C D5               push de
 ROMB:5C4D CD DC 7B         call 7BDC           // HL = Active Player's Current Materials
 ROMB:5C50 54               ld   d,h
 ROMB:5C51 5D               ld   e,l
 ROMB:5C52 E1               pop  hl             // DE = Player's Materials, HL = Materials Cost
 ROMB:5C53 CD CA 29         call 29CA           // Carry Flag active if DE < HL, A = 0 if DE = HL
 ROMB:5C56 38 07            jr   c,5C5F
 ROMB:5C58 AF               xor  a
 ROMB:5C59 18 0A            jr   5C65           // All conditions met
 ROMB:5C5B 3E 01            ld   a,01
 ROMB:5C5D 18 06            jr   5C65           // Insufficient Gold
 ROMB:5C5F 3E 02            ld   a,02
 ROMB:5C61 18 02            jr   5C65           // Insufficient Materials
 ROMB:5C63 3E 03            ld   a,03           // 50 Unit Cap
 ROMB:5C65 D1               pop  de
 ROMB:5C66 C1               pop  bc
 ROMB:5C67 C9               ret                 // A = 0 if all conditions are met; 1 if insufficient Gold; 2 if insufficient Materials; or 3 if 50 Unit Cap is already met
 ROMB:5C68 C5               push bc
 ROMB:5C69 D5               push de
 ROMB:5C6A 47               ld   b,a
 ROMB:5C6B 78               ld   a,b
 ROMB:5C6C 0E 10            ld   c,10
 ROMB:5C6E EF 12 43 40                          // DE = Gold Cost / 100G
 ROMB:5C72 62               ld   h,d
 ROMB:5C73 6B               ld   l,e
 ROMB:5C74 CD AD 29         call 29AD
 ROMB:5C77 54               ld   d,h
 ROMB:5C78 5D               ld   e,l
 ROMB:5C79 CD 98 7B         call 7B98           // New Gold = Current Gold - Gold Cost
 ROMB:5C7C 78               ld   a,b
 ROMB:5C7D 0E 12            ld   c,12
 ROMB:5C7F EF 12 43 40                          // DE = Materials Cost
 ROMB:5C83 CD 13 7C         call 7C13           // New Materials = Current Materials - Materials Cost
 ROMB:5C86 D1               pop  de
 ROMB:5C87 C1               pop  bc
 ROMB:5C88 C9               ret                 // Handles deployment expenditures
 ROMB:5C89 C5               push bc
 ROMB:5C8A D5               push de
 ROMB:5C8B E5               push hl
 ROMB:5C8C 47               ld   b,a
 ROMB:5C8D 3E 00            ld   a,00
 ROMB:5C8F E0 83            ld   (ff00+83),a
 ROMB:5C91 E0 4F            ld   (ff00+4F),a    // VRA0
 ROMB:5C93 21 C0 8F         ld   hl,8FC0
 ROMB:5C96 78               ld   a,b
 ROMB:5C97 C6 34            add  a,34
 ROMB:5C99 CD 77 76         call 7677           // (HL ~ HL+63) holds unit's map graphics
 ROMB:5C9C 21 41 9C         ld   hl,9C41        // 1,34
 ROMB:5C9F 78               ld   a,b
 ROMB:5CA0 C6 34            add  a,34
 ROMB:5CA2 57               ld   d,a
 ROMB:5CA3 06 00            ld   b,00
 ROMB:5CA5 0E 03            ld   c,03
 ROMB:5CA7 3E FC            ld   a,FC
 ROMB:5CA9 CD CF 76         call 76CF           // Establishes unit graphics at HL (A is tile location on character base, B is palette's VRAM bank, C is first palette + 3, D is unit type)
 ROMB:5CAC E1               pop  hl
 ROMB:5CAD D1               pop  de
 ROMB:5CAE C1               pop  bc
 ROMB:5CAF C9               ret                 // Establishes unit type A's graphics on Build/Call Unit window
 ROMB:5CB0 FA E2 CC         ld   a,(CCE2)
 ROMB:5CB3 A7               and  a
 ROMB:5CB4 28 0A            jr   z,5CC0         // End with A = 1 if no units Loaded
 ROMB:5CB6 FA E0 CC         ld   a,(CCE0)
 ROMB:5CB9 CB 47            bit  0,a
 ROMB:5CBB 20 03            jr   nz,5CC0        // End with A = 1 if unit is Loaded itself
 ROMB:5CBD AF               xor  a
 ROMB:5CBE 18 02            jr   5CC2
 ROMB:5CC0 3E 01            ld   a,01
 ROMB:5CC2 C9               ret                 // A = 0 if direct Unloading can happen, 1 otherwise
 ROMB:5CC3 AF               xor  a
 ROMB:5CC4 EA D3 C9         ld   (C9D3),a
 ROMB:5CC7 FA D8 C9         ld   a,(C9D8)
 ROMB:5CCA EF 12 B9 43                          // ($CD33) holds number of units Loaded, ($CD34) 7? bytes holds units directly Loaded
 ROMB:5CCE C9               ret                 // ($C9D3) emptied, ($CD33) holds number of units Loaded for selected unit, ($CD34) 7? bytes holds units directly Loaded
 ROMB:5CCF C5               push bc
 ROMB:5CD0 D5               push de
 ROMB:5CD1 3E 05            ld   a,05
 ROMB:5CD3 CD 9D 7A         call 7A9D           // Window tiles in starting area covering 20 by 5 cleared for both VRAM Banks
 ROMB:5CD6 CD 6C 5D         call 5D6C           // Establishes highlighted loaded unit's stats on stats window, and also holds highlighted loaded unit's stats
 ROMB:5CD9 CD 5B 65         call 655B           // Graphics transition to Window scrolling up to cover bottom 2.5 on-screen map tiles
 ROMB:5CDC CD A2 05         call 05A2           // Button update, next frame (loop begins here)
 ROMB:5CDF F0 92            ld   a,(ff00+92)
 ROMB:5CE1 CB 57            bit  2,a            // Z
 ROMB:5CE3 20 3A            jr   nz,5D1F
 ROMB:5CE5 CB 47            bit  0,a            // A
 ROMB:5CE7 20 54            jr   nz,5D3D
 ROMB:5CE9 CB 4F            bit  1,a            // B
 ROMB:5CEB 20 68            jr   nz,5D55
 ROMB:5CED CB 77            bit  6,a            // Up
 ROMB:5CEF 20 06            jr   nz,5CF7
 ROMB:5CF1 CB 7F            bit  7,a            // Down
 ROMB:5CF3 20 10            jr   nz,5D05
 ROMB:5CF5 18 E5            jr   5CDC
 ROMB:5CF7 FA D3 C9         ld   a,(C9D3)       // Up starts here
 ROMB:5CFA 3D               dec  a
 ROMB:5CFB FE FF            cp   a,FF
 ROMB:5CFD 20 11            jr   nz,5D10
 ROMB:5CFF FA 33 CD         ld   a,(CD33)
 ROMB:5D02 3D               dec  a
 ROMB:5D03 18 0B            jr   5D10           // Shifts to previous Loaded unit in cycle
 ROMB:5D05 FA D3 C9         ld   a,(C9D3)       // Down starts here
 ROMB:5D08 3C               inc  a
 ROMB:5D09 21 33 CD         ld   hl,CD33
 ROMB:5D0C BE               cp   (hl)
 ROMB:5D0D 20 01            jr   nz,5D10
 ROMB:5D0F AF               xor  a              // Shifts to next Loaded unit in cycle
 ROMB:5D10 F5               push af
 ROMB:5D11 3E 09            ld   a,09
 ROMB:5D13 CD 44 38         call 3844
 ROMB:5D16 F1               pop  af
 ROMB:5D17 EA D3 C9         ld   (C9D3),a       // Highlighted loaded unit
 ROMB:5D1A CD 6C 5D         call 5D6C           // Establishes highlighted loaded unit's stats on stats window, and also holds highlighted loaded unit's stats
 ROMB:5D1D 18 BD            jr   5CDC           // Further wait for button input after pressing Up/Down
 ROMB:5D1F CD 60 48         call 4860           // Shuts off Window Display, LCD STAT Interrupt, and LYC=LY Coincidence Interrupt
 ROMB:5D22 CD 64 21         call 2164           // Empties $FFB1 and $FFB2
 ROMB:5D25 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMB:5D28 FA DD CC         ld   a,(CCDD)
 ROMB:5D2B E6 01            and  a,01
 ROMB:5D2D 47               ld   b,a
 ROMB:5D2E FA DD CC         ld   a,(CCDD)
 ROMB:5D31 CB 3F            srl  a              // Loaded unit
 ROMB:5D33 EF 25 A5 5D                          // Controls for Unit Information Screen as a whole including unit selection list (A is Unit Type, B is Side; A is -1 if no Unit Type)
 ROMB:5D37 EF 0B E6 69                          // Reestablishes map graphics
 ROMB:5D3B 18 94            jr   5CD1           // Restarts procedure for returning from Unit Information Screen after pressing Select
 ROMB:5D3D FA E0 CC         ld   a,(CCE0)
 ROMB:5D40 CB 7F            bit  7,a
 ROMB:5D42 20 0A            jr   nz,5D4E        // Unit already moved results in invalid sound before further wait for button input
 ROMB:5D44 3E 0A            ld   a,0A
 ROMB:5D46 CD 44 38         call 3844
 ROMB:5D49 FA D8 C9         ld   a,(C9D8)
 ROMB:5D4C 18 1B            jr   5D69           // Ends with A = selected Loaded unit for A Button pressed
 ROMB:5D4E 3E 03            ld   a,03
 ROMB:5D50 CD 44 38         call 3844
 ROMB:5D53 18 87            jr   5CDC
 ROMB:5D55 3E 0C            ld   a,0C           // B Button was pressed
 ROMB:5D57 CD 44 38         call 3844
 ROMB:5D5A FA E3 CC         ld   a,(CCE3)
 ROMB:5D5D EF 12 06 41                          // ($CCDD) to ($CCEC) holds loading unit's stats
 ROMB:5D61 CD 3B 68         call 683B           // Establishes loading unit's tile's entire graphics, also sets up Unit Type (WRA2) and Transport/End Turn Flags (WRA1) for tile
 ROMB:5D64 CD 67 65         call 6567           // Restores cursor and shuts off window
 ROMB:5D67 3E FF            ld   a,FF
 ROMB:5D69 D1               pop  de
 ROMB:5D6A C1               pop  bc
 ROMB:5D6B C9               ret                 // Controls for Loaded Unit selection; ends with A = selected Loaded unit for A Button pressed, -1 for B Button pressed
 ROMB:5D6C FA D3 C9         ld   a,(C9D3)       // Highlighted loaded unit
 ROMB:5D6F 21 34 CD         ld   hl,CD34
 ROMB:5D72 CD BC 29         call 29BC           // HL += A
 ROMB:5D75 7E               ld   a,(hl)
 ROMB:5D76 EA D8 C9         ld   (C9D8),a
 ROMB:5D79 EF 12 06 41                          // ($CCDD) to ($CCEC) holds unit's stats
 ROMB:5D7D CD 3B 68         call 683B           // Establishes selected unit's tile's entire graphics, also sets up Unit Type (WRA2) and Transport/End Turn Flags (WRA1) for tile
 ROMB:5D80 CD 6E 65         call 656E           // Establishes all text of selected unit's stats window
 ROMB:5D83 C9               ret                 // Establishes highlighted loaded unit's stats on stats window, and also holds highlighted loaded unit's stats
 ROMB:5D84 C5               push bc
 ROMB:5D85 D5               push de
 ROMB:5D86 E5               push hl
 ROMB:5D87 EF 12 4E 41                          // A = Primary occupying unit
 ROMB:5D8B FE FF            cp   a,FF
 ROMB:5D8D 28 32            jr   z,5DC1         // End with A = 1 if no occupying unit
 ROMB:5D8F EA D2 C9         ld   (C9D2),a       // ($C9D2) = Primary occupying unit
 ROMB:5D92 0E 00            ld   c,00
 ROMB:5D94 EF 12 66 40                          // A = Unit Type
 ROMB:5D98 EA D1 C9         ld   (C9D1),a       // ($C9D1) = Unit Type
 ROMB:5D9B FA DD CC         ld   a,(CCDD)
 ROMB:5D9E 47               ld   b,a
 ROMB:5D9F FA D1 C9         ld   a,(C9D1)
 ROMB:5DA2 EF 12 29 43                          // If occupying unit can Load, Z flag depends on base unit's Carried Type being Carrying type
 ROMB:5DA6 20 19            jr   nz,5DC1        // End with A = 1 if occupying unit can't load base unit
 ROMB:5DA8 FA D1 C9         ld   a,(C9D1)
 ROMB:5DAB 0E 0D            ld   c,0D
 ROMB:5DAD EF 12 37 40                          // A = Occupying unit's capacity
 ROMB:5DB1 57               ld   d,a            // D = Capacity
 ROMB:5DB2 FA D2 C9         ld   a,(C9D2)       // A = Occupying unit
 ROMB:5DB5 0E 05            ld   c,05
 ROMB:5DB7 EF 12 66 40                          // A = Loaded count
 ROMB:5DBB BA               cp   d
 ROMB:5DBC 30 03            jr   nc,5DC1        // End with A = 1 if unit is full
 ROMB:5DBE AF               xor  a
 ROMB:5DBF 18 02            jr   5DC3
 ROMB:5DC1 3E 01            ld   a,01
 ROMB:5DC3 E1               pop  hl
 ROMB:5DC4 D1               pop  de
 ROMB:5DC5 C1               pop  bc
 ROMB:5DC6 C9               ret                 // A = 0 if Loading is happening, 1 otherwise
 ROMB:5DC7 C5               push bc
 ROMB:5DC8 D5               push de
 ROMB:5DC9 E5               push hl
 ROMB:5DCA FA E0 CC         ld   a,(CCE0)
 ROMB:5DCD CB C7            set  0,a
 ROMB:5DCF EA E0 CC         ld   (CCE0),a       // Loaded flag set
 ROMB:5DD2 FA D8 C9         ld   a,(C9D8)
 ROMB:5DD5 EF 12 2B 41                          // Unit's stats now holds ($CCDD) to ($CCEC)
 ROMB:5DD9 FA 91 C9         ld   a,(C991)
 ROMB:5DDC 47               ld   b,a
 ROMB:5DDD FA 92 C9         ld   a,(C992)
 ROMB:5DE0 4F               ld   c,a
 ROMB:5DE1 EF 12 4E 41                          // A = unit number of primary occupying unit, -1 if there is none
 ROMB:5DE5 EA D2 C9         ld   (C9D2),a
 ROMB:5DE8 0E 05            ld   c,05
 ROMB:5DEA EF 12 66 40                          // A = Load count
 ROMB:5DEE 3C               inc  a
 ROMB:5DEF 47               ld   b,a            // B = New Load Count
 ROMB:5DF0 FA D2 C9         ld   a,(C9D2)
 ROMB:5DF3 EF 12 A1 40                          // Load count incremented
 ROMB:5DF7 FA D2 C9         ld   a,(C9D2)
 ROMB:5DFA EA E3 CC         ld   (CCE3),a
 ROMB:5DFD FA D8 C9         ld   a,(C9D8)
 ROMB:5E00 EF 12 2B 41                          // Unit's stats now holds ($CCDD) to ($CCEC)
 ROMB:5E04 FA D2 C9         ld   a,(C9D2)
 ROMB:5E07 CD 93 68         call 6893           // Sets up tile's graphics with Unit A
 ROMB:5E0A 3E 03            ld   a,03           // Load
 ROMB:5E0C EF 0C BB 66                          // Action Animation cutscenes play out where applicable
 ROMB:5E10 3E 15            ld   a,15
 ROMB:5E12 CD 44 38         call 3844
 ROMB:5E15 3E 05            ld   a,05           // Loading Complete
 ROMB:5E17 CD B5 51         call 51B5           // Handles Popup Message as a whole including momentary cursor disabling (A is Popup Message #)
 ROMB:5E1A E1               pop  hl
 ROMB:5E1B D1               pop  de
 ROMB:5E1C C1               pop  bc
 ROMB:5E1D C9               ret                 // Handles Loading being done
 ROMB:5E1E C5               push bc
 ROMB:5E1F D5               push de
 ROMB:5E20 E5               push hl
 ROMB:5E21 FA D8 C9         ld   a,(C9D8)
 ROMB:5E24 EF 12 06 41                          // ($CCDD) to ($CCEC) holds unit's stats
 ROMB:5E28 FA E2 CC         ld   a,(CCE2)
 ROMB:5E2B A7               and  a
 ROMB:5E2C 28 30            jr   z,5E5E         // End if no units Loaded
 ROMB:5E2E FA D9 C9         ld   a,(C9D9)
 ROMB:5E31 47               ld   b,a
 ROMB:5E32 FA DA C9         ld   a,(C9DA)
 ROMB:5E35 4F               ld   c,a            // BC = coordinates
 ROMB:5E36 FA DE CC         ld   a,(CCDE)
 ROMB:5E39 B8               cp   b
 ROMB:5E3A 20 06            jr   nz,5E42
 ROMB:5E3C FA DF CC         ld   a,(CCDF)
 ROMB:5E3F B9               cp   c
 ROMB:5E40 28 1C            jr   z,5E5E
 ROMB:5E42 FA E5 C9         ld   a,(C9E5)
 ROMB:5E45 6F               ld   l,a
 ROMB:5E46 26 00            ld   h,00
 ROMB:5E48 FA D8 C9         ld   a,(C9D8)
 ROMB:5E4B EF 12 DB 40                          // EXP incremented by ($C9E5) (obviously for transports)
 ROMB:5E4F FA DE CC         ld   a,(CCDE)
 ROMB:5E52 47               ld   b,a
 ROMB:5E53 FA DF CC         ld   a,(CCDF)
 ROMB:5E56 4F               ld   c,a
 ROMB:5E57 FA D8 C9         ld   a,(C9D8)
 ROMB:5E5A EF 12 89 41                          // Transport's movement updates loaded units' coordinates
 ROMB:5E5E E1               pop  hl
 ROMB:5E5F D1               pop  de
 ROMB:5E60 C1               pop  bc
 ROMB:5E61 C9               ret                 // Transporting increases the carrier's EXP and changes the cargo's coordinates to the carrier's new coordinates
 ROMB:5E62 78               ld   a,b
 ROMB:5E63 EA D9 C9         ld   (C9D9),a
 ROMB:5E66 79               ld   a,c
 ROMB:5E67 EA DA C9         ld   (C9DA),a
 ROMB:5E6A EF 12 4E 41                          // A = unit number of primary occupying unit, -1 if there is none
 ROMB:5E6E EA D8 C9         ld   (C9D8),a
 ROMB:5E71 FA D8 C9         ld   a,(C9D8)
 ROMB:5E74 EF 12 06 41                          // ($CCDD) to ($CCEC) holds primary occupying unit's stats
 ROMB:5E78 CD 87 5E         call 5E87           // Controls for selected unit's stats showing before handling unit commanding; ends with A holding just pressed controls
 ROMB:5E7B CB 4F            bit  1,a
 ROMB:5E7D C2 86 5E         jp   nz,5E86        // Ends immediately for B Button press
 ROMB:5E80 CD 0A 5F         call 5F0A           // Master control of unit movement
 ROMB:5E83 CD 77 69         call 6977           // Show any Level Ups resulting from given action
 ROMB:5E86 C9               ret                 // Handles unit selection on tile BC
 ROMB:5E87 3E 05            ld   a,05
 ROMB:5E89 CD 9D 7A         call 7A9D           // Window tiles in starting area covering 20 by 5 cleared for both VRAM Banks
 ROMB:5E8C CD 6E 65         call 656E           // Establishes all text of selected unit's stats window
 ROMB:5E8F CD 5B 65         call 655B           // Graphics transition to Window scrolling up to cover bottom 2.5 on-screen map tiles
 ROMB:5E92 CD A2 05         call 05A2           // Button update, next frame
 ROMB:5E95 F0 91            ld   a,(ff00+91)
 ROMB:5E97 CB 57            bit  2,a            // Select
 ROMB:5E99 20 0A            jr   nz,5EA5
 ROMB:5E9B CB 4F            bit  1,a            // B
 ROMB:5E9D 20 28            jr   nz,5EC7
 ROMB:5E9F CB 47            bit  0,a            // A
 ROMB:5EA1 20 20            jr   nz,5EC3
 ROMB:5EA3 18 ED            jr   5E92
 ROMB:5EA5 CD 60 48         call 4860           // Shuts off Window Display, LCD STAT Interrupt, and LYC=LY Coincidence Interrupt
 ROMB:5EA8 CD 64 21         call 2164           // Empties $FFB1 and $FFB2
 ROMB:5EAB CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMB:5EAE FA DD CC         ld   a,(CCDD)
 ROMB:5EB1 E6 01            and  a,01
 ROMB:5EB3 47               ld   b,a
 ROMB:5EB4 FA DD CC         ld   a,(CCDD)
 ROMB:5EB7 CB 3F            srl  a              // A = Unit Type, B = side
 ROMB:5EB9 EF 25 A5 5D                          // Controls for Unit Information Screen as a whole including unit selection list (A is Unit Type, B is Side; A is -1 if no Unit Type)
 ROMB:5EBD EF 0B E6 69                          // Reestablishes map graphics
 ROMB:5EC1 18 C4            jr   5E87           // Restarts procedure after pressing Select
 ROMB:5EC3 3E 02            ld   a,02
 ROMB:5EC5 18 04            jr   5ECB
 ROMB:5EC7 3E 0C            ld   a,0C
 ROMB:5EC9 18 00            jr   5ECB
 ROMB:5ECB CD 44 38         call 3844
 ROMB:5ECE CD 67 65         call 6567           // Restores cursor and shuts off window
 ROMB:5ED1 F0 91            ld   a,(ff00+91)
 ROMB:5ED3 C9               ret                 // Controls for selected unit's stats showing before handling unit commanding; ends with A holding just pressed controls
 ROMB:5ED4 AF               xor  a
 ROMB:5ED5 EA DD C9         ld   (C9DD),a
 ROMB:5ED8 EA DE C9         ld   (C9DE),a
 ROMB:5EDB EA E5 C9         ld   (C9E5),a
 ROMB:5EDE C9               ret                 // Empties ($C9DD), ($C9DE), and ($C9E5)
 ROMB:5EDF 3E C0            ld   a,C0
 ROMB:5EE1 CD 82 4F         call 4F82           // Clears Command Menu data, prepares blank space command (A is first data tile of Commands)
 ROMB:5EE4 CD 96 60         call 6096           // Establishes Movement command if unit hasn't already moved; Zero Flag off instead if unit has moved
 ROMB:5EE7 CD D6 60         call 60D6           // Establishes Unload command if direct Loading can happen; Zero Flag off if it can't
 ROMB:5EEA FA E0 CC         ld   a,(CCE0)
 ROMB:5EED CB 7F            bit  7,a
 ROMB:5EEF 20 18            jr   nz,5F09        // End if unit's turn is ended
 ROMB:5EF1 CD F7 60         call 60F7           // Establishes Fire command if valid targets exist; Zero Flag off instead if no valid targets
 ROMB:5EF4 CD C0 60         call 60C0           // Establishes Supply command if Supply is valid; Zero Flag off instead if Supply is invalid
 ROMB:5EF7 CD 0E 61         call 610E           // Establishes Capture command if Capture is valid; Zero Flag off instead if Capture is invalid
 ROMB:5EFA CD 28 61         call 6128           // Establishes Develop command if Develop is valid; Zero Flag off instead if Develop is invalid
 ROMB:5EFD CD A2 60         call 60A2           // Establishes Pave command if Pave is valid; Zero Flag off instead if Pave is invalid
 ROMB:5F00 CD 5C 61         call 615C           // Establishes Build command if Build is valid; Zero Flag off instead if Build is invalid
 ROMB:5F03 CD 76 61         call 6176           // Establishes Bomb command if Bomb is valid; Zero Flag off instead if Bomb is invalid
 ROMB:5F06 CD 42 61         call 6142           // Establishes Linkup command if Linkup is valid; Zero Flag off instead if Linkup is invalid
 ROMB:5F09 C9               ret  
 ROMB:5F0A FA D8 C9         ld   a,(C9D8)
 ROMB:5F0D EF 12 06 41                          // ($CCDD) to ($CCEC) holds unit's stats
 ROMB:5F11 CD D4 5E         call 5ED4           // Empties ($C9DD), ($C9DE), and ($C9E5)
 ROMB:5F14 CD 3D 69         call 693D           // ($C9E8) to ($CA19) holds army's Level values
 ROMB:5F17 CD DF 5E         call 5EDF           // Before-Movement Command establishing
 ROMB:5F1A FA BE C9         ld   a,(C9BE)
 ROMB:5F1D A7               and  a
 ROMB:5F1E CA 43 5F         jp   z,5F43         // Ends with A = 0 if no menu choices
 ROMB:5F21 FA BE C9         ld   a,(C9BE)
 ROMB:5F24 FE 01            cp   a,01
 ROMB:5F26 20 08            jr   nz,5F30        // More than 1 menu choice skips to bringing up the menu
 ROMB:5F28 FA B6 C9         ld   a,(C9B6)
 ROMB:5F2B FE 12            cp   a,12
 ROMB:5F2D CA 40 5F         jp   z,5F40         // Only menu choice being Movement skips the menu
 ROMB:5F30 CD C0 4F         call 4FC0           // Controls for Command Menu, ending with A = Map Menu choice if selected, or 0 if backspaced with B button
 ROMB:5F33 A7               and  a
 ROMB:5F34 28 0D            jr   z,5F43         // End immediately with A = 0 on backspace
 ROMB:5F36 CD 83 62         call 6283           // Executes Unit Command A; ends with A = 0 for Confirmation, or -1 for Cancellation
 ROMB:5F39 FE FF            cp   a,FF
 ROMB:5F3B 28 CD            jr   z,5F0A         // Restart procedure on cancellation
 ROMB:5F3D C3 43 5F         jp   5F43           // End immediately on confirmation
 ROMB:5F40 CD 83 62         call 6283           // Executes Unit Command A; ends with A = 0 for Confirmation, or -1 for Cancellation
 ROMB:5F43 C9               ret                 // Master control of unit movement
 ROMB:5F44 FA E1 CC         ld   a,(CCE1)
 ROMB:5F47 EA 9F CA         ld   (CA9F),a       // ($CA9F) = HP
 ROMB:5F4A FA E4 CC         ld   a,(CCE4)
 ROMB:5F4D EA A0 CA         ld   (CAA0),a       // ($CAA0) = Fuel
 ROMB:5F50 CD 63 77         call 7763           // Establishes selected unit stats holder graphics
 ROMB:5F53 CD F9 46         call 46F9           // res 0,WRA4[$D000 + ($C98D) * 16]
 ROMB:5F56 FA D9 C9         ld   a,(C9D9)
 ROMB:5F59 47               ld   b,a
 ROMB:5F5A FA DA C9         ld   a,(C9DA)
 ROMB:5F5D 4F               ld   c,a
 ROMB:5F5E FA DD CC         ld   a,(CCDD)
 ROMB:5F61 CD E3 67         call 67E3           // ($C9E0) 5 byte holds in order: 0, Coordinates, Unit Type, Terrain Type (non-ownership)
 ROMB:5F64 CD B6 54         call 54B6           // Establishes Movement for Movement/Pave Commands
 ROMB:5F67 CD 8A 42         call 428A           // Establishes all on-screen tiles' entire graphics, ($FF95) 2 byte holds screen shift coordinates
 ROMB:5F6A CD FA 74         call 74FA           // General map view graphics update (loop begins here)
 ROMB:5F6D CD 15 68         call 6815           // Flashing tile's graphics updated every 15 frames
 ROMB:5F70 21 0C 60         ld   hl,600C
 ROMB:5F73 FA 91 CA         ld   a,(CA91)
 ROMB:5F76 CD 9E 3A         call 3A9E           // HL = [HL + 2 * (# of 0s right of rightmost 1 bit in A)]
 ROMB:5F79 E9               jp   hl
 ROMB:5F7A F5               push af
 ROMB:5F7B CD C2 77         call 77C2           // Handles clear-up of all selected unit info sprites
 ROMB:5F7E F1               pop  af
 ROMB:5F7F C9               ret  
 ROMB:5F80 CD 25 75         call 7525           // If view will shift right: ($FFAC) 4 byte holds: OR ($FFAC),$82, ($C98B) + 10, ($C98C), 9; if not, general increase to X coordinate within view
 ROMB:5F83 18 05            jr   5F8A           // Stuff for Right
 ROMB:5F85 CD 64 75         call 7564           // If view will shift left: ($FFAC) 4 byte holds: OR ($FFAC),$81, ($C98B) - 1, ($C98C), 9; if not, general decrease to X coordinate within view
 ROMB:5F88 18 00            jr   5F8A           // Stuff for Left
 ROMB:5F8A FA 8F C9         ld   a,(C98F)
 ROMB:5F8D FE 05            cp   a,05
 ROMB:5F8F 38 05            jr   c,5F96         // Branches for cursor being on the left side
 ROMB:5F91 CD FC 77         call 77FC           // Sets up selected unit stats holder sprites on left side
 ROMB:5F94 18 D4            jr   5F6A
 ROMB:5F96 CD DD 77         call 77DD           // Sets up selected unit stats holder sprites on right side
 ROMB:5F99 18 CF            jr   5F6A           // Further wait for button input for Right/Left
 ROMB:5F9B CD DB 75         call 75DB           // If view will shift up: ($FFAC) 4 byte holds: OR ($FFAC),$84, ($C98B) - (($C98C)%2), ($C98C) - 1, 10 + (($C98C)%2); if not, general decrease to Y coordinate within view
 ROMB:5F9E 18 CA            jr   5F6A           // Stuff for Up
 ROMB:5FA0 CD 9C 75         call 759C           // If view will shift down: ($FFAC) 4 byte holds: OR ($FFAC),$88, ($C98B) - (($C98C)%2), ($C98C) + 9, 10 + (($C98C)%2); if not, general increase to Y coordinate within view
 ROMB:5FA3 18 C5            jr   5F6A           // Stuff for Down
 ROMB:5FA5 3E 0C            ld   a,0C
 ROMB:5FA7 CD 44 38         call 3844
 ROMB:5FAA CD 6B 56         call 566B           // res 7 on every tile in WRAM Bank #2
 ROMB:5FAD CD 8A 42         call 428A           // Establishes all on-screen tiles' entire graphics
 ROMB:5FB0 CD FB 67         call 67FB           // Establishes tile ($C9E1)'s entire graphics
 ROMB:5FB3 FA D8 C9         ld   a,(C9D8)
 ROMB:5FB6 EF 12 06 41                          // ($CCDD) to ($CCEC) holds unit's stats
 ROMB:5FBA 3E FF            ld   a,FF
 ROMB:5FBC 18 BC            jr   5F7A           // Ends with A = -1 for B Button press
 ROMB:5FBE FA 91 C9         ld   a,(C991)
 ROMB:5FC1 47               ld   b,a
 ROMB:5FC2 FA 92 C9         ld   a,(C992)
 ROMB:5FC5 4F               ld   c,a
 ROMB:5FC6 CD 4E 64         call 644E           // A = inverse flag for valid movement onto tile BC
 ROMB:5FC9 A7               and  a
 ROMB:5FCA 20 38            jr   nz,6004        // Invalid sound and goes back to wait for button input for invalid movement
 ROMB:5FCC CD 1E 60         call 601E           // After-movement Command establishing
 ROMB:5FCF FA BE C9         ld   a,(C9BE)
 ROMB:5FD2 A7               and  a
 ROMB:5FD3 28 2F            jr   z,6004         // Invalid sound and goes back to wait for button input for no choices (which would result if the target tile is occupied by a unit that can't carry the selected unit)
 ROMB:5FD5 3E 0A            ld   a,0A
 ROMB:5FD7 CD 44 38         call 3844
 ROMB:5FDA CD 6B 56         call 566B           // res 7 on every tile in WRAM Bank #2
 ROMB:5FDD CD 8A 42         call 428A           // Establishes all on-screen tiles' entire graphics
 ROMB:5FE0 CD FB 67         call 67FB           // Establishes tile ($C9E1)'s entire graphics
 ROMB:5FE3 CD C2 77         call 77C2           // Handles clear-up of all selected unit info sprites
 ROMB:5FE6 CD DA 61         call 61DA           // Handles after-movement unit commands management; A = 0 for confirmation, -1 for cancellation; Pave forces confirmation
 ROMB:5FE9 FE FF            cp   a,FF
 ROMB:5FEB 20 8D            jr   nz,5F7A        // Ends with A = 0 for confirmation of after-movement unit command
 ROMB:5FED CD 63 77         call 7763           // Establishes selected unit stats holder graphics
 ROMB:5FF0 CD 3B 68         call 683B           // Establishes selected unit's tile's entire graphics, also sets up Unit Type (WRA2) and Transport/End Turn Flags (WRA1) for tile
 ROMB:5FF3 FA D9 C9         ld   a,(C9D9)
 ROMB:5FF6 47               ld   b,a
 ROMB:5FF7 FA DA C9         ld   a,(C9DA)
 ROMB:5FFA 4F               ld   c,a
 ROMB:5FFB FA DD CC         ld   a,(CCDD)
 ROMB:5FFE CD E3 67         call 67E3           // ($C9E0) 5 byte holds in order: 0, Coordinates, Unit Type, Terrain Type (non-ownership)
 ROMB:6001 C3 6A 5F         jp   5F6A           // Further wait for button input after cancelling after-movement unit commands list
 ROMB:6004 3E 03            ld   a,03
 ROMB:6006 CD 44 38         call 3844
 ROMB:6009 C3 6A 5F         jp   5F6A
 
 ROMB:600C BE 5F                                // A
 ROMB:600E A5 5F                                // B (Cancellation)
 ROMB:6010 6A 5F                                // Select (does nothing)
 ROMB:6012 6A 5F                                // Start (does nothing)
 ROMB:6014 80 5F                                // Right (shift cursor right)
 ROMB:6016 85 5F                                // Left (shift cursor left)
 ROMB:6018 9B 5F                                // Up (shift cursor up)
 ROMB:601A A0 5F                                // Down (shift cursor down)
 ROMB:601C 6A 5F                                // None
 
 ROMB:601E C5               push bc
 ROMB:601F 3E C0            ld   a,C0
 ROMB:6021 CD 82 4F         call 4F82           // Clears Command Menu data, prepares blank space command (A is first data tile of Commands)
 ROMB:6024 C1               pop  bc
 ROMB:6025 FA DD C9         ld   a,(C9DD)       // A = Pave Command flag for Movement establishing
 ROMB:6028 A7               and  a
 ROMB:6029 20 20            jr   nz,604B        // Branches for Paving
 ROMB:602B FA D9 C9         ld   a,(C9D9)
 ROMB:602E B8               cp   b
 ROMB:602F 20 06            jr   nz,6037
 ROMB:6031 FA DA C9         ld   a,(C9DA)
 ROMB:6034 B9               cp   c
 ROMB:6035 28 46            jr   z,607D         // If not moving, establish after-movement unit commands
 ROMB:6037 EF 12 4E 41                          // A = unit number of primary occupying unit, -1 if there is none
 ROMB:603B FE FF            cp   a,FF
 ROMB:603D 28 3E            jr   z,607D         // No occupying unit on new tile establishes after-movement unit commands
 ROMB:603F FA DD CC         ld   a,(CCDD)
 ROMB:6042 CD 24 7D         call 7D24           // Zero Flag set by either A = 0, or A and ($C633) are both either odd or even
 ROMB:6045 20 36            jr   nz,607D        // If enemy unit is trying to be moved, tries to establish after-movement unit commands (no commands would be established, of course)
 ROMB:6047 CD 94 61         call 6194           // Establishes Load command if Load is valid; Zero Flag off instead if Load is invalid
 ROMB:604A C9               ret  
 ROMB:604B FA 91 C9         ld   a,(C991)
 ROMB:604E 47               ld   b,a
 ROMB:604F FA 92 C9         ld   a,(C992)
 ROMB:6052 4F               ld   c,a
 ROMB:6053 FA DE CC         ld   a,(CCDE)
 ROMB:6056 B8               cp   b
 ROMB:6057 20 08            jr   nz,6061
 ROMB:6059 FA DF CC         ld   a,(CCDF)
 ROMB:605C B9               cp   c
 ROMB:605D 20 02            jr   nz,6061
 ROMB:605F 18 0D            jr   606E           // Branches for same location
 ROMB:6061 FA 91 C9         ld   a,(C991)
 ROMB:6064 47               ld   b,a
 ROMB:6065 FA 92 C9         ld   a,(C992)
 ROMB:6068 4F               ld   c,a
 ROMB:6069 CD 92 47         call 4792           // A = Occupying unit's Type
 ROMB:606C A7               and  a
 ROMB:606D C0               ret  nz             // Won't establish Pave if target tile is already occupied
 ROMB:606E CD 70 47         call 4770           // A = Terrain Type
 ROMB:6071 EF 0C CD 70                          // A = 1 if Plains, 2 if Forest or Moor, 0 otherwise
 ROMB:6075 A7               and  a
 ROMB:6076 C8               ret  z              // Won't establish Pave if not moving onto Plains/Forest/Moor
 ROMB:6077 3E 14            ld   a,14           // Pave
 ROMB:6079 CD A6 4F         call 4FA6           // ($C9B6 + menu choice number) = 20, ($C9BE) is incremented
 ROMB:607C C9               ret  
 ROMB:607D CD 0E 61         call 610E           // Establishes Capture command if Capture is valid; Zero Flag off instead if Capture is invalid
 ROMB:6080 CD 28 61         call 6128           // Establishes Develop command if Develop is valid; Zero Flag off instead if Develop is invalid
 ROMB:6083 CD F7 60         call 60F7           // Establishes Fire command if valid targets exist; Zero Flag off instead if no valid targets
 ROMB:6086 CD CD 61         call 61CD           // Establishes Wait command if Wait is valid; Zero Flag off instead if Wait is invalid
 ROMB:6089 CD 5C 61         call 615C           // Establishes Build command if Build is valid; Zero Flag off instead if Build is invalid
 ROMB:608C CD 76 61         call 6176           // Establishes Bomb command if Bomb is valid; Zero Flag off instead if Bomb is invalid
 ROMB:608F CD 42 61         call 6142           // Establishes Linkup command if Linkup is valid; Zero Flag off instead if Linkup is invalid
 ROMB:6092 CD AE 61         call 61AE           // Establishes Delete command if Delete is valid; Zero Flag off instead if Delete is invalid
 ROMB:6095 C9               ret  
 ROMB:6096 FA E0 CC         ld   a,(CCE0)
 ROMB:6099 CB 7F            bit  7,a
 ROMB:609B C0               ret  nz
 ROMB:609C 3E 12            ld   a,12           // Movement
 ROMB:609E CD A6 4F         call 4FA6           // ($C9B6 + menu choice number) = 18, ($C9BE) is incremented
 ROMB:60A1 C9               ret                 // Establishes Movement command if unit hasn't already moved; Zero Flag off instead if unit has moved
 ROMB:60A2 FA DD CC         ld   a,(CCDD)
 ROMB:60A5 CD 24 7D         call 7D24           // Zero Flag set by either A = 0, or A and ($C633) are both either odd or even
 ROMB:60A8 C0               ret  nz             // End immediately if unit is different side
 ROMB:60A9 FA D9 C9         ld   a,(C9D9)
 ROMB:60AC 47               ld   b,a
 ROMB:60AD FA DA C9         ld   a,(C9DA)
 ROMB:60B0 4F               ld   c,a
 ROMB:60B1 FA D8 C9         ld   a,(C9D8)
 ROMB:60B4 EF 0C 78 70                          // A = inverse of ability to Pave starting or adjacent tile
 ROMB:60B8 A7               and  a
 ROMB:60B9 C0               ret  nz
 ROMB:60BA 3E 14            ld   a,14           // Pave
 ROMB:60BC CD A6 4F         call 4FA6           // ($C9B6 + menu choice number) = 20, ($C9BE) is incremented
 ROMB:60BF C9               ret                 // Establishes Pave command if Pave is valid; Zero Flag off instead if Pave is invalid
 ROMB:60C0 FA DD CC         ld   a,(CCDD)
 ROMB:60C3 CD 24 7D         call 7D24           // Zero Flag set by either A = 0, or A and ($C633) are both either odd or even
 ROMB:60C6 C0               ret  nz             // End immediately if unit is different side
 ROMB:60C7 FA D8 C9         ld   a,(C9D8)
 ROMB:60CA EF 0C 44 6B                          // A = 1 if unit is already supplied or resupply/repairing isn't happening; 0 otherwise
 ROMB:60CE A7               and  a
 ROMB:60CF C0               ret  nz
 ROMB:60D0 3E 1B            ld   a,1B           // Supply
 ROMB:60D2 CD A6 4F         call 4FA6           // ($C9B6 + menu choice number) = 27, ($C9BE) is incremented
 ROMB:60D5 C9               ret                 // Establishes Supply command if Supply is valid; Zero Flag off instead if Supply is invalid
 ROMB:60D6 FA D8 C9         ld   a,(C9D8)
 ROMB:60D9 CD B0 5C         call 5CB0           // A = 0 if direct Unloading can happen, 1 otherwise
 ROMB:60DC A7               and  a
 ROMB:60DD C0               ret  nz
 ROMB:60DE FA DD CC         ld   a,(CCDD)
 ROMB:60E1 CB 3F            srl  a
 ROMB:60E3 FE 2E            cp   a,2E
 ROMB:60E5 28 0A            jr   z,60F1
 ROMB:60E7 FE 2F            cp   a,2F
 ROMB:60E9 28 06            jr   z,60F1
 ROMB:60EB 3E 1C            ld   a,1C           // Unload (land unit)
 ROMB:60ED CD A6 4F         call 4FA6           // ($C9B6 + menu choice number) = 28, ($C9BE) is incremented
 ROMB:60F0 C9               ret  
 ROMB:60F1 3E 0C            ld   a,0C           // Unload (air unit)
 ROMB:60F3 CD A6 4F         call 4FA6           // ($C9B6 + menu choice number) = 12, ($C9BE) is incremented
 ROMB:60F6 C9               ret                 // Establishes Unload command if direct Loading can happen; Zero Flag off if it can't
 ROMB:60F7 FA 91 C9         ld   a,(C991)
 ROMB:60FA 47               ld   b,a
 ROMB:60FB FA 92 C9         ld   a,(C992)
 ROMB:60FE 4F               ld   c,a
 ROMB:60FF FA D8 C9         ld   a,(C9D8)
 ROMB:6102 EF 0C 00 40                          // A = 1 if any valid targets exist, 0 otherwise; WRAM Bank 4 ($DBF8) holds any valid targets' IDs
 ROMB:6106 A7               and  a
 ROMB:6107 C0               ret  nz
 ROMB:6108 3E 09            ld   a,09           // Fire
 ROMB:610A CD A6 4F         call 4FA6           // ($C9B6 + menu choice number) = 30, ($C9BE) is incremented
 ROMB:610D C9               ret                 // Establishes Fire command if valid targets exist; Zero Flag off instead if no valid targets
 ROMB:610E FA DD CC         ld   a,(CCDD)
 ROMB:6111 CD 24 7D         call 7D24           // Zero Flag set by either A = 0, or A and ($C633) are both either odd or even
 ROMB:6114 C0               ret  nz             // End immediately if unit is different side
 ROMB:6115 FA 91 C9         ld   a,(C991)
 ROMB:6118 47               ld   b,a
 ROMB:6119 FA 92 C9         ld   a,(C992)
 ROMB:611C 4F               ld   c,a
 ROMB:611D CD 74 64         call 6474
 ROMB:6120 A7               and  a
 ROMB:6121 C0               ret  nz             // End immediately if capture is invalid
 ROMB:6122 3E 0B            ld   a,0B           // Capture
 ROMB:6124 CD A6 4F         call 4FA6           // ($C9B6 + menu choice number) = 11, ($C9BE) is incremented
 ROMB:6127 C9               ret                 // Establishes Capture command if Capture is valid; Zero Flag off instead if Capture is invalid
 ROMB:6128 FA DD CC         ld   a,(CCDD)
 ROMB:612B CD 24 7D         call 7D24           // Zero Flag set by either A = 0, or A and ($C633) are both either odd or even
 ROMB:612E C0               ret  nz             // End immediately if unit is different side
 ROMB:612F FA 91 C9         ld   a,(C991)
 ROMB:6132 47               ld   b,a
 ROMB:6133 FA 92 C9         ld   a,(C992)
 ROMB:6136 4F               ld   c,a
 ROMB:6137 CD 71 48         call 4871           // A = 0 if Develop is viable; 1 otherwise
 ROMB:613A A7               and  a
 ROMB:613B C0               ret  nz             // End immediately if Develop is invalid
 ROMB:613C 3E 0A            ld   a,0A           // Develop
 ROMB:613E CD A6 4F         call 4FA6           // ($C9B6 + menu choice number) = 10, ($C9BE) is incremented
 ROMB:6141 C9               ret                 // Establishes Develop command if Develop is valid; Zero Flag off instead if Develop is invalid
 ROMB:6142 FA DD CC         ld   a,(CCDD)
 ROMB:6145 CD 24 7D         call 7D24           // Zero Flag set by either A = 0, or A and ($C633) are both either odd or even
 ROMB:6148 C0               ret  nz             // End immediately if unit is different side
 ROMB:6149 FA 91 C9         ld   a,(C991)
 ROMB:614C 47               ld   b,a
 ROMB:614D FA 92 C9         ld   a,(C992)
 ROMB:6150 4F               ld   c,a
 ROMB:6151 CD 3A 4D         call 4D3A           // A = inverse of Linkup Command viability at coordinates BC
 ROMB:6154 A7               and  a
 ROMB:6155 C0               ret  nz             // Immediate ending for non-viability
 ROMB:6156 3E 0E            ld   a,0E           // Linkup
 ROMB:6158 CD A6 4F         call 4FA6           // ($C9B6 + menu choice number) = 14, ($C9BE) is incremented
 ROMB:615B C9               ret                 // Establishes Linkup command if Linkup is valid; Zero Flag off instead if Linkup is invalid
 ROMB:615C FA DD CC         ld   a,(CCDD)
 ROMB:615F CD 24 7D         call 7D24           // Zero Flag set by either A = 0, or A and ($C633) are both either odd or even
 ROMB:6162 C0               ret  nz             // End immediately if unit is different side
 ROMB:6163 FA 91 C9         ld   a,(C991)
 ROMB:6166 47               ld   b,a
 ROMB:6167 FA 92 C9         ld   a,(C992)
 ROMB:616A 4F               ld   c,a
 ROMB:616B CD 41 49         call 4941           // A = 0 if Build is viable; 1 otherwise
 ROMB:616E A7               and  a
 ROMB:616F C0               ret  nz             // End immediately if Build is not viable
 ROMB:6170 3E 15            ld   a,15           // Build
 ROMB:6172 CD A6 4F         call 4FA6           // ($C9B6 + menu choice number) = 21, ($C9BE) is incremented
 ROMB:6175 C9               ret                 // Establishes Build command if Build is valid; Zero Flag off instead if Build is invalid
 ROMB:6176 FA DD CC         ld   a,(CCDD)
 ROMB:6179 CD 24 7D         call 7D24           // Zero Flag set by either A = 0, or A and ($C633) are both either odd or even
 ROMB:617C C0               ret  nz             // End immediately if unit is different side
 ROMB:617D FA 91 C9         ld   a,(C991)
 ROMB:6180 47               ld   b,a
 ROMB:6181 FA 92 C9         ld   a,(C992)
 ROMB:6184 4F               ld   c,a
 ROMB:6185 FA D8 C9         ld   a,(C9D8)
 ROMB:6188 EF 0C A8 43                          // A = 0 if Anti-City weapon is available, 1 otherwise
 ROMB:618C A7               and  a
 ROMB:618D C0               ret  nz             // Ends immediately if Anti-City weapon isn't available
 ROMB:618E 3E 1A            ld   a,1A           // Bomb
 ROMB:6190 CD A6 4F         call 4FA6           // ($C9B6 + menu choice number) = 26, ($C9BE) is incremented
 ROMB:6193 C9               ret                 // Establishes Bomb command if Bomb is valid; Zero Flag off instead if Bomb is invalid
 ROMB:6194 FA DD CC         ld   a,(CCDD)
 ROMB:6197 CD 24 7D         call 7D24           // Zero Flag set by either A = 0, or A and ($C633) are both either odd or even
 ROMB:619A C0               ret  nz             // End immediately if unit is different side
 ROMB:619B FA 91 C9         ld   a,(C991)
 ROMB:619E 47               ld   b,a
 ROMB:619F FA 92 C9         ld   a,(C992)
 ROMB:61A2 4F               ld   c,a
 ROMB:61A3 CD 84 5D         call 5D84           // A = 0 if Loading is happening, 1 otherwise
 ROMB:61A6 A7               and  a
 ROMB:61A7 C0               ret  nz
 ROMB:61A8 3E 0D            ld   a,0D           // Load
 ROMB:61AA CD A6 4F         call 4FA6           // ($C9B6 + menu choice number) = 13, ($C9BE) is incremented
 ROMB:61AD C9               ret                 // Establishes Load command if Load is valid; Zero Flag off instead if Load is invalid
 ROMB:61AE FA DD CC         ld   a,(CCDD)
 ROMB:61B1 CD 24 7D         call 7D24           // Zero Flag set by either A = 0, or A and ($C633) are both either odd or even
 ROMB:61B4 C0               ret  nz             // End immediately if unit is different side
 ROMB:61B5 FA 91 C9         ld   a,(C991)
 ROMB:61B8 47               ld   b,a
 ROMB:61B9 FA 92 C9         ld   a,(C992)
 ROMB:61BC 4F               ld   c,a            // BC holds new location
 ROMB:61BD FA D9 C9         ld   a,(C9D9)
 ROMB:61C0 B8               cp   b
 ROMB:61C1 C0               ret  nz             // End immediately if X coordinate doesn't match
 ROMB:61C2 FA DA C9         ld   a,(C9DA)
 ROMB:61C5 B9               cp   c
 ROMB:61C6 C0               ret  nz             // End immediately if Y coordinate doesn't match
 ROMB:61C7 3E 0F            ld   a,0F           // Delete
 ROMB:61C9 CD A6 4F         call 4FA6           // ($C9B6 + menu choice number) = 15, ($C9BE) is incremented
 ROMB:61CC C9               ret                 // Establishes Delete command if Delete is valid; Zero Flag off instead if Delete is invalid
 ROMB:61CD FA DD CC         ld   a,(CCDD)
 ROMB:61D0 CD 24 7D         call 7D24           // Zero Flag set by either A = 0, or A and ($C633) are both either odd or even
 ROMB:61D3 C0               ret  nz             // End immediately if unit is different side
 ROMB:61D4 3E 10            ld   a,10           // Wait
 ROMB:61D6 CD A6 4F         call 4FA6           // ($C9B6 + menu choice number) = 16, ($C9BE) is incremented
 ROMB:61D9 C9               ret                 // Establishes Wait command if Wait is valid; Zero Flag off instead if Wait is invalid
 ROMB:61DA FA 91 C9         ld   a,(C991)
 ROMB:61DD 47               ld   b,a
 ROMB:61DE FA 92 C9         ld   a,(C992)
 ROMB:61E1 4F               ld   c,a
 ROMB:61E2 CD 14 47         call 4714           // A = Terrain Type (non-ownsership)
 ROMB:61E5 EA DB C9         ld   (C9DB),a
 ROMB:61E8 CD 2A 47         call 472A           // A = Unit Type of occupying unit with bit 7 holding viable movement
 ROMB:61EB EA DC C9         ld   (C9DC),a
 ROMB:61EE FA D9 C9         ld   a,(C9D9)
 ROMB:61F1 47               ld   b,a
 ROMB:61F2 FA DA C9         ld   a,(C9DA)
 ROMB:61F5 4F               ld   c,a
 ROMB:61F6 CD 69 68         call 6869           // Unit hidden from view of BC coordinates, allowing view of terrain tile
 ROMB:61F9 FA E0 CC         ld   a,(CCE0)
 ROMB:61FC CB 47            bit  0,a
 ROMB:61FE 28 0D            jr   z,620D
 ROMB:6200 FA E3 CC         ld   a,(CCE3)
 ROMB:6203 CD 93 68         call 6893           // Sets up tile's graphics with Unit A
 ROMB:6206 FA D8 C9         ld   a,(C9D8)
 ROMB:6209 EF 12 06 41                          // ($CCDD) to ($CCEC) holds unit's stats
 ROMB:620D FA 91 C9         ld   a,(C991)
 ROMB:6210 EA DE CC         ld   (CCDE),a
 ROMB:6213 47               ld   b,a
 ROMB:6214 FA 92 C9         ld   a,(C992)
 ROMB:6217 EA DF CC         ld   (CCDF),a
 ROMB:621A 4F               ld   c,a
 ROMB:621B CD 3B 68         call 683B           // Establishes selected unit's tile's entire graphics, also sets up Unit Type (WRA2) and Transport/End Turn Flags (WRA1) for tile
 ROMB:621E CD 9B 56         call 569B           // ($FFB5) has movement capacity, WRA5($DD81) has coordinates for path starting from BC, A has travel distance
 ROMB:6221 EA E5 C9         ld   (C9E5),a
 ROMB:6224 FA DD C9         ld   a,(C9DD)       // A = Pave Command flag for Movement establishing
 ROMB:6227 A7               and  a
 ROMB:6228 C2 4D 62         jp   nz,624D        // Branches if Pave command was used instead of Movement command
 ROMB:622B CD C0 4F         call 4FC0           // Controls for Command Menu, ending with A = Map Menu choice if selected, or 0 if backspaced with B button
 ROMB:622E A7               and  a
 ROMB:622F 28 25            jr   z,6256         // End with movement graphics undone and A = -1 for B Button press
 ROMB:6231 CD 83 62         call 6283           // Executes Unit Command A; ends with A = 0 for Confirmation, or -1 for Cancellation
 ROMB:6234 FE FF            cp   a,FF
 ROMB:6236 20 0D            jr   nz,6245        // Non-cancellation results in confirmation ending
 ROMB:6238 FA 91 C9         ld   a,(C991)
 ROMB:623B 47               ld   b,a
 ROMB:623C FA 92 C9         ld   a,(C992)
 ROMB:623F 4F               ld   c,a
 ROMB:6240 CD 1E 60         call 601E           // After-movement Command establishing
 ROMB:6243 18 E6            jr   622B           // Goes back to controls for Command Menu due to cancellation
 ROMB:6245 CD 09 57         call 5709           // Handles selected unit's fuel reduction (NOTICE: mixed number Movement Power requirement is truncated)
 ROMB:6248 CD 1E 5E         call 5E1E           // Transporting increases the carrier's EXP and changes the cargo's coordinates to the carrier's new coordinates
 ROMB:624B AF               xor  a
 ROMB:624C C9               ret  
 ROMB:624D EF 0C 5F 72                          // Pave Command playing out upon confirmation
 ROMB:6251 CD F4 68         call 68F4           // Updates the graphics of tiles BC and the original starting tile
 ROMB:6254 18 EF            jr   6245           // Finishing stuff, ending up with A = 0
 ROMB:6256 FA 91 C9         ld   a,(C991)
 ROMB:6259 47               ld   b,a
 ROMB:625A FA 92 C9         ld   a,(C992)
 ROMB:625D 4F               ld   c,a
 ROMB:625E FA DB C9         ld   a,(C9DB)
 ROMB:6261 CD 40 47         call 4740           // Terrain tile updated with ($C9DB)
 ROMB:6264 FA DC C9         ld   a,(C9DC)
 ROMB:6267 CD 58 47         call 4758           // Unit tile updated with ($C9DC)
 ROMB:626A CD D1 43         call 43D1           // Establishes tile BC's entire graphics
 ROMB:626D FA D8 C9         ld   a,(C9D8)
 ROMB:6270 EF 12 06 41                          // ($CCDD) to ($CCEC) holds unit's stats
 ROMB:6274 FA D8 C9         ld   a,(C9D8)
 ROMB:6277 CD 74 68         call 6874           // Updates any parent unit's stats as necessary, also does finishing tile graphics updating (A is would-be child unit #)
 ROMB:627A CD B6 54         call 54B6           // Establishes Movement for Movement/Pave Commands
 ROMB:627D CD 8A 42         call 428A           // Establishes all on-screen tiles' entire graphics
 ROMB:6280 3E FF            ld   a,FF
 ROMB:6282 C9               ret                 // Handles after-movement unit commands management; A = 0 for confirmation, -1 for cancellation
 ROMB:6283 FE 12            cp   a,12           // Movement
 ROMB:6285 28 42            jr   z,62C9         // Executes Movement Command, ends with 0 for Confirmation or -1 for Cancellation
 ROMB:6287 FE 14            cp   a,14           // Pave
 ROMB:6289 28 56            jr   z,62E1         // Executes Pave Command, ends with 0 for Confirmation or -1 for Cancellation
 ROMB:628B FE 1B            cp   a,1B           // Supply
 ROMB:628D 28 59            jr   z,62E8         // Executes Supply Command, ends with 0 unconditionally
 ROMB:628F FE 09            cp   a,09           // Fire
 ROMB:6291 28 5C            jr   z,62EF         // Executes Fire Command, ends with 0 for Confirmation or -1 for Cancellation
 ROMB:6293 FE 0D            cp   a,0D           // Load
 ROMB:6295 28 7B            jr   z,6312         // Executes Load Command, ends with 0 unconditionally
 ROMB:6297 FE 0E            cp   a,0E           // Linkup
 ROMB:6299 CA 1B 63         jp   z,631B         // Executes Linkup Command, ends with 0 for Confirmation or -1 for Cancellation
 ROMB:629C FE 0A            cp   a,0A           // Develop
 ROMB:629E CA 36 63         jp   z,6336         // Executes Develop Command, ends with 0 for Confirmation or -1 for Cancellation
 ROMB:62A1 FE 15            cp   a,15           // Build
 ROMB:62A3 CA 4A 63         jp   z,634A         // Executes Build Command, ends with 0 for Confirmation or -1 for Cancellation
 ROMB:62A6 FE 0B            cp   a,0B           // Capture
 ROMB:62A8 CA 5C 63         jp   z,635C         // Executes Capture Command, ends with 0 unconditionally
 ROMB:62AB FE 1A            cp   a,1A           // Bomb
 ROMB:62AD CA 64 63         jp   z,6364         // Executes Bomb Command, ends with 0 for Confirmation or -1 for Cancellation
 ROMB:62B0 FE 0F            cp   a,0F           // Delete
 ROMB:62B2 CA C5 63         jp   z,63C5         // Executes Delete Command, ends with 0 unconditionally
 ROMB:62B5 FE 10            cp   a,10           // Wait
 ROMB:62B7 CA B7 63         jp   z,63B7         // Executes Wait Command, ends with 0 unconditionally
 ROMB:62BA FE 0C            cp   a,0C           // Unload (Air)
 ROMB:62BC 28 07            jr   z,62C5         // Executes Unload Command, ends with 0 for Confirmation or -1 for Cancellation
 ROMB:62BE FE 1C            cp   a,1C           // Unload (Land)
 ROMB:62C0 28 03            jr   z,62C5         // Executes Unload Command, ends with 0 for Confirmation or -1 for Cancellation
 ROMB:62C2 C3 CC 63         jp   63CC
 ROMB:62C5 CD CF 63         call 63CF           // Unload command as a whole; ends with A = 0 for confirmation, or -1 for full cancellation
 ROMB:62C8 C9               ret  
 ROMB:62C9 CD 44 5F         call 5F44           // Controls for Movement portion of commanding; A = 0 for full confirmation, or -1 for cancellation
 ROMB:62CC FE FF            cp   a,FF
 ROMB:62CE C2 CA 63         jp   nz,63CA        // Movement confirmation ends with A = 0
 ROMB:62D1 FA D9 C9         ld   a,(C9D9)
 ROMB:62D4 47               ld   b,a
 ROMB:62D5 FA DA C9         ld   a,(C9DA)
 ROMB:62D8 4F               ld   c,a
 ROMB:62D9 C5               push bc
 ROMB:62DA CD 01 7B         call 7B01           // Handles map graphics shift to coordinates BC
 ROMB:62DD C1               pop  bc
 ROMB:62DE 3E FF            ld   a,FF
 ROMB:62E0 C9               ret  
 ROMB:62E1 3E 01            ld   a,01
 ROMB:62E3 EA DD C9         ld   (C9DD),a
 ROMB:62E6 18 E1            jr   62C9
 ROMB:62E8 EF 0C 77 6B                          // Supply command as a whole, property takes priority over unit for resupply source
 ROMB:62EC C3 CA 63         jp   63CA           // Supply ends with A = 0
 ROMB:62EF FA 91 C9         ld   a,(C991)
 ROMB:62F2 47               ld   b,a
 ROMB:62F3 FA 92 C9         ld   a,(C992)
 ROMB:62F6 4F               ld   c,a
 ROMB:62F7 FA D8 C9         ld   a,(C9D8)
 ROMB:62FA EF 0C 8F 41                          // Fire Command as a whole, including any results if confirmed; ends with A = 0 for confirmation, or -1 for cancellation (BC is attacking unit's coordinates)
 ROMB:62FE FE FF            cp   a,FF
 ROMB:6300 C2 CA 63         jp   nz,63CA        // Fire confirmation ends with A = 0
 ROMB:6303 FA E1 CC         ld   a,(CCE1)
 ROMB:6306 EA 9F CA         ld   (CA9F),a       // ($CA9F) holds original HP
 ROMB:6309 FA E4 CC         ld   a,(CCE4)
 ROMB:630C EA A0 CA         ld   (CAA0),a       // ($CAA0) holds original Fuel
 ROMB:630F C3 CC 63         jp   63CC           // Fire cancellation ends with A = -1
 ROMB:6312 CD F4 68         call 68F4           // Updates the graphics of tiles BC and the original starting tile
 ROMB:6315 CD C7 5D         call 5DC7           // Handles Loading being done
 ROMB:6318 C3 CA 63         jp   63CA           // Load ends with A = 0
 ROMB:631B CD F2 4D         call 4DF2           // Linkup Command as a whole; A = -1 for B Button press, or 0 for success with A Button press
 ROMB:631E FE FF            cp   a,FF
 ROMB:6320 CA CC 63         jp   z,63CC         // Linkup Command cancellation ends with A = -1
 ROMB:6323 3E 04            ld   a,04           // No default Action Animation due to Linkup command
 ROMB:6325 EF 0C BB 66                          // Action Animation cutscenes play out where applicable
 ROMB:6329 3E 06            ld   a,06           // Linkup
 ROMB:632B CD B5 51         call 51B5           // Handles Popup Message as a whole including momentary cursor disabling (A is Popup Message #)
 ROMB:632E 3E 14            ld   a,14
 ROMB:6330 CD 44 38         call 3844
 ROMB:6333 C3 CA 63         jp   63CA           // Linkup confirmation ends with A = 0
 ROMB:6336 CD 9C 48         call 489C           // Develop process fully handled; A = -1 instead if insufficient "ammo"
 ROMB:6339 FE FF            cp   a,FF
 ROMB:633B CA CC 63         jp   z,63CC         // Insufficient "ammo" results in ending with A = -1
 ROMB:633E CD F4 68         call 68F4           // Updates the graphics of tiles BC and the original starting tile
 ROMB:6341 CD 2C 4D         call 4D2C           // EXP incremented by HP
 ROMB:6344 CD 2F 7C         call 7C2F           // Establishes income values
 ROMB:6347 C3 CA 63         jp   63CA           // Develop success ends with A = 0
 ROMB:634A CD 7C 4A         call 4A7C           // Build command as a whole; A = -1 for B Button press
 ROMB:634D FE FF            cp   a,FF
 ROMB:634F 28 7B            jr   z,63CC         // Build Command cancellation ends with A = -1
 ROMB:6351 CD F4 68         call 68F4           // Updates the graphics of tiles BC and the original starting tile
 ROMB:6354 CD 2C 4D         call 4D2C           // EXP incremented by HP
 ROMB:6357 CD 2F 7C         call 7C2F           // Establishes income values
 ROMB:635A 18 6E            jr   63CA           // Build confirmation ends with A = 0
 ROMB:635C CD F4 68         call 68F4           // Updates the graphics of tiles BC and the original starting tile
 ROMB:635F CD 8C 64         call 648C           // Capture process
 ROMB:6362 18 66            jr   63CA           // Capture ends with A = 0
 ROMB:6364 FA D8 C9         ld   a,(C9D8)
 ROMB:6367 EF 0C 3A 4F                          // Controls for Bomb command, end with A = 0 for full confirmation, or -1 for cancellation (A = Unit # of unit wanting to do bombing)
 ROMB:636B FE FF            cp   a,FF
 ROMB:636D 28 5D            jr   z,63CC         // Ends with A = -1 for full cancellation
 ROMB:636F CD F4 68         call 68F4           // Updates the graphics of tiles BC and the original starting tile
 ROMB:6372 FA D8 C9         ld   a,(C9D8)
 ROMB:6375 EF 12 06 41                          // ($CCDD) to ($CCEC) holds unit's stats
 ROMB:6379 FA 91 C9         ld   a,(C991)
 ROMB:637C 47               ld   b,a
 ROMB:637D FA 92 C9         ld   a,(C992)
 ROMB:6380 4F               ld   c,a
 ROMB:6381 EF 0C 4F 50                          // Anti-City weapon's full effect on tile BC and its surrounding tiles and their involved units, primary weapon ammo decremented, A = total HP damage by bombing
 ROMB:6385 F5               push af
 ROMB:6386 FA D8 C9         ld   a,(C9D8)
 ROMB:6389 EF 12 2B 41                          // Unit's stats now holds ($CCDD) to ($CCEC)
 ROMB:638D F1               pop  af
 ROMB:638E C6 0A            add  a,0A
 ROMB:6390 6F               ld   l,a
 ROMB:6391 26 00            ld   h,00
 ROMB:6393 FA D8 C9         ld   a,(C9D8)
 ROMB:6396 EF 12 DB 40                          // EXP incremented by (A)+10
 ROMB:639A CD 2F 7C         call 7C2F           // Establishes income values
 ROMB:639D CD D2 04         call 04D2           // Next frame
 ROMB:63A0 CD D2 04         call 04D2           // Next frame
 ROMB:63A3 CD D2 04         call 04D2           // Next frame
 ROMB:63A6 CD D2 04         call 04D2           // Next frame
 ROMB:63A9 FA DE CC         ld   a,(CCDE)
 ROMB:63AC 47               ld   b,a
 ROMB:63AD FA DF CC         ld   a,(CCDF)
 ROMB:63B0 4F               ld   c,a
 ROMB:63B1 EF 0B 01 7B                          // Handles map graphics shift to unit
 ROMB:63B5 18 13            jr   63CA           // Bomb ends with A = 0 for full confirmation
 ROMB:63B7 CD F4 68         call 68F4           // Updates the graphics of tiles BC and the original starting tile
 ROMB:63BA 3E 04            ld   a,04           // No default Action Animation due to doing nothing
 ROMB:63BC EF 0C BB 66                          // Action Animation cutscenes play out where applicable
 ROMB:63C0 CD 50 65         call 6550           // Standby Popup message and sound
 ROMB:63C3 18 05            jr   63CA           // Wait ends with A = 0
 ROMB:63C5 CD 24 65         call 6524           // The Smite Tool's process fully handled
 ROMB:63C8 18 00            jr   63CA           // Delete ends with A = 0
 ROMB:63CA AF               xor  a
 ROMB:63CB C9               ret  
 ROMB:63CC 3E FF            ld   a,FF
 ROMB:63CE C9               ret  
 ROMB:63CF FA D8 C9         ld   a,(C9D8)
 ROMB:63D2 EA DF C9         ld   (C9DF),a       // ($C9DF) starts with primary selected unit
 ROMB:63D5 CD C3 5C         call 5CC3           // ($C9D3) emptied, ($CD33) holds number of units Loaded for selected unit, ($CD34) 7? bytes holds units directly Loaded
 ROMB:63D8 FA DF C9         ld   a,(C9DF)       // Loop begins here
 ROMB:63DB EA D8 C9         ld   (C9D8),a
 ROMB:63DE EF 12 06 41                          // ($CCDD) to ($CCEC) holds unit's stats
 ROMB:63E2 CD CF 5C         call 5CCF           // Controls for Loaded Unit selection; ends with A = selected Loaded unit for A Button pressed, -1 for B Button pressed
 ROMB:63E5 FE FF            cp   a,FF
 ROMB:63E7 28 45            jr   z,642E         // End with A = -1 if B Button was pressed
 ROMB:63E9 CD 60 48         call 4860           // Shuts off Window Display, LCD STAT Interrupt, and LYC=LY Coincidence Interrupt
 ROMB:63EC CD 37 64         call 6437           // Establishes Unloading unit's base commands if Unloading unit hasn't moved yet
 ROMB:63EF FA BE C9         ld   a,(C9BE)
 ROMB:63F2 A7               and  a
 ROMB:63F3 28 39            jr   z,642E         // Ends with A = -1 if no commands were established
 ROMB:63F5 FE 01            cp   a,01
 ROMB:63F7 28 0D            jr   z,6406         // Branches if only Movement command is available
 ROMB:63F9 CD C0 4F         call 4FC0           // Controls for Command Menu, ending with A = Command Menu choice if selected, or 0 if backspaced with B button
 ROMB:63FC FE 12            cp   a,12           // Movement
 ROMB:63FE 28 1A            jr   z,641A
 ROMB:6400 FE 1B            cp   a,1B           // Supply
 ROMB:6402 28 21            jr   z,6425
 ROMB:6404 18 D2            jr   63D8
 ROMB:6406 EF 0C 04 68                          // ($C9B0) = Unit Type of given unit, ($C9B1) = Unit Type of Loading unit for not Aircraft Carrier (no side for both), A = 6 for Aircraft Carrier Loading, 5 for non-Aircraft Carrier Loading, ($C9AF) = 6 if Loading unit is Aircraft Carrier
 ROMB:640A 3E 01            ld   a,01
 ROMB:640C EA DE C9         ld   (C9DE),a
 ROMB:640F 3E 12            ld   a,12
 ROMB:6411 CD 83 62         call 6283           // Executes Unit Command A; ends with A = 0 for Confirmation, or -1 for Cancellation
 ROMB:6414 FE FF            cp   a,FF
 ROMB:6416 28 C0            jr   z,63D8         // Back to selection if Supply wasn't possible
 ROMB:6418 18 1C            jr   6436           // End immediately with A = 0 for confirmation
 ROMB:641A EF 0C 04 68                          // ($C9B0) = Unit Type of given unit, ($C9B1) = Unit Type of Loading unit for not Aircraft Carrier (no side for both), A = 6 for Aircraft Carrier Loading, 5 for non-Aircraft Carrier Loading, ($C9AF) = 6 if Loading unit is Aircraft Carrier
 ROMB:641E 3E 01            ld   a,01
 ROMB:6420 EA DE C9         ld   (C9DE),a
 ROMB:6423 3E 12            ld   a,12
 ROMB:6425 CD 83 62         call 6283           // Executes Unit Command A; ends with A = 0 for Confirmation, or -1 for Cancellation
 ROMB:6428 FE FF            cp   a,FF
 ROMB:642A 28 BD            jr   z,63E9         // Back to Commands if Supply was possible
 ROMB:642C 18 08            jr   6436           // End immediately with A = 0 for confirmation
 ROMB:642E FA DF C9         ld   a,(C9DF)
 ROMB:6431 EA D8 C9         ld   (C9D8),a
 ROMB:6434 3E FF            ld   a,FF
 ROMB:6436 C9               ret                 // Unload command as a whole; ends with A = 0 for confirmation, or -1 for full cancellation
 ROMB:6437 C5               push bc
 ROMB:6438 D5               push de
 ROMB:6439 3E C0            ld   a,C0
 ROMB:643B CD 82 4F         call 4F82           // Clears Command Menu data, prepares blank space command (A is first data tile of Commands)
 ROMB:643E FA E0 CC         ld   a,(CCE0)
 ROMB:6441 CB 7F            bit  7,a
 ROMB:6443 20 06            jr   nz,644B        // Won't establish commands if unit has already moved
 ROMB:6445 CD 96 60         call 6096           // Establishes Movement command if unit hasn't already moved; Zero Flag off instead if unit has moved
 ROMB:6448 CD C0 60         call 60C0           // Establishes Supply command if Supply is valid; Zero Flag off instead if Supply is invalid
 ROMB:644B D1               pop  de
 ROMB:644C C1               pop  bc
 ROMB:644D C9               ret                 // Establishes Unloading unit's base commands if Unloading unit hasn't moved yet
 ROMB:644E C5               push bc
 ROMB:644F FA D9 C9         ld   a,(C9D9)
 ROMB:6452 B8               cp   b
 ROMB:6453 20 0F            jr   nz,6464
 ROMB:6455 FA DA C9         ld   a,(C9DA)
 ROMB:6458 B9               cp   c
 ROMB:6459 20 09            jr   nz,6464
 ROMB:645B FA E0 CC         ld   a,(CCE0)
 ROMB:645E CB 47            bit  0,a
 ROMB:6460 28 0B            jr   z,646D         // End with A = 0 for unit not Loaded or moving
 ROMB:6462 18 0C            jr   6470           // End with A = 1 for unit Loaded and not moving
 ROMB:6464 CD 2A 47         call 472A           // A = Unit Type of occupying unit with bit 7 holding viable movement
 ROMB:6467 CB 7F            bit  7,a
 ROMB:6469 28 05            jr   z,6470
 ROMB:646B 18 00            jr   646D
 ROMB:646D AF               xor  a
 ROMB:646E 18 02            jr   6472
 ROMB:6470 3E 01            ld   a,01
 ROMB:6472 C1               pop  bc
 ROMB:6473 C9               ret                 // A = inverse flag for valid movement onto tile BC
 ROMB:6474 FA DD CC         ld   a,(CCDD)
 ROMB:6477 CB 3F            srl  a
 ROMB:6479 FE 04            cp   a,04
 ROMB:647B 30 09            jr   nc,6486        // End with A = 1 if unit isn't infantry
 ROMB:647D CD 70 47         call 4770           // A = Terrain Type
 ROMB:6480 CD 33 7D         call 7D33           // A = 0 for viable capture, 1 otherwise
 ROMB:6483 A7               and  a
 ROMB:6484 28 04            jr   z,648A         // End with A = 0 if capture valid
 ROMB:6486 3E 01            ld   a,01
 ROMB:6488 18 01            jr   648B
 ROMB:648A AF               xor  a
 ROMB:648B C9               ret                 // A = 0 if capture valid, 1 if not
 ROMB:648C 3E 00            ld   a,00           // Capture
 ROMB:648E EF 0C BB 66                          // Action Animation cutscenes play out where applicable
 ROMB:6492 FA E1 CC         ld   a,(CCE1)
 ROMB:6495 6F               ld   l,a
 ROMB:6496 26 00            ld   h,00
 ROMB:6498 FA D8 C9         ld   a,(C9D8)
 ROMB:649B EF 12 DB 40                          // EXP incremented by HP
 ROMB:649F FA 91 C9         ld   a,(C991)
 ROMB:64A2 47               ld   b,a
 ROMB:64A3 FA 92 C9         ld   a,(C992)
 ROMB:64A6 4F               ld   c,a
 ROMB:64A7 FA E1 CC         ld   a,(CCE1)
 ROMB:64AA 2F               cpl  
 ROMB:64AB 3C               inc  a              // A = HP * -1
 ROMB:64AC EF 0C F2 58                          // Show Property Strength update for given task on Property (A is increase amount)
 ROMB:64B0 A7               and  a              // A = New Property Strength
 ROMB:64B1 C2 1E 65         jp   nz,651E        // End with sound effect if Capture is incomplete
 ROMB:64B4 CD 70 47         call 4770           // A = Terrain Type
 ROMB:64B7 CD E7 41         call 41E7           // Decrements count of given property type
 ROMB:64BA CD 07 47         call 4707           // A = Terrain base ID
 ROMB:64BD F5               push af
 ROMB:64BE EF 0C AF 58                          // A = initial Property Strength
 ROMB:64C2 EF 0C 87 58                          // Establishes initial Property Strength
 ROMB:64C6 1E 00            ld   e,00
 ROMB:64C8 FA 33 C6         ld   a,(C633)
 ROMB:64CB E6 01            and  a,01
 ROMB:64CD 28 02            jr   z,64D1
 ROMB:64CF 1E 0B            ld   e,0B           // Active player's property tile set handled with E
 ROMB:64D1 F1               pop  af
 ROMB:64D2 57               ld   d,a            // D = Terrain base ID
 ROMB:64D3 83               add  e
 ROMB:64D4 CD DB 41         call 41DB           // Increments count of given property type
 ROMB:64D7 CD 76 47         call 4776           // Terrain on tile updated as given property type
 ROMB:64DA CD D1 43         call 43D1           // Establishes tile BC's entire graphics (done changing tile type)
 ROMB:64DD 7A               ld   a,d
 ROMB:64DE FE 01            cp   a,01           // Headquarters
 ROMB:64E0 28 18            jr   z,64FA
 ROMB:64E2 FE 02            cp   a,02           // City
 ROMB:64E4 28 18            jr   z,64FE
 ROMB:64E6 FE 04            cp   a,04           // Factory
 ROMB:64E8 28 18            jr   z,6502
 ROMB:64EA FE 06            cp   a,06           // Airport
 ROMB:64EC 28 18            jr   z,6506
 ROMB:64EE FE 08            cp   a,08           // Simple Airport
 ROMB:64F0 28 18            jr   z,650A
 ROMB:64F2 FE 09            cp   a,09           // Harbor
 ROMB:64F4 28 18            jr   z,650E
 ROMB:64F6 FE 0B            cp   a,0B           // Communication Tower
 ROMB:64F8 28 18            jr   z,6512
 ROMB:64FA 3E 0D            ld   a,0D
 ROMB:64FC 18 16            jr   6514           // HQ: 13
 ROMB:64FE 3E 01            ld   a,01
 ROMB:6500 18 12            jr   6514           // City: 1
 ROMB:6502 3E 11            ld   a,11
 ROMB:6504 18 0E            jr   6514           // Factory: 17
 ROMB:6506 3E 02            ld   a,02
 ROMB:6508 18 0A            jr   6514           // Airport: 2
 ROMB:650A 3E 04            ld   a,04
 ROMB:650C 18 06            jr   6514           // Simple Airport: 4
 ROMB:650E 3E 03            ld   a,03
 ROMB:6510 18 02            jr   6514           // Harbor: 3
 ROMB:6512 3E 12            ld   a,12           // Communication Tower: 18
 ROMB:6514 CD B5 51         call 51B5           // Handles Popup Message as a whole including momentary cursor disabling (A is Popup Message #)
 ROMB:6517 CD 2F 7C         call 7C2F           // Establishes income values
 ROMB:651A EF 11 5A 4D                          // Capture count incremented (Flag Medal)
 ROMB:651E 3E 11            ld   a,11
 ROMB:6520 CD 44 38         call 3844
 ROMB:6523 C9               ret                 // Capture process
 ROMB:6524 FA D9 C9         ld   a,(C9D9)
 ROMB:6527 47               ld   b,a
 ROMB:6528 FA DA C9         ld   a,(C9DA)
 ROMB:652B 4F               ld   c,a
 ROMB:652C FA DB C9         ld   a,(C9DB)
 ROMB:652F CD 40 47         call 4740           // Terrain tile updated with ($C9DB)
 ROMB:6532 FA DC C9         ld   a,(C9DC)
 ROMB:6535 CD 58 47         call 4758           // Unit tile updated with ($C9DC)
 ROMB:6538 CD D1 43         call 43D1           // Establishes tile BC's entire graphics
 ROMB:653B FA D8 C9         ld   a,(C9D8)
 ROMB:653E EF 12 5C 42                          // Handles destroyed unit's stats, along with any of their cargo's
 ROMB:6542 CD 69 68         call 6869           // Unit hidden from view of BC coordinates, allowing view of terrain tile
 ROMB:6545 3E 07            ld   a,07           // Dispose
 ROMB:6547 CD B5 51         call 51B5           // Handles Popup Message as a whole including momentary cursor disabling (A is Popup Message #)
 ROMB:654A 3E 05            ld   a,05           // Disposal sound
 ROMB:654C CD 44 38         call 3844
 ROMB:654F C9               ret                 // The Smite Tool's process fully handled
 ROMB:6550 3E 08            ld   a,08           // Standby
 ROMB:6552 CD B5 51         call 51B5           // Handles Popup Message as a whole including momentary cursor disabling (A is Popup Message #)
 ROMB:6555 3E 12            ld   a,12
 ROMB:6557 CD 44 38         call 3844
 ROMB:655A C9               ret                 // Standby Popup message and sound
 ROMB:655B CD 00 47         call 4700           // set 0,($D000 + ($C98D) * 16) WRAM bank 4 (deactivates Cursor Sprite)
 ROMB:655E CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMB:6561 3E 68            ld   a,68
 ROMB:6563 CD 22 48         call 4822           // Window scrolls up 4 pixels per frame from Y = 152 to Y = A (A must be a multiple of 4 to avoid an infinite loop error)
 ROMB:6566 C9               ret                 // Graphics transition to Window scrolling up to cover bottom 2.5 on-screen map tiles
 ROMB:6567 CD F9 46         call 46F9           // res 0,WRA4[$D000 + ($C98D) * 16]
 ROMB:656A CD 60 48         call 4860           // Shuts off Window Display, LCD STAT Interrupt, and LYC=LY Coincidence Interrupt
 ROMB:656D C9               ret                 // Restores cursor and shuts off window
 ROMB:656E C5               push bc
 ROMB:656F D5               push de
 ROMB:6570 E5               push hl
 ROMB:6571 21 10 67         ld   hl,6710
 ROMB:6574 3E 07            ld   a,07
 ROMB:6576 06 01            ld   b,01
 ROMB:6578 CD BC 06         call 06BC           // ($C518) to ($C51F) hold ($6710) to ($6717)
 ROMB:657B 01 00 80         ld   bc,8000
 ROMB:657E CD 03 07         call 0703           // Last BG Palette tables is updated
 ROMB:6581 21 F2 66         ld   hl,66F2        // Separator (4,34)
 ROMB:6584 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMB:6587 3E AE            ld   a,AE           // Heart
 ROMB:6589 01 21 04         ld   bc,0421
 ROMB:658C CD ED 34         call 34ED           // [$C300 + [$FFC8]] 3 byte holds: 1, B + C%8 * 32, 152 + C / 8, A; [$FFCA] incremented
 ROMB:658F 3E AF            ld   a,AF           // Boot
 ROMB:6591 01 21 08         ld   bc,0821
 ROMB:6594 CD ED 34         call 34ED           // [$C300 + [$FFC8]] 3 byte holds: 1, B + C%8 * 32, 152 + C / 8, A; [$FFCA] incremented
 ROMB:6597 3E B0            ld   a,B0           // Fuel Can
 ROMB:6599 01 21 0C         ld   bc,0C21
 ROMB:659C CD ED 34         call 34ED           // [$C300 + [$FFC8]] 3 byte holds: 1, B + C%8 * 32, 152 + C / 8, A; [$FFCA] incremented
 ROMB:659F 3E 52            ld   a,52           // "LV"
 ROMB:65A1 01 21 10         ld   bc,1021
 ROMB:65A4 CD ED 34         call 34ED           // [$C300 + [$FFC8]] 3 byte holds: 1, B + C%8 * 32, 152 + C / 8, A; [$FFCA] incremented
 ROMB:65A7 FA DD CC         ld   a,(CCDD)
 ROMB:65AA 47               ld   b,a
 ROMB:65AB 3E 00            ld   a,00
 ROMB:65AD E0 83            ld   (ff00+83),a
 ROMB:65AF E0 4F            ld   (ff00+4F),a    // VRA0
 ROMB:65B1 21 C0 8F         ld   hl,8FC0
 ROMB:65B4 78               ld   a,b
 ROMB:65B5 C6 34            add  a,34
 ROMB:65B7 CD 77 76         call 7677           // (HL ~ HL+63) holds unit's map graphics
 ROMB:65BA 21 21 9C         ld   hl,9C21        // 1,33
 ROMB:65BD 78               ld   a,b
 ROMB:65BE C6 34            add  a,34
 ROMB:65C0 57               ld   d,a
 ROMB:65C1 06 00            ld   b,00
 ROMB:65C3 0E 03            ld   c,03
 ROMB:65C5 3E FC            ld   a,FC
 ROMB:65C7 CD CF 76         call 76CF           // Establishes terrain graphics at HL (A is tile location on character base, B is palette's VRAM bank, C is first palette + 3, D is terrain type)
 ROMB:65CA FA DE CC         ld   a,(CCDE)
 ROMB:65CD 47               ld   b,a
 ROMB:65CE FA DF CC         ld   a,(CCDF)
 ROMB:65D1 4F               ld   c,a
 ROMB:65D2 CD 70 47         call 4770           // A = unit's Terrain Type
 ROMB:65D5 47               ld   b,a            // B = unit's Terrain Type
 ROMB:65D6 3E 00            ld   a,00
 ROMB:65D8 E0 83            ld   (ff00+83),a
 ROMB:65DA E0 4F            ld   (ff00+4F),a    // VRA0
 ROMB:65DC 21 40 8C         ld   hl,8C40
 ROMB:65DF 78               ld   a,b
 ROMB:65E0 CD 77 76         call 7677           // (HL ~ HL+63) holds terrain's map graphics
 ROMB:65E3 21 61 9C         ld   hl,9C61        // 1,35
 ROMB:65E6 50               ld   d,b
 ROMB:65E7 01 03 00         ld   bc,0003
 ROMB:65EA 3E C4            ld   a,C4
 ROMB:65EC CD CF 76         call 76CF           // Establishes terrain graphics at HL (A is tile location on character base, B is palette's VRAM bank, C is first palette + 3, D is terrain type)
 ROMB:65EF CD BF 66         call 66BF           // Sets "Transport/End Turn" icon of selected unit's stats window
 ROMB:65F2 FA DD CC         ld   a,(CCDD)
 ROMB:65F5 EF 12 4F 40                          // ($CD28) to ($CD32) holds unit type's name
 ROMB:65F9 21 28 CD         ld   hl,CD28
 ROMB:65FC 01 20 04         ld   bc,0420        // Unit name coordinates
 ROMB:65FF CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 ROMB:6602 FA DD CC         ld   a,(CCDD)
 ROMB:6605 0E 0D            ld   c,0D
 ROMB:6607 EF 12 37 40                          // Transport Capacity
 ROMB:660B A7               and  a
 ROMB:660C 28 25            jr   z,6633
 ROMB:660E 01 20 12         ld   bc,1220
 ROMB:6611 16 01            ld   d,01
 ROMB:6613 CD 2A 79         call 792A           // VRA0($9C12) holds Transport Capacity
 ROMB:6616 FA E2 CC         ld   a,(CCE2)       // A = Load Count
 ROMB:6619 01 20 10         ld   bc,1020
 ROMB:661C 16 01            ld   d,01
 ROMB:661E CD 2A 79         call 792A           // VRA0($9C10) holds Load Count
 ROMB:6621 3E B5            ld   a,B5           // "Transport" icon
 ROMB:6623 01 20 0F         ld   bc,0F20
 ROMB:6626 CD ED 34         call 34ED           // [$C300 + [$FFC8]] 3 byte holds: 1, $0F, $9C, 181; [$FFCA] incremented
 ROMB:6629 3E A6            ld   a,A6           // Slash icon
 ROMB:662B 01 20 11         ld   bc,1120
 ROMB:662E CD ED 34         call 34ED           // [$C300 + [$FFC8]] 3 byte holds: 1, $11, $9C, 166; [$FFCA] incremented
 ROMB:6631 18 06            jr   6639
 ROMB:6633 21 04 67         ld   hl,6704        // Blanks the Transport information if transporting can't be done by the unit type
 ROMB:6636 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMB:6639 CD 2E 35         call 352E           // Text catchup
 ROMB:663C FA D8 C9         ld   a,(C9D8)
 ROMB:663F EF 12 62 48                          // Establishes Unit's weapons' stats in ($CCED) to ($CD08)
 ROMB:6643 21 ED CC         ld   hl,CCED        // Primary Weapon's name
 ROMB:6646 01 23 04         ld   bc,0423
 ROMB:6649 CD 3A 67         call 673A           // Handles text of primary weapon's line on selected unit's stats window
 ROMB:664C 21 FB CC         ld   hl,CCFB        // Secondary Weapon's name
 ROMB:664F 01 24 04         ld   bc,0424
 ROMB:6652 CD 3A 67         call 673A           // Handles text of secondary weapon's line on selected unit's stats window
 ROMB:6655 FA E1 CC         ld   a,(CCE1)
 ROMB:6658 01 21 05         ld   bc,0521
 ROMB:665B 16 02            ld   d,02
 ROMB:665D CD 2A 79         call 792A           // VRA0($9C25) holds HP
 ROMB:6660 21 36 67         ld   hl,6736        // HP Blue
 ROMB:6663 FA E1 CC         ld   a,(CCE1)
 ROMB:6666 FE 04            cp   a,04
 ROMB:6668 30 03            jr   nc,666D
 ROMB:666A 21 32 67         ld   hl,6732        // HP Red for below 4 HPs
 ROMB:666D CD 20 67         call 6720           // Sets Attribute Text from HL at coordinates 1 left of BC
 ROMB:6670 FA DD CC         ld   a,(CCDD)
 ROMB:6673 0E 0C            ld   c,0C
 ROMB:6675 EF 12 37 40                          // Movement Power
 ROMB:6679 01 21 09         ld   bc,0921
 ROMB:667C 16 02            ld   d,02
 ROMB:667E CD 2A 79         call 792A           // VRA0($9C29) holds Movement Power
 ROMB:6681 FA E4 CC         ld   a,(CCE4)
 ROMB:6684 01 21 0D         ld   bc,0D21
 ROMB:6687 16 02            ld   d,02
 ROMB:6689 CD 2A 79         call 792A           // VRA0($9C2D) holds Fuel
 ROMB:668C 21 36 67         ld   hl,6736        // Fuel Blue
 ROMB:668F FA E4 CC         ld   a,(CCE4)
 ROMB:6692 FE 15            cp   a,15
 ROMB:6694 30 03            jr   nc,6699
 ROMB:6696 21 32 67         ld   hl,6732        // Fuel Red for 20 or less
 ROMB:6699 CD 20 67         call 6720           // Sets Attribute Text from HL at coordinates 1 left of BC
 ROMB:669C FA E7 CC         ld   a,(CCE7)
 ROMB:669F 5F               ld   e,a
 ROMB:66A0 FA E8 CC         ld   a,(CCE8)
 ROMB:66A3 57               ld   d,a
 ROMB:66A4 01 64 00         ld   bc,0064
 ROMB:66A7 CD 21 2A         call 2A21           // DE holds Level, BC holds surplus EXP
 ROMB:66AA 7B               ld   a,e
 ROMB:66AB 21 0B 67         ld   hl,670B
 ROMB:66AE CD BC 29         call 29BC           // HL += A
 ROMB:66B1 7E               ld   a,(hl)         // Level's Rank Letter
 ROMB:66B2 01 21 11         ld   bc,1121
 ROMB:66B5 CD ED 34         call 34ED           // [$C300 + [$FFC8]] 3 byte holds: 1, $31, $9C, Level's Rank; [$FFCA] incremented
 ROMB:66B8 CD 2E 35         call 352E           // Text catchup
 ROMB:66BB E1               pop  hl
 ROMB:66BC D1               pop  de
 ROMB:66BD C1               pop  bc
 ROMB:66BE C9               ret                 // Establishes all text of selected unit's stats window
 ROMB:66BF C5               push bc
 ROMB:66C0 06 00            ld   b,00
 ROMB:66C2 FA E2 CC         ld   a,(CCE2)       // A = Load Count
 ROMB:66C5 A7               and  a
 ROMB:66C6 28 01            jr   z,66C9
 ROMB:66C8 04               inc  b              // Handles Transport flag
 ROMB:66C9 FA E0 CC         ld   a,(CCE0)
 ROMB:66CC CB 7F            bit  7,a
 ROMB:66CE 28 02            jr   z,66D2
 ROMB:66D0 04               inc  b
 ROMB:66D1 04               inc  b              // Handles End Turn flag
 ROMB:66D2 78               ld   a,b
 ROMB:66D3 A7               and  a
 ROMB:66D4 28 1A            jr   z,66F0         // Ends immediately if neither flag is set
 ROMB:66D6 05               dec  b
 ROMB:66D7 3E B5            ld   a,B5
 ROMB:66D9 80               add  b
 ROMB:66DA 01 22 02         ld   bc,0222
 ROMB:66DD CD ED 34         call 34ED           // [$C300 + [$FFC8]] 3 byte holds: 1, $42, $9C, A; [$FFCA] incremented
 ROMB:66E0 3E 01            ld   a,01
 ROMB:66E2 EA CB FF         ld   (FFCB),a
 ROMB:66E5 AF               xor  a
 ROMB:66E6 01 22 02         ld   bc,0222
 ROMB:66E9 CD ED 34         call 34ED           // [$C300 + [$FFC8]] 3 byte holds: 1, $42, $1C, 0; [$FFCA] incremented
 ROMB:66EC AF               xor  a
 ROMB:66ED EA CB FF         ld   (FFCB),a
 ROMB:66F0 C1               pop  bc
 ROMB:66F1 C9               ret                 // Sets "Transport/End Turn" icon of selected unit's stats window

 ROMB:66F2 04 22
 ROMB:66F4 AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA 00

 ROMB:6704 0F 20
 ROMB:6706 80 80 80 80 00

 ROMB:670B 8E               adc  (hl)
 ROMB:670C 8D               adc  l
 ROMB:670D 8C               adc  h
 ROMB:670E 8B               adc  e
 ROMB:670F 9D               sbc  l

 ROMB:6710 FF 7F 1B 00 FF 7F 9F 41
 ROMB:6718 00 00 FF 1C FF 7F 00 00

 ROMB:6720 F5               push af
 ROMB:6721 C5               push bc
 ROMB:6722 05               dec  b
 ROMB:6723 3E 01            ld   a,01
 ROMB:6725 EA CB FF         ld   (FFCB),a
 ROMB:6728 CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 ROMB:672B AF               xor  a
 ROMB:672C EA CB FF         ld   (FFCB),a
 ROMB:672F C1               pop  bc
 ROMB:6730 F1               pop  af
 ROMB:6731 C9               ret                 // Sets Attribute Text from HL at coordinates 1 left of BC

 ROMB:6732 07 07 07 00
 ROMB:6736 10 10 10 00

 ROMB:673A C5               push bc
 ROMB:673B D5               push de
 ROMB:673C E5               push hl
 ROMB:673D 7E               ld   a,(hl)
 ROMB:673E FE 80            cp   a,80
 ROMB:6740 20 08            jr   nz,674A
 ROMB:6742 21 AC 67         ld   hl,67AC        // Full blank if no weapon
 ROMB:6745 CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 ROMB:6748 18 5E            jr   67A8           // End immediately if no weapon
 ROMB:674A C5               push bc
 ROMB:674B E5               push hl
 ROMB:674C 3E 0A            ld   a,0A
 ROMB:674E CD BC 29         call 29BC           // HL += A
 ROMB:6751 7E               ld   a,(hl)
 ROMB:6752 21 D7 67         ld   hl,67D7        // All Blue
 ROMB:6755 A7               and  a
 ROMB:6756 20 03            jr   nz,675B        // Skips next line for any Ammo left
 ROMB:6758 21 CB 67         ld   hl,67CB        // All Red
 ROMB:675B CD BC 67         call 67BC           // Sets Attribute Text from HL at coordinates BC
 ROMB:675E E1               pop  hl
 ROMB:675F C1               pop  bc
 ROMB:6760 CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 ROMB:6763 3E 0A            ld   a,0A
 ROMB:6765 CD BC 29         call 29BC           // HL += A
 ROMB:6768 78               ld   a,b
 ROMB:6769 C6 0A            add  a,0A
 ROMB:676B 47               ld   b,a
 ROMB:676C 05               dec  b
 ROMB:676D 3E A7            ld   a,A7           // Dash
 ROMB:676F CD ED 34         call 34ED           // [$C300 + [$FFC8]] 3 byte holds: 1, B + C%8 * 32, 152 or 24 + C / 8, A; [$FFCA] incremented (152 or 24 + C / 8 is 24 + C / 8 if [$FFCB] != 0)
 ROMB:6772 04               inc  b
 ROMB:6773 2A               ldi  a,(hl)
 ROMB:6774 C6 81            add  a,81           // Ammo amount
 ROMB:6776 CD ED 34         call 34ED           // [$C300 + [$FFC8]] 3 byte holds: 1, B + C%8 * 32, 152 or 24 + C / 8, A; [$FFCA] incremented (152 or 24 + C / 8 is 24 + C / 8 if [$FFCB] != 0)
 ROMB:6779 04               inc  b
 ROMB:677A 04               inc  b
 ROMB:677B 3E B3            ld   a,B3           // (R)ange
 ROMB:677D CD ED 34         call 34ED           // [$C300 + [$FFC8]] 3 byte holds: 1, B + C%8 * 32, 152 or 24 + C / 8, A; [$FFCA] incremented (152 or 24 + C / 8 is 24 + C / 8 if [$FFCB] != 0)
 ROMB:6780 04               inc  b
 ROMB:6781 2A               ldi  a,(hl)
 ROMB:6782 5F               ld   e,a
 ROMB:6783 C6 81            add  a,81           // Minimum Range
 ROMB:6785 CD ED 34         call 34ED           // [$C300 + [$FFC8]] 3 byte holds: 1, B + C%8 * 32, 152 or 24 + C / 8, A; [$FFCA] incremented (152 or 24 + C / 8 is 24 + C / 8 if [$FFCB] != 0)
 ROMB:6788 2A               ldi  a,(hl)
 ROMB:6789 BB               cp   e
 ROMB:678A 28 10            jr   z,679C         // Branches if Maximum Range is same as Minimum Range
 ROMB:678C 5F               ld   e,a
 ROMB:678D 04               inc  b
 ROMB:678E 3E A7            ld   a,A7           // Dash
 ROMB:6790 CD ED 34         call 34ED           // [$C300 + [$FFC8]] 3 byte holds: 1, B + C%8 * 32, 152 or 24 + C / 8, A; [$FFCA] incremented (152 or 24 + C / 8 is 24 + C / 8 if [$FFCB] != 0)
 ROMB:6793 04               inc  b
 ROMB:6794 7B               ld   a,e
 ROMB:6795 C6 81            add  a,81           // Maximum Range
 ROMB:6797 CD ED 34         call 34ED           // [$C300 + [$FFC8]] 3 byte holds: 1, B + C%8 * 32, 152 or 24 + C / 8, A; [$FFCA] incremented (152 or 24 + C / 8 is 24 + C / 8 if [$FFCB] != 0)
 ROMB:679A 18 0C            jr   67A8           // Finished adding in Maximum Range
 ROMB:679C 04               inc  b
 ROMB:679D 3E 80            ld   a,80           // Blank
 ROMB:679F CD ED 34         call 34ED           // [$C300 + [$FFC8]] 3 byte holds: 1, B + C%8 * 32, 152 or 24 + C / 8, A; [$FFCA] incremented (152 or 24 + C / 8 is 24 + C / 8 if [$FFCB] != 0)
 ROMB:67A2 04               inc  b
 ROMB:67A3 3E 80            ld   a,80           // Blank
 ROMB:67A5 CD ED 34         call 34ED           // [$C300 + [$FFC8]] 3 byte holds: 1, B + C%8 * 32, 152 or 24 + C / 8, A; [$FFCA] incremented (152 or 24 + C / 8 is 24 + C / 8 if [$FFCB] != 0)
 ROMB:67A8 E1               pop  hl
 ROMB:67A9 D1               pop  de
 ROMB:67AA C1               pop  bc
 ROMB:67AB C9               ret                 // Handles text of given weapon's line on selected unit's stats window

 ROMB:67AC 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 00

 ROMB:67BC F5               push af
 ROMB:67BD 3E 01            ld   a,01
 ROMB:67BF EA CB FF         ld   (FFCB),a
 ROMB:67C2 CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 ROMB:67C5 AF               xor  a
 ROMB:67C6 EA CB FF         ld   (FFCB),a
 ROMB:67C9 F1               pop  af
 ROMB:67CA C9               ret                 // Sets Attribute Text from HL at coordinates BC

 ROMB:67CB 07 07 07 07 07 07 07 07 07 07 07 00
 ROMB:67D7 10 10 10 10 10 10 10 10 10 10 10 00

 ROMB:67E3 E5               push hl
 ROMB:67E4 EA E3 C9         ld   (C9E3),a
 ROMB:67E7 78               ld   a,b
 ROMB:67E8 EA E1 C9         ld   (C9E1),a
 ROMB:67EB 79               ld   a,c
 ROMB:67EC EA E2 C9         ld   (C9E2),a
 ROMB:67EF CD 14 47         call 4714           // A = Terrain Type (non-ownsership)
 ROMB:67F2 EA E4 C9         ld   (C9E4),a
 ROMB:67F5 AF               xor  a
 ROMB:67F6 EA E0 C9         ld   (C9E0),a
 ROMB:67F9 E1               pop  hl
 ROMB:67FA C9               ret                 // ($C9E0) 5 byte holds in order: 0, Coordinates, Unit Type, Terrain Type (non-ownership)
 ROMB:67FB C5               push bc
 ROMB:67FC FA E1 C9         ld   a,(C9E1)
 ROMB:67FF 47               ld   b,a
 ROMB:6800 FA E2 C9         ld   a,(C9E2)
 ROMB:6803 4F               ld   c,a
 ROMB:6804 FA E3 C9         ld   a,(C9E3)
 ROMB:6807 CD 98 47         call 4798           // Unit tile ($C9E1) updated with Unit ($C9E3)
 ROMB:680A FA E4 C9         ld   a,(C9E4)
 ROMB:680D CD 40 47         call 4740           // Terrain tile updated with ($C9E4)
 ROMB:6810 CD D1 43         call 43D1           // Establishes tile BC's entire graphics
 ROMB:6813 C1               pop  bc
 ROMB:6814 C9               ret                 // Establishes tile ($C9E1)'s entire graphics
 ROMB:6815 FA E0 C9         ld   a,(C9E0)
 ROMB:6818 3C               inc  a
 ROMB:6819 EA E0 C9         ld   (C9E0),a
 ROMB:681C FE 0F            cp   a,0F
 ROMB:681E 28 0D            jr   z,682D         // Jumps if at 15 (starts hiding unit at frame 15)
 ROMB:6820 FE 1E            cp   a,1E
 ROMB:6822 20 16            jr   nz,683A        // Only continues if at 30
 ROMB:6824 AF               xor  a
 ROMB:6825 EA E0 C9         ld   (C9E0),a       // Timer reset
 ROMB:6828 CD FB 67         call 67FB           // Establishes tile ($C9E1)'s entire graphics
 ROMB:682B 18 0D            jr   683A
 ROMB:682D FA E1 C9         ld   a,(C9E1)
 ROMB:6830 47               ld   b,a
 ROMB:6831 FA E2 C9         ld   a,(C9E2)
 ROMB:6834 4F               ld   c,a
 ROMB:6835 CD 69 68         call 6869           // Unit hidden from view of BC coordinates, allowing view of terrain tile
 ROMB:6838 18 00            jr   683A
 ROMB:683A C9               ret                 // Flashing tile's graphics updated every 15 frames
 ROMB:683B C5               push bc
 ROMB:683C FA DE CC         ld   a,(CCDE)
 ROMB:683F 47               ld   b,a
 ROMB:6840 FA DF CC         ld   a,(CCDF)
 ROMB:6843 4F               ld   c,a
 ROMB:6844 CD E1 47         call 47E1           // Tile on WRAM Bank #1 has Loaded and End Turn Flags cleared, Viable Movement Flag cleared from WRAM Bank #2 equivalent
 ROMB:6847 FA DD CC         ld   a,(CCDD)
 ROMB:684A CD 98 47         call 4798           // Unit tile updated with Unit Type
 ROMB:684D FA E0 CC         ld   a,(CCE0)
 ROMB:6850 CB 7F            bit  7,a
 ROMB:6852 28 05            jr   z,6859         // Skips next 2 lines if unit can still move
 ROMB:6854 3E 02            ld   a,02
 ROMB:6856 CD 9C 47         call 479C           // set 7,($D000 + B + C * 64) WRAM Bank 1 (Turn Ended)
 ROMB:6859 FA E2 CC         ld   a,(CCE2)       // A = Load Count
 ROMB:685C A7               and  a
 ROMB:685D 28 05            jr   z,6864         // Skips next 2 lines if selected unit isn't carrying anything
 ROMB:685F 3E 01            ld   a,01
 ROMB:6861 CD 9C 47         call 479C           // set 6,($D000 + B + C * 64) WRAM Bank 1 (Transport)
 ROMB:6864 CD D1 43         call 43D1           // Establishes selected unit's tile's entire graphics, also sets up Unit Type (WRA2) and Transport/End Turn Flags (WRA1) for tile
 ROMB:6867 C1               pop  bc
 ROMB:6868 C9               ret  
 ROMB:6869 AF               xor  a
 ROMB:686A CD 98 47         call 4798           // Unit tile updated with 0
 ROMB:686D CD E1 47         call 47E1           // Tile on WRAM Bank #1 has Loaded and End Turn Flags cleared, Viable Movement Flag cleared from WRAM Bank #2 equivalent
 ROMB:6870 CD D1 43         call 43D1           // Establishes tile BC's entire graphics
 ROMB:6873 C9               ret                 // Unit hidden from view of BC coordinates, allowing view of terrain tile
 ROMB:6874 C5               push bc
 ROMB:6875 47               ld   b,a
 ROMB:6876 FA E0 CC         ld   a,(CCE0)
 ROMB:6879 CB 47            bit  0,a
 ROMB:687B 20 05            jr   nz,6882        // Jumps if unit is being transported
 ROMB:687D CD 3B 68         call 683B           // Establishes selected unit's tile's entire graphics, also sets up Unit Type (WRA2) and Transport/End Turn Flags (WRA1) for tile
 ROMB:6880 18 0F            jr   6891           // Ends immediately
 ROMB:6882 FA E3 CC         ld   a,(CCE3)
 ROMB:6885 EF 12 06 41                          // ($CCDD) to ($CCEC) holds Loading unit's stats
 ROMB:6889 CD 3B 68         call 683B           // Establishes selected unit's tile's entire graphics, also sets up Unit Type (WRA2) and Transport/End Turn Flags (WRA1) for tile
 ROMB:688C 78               ld   a,b
 ROMB:688D EF 12 06 41                          // ($CCDD) to ($CCEC) holds base unit's stats
 ROMB:6891 C1               pop  bc
 ROMB:6892 C9               ret                 // Updates any parent unit's stats as necessary, also does finishing tile graphics updating (A is would-be child unit #)
 ROMB:6893 EF 12 06 41                          // ($CCDD) to ($CCEC) holds unit's stats
 ROMB:6897 CD 3B 68         call 683B           // Establishes selected unit's tile's entire graphics, also sets up Unit Type (WRA2) and Transport/End Turn Flags (WRA1) for tile
 ROMB:689A C9               ret                 // Sets up tile's graphics with Unit A
 ROMB:689B C5               push bc
 ROMB:689C D5               push de
 ROMB:689D 57               ld   d,a
 ROMB:689E 7A               ld   a,d
 ROMB:689F 0E 03            ld   c,03
 ROMB:68A1 EF 12 66 40                          // A = Status Flags
 ROMB:68A5 CB 47            bit  0,a
 ROMB:68A7 28 08            jr   z,68B1         // Jump if not Loaded
 ROMB:68A9 7A               ld   a,d
 ROMB:68AA 0E 06            ld   c,06
 ROMB:68AC EF 12 66 40                          // A = Loading Unit's #
 ROMB:68B0 57               ld   d,a
 ROMB:68B1 7A               ld   a,d            // Meets back here; D is either original Unit or Loading Unit
 ROMB:68B2 0E 00            ld   c,00
 ROMB:68B4 EF 12 66 40                          // A = Unit's Type
 ROMB:68B8 F5               push af
 ROMB:68B9 D5               push de
 ROMB:68BA 7A               ld   a,d
 ROMB:68BB 0E 01            ld   c,01
 ROMB:68BD EF 12 83 40                          
 ROMB:68C1 43               ld   b,e
 ROMB:68C2 4A               ld   c,d            // BC holds coordinates
 ROMB:68C3 D1               pop  de
 ROMB:68C4 F1               pop  af
 ROMB:68C5 CD 98 47         call 4798           // Unit tile updated with Unit Type
 ROMB:68C8 CD E1 47         call 47E1           // Tile on WRAM Bank #1 has Loaded and End Turn Flags cleared, Viable Movement Flag cleared from WRAM Bank #2 equivalent
 ROMB:68CB C5               push bc
 ROMB:68CC 7A               ld   a,d
 ROMB:68CD 0E 03            ld   c,03
 ROMB:68CF EF 12 66 40                          
 ROMB:68D3 C1               pop  bc
 ROMB:68D4 CB 7F            bit  7,a
 ROMB:68D6 28 05            jr   z,68DD         // If not moved, skip this step
 ROMB:68D8 3E 02            ld   a,02
 ROMB:68DA CD 9C 47         call 479C           // set 7,($D000 + B + C * 64) WRAM Bank 1 (done if unit has moved)
 ROMB:68DD C5               push bc
 ROMB:68DE 7A               ld   a,d
 ROMB:68DF 0E 05            ld   c,05
 ROMB:68E1 EF 12 66 40                          // A = Load count
 ROMB:68E5 C1               pop  bc
 ROMB:68E6 A7               and  a
 ROMB:68E7 28 05            jr   z,68EE
 ROMB:68E9 3E 01            ld   a,01
 ROMB:68EB CD 9C 47         call 479C           // set 6,($D000 + B + C * 64) WRAM Bank 1 (done if unit has Loaded units)
 ROMB:68EE CD D1 43         call 43D1           // Establishes tile BC's entire graphics
 ROMB:68F1 D1               pop  de
 ROMB:68F2 C1               pop  bc
 ROMB:68F3 C9               ret                 // Updates tile graphics of unit A's location
 ROMB:68F4 C5               push bc
 ROMB:68F5 D5               push de
 ROMB:68F6 E5               push hl
 ROMB:68F7 FA E0 CC         ld   a,(CCE0)
 ROMB:68FA CB 47            bit  0,a
 ROMB:68FC 28 29            jr   z,6927         // If unit isn't Loaded, skip stuff involving Unloading
 ROMB:68FE CB 87            res  0,a
 ROMB:6900 EA E0 CC         ld   (CCE0),a
 ROMB:6903 FA E3 CC         ld   a,(CCE3)       // Transport unit's #
 ROMB:6906 0E 05            ld   c,05
 ROMB:6908 EF 12 66 40
 ROMB:690C 3D               dec  a              // A = New Load Count
 ROMB:690D 47               ld   b,a            // B = New Load Count
 ROMB:690E FA E3 CC         ld   a,(CCE3)
 ROMB:6911 EF 12 A1 40                          // Load Count decremented
 ROMB:6915 FA D9 C9         ld   a,(C9D9)
 ROMB:6918 47               ld   b,a
 ROMB:6919 FA DA C9         ld   a,(C9DA)
 ROMB:691C 4F               ld   c,a
 ROMB:691D EF 12 4E 41                          // A = unit number of primary selected unit
 ROMB:6921 CD 9B 68         call 689B           // Updates tile graphics of unit A's location
 ROMB:6924 CD D1 43         call 43D1           // Establishes tile BC's entire graphics
 ROMB:6927 FA E0 CC         ld   a,(CCE0)       // Meets back here after Unloading skip
 ROMB:692A CB FF            set  7,a
 ROMB:692C EA E0 CC         ld   (CCE0),a
 ROMB:692F FA D8 C9         ld   a,(C9D8)
 ROMB:6932 EF 12 2B 41                          // Unit's stats now holds ($CCDD) to ($CCEC)
 ROMB:6936 CD 3B 68         call 683B           // Establishes selected unit's tile's entire graphics, also sets up Unit Type (WRA2) and Transport/End Turn Flags (WRA1) for tile
 ROMB:6939 E1               pop  hl
 ROMB:693A D1               pop  de
 ROMB:693B C1               pop  bc
 ROMB:693C C9               ret                 // Updates the graphics of tiles BC and the original starting tile
 ROMB:693D C5               push bc
 ROMB:693E D5               push de
 ROMB:693F 3E FF            ld   a,FF
 ROMB:6941 EA E6 C9         ld   (C9E6),a
 ROMB:6944 16 32            ld   d,32
 ROMB:6946 1E 00            ld   e,00
 ROMB:6948 FA D8 C9         ld   a,(C9D8)
 ROMB:694B FE 32            cp   a,32
 ROMB:694D 38 02            jr   c,6951
 ROMB:694F 1E 32            ld   e,32
 ROMB:6951 7B               ld   a,e            // Loop begins here
 ROMB:6952 EF 12 F5 40                          // A = Unit's EXP / 100
 ROMB:6956 47               ld   b,a            // B = Unit's EXP / 100
 ROMB:6957 7B               ld   a,e
 ROMB:6958 CD 69 69         call 6969           // A = Unit #, discounting country
 ROMB:695B 21 E8 C9         ld   hl,C9E8
 ROMB:695E CD BC 29         call 29BC
 ROMB:6961 70               ld   (hl),b         // ($C9E8) to ($CA19) holds army's Level values
 ROMB:6962 1C               inc  e
 ROMB:6963 15               dec  d
 ROMB:6964 20 EB            jr   nz,6951
 ROMB:6966 D1               pop  de
 ROMB:6967 C1               pop  bc
 ROMB:6968 C9               ret                 // ($C9E8) to ($CA19) holds army's Level values
 ROMB:6969 F5               push af
 ROMB:696A FA D8 C9         ld   a,(C9D8)
 ROMB:696D FE 32            cp   a,32
 ROMB:696F 30 02            jr   nc,6973
 ROMB:6971 F1               pop  af
 ROMB:6972 C9               ret
 ROMB:6973 F1               pop  af
 ROMB:6974 D6 32            sub  a,32
 ROMB:6976 C9               ret                 // A = Unit #, discounting country
 ROMB:6977 16 32            ld   d,32
 ROMB:6979 1E 00            ld   e,00
 ROMB:697B FA D8 C9         ld   a,(C9D8)
 ROMB:697E FE 32            cp   a,32
 ROMB:6980 38 02            jr   c,6984
 ROMB:6982 1E 32            ld   e,32
 ROMB:6984 7B               ld   a,e            // Loop begins here
 ROMB:6985 0E 00            ld   c,00
 ROMB:6987 EF 12 66 40                          
 ROMB:698B A7               and  a
 ROMB:698C 28 23            jr   z,69B1         // End cycle if unit doesn't exist
 ROMB:698E 7B               ld   a,e
 ROMB:698F EF 12 F5 40                          
 ROMB:6993 47               ld   b,a            // B = Level
 ROMB:6994 7B               ld   a,e
 ROMB:6995 CD 69 69         call 6969           // A = Unit #, discounting country
 ROMB:6998 21 E8 C9         ld   hl,C9E8
 ROMB:699B CD BC 29         call 29BC           // HL += A
 ROMB:699E 78               ld   a,b
 ROMB:699F BE               cp   (hl)
 ROMB:69A0 28 0F            jr   z,69B1         // Loop ends early if Level is unchanged
 ROMB:69A2 D5               push de
 ROMB:69A3 7B               ld   a,e
 ROMB:69A4 0E 01            ld   c,01
 ROMB:69A6 EF 12 83 40                          
 ROMB:69AA 43               ld   b,e
 ROMB:69AB 4A               ld   c,d            // BC holds given unit's coordinates
 ROMB:69AC D1               pop  de
 ROMB:69AD EF 0C 71 5E                          // "Level Up!" Sprite animation
 ROMB:69B1 1C               inc  e
 ROMB:69B2 15               dec  d
 ROMB:69B3 20 CF            jr   nz,6984
 ROMB:69B5 FA E6 C9         ld   a,(C9E6)
 ROMB:69B8 FE FF            cp   a,FF
 ROMB:69BA 28 29            jr   z,69E5         // End immediately if no combat happened
 ROMB:69BC FA E6 C9         ld   a,(C9E6)
 ROMB:69BF 0E 00            ld   c,00
 ROMB:69C1 EF 12 66 40                          
 ROMB:69C5 A7               and  a
 ROMB:69C6 28 1D            jr   z,69E5         // End immediately with A = 0 if target was destroyed
 ROMB:69C8 FA E6 C9         ld   a,(C9E6)
 ROMB:69CB EF 12 F5 40                          
 ROMB:69CF 6F               ld   l,a            // L = Level
 ROMB:69D0 FA E7 C9         ld   a,(C9E7)
 ROMB:69D3 BD               cp   l              // Did target Level up?
 ROMB:69D4 28 0F            jr   z,69E5         // End immediately if target didn't Level up
 ROMB:69D6 FA E6 C9         ld   a,(C9E6)
 ROMB:69D9 0E 01            ld   c,01
 ROMB:69DB EF 12 83 40                          
 ROMB:69DF 43               ld   b,e
 ROMB:69E0 4A               ld   c,d            // BC holds target's coordinates
 ROMB:69E1 EF 0C 71 5E                          // "Level Up!" Sprite animation
 ROMB:69E5 C9               ret                 // Show any Level Ups resulting from given action
 ROMB:69E6 CD F3 04         call 04F3           // Shuts off LCD Display if necessary
 ROMB:69E9 CD 02 0F         call 0F02           // Empties ($9800) to ($9BFF) in both VRAM banks
 ROMB:69EC CD 00 40         call 4000           // Sets up graphics holding and palettes for the map where gameplay takes place
 ROMB:69EF CD C1 45         call 45C1           // Establishes cursor's overall coordinates and then cursor's sprite graphics location center
 ROMB:69F2 CD 8A 42         call 428A           // Establishes all on-screen tiles' entire graphics
 ROMB:69F5 CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 ROMB:69F8 AF               xor  a
 ROMB:69F9 EA 92 CA         ld   (CA92),a
 ROMB:69FC EA 93 CA         ld   (CA93),a
 ROMB:69FF EA 94 CA         ld   (CA94),a
 ROMB:6A02 EA 95 CA         ld   (CA95),a
 ROMB:6A05 EA 96 CA         ld   (CA96),a
 ROMB:6A08 EA A1 C9         ld   (C9A1),a
 ROMB:6A0B CB C7            set  0,a
 ROMB:6A0D E0 B1            ld   (ff00+B1),a
 ROMB:6A0F EF 0D 76 67                          // Sets current phase music
 ROMB:6A13 06 00            ld   b,00
 ROMB:6A15 FA 33 C6         ld   a,(C633)
 ROMB:6A18 E6 01            and  a,01
 ROMB:6A1A 28 02            jr   z,6A1E
 ROMB:6A1C 06 32            ld   b,32
 ROMB:6A1E 78               ld   a,b            // A = Active player's first unit #
 ROMB:6A1F EA 99 CA         ld   (CA99),a       // ($CA99) = Active player's first unit #
 ROMB:6A22 C9               ret                 // Reestablishes map graphics
 ROMB:6A23 AF               xor  a
 ROMB:6A24 06 10            ld   b,10
 ROMB:6A26 21 86 6A         ld   hl,6A86
 ROMB:6A29 CD BC 06         call 06BC           // ($C4E0) to ($C55F) hold ($6A86) to ($6B05)
 ROMB:6A2C CD F2 06         call 06F2           // Both BG and Sprite Palette tables are updated
 ROMB:6A2F CD D2 04         call 04D2           // Next frame
 ROMB:6A32 3E 00            ld   a,00
 ROMB:6A34 E0 83            ld   (ff00+83),a
 ROMB:6A36 E0 4F            ld   (ff00+4F),a    // VRA0
 ROMB:6A38 21 00 98         ld   hl,9800
 ROMB:6A3B 01 00 04         ld   bc,0400
 ROMB:6A3E AF               xor  a
 ROMB:6A3F CD 84 3B         call 3B84           // Empties VRA0($9800) to ($9BFF)
 ROMB:6A42 3E 01            ld   a,01
 ROMB:6A44 E0 83            ld   (ff00+83),a
 ROMB:6A46 E0 4F            ld   (ff00+4F),a    // VRA1
 ROMB:6A48 21 00 98         ld   hl,9800
 ROMB:6A4B 01 00 04         ld   bc,0400
 ROMB:6A4E AF               xor  a
 ROMB:6A4F CD 79 3B         call 3B79           // Empties VRA1($9800) to ($9BFF)
 ROMB:6A52 CD 00 40         call 4000           // Sets up graphics holding and palettes for the map where gameplay takes place
 ROMB:6A55 CD C1 45         call 45C1           // Establishes cursor's overall coordinates and then cursor's sprite graphics location center
 ROMB:6A58 CD 0A 43         call 430A           // Initial loading animation of map for gameplay
 ROMB:6A5B AF               xor  a
 ROMB:6A5C EA 92 CA         ld   (CA92),a
 ROMB:6A5F EA 93 CA         ld   (CA93),a
 ROMB:6A62 EA 94 CA         ld   (CA94),a
 ROMB:6A65 EA 95 CA         ld   (CA95),a
 ROMB:6A68 EA 96 CA         ld   (CA96),a
 ROMB:6A6B EA A1 C9         ld   (C9A1),a
 ROMB:6A6E CB C7            set  0,a
 ROMB:6A70 E0 B1            ld   (ff00+B1),a    // Activates water graphics check
 ROMB:6A72 EF 0D 76 67                          // Sets current phase music
 ROMB:6A76 06 00            ld   b,00
 ROMB:6A78 FA 33 C6         ld   a,(C633)
 ROMB:6A7B E6 01            and  a,01
 ROMB:6A7D 28 02            jr   z,6A81
 ROMB:6A7F 06 32            ld   b,32
 ROMB:6A81 78               ld   a,b
 ROMB:6A82 EA 99 CA         ld   (CA99),a       // ($CA99) = Active player's first unit #
 ROMB:6A85 C9               ret  

 ROMB:6A86 00 00 00 00 00 00 00 00               nop  
 ROMB:6A8E 00 00 00 00 00 00 00 00               nop  
 ROMB:6A96 00 00 00 00 00 00 00 00               nop  
 ROMB:6A9E 00 00 00 00 00 00 00 00               nop  
 ROMB:6AA6 00 00 00 00 00 00 00 00               nop  
 ROMB:6AAE 00 00 00 00 00 00 00 00               nop  
 ROMB:6AB6 00 00 00 00 00 00 00 00               nop  
 ROMB:6ABE 00 00 00 00 00 00 00 00               nop  
 ROMB:6AC6 00 00 00 00 00 00 00 00               nop  
 ROMB:6ACE 00 00 00 00 00 00 00 00               nop  
 ROMB:6AD6 00 00 00 00 00 00 00 00               nop  
 ROMB:6ADE 00 00 00 00 00 00 00 00               nop  
 ROMB:6AE6 00 00 00 00 00 00 00 00               nop  
 ROMB:6AEE 00 00 00 00 00 00 00 00               nop  
 ROMB:6AF6 00 00 00 00 00 00 00 00               nop  
 ROMB:6AFE 00 00 00 00 00 00 00 00               nop  

 ROMB:6B06 11 46 C6         ld   de,C646
 ROMB:6B09 21 93 C9         ld   hl,C993
 ROMB:6B0C 01 04 00         ld   bc,0004
 ROMB:6B0F CD 50 3B         call 3B50           // ($C993 ~ $C996) = ($C646 ~ $C649)
 ROMB:6B12 FA 33 C6         ld   a,(C633)
 ROMB:6B15 E6 01            and  a,01
 ROMB:6B17 87               add  a
 ROMB:6B18 21 46 C6         ld   hl,C646
 ROMB:6B1B CD BC 29         call 29BC           // HL += A
 ROMB:6B1E 2A               ldi  a,(hl)
 ROMB:6B1F 47               ld   b,a
 ROMB:6B20 4E               ld   c,(hl)         // BC holds active player's HQ coordinates
 ROMB:6B21 EF 0B CB 7A                          // Establishes view area around active player's HQ, then cursor's within view and overall coordinates, and finally cursor's sprite grapics location center
 ROMB:6B25 C9               ret                 // Establishes first turn cursor default coordinates and view stats for active player
 ROMB:6B26 F0 82            ld   a,(ff00+82)
 ROMB:6B28 F5               push af
 ROMB:6B29 CD 06 6B         call 6B06           // Establishes first turn cursor default coordinates and view stats for active player
 ROMB:6B2C EF 27 66 55                          // "BEGIN WAR" screen plays out for about 3 seconds
 ROMB:6B30 AF               xor  a
 ROMB:6B31 EA 97 CA         ld   (CA97),a
 ROMB:6B34 EA 98 CA         ld   (CA98),a
 ROMB:6B37 EF 0D 10 66                          // Initializes ($C99F) as 0, also sets AI check bytes
 ROMB:6B3B CD 23 6A         call 6A23           // Map Battle Startup
 ROMB:6B3E EF 0C 67 68                          // Campaign Mode concepts discussion handling as a whole
 ROMB:6B42 18 03            jr   6B47
 ROMB:6B44 CD E6 69         call 69E6           // Reestablishes map graphics
 ROMB:6B47 CD 9A 6D         call 6D9A           // A = Map Over Flag; if Day limit exceeded, (CA94) = 1 for White Moon, 2 for Red Star; and ($CA95) = 4
 ROMB:6B4A A7               and  a
 ROMB:6B4B C2 A5 6C         jp   nz,6CA5        // Jumps to ending stuff if map is over
 ROMB:6B4E FA 97 C9         ld   a,(C997)       // Flag for phase start stuff finished done
 ROMB:6B51 FE 00            cp   a,00
 ROMB:6B53 C2 AC 6B         jp   nz,6BAC
 ROMB:6B56 3E 01            ld   a,01
 ROMB:6B58 EA 97 C9         ld   (C997),a
 ROMB:6B5B AF               xor  a
 ROMB:6B5C EA 8E C9         ld   (C98E),a       // Defaulting viable unit building flag
 ROMB:6B5F EF 0B 80 46                          // Updates Cursor Sprite to Normal Cursor
 ROMB:6B63 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMB:6B66 EF 0C A5 73                          // Start of phase stuff?
 ROMB:6B6A EF 0D 76 67                          // Sets current phase music
 ROMB:6B6E EF 0B F9 46                          // res 0,($D000 + ($C98D) * 16) WRAM bank 4
 ROMB:6B72 CD 9A 6D         call 6D9A           // A = Map Over Flag; if Day limit was exceeded, (CA94) = 1 for White Moon, 2 for Red Star; and ($CA95) = 4
 ROMB:6B75 A7               and  a
 ROMB:6B76 C2 A5 6C         jp   nz,6CA5        // Jump to ending stuff if map is over
 ROMB:6B79 FA 33 C6         ld   a,(C633)
 ROMB:6B7C E6 01            and  a,01           // Active player
 ROMB:6B7E 21 31 C6         ld   hl,C631
 ROMB:6B81 CD BC 29         call 29BC           // Is the active player AI controlled
 ROMB:6B84 7E               ld   a,(hl)
 ROMB:6B85 FE 01            cp   a,01
 ROMB:6B87 20 23            jr   nz,6BAC        // Jump if active player is human controlled
 ROMB:6B89 CD 33 26         call 2633           // AI management master control
 ROMB:6B8C FA 94 CA         ld   a,(CA94)
 ROMB:6B8F A7               and  a
 ROMB:6B90 C2 A5 6C         jp   nz,6CA5        // Jumps if either army has won
 ROMB:6B93 EF 0C B4 72                          // Phase end cursor defaulting with accommodating sounds, ($CA97) defaulted to 1
 ROMB:6B97 CD 6D 74         call 746D           // Resets End Turn flags, increments phase number, sets alert for start of phase stuff
 ROMB:6B9A FA 2F C6         ld   a,(C62F)
 ROMB:6B9D FE 05            cp   a,05
 ROMB:6B9F 20 08            jr   nz,6BA9        // Go to backjump if not Attraction
 ROMB:6BA1 FA 33 C6         ld   a,(C633)
 ROMB:6BA4 FE 02            cp   a,02
 ROMB:6BA6 CA AE 6C         jp   z,6CAE         // Very simple ending stuff at tail end of Attraction Mode
 ROMB:6BA9 C3 47 6B         jp   6B47           // Backjump ending AI control segment
 ROMB:6BAC CD 1E 6D         call 6D1E           // Victory condition check results in ($CA94) and ($CA95) being set based on victory condition managed
 ROMB:6BAF FA 94 CA         ld   a,(CA94)
 ROMB:6BB2 A7               and  a
 ROMB:6BB3 C2 A5 6C         jp   nz,6CA5        // Victory ending stuff if either army has won
 ROMB:6BB6 CD 54 46         call 4654           // Updates Cursor Sprite based on if building on tile is possible
 ROMB:6BB9 CD FA 74         call 74FA           // General map view graphics update
 ROMB:6BBC FA 91 CA         ld   a,(CA91)       // Controls considered active
 ROMB:6BBF A7               and  a
 ROMB:6BC0 20 2C            jr   nz,6BEE
 ROMB:6BC2 FA 93 CA         ld   a,(CA93)       // Comes back here if no buttons pressed
 ROMB:6BC5 A7               and  a              // Property Strength Window show flag
 ROMB:6BC6 C2 47 6B         jp   nz,6B47
 ROMB:6BC9 FA 92 CA         ld   a,(CA92)       // Timer for Property Strength Window
 ROMB:6BCC 3C               inc  a
 ROMB:6BCD EA 92 CA         ld   (CA92),a
 ROMB:6BD0 FE 1E            cp   a,1E           // 30 frame check
 ROMB:6BD2 C2 47 6B         jp   nz,6B47
 ROMB:6BD5 FA 91 C9         ld   a,(C991)
 ROMB:6BD8 47               ld   b,a
 ROMB:6BD9 FA 92 C9         ld   a,(C992)
 ROMB:6BDC 4F               ld   c,a
 ROMB:6BDD EF 0C 1B 57                          // Opens Property Strength showing of highlighted property ending with A = 0; simply ends with A = -1 if there is none
 ROMB:6BE1 FE FF            cp   a,FF
 ROMB:6BE3 CA 47 6B         jp   z,6B47         // Backjump if no property
 ROMB:6BE6 3E 01            ld   a,01
 ROMB:6BE8 EA 93 CA         ld   (CA93),a       // Set Property Strength Window show flag
 ROMB:6BEB C3 47 6B         jp   6B47
 ROMB:6BEE AF               xor  a              // Comes here after pressing a button
 ROMB:6BEF EA 92 CA         ld   (CA92),a       // Clears Property Strength Window timer
 ROMB:6BF2 FA 93 CA         ld   a,(CA93)
 ROMB:6BF5 A7               and  a
 ROMB:6BF6 28 0A            jr   z,6C02         // Next part is closing Property Strength window as necessary
 ROMB:6BF8 CD 60 48         call 4860           // Shuts off Window Display, LCD STAT Interrupt, and LYC=LY Coincidence Interrupt
 ROMB:6BFB CD F9 46         call 46F9           // res 0,WRA4[$D000 + ($C98D) * 16]
 ROMB:6BFE AF               xor  a
 ROMB:6BFF EA 93 CA         ld   (CA93),a       // Disable Property Strength Window show flag
 ROMB:6C02 F0 90            ld   a,(ff00+90)
 ROMB:6C04 CB 5F            bit  3,a            // Start (used for establishing secondary functions)
 ROMB:6C06 20 5B            jr   nz,6C63
 ROMB:6C08 FA 91 CA         ld   a,(CA91)
 ROMB:6C0B 21 BB 6C         ld   hl,6CBB
 ROMB:6C0E CD 9E 3A         call 3A9E           // HL = [HL + 2 * (# of 0s right of rightmost 1 bit in A)]
 ROMB:6C11 E9               jp   hl
 ROMB:6C12 CD 25 75         call 7525           // If view will shift right: ($FFAC) 4 byte holds: OR ($FFAC),$82, ($C98B) + 10, ($C98C), 9; if not, general increase to X coordinate within view
 ROMB:6C15 C3 47 6B         jp   6B47           // Finished with Right
 ROMB:6C18 CD 64 75         call 7564           // If view will shift left: ($FFAC) 4 byte holds: OR ($FFAC),$81, ($C98B) - 1, ($C98C), 9; if not, general decrease to X coordinate within view
 ROMB:6C1B C3 47 6B         jp   6B47           // Finished with Left
 ROMB:6C1E CD DB 75         call 75DB           // If view will shift up: ($FFAC) 4 byte holds: OR ($FFAC),$84, ($C98B) - (($C98C)%2), ($C98C) - 1, 10 + (($C98C)%2); if not, general decrease to Y coordinate within view
 ROMB:6C21 C3 47 6B         jp   6B47           // Finished with Up
 ROMB:6C24 CD 9C 75         call 759C           // If view will shift down: ($FFAC) 4 byte holds: OR ($FFAC),$88, ($C98B) - (($C98C)%2), ($C98C) + 9, 10 + (($C98C)%2); if not, general increase to Y coordinate within view
 ROMB:6C27 C3 47 6B         jp   6B47           // Finished with Down
 ROMB:6C2A CD 64 21         call 2164           // Empties $FFB1 and $FFB2 (Select starts here)
 ROMB:6C2D CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMB:6C30 FA 91 C9         ld   a,(C991)
 ROMB:6C33 47               ld   b,a
 ROMB:6C34 FA 92 C9         ld   a,(C992)
 ROMB:6C37 4F               ld   c,a
 ROMB:6C38 EF 12 4E 41                          // A = unit number of primary occupying unit, -1 if there is none
 ROMB:6C3C FE FF            cp   a,FF
 ROMB:6C3E 28 14            jr   z,6C54         // Branches for lack of occupying unit
 ROMB:6C40 0E 00            ld   c,00
 ROMB:6C42 EF 12 66 40
 ROMB:6C46 4F               ld   c,a
 ROMB:6C47 E6 01            and  a,01
 ROMB:6C49 47               ld   b,a
 ROMB:6C4A 79               ld   a,c
 ROMB:6C4B CB 3F            srl  a              // A = Unit Type, B = Unit's side
 ROMB:6C4D EF 25 A5 5D                          // Controls for Unit Information Screen as a whole including unit selection list (A is Unit Type, B is Side; A is -1 if no Unit Type)
 ROMB:6C51 C3 44 6B         jp   6B44           // Finished with Select (occupying unit); will restore map graphics
 ROMB:6C54 FA 33 C6         ld   a,(C633)
 ROMB:6C57 E6 01            and  a,01
 ROMB:6C59 47               ld   b,a            // B = active player
 ROMB:6C5A 3E FF            ld   a,FF
 ROMB:6C5C EF 25 A5 5D                          // Controls for Unit Information Screen as a whole including unit selection list (A is Unit Type, B is Side; A is -1 if no Unit Type)
 ROMB:6C60 C3 44 6B         jp   6B44           // Finished with Select (no occupying unit); will restore map graphics
 ROMB:6C63 CD CA 6F         call 6FCA           // Controls holding Start on gameplay map screen (graphics restored, by the way, thanks)
 ROMB:6C66 C3 47 6B         jp   6B47           // Finished with Start+any button
 ROMB:6C69 CD 95 6F         call 6F95           // Handles either unit selection or unit building if that happens on highlighted tile, ending with A = 1 for either; for neither, end with A = 0
 ROMB:6C6C A7               and  a
 ROMB:6C6D C2 47 6B         jp   nz,6B47        // Finished with A Button if having managed unit building or unit selection
 ROMB:6C70 CD 26 72         call 7226           // Map Primary Menu master control
 ROMB:6C73 FE 01            cp   a,01
 ROMB:6C75 CA 44 6B         jp   z,6B44         // Reestablishes Map Graphics
 ROMB:6C78 FE 00            cp   a,00
 ROMB:6C7A CA 47 6B         jp   z,6B47         // Simple further wait
 ROMB:6C7D FE 03            cp   a,03
 ROMB:6C7F 28 07            jr   z,6C88         // Redo
 ROMB:6C81 3E 01            ld   a,01
 ROMB:6C83 EA 96 CA         ld   (CA96),a
 ROMB:6C86 18 26            jr   6CAE           // Simple map close
 ROMB:6C88 FA 83 C8         ld   a,(C883)
 ROMB:6C8B EF 28 00 40                          // ($CA1A) 3 byte holds map data location, ($CA1D) = 1 if map is already cleared, ($CA1E) holds 0, ($CA1F) holds Map # based on Beginner, ($CA21) to ($CA4E) holds general map information
 ROMB:6C8F FA 1F CA         ld   a,(CA1F)
 ROMB:6C92 EA 83 C8         ld   (C883),a
 ROMB:6C95 EA A3 C6         ld   (C6A3),a       // ($C6A3) holds map number
 ROMB:6C98 CD 88 40         call 4088           // Establishes stats for a new start on a map
 ROMB:6C9B CD 06 6B         call 6B06           // Establishes first turn cursor default coordinates and view stats for active player
 ROMB:6C9E CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMB:6CA1 C3 44 6B         jp   6B44
 ROMB:6CA4 C9               ret  
 ROMB:6CA5 CD 64 21         call 2164           // Empties $FFB1 and $FFB2
 ROMB:6CA8 CD 6E 6E         call 6E6E           // For outside Beginner Mode, given victory type's movie plays out; Day Limit is treated as Yield, most likely explained as morale crash
 ROMB:6CAB CD D6 6E         call 6ED6           // Handles Victory/Defeat screen at end of gameplay session
 ROMB:6CAE CD 64 21         call 2164           // Empties $FFB1 and $FFB2
 ROMB:6CB1 3E 04            ld   a,04
 ROMB:6CB3 E0 94            ld   (ff00+94),a
 ROMB:6CB5 F1               pop  af
 ROMB:6CB6 E0 82            ld   (ff00+82),a
 ROMB:6CB8 E0 70            ld   (ff00+70),a
 ROMB:6CBA C9               ret  
 
 ROMB:6CBB 69 6C                                // A
 ROMB:6CBD 70 6C                                // B
 ROMB:6CBF 2A 6C                                // Select
 ROMB:6CC1 63 6C                                // Start
 ROMB:6CC3 12 6C                                // Right
 ROMB:6CC5 18 6C                                // Left
 ROMB:6CC7 1E 6C                                // Up
 ROMB:6CC9 24 6C                                // Down
 ROMB:6CCB C2 6B                                // None
 
 ROMB:6CCD 21 46 C6         ld   hl,C646
 ROMB:6CD0 FA 33 C6         ld   a,(C633)
 ROMB:6CD3 E6 01            and  a,01
 ROMB:6CD5 87               add  a
 ROMB:6CD6 CD BC 29         call 29BC
 ROMB:6CD9 46               ld   b,(hl)
 ROMB:6CDA 23               inc  hl
 ROMB:6CDB 4E               ld   c,(hl)         // BC holds active player's HQ coordinates
 ROMB:6CDC FA 91 C9         ld   a,(C991)
 ROMB:6CDF B8               cp   b
 ROMB:6CE0 20 17            jr   nz,6CF9
 ROMB:6CE2 FA 92 C9         ld   a,(C992)
 ROMB:6CE5 B9               cp   c
 ROMB:6CE6 20 11            jr   nz,6CF9
 ROMB:6CE8 21 46 C6         ld   hl,C646
 ROMB:6CEB FA 33 C6         ld   a,(C633)
 ROMB:6CEE E6 01            and  a,01
 ROMB:6CF0 EE 01            xor  a,01
 ROMB:6CF2 87               add  a
 ROMB:6CF3 CD BC 29         call 29BC           // HL += A
 ROMB:6CF6 46               ld   b,(hl)
 ROMB:6CF7 23               inc  hl
 ROMB:6CF8 4E               ld   c,(hl)         // BC holds inactive player's HQ coordinates
 ROMB:6CF9 CD 01 7B         call 7B01           // Handles map graphics shift to coordinates BC
 ROMB:6CFC C9               ret                 // Shift view to active player's HQ, or inactive player's HQ if already highlighting the former
 ROMB:6CFD FA 2F C6         ld   a,(C62F)
 ROMB:6D00 FE 00            cp   a,00
 ROMB:6D02 28 06            jr   z,6D0A
 ROMB:6D04 FE 01            cp   a,01
 ROMB:6D06 28 06            jr   z,6D0E
 ROMB:6D08 18 08            jr   6D12
 ROMB:6D0A 3E 01            ld   a,01
 ROMB:6D0C 18 06            jr   6D14
 ROMB:6D0E 3E 02            ld   a,02
 ROMB:6D10 18 02            jr   6D14
 ROMB:6D12 3E 03            ld   a,03
 ROMB:6D14 EA 86 C6         ld   (C686),a
 ROMB:6D17 C9               ret                 // ($C686) holds Mode music basis
 ROMB:6D18 3E 3D            ld   a,3D
 ROMB:6D1A EA 85 C6         ld   (C685),a
 ROMB:6D1D C9               ret                 // ($C685) = 61
 ROMB:6D1E C5               push bc
 ROMB:6D1F CD 5D 6D         call 6D5D           // Zero Flag on if IR Communication partner's turn
 ROMB:6D22 28 37            jr   z,6D5B
 ROMB:6D24 FA 2F C6         ld   a,(C62F)
 ROMB:6D27 FE 00            cp   a,00
 ROMB:6D29 28 11            jr   z,6D3C         // Jump if Beginner
 ROMB:6D2B FA 4B C6         ld   a,(C64B)
 ROMB:6D2E A7               and  a
 ROMB:6D2F 28 13            jr   z,6D44         // Jump if Red Star's HQ is lost
 ROMB:6D31 FA 56 C6         ld   a,(C656)
 ROMB:6D34 A7               and  a
 ROMB:6D35 28 13            jr   z,6D4A         // Jump if White Moon's HQ is lost
 ROMB:6D37 CD 69 6D         call 6D69           // Rout check results in ($CA94) and ($CA95) being set if Rout has happened, or A = 0 if it hasn't
 ROMB:6D3A 18 1F            jr   6D5B
 ROMB:6D3C CD FC 6D         call 6DFC           // A = 1 if map condition for Beginner map is fulfilled, 0 if not
 ROMB:6D3F A7               and  a
 ROMB:6D40 20 0E            jr   nz,6D50
 ROMB:6D42 18 17            jr   6D5B
 ROMB:6D44 3E 02            ld   a,02           // Red Star lost HQ
 ROMB:6D46 06 01            ld   b,01
 ROMB:6D48 18 0A            jr   6D54
 ROMB:6D4A 3E 01            ld   a,01           // White Moon lost HQ
 ROMB:6D4C 06 01            ld   b,01
 ROMB:6D4E 18 04            jr   6D54
 ROMB:6D50 06 02            ld   b,02           // Map condition cleared (Beginner Mode; A = 1 to get here)
 ROMB:6D52 18 00            jr   6D54
 ROMB:6D54 EA 94 CA         ld   (CA94),a
 ROMB:6D57 78               ld   a,b
 ROMB:6D58 EA 95 CA         ld   (CA95),a
 ROMB:6D5B C1               pop  bc
 ROMB:6D5C C9               ret                 // Victory condition check results in ($CA94) and ($CA95) being set based on victory condition managed
 ROMB:6D5D FA 30 C6         ld   a,(C630)
 ROMB:6D60 FE 01            cp   a,01
 ROMB:6D62 C0               ret  nz
 ROMB:6D63 FA B5 C9         ld   a,(C9B5)
 ROMB:6D66 FE 01            cp   a,01
 ROMB:6D68 C9               ret                 // Zero Flag on if IR Communication Receiver's turn
 ROMB:6D69 21 98 CA         ld   hl,CA98
 ROMB:6D6C FA 09 CD         ld   a,(CD09)
 ROMB:6D6F A7               and  a
 ROMB:6D70 28 04            jr   z,6D76         // Jump if Red Star has no units left
 ROMB:6D72 CB C6            set  0,(hl)
 ROMB:6D74 18 04            jr   6D7A
 ROMB:6D76 CB 46            bit  0,(hl)
 ROMB:6D78 20 15            jr   nz,6D8F
 ROMB:6D7A FA 0A CD         ld   a,(CD0A)
 ROMB:6D7D A7               and  a
 ROMB:6D7E 28 04            jr   z,6D84         // Jump if White Moon has no units left
 ROMB:6D80 CB CE            set  1,(hl)
 ROMB:6D82 18 04            jr   6D88
 ROMB:6D84 CB 4E            bit  1,(hl)
 ROMB:6D86 20 03            jr   nz,6D8B
 ROMB:6D88 AF               xor  a
 ROMB:6D89 18 0E            jr   6D99
 ROMB:6D8B 3E 01            ld   a,01
 ROMB:6D8D 18 02            jr   6D91
 ROMB:6D8F 3E 02            ld   a,02
 ROMB:6D91 EA 94 CA         ld   (CA94),a
 ROMB:6D94 3E 02            ld   a,02
 ROMB:6D96 EA 95 CA         ld   (CA95),a
 ROMB:6D99 C9               ret                 // Rout check results in ($CA94) and ($CA95) being set if Rout has happened, or A = 0 if it hasn't
 ROMB:6D9A FA 2F C6         ld   a,(C62F)
 ROMB:6D9D FE 04            cp   a,04
 ROMB:6D9F 28 49            jr   z,6DEA         // Jump if VS
 ROMB:6DA1 FE 01            cp   a,01
 ROMB:6DA3 28 11            jr   z,6DB6         // Jump if Campaign
 ROMB:6DA5 FE 00            cp   a,00
 ROMB:6DA7 28 04            jr   z,6DAD         // Jump if Beginner
 ROMB:6DA9 3E 63            ld   a,63
 ROMB:6DAB 18 10            jr   6DBD
 ROMB:6DAD FA 83 C8         ld   a,(C883)
 ROMB:6DB0 EF 28 C4 41                          // Beginner Mode Day limit
 ROMB:6DB4 18 07            jr   6DBD
 ROMB:6DB6 FA 83 C8         ld   a,(C883)
 ROMB:6DB9 EF 28 57 41                          // Campaign Mode Day limit
 ROMB:6DBD 87               add  a              // A = Day Limit x 2
 ROMB:6DBE 3D               dec  a              // A = Day Limit x 2 - 1
 ROMB:6DBF 47               ld   b,a            // B = Day Limit x 2 - 1
 ROMB:6DC0 FA 31 C6         ld   a,(C631)
 ROMB:6DC3 A7               and  a
 ROMB:6DC4 20 06            jr   nz,6DCC        // Jump if Red Star is AI
 ROMB:6DC6 FA 33 C6         ld   a,(C633)
 ROMB:6DC9 B8               cp   b
 ROMB:6DCA 28 0F            jr   z,6DDB         // Jump if ($C633) = Day Limit x 2 - 1
 ROMB:6DCC 04               inc  b              // B = 198 (Standard)
 ROMB:6DCD FA 33 C6         ld   a,(C633)
 ROMB:6DD0 B8               cp   b
 ROMB:6DD1 28 02            jr   z,6DD5         // Jump if ($C633) = 198 (Standard)
 ROMB:6DD3 18 15            jr   6DEA
 ROMB:6DD5 3E 01            ld   a,01
 ROMB:6DD7 06 04            ld   b,04
 ROMB:6DD9 18 04            jr   6DDF
 ROMB:6DDB 3E 02            ld   a,02
 ROMB:6DDD 06 04            ld   b,04
 ROMB:6DDF EA 94 CA         ld   (CA94),a
 ROMB:6DE2 78               ld   a,b
 ROMB:6DE3 EA 95 CA         ld   (CA95),a       // If not skipped, (CA94) = 1 for Red Star, 2 for White Moon; and ($CA95) = 4
 ROMB:6DE6 3E 01            ld   a,01
 ROMB:6DE8 18 03            jr   6DED
 ROMB:6DEA AF               xor  a
 ROMB:6DEB 18 00            jr   6DED
 ROMB:6DED F5               push af
 ROMB:6DEE FA 33 C6         ld   a,(C633)
 ROMB:6DF1 FE C6            cp   a,C6
 ROMB:6DF3 20 05            jr   nz,6DFA
 ROMB:6DF5 3E C4            ld   a,C4
 ROMB:6DF7 EA 33 C6         ld   (C633),a
 ROMB:6DFA F1               pop  af             // A = Map Over Flag; if Day limit exceeded, (CA94) = 1 for Red Star, 2 for White Moon; and ($CA95) = 4
 ROMB:6DFB C9               ret  
 ROMB:6DFC C5               push bc
 ROMB:6DFD D5               push de
 ROMB:6DFE FA 2F C6         ld   a,(C62F)
 ROMB:6E01 FE 00            cp   a,00
 ROMB:6E03 20 0F            jr   nz,6E14        // End with A = 0 if not Beginner
 ROMB:6E05 FA 83 C8         ld   a,(C883)
 ROMB:6E08 21 18 6E         ld   hl,6E18
 ROMB:6E0B CD 8F 3A         call 3A8F           // CALL [HL + 2A]
 ROMB:6E0E 20 04            jr   nz,6E14        // End with A = 0 if map condition not fulfilled
 ROMB:6E10 3E 01            ld   a,01
 ROMB:6E12 18 01            jr   6E15
 ROMB:6E14 AF               xor  a
 ROMB:6E15 D1               pop  de
 ROMB:6E16 C1               pop  bc
 ROMB:6E17 C9               ret                 // A = 1 if map condition for Beginner map is fulfilled, 0 if not
 ROMB:6E18 38 6E                                // HQ Capture
 ROMB:6E1A 3D 6E                                // Rout
 ROMB:6E1C 3D 6E                                // Rout
 ROMB:6E1E 42 6E                                // 2 Cities owned
 ROMB:6E20 38 6E                                // HQ Capture
 ROMB:6E22 3D 6E                                // Rout
 ROMB:6E24 48 6E                                // 20 Materials Income
 ROMB:6E26 3D 6E                                // Rout
 ROMB:6E28 38 6E                                // HQ Capture
 ROMB:6E2A 38 6E                                // HQ Capture
 ROMB:6E2C 4E 6E                                // Enemy Materials Income = 0
 ROMB:6E2E 3D 6E                                // Rout
 ROMB:6E30 3D 6E                                // Rout
 ROMB:6E32 54 6E                                // Rout without damage
 ROMB:6E34 54 6E                                // Rout without damage
 ROMB:6E36 3D 6E                                // Rout
 ROMB:6E38 FA 56 C6         ld   a,(C656)
 ROMB:6E3B A7               and  a
 ROMB:6E3C C9               ret                 // HQ Capture check
 ROMB:6E3D FA 0A CD         ld   a,(CD0A)
 ROMB:6E40 A7               and  a
 ROMB:6E41 C9               ret                 // Rout check
 ROMB:6E42 FA 4C C6         ld   a,(C64C)
 ROMB:6E45 FE 02            cp   a,02
 ROMB:6E47 C9               ret                 // 2 Cities owned check
 ROMB:6E48 FA 42 C6         ld   a,(C642)
 ROMB:6E4B FE 14            cp   a,14
 ROMB:6E4D C9               ret                 // 20 Materials Income check
 ROMB:6E4E FA 44 C6         ld   a,(C644)
 ROMB:6E51 FE 00            cp   a,00
 ROMB:6E53 C9               ret                 // Beginner #11 conditions (Enemy Materials reduced to 0)
 ROMB:6E54 FA 0A CD         ld   a,(CD0A)
 ROMB:6E57 A7               and  a
 ROMB:6E58 C0               ret  nz             // End if White Moon has any units left (Zero not Set)
 ROMB:6E59 AF               xor  a
 ROMB:6E5A 0E 04            ld   c,04
 ROMB:6E5C EF 12 66 40                          // A = Current HP
 ROMB:6E60 FE 0A            cp   a,0A
 ROMB:6E62 C0               ret  nz             // End if Red Star unit #1 doesn't have 10 HPs (Carry Set by sub-10 HPs)
 ROMB:6E63 3E 01            ld   a,01
 ROMB:6E65 0E 04            ld   c,04
 ROMB:6E67 EF 12 66 40                          
 ROMB:6E6B FE 0A            cp   a,0A
 ROMB:6E6D C9               ret                 // Beginner #14 and #15 conditions
 ROMB:6E6E FA 2F C6         ld   a,(C62F)
 ROMB:6E71 FE 00            cp   a,00
 ROMB:6E73 28 15            jr   z,6E8A         // Jump if Beginner
 ROMB:6E75 FA 95 CA         ld   a,(CA95)
 ROMB:6E78 FE 01            cp   a,01           // HQ Capture
 ROMB:6E7A 28 13            jr   z,6E8F
 ROMB:6E7C FE 02            cp   a,02           // Rout/Condition
 ROMB:6E7E 28 2A            jr   z,6EAA
 ROMB:6E80 FE 04            cp   a,04           // Opponent failed Day Limit
 ROMB:6E82 28 38            jr   z,6EBC
 ROMB:6E84 FE 03            cp   a,03           // Opponent Yield
 ROMB:6E86 18 3C            jr   6EC4
 ROMB:6E88 18 4B            jr   6ED5
 ROMB:6E8A CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMB:6E8D 18 46            jr   6ED5           // Beginner
 ROMB:6E8F 3E 3C            ld   a,3C
 ROMB:6E91 CD AF 3B         call 3BAF           // Advances game state by 60 frames before any further functions
 ROMB:6E94 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMB:6E97 FA 85 C6         ld   a,(C685)
 ROMB:6E9A CB 57            bit  2,a            // Action animation
 ROMB:6E9C 20 37            jr   nz,6ED5        // Ends immediately if Action Animation is On
 ROMB:6E9E FA 94 CA         ld   a,(CA94)
 ROMB:6EA1 3D               dec  a
 ROMB:6EA2 EE 01            xor  a,01           // A = Losing army
 ROMB:6EA4 EF 1A 89 60                          // Plays out successful Headquarters capture process (A is defeated army)
 ROMB:6EA8 18 2B            jr   6ED5           // HQ Capture
 ROMB:6EAA 3E 3C            ld   a,3C
 ROMB:6EAC CD AF 3B         call 3BAF           // Advances game state by 60 frames before any further functions
 ROMB:6EAF CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMB:6EB2 FA 94 CA         ld   a,(CA94)
 ROMB:6EB5 3D               dec  a              // A = Victorious army
 ROMB:6EB6 EF 1A A4 60                          // Rout movie plays out for up to 14 seconds (A is winning army)
 ROMB:6EBA 18 19            jr   6ED5           // Rout/Condition
 ROMB:6EBC 3E 3C            ld   a,3C
 ROMB:6EBE CD AF 3B         call 3BAF           // Advances game state by 60 frames before any further functions
 ROMB:6EC1 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMB:6EC4 FA 30 C6         ld   a,(C630)
 ROMB:6EC7 FE 01            cp   a,01
 ROMB:6EC9 28 BF            jr   z,6E8A         // Backjumps if not using IR Communication
 ROMB:6ECB FA 94 CA         ld   a,(CA94)
 ROMB:6ECE 3D               dec  a
 ROMB:6ECF EE 01            xor  a,01           // A = Losing army
 ROMB:6ED1 EF 1A 63 62                          // Yield movie plays out for up to 3.5 seconds (A is defeated army)
 ROMB:6ED5 C9               ret                 // For outside Beginner Mode, given victory type's movie plays out; Day Limit is treated as Yield, most likely explained as morale crash
 ROMB:6ED6 AF               xor  a
 ROMB:6ED7 E0 95            ld   (ff00+95),a
 ROMB:6ED9 E0 96            ld   (ff00+96),a
 ROMB:6EDB FA 30 C6         ld   a,(C630)
 ROMB:6EDE FE 01            cp   a,01
 ROMB:6EE0 20 08            jr   nz,6EEA
 ROMB:6EE2 FA 95 CA         ld   a,(CA95)
 ROMB:6EE5 FE 03            cp   a,03
 ROMB:6EE7 20 01            jr   nz,6EEA        // Jumps if victory type wasn't Yield by IR Communication partner
 ROMB:6EE9 C9               ret  
 ROMB:6EEA FA 31 C6         ld   a,(C631)
 ROMB:6EED FE 01            cp   a,01           // Red Star AI check
 ROMB:6EEF 28 16            jr   z,6F07         // Red Star controlled by AI: 1, Losing army (this would be for Standard Mode's 2nd half)
 ROMB:6EF1 FA 2F C6         ld   a,(C62F)
 ROMB:6EF4 FE 04            cp   a,04           // VS Mode check
 ROMB:6EF6 20 07            jr   nz,6EFF        // Not VS: 0, Winning army ("RED STAR" status)
 ROMB:6EF8 FA 33 C6         ld   a,(C633)
 ROMB:6EFB E6 01            and  a,01
 ROMB:6EFD 20 08            jr   nz,6F07        // White Moon's turn: 1, Losing army ("WHITE MOON" status; White Moon losing under this jump would be by Yielding)
 ROMB:6EFF FA 94 CA         ld   a,(CA94)
 ROMB:6F02 3D               dec  a
 ROMB:6F03 47               ld   b,a            // B = Victorious army
 ROMB:6F04 AF               xor  a              // A = 0
 ROMB:6F05 18 09            jr   6F10           // Jumps with 0, Winning army ("RED STAR" status)
 ROMB:6F07 FA 94 CA         ld   a,(CA94)
 ROMB:6F0A 3D               dec  a
 ROMB:6F0B EE 01            xor  a,01
 ROMB:6F0D 47               ld   b,a            // B = Losing army
 ROMB:6F0E 3E 01            ld   a,01           // A = 1
 ROMB:6F10 EF 27 E7 54                          // Victory/Defeat screen plays out for about 2.5 seconds (A is country to list, B is Victory/Defeat choice)
 ROMB:6F14 FA 30 C6         ld   a,(C630)
 ROMB:6F17 FE 01            cp   a,01
 ROMB:6F19 C0               ret  nz             // End immediately if not playing on IR Communication mode
 ROMB:6F1A CD 1E 6F         call 6F1E           // Message about game being ended for IR Communication
 ROMB:6F1D C9               ret                 // Handles Victory/Defeat screen at end of gameplay session
 ROMB:6F1E CD F3 04         call 04F3           // Shuts off LCD Display if necessary
 ROMB:6F21 EF 01 00 40                          // Graphics holding: VRA0($9000) to VRA0($97FF) then VRA0($8800) to VRA0($8FFF) holds basic text
 ROMB:6F25 AF               xor  a
 ROMB:6F26 E0 95            ld   (ff00+95),a
 ROMB:6F28 E0 96            ld   (ff00+96),a
 ROMB:6F2A CD 18 06         call 0618           // Resets Palettes to absolute default Palettes
 ROMB:6F2D 3E 00            ld   a,00
 ROMB:6F2F EF 15 91 66                          // VRA1:($8F30~$8FFF) holds mode menu tile graphics basics; mode menu graphics basics established accordingly
 ROMB:6F33 01 05 01         ld   bc,0105
 ROMB:6F36 11 07 12         ld   de,1207
 ROMB:6F39 EF 22 47 62                          // Basic setup for table rectangle 1~18,5~11 including defaulted palette for interior's tiles
 ROMB:6F3D 21 65 6F         ld   hl,6F65        // "Game was ended"
 ROMB:6F40 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMB:6F43 21 76 6F         ld   hl,6F76        // "Opponent, 'suspend'"
 ROMB:6F46 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMB:6F49 21 88 6F         ld   hl,6F88        // "Please choose"
 ROMB:6F4C CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMB:6F4F CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 ROMB:6F52 CD A2 05         call 05A2           // Button update, next frame
 ROMB:6F55 3E 00            ld   a,00
 ROMB:6F57 EF 15 91 67                          // Updates menu shifting diagonally down-right BG graphics (A is modification of where menu BG graphics had been stored)
 ROMB:6F5B F0 91            ld   a,(ff00+91)
 ROMB:6F5D E6 0B            and  a,0B           // A, B, or Start
 ROMB:6F5F 28 F1            jr   z,6F52
 ROMB:6F61 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMB:6F64 C9               ret                 // Message about game being ended for IR Communication

 ROMB:6F65 02 06
 ROMB:6F67 E1 2D D1 8E 6C AD 63 88 AE 63 6C 7F 6C 70 00
 ROMB:6F76 02 07
 ROMB:6F78 70 62 6E 8D 61 62 73 7A 1B 71 AD 63 6C 1D 60 00
 ROMB:6F88 02 08
 ROMB:6F8A 6E 8D 70 68 6C 73 68 98 6B 62 00

 ROMB:6F95 FA 91 C9         ld   a,(C991)
 ROMB:6F98 47               ld   b,a
 ROMB:6F99 FA 92 C9         ld   a,(C992)
 ROMB:6F9C 4F               ld   c,a
 ROMB:6F9D CD 92 47         call 4792           // Occupying unit's type
 ROMB:6FA0 A7               and  a
 ROMB:6FA1 20 18            jr   nz,6FBB        // If unit is occupying tile, branch
 ROMB:6FA3 CD BD 59         call 59BD           // A = property number value if controlled by active player and within 3 spaces of their Capital; otherwise, A = 0
 ROMB:6FA6 A7               and  a
 ROMB:6FA7 28 20            jr   z,6FC9         // End immediately with A = 0 if invalid for building
 ROMB:6FA9 F5               push af
 ROMB:6FAA 3E 0A            ld   a,0A
 ROMB:6FAC CD 44 38         call 3844
 ROMB:6FAF F1               pop  af
 ROMB:6FB0 CD D6 57         call 57D6           // Controls for Build Unit process (A is Property type)
 ROMB:6FB3 EF 0D 76 67                          // Sets current phase music
 ROMB:6FB7 3E 01            ld   a,01
 ROMB:6FB9 18 0E            jr   6FC9
 ROMB:6FBB 3E 0A            ld   a,0A
 ROMB:6FBD CD 44 38         call 3844
 ROMB:6FC0 CD 62 5E         call 5E62           // Handles unit selection on tile BC
 ROMB:6FC3 EF 0D 76 67                          // Sets current phase music
 ROMB:6FC7 3E 01            ld   a,01
 ROMB:6FC9 C9               ret                 // Handles either unit selection or unit building if that happens on highlighted tile, ending with A = 1 for either; for neither, end with A = 0
 ROMB:6FCA F0 90            ld   a,(ff00+90)
 ROMB:6FCC CB 77            bit  6,a            // Up (hide units)
 ROMB:6FCE 20 19            jr   nz,6FE9
 ROMB:6FD0 CB 7F            bit  7,a            // Down (hide units)
 ROMB:6FD2 20 15            jr   nz,6FE9
 ROMB:6FD4 CB 57            bit  2,a            // Select (terrain type info)
 ROMB:6FD6 20 15            jr   nz,6FED
 ROMB:6FD8 FA 91 CA         ld   a,(CA91)
 ROMB:6FDB CB 4F            bit  1,a            // B (mission info for single player)
 ROMB:6FDD 20 27            jr   nz,7006
 ROMB:6FDF CB 6F            bit  5,a            // Left (Previous Unit)
 ROMB:6FE1 20 2E            jr   nz,7011
 ROMB:6FE3 CB 67            bit  4,a            // Right (Next Unit)
 ROMB:6FE5 20 2F            jr   nz,7016
 ROMB:6FE7 18 42            jr   702B           // Ends immediately if none of the other buttons are held
 ROMB:6FE9 CD 6E 70         call 706E           // Ability to view only terrain by holding Start+Up/Down
 ROMB:6FEC C9               ret                 // Start+Up/Down handled
 ROMB:6FED CD 64 21         call 2164           // Empties $FFB1 and $FFB2
 ROMB:6FF0 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMB:6FF3 FA 91 C9         ld   a,(C991)
 ROMB:6FF6 47               ld   b,a
 ROMB:6FF7 FA 92 C9         ld   a,(C992)
 ROMB:6FFA 4F               ld   c,a
 ROMB:6FFB CD 70 47         call 4770           // A = Terrain Type
 ROMB:6FFE EF 25 42 71                          // Basic Terrain Information Screen of Terrain A
 ROMB:7002 CD E6 69         call 69E6           // Reestablishes map graphics
 ROMB:7005 C9               ret                 // Start+Select handled
 ROMB:7006 FA 2F C6         ld   a,(C62F)
 ROMB:7009 FE 03            cp   a,03
 ROMB:700B 30 1E            jr   nc,702B        // End if not single-player
 ROMB:700D CD 2C 70         call 702C           // Briefing Review Screen as a whole
 ROMB:7010 C9               ret                 // Start+B handled
 ROMB:7011 CD 85 70         call 7085           // A holds number of unmoved unit to cycle to, -1 if no units are available (Previous Unit edition)
 ROMB:7014 18 03            jr   7019
 ROMB:7016 CD CE 70         call 70CE           // A holds number of unmoved unit to cycle to, -1 if no units are available (Next Unit edition)
 ROMB:7019 FE FF            cp   a,FF
 ROMB:701B 28 0E            jr   z,702B         // Ends immediately if no update to ($CA99)
 ROMB:701D FA 99 CA         ld   a,(CA99)       // A = Next/Previous unit
 ROMB:7020 0E 01            ld   c,01
 ROMB:7022 EF 12 83 40                          
 ROMB:7026 43               ld   b,e
 ROMB:7027 4A               ld   c,d            // BC holds coordinates of unit to cycle to
 ROMB:7028 CD 01 7B         call 7B01           // Handles map graphics shift to coordinates BC
 ROMB:702B C9               ret                 // Controls holding Start on gameplay map screen
 ROMB:702C CD 64 21         call 2164           // Empties $FFB1 and $FFB2
 ROMB:702F CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMB:7032 FA 2F C6         ld   a,(C62F)
 ROMB:7035 FE 00            cp   a,00           // Beginner?
 ROMB:7037 28 06            jr   z,703F
 ROMB:7039 FE 01            cp   a,01           // Campaign?
 ROMB:703B 28 10            jr   z,704D
 ROMB:703D 18 1C            jr   705B
 ROMB:703F FA 83 C8         ld   a,(C883)
 ROMB:7042 EF 28 00 40                          // ($CA1A) 3 byte holds map data location, ($CA1D) = 1 if map is already cleared, ($CA1E) holds 0, ($CA1F) holds Map # based on Beginner, ($CA21) to ($CA4E) holds general map information
 ROMB:7046 06 01            ld   b,01
 ROMB:7048 FA 83 C8         ld   a,(C883)
 ROMB:704B 18 19            jr   7066
 ROMB:704D FA 83 C8         ld   a,(C883)
 ROMB:7050 EF 28 24 40                          // ($CA1A) 3 byte holds map data location, ($CA1D) = 4 if map is open but not cleared, ($CA1E) holds 1, ($CA1F) holds Map # based on Campaign, ($CA21) to ($CA4E) holds general map information
 ROMB:7054 06 00            ld   b,00
 ROMB:7056 FA 83 C8         ld   a,(C883)
 ROMB:7059 18 0B            jr   7066
 ROMB:705B FA 83 C8         ld   a,(C883)
 ROMB:705E EF 28 5A 40                          // ($CA1A) 3 byte holds map data location, ($CA1D) = 1 if map is already cleared, ($CA1E) holds 2, ($CA1F) holds Map # based on Standard, ($CA21) to ($CA4E) holds general map information
 ROMB:7062 3E 10            ld   a,10
 ROMB:7064 06 01            ld   b,01           // Standard
 ROMB:7066 EF 25 AD 48                          // Briefing Review screen handling with A set to -1 for pressing B at any point, or 0 for pressing continuation button (A is given map, or 16 for Standard; B is given Mode with Standard treated as Beginner)
 ROMB:706A CD E6 69         call 69E6           // Reestablishes map graphics
 ROMB:706D C9               ret                 // Briefing Review Screen as a whole
 ROMB:706E CD CE 42         call 42CE           // Establishes all on-screen tiles' terrain graphics, ($FF95) 2 byte holds screen shift coordinates
 ROMB:7071 CD 54 46         call 4654           // Updates Cursor Sprite based on if building on tile is possible
 ROMB:7074 CD FA 74         call 74FA           // General map view graphics update
 ROMB:7077 F0 90            ld   a,(ff00+90)
 ROMB:7079 CB 5F            bit  3,a
 ROMB:707B 28 04            jr   z,7081         // Jumps if Start is released
 ROMB:707D E6 C0            and  a,C0
 ROMB:707F 20 F3            jr   nz,7074        // Backjumps until Up/Down is released
 ROMB:7081 CD 8A 42         call 428A           // Establishes all on-screen tiles' entire graphics
 ROMB:7084 C9               ret                 // Ability to view only terrain by holding Start+Up/Down
 ROMB:7085 C5               push bc
 ROMB:7086 D5               push de
 ROMB:7087 FA 91 C9         ld   a,(C991)
 ROMB:708A 47               ld   b,a
 ROMB:708B FA 92 C9         ld   a,(C992)
 ROMB:708E 4F               ld   c,a
 ROMB:708F CD 92 47         call 4792           // A = Occupying unit's Type
 ROMB:7092 A7               and  a
 ROMB:7093 28 25            jr   z,70BA         // Branch to B = 49 or 99 if no occupying unit
 ROMB:7095 CD 24 7D         call 7D24           // Zero Flag set by either A = 0, or A and ($C633) are both either odd or even
 ROMB:7098 20 20            jr   nz,70BA        // Branch to B = 49 or 99 if unit is different side
 ROMB:709A C5               push bc
 ROMB:709B FA 99 CA         ld   a,(CA99)
 ROMB:709E 0E 01            ld   c,01
 ROMB:70A0 EF 12 83 40                          // DE holds coordinates
 ROMB:70A4 C1               pop  bc             // BC holds cursor coordinates
 ROMB:70A5 78               ld   a,b
 ROMB:70A6 BB               cp   e
 ROMB:70A7 20 0A            jr   nz,70B3
 ROMB:70A9 79               ld   a,c
 ROMB:70AA BA               cp   d
 ROMB:70AB 20 06            jr   nz,70B3        // Branches to defaulting to primary occupying unit
 ROMB:70AD FA 99 CA         ld   a,(CA99)
 ROMB:70B0 47               ld   b,a
 ROMB:70B1 18 12            jr   70C5           // This branch results from the player still cycling through units
 ROMB:70B3 EF 12 4E 41                          // A = unit number of primary occupying unit, -1 if there is none
 ROMB:70B7 47               ld   b,a            // B = Unit number of primary occupying unit
 ROMB:70B8 18 0B            jr   70C5
 ROMB:70BA 06 31            ld   b,31           // Joining back here
 ROMB:70BC FA 33 C6         ld   a,(C633)
 ROMB:70BF E6 01            and  a,01
 ROMB:70C1 28 02            jr   z,70C5
 ROMB:70C3 06 63            ld   b,63           // B = 49 for Red Star, 99 for White Moon
 ROMB:70C5 78               ld   a,b
 ROMB:70C6 06 FF            ld   b,FF           // (49 or 99), -1
 ROMB:70C8 CD 17 71         call 7117           // A = Previous unit's ID #, -1 if no update; ($CA99) updated to previous unit's ID #
 ROMB:70CB D1               pop  de
 ROMB:70CC C1               pop  bc
 ROMB:70CD C9               ret                 // A holds number of unmoved unit to cycle to, -1 if no units are available (Previous Unit edition)
 ROMB:70CE C5               push bc
 ROMB:70CF D5               push de
 ROMB:70D0 FA 91 C9         ld   a,(C991)
 ROMB:70D3 47               ld   b,a
 ROMB:70D4 FA 92 C9         ld   a,(C992)
 ROMB:70D7 4F               ld   c,a
 ROMB:70D8 CD 92 47         call 4792           // A = Occupying unit's Type
 ROMB:70DB A7               and  a
 ROMB:70DC 28 25            jr   z,7103         // Branch to B = 49 or 99 if no occupying unit
 ROMB:70DE CD 24 7D         call 7D24           // Zero Flag set by either A = 0, or A and ($C633) are both either odd or even
 ROMB:70E1 20 20            jr   nz,7103        // Branch to B = 49 or 99 if unit is different side
 ROMB:70E3 C5               push bc
 ROMB:70E4 FA 99 CA         ld   a,(CA99)
 ROMB:70E7 0E 01            ld   c,01
 ROMB:70E9 EF 12 83 40                          // DE holds coordinates
 ROMB:70ED C1               pop  bc
 ROMB:70EE 78               ld   a,b
 ROMB:70EF BB               cp   e
 ROMB:70F0 20 0A            jr   nz,70FC
 ROMB:70F2 79               ld   a,c
 ROMB:70F3 BA               cp   d
 ROMB:70F4 20 06            jr   nz,70FC
 ROMB:70F6 FA 99 CA         ld   a,(CA99)
 ROMB:70F9 47               ld   b,a
 ROMB:70FA 18 12            jr   710E
 ROMB:70FC EF 12 4E 41                          // A = unit number of primary occupying unit, -1 if there is none
 ROMB:7100 47               ld   b,a
 ROMB:7101 18 0B            jr   710E
 ROMB:7103 06 31            ld   b,31
 ROMB:7105 FA 33 C6         ld   a,(C633)
 ROMB:7108 E6 01            and  a,01
 ROMB:710A 28 02            jr   z,710E
 ROMB:710C 06 63            ld   b,63
 ROMB:710E 78               ld   a,b
 ROMB:710F 06 01            ld   b,01           // (49 or 99), +1
 ROMB:7111 CD 17 71         call 7117           // A = Next unit's ID #, -1 if no update; ($CA99) updated to next unit's ID #
 ROMB:7114 D1               pop  de
 ROMB:7115 C1               pop  bc
 ROMB:7116 C9               ret                 // A holds number of unmoved unit to cycle to, -1 if no units are available (Next Unit edition)
 ROMB:7117 C5               push bc
 ROMB:7118 D5               push de
 ROMB:7119 EA 99 CA         ld   (CA99),a
 ROMB:711C 4F               ld   c,a
 ROMB:711D 16 00            ld   d,00
 ROMB:711F FE 32            cp   a,32
 ROMB:7121 38 02            jr   c,7125
 ROMB:7123 16 32            ld   d,32           // D = 0 or 50
 ROMB:7125 7A               ld   a,d
 ROMB:7126 C6 32            add  a,32
 ROMB:7128 5F               ld   e,a            // E = 50 or 100
 ROMB:7129 18 18            jr   7143
 ROMB:712B FA 99 CA         ld   a,(CA99)
 ROMB:712E EF 12 06 41                          // ($CCDD) to ($CCEC) holds unit's stats
 ROMB:7132 FA DD CC         ld   a,(CCDD)
 ROMB:7135 A7               and  a
 ROMB:7136 28 0B            jr   z,7143
 ROMB:7138 FA E0 CC         ld   a,(CCE0)
 ROMB:713B CB 4F            bit  1,a
 ROMB:713D 20 04            jr   nz,7143        // Unit can't be cycled to if Reserve flag is set
 ROMB:713F CB 7F            bit  7,a
 ROMB:7141 28 0D            jr   z,7150         // Unit can be cycled to if: exists, Reserve Flag off, End Turn flag off
 ROMB:7143 CD 53 71         call 7153           // ($CA99) has B added to it and modified as necessary to stay within the active player's unit list
 ROMB:7146 FA 99 CA         ld   a,(CA99)
 ROMB:7149 B9               cp   c
 ROMB:714A 28 02            jr   z,714E
 ROMB:714C 18 DD            jr   712B
 ROMB:714E 3E FF            ld   a,FF
 ROMB:7150 D1               pop  de
 ROMB:7151 C1               pop  bc
 ROMB:7152 C9               ret                 // A = Next unit's ID #, -1 if no update; ($CA99) updated to next unit's ID #

 ROMB:7153 FA 99 CA         ld   a,(CA99)
 ROMB:7156 80               add  b
 ROMB:7157 EA 99 CA         ld   (CA99),a
 ROMB:715A 78               ld   a,b
 ROMB:715B FE FF            cp   a,FF
 ROMB:715D 28 07            jr   z,7166
 ROMB:715F FA 99 CA         ld   a,(CA99)
 ROMB:7162 BB               cp   e
 ROMB:7163 28 0D            jr   z,7172
 ROMB:7165 C9               ret  
 ROMB:7166 FA 99 CA         ld   a,(CA99)
 ROMB:7169 FE FF            cp   a,FF
 ROMB:716B 28 0A            jr   z,7177
 ROMB:716D FE 31            cp   a,31
 ROMB:716F 28 06            jr   z,7177
 ROMB:7171 C9               ret  
 ROMB:7172 7A               ld   a,d
 ROMB:7173 EA 99 CA         ld   (CA99),a       // ($CA99) set to first unit
 ROMB:7176 C9               ret  
 ROMB:7177 7B               ld   a,e
 ROMB:7178 3D               dec  a
 ROMB:7179 EA 99 CA         ld   (CA99),a       // ($CA99) set to last unit
 ROMB:717C C9               ret                 // ($CA99) has B added to it and modified as necessary to stay within the active player's unit list

 ROMB:717D C5               push bc
 ROMB:717E 3E C0            ld   a,C0
 ROMB:7180 CD 82 4F         call 4F82           // Clears Command Menu data, prepares blank space command (A is first data tile of Commands)
 ROMB:7183 FA 33 C6         ld   a,(C633)
 ROMB:7186 E6 01            and  a,01
 ROMB:7188 4F               ld   c,a
 ROMB:7189 06 00            ld   b,00
 ROMB:718B 21 09 CD         ld   hl,CD09
 ROMB:718E 09               add  hl,bc
 ROMB:718F 7E               ld   a,(hl)
 ROMB:7190 A7               and  a
 ROMB:7191 28 05            jr   z,7198         // Skips next 2 line if active player has no available units
 ROMB:7193 3E 01            ld   a,01           // Unit
 ROMB:7195 CD A6 4F         call 4FA6           // ($C9B6 + menu choice number) = 1, ($C9BE) is incremented
 ROMB:7198 3E 02            ld   a,02           // Intel
 ROMB:719A CD A6 4F         call 4FA6           // ($C9B6 + menu choice number) = 2, ($C9BE) is incremented
 ROMB:719D 3E 03            ld   a,03           // Config
 ROMB:719F CD A6 4F         call 4FA6           // ($C9B6 + menu choice number) = 3, ($C9BE) is incremented
 ROMB:71A2 FA 30 C6         ld   a,(C630)
 ROMB:71A5 FE 01            cp   a,01
 ROMB:71A7 28 07            jr   z,71B0         // Branch for IR Comm
 ROMB:71A9 3E 04            ld   a,04           // Yield
 ROMB:71AB CD A6 4F         call 4FA6           // ($C9B6 + menu choice number) = 4, ($C9BE) is incremented
 ROMB:71AE 18 05            jr   71B5
 ROMB:71B0 3E 1E            ld   a,1E           // Suspend
 ROMB:71B2 CD A6 4F         call 4FA6           // ($C9B6 + menu choice number) = 30, ($C9BE) is incremented
 ROMB:71B5 FA 2F C6         ld   a,(C62F)
 ROMB:71B8 FE 00            cp   a,00           // Beginner?
 ROMB:71BA 28 0A            jr   z,71C6
 ROMB:71BC CD 12 72         call 7212           // Zero Flag set by IR Comm Mode and White Moon active
 ROMB:71BF 28 05            jr   z,71C6
 ROMB:71C1 3E 05            ld   a,05           // Save
 ROMB:71C3 CD A6 4F         call 4FA6           // ($C9B6 + menu choice number) = 5, ($C9BE) is incremented
 ROMB:71C6 3E 06            ld   a,06           // Map
 ROMB:71C8 CD A6 4F         call 4FA6           // ($C9B6 + menu choice number) = 6, ($C9BE) is incremented
 ROMB:71CB 21 55 C6         ld   hl,C655
 ROMB:71CE FA 33 C6         ld   a,(C633)
 ROMB:71D1 E6 01            and  a,01
 ROMB:71D3 28 03            jr   z,71D8
 ROMB:71D5 21 60 C6         ld   hl,C660        // HL is byte location of active player's Communications Towers owned
 ROMB:71D8 7E               ld   a,(hl)
 ROMB:71D9 A7               and  a
 ROMB:71DA 28 0B            jr   z,71E7
 ROMB:71DC EF 11 B1 4D                          // Map Summon check flag checked
 ROMB:71E0 20 05            jr   nz,71E7
 ROMB:71E2 3E 07            ld   a,07           // Summon (requires Comm Tower, limited to 1 Summon per map)
 ROMB:71E4 CD A6 4F         call 4FA6           // ($C9B6 + menu choice number) = 7, ($C9BE) is incremented
 ROMB:71E7 FA 2F C6         ld   a,(C62F)
 ROMB:71EA FE 00            cp   a,00           // Beginner?
 ROMB:71EC 20 05            jr   nz,71F3
 ROMB:71EE 3E 1D            ld   a,1D           // Reset
 ROMB:71F0 CD A6 4F         call 4FA6           // ($C9B6 + menu choice number) = 29, ($C9BE) is incremented
 ROMB:71F3 CD 06 72         call 7206           // Zero Flag set by IR Comm Mode and IR Comm Receiver active
 ROMB:71F6 28 07            jr   z,71FF
 ROMB:71F8 3E 08            ld   a,08           // End Turn
 ROMB:71FA CD A6 4F         call 4FA6           // ($C9B6 + menu choice number) = 8, ($C9BE) is incremented
 ROMB:71FD 18 05            jr   7204
 ROMB:71FF 3E 19            ld   a,19           // Receipt
 ROMB:7201 CD A6 4F         call 4FA6           // ($C9B6 + menu choice number) = 25, ($C9BE) is incremented
 ROMB:7204 C1               pop  bc
 ROMB:7205 C9               ret  
 ROMB:7206 FA 30 C6         ld   a,(C630)
 ROMB:7209 FE 01            cp   a,01
 ROMB:720B C0               ret  nz
 ROMB:720C FA B5 C9         ld   a,(C9B5)
 ROMB:720F FE 01            cp   a,01
 ROMB:7211 C9               ret                 // Zero Flag set by IR Comm Mode and IR Comm Receiver active
 ROMB:7212 FA 30 C6         ld   a,(C630)
 ROMB:7215 FE 01            cp   a,01
 ROMB:7217 C0               ret  nz
 ROMB:7218 FA B5 C9         ld   a,(C9B5)
 ROMB:721B FE 01            cp   a,01
 ROMB:721D C8               ret  z
 ROMB:721E FA 33 C6         ld   a,(C633)
 ROMB:7221 E6 01            and  a,01
 ROMB:7223 FE 01            cp   a,01
 ROMB:7225 C9               ret                 // Zero Flag set by IR Comm Mode and White Moon active (NOTE: IR Comm Receiver is ALWAYS White Moon)
 ROMB:7226 CD 7D 71         call 717D           // Establishes Command Menu options
 ROMB:7229 CD 00 47         call 4700           // set 0,($D000 + ($C98D) * 16) WRAM bank 4
 ROMB:722C CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMB:722F CD 08 51         call 5108           // Places Day Number Window
 ROMB:7232 3E 0B            ld   a,0B
 ROMB:7234 CD 44 38         call 3844
 ROMB:7237 CD C0 4F         call 4FC0           // Controls for Command Menu, ending with A = Map Menu choice if selected, or 0 if backspaced with B button
 ROMB:723A F5               push af
 ROMB:723B CD 5F 51         call 515F           // Restores last table of covered graphics
 ROMB:723E F1               pop  af
 ROMB:723F FE 01            cp   a,01           // Unit
 ROMB:7241 28 34            jr   z,7277
 ROMB:7243 FE 02            cp   a,02           // Intel
 ROMB:7245 28 38            jr   z,727F
 ROMB:7247 FE 03            cp   a,03           // Config
 ROMB:7249 28 39            jr   z,7284
 ROMB:724B FE 04            cp   a,04           // Yield
 ROMB:724D 28 3A            jr   z,7289
 ROMB:724F FE 1E            cp   a,1E           // Suspend
 ROMB:7251 28 41            jr   z,7294
 ROMB:7253 FE 05            cp   a,05           // Save
 ROMB:7255 28 48            jr   z,729F
 ROMB:7257 FE 07            cp   a,07           // Summon
 ROMB:7259 CA A7 72         jp   z,72A7
 ROMB:725C FE 08            cp   a,08           // End Turn
 ROMB:725E CA AC 72         jp   z,72AC
 ROMB:7261 FE 19            cp   a,19           // Receipt
 ROMB:7263 CA B0 72         jp   z,72B0
 ROMB:7266 FE 06            cp   a,06           // Map
 ROMB:7268 28 4C            jr   z,72B6
 ROMB:726A FE 1D            cp   a,1D           // Reset
 ROMB:726C 28 4D            jr   z,72BB
 ROMB:726E 3E 00            ld   a,00           // Map graphics won't have to be reestablished
 ROMB:7270 C9               ret  
 ROMB:7271 3E 01            ld   a,01           // Must reestablish map graphics
 ROMB:7273 C9               ret  
 ROMB:7274 3E 02            ld   a,02           // Closing map
 ROMB:7276 C9               ret  
 ROMB:7277 CD C7 72         call 72C7           // Handles Unit Menu Command; A = 0 for Deploy success, or -1 for any other method of ending usage
 ROMB:727A A7               and  a
 ROMB:727B 28 F1            jr   z,726E         // Unit ends with A = 0 for Deploy success
 ROMB:727D 18 F2            jr   7271           // Unit ends with A = 1 for any other exit method
 ROMB:727F CD 0A 73         call 730A           // Handles Intel Menu Command
 ROMB:7282 18 ED            jr   7271           // Intel ends with A = 1
 ROMB:7284 CD 18 73         call 7318           // Handles Configuration Menu Command
 ROMB:7287 18 E8            jr   7271           // Config ends with A = 1
 ROMB:7289 CD 23 73         call 7323           // Handles Yield confirmation screen
 ROMB:728C FA 94 CA         ld   a,(CA94)
 ROMB:728F A7               and  a
 ROMB:7290 20 DC            jr   nz,726E
 ROMB:7292 18 DD            jr   7271           // Yield ends with either A = 0 (confirmed) or A = 1 (not done)
 ROMB:7294 CD 3E 73         call 733E           // Handles Suspend confirmation screen
 ROMB:7297 FA 94 CA         ld   a,(CA94)       // Victorious Army
 ROMB:729A A7               and  a
 ROMB:729B 20 D1            jr   nz,726E
 ROMB:729D 18 D2            jr   7271           // Suspend ends with either A = 0 (confirmed) or A = 1 (not done)
 ROMB:729F CD 59 73         call 7359           // Handles Save Menu Command; Ends with A = Continue Choice
 ROMB:72A2 A7               and  a              // A would be 1 on Yes, 0 on No
 ROMB:72A3 28 CF            jr   z,7274
 ROMB:72A5 18 CA            jr   7271           // Save ends with either A = 1 (OK) or A = 2 (NO) based on Continue Choice
 ROMB:72A7 CD 86 74         call 7486
 ROMB:72AA 18 C2            jr   726E           // Summon ends with A = 0
 ROMB:72AC CD 3C 74         call 743C           // End Phase stuff, ending with A = IR Comm partner flag
 ROMB:72AF C9               ret                 // End Turn ends with A = IR Comm partner flag
 ROMB:72B0 CD 62 74         call 7462
 ROMB:72B3 C3 71 72         jp   7271           // Receipt ends with A = 1
 ROMB:72B6 CD 13 76         call 7613           // Handles Map Menu Command
 ROMB:72B9 18 B6            jr   7271
 ROMB:72BB CD 7D 73         call 737D           // Handles Redo Menu Command; Ends with A = Choice
 ROMB:72BE A7               and  a
 ROMB:72BF 28 03            jr   z,72C4         // Redo ends with A = 0 for No, A = 3 for Yes
 ROMB:72C1 3E 03            ld   a,03
 ROMB:72C3 C9               ret  
 ROMB:72C4 3E 00            ld   a,00
 ROMB:72C6 C9               ret  
 ROMB:72C7 CD 64 21         call 2164           // Empties $FFB1 and $FFB2
 ROMB:72CA CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMB:72CD 3E 00            ld   a,00
 ROMB:72CF EF 18 B8 6C                          // Controls for Unit List; A = Selected Unit for Deploy or mere selection, or -1 for cancellation or all deletion
 ROMB:72D3 FE FF            cp   a,FF
 ROMB:72D5 28 2C            jr   z,7303         // Ends immediately with A = -1 for cancellation or all units deleted
 ROMB:72D7 57               ld   d,a
 ROMB:72D8 0E 03            ld   c,03
 ROMB:72DA EF 12 66 40                          
 ROMB:72DE CB 4F            bit  1,a
 ROMB:72E0 20 17            jr   nz,72F9        // Jump if Reserve Flag active
 ROMB:72E2 7A               ld   a,d
 ROMB:72E3 0E 01            ld   c,01
 ROMB:72E5 EF 12 66 40                          
 ROMB:72E9 47               ld   b,a
 ROMB:72EA 7A               ld   a,d
 ROMB:72EB 0E 02            ld   c,02
 ROMB:72ED EF 12 66 40                          
 ROMB:72F1 4F               ld   c,a            // BC holds coordinates
 ROMB:72F2 CD CB 7A         call 7ACB           // Establishes view area based on coordinates BC, then cursor's within view and overall coordinates, and finally cursor's sprite grapics location center
 ROMB:72F5 3E FF            ld   a,FF
 ROMB:72F7 18 0A            jr   7303
 ROMB:72F9 7A               ld   a,d
 ROMB:72FA EF 0C 89 7B                          // Controls for Reserve Unit Summoning; ends with A = 0 for success with A Button press, or -1 for B Button press (A = Unit #)
 ROMB:72FE A7               and  a
 ROMB:72FF 28 02            jr   z,7303
 ROMB:7301 18 C4            jr   72C7           // Restarts entire procedure for B Button press
 ROMB:7303 F5               push af
 ROMB:7304 EF 0D 76 67                          // Sets current phase music
 ROMB:7308 F1               pop  af
 ROMB:7309 C9               ret                 // Handles Unit Menu Command; A = 0 for Deploy success, or -1 for any other method of ending usage
 ROMB:730A CD 64 21         call 2164           // Empties $FFB1 and $FFB2
 ROMB:730D CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMB:7310 CD 2F 7C         call 7C2F           // Establishes income values
 ROMB:7313 EF 27 AB 62                          // Controls for Map Intel screen; ends with A = 0 for A Button press, or -1 for B Button press
 ROMB:7317 C9               ret                 // Handles Intel Menu Command
 ROMB:7318 CD 64 21         call 2164           // Empties $FFB1 and $FFB2
 ROMB:731B CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMB:731E EF 15 2B 41                          // Controls for Configuration menu
 ROMB:7322 C9               ret                 // Handles Configuration Menu Command
 ROMB:7323 CD 64 21         call 2164           // Empties $FFB1 and $FFB2
 ROMB:7326 EF 27 EB 79                          // Controls for Yield confirmation screen; ends with A = 1 for "OK", 0 for "NO", or -1 for cancellation
 ROMB:732A FE 01            cp   a,01
 ROMB:732C C0               ret  nz             // Ends immediately if A != 1
 ROMB:732D 3E 03            ld   a,03
 ROMB:732F EA 95 CA         ld   (CA95),a
 ROMB:7332 FA 33 C6         ld   a,(C633)
 ROMB:7335 E6 01            and  a,01
 ROMB:7337 EE 01            xor  a,01
 ROMB:7339 3C               inc  a
 ROMB:733A EA 94 CA         ld   (CA94),a
 ROMB:733D C9               ret                 // If Yield confirmed, Winning Army and Victory reason are set
 ROMB:733E CD 64 21         call 2164           // Empties $FFB1 and $FFB2
 ROMB:7341 EF 31 EE 7E                          // Controls for Suspend confirmation screen; ends with A = 1 for "OK", 0 for "NO", or -1 for cancellation
 ROMB:7345 FE 01            cp   a,01
 ROMB:7347 C0               ret  nz             // Ends immediately if A != 1
 ROMB:7348 3E 03            ld   a,03
 ROMB:734A EA 95 CA         ld   (CA95),a
 ROMB:734D FA 33 C6         ld   a,(C633)
 ROMB:7350 E6 01            and  a,01
 ROMB:7352 EE 01            xor  a,01
 ROMB:7354 3C               inc  a
 ROMB:7355 EA 94 CA         ld   (CA94),a
 ROMB:7358 C9               ret                 // If Suspend confirmed, Winning Army and Victory reason are set
 ROMB:7359 FA 2F C6         ld   a,(C62F)
 ROMB:735C FE 03            cp   a,03
 ROMB:735E 38 09            jr   c,7369         // Jump if single player mode
 ROMB:7360 CD 64 21         call 2164           // Empties $FFB1 and $FFB2
 ROMB:7363 EF 15 DE 5E                          // VS Save Prompt master control, ending with A = Save Choice
 ROMB:7367 18 0F            jr   7378
 ROMB:7369 CD 64 21         call 2164           // Empties $FFB1 and $FFB2
 ROMB:736C CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMB:736F 3E 01            ld   a,01
 ROMB:7371 EA 9A CC         ld   (CC9A),a
 ROMB:7374 EF 14 39 4B                          // File Menu managed under Save
 ROMB:7378 EF 27 6E 7F                          // Continue Game Prompt Master Control, ending with A = Decision
 ROMB:737C C9               ret                 // Handles Save Menu Command; Ends with A = Choice
 ROMB:737D CD 00 47         call 4700           // set 0,($D000 + ($C98D) * 16) WRAM bank 4
 ROMB:7380 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMB:7383 CD D2 04         call 04D2           // Next frame
 ROMB:7386 EF 01 FC 40                          // Graphics holding: VRA0($8600) to VRA0($87FF) holds Hiragana up to "ma", then VRA0($8D00) to ($8FFF) holds rest of Hiragana
 ROMB:738A 01 20 00         ld   bc,0020
 ROMB:738D 11 05 14         ld   de,1405
 ROMB:7390 EF 10 09 6A                          // Tile placement and coloring handled for [$9C00] table size 20x5 using [$DC6C] and [$DC6D] as the base
 ROMB:7394 21 1F 74         ld   hl,741F        // "Redo this map?"
 ROMB:7397 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMB:739A 21 31 74         ld   hl,7431        // No
 ROMB:739D CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMB:73A0 21 37 74         ld   hl,7437        // Yes
 ROMB:73A3 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMB:73A6 3E 68            ld   a,68
 ROMB:73A8 CD 22 48         call 4822           // Window scrolls up 4 pixels per frame from Y = 152 to Y = A (A must be a multiple of 4 to avoid an infinite loop error)
 ROMB:73AB AF               xor  a
 ROMB:73AC EA 21 C0         ld   (C021),a
 ROMB:73AF 3E 55            ld   a,55           // Character #85 would be the Choice Arrow
 ROMB:73B1 CD 08 74         call 7408           // Establishes Window Tile 8,2 with Choice Arrow
 ROMB:73B4 CD A2 05         call 05A2           // Button update, next frame (button check loop begins here)
 ROMB:73B7 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMB:73BA F0 92            ld   a,(ff00+92)
 ROMB:73BC CB 7F            bit  7,a            // Down
 ROMB:73BE 20 2F            jr   nz,73EF
 ROMB:73C0 CB 77            bit  6,a            // Up
 ROMB:73C2 20 2B            jr   nz,73EF
 ROMB:73C4 CB 47            bit  0,a            // A
 ROMB:73C6 20 12            jr   nz,73DA
 ROMB:73C8 CB 4F            bit  1,a            // B
 ROMB:73CA 20 02            jr   nz,73CE
 ROMB:73CC 18 E6            jr   73B4
 ROMB:73CE 3E 0C            ld   a,0C
 ROMB:73D0 CD 44 38         call 3844
 ROMB:73D3 3E 00            ld   a,00
 ROMB:73D5 EA 21 C0         ld   (C021),a
 ROMB:73D8 18 05            jr   73DF           // Jumps to finishing portion with choice of "No" (B Button press ends here)
 ROMB:73DA 3E 02            ld   a,02
 ROMB:73DC CD 44 38         call 3844
 ROMB:73DF EF 0B 60 48                          // Shuts off Window Display, LCD STAT Interrupt, and LYC=LY Coincidence Interrupt
 ROMB:73E3 EF 0B 21 46                          // Sets up Cursor tiles in VRA0 tiles 96~122
 ROMB:73E7 EF 0B F9 46                          // res 0,WRA4[$D000 + ($C98D) * 16]
 ROMB:73EB FA 21 C0         ld   a,(C021)
 ROMB:73EE C9               ret                 // Ends with A = Choice for Map Menu
 ROMB:73EF AF               xor  a
 ROMB:73F0 CD 08 74         call 7408           // Establishes Window Tile 8,2+($C021)%2 with Blank
 ROMB:73F3 FA 21 C0         ld   a,(C021)
 ROMB:73F6 3C               inc  a
 ROMB:73F7 E6 01            and  a,01
 ROMB:73F9 EA 21 C0         ld   (C021),a
 ROMB:73FC 3E 55            ld   a,55
 ROMB:73FE CD 08 74         call 7408           // Establishes Window Tile 8,3-($C021)%2 with Choice Arrow
 ROMB:7401 3E 01            ld   a,01
 ROMB:7403 CD 44 38         call 3844
 ROMB:7406 18 AC            jr   73B4
 ROMB:7408 F5               push af
 ROMB:7409 FA 21 C0         ld   a,(C021)
 ROMB:740C 87               add  a
 ROMB:740D 21 1B 74         ld   hl,741B
 ROMB:7410 CD BC 29         call 29BC           // HL += A
 ROMB:7413 46               ld   b,(hl)
 ROMB:7414 23               inc  hl
 ROMB:7415 4E               ld   c,(hl)         // BC holds tile coordinates of Choice Arrow
 ROMB:7416 F1               pop  af
 ROMB:7417 CD ED 34         call 34ED           // [$C300 + [$FFC8]] 3 byte holds: 1, B + C%8 * 32, 152 + C / 8, A; [$FFCA] incremented
 ROMB:741A C9               ret                 // Establishes Window Tile 8,2+($C021)%2 with character A

 ROMB:741B 08 22
 ROMB:741D 08 23

 ROMB:741F 01 21
 ROMB:7421 6A 79 20 50 45 60 80 D4 D8 75 65 6C 7F 6D 66 00
 ROMB:7431 09 22
 ROMB:7433 62 62 64 00
 ROMB:7437 09 23
 ROMB:7439 7A 62 00

 ROMB:743C EF 0C B4 72                          // Phase end cursor defaulting with accommodating sounds, ($CA97) defaulted to 1
 ROMB:7440 FA 30 C6         ld   a,(C630)
 ROMB:7443 A7               and  a
 ROMB:7444 20 06            jr   nz,744C        // Jumps for IR Comm partner
 ROMB:7446 CD 6D 74         call 746D           // Resets End Turn flags, increments phase number, sets alert for start of phase stuff
 ROMB:7449 3E 00            ld   a,00
 ROMB:744B C9               ret  
 ROMB:744C EF 0C C4 69                          // Online snail mail mess
 ROMB:7450 A7               and  a
 ROMB:7451 20 0C            jr   nz,745F        // End immediately (with A = 1) if no signal
 ROMB:7453 FA 33 C6         ld   a,(C633)
 ROMB:7456 E6 01            and  a,01
 ROMB:7458 EF 12 97 45                          // Resets End Turn flags for the player's units and their respective tiles
 ROMB:745C CD 8A 42         call 428A           // Establishes all on-screen tiles' entire graphics
 ROMB:745F 3E 01            ld   a,01
 ROMB:7461 C9               ret                 // End Phase stuff, ending with A = IR Comm partner flag
 ROMB:7462 EF 0C C4 69                          // Online snail mail mess
 ROMB:7466 A7               and  a
 ROMB:7467 20 03            jr   nz,746C        // End immediately with A = 1 if no signal
 ROMB:7469 CD 6D 74         call 746D           // Resets End Turn flags, increments phase number, sets alert for start of phase stuff
 ROMB:746C C9               ret  
 ROMB:746D FA 33 C6         ld   a,(C633)
 ROMB:7470 E6 01            and  a,01
 ROMB:7472 EF 12 97 45                          // Resets End Turn flags for the player's units and their respective tiles
 ROMB:7476 CD 8A 42         call 428A           // Establishes all on-screen tiles' entire graphics
 ROMB:7479 3E 00            ld   a,00
 ROMB:747B EA 97 C9         ld   (C997),a
 ROMB:747E FA 33 C6         ld   a,(C633)
 ROMB:7481 3C               inc  a
 ROMB:7482 EA 33 C6         ld   (C633),a       // Increment ($C633)
 ROMB:7485 C9               ret                 // Resets End Turn flags, increments phase number, sets alert for start of phase stuff
 ROMB:7486 FA 33 C6         ld   a,(C633)
 ROMB:7489 E6 01            and  a,01
 ROMB:748B 21 09 CD         ld   hl,CD09
 ROMB:748E CD BC 29         call 29BC           // HL += A
 ROMB:7491 7E               ld   a,(hl)         // Active player's unit headcount
 ROMB:7492 FE 32            cp   a,32
 ROMB:7494 28 52            jr   z,74E8
 ROMB:7496 CD 07 59         call 5907           // Mercenary Unit purchase window management
 ROMB:7499 FE FF            cp   a,FF
 ROMB:749B 28 5C            jr   z,74F9         // End immediately if B was pressed
 ROMB:749D EA 40 C9         ld   (C940),a       // Sets Unit Type choice
 ROMB:74A0 CD 64 21         call 2164           // Empties $FFB1 and $FFB2
 ROMB:74A3 FA 40 C9         ld   a,(C940)
 ROMB:74A6 CB 3F            srl  a              // Unit Type
 ROMB:74A8 EA A1 C4         ld   (C4A1),a
 ROMB:74AB FA 33 C6         ld   a,(C633)
 ROMB:74AE E6 01            and  a,01
 ROMB:74B0 EA A0 C4         ld   (C4A0),a       // Active player
 ROMB:74B3 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMB:74B6 EF 1A 00 40                          
 ROMB:74BA F5               push af
 ROMB:74BB EF 0B E6 69                          // Reestablishes map graphics
 ROMB:74BF F1               pop  af
 ROMB:74C0 A7               and  a
 ROMB:74C1 20 36            jr   nz,74F9        // End immediately on nonzero number (Summon failed)
 ROMB:74C3 01 00 00         ld   bc,0000
 ROMB:74C6 FA 40 C9         ld   a,(C940)
 ROMB:74C9 EF 12 41 42                          // Units built incremented by 1, cap of 65,535
 ROMB:74CD EF 12 E3 41                          // Establishes newly created unit's stats with first available unit slot
 ROMB:74D1 F5               push af
 ROMB:74D2 EF 12 85 45                          // Unit's End Turn Flag Set
 ROMB:74D6 FA 40 C9         ld   a,(C940)
 ROMB:74D9 EF 11 3F 4D                          // All Unit Medal progress flag for unit Set as necessary
 ROMB:74DD EF 11 A8 4D                          // Map Summon check flag turned on
 ROMB:74E1 F1               pop  af
 ROMB:74E2 EF 0C B4 7C                          // Controls for Summon Map Menu Command; A = -1 for B Button press, or 0 for A Button press with success allowed by ANY valid movement tile--Hello, Mercenary Missile Frigate on a map without a Harbor (A is Unit #)
 ROMB:74E6 18 11            jr   74F9
 ROMB:74E8 3E 03            ld   a,03
 ROMB:74EA CD 44 38         call 3844
 ROMB:74ED 3E 14            ld   a,14           // Units Max
 ROMB:74EF CD CD 51         call 51CD           // Handles Popup Message graphics (A is Popup Message #)
 ROMB:74F2 18 05            jr   74F9
 ROMB:74F4 3E 03            ld   a,03
 ROMB:74F6 CD 44 38         call 3844
 ROMB:74F9 C9               ret  
 ROMB:74FA CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMB:74FD CD A2 05         call 05A2           // Button update, next frame
 ROMB:7500 CD 0A 75         call 750A           // Establishes ($CA91) with buttons considered active with camera movement buffer
 ROMB:7503 CD 71 45         call 4571           // Handles new View area coordinates and scroll
 ROMB:7506 CD C1 45         call 45C1           // Establishes cursor's overall coordinates and then cursor's sprite graphics location center
 ROMB:7509 C9               ret                 // General map view graphics update
 ROMB:750A F0 92            ld   a,(ff00+92)
 ROMB:750C EA 91 CA         ld   (CA91),a       // ($CA91) has controls considered active
 ROMB:750F F0 AC            ld   a,(ff00+AC)
 ROMB:7511 CB 7F            bit  7,a
 ROMB:7513 28 0F            jr   z,7524         // Ends immediately if camera has no need for moving
 ROMB:7515 CD A2 05         call 05A2           // Button update, next frame
 ROMB:7518 F0 92            ld   a,(ff00+92)
 ROMB:751A 47               ld   b,a
 ROMB:751B FA 91 CA         ld   a,(CA91)
 ROMB:751E B0               or   b
 ROMB:751F EA 91 CA         ld   (CA91),a       // ($CA91) works as button buffer
 ROMB:7522 18 EB            jr   750F
 ROMB:7524 C9               ret                 // Establishes ($CA91) with buttons considered active with camera movement buffer
 ROMB:7525 C5               push bc
 ROMB:7526 FA 8F C9         ld   a,(C98F)
 ROMB:7529 FE 06            cp   a,06
 ROMB:752B 38 25            jr   c,7552         // End with simple increase to X coordinate within view if it is 0 to 5
 ROMB:752D FA 89 C9         ld   a,(C989)
 ROMB:7530 D6 09            sub  a,09
 ROMB:7532 21 8B C9         ld   hl,C98B
 ROMB:7535 BE               cp   (hl)
 ROMB:7536 28 1A            jr   z,7552         // End with general increase to X coordinate within view if view won't shift any further to the right
 ROMB:7538 F0 AC            ld   a,(ff00+AC)
 ROMB:753A CB CF            set  1,a
 ROMB:753C E0 AC            ld   (ff00+AC),a    // set 1,($FFAC)
 ROMB:753E FA 8B C9         ld   a,(C98B)
 ROMB:7541 C6 0A            add  a,0A
 ROMB:7543 47               ld   b,a
 ROMB:7544 FA 8C C9         ld   a,(C98C)
 ROMB:7547 4F               ld   c,a
 ROMB:7548 CD 5D 45         call 455D           // set 7,($FFAC); ($FFAD) 3 byte holds in order: ($C98B) + 10, ($C98C), 9
 ROMB:754B 3E 09            ld   a,09
 ROMB:754D CD 44 38         call 3844
 ROMB:7550 18 10            jr   7562
 ROMB:7552 FA 8F C9         ld   a,(C98F)
 ROMB:7555 3C               inc  a
 ROMB:7556 FE 09            cp   a,09
 ROMB:7558 28 08            jr   z,7562         // End immediately without further update if cursor can't move further right
 ROMB:755A EA 8F C9         ld   (C98F),a
 ROMB:755D 3E 09            ld   a,09
 ROMB:755F CD 44 38         call 3844
 ROMB:7562 C1               pop  bc
 ROMB:7563 C9               ret                 // If view will shift right: ($FFAC) 4 byte holds: OR ($FFAC),$82, ($C98B) + 10, ($C98C), 9; if not, general increase to X coordinate within view
 ROMB:7564 C5               push bc
 ROMB:7565 FA 8F C9         ld   a,(C98F)
 ROMB:7568 FE 04            cp   a,04
 ROMB:756A 30 1F            jr   nc,758B        // End with simple decrease to X coordinate within view if it is 4 to 8
 ROMB:756C FA 8B C9         ld   a,(C98B)
 ROMB:756F A7               and  a
 ROMB:7570 28 19            jr   z,758B         // End with general decrease to X coordinate within view if view won't shift any further to the left
 ROMB:7572 F0 AC            ld   a,(ff00+AC)
 ROMB:7574 CB C7            set  0,a
 ROMB:7576 E0 AC            ld   (ff00+AC),a    // set 0,($FFAC)
 ROMB:7578 FA 8B C9         ld   a,(C98B)
 ROMB:757B 3D               dec  a
 ROMB:757C 47               ld   b,a
 ROMB:757D FA 8C C9         ld   a,(C98C)
 ROMB:7580 4F               ld   c,a
 ROMB:7581 CD 5D 45         call 455D           // set 7,($FFAC); ($FFAD) 3 byte holds in order: ($C98B) - 1, ($C98C), 9
 ROMB:7584 3E 09            ld   a,09
 ROMB:7586 CD 44 38         call 3844
 ROMB:7589 18 0F            jr   759A
 ROMB:758B FA 8F C9         ld   a,(C98F)
 ROMB:758E A7               and  a
 ROMB:758F 28 09            jr   z,759A         // End immediately without further update if cursor can't move further left
 ROMB:7591 3D               dec  a
 ROMB:7592 EA 8F C9         ld   (C98F),a
 ROMB:7595 3E 09            ld   a,09
 ROMB:7597 CD 44 38         call 3844
 ROMB:759A C1               pop  bc
 ROMB:759B C9               ret                 // If view will shift left: ($FFAC) 4 byte holds: OR ($FFAC),$81, ($C98B) - 1, ($C98C), 9; if not, general decrease to X coordinate within view
 ROMB:759C C5               push bc
 ROMB:759D FA 90 C9         ld   a,(C990)
 ROMB:75A0 FE 06            cp   a,06
 ROMB:75A2 38 25            jr   c,75C9         // End with simple increase to Y coordinate within view if it is 0 to 5
 ROMB:75A4 FA 8A C9         ld   a,(C98A)
 ROMB:75A7 D6 09            sub  a,09
 ROMB:75A9 21 8C C9         ld   hl,C98C
 ROMB:75AC BE               cp   (hl)
 ROMB:75AD 28 1A            jr   z,75C9         // End with general increase to Y coordinate within view if view won't shift any further down
 ROMB:75AF F0 AC            ld   a,(ff00+AC)
 ROMB:75B1 CB DF            set  3,a
 ROMB:75B3 E0 AC            ld   (ff00+AC),a    // set 3,($FFAC)
 ROMB:75B5 FA 8B C9         ld   a,(C98B)
 ROMB:75B8 47               ld   b,a
 ROMB:75B9 FA 8C C9         ld   a,(C98C)
 ROMB:75BC C6 09            add  a,09
 ROMB:75BE 4F               ld   c,a
 ROMB:75BF CD 51 45         call 4551           // set 7,($FFAC); ($FFAD) 3 byte holds in order: ($C98B) - (($C98C)%2), ($C98C) + 9, 10 + (($C98C)%2)
 ROMB:75C2 3E 09            ld   a,09
 ROMB:75C4 CD 44 38         call 3844
 ROMB:75C7 18 10            jr   75D9
 ROMB:75C9 FA 90 C9         ld   a,(C990)
 ROMB:75CC 3C               inc  a
 ROMB:75CD FE 09            cp   a,09
 ROMB:75CF 28 08            jr   z,75D9
 ROMB:75D1 EA 90 C9         ld   (C990),a
 ROMB:75D4 3E 09            ld   a,09
 ROMB:75D6 CD 44 38         call 3844
 ROMB:75D9 C1               pop  bc
 ROMB:75DA C9               ret                 // If view will shift down: ($FFAC) 4 byte holds: OR ($FFAC),$88, ($C98B) - (($C98C)%2), ($C98C) + 9, 10 + (($C98C)%2); if not, general increase to Y coordinate within view
 ROMB:75DB C5               push bc
 ROMB:75DC FA 90 C9         ld   a,(C990)
 ROMB:75DF FE 03            cp   a,03
 ROMB:75E1 30 1F            jr   nc,7602        // End with simple decrease to Y coordinate within view if it is 3 to 8
 ROMB:75E3 FA 8C C9         ld   a,(C98C)
 ROMB:75E6 A7               and  a
 ROMB:75E7 28 19            jr   z,7602         // End with general decrease to Y coordinate within view if view won't shift any further up
 ROMB:75E9 F0 AC            ld   a,(ff00+AC)
 ROMB:75EB CB D7            set  2,a
 ROMB:75ED E0 AC            ld   (ff00+AC),a    // set 2,($FFAC)
 ROMB:75EF FA 8B C9         ld   a,(C98B)
 ROMB:75F2 47               ld   b,a
 ROMB:75F3 FA 8C C9         ld   a,(C98C)
 ROMB:75F6 3D               dec  a
 ROMB:75F7 4F               ld   c,a
 ROMB:75F8 CD 51 45         call 4551           // set 7,($FFAC); ($FFAD) 3 byte holds in order: ($C98B) - (($C98C)%2), ($C98C) - 1, 10 + (($C98C)%2)
 ROMB:75FB 3E 09            ld   a,09
 ROMB:75FD CD 44 38         call 3844
 ROMB:7600 18 0F            jr   7611
 ROMB:7602 FA 90 C9         ld   a,(C990)
 ROMB:7605 A7               and  a
 ROMB:7606 28 09            jr   z,7611
 ROMB:7608 3D               dec  a
 ROMB:7609 EA 90 C9         ld   (C990),a
 ROMB:760C 3E 09            ld   a,09
 ROMB:760E CD 44 38         call 3844
 ROMB:7611 C1               pop  bc
 ROMB:7612 C9               ret                 // If view will shift up: ($FFAC) 4 byte holds: OR ($FFAC),$84, ($C98B) - (($C98C)%2), ($C98C) - 1, 10 + (($C98C)%2); if not, general decrease to Y coordinate within view
 ROMB:7613 CD 64 21         call 2164           // Empties $FFB1 and $FFB2
 ROMB:7616 CD 4D 46         call 464D           // Handles clear-up of Cursor Sprite
 ROMB:7619 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMB:761C CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMB:761F CD BC 52         call 52BC           // Zoomed out map view controls, ending with A = -1 for B Button, or 0 for A Button; latter has BC as view selection center tile
 ROMB:7622 FE FF            cp   a,FF
 ROMB:7624 CA 2A 76         jp   z,762A         // End immediately if Zoomed out map view was ended by B button press
 ROMB:7627 CD CB 7A         call 7ACB           // Establishes view area based on coordinates BC, then cursor's within view and overall coordinates, and finally cursor's sprite grapics location center
 ROMB:762A C9               ret                 // Handles Map Menu Command
 ROMB:762B 3E FF            ld   a,FF
 ROMB:762D EA 9A CA         ld   (CA9A),a
 ROMB:7630 EA 9B CA         ld   (CA9B),a
 ROMB:7633 EA 9C CA         ld   (CA9C),a
 ROMB:7636 EA 9D CA         ld   (CA9D),a
 ROMB:7639 EA 9E CA         ld   (CA9E),a
 ROMB:763C C9               ret                 // ($CA9A) to ($CA9E) set to -1
 ROMB:763D CD 4A 76         call 764A           // B = (($FF95)/8 + B) % 32; C = (($FF96)/8 + C) % 32
 ROMB:7640 EF 10 0C 69                          // Sets up next table of covered graphics within late WRA4 Bank (BC is starting location, DE is size)
 ROMB:7644 C9               ret                 // Sets up next table of covered graphics within late WRA4 Bank (BC is starting location relative to scroll, DE is size)
 ROMB:7645 EF 10 8E 69                          // Restores last table of covered graphics
 ROMB:7649 C9               ret  
 ROMB:764A F0 95            ld   a,(ff00+95)
 ROMB:764C 0F               rrca 
 ROMB:764D 0F               rrca 
 ROMB:764E 0F               rrca 
 ROMB:764F 80               add  b
 ROMB:7650 E6 1F            and  a,1F
 ROMB:7652 47               ld   b,a            // B = B%32 + SCX / 8
 ROMB:7653 F0 96            ld   a,(ff00+96)
 ROMB:7655 0F               rrca 
 ROMB:7656 0F               rrca 
 ROMB:7657 0F               rrca 
 ROMB:7658 81               add  c
 ROMB:7659 E6 1F            and  a,1F
 ROMB:765B 4F               ld   c,a            // C = C%32 + SCY / 8
 ROMB:765C C9               ret                 // B = (($FF95)/8 + B) % 32; C = (($FF96)/8 + C) % 32
 ROMB:765D C5               push bc
 ROMB:765E E5               push hl
 ROMB:765F 21 78 58         ld   hl,5878
 ROMB:7662 06 03            ld   b,03
 ROMB:7664 0E 01            ld   c,01
 ROMB:7666 CD D9 06         call 06D9           // ($C4E0 + A * 8) to ($C4F7 + A * 8) hold 01:($5878) to 01:($588F)
 ROMB:7669 E1               pop  hl
 ROMB:766A C1               pop  bc
 ROMB:766B C9               ret                 // Establishes faction color palettes in ($C4E0) table (A is number of palettes skipped in table)
 ROMB:766C E5               push hl
 ROMB:766D 57               ld   d,a
 ROMB:766E 0E 00            ld   c,00
 ROMB:7670 EF 12 66 40                          // A = Unit Type
 ROMB:7674 E1               pop  hl
 ROMB:7675 C6 34            add  a,34
 ROMB:7677 C5               push bc
 ROMB:7678 D5               push de
 ROMB:7679 E5               push hl
 ROMB:767A E5               push hl
 ROMB:767B F5               push af
 ROMB:767C CD 07 16         call 1607           // HL = $1C6C + A * 8
 ROMB:767F 54               ld   d,h
 ROMB:7680 5D               ld   e,l
 ROMB:7681 06 04            ld   b,04
 ROMB:7683 F1               pop  af
 ROMB:7684 E1               pop  hl
 ROMB:7685 FE 34            cp   a,34
 ROMB:7687 30 0B            jr   nc,7694        // Jump for unit
 ROMB:7689 1A               ld   a,(de)
 ROMB:768A 13               inc  de
 ROMB:768B 13               inc  de
 ROMB:768C CD A1 76         call 76A1           // (HL ~ HL+15) = 01:($5268+A*16 ~ $5268+A*16+15)
 ROMB:768F 05               dec  b
 ROMB:7690 20 F7            jr   nz,7689        // (HL ~ HL+63) holds terrain map graphics
 ROMB:7692 18 09            jr   769D
 ROMB:7694 1A               ld   a,(de)
 ROMB:7695 13               inc  de
 ROMB:7696 13               inc  de
 ROMB:7697 CD AA 76         call 76AA           // (HL ~ HL+15) = 01:($5898+A*16 ~ $5898+A*16+15)
 ROMB:769A 05               dec  b
 ROMB:769B 20 F7            jr   nz,7694        // (HL ~ HL+63) holds unit map graphics
 ROMB:769D E1               pop  hl
 ROMB:769E D1               pop  de
 ROMB:769F C1               pop  bc
 ROMB:76A0 C9               ret  
 ROMB:76A1 D5               push de
 ROMB:76A2 11 68 52         ld   de,5268
 ROMB:76A5 CD B3 76         call 76B3           // (HL ~ HL+15) = 01:($5268+A*16 ~ $5268+A*16+15)
 ROMB:76A8 D1               pop  de
 ROMB:76A9 C9               ret  
 ROMB:76AA D5               push de
 ROMB:76AB 11 98 58         ld   de,5898
 ROMB:76AE CD B3 76         call 76B3           // (HL ~ HL+15) = 01:($5898+A*16 ~ $5898+A*16+15)
 ROMB:76B1 D1               pop  de
 ROMB:76B2 C9               ret  
 ROMB:76B3 C5               push bc
 ROMB:76B4 E5               push hl
 ROMB:76B5 6F               ld   l,a
 ROMB:76B6 26 00            ld   h,00
 ROMB:76B8 29               add  hl,hl
 ROMB:76B9 29               add  hl,hl
 ROMB:76BA 29               add  hl,hl
 ROMB:76BB 29               add  hl,hl
 ROMB:76BC 19               add  hl,de
 ROMB:76BD 54               ld   d,h
 ROMB:76BE 5D               ld   e,l            // DE = DE + A * 16
 ROMB:76BF E1               pop  hl
 ROMB:76C0 01 10 00         ld   bc,0010
 ROMB:76C3 EF 01 59 3B                          // (HL ~ HL+BC-1) = (DE ~ DE+BC-1)
 ROMB:76C7 C1               pop  bc
 ROMB:76C8 C9               ret                 // (HL ~ HL+15) = 01:(DE+A*16 ~ DE+A*16+15)
 ROMB:76C9 F5               push af
 ROMB:76CA 7A               ld   a,d
 ROMB:76CB C6 34            add  a,34
 ROMB:76CD 57               ld   d,a
 ROMB:76CE F1               pop  af
 ROMB:76CF C5               push bc
 ROMB:76D0 D5               push de
 ROMB:76D1 E5               push hl
 ROMB:76D2 CD 2E 77         call 772E           // $CAA1 4 byte holds palettes for tile (B is VRAM Bank, C is first palette + 3, D is terrain/unit type)
 ROMB:76D5 5F               ld   e,a
 ROMB:76D6 16 00            ld   d,00
 ROMB:76D8 01 A1 CA         ld   bc,CAA1
 ROMB:76DB 3E 00            ld   a,00           // Loop begins here
 ROMB:76DD E0 83            ld   (ff00+83),a
 ROMB:76DF E0 4F            ld   (ff00+4F),a    // VRA0
 ROMB:76E1 7B               ld   a,e
 ROMB:76E2 CD 2D 0F         call 0F2D           // (HL) = A with cooldown based on bit 1,($FF41)
 ROMB:76E5 3E 01            ld   a,01
 ROMB:76E7 E0 83            ld   (ff00+83),a
 ROMB:76E9 E0 4F            ld   (ff00+4F),a    // VRA1
 ROMB:76EB 0A               ld   a,(bc)
 ROMB:76EC CD 2D 0F         call 0F2D           // (HL) = A with cooldown based on bit 1,($FF41)
 ROMB:76EF 03               inc  bc
 ROMB:76F0 1C               inc  e
 ROMB:76F1 14               inc  d
 ROMB:76F2 7A               ld   a,d
 ROMB:76F3 FE 04            cp   a,04
 ROMB:76F5 28 08            jr   z,76FF         // Ends immediately after 4 cycles
 ROMB:76F7 D5               push de
 ROMB:76F8 7A               ld   a,d
 ROMB:76F9 CD 03 77         call 7703           // Sets HL to next used tile's location (A is already used tiles)
 ROMB:76FC D1               pop  de
 ROMB:76FD 18 DC            jr   76DB
 ROMB:76FF E1               pop  hl
 ROMB:7700 D1               pop  de
 ROMB:7701 C1               pop  bc
 ROMB:7702 C9               ret                 // Establishes terrain/unit graphics at HL (A is tile location on character base, B is palette's VRAM bank, C is first palette + 3, D is terrain/unit type)
 ROMB:7703 FE 01            cp   a,01
 ROMB:7705 28 04            jr   z,770B
 ROMB:7707 FE 02            cp   a,02
 ROMB:7709 28 0B            jr   z,7716         // Branches for A = 2
 ROMB:770B 7D               ld   a,l
 ROMB:770C E6 E0            and  a,E0
 ROMB:770E 57               ld   d,a            // D = AND L,$E0
 ROMB:770F 7D               ld   a,l
 ROMB:7710 3C               inc  a
 ROMB:7711 E6 1F            and  a,1F
 ROMB:7713 B2               or   d
 ROMB:7714 6F               ld   l,a
 ROMB:7715 C9               ret  
 ROMB:7716 7D               ld   a,l
 ROMB:7717 E6 E0            and  a,E0
 ROMB:7719 57               ld   d,a            // D = AND L,$E0
 ROMB:771A 7D               ld   a,l
 ROMB:771B 3D               dec  a
 ROMB:771C E6 1F            and  a,1F
 ROMB:771E B2               or   d
 ROMB:771F 6F               ld   l,a
 ROMB:7720 7C               ld   a,h
 ROMB:7721 11 20 00         ld   de,0020
 ROMB:7724 19               add  hl,de
 ROMB:7725 FE 9C            cp   a,9C
 ROMB:7727 30 04            jr   nc,772D
 ROMB:7729 7C               ld   a,h
 ROMB:772A E6 9B            and  a,9B
 ROMB:772C 67               ld   h,a
 ROMB:772D C9               ret                 // Sets HL to next used tile's location (A is already used tiles)
 ROMB:772E F5               push af
 ROMB:772F C5               push bc
 ROMB:7730 D5               push de
 ROMB:7731 E5               push hl
 ROMB:7732 6A               ld   l,d
 ROMB:7733 CB 20            sla  b
 ROMB:7735 CB 20            sla  b
 ROMB:7737 CB 20            sla  b
 ROMB:7739 78               ld   a,b
 ROMB:773A B1               or   c
 ROMB:773B 4F               ld   c,a            // C = C OR B * 8
 ROMB:773C 7D               ld   a,l
 ROMB:773D CD 07 16         call 1607           // HL = $1C6C + D * 8
 ROMB:7740 23               inc  hl
 ROMB:7741 11 A1 CA         ld   de,CAA1
 ROMB:7744 06 04            ld   b,04
 ROMB:7746 D5               push de             // Loop begins here
 ROMB:7747 2A               ldi  a,(hl)
 ROMB:7748 23               inc  hl
 ROMB:7749 57               ld   d,a
 ROMB:774A E6 F0            and  a,F0
 ROMB:774C B1               or   c
 ROMB:774D 5F               ld   e,a            // E = C with VRAM bank marked by B and miscellaneous attributes marked by (Updated HL) Upper
 ROMB:774E 7A               ld   a,d
 ROMB:774F E6 07            and  a,07
 ROMB:7751 D6 03            sub  a,03
 ROMB:7753 83               add  e
 ROMB:7754 D1               pop  de
 ROMB:7755 12               ld   (de),a
 ROMB:7756 13               inc  de
 ROMB:7757 05               dec  b
 ROMB:7758 20 EC            jr   nz,7746
 ROMB:775A E1               pop  hl
 ROMB:775B D1               pop  de
 ROMB:775C C1               pop  bc
 ROMB:775D F1               pop  af
 ROMB:775E C9               ret                 // $CAA1 4 byte holds palettes for tile (B is VRAM Bank, C is first palette + 3, D is terrain/unit type)

 ROMB:775F 01 1F 01         ld   bc,011F
 ROMB:7762 00               nop  

 ROMB:7763 FA 9A CA         ld   a,(CA9A)
 ROMB:7766 FE FF            cp   a,FF
 ROMB:7768 C0               ret  nz
 ROMB:7769 C5               push bc
 ROMB:776A E5               push hl
 ROMB:776B 11 6C 78         ld   de,786C
 ROMB:776E 06 0B            ld   b,0B
 ROMB:7770 0E 00            ld   c,00
 ROMB:7772 3E 20            ld   a,20
 ROMB:7774 CD E8 2D         call 2DE8           // A = number of already active sprites; $Dxx5~$DxxB prepared (B is ROM Block of Sprite, C is base Character Tile # / 2 with bit 7 determining VRAM Bank; and DE is pointer to sprite stats modification tables pointers)
 ROMB:7777 EA 9A CA         ld   (CA9A),a
 ROMB:777A 01 00 00         ld   bc,0000
 ROMB:777D 21 9B CA         ld   hl,CA9B
 ROMB:7780 FA 9F CA         ld   a,(CA9F)       // A = Unit's HP
 ROMB:7783 CD 70 78         call 7870           // HP Digit Sprites have coordinates set to 0,0 and 8,0
 ROMB:7786 01 00 00         ld   bc,0000
 ROMB:7789 21 9D CA         ld   hl,CA9D
 ROMB:778C FA A0 CA         ld   a,(CAA0)       // A = Unit's Fuel
 ROMB:778F CD 70 78         call 7870           // Fuel Digit Sprites have coordinates set to 0,0 and 8,0
 ROMB:7792 FA 8F C9         ld   a,(C98F)
 ROMB:7795 FE 05            cp   a,05
 ROMB:7797 38 05            jr   c,779E         // Branches for cursor being on the left side
 ROMB:7799 CD FC 77         call 77FC           // Sets up selected unit stats holder sprites on left side
 ROMB:779C 18 03            jr   77A1
 ROMB:779E CD DD 77         call 77DD           // Sets up selected unit stats holder sprites on right side
 ROMB:77A1 FA 9F CA         ld   a,(CA9F)       // A = Unit's HP
 ROMB:77A4 FE 04            cp   a,04
 ROMB:77A6 30 08            jr   nc,77B0
 ROMB:77A8 21 9B CA         ld   hl,CA9B
 ROMB:77AB 3E 01            ld   a,01
 ROMB:77AD CD 1C 79         call 791C           // HP Digit Sprites have Palette changed to 1 (HP shown as Red for 3 HPs or less)
 ROMB:77B0 FA A0 CA         ld   a,(CAA0)       // A = Unit's Fuel
 ROMB:77B3 FE 15            cp   a,15
 ROMB:77B5 30 08            jr   nc,77BF
 ROMB:77B7 21 9D CA         ld   hl,CA9D
 ROMB:77BA 3E 01            ld   a,01
 ROMB:77BC CD 1C 79         call 791C           // Fuel Digit Sprites have Palette changed to 1 (Fuel shown as Red for 20 Fuel or less)
 ROMB:77BF E1               pop  hl
 ROMB:77C0 C1               pop  bc
 ROMB:77C1 C9               ret                 // Establishes selected unit stats holder graphics
 ROMB:77C2 FA 9A CA         ld   a,(CA9A)
 ROMB:77C5 FE FF            cp   a,FF
 ROMB:77C7 C8               ret  z
 ROMB:77C8 CD 1F 2E         call 2E1F           // Handles clear-up of sprite
 ROMB:77CB 3E FF            ld   a,FF
 ROMB:77CD EA 9A CA         ld   (CA9A),a
 ROMB:77D0 21 9B CA         ld   hl,CA9B
 ROMB:77D3 CD 04 79         call 7904           // Handles clear-up of ($CA9B) and ($CA9C)
 ROMB:77D6 21 9D CA         ld   hl,CA9D
 ROMB:77D9 CD 04 79         call 7904           // Handles clear-up of ($CA9D) and ($CA9E)
 ROMB:77DC C9               ret                 // Handles clear-up of all selected unit info sprites
 ROMB:77DD FA 9A CA         ld   a,(CA9A)
 ROMB:77E0 FE FF            cp   a,FF
 ROMB:77E2 C8               ret  z
 ROMB:77E3 01 18 70         ld   bc,7018
 ROMB:77E6 CD AE 2E         call 2EAE           // WRA4($D001 + ($CA9A) * 16) has pixel coordinates 104,8
 ROMB:77E9 21 9B CA         ld   hl,CA9B
 ROMB:77EC 01 20 88         ld   bc,8820
 ROMB:77EF CD 0D 79         call 790D           // HP Digit Sprites have coordinates set to onscreen 128,16 and 136,16
 ROMB:77F2 21 9D CA         ld   hl,CA9D
 ROMB:77F5 01 28 88         ld   bc,8828
 ROMB:77F8 CD 0D 79         call 790D           // Fuel Digit Sprites have coordinates set to onscreen 128,24 and 136,24
 ROMB:77FB C9               ret                 // Sets up selected unit stats holder sprites on right side
 ROMB:77FC FA 9A CA         ld   a,(CA9A)
 ROMB:77FF FE FF            cp   a,FF
 ROMB:7801 C8               ret  z
 ROMB:7802 01 18 10         ld   bc,1018
 ROMB:7805 CD AE 2E         call 2EAE           // WRA4($D001 + ($CA9A) * 16) 2 byte reverse has pixel coordinates 8,8
 ROMB:7808 21 9B CA         ld   hl,CA9B
 ROMB:780B 01 20 28         ld   bc,2820
 ROMB:780E CD 0D 79         call 790D           // HP Digit Sprites have coordinates set to onscreen 32,16 and 40,16
 ROMB:7811 21 9D CA         ld   hl,CA9D
 ROMB:7814 01 28 28         ld   bc,2828
 ROMB:7817 CD 0D 79         call 790D           // Fuel Digit Sprites have coordinates set to onscreen 32,24 and 40,24
 ROMB:781A C9               ret                 // Sets up selected unit stats holder sprites on left side

 ROMB:781B 14                                   // 20 tiles
 ROMB:781C 00 00 AB 00                          // Corner
 ROMB:7820 00 08 AC 00                          // Horizontal Border
 ROMB:7824 00 10 AC 00                          // Horizontal Border
 ROMB:7828 00 18 AC 00                          // Horizontal Border
 ROMB:782C 00 20 AC 00                          // Horizontal Border 
 ROMB:7830 00 28 AB 20                          // Corner
 ROMB:7834 08 00 AD 00                          // Vertical Border
 ROMB:7838 08 08 AE 00                          // Heart (HP)
 ROMB:783C 08 10 A7 00                          // Dash
 ROMB:7840 08 28 AD 20                          // Vertical Border
 ROMB:7844 10 00 AD 00                          // Vertical Border
 ROMB:7848 10 08 B0 00                          // Fuel Can (Fuel)
 ROMB:784C 10 10 A7 00                          // Dash
 ROMB:7850 10 28 AD 20                          // Vertical Border
 ROMB:7854 18 00 AB 40                          // Corner
 ROMB:7858 18 08 AC 40                          // Horizontal Border 
 ROMB:785C 18 10 AC 40                          // Horizontal Border 
 ROMB:7860 18 18 AC 40                          // Horizontal Border 
 ROMB:7864 18 20 AC 40                          // Horizontal Border 
 ROMB:7868 18 28 AB 60                          // Corner

 ROMB:786C 1B 78 FF 00

 ROMB:7870 C5               push bc
 ROMB:7871 D5               push de
 ROMB:7872 C5               push bc
 ROMB:7873 E5               push hl
 ROMB:7874 CD 7E 29         call 297E           // A = ((A % 160) / 10) * 16 + (A % 10), add 1 if A is an even number at least 160
 ROMB:7877 F5               push af
 ROMB:7878 CB 37            swap a
 ROMB:787A CD 89 78         call 7889           // Establishes base sprite stats for 10s digit, (HL) loaded with 10s digit sprite number, HL incremented
 ROMB:787D F1               pop  af
 ROMB:787E CD 89 78         call 7889           // Establishes base sprite stats for 1s digit, (HL+1) loaded with 1s digit sprite number, HL incremented
 ROMB:7881 E1               pop  hl
 ROMB:7882 C1               pop  bc
 ROMB:7883 CD 0D 79         call 790D           // Sprite indicated by HL and HL+1 have coordinates set to B,C and B+8,C
 ROMB:7886 D1               pop  de
 ROMB:7887 C1               pop  bc
 ROMB:7888 C9               ret                 // Given stat's Digit Sprites have coordinates set to B,C and B+8,C
 ROMB:7889 E6 0F            and  a,0F
 ROMB:788B E5               push hl
 ROMB:788C 21 A0 78         ld   hl,78A0
 ROMB:788F CD 93 3A         call 3A93           // HL = ($78A0 + A%16 * 2)
 ROMB:7892 54               ld   d,h
 ROMB:7893 5D               ld   e,l
 ROMB:7894 06 0B            ld   b,0B
 ROMB:7896 0E 00            ld   c,00
 ROMB:7898 3E 20            ld   a,20
 ROMB:789A CD E8 2D         call 2DE8           // A = number of already active sprites; $Dxx5~$DxxB prepared (B is ROM Block of Sprite, C is base Character Tile # / 2 with bit 7 determining VRAM Bank; and DE is pointer to sprite stats modification tables pointers)
 ROMB:789D E1               pop  hl
 ROMB:789E 22               ldi  (hl),a
 ROMB:789F C9               ret                 // Establishes base sprite stats for digit, (HL) loaded with sprite number, HL incremented

 ROMB:78A0 E6 78
 ROMB:78A2 E9 78
 ROMB:78A4 EC 78
 ROMB:78A6 EF 78
 ROMB:78A8 F2 78
 ROMB:78AA F5 78
 ROMB:78AC F8 78
 ROMB:78AE FB 78
 ROMB:78B0 FE 78
 ROMB:78B2 01 79

 ROMB:78B4 01 00 00 81 00
 ROMB:78B9 01 00 00 82 00
 ROMB:78BE 01 00 00 83 00
 ROMB:78C3 01 00 00 84 00
 ROMB:78C8 01 00 00 85 00
 ROMB:78CD 01 00 00 86 00
 ROMB:78D2 01 00 00 87 00
 ROMB:78D7 01 00 00 88 00
 ROMB:78DC 01 00 00 89 00
 ROMB:78E1 01 00 00 8A 00

 ROMB:78E6 B4 78 FF
 ROMB:78E9 B9 78 FF
 ROMB:78EC BE 78 FF
 ROMB:78EF C3 78 FF
 ROMB:78F2 C8 78 FF
 ROMB:78F5 CD 78 FF
 ROMB:78F8 D2 78 FF
 ROMB:78FB D7 78 FF
 ROMB:78FE DC 78 FF
 ROMB:7901 E1 78 FF

 ROMB:7904 2A               ldi  a,(hl)
 ROMB:7905 CD 1F 2E         call 2E1F           // Handles clear-up of sprite
 ROMB:7908 2A               ldi  a,(hl)
 ROMB:7909 CD 1F 2E         call 2E1F           // Handles clear-up of sprite
 ROMB:790C C9               ret  
 ROMB:790D C5               push bc
 ROMB:790E 2A               ldi  a,(hl)
 ROMB:790F CD AE 2E         call 2EAE           // WRA4($D001 + (HL) * 16) = C; WRA4($D002 + (HL) * 16) = B
 ROMB:7912 78               ld   a,b
 ROMB:7913 C6 08            add  a,08
 ROMB:7915 47               ld   b,a            // B = B + 8
 ROMB:7916 7E               ld   a,(hl)
 ROMB:7917 CD AE 2E         call 2EAE           // WRA4($D001 + (HL + 1) * 16) = C; WRA4($D002 + (HL + 1) * 16) = B + 8
 ROMB:791A C1               pop  bc
 ROMB:791B C9               ret                 // Sprites indicated by HL and HL+1 have coordinates set to B,C and B+8,C
 ROMB:791C C5               push bc
 ROMB:791D 47               ld   b,a
 ROMB:791E 2A               ldi  a,(hl)
 ROMB:791F C5               push bc
 ROMB:7920 CD C9 2E         call 2EC9           // WRA4($D003 + (HL) * 16) has Palette bits modified according to A
 ROMB:7923 C1               pop  bc
 ROMB:7924 7E               ld   a,(hl)
 ROMB:7925 CD C9 2E         call 2EC9           // WRA4($D003 + (HL+1) * 16) has Palette bits modified according to A
 ROMB:7928 C1               pop  bc
 ROMB:7929 C9               ret                 // Sprites indicated by HL and HL+1 have Palette changed to A
 ROMB:792A C5               push bc
 ROMB:792B D5               push de
 ROMB:792C E5               push hl
 ROMB:792D 6F               ld   l,a
 ROMB:792E 26 00            ld   h,00
 ROMB:7930 3E 80            ld   a,80
 ROMB:7932 EA 45 CC         ld   (CC45),a       // ($CC45) = 128
 ROMB:7935 C5               push bc
 ROMB:7936 D5               push de
 ROMB:7937 11 46 CC         ld   de,CC46
 ROMB:793A 01 9C FF         ld   bc,FF9C        // BC = 65436
 ROMB:793D CD 34 7A         call 7A34           // ($CC46) holds 128 if Initial A < 100, or 129 + trunc(Initial A / 100) if not
 ROMB:7940 01 F6 FF         ld   bc,FFF6        // BC = 65526
 ROMB:7943 CD 34 7A         call 7A34           // ($CC47) holds ($CC45) if Initial A < 10, or 129 + trunc(Initial A / 10) if not
 ROMB:7946 3E 81            ld   a,81
 ROMB:7948 EA 45 CC         ld   (CC45),a
 ROMB:794B 01 FF FF         ld   bc,FFFF        // BC = 65535
 ROMB:794E CD 34 7A         call 7A34           // ($CC48) holds 129 + Initial A%10
 ROMB:7951 3E 00            ld   a,00
 ROMB:7953 12               ld   (de),a         // ($CC49) hold 0
 ROMB:7954 D1               pop  de
 ROMB:7955 C1               pop  bc
 ROMB:7956 CD D4 0E         call 0ED4           // HL = $9800 + B + C * 32
 ROMB:7959 3E 03            ld   a,03
 ROMB:795B 92               sub  d              // A = Number of digits that are surplus for the stat
 ROMB:795C 11 46 CC         ld   de,CC46
 ROMB:795F 83               add  e
 ROMB:7960 5F               ld   e,a            // DE set to location of first digit to be used
 ROMB:7961 3E 00            ld   a,00
 ROMB:7963 8A               adc  d
 ROMB:7964 57               ld   d,a
 ROMB:7965 3E 00            ld   a,00
 ROMB:7967 E0 83            ld   (ff00+83),a
 ROMB:7969 E0 4F            ld   (ff00+4F),a    // VRA0
 ROMB:796B CD 63 0F         call 0F63           // VRA0($9800 + B + C * 32) holds used digits
 ROMB:796E E1               pop  hl
 ROMB:796F D1               pop  de
 ROMB:7970 C1               pop  bc
 ROMB:7971 C9               ret                 // Upwards of 3 digit number text for VRA0 BC coordinates (A is number, D is total digits)
 ROMB:7972 C5               push bc
 ROMB:7973 D5               push de
 ROMB:7974 E5               push hl
 ROMB:7975 3E 80            ld   a,80
 ROMB:7977 EA 45 CC         ld   (CC45),a
 ROMB:797A C5               push bc
 ROMB:797B D5               push de
 ROMB:797C 11 46 CC         ld   de,CC46
 ROMB:797F 01 F0 D8         ld   bc,D8F0        // BC = 55536
 ROMB:7982 CD 34 7A         call 7A34           // ($CC46) holds 128 if HL < 10000, or 129 + trunc(HL / 10000) if not
 ROMB:7985 01 18 FC         ld   bc,FC18        // BC = 64536
 ROMB:7988 CD 34 7A         call 7A34           // ($CC47) holds ($CC45) if HL < 1000, or 129 + trunc(HL / 1000) if not
 ROMB:798B 01 9C FF         ld   bc,FF9C        // BC = 65436
 ROMB:798E CD 34 7A         call 7A34           // ($CC48) holds ($CC45) if HL < 100, or 129 + trunc(HL / 100) if not
 ROMB:7991 01 F6 FF         ld   bc,FFF6        // BC = 65526
 ROMB:7994 CD 34 7A         call 7A34           // ($CC49) holds ($CC45) if HL < 10, or 129 + trunc(HL / 10) if not
 ROMB:7997 01 FF FF         ld   bc,FFFF        // BC = 65535
 ROMB:799A 3E 81            ld   a,81
 ROMB:799C EA 45 CC         ld   (CC45),a
 ROMB:799F CD 34 7A         call 7A34           // ($CC4A) holds 129 + HL%10
 ROMB:79A2 3E 00            ld   a,00
 ROMB:79A4 12               ld   (de),a         // ($CC4B) = 0
 ROMB:79A5 D1               pop  de
 ROMB:79A6 C1               pop  bc
 ROMB:79A7 CD D4 0E         call 0ED4           // HL = $9800 + B + C * 32
 ROMB:79AA 3E 05            ld   a,05
 ROMB:79AC 92               sub  d              // A = number of digits that are surplus for the stats
 ROMB:79AD 11 46 CC         ld   de,CC46
 ROMB:79B0 83               add  e
 ROMB:79B1 5F               ld   e,a
 ROMB:79B2 3E 00            ld   a,00
 ROMB:79B4 8A               adc  d
 ROMB:79B5 57               ld   d,a            // DE set to location of first digit to be used
 ROMB:79B6 3E 00            ld   a,00
 ROMB:79B8 E0 83            ld   (ff00+83),a
 ROMB:79BA E0 4F            ld   (ff00+4F),a    // VRA0
 ROMB:79BC CD 63 0F         call 0F63           // VRA0($9800 + B + C * 32) holds used digits (max of 5 digits)
 ROMB:79BF E1               pop  hl
 ROMB:79C0 D1               pop  de
 ROMB:79C1 C1               pop  bc
 ROMB:79C2 C9               ret  
 ROMB:79C3 C5               push bc
 ROMB:79C4 D5               push de
 ROMB:79C5 E5               push hl
 ROMB:79C6 FA 33 C6         ld   a,(C633)
 ROMB:79C9 E6 01            and  a,01
 ROMB:79CB 5F               ld   e,a
 ROMB:79CC 87               add  a
 ROMB:79CD 83               add  e
 ROMB:79CE C6 02            add  a,02
 ROMB:79D0 21 34 C6         ld   hl,C634
 ROMB:79D3 CD BC 29         call 29BC           // HL = active player's Current Gold 3rd byte
 ROMB:79D6 56               ld   d,(hl)         // D = active player's Current Gold / 65536
 ROMB:79D7 2B               dec  hl
 ROMB:79D8 2B               dec  hl
 ROMB:79D9 2A               ldi  a,(hl)
 ROMB:79DA 66               ld   h,(hl)
 ROMB:79DB 6F               ld   l,a
 ROMB:79DC 3E 80            ld   a,80
 ROMB:79DE EA 45 CC         ld   (CC45),a       // ($CC45) = 128 by default
 ROMB:79E1 C5               push bc
 ROMB:79E2 7A               ld   a,d
 ROMB:79E3 A7               and  a
 ROMB:79E4 28 11            jr   z,79F7
 ROMB:79E6 01 A0 15         ld   bc,15A0
 ROMB:79E9 09               add  hl,bc          // HL is increased by 5536, a familiar number for some reason....
 ROMB:79EA 3E 86            ld   a,86
 ROMB:79EC 01 F0 D8         ld   bc,D8F0        // BC is 55536, or rather, -10000
 ROMB:79EF 11 46 CC         ld   de,CC46
 ROMB:79F2 CD 36 7A         call 7A36
 ROMB:79F5 18 09            jr   7A00
 ROMB:79F7 11 46 CC         ld   de,CC46
 ROMB:79FA 01 F0 D8         ld   bc,D8F0
 ROMB:79FD CD 34 7A         call 7A34           // ($CC46) = Gold 10K digit
 ROMB:7A00 01 18 FC         ld   bc,FC18        // BC = 64536, or rather, -1000
 ROMB:7A03 CD 34 7A         call 7A34           // ($CC47) = Gold 1K digit
 ROMB:7A06 01 9C FF         ld   bc,FF9C        // BC = 65436, or rather, -100
 ROMB:7A09 CD 34 7A         call 7A34           // ($CC48) = Gold 100 digit
 ROMB:7A0C 01 F6 FF         ld   bc,FFF6        // BC = 65526, or rather, -10
 ROMB:7A0F CD 34 7A         call 7A34           // ($CC49) = Gold 10 digit
 ROMB:7A12 01 FF FF         ld   bc,FFFF        // BC = 65535, or rather, -1
 ROMB:7A15 3E 81            ld   a,81
 ROMB:7A17 EA 45 CC         ld   (CC45),a
 ROMB:7A1A CD 34 7A         call 7A34           // ($CC4A) = Gold 1 digit, never blanked
 ROMB:7A1D 3E 00            ld   a,00
 ROMB:7A1F 12               ld   (de),a         // ($CC4B) = 0
 ROMB:7A20 C1               pop  bc
 ROMB:7A21 CD D4 0E         call 0ED4           // HL = $9800 + B + C * 32
 ROMB:7A24 11 46 CC         ld   de,CC46
 ROMB:7A27 3E 00            ld   a,00
 ROMB:7A29 E0 83            ld   (ff00+83),a
 ROMB:7A2B E0 4F            ld   (ff00+4F),a    // VRA0
 ROMB:7A2D CD 63 0F         call 0F63           // VRA0($9800 + B + C * 32) holds active player's Current Gold in text
 ROMB:7A30 E1               pop  hl
 ROMB:7A31 D1               pop  de
 ROMB:7A32 C1               pop  bc
 ROMB:7A33 C9               ret  
 ROMB:7A34 3E 80            ld   a,80
 ROMB:7A36 3C               inc  a
 ROMB:7A37 09               add  hl,bc
 ROMB:7A38 38 FC            jr   c,7A36         // Loop back if HL => NEG BC
 ROMB:7A3A FE 81            cp   a,81
 ROMB:7A3C 28 09            jr   z,7A47
 ROMB:7A3E F5               push af
 ROMB:7A3F 3E 81            ld   a,81
 ROMB:7A41 EA 45 CC         ld   (CC45),a
 ROMB:7A44 F1               pop  af
 ROMB:7A45 18 03            jr   7A4A
 ROMB:7A47 FA 45 CC         ld   a,(CC45)
 ROMB:7A4A 12               ld   (de),a
 ROMB:7A4B 13               inc  de
 ROMB:7A4C 7D               ld   a,l
 ROMB:7A4D 91               sub  c
 ROMB:7A4E 6F               ld   l,a
 ROMB:7A4F 7C               ld   a,h
 ROMB:7A50 98               sbc  b
 ROMB:7A51 67               ld   h,a
 ROMB:7A52 C9               ret                 // (DE) holds ($CC45) if HL < NEG BC, or 129 + trunc(HL / BC) if not
 ROMB:7A53 01 01 02         ld   bc,0201
 ROMB:7A56 CD 4A 76         call 764A           // B = (($FF95)/8 + 2) % 32; C = (($FF96)/8 + 1) % 32
 ROMB:7A59 11 03 0F         ld   de,0F03
 ROMB:7A5C EF 10 FA 68                          // Sets up table of covered graphics within late WRA4 Bank, as well as defaulted table of graphics (BC is starting location, DE is size)
 ROMB:7A60 3E 00            ld   a,00
 ROMB:7A62 E0 83            ld   (ff00+83),a
 ROMB:7A64 E0 4F            ld   (ff00+4F),a    // VRA0
 ROMB:7A66 01 02 03         ld   bc,0302
 ROMB:7A69 CD 4A 76         call 764A           // B = (($FF95)/8 + 3) % 32; C = (($FF96)/8 + 2) % 32
 ROMB:7A6C CD D4 0E         call 0ED4           // HL = $9800 + B + C * 32
 ROMB:7A6F 11 8D 7A         ld   de,7A8D
 ROMB:7A72 CD 63 0F         call 0F63           // (HL) holds text starting at (DE)
 ROMB:7A75 01 02 05         ld   bc,0502
 ROMB:7A78 CD 4A 76         call 764A           // B = (($FF95)/8 + 5) % 32; C = (($FF96)/8 + 2) % 32
 ROMB:7A7B CD C3 79         call 79C3           // VRA0($9800 + B + C * 32) holds active player's Current Gold in text
 ROMB:7A7E 01 02 0D         ld   bc,0D02
 ROMB:7A81 CD 4A 76         call 764A           // B = (($FF95)/8 + 13) % 32; C = (($FF96)/8 + 2) % 32
 ROMB:7A84 CD DC 7B         call 7BDC           // HL = Active Player's Current Materials
 ROMB:7A87 16 03            ld   d,03
 ROMB:7A89 CD 72 79         call 7972           // VRA0($9800 + B + C * 32) holds active player's Current Materials in text
 ROMB:7A8C C9               ret                 // Sets up box showing active player's current Gold and Materials

 ROMB:7A8D B1 A7 80 80 80 80 80 80 B2 A7 00

 ROMB:7A98 EF 10 08 69                          // Restores last table of covered graphics
 ROMB:7A9C C9               ret  
 ROMB:7A9D C5               push bc
 ROMB:7A9E D5               push de
 ROMB:7A9F 57               ld   d,a
 ROMB:7AA0 3E 00            ld   a,00
 ROMB:7AA2 E0 83            ld   (ff00+83),a
 ROMB:7AA4 E0 4F            ld   (ff00+4F),a    // VRA0
 ROMB:7AA6 CD B5 7A         call 7AB5           // Window tiles in starting area covering 20 by D cleared
 ROMB:7AA9 3E 01            ld   a,01
 ROMB:7AAB E0 83            ld   (ff00+83),a
 ROMB:7AAD E0 4F            ld   (ff00+4F),a    // VRA1
 ROMB:7AAF CD B5 7A         call 7AB5           // Window tiles in starting area covering 20 by D cleared
 ROMB:7AB2 D1               pop  de
 ROMB:7AB3 C1               pop  bc
 ROMB:7AB4 C9               ret                 // Window tiles in starting area covering 20 by A cleared for both VRAM Banks
 ROMB:7AB5 D5               push de
 ROMB:7AB6 21 00 9C         ld   hl,9C00
 ROMB:7AB9 E5               push hl             // Loop begins here
 ROMB:7ABA 01 14 00         ld   bc,0014
 ROMB:7ABD AF               xor  a
 ROMB:7ABE CD 84 3B         call 3B84           // Empties ($9C00) to ($9C13)
 ROMB:7AC1 E1               pop  hl
 ROMB:7AC2 01 20 00         ld   bc,0020
 ROMB:7AC5 09               add  hl,bc
 ROMB:7AC6 15               dec  d
 ROMB:7AC7 20 F0            jr   nz,7AB9
 ROMB:7AC9 D1               pop  de
 ROMB:7ACA C9               ret                 // Window tiles in starting area covering 20 by D cleared
 ROMB:7ACB FA 89 C9         ld   a,(C989)       // Map's horizontal measure
 ROMB:7ACE D6 05            sub  a,05
 ROMB:7AD0 B8               cp   b
 ROMB:7AD1 38 08            jr   c,7ADB         // Jumps for rightmost 4 tile columns
 ROMB:7AD3 78               ld   a,b
 ROMB:7AD4 D6 04            sub  a,04
 ROMB:7AD6 30 08            jr   nc,7AE0        // Jumps for outside leftmost 3 tile columns
 ROMB:7AD8 AF               xor  a
 ROMB:7AD9 18 05            jr   7AE0
 ROMB:7ADB FA 89 C9         ld   a,(C989)
 ROMB:7ADE D6 09            sub  a,09
 ROMB:7AE0 EA 8B C9         ld   (C98B),a       // Establish columns to left of view
 ROMB:7AE3 FA 8A C9         ld   a,(C98A)
 ROMB:7AE6 D6 05            sub  a,05
 ROMB:7AE8 B9               cp   c
 ROMB:7AE9 38 08            jr   c,7AF3         // Jumps for bottommost 4 rows
 ROMB:7AEB 79               ld   a,c
 ROMB:7AEC D6 04            sub  a,04
 ROMB:7AEE 30 0A            jr   nc,7AFA        // Jumps for outside topmost 3 rows
 ROMB:7AF0 AF               xor  a
 ROMB:7AF1 18 07            jr   7AFA
 ROMB:7AF3 FA 8A C9         ld   a,(C98A)
 ROMB:7AF6 D6 09            sub  a,09
 ROMB:7AF8 18 00            jr   7AFA
 ROMB:7AFA EA 8C C9         ld   (C98C),a       // ($C98B) 2 byte holds coordinates of upper left corner tile in view
 ROMB:7AFD CD D9 45         call 45D9           // If BC is not north or west of view, establishes cursor's within view and overall coordinates, and then cursor's sprite graphics location center
 ROMB:7B00 C9               ret                 // Establishes view area based on coordinates BC, then cursor's within view and overall coordinates, and finally cursor's sprite grapics location center
 ROMB:7B01 C5               push bc             // BC is the intended coordinates
 ROMB:7B02 D5               push de
 ROMB:7B03 E5               push hl
 ROMB:7B04 CD 43 7B         call 7B43           // A = 0 if cursor coordinates match with BC, -1 otherwise; loop starts here
 ROMB:7B07 A7               and  a
 ROMB:7B08 28 32            jr   z,7B3C         // Done when coordinates match
 ROMB:7B0A FA 91 C9         ld   a,(C991)
 ROMB:7B0D B8               cp   b
 ROMB:7B0E 38 04            jr   c,7B14        // Jump if left of B (going right)
 ROMB:7B10 20 07            jr   nz,7B19       // Jump if right of B (going left)
 ROMB:7B12 18 0B            jr   7B1F          // Jump if not left or right of B
 ROMB:7B14 CD 25 75         call 7525          // If view will shift right: ($FFAC) 4 byte holds: OR ($FFAC),$82, ($C98B) + 10, ($C98C), 9; if not, general increase to X coordinate within view
 ROMB:7B17 18 03            jr   7B1C
 ROMB:7B19 CD 64 75         call 7564           // If view will shift left: ($FFAC) 4 byte holds: OR ($FFAC),$81, ($C98B) - 1, ($C98C), 9; if not, general decrease to X coordinate within view
 ROMB:7B1C CD 54 7B         call 7B54           // Handles momentary map graphics shift
 ROMB:7B1F CD 43 7B         call 7B43           // A = 0 if cursor coordinates match with BC, -1 otherwise
 ROMB:7B22 A7               and  a
 ROMB:7B23 28 17            jr   z,7B3C         // Done when coordinates match
 ROMB:7B25 FA 92 C9         ld   a,(C992)
 ROMB:7B28 B9               cp   c
 ROMB:7B29 38 09            jr   c,7B34         // Jump if above C (going down)
 ROMB:7B2B 20 02            jr   nz,7B2F        // Jump if below C (going up)
 ROMB:7B2D 18 D5            jr   7B04           // Restart loop if same row as C (adjustment would be done for B alone)
 ROMB:7B2F CD DB 75         call 75DB           // If view will shift up: ($FFAC) 4 byte holds: OR ($FFAC),$84, ($C98B) - (($C98C)%2), ($C98C) - 1, 10 + (($C98C)%2); if not, general decrease to Y coordinate within view
 ROMB:7B32 18 03            jr   7B37
 ROMB:7B34 CD 9C 75         call 759C           // If view will shift down: ($FFAC) 4 byte holds: OR ($FFAC),$88, ($C98B) - (($C98C)%2), ($C98C) + 9, 10 + (($C98C)%2); if not, general increase to Y coordinate within view
 ROMB:7B37 CD 54 7B         call 7B54           // Handles momentary map graphics shift
 ROMB:7B3A 18 C8            jr   7B04
 ROMB:7B3C CD 54 7B         call 7B54           // Handles momentary map graphics shift
 ROMB:7B3F E1               pop  hl
 ROMB:7B40 D1               pop  de
 ROMB:7B41 C1               pop  bc
 ROMB:7B42 C9               ret                 // Handles map graphics shift to coordinates BC
 ROMB:7B43 FA 91 C9         ld   a,(C991)
 ROMB:7B46 B8               cp   b
 ROMB:7B47 20 08            jr   nz,7B51
 ROMB:7B49 FA 92 C9         ld   a,(C992)
 ROMB:7B4C B9               cp   c
 ROMB:7B4D 20 02            jr   nz,7B51
 ROMB:7B4F AF               xor  a
 ROMB:7B50 C9               ret  
 ROMB:7B51 3E FF            ld   a,FF
 ROMB:7B53 C9               ret                 // A = 0 if cursor coordinates match with BC, -1 otherwise
 ROMB:7B54 C5               push bc
 ROMB:7B55 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMB:7B58 CD A2 05         call 05A2           // Button update, next frame
 ROMB:7B5B CD A2 05         call 05A2           // Button update, next frame
 ROMB:7B5E F0 AC            ld   a,(ff00+AC)
 ROMB:7B60 CB 7F            bit  7,a
 ROMB:7B62 20 F1            jr   nz,7B55        // Looping happens in case of graphics lag
 ROMB:7B64 CD 71 45         call 4571           // Handles new View area coordinates and scroll
 ROMB:7B67 CD C1 45         call 45C1           // Establishes cursor's overall coordinates and then cursor's sprite graphics location center
 ROMB:7B6A CD 54 46         call 4654           // Updates Cursor Sprite based on if building on tile is possible
 ROMB:7B6D C1               pop  bc
 ROMB:7B6E C9               ret                 // Handles momentary map graphics shift
 ROMB:7B6F C5               push bc
 ROMB:7B70 E5               push hl
 ROMB:7B71 CD CD 7B         call 7BCD           // HL = Active Player's Current Gold location
 ROMB:7B74 7E               ld   a,(hl)
 ROMB:7B75 83               add  e
 ROMB:7B76 22               ldi  (hl),a
 ROMB:7B77 4F               ld   c,a
 ROMB:7B78 7E               ld   a,(hl)
 ROMB:7B79 8A               adc  d
 ROMB:7B7A 22               ldi  (hl),a
 ROMB:7B7B 47               ld   b,a
 ROMB:7B7C 7E               ld   a,(hl)
 ROMB:7B7D CE 00            adc  a,00
 ROMB:7B7F 32               ldd  (hl),a
 ROMB:7B80 A7               and  a
 ROMB:7B81 28 12            jr   z,7B95         // End if New Gold < 65536
 ROMB:7B83 78               ld   a,b
 ROMB:7B84 FE 86            cp   a,86
 ROMB:7B86 38 0D            jr   c,7B95         // End if New Gold%65536 < 34304
 ROMB:7B88 20 05            jr   nz,7B8F        // End with New Gold%65536 = 34463; theoretically should cause Gold to cap at 99999. Theoretically.
 ROMB:7B8A 79               ld   a,c
 ROMB:7B8B FE 9F            cp   a,9F
 ROMB:7B8D 38 06            jr   c,7B95         // End if New Gold%256 < 159
 ROMB:7B8F 3E 86            ld   a,86
 ROMB:7B91 32               ldd  (hl),a
 ROMB:7B92 3E 9F            ld   a,9F
 ROMB:7B94 77               ld   (hl),a
 ROMB:7B95 E1               pop  hl
 ROMB:7B96 C1               pop  bc
 ROMB:7B97 C9               ret                 // Adds Gold to Current Gold, theoretical cap of 99999
 ROMB:7B98 C5               push bc
 ROMB:7B99 E5               push hl
 ROMB:7B9A CD CD 7B         call 7BCD           // HL = Active Player's Current Gold location
 ROMB:7B9D 7E               ld   a,(hl)
 ROMB:7B9E 93               sub  e
 ROMB:7B9F 22               ldi  (hl),a
 ROMB:7BA0 7E               ld   a,(hl)
 ROMB:7BA1 9A               sbc  d
 ROMB:7BA2 22               ldi  (hl),a
 ROMB:7BA3 7E               ld   a,(hl)
 ROMB:7BA4 DE 00            sbc  a,00
 ROMB:7BA6 77               ld   (hl),a
 ROMB:7BA7 30 04            jr   nc,7BAD        // End with Current Gold reduced if non-negative
 ROMB:7BA9 CD 6F 7B         call 7B6F           // Adds back Gold to Current Gold
 ROMB:7BAC 37               scf  
 ROMB:7BAD E1               pop  hl
 ROMB:7BAE C1               pop  bc
 ROMB:7BAF C9               ret                 // Reduces Current Gold if possible, Sets Carry Flag if not possible
 ROMB:7BB0 C5               push bc
 ROMB:7BB1 E5               push hl
 ROMB:7BB2 CD CD 7B         call 7BCD           // HL = Active Player's Current Gold location
 ROMB:7BB5 23               inc  hl
 ROMB:7BB6 23               inc  hl
 ROMB:7BB7 3A               ldd  a,(hl)
 ROMB:7BB8 A7               and  a
 ROMB:7BB9 20 0A            jr   nz,7BC5        // End with Carry Flag Off if Active Player's Current Gold exceeds 65,535
 ROMB:7BBB 3A               ldd  a,(hl)
 ROMB:7BBC BA               cp   d
 ROMB:7BBD 38 0A            jr   c,7BC9         // End with Carry Flag On if D > Active Player's Gold / 256
 ROMB:7BBF 20 04            jr   nz,7BC5        // End with Carry Flag Off unless D = trunc(Active Player's Gold / 256)
 ROMB:7BC1 7E               ld   a,(hl)
 ROMB:7BC2 BB               cp   e
 ROMB:7BC3 38 04            jr   c,7BC9         // End with Carry Flag On if E > Active Player's Gold % 256
 ROMB:7BC5 37               scf  
 ROMB:7BC6 3F               ccf  
 ROMB:7BC7 18 01            jr   7BCA
 ROMB:7BC9 37               scf  
 ROMB:7BCA E1               pop  hl
 ROMB:7BCB C1               pop  bc
 ROMB:7BCC C9               ret                 // Carry Flag On if DE > Active Player's Gold
 ROMB:7BCD FA 33 C6         ld   a,(C633)
 ROMB:7BD0 E6 01            and  a,01
 ROMB:7BD2 6F               ld   l,a
 ROMB:7BD3 87               add  a
 ROMB:7BD4 85               add  l
 ROMB:7BD5 21 34 C6         ld   hl,C634
 ROMB:7BD8 CD BC 29         call 29BC
 ROMB:7BDB C9               ret                 // HL = Active Player's Current Gold location
 ROMB:7BDC FA 33 C6         ld   a,(C633)
 ROMB:7BDF E6 01            and  a,01
 ROMB:7BE1 07               rlca 
 ROMB:7BE2 21 3A C6         ld   hl,C63A
 ROMB:7BE5 CD BC 29         call 29BC
 ROMB:7BE8 2A               ldi  a,(hl)
 ROMB:7BE9 66               ld   h,(hl)
 ROMB:7BEA 6F               ld   l,a            // HL = Active Player's Current Materials
 ROMB:7BEB C9               ret  
 ROMB:7BEC D5               push de
 ROMB:7BED E5               push hl
 ROMB:7BEE FA 33 C6         ld   a,(C633)
 ROMB:7BF1 E6 01            and  a,01
 ROMB:7BF3 07               rlca 
 ROMB:7BF4 21 3A C6         ld   hl,C63A
 ROMB:7BF7 CD BC 29         call 29BC           // HL = Active Player's Current Materials byte
 ROMB:7BFA E5               push hl
 ROMB:7BFB 2A               ldi  a,(hl)
 ROMB:7BFC 66               ld   h,(hl)
 ROMB:7BFD 6F               ld   l,a            // HL = Active Player's Current Materials
 ROMB:7BFE 19               add  hl,de
 ROMB:7BFF 54               ld   d,h
 ROMB:7C00 5D               ld   e,l
 ROMB:7C01 21 E7 03         ld   hl,03E7        // HL = 999
 ROMB:7C04 CD CA 29         call 29CA           // if New Materials = 999, A = 0; otherwise, A = D or E depending on H or L; Carry Flag set by New Materials < 999
 ROMB:7C07 38 03            jr   c,7C0C
 ROMB:7C09 11 E7 03         ld   de,03E7        // New Materials caps at 999
 ROMB:7C0C E1               pop  hl
 ROMB:7C0D 73               ld   (hl),e
 ROMB:7C0E 23               inc  hl
 ROMB:7C0F 72               ld   (hl),d
 ROMB:7C10 E1               pop  hl
 ROMB:7C11 D1               pop  de
 ROMB:7C12 C9               ret                 // Adds DE to active player's Current Materials, to capacity of 999
 ROMB:7C13 E5               push hl
 ROMB:7C14 FA 33 C6         ld   a,(C633)
 ROMB:7C17 E6 01            and  a,01
 ROMB:7C19 07               rlca 
 ROMB:7C1A 21 3A C6         ld   hl,C63A
 ROMB:7C1D CD BC 29         call 29BC
 ROMB:7C20 E5               push hl
 ROMB:7C21 2A               ldi  a,(hl)
 ROMB:7C22 66               ld   h,(hl)
 ROMB:7C23 6F               ld   l,a            // HL = Active Player's Current Materials
 ROMB:7C24 CD C3 29         call 29C3
 ROMB:7C27 54               ld   d,h
 ROMB:7C28 5D               ld   e,l            // DE = New Materials
 ROMB:7C29 E1               pop  hl
 ROMB:7C2A 73               ld   (hl),e
 ROMB:7C2B 23               inc  hl
 ROMB:7C2C 72               ld   (hl),d
 ROMB:7C2D E1               pop  hl
 ROMB:7C2E C9               ret                 // Reduces Current Materials by cost
 ROMB:7C2F D5               push de
 ROMB:7C30 11 8A 7C         ld   de,7C8A
 ROMB:7C33 CD 98 7C         call 7C98           // ($CAA6) 2 byte reverse = Red Star Gold income spanning all 100 properties on the map
 ROMB:7C36 FA A6 CA         ld   a,(CAA6)
 ROMB:7C39 EA 3E C6         ld   (C63E),a
 ROMB:7C3C FA A7 CA         ld   a,(CAA7)
 ROMB:7C3F EA 3F C6         ld   (C63F),a       // ($C63E) 2 byte reverse = Red Star Gold income
 ROMB:7C42 11 8F 7C         ld   de,7C8F
 ROMB:7C45 CD 98 7C         call 7C98           // ($CAA6) 2 byte reverse = White Moon Gold income spanning all 100 properties on the map
 ROMB:7C48 FA A6 CA         ld   a,(CAA6)
 ROMB:7C4B EA 40 C6         ld   (C640),a
 ROMB:7C4E FA A7 CA         ld   a,(CAA7)
 ROMB:7C51 EA 41 C6         ld   (C641),a       // ($C640) 2 byte reverse = White Moon Gold income
 ROMB:7C54 11 94 7C         ld   de,7C94
 ROMB:7C57 CD 98 7C         call 7C98           // ($CAA6) 2 byte reverse = Red Star Materials income * 2 spanning all 100 properties on the map
 ROMB:7C5A FA A6 CA         ld   a,(CAA6)
 ROMB:7C5D 6F               ld   l,a
 ROMB:7C5E FA A7 CA         ld   a,(CAA7)
 ROMB:7C61 67               ld   h,a
 ROMB:7C62 CB 3C            srl  h
 ROMB:7C64 CB 1D            rr   l
 ROMB:7C66 7D               ld   a,l
 ROMB:7C67 EA 42 C6         ld   (C642),a
 ROMB:7C6A 7C               ld   a,h
 ROMB:7C6B EA 43 C6         ld   (C643),a       // ($C642) 2 byte reverse = Red Star Materials income
 ROMB:7C6E 11 96 7C         ld   de,7C96
 ROMB:7C71 CD 98 7C         call 7C98           // ($CAA6) 2 byte reverse = White Moon Materials income * 2 spanning all 100 properties on the map
 ROMB:7C74 FA A6 CA         ld   a,(CAA6)
 ROMB:7C77 6F               ld   l,a
 ROMB:7C78 FA A7 CA         ld   a,(CAA7)
 ROMB:7C7B 67               ld   h,a
 ROMB:7C7C CB 3C            srl  h
 ROMB:7C7E CB 1D            rr   l
 ROMB:7C80 7D               ld   a,l
 ROMB:7C81 EA 44 C6         ld   (C644),a
 ROMB:7C84 7C               ld   a,h
 ROMB:7C85 EA 45 C6         ld   (C645),a       // ($C644) 2 byte reverse = White Moon Materials income
 ROMB:7C88 D1               pop  de
 ROMB:7C89 C9               ret                 // Establishes income values
 
 ROMB:7C8A 04 01 02 06 09
 ROMB:7C8F 04 0C 0D 11 14
 ROMB:7C94 01 04
 ROMB:7C96 01 0F

 ROMB:7C98 C5               push bc
 ROMB:7C99 AF               xor  a
 ROMB:7C9A EA A6 CA         ld   (CAA6),a
 ROMB:7C9D EA A7 CA         ld   (CAA7),a
 ROMB:7CA0 F0 82            ld   a,(ff00+82)
 ROMB:7CA2 F5               push af
 ROMB:7CA3 3E 01            ld   a,01
 ROMB:7CA5 E0 82            ld   (ff00+82),a
 ROMB:7CA7 E0 70            ld   (ff00+70),a
 ROMB:7CA9 21 81 DD         ld   hl,DD81
 ROMB:7CAC 0E 64            ld   c,64           // C = 100; DE = Pointer; HL = $DD81
 ROMB:7CAE C5               push bc             // Loop begins here
 ROMB:7CAF 2A               ldi  a,(hl)
 ROMB:7CB0 EA A5 CA         ld   (CAA5),a
 ROMB:7CB3 46               ld   b,(hl)
 ROMB:7CB4 23               inc  hl
 ROMB:7CB5 4E               ld   c,(hl)
 ROMB:7CB6 23               inc  hl
 ROMB:7CB7 FE FF            cp   a,FF
 ROMB:7CB9 28 08            jr   z,7CC3
 ROMB:7CBB E5               push hl
 ROMB:7CBC CD 70 47         call 4770           // A = Terrain Type
 ROMB:7CBF CD CE 7C         call 7CCE           // If Terrain Type is a valid property type, ($CAA6) 2 byte reverse += ($CAA5)
 ROMB:7CC2 E1               pop  hl
 ROMB:7CC3 C1               pop  bc
 ROMB:7CC4 0D               dec  c
 ROMB:7CC5 20 E7            jr   nz,7CAE        // Repeat for all 100 properties
 ROMB:7CC7 F1               pop  af
 ROMB:7CC8 E0 82            ld   (ff00+82),a
 ROMB:7CCA E0 70            ld   (ff00+70),a
 ROMB:7CCC C1               pop  bc
 ROMB:7CCD C9               ret                 // ($CAA6) 2 byte reverse = income spanning all 100 properties on the map
 ROMB:7CCE C5               push bc
 ROMB:7CCF D5               push de
 ROMB:7CD0 47               ld   b,a            // B = Terrain Type
 ROMB:7CD1 1A               ld   a,(de)
 ROMB:7CD2 4F               ld   c,a            // C = Number of property types to compare to
 ROMB:7CD3 13               inc  de
 ROMB:7CD4 1A               ld   a,(de)         // Loop begins here
 ROMB:7CD5 13               inc  de
 ROMB:7CD6 B8               cp   b
 ROMB:7CD7 28 05            jr   z,7CDE         // Breaks loop with continuation if search provided a result
 ROMB:7CD9 0D               dec  c
 ROMB:7CDA 20 F8            jr   nz,7CD4        // Loops back if still searching
 ROMB:7CDC 18 16            jr   7CF4           // Ends with nothing further done if search didn't provide results
 ROMB:7CDE FA A6 CA         ld   a,(CAA6)
 ROMB:7CE1 6F               ld   l,a
 ROMB:7CE2 FA A7 CA         ld   a,(CAA7)
 ROMB:7CE5 67               ld   h,a
 ROMB:7CE6 FA A5 CA         ld   a,(CAA5)
 ROMB:7CE9 CD BC 29         call 29BC           // HL = ($CAA6) 2 byte reverse + ($CAA5)
 ROMB:7CEC 7D               ld   a,l
 ROMB:7CED EA A6 CA         ld   (CAA6),a
 ROMB:7CF0 7C               ld   a,h
 ROMB:7CF1 EA A7 CA         ld   (CAA7),a
 ROMB:7CF4 D1               pop  de
 ROMB:7CF5 C1               pop  bc
 ROMB:7CF6 C9               ret                 // If Terrain Type is a valid property type, ($CAA6) 2 byte reverse += ($CAA5)
 ROMB:7CF7 E5               push hl
 ROMB:7CF8 FE 20            cp   a,20           // Non-property
 ROMB:7CFA 30 24            jr   nc,7D20
 ROMB:7CFC FE 17            cp   a,17           // Neutral Properties
 ROMB:7CFE 30 1C            jr   nc,7D1C
 ROMB:7D00 FE 0C            cp   a,0C           // WM Properties
 ROMB:7D02 30 09            jr   nc,7D0D
 ROMB:7D04 21 33 C6         ld   hl,C633
 ROMB:7D07 CB 46            bit  0,(hl)
 ROMB:7D09 28 09            jr   z,7D14         // For RS Props, A = 0 if RS is active player
 ROMB:7D0B 18 0B            jr   7D18           // Otherwise, A = 1
 ROMB:7D0D 21 33 C6         ld   hl,C633
 ROMB:7D10 CB 46            bit  0,(hl)
 ROMB:7D12 28 04            jr   z,7D18         // For WS Props, A = 1 if RS is active player
 ROMB:7D14 3E 00            ld   a,00
 ROMB:7D16 18 0A            jr   7D22           // A = 0 for owner's turn
 ROMB:7D18 3E 01            ld   a,01
 ROMB:7D1A 18 06            jr   7D22           // A = 1 for opponent's turn
 ROMB:7D1C 3E 02            ld   a,02
 ROMB:7D1E 18 02            jr   7D22           // A = 2 for Neutral property
 ROMB:7D20 3E 03            ld   a,03           // A = 3 for non-property tile
 ROMB:7D22 E1               pop  hl
 ROMB:7D23 C9               ret                 // A = 0 for owner's turn, 1 for opponent's turn, 2 for Neutral property, or 3 for non-property tile
 ROMB:7D24 C5               push bc
 ROMB:7D25 A7               and  a
 ROMB:7D26 28 09            jr   z,7D31
 ROMB:7D28 E6 01            and  a,01
 ROMB:7D2A 47               ld   b,a
 ROMB:7D2B FA 33 C6         ld   a,(C633)
 ROMB:7D2E E6 01            and  a,01
 ROMB:7D30 B8               cp   b
 ROMB:7D31 C1               pop  bc
 ROMB:7D32 C9               ret                 // Zero Flag set by either A = 0, or A and ($C633) are both either odd or even
 ROMB:7D33 FE 18            cp   a,18           // Ruined City
 ROMB:7D35 28 1A            jr   z,7D51
 ROMB:7D37 FE 1A            cp   a,1A           // Ruined Factory
 ROMB:7D39 28 16            jr   z,7D51
 ROMB:7D3B FE 1C            cp   a,1C           // Ruined Airport
 ROMB:7D3D 28 12            jr   z,7D51
 ROMB:7D3F FE 1E            cp   a,1E           // Ruined Harbor
 ROMB:7D41 28 0E            jr   z,7D51
 ROMB:7D43 CD F7 7C         call 7CF7           // A = 0 for owner's turn, 1 for opponent's turn, 2 for Neutral property, or 3 for non-property tile
 ROMB:7D46 FE 00            cp   a,00           // Owner's turn
 ROMB:7D48 28 07            jr   z,7D51
 ROMB:7D4A FE 03            cp   a,03           // Non-property
 ROMB:7D4C 28 03            jr   z,7D51
 ROMB:7D4E AF               xor  a
 ROMB:7D4F 18 02            jr   7D53
 ROMB:7D51 3E 01            ld   a,01
 ROMB:7D53 C9               ret                 // A = 0 for viable capture, 1 otherwise
 ROMB:7D54 CD 07 47         call 4707           // A = Terrain base ID
 ROMB:7D57 FE 0C            cp   a,0C
 ROMB:7D59 38 0F            jr   c,7D6A         // End with A = 1 for any property
 ROMB:7D5B 28 0A            jr   z,7D67
 ROMB:7D5D FE 11            cp   a,11           // Forest
 ROMB:7D5F 28 06            jr   z,7D67
 ROMB:7D61 FE 12            cp   a,12           // Moor
 ROMB:7D63 28 02            jr   z,7D67
 ROMB:7D65 18 03            jr   7D6A
 ROMB:7D67 AF               xor  a
 ROMB:7D68 18 02            jr   7D6C
 ROMB:7D6A 3E 01            ld   a,01
 ROMB:7D6C C9               ret                 // A = 0 for Plains, Forest, or Moor, 1 otherwise
 ROMB:7D6D FE 18            cp   a,18
 ROMB:7D6F 28 10            jr   z,7D81
 ROMB:7D71 FE 1A            cp   a,1A
 ROMB:7D73 28 0C            jr   z,7D81
 ROMB:7D75 FE 1C            cp   a,1C
 ROMB:7D77 28 08            jr   z,7D81
 ROMB:7D79 FE 1E            cp   a,1E
 ROMB:7D7B 28 04            jr   z,7D81
 ROMB:7D7D 3E 01            ld   a,01
 ROMB:7D7F 18 01            jr   7D82
 ROMB:7D81 AF               xor  a
 ROMB:7D82 C9               ret                 // A = 1 for anything other than a Ruined property, 0 for any Ruined property

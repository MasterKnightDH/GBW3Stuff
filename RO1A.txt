 RO1A:4000 CD D2 04         call 04D2           // Next frame
 RO1A:4003 CD AC 05         call 05AC           // Establishes current direct and newly pressed controls, also sets up Soft Reset method
 RO1A:4006 F0 90            ld   a,(ff00+90)
 RO1A:4008 CB 57            bit  2,a            // Select
 RO1A:400A 20 06            jr   nz,4012
 RO1A:400C AF               xor  a
 RO1A:400D EA A6 C4         ld   (C4A6),a
 RO1A:4010 18 05            jr   4017
 RO1A:4012 3E 01            ld   a,01
 RO1A:4014 EA A6 C4         ld   (C4A6),a       // ($C4A6) is Select Button flag
 RO1A:4017 F0 82            ld   a,(ff00+82)
 RO1A:4019 F5               push af
 RO1A:401A 3E 04            ld   a,04
 RO1A:401C E0 82            ld   (ff00+82),a
 RO1A:401E E0 70            ld   (ff00+70),a
 RO1A:4020 EF 17 00 40                          // Clear all sprites in $C300 table, empties ($C4C8~$C4DB), WRA4($DB2C), WRA4($DB2E) 2 byte, and WRA4($D3AC~$DB2B)
 RO1A:4024 EF 27 D4 40                          // LCD Display shut off, empties graphics
 RO1A:4028 CD 96 5E         call 5E96
 RO1A:402B 57               ld   d,a
 RO1A:402C FA A6 C4         ld   a,(C4A6)       // Select Button Flag
 RO1A:402F FE 01            cp   a,01
 RO1A:4031 28 0B            jr   z,403E         // Holding Select results in A = 0 ending
 RO1A:4033 7A               ld   a,d
 RO1A:4034 FE FF            cp   a,FF
 RO1A:4036 28 19            jr   z,4051
 RO1A:4038 FE 00            cp   a,00
 RO1A:403A 28 02            jr   z,403E
 RO1A:403C 18 09            jr   4047
 RO1A:403E AF               xor  a
 RO1A:403F 57               ld   d,a
 RO1A:4040 F1               pop  af
 RO1A:4041 E0 82            ld   (ff00+82),a
 RO1A:4043 E0 70            ld   (ff00+70),a
 RO1A:4045 7A               ld   a,d
 RO1A:4046 C9               ret                 // A = 0 ending
 RO1A:4047 3E 01            ld   a,01
 RO1A:4049 57               ld   d,a
 RO1A:404A F1               pop  af
 RO1A:404B E0 82            ld   (ff00+82),a
 RO1A:404D E0 70            ld   (ff00+70),a
 RO1A:404F 7A               ld   a,d
 RO1A:4050 C9               ret                 // A = 1 ending
 RO1A:4051 3E FF            ld   a,FF
 RO1A:4053 57               ld   d,a
 RO1A:4054 F1               pop  af
 RO1A:4055 E0 82            ld   (ff00+82),a
 RO1A:4057 E0 70            ld   (ff00+70),a
 RO1A:4059 7A               ld   a,d
 RO1A:405A C9               ret                 // A = -1 ending
 RO1A:405B 57               ld   d,a            // Starts with backdrop number
 RO1A:405C F0 82            ld   a,(ff00+82)
 RO1A:405E F5               push af
 RO1A:405F 3E 04            ld   a,04
 RO1A:4061 E0 82            ld   (ff00+82),a
 RO1A:4063 E0 70            ld   (ff00+70),a
 RO1A:4065 7A               ld   a,d
 RO1A:4066 F5               push af
 RO1A:4067 78               ld   a,b
 RO1A:4068 EA A4 C4         ld   (C4A4),a
 RO1A:406B F1               pop  af
 RO1A:406C EA A5 C4         ld   (C4A5),a
 RO1A:406F 4F               ld   c,a
 RO1A:4070 CD C6 44         call 44C6           // Given backdrop's graphics data pointer table established within WRA4($D2FE) 17 byte (A is backdrop number)
 RO1A:4073 3E 00            ld   a,00
 RO1A:4075 E0 83            ld   (ff00+83),a
 RO1A:4077 E0 4F            ld   (ff00+4F),a
 RO1A:4079 FA FE D2         ld   a,(D2FE)
 RO1A:407C 5F               ld   e,a
 RO1A:407D FA FF D2         ld   a,(D2FF)
 RO1A:4080 57               ld   d,a
 RO1A:4081 FA 0A D3         ld   a,(D30A)
 RO1A:4084 4F               ld   c,a
 RO1A:4085 FA 0B D3         ld   a,(D30B)
 RO1A:4088 47               ld   b,a            // BC holds amount of graphics
 RO1A:4089 D5               push de
 RO1A:408A C5               push bc
 RO1A:408B 11 00 08         ld   de,0800
 RO1A:408E 60               ld   h,b
 RO1A:408F 69               ld   l,c
 RO1A:4090 CD CA 29         call 29CA           // Carry Flag active if DE < HL, A = 0 if DE = HL
 RO1A:4093 38 02            jr   c,4097
 RO1A:4095 18 3F            jr   40D6           // Branches if no surplus
 RO1A:4097 11 00 08         ld   de,0800
 RO1A:409A FA 0A D3         ld   a,(D30A)
 RO1A:409D 6F               ld   l,a
 RO1A:409E FA 0B D3         ld   a,(D30B)
 RO1A:40A1 67               ld   h,a            // HL holds amount of graphics
 RO1A:40A2 CD C3 29         call 29C3           // HL -= DE
 RO1A:40A5 E5               push hl
 RO1A:40A6 21 00 08         ld   hl,0800
 RO1A:40A9 FA FE D2         ld   a,(D2FE)
 RO1A:40AC 4F               ld   c,a
 RO1A:40AD FA FF D2         ld   a,(D2FF)
 RO1A:40B0 47               ld   b,a
 RO1A:40B1 09               add  hl,bc
 RO1A:40B2 54               ld   d,h
 RO1A:40B3 5D               ld   e,l
 RO1A:40B4 E1               pop  hl             // HL = surplus amount of graphics
 RO1A:40B5 44               ld   b,h
 RO1A:40B6 4D               ld   c,l
 RO1A:40B7 21 00 88         ld   hl,8800
 RO1A:40BA FA 0C D3         ld   a,(D30C)
 RO1A:40BD EA A3 C4         ld   (C4A3),a
 RO1A:40C0 CD 50 01         call 0150           // (HL ~ HL+BC-1) = ROM($C4A3):(DE ~ DE+BC-1)
 RO1A:40C3 C1               pop  bc
 RO1A:40C4 D1               pop  de
 RO1A:40C5 01 00 08         ld   bc,0800
 RO1A:40C8 21 00 90         ld   hl,9000
 RO1A:40CB FA 0C D3         ld   a,(D30C)
 RO1A:40CE EA A3 C4         ld   (C4A3),a
 RO1A:40D1 CD 50 01         call 0150           // (HL ~ HL+BC-1) = ROM($C4A3):(DE ~ DE+BC-1)
 RO1A:40D4 18 0E            jr   40E4           // End of branch handling over 127 graphics tiles
 RO1A:40D6 C1               pop  bc
 RO1A:40D7 D1               pop  de
 RO1A:40D8 21 00 90         ld   hl,9000
 RO1A:40DB FA 0C D3         ld   a,(D30C)
 RO1A:40DE EA A3 C4         ld   (C4A3),a
 RO1A:40E1 CD 50 01         call 0150           // (HL ~ HL+BC-1) = ROM($C4A3):(DE ~ DE+BC-1)
 RO1A:40E4 FA A0 C4         ld   a,(C4A0)
 RO1A:40E7 FA A4 C4         ld   a,(C4A4)
 RO1A:40EA FE 00            cp   a,00
 RO1A:40EC 28 08            jr   z,40F6
 RO1A:40EE FE 01            cp   a,01
 RO1A:40F0 28 0E            jr   z,4100
 RO1A:40F2 FE 02            cp   a,02
 RO1A:40F4 28 14            jr   z,410A
 RO1A:40F6 FA 05 D3         ld   a,(D305)
 RO1A:40F9 67               ld   h,a
 RO1A:40FA FA 04 D3         ld   a,(D304)
 RO1A:40FD 6F               ld   l,a
 RO1A:40FE 18 12            jr   4112           // Palette Set 1
 RO1A:4100 FA 07 D3         ld   a,(D307)
 RO1A:4103 67               ld   h,a
 RO1A:4104 FA 06 D3         ld   a,(D306)
 RO1A:4107 6F               ld   l,a
 RO1A:4108 18 08            jr   4112           // Palette Set 2
 RO1A:410A FA 09 D3         ld   a,(D309)
 RO1A:410D 67               ld   h,a
 RO1A:410E FA 08 D3         ld   a,(D308)
 RO1A:4111 6F               ld   l,a            // Palette Set 3
 RO1A:4112 FA 0C D3         ld   a,(D30C)
 RO1A:4115 4F               ld   c,a            // C holds graphics' ROM Block
 RO1A:4116 3E 00            ld   a,00
 RO1A:4118 06 08            ld   b,08
 RO1A:411A CD D9 06         call 06D9           // ($C4E0 + A * 8) to ($C4E0 + A * 8 + B * 8 - 1) hold C:(HL) to C:(HL + B * 8 - 1)
 RO1A:411D CD F2 06         call 06F2           // Both BG and Sprite Palette tables are updated
 RO1A:4120 F0 83            ld   a,(ff00+83)    // Palette Set has been set up for BG Palettes by initial B
 RO1A:4122 F5               push af
 RO1A:4123 3E 01            ld   a,01
 RO1A:4125 E0 83            ld   (ff00+83),a
 RO1A:4127 E0 4F            ld   (ff00+4F),a
 RO1A:4129 FA A5 C4         ld   a,(C4A5)
 RO1A:412C 4F               ld   c,a
 RO1A:412D 06 00            ld   b,00
 RO1A:412F 21 C4 65         ld   hl,65C4
 RO1A:4132 09               add  hl,bc
 RO1A:4133 7E               ld   a,(hl)         // A = Default BG Palette; always outprioritizes any Sprites
 RO1A:4134 01 00 00         ld   bc,0000
 RO1A:4137 11 20 20         ld   de,2020
 RO1A:413A EF 15 D3 6A                          // Sets all BG tiles' Palettes to Default BG Palette
 RO1A:413E F1               pop  af
 RO1A:413F E0 83            ld   (ff00+83),a
 RO1A:4141 E0 4F            ld   (ff00+4F),a
 RO1A:4143 AF               xor  a
 RO1A:4144 EA 52 CC         ld   (CC52),a
 RO1A:4147 EA 5C CC         ld   (CC5C),a
 RO1A:414A 3E 04            ld   a,04
 RO1A:414C EA 53 CC         ld   (CC53),a
 RO1A:414F FA 0D D3         ld   a,(D30D)
 RO1A:4152 EA 56 CC         ld   (CC56),a
 RO1A:4155 FA 0E D3         ld   a,(D30E)
 RO1A:4158 EA 57 CC         ld   (CC57),a       // Backdrop size inserted
 RO1A:415B FA 01 D3         ld   a,(D301)
 RO1A:415E EA 58 CC         ld   (CC58),a
 RO1A:4161 FA 00 D3         ld   a,(D300)
 RO1A:4164 EA 59 CC         ld   (CC59),a       // Tile placement pointer inserted
 RO1A:4167 FA 0C D3         ld   a,(D30C)
 RO1A:416A EA 61 CC         ld   (CC61),a
 RO1A:416D EA 62 CC         ld   (CC62),a       // ($CC61) and ($CC62) both hold graphics' ROM Block
 RO1A:4170 FA 03 D3         ld   a,(D303)
 RO1A:4173 EA 5A CC         ld   (CC5A),a
 RO1A:4176 FA 02 D3         ld   a,(D302)
 RO1A:4179 EA 5B CC         ld   (CC5B),a       // Palettes placement pointer inserted
 RO1A:417C CD C4 36         call 36C4           // Sets up BG graphics tile placements and palette placements based on data in $CC50 bytes group
 RO1A:417F F1               pop  af
 RO1A:4180 E0 82            ld   (ff00+82),a
 RO1A:4182 E0 70            ld   (ff00+70),a
 RO1A:4184 C9               ret                 // Handles backdrop graphics as a whole (A is Backdrop number, B is used palette set)
 RO1A:4185 57               ld   d,a            // Starts with backdrop number
 RO1A:4186 F0 82            ld   a,(ff00+82)
 RO1A:4188 F5               push af
 RO1A:4189 3E 04            ld   a,04
 RO1A:418B E0 82            ld   (ff00+82),a
 RO1A:418D E0 70            ld   (ff00+70),a
 RO1A:418F 7A               ld   a,d
 RO1A:4190 F5               push af
 RO1A:4191 78               ld   a,b
 RO1A:4192 EA A4 C4         ld   (C4A4),a
 RO1A:4195 F1               pop  af
 RO1A:4196 EA A5 C4         ld   (C4A5),a
 RO1A:4199 4F               ld   c,a
 RO1A:419A CD C6 44         call 44C6           // Given backdrop's graphics data pointer table established within WRA4($D2FE) 17 byte (A is backdrop number)
 RO1A:419D 3E 00            ld   a,00
 RO1A:419F E0 83            ld   (ff00+83),a
 RO1A:41A1 E0 4F            ld   (ff00+4F),a
 RO1A:41A3 FA FE D2         ld   a,(D2FE)
 RO1A:41A6 5F               ld   e,a
 RO1A:41A7 FA FF D2         ld   a,(D2FF)
 RO1A:41AA 57               ld   d,a
 RO1A:41AB FA 0A D3         ld   a,(D30A)
 RO1A:41AE 4F               ld   c,a
 RO1A:41AF FA 0B D3         ld   a,(D30B)
 RO1A:41B2 47               ld   b,a            // BC holds amount of graphics
 RO1A:41B3 D5               push de
 RO1A:41B4 C5               push bc
 RO1A:41B5 11 00 08         ld   de,0800
 RO1A:41B8 60               ld   h,b
 RO1A:41B9 69               ld   l,c
 RO1A:41BA CD CA 29         call 29CA           // Carry Flag active if DE < HL, A = 0 if DE = HL
 RO1A:41BD 38 02            jr   c,41C1
 RO1A:41BF 18 3F            jr   4200           // Branches if no surplus
 RO1A:41C1 11 00 08         ld   de,0800
 RO1A:41C4 FA 0A D3         ld   a,(D30A)
 RO1A:41C7 6F               ld   l,a
 RO1A:41C8 FA 0B D3         ld   a,(D30B)
 RO1A:41CB 67               ld   h,a            // HL holds amount of graphics
 RO1A:41CC CD C3 29         call 29C3           // HL -= DE
 RO1A:41CF E5               push hl
 RO1A:41D0 21 00 08         ld   hl,0800
 RO1A:41D3 FA FE D2         ld   a,(D2FE)
 RO1A:41D6 4F               ld   c,a
 RO1A:41D7 FA FF D2         ld   a,(D2FF)
 RO1A:41DA 47               ld   b,a
 RO1A:41DB 09               add  hl,bc
 RO1A:41DC 54               ld   d,h
 RO1A:41DD 5D               ld   e,l
 RO1A:41DE E1               pop  hl             // HL = surplus amount of graphics
 RO1A:41DF 44               ld   b,h
 RO1A:41E0 4D               ld   c,l
 RO1A:41E1 21 00 88         ld   hl,8800
 RO1A:41E4 FA 0C D3         ld   a,(D30C)
 RO1A:41E7 EA A3 C4         ld   (C4A3),a
 RO1A:41EA CD 50 01         call 0150           // (HL ~ HL+BC-1) = ROM($C4A3):(DE ~ DE+BC-1)
 RO1A:41ED C1               pop  bc
 RO1A:41EE D1               pop  de
 RO1A:41EF 01 00 08         ld   bc,0800
 RO1A:41F2 21 00 90         ld   hl,9000
 RO1A:41F5 FA 0C D3         ld   a,(D30C)
 RO1A:41F8 EA A3 C4         ld   (C4A3),a
 RO1A:41FB CD 50 01         call 0150           // (HL ~ HL+BC-1) = ROM($C4A3):(DE ~ DE+BC-1)
 RO1A:41FE 18 0E            jr   420E           // End of branch handling over 127 graphics tiles
 RO1A:4200 C1               pop  bc
 RO1A:4201 D1               pop  de
 RO1A:4202 21 00 90         ld   hl,9000
 RO1A:4205 FA 0C D3         ld   a,(D30C)
 RO1A:4208 EA A3 C4         ld   (C4A3),a
 RO1A:420B CD 50 01         call 0150           // (HL ~ HL+BC-1) = ROM($C4A3):(DE ~ DE+BC-1)
 RO1A:420E FA A0 C4         ld   a,(C4A0)
 RO1A:4211 FA A4 C4         ld   a,(C4A4)
 RO1A:4214 FE 00            cp   a,00
 RO1A:4216 28 08            jr   z,4220
 RO1A:4218 FE 01            cp   a,01
 RO1A:421A 28 0E            jr   z,422A
 RO1A:421C FE 02            cp   a,02
 RO1A:421E 28 14            jr   z,4234
 RO1A:4220 FA 05 D3         ld   a,(D305)
 RO1A:4223 67               ld   h,a
 RO1A:4224 FA 04 D3         ld   a,(D304)
 RO1A:4227 6F               ld   l,a
 RO1A:4228 18 12            jr   423C           // Palette Set 1
 RO1A:422A FA 07 D3         ld   a,(D307)
 RO1A:422D 67               ld   h,a
 RO1A:422E FA 06 D3         ld   a,(D306)
 RO1A:4231 6F               ld   l,a
 RO1A:4232 18 08            jr   423C           // Palette Set 2
 RO1A:4234 FA 09 D3         ld   a,(D309)
 RO1A:4237 67               ld   h,a
 RO1A:4238 FA 08 D3         ld   a,(D308)
 RO1A:423B 6F               ld   l,a            // Palette Set 3
 RO1A:423C FA 0C D3         ld   a,(D30C)
 RO1A:423F 4F               ld   c,a            // C holds graphics' ROM Block
 RO1A:4240 3E 00            ld   a,00
 RO1A:4242 06 08            ld   b,08
 RO1A:4244 CD D9 06         call 06D9           // ($C4E0 + A * 8) to ($C4E0 + A * 8 + B * 8 - 1) hold C:(HL) to C:(HL + B * 8 - 1)
 RO1A:4247 CD F2 06         call 06F2           // Both BG and Sprite Palette tables are updated
 RO1A:424A F0 83            ld   a,(ff00+83)    // Palette Set has been set up for BG Palettes by initial B
 RO1A:424C F5               push af
 RO1A:424D 3E 01            ld   a,01
 RO1A:424F E0 83            ld   (ff00+83),a
 RO1A:4251 E0 4F            ld   (ff00+4F),a
 RO1A:4253 FA A5 C4         ld   a,(C4A5)
 RO1A:4256 4F               ld   c,a
 RO1A:4257 06 00            ld   b,00
 RO1A:4259 21 C4 65         ld   hl,65C4
 RO1A:425C 09               add  hl,bc
 RO1A:425D 7E               ld   a,(hl)         // A = Default BG Palette; always outprioritizes any Sprites
 RO1A:425E 01 00 00         ld   bc,0000
 RO1A:4261 11 20 20         ld   de,2020
 RO1A:4264 EF 15 D3 6A                          // Sets all BG tiles' Palettes to Default BG Palette
 RO1A:4268 F1               pop  af
 RO1A:4269 E0 83            ld   (ff00+83),a
 RO1A:426B E0 4F            ld   (ff00+4F),a
 RO1A:426D AF               xor  a
 RO1A:426E EA 52 CC         ld   (CC52),a
 RO1A:4271 EA 5C CC         ld   (CC5C),a
 RO1A:4274 3E 04            ld   a,04
 RO1A:4276 EA 53 CC         ld   (CC53),a
 RO1A:4279 FA 0D D3         ld   a,(D30D)
 RO1A:427C EA 56 CC         ld   (CC56),a
 RO1A:427F FA 0E D3         ld   a,(D30E)
 RO1A:4282 EA 57 CC         ld   (CC57),a       // Backdrop size inserted
 RO1A:4285 FA 01 D3         ld   a,(D301)
 RO1A:4288 EA 58 CC         ld   (CC58),a
 RO1A:428B FA 00 D3         ld   a,(D300)
 RO1A:428E EA 59 CC         ld   (CC59),a       // Tile placement pointer inserted
 RO1A:4291 FA 0C D3         ld   a,(D30C)
 RO1A:4294 EA 61 CC         ld   (CC61),a
 RO1A:4297 EA 62 CC         ld   (CC62),a       // ($CC61) and ($CC62) both hold graphics' ROM Block
 RO1A:429A FA 03 D3         ld   a,(D303)
 RO1A:429D EA 5A CC         ld   (CC5A),a
 RO1A:42A0 FA 02 D3         ld   a,(D302)
 RO1A:42A3 EA 5B CC         ld   (CC5B),a       // Palettes placement pointer inserted
 RO1A:42A6 CD C4 36         call 36C4           // Sets up BG graphics tile placements and palette placements based on data in $CC50 bytes group
 RO1A:42A9 F1               pop  af
 RO1A:42AA E0 82            ld   (ff00+82),a
 RO1A:42AC E0 70            ld   (ff00+70),a
 RO1A:42AE C9               ret                 // Handles backdrop graphics as a whole (A is Backdrop number, B is used palette set) (difference not clear)
 RO1A:42AF 57               ld   d,a            // Starts with backdrop number
 RO1A:42B0 F0 82            ld   a,(ff00+82)
 RO1A:42B2 F5               push af
 RO1A:42B3 3E 04            ld   a,04
 RO1A:42B5 E0 82            ld   (ff00+82),a
 RO1A:42B7 E0 70            ld   (ff00+70),a
 RO1A:42B9 7A               ld   a,d
 RO1A:42BA F5               push af
 RO1A:42BB 78               ld   a,b
 RO1A:42BC EA A4 C4         ld   (C4A4),a
 RO1A:42BF F1               pop  af
 RO1A:42C0 EA A5 C4         ld   (C4A5),a
 RO1A:42C3 4F               ld   c,a
 RO1A:42C4 CD C6 44         call 44C6           // Given backdrop's graphics data pointer table established within WRA4($D2FE) 17 byte (A is backdrop number)
 RO1A:42C7 3E 00            ld   a,00
 RO1A:42C9 E0 83            ld   (ff00+83),a
 RO1A:42CB E0 4F            ld   (ff00+4F),a
 RO1A:42CD FA FE D2         ld   a,(D2FE)
 RO1A:42D0 5F               ld   e,a
 RO1A:42D1 FA FF D2         ld   a,(D2FF)
 RO1A:42D4 57               ld   d,a
 RO1A:42D5 FA 0A D3         ld   a,(D30A)
 RO1A:42D8 4F               ld   c,a
 RO1A:42D9 FA 0B D3         ld   a,(D30B)
 RO1A:42DC 47               ld   b,a            // BC holds amount of graphics
 RO1A:42DD D5               push de
 RO1A:42DE C5               push bc
 RO1A:42DF 11 00 08         ld   de,0800
 RO1A:42E2 60               ld   h,b
 RO1A:42E3 69               ld   l,c
 RO1A:42E4 CD CA 29         call 29CA           // Carry Flag active if DE < HL, A = 0 if DE = HL
 RO1A:42E7 38 02            jr   c,42EB
 RO1A:42E9 18 3F            jr   432A           // Branches if no surplus
 RO1A:42EB 11 00 08         ld   de,0800
 RO1A:42EE FA 0A D3         ld   a,(D30A)
 RO1A:42F1 6F               ld   l,a
 RO1A:42F2 FA 0B D3         ld   a,(D30B)
 RO1A:42F5 67               ld   h,a            // HL holds amount of graphics
 RO1A:42F6 CD C3 29         call 29C3           // HL -= DE
 RO1A:42F9 E5               push hl
 RO1A:42FA 21 00 08         ld   hl,0800
 RO1A:42FD FA FE D2         ld   a,(D2FE)
 RO1A:4300 4F               ld   c,a
 RO1A:4301 FA FF D2         ld   a,(D2FF)
 RO1A:4304 47               ld   b,a
 RO1A:4305 09               add  hl,bc
 RO1A:4306 54               ld   d,h
 RO1A:4307 5D               ld   e,l
 RO1A:4308 E1               pop  hl             // HL = surplus amount of graphics
 RO1A:4309 44               ld   b,h
 RO1A:430A 4D               ld   c,l
 RO1A:430B 21 00 88         ld   hl,8800
 RO1A:430E FA 0C D3         ld   a,(D30C)
 RO1A:4311 EA A3 C4         ld   (C4A3),a
 RO1A:4314 CD 50 01         call 0150           // (HL ~ HL+BC-1) = ROM($C4A3):(DE ~ DE+BC-1)
 RO1A:4317 C1               pop  bc
 RO1A:4318 D1               pop  de
 RO1A:4319 01 00 08         ld   bc,0800
 RO1A:431C 21 00 90         ld   hl,9000
 RO1A:431F FA 0C D3         ld   a,(D30C)
 RO1A:4322 EA A3 C4         ld   (C4A3),a
 RO1A:4325 CD 50 01         call 0150           // (HL ~ HL+BC-1) = ROM($C4A3):(DE ~ DE+BC-1)
 RO1A:4328 18 0E            jr   4338           // End of branch handling over 127 graphics tiles
 RO1A:432A C1               pop  bc
 RO1A:432B D1               pop  de
 RO1A:432C 21 00 90         ld   hl,9000
 RO1A:432F FA 0C D3         ld   a,(D30C)
 RO1A:4332 EA A3 C4         ld   (C4A3),a
 RO1A:4335 CD 50 01         call 0150           // (HL ~ HL+BC-1) = ROM($C4A3):(DE ~ DE+BC-1)
 RO1A:4338 FA A0 C4         ld   a,(C4A0)
 RO1A:433B FA A4 C4         ld   a,(C4A4)
 RO1A:433E FE 00            cp   a,00
 RO1A:4340 28 08            jr   z,434A
 RO1A:4342 FE 01            cp   a,01
 RO1A:4344 28 0E            jr   z,4354
 RO1A:4346 FE 02            cp   a,02
 RO1A:4348 28 14            jr   z,435E
 RO1A:434A FA 05 D3         ld   a,(D305)
 RO1A:434D 67               ld   h,a
 RO1A:434E FA 04 D3         ld   a,(D304)
 RO1A:4351 6F               ld   l,a
 RO1A:4352 18 12            jr   4366           // Palette Set 1
 RO1A:4354 FA 07 D3         ld   a,(D307)
 RO1A:4357 67               ld   h,a
 RO1A:4358 FA 06 D3         ld   a,(D306)
 RO1A:435B 6F               ld   l,a
 RO1A:435C 18 08            jr   4366           // Palette Set 2
 RO1A:435E FA 09 D3         ld   a,(D309)
 RO1A:4361 67               ld   h,a
 RO1A:4362 FA 08 D3         ld   a,(D308)
 RO1A:4365 6F               ld   l,a            // Palette Set 3
 RO1A:4366 FA 0C D3         ld   a,(D30C)
 RO1A:4369 4F               ld   c,a            // C holds graphics' ROM Block
 RO1A:436A 3E 00            ld   a,00
 RO1A:436C 06 08            ld   b,08
 RO1A:436E CD D9 06         call 06D9           // ($C4E0 + A * 8) to ($C4E0 + A * 8 + B * 8 - 1) hold C:(HL) to C:(HL + B * 8 - 1)
 RO1A:4371 CD F2 06         call 06F2           // Both BG and Sprite Palette tables are updated
 RO1A:4374 F0 83            ld   a,(ff00+83)    // Palette Set has been set up for BG Palettes by initial B
 RO1A:4376 F5               push af
 RO1A:4377 3E 01            ld   a,01
 RO1A:4379 E0 83            ld   (ff00+83),a
 RO1A:437B E0 4F            ld   (ff00+4F),a
 RO1A:437D FA A5 C4         ld   a,(C4A5)
 RO1A:4380 4F               ld   c,a
 RO1A:4381 06 00            ld   b,00
 RO1A:4383 21 C4 65         ld   hl,65C4
 RO1A:4386 09               add  hl,bc
 RO1A:4387 7E               ld   a,(hl)         // A = Default BG Palette; always outprioritizes any Sprites
 RO1A:4388 01 00 00         ld   bc,0000
 RO1A:438B 11 20 20         ld   de,2020
 RO1A:438E EF 15 D3 6A                          // Sets all BG tiles' Palettes to Default BG Palette
 RO1A:4392 F1               pop  af
 RO1A:4393 E0 83            ld   (ff00+83),a
 RO1A:4395 E0 4F            ld   (ff00+4F),a
 RO1A:4397 AF               xor  a
 RO1A:4398 EA 52 CC         ld   (CC52),a
 RO1A:439B EA 53 CC         ld   (CC53),a
 RO1A:439E EA 5C CC         ld   (CC5C),a
 RO1A:43A1 FA 0D D3         ld   a,(D30D)
 RO1A:43A4 EA 56 CC         ld   (CC56),a
 RO1A:43A7 FA 0E D3         ld   a,(D30E)
 RO1A:43AA EA 57 CC         ld   (CC57),a       // Backdrop size inserted
 RO1A:43AD FA 01 D3         ld   a,(D301)
 RO1A:43B0 EA 58 CC         ld   (CC58),a
 RO1A:43B3 FA 00 D3         ld   a,(D300)
 RO1A:43B6 EA 59 CC         ld   (CC59),a       // Tile placement pointer inserted
 RO1A:43B9 FA 0C D3         ld   a,(D30C)
 RO1A:43BC EA 61 CC         ld   (CC61),a
 RO1A:43BF EA 62 CC         ld   (CC62),a       // ($CC61) and ($CC62) both hold graphics' ROM Block
 RO1A:43C2 FA 03 D3         ld   a,(D303)
 RO1A:43C5 EA 5A CC         ld   (CC5A),a
 RO1A:43C8 FA 02 D3         ld   a,(D302)
 RO1A:43CB EA 5B CC         ld   (CC5B),a       // Palettes placement pointer inserted
 RO1A:43CE CD C4 36         call 36C4           // Sets up BG graphics tile placements and palette placements based on data in $CC50 bytes group
 RO1A:43D1 F1               pop  af
 RO1A:43D2 E0 82            ld   (ff00+82),a
 RO1A:43D4 E0 70            ld   (ff00+70),a
 RO1A:43D6 C9               ret                 // Handles backdrop graphics as a whole (A is Backdrop number, B is used palette set) (starting Y of main attraction not set to 4)
 RO1A:43D7 57               ld   d,a
 RO1A:43D8 F0 82            ld   a,(ff00+82)
 RO1A:43DA F5               push af
 RO1A:43DB 3E 04            ld   a,04
 RO1A:43DD E0 82            ld   (ff00+82),a
 RO1A:43DF E0 70            ld   (ff00+70),a
 RO1A:43E1 7A               ld   a,d
 RO1A:43E2 E5               push hl
 RO1A:43E3 F5               push af
 RO1A:43E4 CD EB 44         call 44EB           // WRA4:($D30F) 9 byte = ($6875 + A * 9) 9 byte
 RO1A:43E7 FA A0 C4         ld   a,(C4A0)
 RO1A:43EA FE 00            cp   a,00
 RO1A:43EC 20 18            jr   nz,4406
 RO1A:43EE FA 11 D3         ld   a,(D311)
 RO1A:43F1 6F               ld   l,a
 RO1A:43F2 FA 12 D3         ld   a,(D312)
 RO1A:43F5 67               ld   h,a
 RO1A:43F6 FA 17 D3         ld   a,(D317)
 RO1A:43F9 4F               ld   c,a
 RO1A:43FA 3E 08            ld   a,08
 RO1A:43FC 06 08            ld   b,08
 RO1A:43FE CD D9 06         call 06D9           // ($C4E0 + A * 8) to ($C4E0 + A * 8 + B * 8 - 1) hold C:(HL) to C:(HL + B * 8 - 1)
 RO1A:4401 CD F2 06         call 06F2           // Both BG and Sprite Palette tables are updated
 RO1A:4404 18 10            jr   4416
 RO1A:4406 21 EB 69         ld   hl,69EB
 RO1A:4409 3E 1A            ld   a,1A
 RO1A:440B 4F               ld   c,a
 RO1A:440C 3E 08            ld   a,08
 RO1A:440E 06 08            ld   b,08
 RO1A:4410 CD BC 06         call 06BC           // ($C4E0 + A * 8) to ($C4E0 + A * 8 + B * 8 - 1) hold (HL) to (HL + B * 8 - 1)
 RO1A:4413 CD F2 06         call 06F2           // Both BG and Sprite Palette tables are updated
 RO1A:4416 FA 0F D3         ld   a,(D30F)
 RO1A:4419 5F               ld   e,a
 RO1A:441A FA 10 D3         ld   a,(D310)
 RO1A:441D 57               ld   d,a
 RO1A:441E FA 15 D3         ld   a,(D315)
 RO1A:4421 4F               ld   c,a
 RO1A:4422 FA 16 D3         ld   a,(D316)
 RO1A:4425 47               ld   b,a            // BC holds size, DE holds graphics starting location on sprite's ROM Block
 RO1A:4426 F1               pop  af
 RO1A:4427 E1               pop  hl
 RO1A:4428 FA 17 D3         ld   a,(D317)
 RO1A:442B EA A3 C4         ld   (C4A3),a
 RO1A:442E CD 50 01         call 0150           // ROM($C4A3):(HL ~ HL+BC-1) = ROM($C4A3):(DE ~ DE+BC-1)
 RO1A:4431 F1               pop  af
 RO1A:4432 E0 82            ld   (ff00+82),a
 RO1A:4434 E0 70            ld   (ff00+70),a
 RO1A:4436 C9               ret                 // Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
 RO1A:4437 E5               push hl
 RO1A:4438 F0 82            ld   a,(ff00+82)
 RO1A:443A F5               push af
 RO1A:443B 3E 04            ld   a,04
 RO1A:443D E0 82            ld   (ff00+82),a
 RO1A:443F E0 70            ld   (ff00+70),a
 RO1A:4441 3E 01            ld   a,01
 RO1A:4443 CD EB 44         call 44EB           // WRA4:($D30F) 9 byte = ($687E) 9 byte
 RO1A:4446 FA A0 C4         ld   a,(C4A0)
 RO1A:4449 FE 00            cp   a,00
 RO1A:444B 20 0A            jr   nz,4457
 RO1A:444D FA 11 D3         ld   a,(D311)
 RO1A:4450 6F               ld   l,a
 RO1A:4451 FA 12 D3         ld   a,(D312)
 RO1A:4454 67               ld   h,a
 RO1A:4455 18 08            jr   445F
 RO1A:4457 FA 13 D3         ld   a,(D313)
 RO1A:445A 6F               ld   l,a
 RO1A:445B FA 14 D3         ld   a,(D314)
 RO1A:445E 67               ld   h,a            // Defaulted Palette Set for White Moon, unique Palette Set for Red Star
 RO1A:445F FA 17 D3         ld   a,(D317)
 RO1A:4462 4F               ld   c,a
 RO1A:4463 3E 08            ld   a,08
 RO1A:4465 06 08            ld   b,08
 RO1A:4467 CD D9 06         call 06D9           // ($C4E0 + A * 8) to ($C4E0 + A * 8 + B * 8 - 1) hold C:(HL) to C:(HL + B * 8 - 1)
 RO1A:446A CD F2 06         call 06F2           // Both BG and Sprite Palette tables are updated
 RO1A:446D FA 0F D3         ld   a,(D30F)
 RO1A:4470 5F               ld   e,a
 RO1A:4471 FA 10 D3         ld   a,(D310)
 RO1A:4474 57               ld   d,a
 RO1A:4475 FA 15 D3         ld   a,(D315)
 RO1A:4478 4F               ld   c,a
 RO1A:4479 FA 16 D3         ld   a,(D316)
 RO1A:447C 47               ld   b,a
 RO1A:447D 3E 00            ld   a,00
 RO1A:447F E0 83            ld   (ff00+83),a
 RO1A:4481 E0 4F            ld   (ff00+4F),a
 RO1A:4483 21 00 80         ld   hl,8000
 RO1A:4486 FA 17 D3         ld   a,(D317)
 RO1A:4489 EA A3 C4         ld   (C4A3),a
 RO1A:448C CD 50 01         call 0150           // ROM($C4A3):(HL ~ HL+BC-1) = ROM($C4A3):(DE ~ DE+BC-1)
 RO1A:448F 3E 00            ld   a,00
 RO1A:4491 E0 83            ld   (ff00+83),a
 RO1A:4493 E0 4F            ld   (ff00+4F),a
 RO1A:4495 AF               xor  a
 RO1A:4496 EA CC C4         ld   (C4CC),a
 RO1A:4499 EA CE C4         ld   (C4CE),a
 RO1A:449C EA D1 C4         ld   (C4D1),a
 RO1A:449F EA D2 C4         ld   (C4D2),a
 RO1A:44A2 EA D3 C4         ld   (C4D3),a
 RO1A:44A5 3E 78            ld   a,78
 RO1A:44A7 EA D3 C4         ld   (C4D3),a
 RO1A:44AA AF               xor  a
 RO1A:44AB EA D5 C4         ld   (C4D5),a
 RO1A:44AE EA D6 C4         ld   (C4D6),a
 RO1A:44B1 EA D7 C4         ld   (C4D7),a
 RO1A:44B4 06 1D            ld   b,1D
 RO1A:44B6 0E 00            ld   c,00
 RO1A:44B8 11 A7 4D         ld   de,4DA7
 RO1A:44BB E1               pop  hl
 RO1A:44BC EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:44C0 F1               pop  af
 RO1A:44C1 E0 82            ld   (ff00+82),a
 RO1A:44C3 E0 70            ld   (ff00+70),a
 RO1A:44C5 C9               ret                 // Likely meant to established Gunship-related graphics; seems to be unused, and for the better by the looks of things
 RO1A:44C6 57               ld   d,a
 RO1A:44C7 F0 82            ld   a,(ff00+82)
 RO1A:44C9 F5               push af
 RO1A:44CA 3E 04            ld   a,04
 RO1A:44CC E0 82            ld   (ff00+82),a
 RO1A:44CE E0 70            ld   (ff00+70),a
 RO1A:44D0 7A               ld   a,d
 RO1A:44D1 06 11            ld   b,11
 RO1A:44D3 CD 95 29         call 2995           // HL = A * 17
 RO1A:44D6 01 E8 63         ld   bc,63E8
 RO1A:44D9 09               add  hl,bc
 RO1A:44DA 54               ld   d,h
 RO1A:44DB 5D               ld   e,l
 RO1A:44DC 21 FE D2         ld   hl,D2FE
 RO1A:44DF 01 11 00         ld   bc,0011
 RO1A:44E2 CD 50 3B         call 3B50           // (HL ~ HL+BC-1) = (DE ~ DE+BC-1)
 RO1A:44E5 F1               pop  af
 RO1A:44E6 E0 82            ld   (ff00+82),a
 RO1A:44E8 E0 70            ld   (ff00+70),a
 RO1A:44EA C9               ret                 // Given backdrop's graphics data pointer table established within WRA4($D2FE) 17 byte (A is backdrop number)
 RO1A:44EB 57               ld   d,a
 RO1A:44EC F0 82            ld   a,(ff00+82)
 RO1A:44EE F5               push af
 RO1A:44EF 3E 04            ld   a,04
 RO1A:44F1 E0 82            ld   (ff00+82),a
 RO1A:44F3 E0 70            ld   (ff00+70),a
 RO1A:44F5 7A               ld   a,d
 RO1A:44F6 06 09            ld   b,09
 RO1A:44F8 CD 95 29         call 2995           // HL = A * 9
 RO1A:44FB 01 75 68         ld   bc,6875
 RO1A:44FE 09               add  hl,bc
 RO1A:44FF 54               ld   d,h
 RO1A:4500 5D               ld   e,l
 RO1A:4501 21 0F D3         ld   hl,D30F
 RO1A:4504 01 09 00         ld   bc,0009
 RO1A:4507 CD 50 3B         call 3B50           // (HL ~ HL+BC-1) = (DE ~ DE+BC-1)
 RO1A:450A F1               pop  af
 RO1A:450B E0 82            ld   (ff00+82),a
 RO1A:450D E0 70            ld   (ff00+70),a
 RO1A:450F C9               ret                 // WRA4:($D30F) 9 byte = ($6875 + A * 9) 9 byte
 RO1A:4510 57               ld   d,a
 RO1A:4511 F0 82            ld   a,(ff00+82)
 RO1A:4513 F5               push af
 RO1A:4514 3E 04            ld   a,04
 RO1A:4516 E0 82            ld   (ff00+82),a
 RO1A:4518 E0 70            ld   (ff00+70),a
 RO1A:451A 7A               ld   a,d
 RO1A:451B 06 03            ld   b,03
 RO1A:451D CD 95 29         call 2995           // HL = A * 3
 RO1A:4520 01 D8 65         ld   bc,65D8
 RO1A:4523 09               add  hl,bc          // HL = $65D8 + A * 3
 RO1A:4524 54               ld   d,h
 RO1A:4525 5D               ld   e,l
 RO1A:4526 21 18 D3         ld   hl,D318
 RO1A:4529 01 03 00         ld   bc,0003
 RO1A:452C CD 50 3B         call 3B50           // (HL ~ HL+BC-1) = (DE ~ DE+BC-1) (WRA4($D318) holds basic pointer for list of pointers to sprite stats modification tables)
 RO1A:452F FA 1A D3         ld   a,(D31A)
 RO1A:4532 47               ld   b,a
 RO1A:4533 FA 18 D3         ld   a,(D318)
 RO1A:4536 5F               ld   e,a
 RO1A:4537 FA 19 D3         ld   a,(D319)
 RO1A:453A 57               ld   d,a
 RO1A:453B F1               pop  af
 RO1A:453C E0 82            ld   (ff00+82),a
 RO1A:453E E0 70            ld   (ff00+70),a
 RO1A:4540 C9               ret                 // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:4541 57               ld   d,a
 RO1A:4542 F0 82            ld   a,(ff00+82)
 RO1A:4544 F5               push af
 RO1A:4545 3E 04            ld   a,04
 RO1A:4547 E0 82            ld   (ff00+82),a
 RO1A:4549 E0 70            ld   (ff00+70),a
 RO1A:454B D5               push de
 RO1A:454C EF 17 00 40                          // Clear all sprites in $C300 table, empties ($C4C8~$C4DB), WRA4($DB2C), WRA4($DB2E) 2 byte, and WRA4($D3AC~$DB2B)
 RO1A:4550 EF 27 D4 40                          // LCD Display shut off, empties graphics
 RO1A:4554 D1               pop  de
 RO1A:4555 7A               ld   a,d
 RO1A:4556 21 62 45         ld   hl,4562
 RO1A:4559 CD 8F 3A         call 3A8F           // CALL [HL + 2A]
 RO1A:455C F1               pop  af
 RO1A:455D E0 82            ld   (ff00+82),a
 RO1A:455F E0 70            ld   (ff00+70),a
 RO1A:4561 C9               ret                 // Plays out intended process indicated by A

 RO1A:4562 D0 45                                // $45D0: Capture, success
 RO1A:4564 F5 46                                // $46F5: Capture
 RO1A:4566 6F 48                                // $486F: Work Car action
 RO1A:4568 63 50                                // $5063: Supply
 RO1A:456A 5A 55                                // $555A: Load
 RO1A:456C 9E 58                                // $589E: Unload
 RO1A:456E 13 59                                // $5913: Unload (Aircraft Carrier)
 RO1A:4570 E8 5D                                // $5DE8: Load (Aircraft Carrier)
 RO1A:4572 96 5E                                // $5E96: ? (Summon?)

 RO1A:4574 F0 95            ld   a,(ff00+95)
 RO1A:4576 81               add  c
 RO1A:4577 E0 95            ld   (ff00+95),a
 RO1A:4579 C9               ret  
 RO1A:457A 57               ld   d,a
 RO1A:457B F0 82            ld   a,(ff00+82)
 RO1A:457D F5               push af
 RO1A:457E 3E 04            ld   a,04
 RO1A:4580 E0 82            ld   (ff00+82),a
 RO1A:4582 E0 70            ld   (ff00+70),a
 RO1A:4584 7A               ld   a,d            // A = Unit Type
 RO1A:4585 06 02            ld   b,02
 RO1A:4587 CD 95 29         call 2995           // HL = A * 2
 RO1A:458A 01 83 69         ld   bc,6983
 RO1A:458D 09               add  hl,bc
 RO1A:458E 2A               ldi  a,(hl)         // Sprite Group
 RO1A:458F E5               push hl
 RO1A:4590 21 00 80         ld   hl,8000
 RO1A:4593 CD D7 43         call 43D7           // Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
 RO1A:4596 E1               pop  hl
 RO1A:4597 7E               ld   a,(hl)         // Sprite number
 RO1A:4598 EA 3C D3         ld   (D33C),a
 RO1A:459B EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:459F F1               pop  af
 RO1A:45A0 E0 82            ld   (ff00+82),a
 RO1A:45A2 E0 70            ld   (ff00+70),a
 RO1A:45A4 C9               ret                 // B holds unit A sprite's ROM block, DE holds location of first list of pointers to sprite stats modification tables for unit A sprite, WRA4($D33C) set to unit A sprite's first pointer number, unit A sprite's group graphics tiles established starting at ($8000)
 RO1A:45A5 57               ld   d,a
 RO1A:45A6 F0 82            ld   a,(ff00+82)
 RO1A:45A8 F5               push af
 RO1A:45A9 3E 04            ld   a,04
 RO1A:45AB E0 82            ld   (ff00+82),a
 RO1A:45AD E0 70            ld   (ff00+70),a
 RO1A:45AF 7A               ld   a,d
 RO1A:45B0 06 02            ld   b,02
 RO1A:45B2 CD 95 29         call 2995           // HL = A * 2
 RO1A:45B5 01 80 63         ld   bc,6380
 RO1A:45B8 09               add  hl,bc
 RO1A:45B9 2A               ldi  a,(hl)
 RO1A:45BA E5               push hl
 RO1A:45BB 21 00 80         ld   hl,8000
 RO1A:45BE CD D7 43         call 43D7           // Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
 RO1A:45C1 E1               pop  hl
 RO1A:45C2 7E               ld   a,(hl)
 RO1A:45C3 EA 3C D3         ld   (D33C),a
 RO1A:45C6 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:45CA F1               pop  af
 RO1A:45CB E0 82            ld   (ff00+82),a
 RO1A:45CD E0 70            ld   (ff00+70),a
 RO1A:45CF C9               ret  
 RO1A:45D0 CD B5 47         call 47B5           // Capture animation unconditional portion plays out for 210 frames; if A, B, or Start is pressed, procedure is ended prematurely with Carry Flag set and ending sound not used
 RO1A:45D3 DA 7E 46         jp   c,467E         // Ends entire Capture animation prematurely if A, B, or Start was pressed within 210 frames
 RO1A:45D6 11 B4 00         ld   de,00B4
 RO1A:45D9 01 00 00         ld   bc,0000
 RO1A:45DC 3E 01            ld   a,01
 RO1A:45DE EF 31 67 40                          // BG Palettes alternate every 9 frames ending with the capturing player's Palettes after 180 frames; if A, B, or Start is pressed, Carry Flag is Set and process is ended prematurely
 RO1A:45E2 DA 7E 46         jp   c,467E         // Ends entire Capture animation prematurely if A, B, or Start was pressed within 180 frames
 RO1A:45E5 3E 00            ld   a,00
 RO1A:45E7 E0 83            ld   (ff00+83),a
 RO1A:45E9 E0 4F            ld   (ff00+4F),a
 RO1A:45EB 3E 0D            ld   a,0D           // Infantry
 RO1A:45ED 21 00 80         ld   hl,8000
 RO1A:45F0 CD D7 43         call 43D7           // Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
 RO1A:45F3 3E 93            ld   a,93           // Soldier basic running (left)
 RO1A:45F5 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:45F9 3E FF            ld   a,FF
 RO1A:45FB EA CC C4         ld   (C4CC),a       // Moves left, of course
 RO1A:45FE AF               xor  a
 RO1A:45FF EA CE C4         ld   (C4CE),a
 RO1A:4602 EA D1 C4         ld   (C4D1),a
 RO1A:4605 EA D2 C4         ld   (C4D2),a       // Spawn timer = 0
 RO1A:4608 EA D3 C4         ld   (C4D3),a
 RO1A:460B 3E 1E            ld   a,1E
 RO1A:460D EA D4 C4         ld   (C4D4),a       // Instruction timer = 30
 RO1A:4610 3E 43            ld   a,43
 RO1A:4612 EA D5 C4         ld   (C4D5),a
 RO1A:4615 3E 8F            ld   a,8F
 RO1A:4617 EA D6 C4         ld   (C4D6),a
 RO1A:461A 3E 27            ld   a,27
 RO1A:461C EA D7 C4         ld   (C4D7),a       // Instruction $27:$438F: Soldier Victory Pose (facing left); resets itself every 60 frames
 RO1A:461F 0E 00            ld   c,00
 RO1A:4621 CD B1 46         call 46B1           // H holds 72 for City or Airports, 96 for Harbor, or 88 for anything else; L holds 112 for HQ, 104 for anything else
 RO1A:4624 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:4628 3E 00            ld   a,00
 RO1A:462A E0 83            ld   (ff00+83),a
 RO1A:462C E0 4F            ld   (ff00+4F),a
 RO1A:462E 3E 0D            ld   a,0D           // Infantry
 RO1A:4630 21 00 80         ld   hl,8000
 RO1A:4633 CD D7 43         call 43D7           // Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
 RO1A:4636 3E 98            ld   a,98           // Soldier basic running (right)
 RO1A:4638 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:463C 3E 00            ld   a,00
 RO1A:463E E0 83            ld   (ff00+83),a
 RO1A:4640 E0 4F            ld   (ff00+4F),a
 RO1A:4642 3E 01            ld   a,01
 RO1A:4644 EA CC C4         ld   (C4CC),a       // Moves right, of course
 RO1A:4647 AF               xor  a
 RO1A:4648 EA CE C4         ld   (C4CE),a
 RO1A:464B EA D1 C4         ld   (C4D1),a
 RO1A:464E EA D2 C4         ld   (C4D2),a
 RO1A:4651 AF               xor  a
 RO1A:4652 EA D3 C4         ld   (C4D3),a
 RO1A:4655 3E 1E            ld   a,1E
 RO1A:4657 EA D4 C4         ld   (C4D4),a       // 30 frames
 RO1A:465A 3E 43            ld   a,43
 RO1A:465C EA D5 C4         ld   (C4D5),a
 RO1A:465F 3E 8F            ld   a,8F
 RO1A:4661 EA D6 C4         ld   (C4D6),a
 RO1A:4664 3E 27            ld   a,27
 RO1A:4666 EA D7 C4         ld   (C4D7),a       // Instruction $27:$438F: Soldier Victory Pose (facing left); resets itself every 60 frames
 RO1A:4669 0E 00            ld   c,00
 RO1A:466B CD B1 46         call 46B1           // H holds $48 for City or Airports, $60 for Harbor, or $58 for anything else; L holds $70 for HQ, $68 for anything else (based on ($C4A1))
 RO1A:466E EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:4672 11 5A 00         ld   de,005A
 RO1A:4675 01 00 00         ld   bc,0000
 RO1A:4678 EF 27 47 40                          // Carry Flag set by A, B, or Start being pressed within 90 frames; no gradual scroll
 RO1A:467C 38 00            jr   c,467E
 RO1A:467E CD 43 38         call 3843
 RO1A:4681 CD 15 38         call 3815
 RO1A:4684 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 RO1A:4687 EF 17 00 40                          // Clear all sprites in $C300 table, empties ($C4C8~$C4DB), WRA4($DB2C), WRA4($DB2E) 2 byte, and WRA4($D3AC~$DB2B)
 RO1A:468B C9               ret                 // Capture successful animation plays out for up to 8 seconds
 RO1A:468C C5               push bc
 RO1A:468D FA A1 C4         ld   a,(C4A1)
 RO1A:4690 06 00            ld   b,00
 RO1A:4692 4F               ld   c,a
 RO1A:4693 21 C8 46         ld   hl,46C8
 RO1A:4696 09               add  hl,bc
 RO1A:4697 7E               ld   a,(hl)
 RO1A:4698 C1               pop  bc
 RO1A:4699 C9               ret                 // A = 65 for Harbor, 105 for City, 100 for Airports, 90 for anything else
 RO1A:469A C5               push bc
 RO1A:469B D5               push de
 RO1A:469C FA A1 C4         ld   a,(C4A1)
 RO1A:469F 06 02            ld   b,02
 RO1A:46A1 CD 95 29         call 2995           // HL = A * B
 RO1A:46A4 01 D1 46         ld   bc,46D1
 RO1A:46A7 09               add  hl,bc
 RO1A:46A8 2A               ldi  a,(hl)
 RO1A:46A9 4F               ld   c,a
 RO1A:46AA 7E               ld   a,(hl)
 RO1A:46AB 47               ld   b,a
 RO1A:46AC 60               ld   h,b
 RO1A:46AD 69               ld   l,c
 RO1A:46AE D1               pop  de
 RO1A:46AF C1               pop  bc
 RO1A:46B0 C9               ret                 // H holds $A8 for Harbor, $B0 for anything else; L holds $70 for HQ, $68 for anything else
 RO1A:46B1 C5               push bc
 RO1A:46B2 D5               push de
 RO1A:46B3 FA A1 C4         ld   a,(C4A1)
 RO1A:46B6 06 02            ld   b,02
 RO1A:46B8 CD 95 29         call 2995           // HL = ($C4A1) * 2
 RO1A:46BB 01 E3 46         ld   bc,46E3
 RO1A:46BE 09               add  hl,bc
 RO1A:46BF 2A               ldi  a,(hl)
 RO1A:46C0 4F               ld   c,a
 RO1A:46C1 7E               ld   a,(hl)
 RO1A:46C2 47               ld   b,a
 RO1A:46C3 60               ld   h,b
 RO1A:46C4 69               ld   l,c
 RO1A:46C5 D1               pop  de
 RO1A:46C6 C1               pop  bc
 RO1A:46C7 C9               ret                 // H holds $48 for City or Airports, $60 for Harbor, or $58 for anything else; L holds $70 for HQ, $68 for anything else (based on ($C4A1))

 RO1A:46C8 5A               ld   e,d
 RO1A:46C9 69               ld   l,c
 RO1A:46CA 5A               ld   e,d
 RO1A:46CB 41               ld   b,c
 RO1A:46CC 64               ld   h,h
 RO1A:46CD 64               ld   h,h
 RO1A:46CE 5A               ld   e,d
 RO1A:46CF 5A               ld   e,d
 RO1A:46D0 5A

 RO1A:46D1 70 B0               or   b
 RO1A:46D3 68 B0               or   b
 RO1A:46D5 68 B0               or   b
 RO1A:46D7 68 A8               xor  b
 RO1A:46D9 68 B0               or   b
 RO1A:46DB 68 B0               or   b
 RO1A:46DD 68 B0               or   b
 RO1A:46DF 68 B0               or   b
 RO1A:46E1 68 B0               or   b

 RO1A:46E3 70 58                                // HQ
 RO1A:46E5 68 48                                // City
 RO1A:46E7 68 58                                // Factory
 RO1A:46E9 68 60                                // Harbor
 RO1A:46EB 68 48                                // Airport
 RO1A:46ED 68 48                                // Simple Airport
 RO1A:46EF 68 58                                // Bridge
 RO1A:46F1 68 58                                // Road
 RO1A:46F3 68 58                                // Communication Tower

 RO1A:46F5 CD B5 47         call 47B5           // Capture animation unconditional portion plays out for 210 frames; if A, B, or Start is pressed, procedure is ended prematurely with Carry Flag set and ending sound not used
 RO1A:46F8 DA A7 47         jp   c,47A7         // Ends entire Capture animation prematurely if A, B, or Start was pressed within 210 frames
 RO1A:46FB 11 B4 00         ld   de,00B4
 RO1A:46FE 01 00 00         ld   bc,0000
 RO1A:4701 AF               xor  a
 RO1A:4702 EF 31 67 40                          // BG Palettes alternate every 9 frames ending with the holding out player's Palettes after 180 frames; if A, B, or Start is pressed, Carry Flag is Set and process is ended prematurely
 RO1A:4706 DA A7 47         jp   c,47A7         // Ends entire Capture animation prematurely if A, B, or Start was pressed within 180 frames
 RO1A:4709 3E 00            ld   a,00
 RO1A:470B E0 83            ld   (ff00+83),a
 RO1A:470D E0 4F            ld   (ff00+4F),a
 RO1A:470F 3E 0D            ld   a,0D           // Infantry
 RO1A:4711 21 00 80         ld   hl,8000
 RO1A:4714 CD D7 43         call 43D7           // Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
 RO1A:4717 3E 98            ld   a,98           // Soldier basic running (right)
 RO1A:4719 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:471D 3E 00            ld   a,00
 RO1A:471F E0 83            ld   (ff00+83),a
 RO1A:4721 E0 4F            ld   (ff00+4F),a
 RO1A:4723 3E 01            ld   a,01
 RO1A:4725 EA CC C4         ld   (C4CC),a
 RO1A:4728 AF               xor  a
 RO1A:4729 EA CE C4         ld   (C4CE),a
 RO1A:472C EA D1 C4         ld   (C4D1),a
 RO1A:472F EA D2 C4         ld   (C4D2),a
 RO1A:4732 EA D3 C4         ld   (C4D3),a
 RO1A:4735 CD 8C 46         call 468C           // A = 65 for Harbor, 105 for City, 100 for Airports, 90 for anything else
 RO1A:4738 EA D4 C4         ld   (C4D4),a
 RO1A:473B AF               xor  a
 RO1A:473C EA D5 C4         ld   (C4D5),a
 RO1A:473F EA D6 C4         ld   (C4D6),a
 RO1A:4742 EA D7 C4         ld   (C4D7),a
 RO1A:4745 0E 00            ld   c,00
 RO1A:4747 CD B1 46         call 46B1           // H holds 72 for City or Airports, 96 for Harbor, or 88 for anything else; L holds 112 for HQ, 104 for anything else
 RO1A:474A EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:474E 3E 3D            ld   a,3D
 RO1A:4750 CD 44 38         call 3844
 RO1A:4753 3E 00            ld   a,00
 RO1A:4755 E0 83            ld   (ff00+83),a
 RO1A:4757 E0 4F            ld   (ff00+4F),a
 RO1A:4759 3E 0D            ld   a,0D           // Infantry
 RO1A:475B 21 00 80         ld   hl,8000
 RO1A:475E CD D7 43         call 43D7           // Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
 RO1A:4761 3E 98            ld   a,98           // Soldier basic running (right)
 RO1A:4763 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:4767 3E 00            ld   a,00
 RO1A:4769 E0 83            ld   (ff00+83),a
 RO1A:476B E0 4F            ld   (ff00+4F),a
 RO1A:476D 3E 01            ld   a,01
 RO1A:476F EA CC C4         ld   (C4CC),a
 RO1A:4772 AF               xor  a
 RO1A:4773 EA CE C4         ld   (C4CE),a
 RO1A:4776 EA D1 C4         ld   (C4D1),a
 RO1A:4779 3E 1E            ld   a,1E
 RO1A:477B EA D2 C4         ld   (C4D2),a
 RO1A:477E AF               xor  a
 RO1A:477F EA D3 C4         ld   (C4D3),a
 RO1A:4782 CD 8C 46         call 468C           // A = 65 for Harbor, 105 for City, 100 for Airports, 90 for anything else
 RO1A:4785 EA D4 C4         ld   (C4D4),a
 RO1A:4788 AF               xor  a
 RO1A:4789 EA D5 C4         ld   (C4D5),a
 RO1A:478C EA D6 C4         ld   (C4D6),a
 RO1A:478F EA D7 C4         ld   (C4D7),a
 RO1A:4792 0E 00            ld   c,00
 RO1A:4794 CD B1 46         call 46B1           // H holds 72 for City or Airports, 96 for Harbor, or 88 for anything else; L holds 112 for HQ, 104 for anything else
 RO1A:4797 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:479B 11 96 00         ld   de,0096
 RO1A:479E 01 00 00         ld   bc,0000
 RO1A:47A1 EF 27 47 40                          // Carry Flag set by A, B, or Start being pressed within 150 frames; no gradual scroll
 RO1A:47A5 38 00            jr   c,47A7
 RO1A:47A7 CD 43 38         call 3843           // Sound force ended
 RO1A:47AA CD 15 38         call 3815           // Music force ended
 RO1A:47AD CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 RO1A:47B0 EF 17 00 40                          // Clear all sprites in $C300 table, empties ($C4C8~$C4DB), WRA4($DB2C), WRA4($DB2E) 2 byte, and WRA4($D3AC~$DB2B)
 RO1A:47B4 C9               ret                 // Capture non-successful animation plays out
 RO1A:47B5 FA A2 C4         ld   a,(C4A2)
 RO1A:47B8 47               ld   b,a
 RO1A:47B9 FA A1 C4         ld   a,(C4A1)       // A has Backdrop, B has Ownership
 RO1A:47BC CD 5B 40         call 405B           // Handles backdrop graphics as a whole (A is Backdrop number, B is used palette set)
 RO1A:47BF 3E 00            ld   a,00
 RO1A:47C1 E0 83            ld   (ff00+83),a
 RO1A:47C3 E0 4F            ld   (ff00+4F),a
 RO1A:47C5 3E 0D            ld   a,0D           // Infantry
 RO1A:47C7 21 00 80         ld   hl,8000
 RO1A:47CA CD D7 43         call 43D7           // Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
 RO1A:47CD 3E 93            ld   a,93           // Soldier basic running (left)
 RO1A:47CF EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:47D3 3E FF            ld   a,FF
 RO1A:47D5 EA CC C4         ld   (C4CC),a       // Moves left 1 pixel per frame
 RO1A:47D8 AF               xor  a
 RO1A:47D9 EA CE C4         ld   (C4CE),a
 RO1A:47DC EA D1 C4         ld   (C4D1),a
 RO1A:47DF EA D2 C4         ld   (C4D2),a
 RO1A:47E2 EA D3 C4         ld   (C4D3),a
 RO1A:47E5 CD 8C 46         call 468C           // A = 65 for Harbor, 105 for City, 100 for Airports, 90 for anything else
 RO1A:47E8 EA D4 C4         ld   (C4D4),a
 RO1A:47EB AF               xor  a
 RO1A:47EC EA D5 C4         ld   (C4D5),a
 RO1A:47EF EA D6 C4         ld   (C4D6),a
 RO1A:47F2 EA D7 C4         ld   (C4D7),a
 RO1A:47F5 0E 00            ld   c,00
 RO1A:47F7 CD 9A 46         call 469A           // H holds 168 for Harbor, 176 for anything else; L holds 112 for HQ, 104 for anything else
 RO1A:47FA EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:47FE 3E 00            ld   a,00
 RO1A:4800 E0 83            ld   (ff00+83),a
 RO1A:4802 E0 4F            ld   (ff00+4F),a
 RO1A:4804 3E 0D            ld   a,0D           // Infantry
 RO1A:4806 21 00 80         ld   hl,8000
 RO1A:4809 CD D7 43         call 43D7           // Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
 RO1A:480C 3E 93            ld   a,93           // Soldier basic running (left)
 RO1A:480E EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:4812 3E 00            ld   a,00
 RO1A:4814 E0 83            ld   (ff00+83),a
 RO1A:4816 E0 4F            ld   (ff00+4F),a
 RO1A:4818 3E FF            ld   a,FF
 RO1A:481A EA CC C4         ld   (C4CC),a
 RO1A:481D AF               xor  a
 RO1A:481E EA CE C4         ld   (C4CE),a
 RO1A:4821 EA D1 C4         ld   (C4D1),a
 RO1A:4824 3E 1E            ld   a,1E
 RO1A:4826 EA D2 C4         ld   (C4D2),a       // 2nd soldier waits 30 frames to activate
 RO1A:4829 AF               xor  a
 RO1A:482A EA D3 C4         ld   (C4D3),a
 RO1A:482D CD 8C 46         call 468C           // A = 65 for Harbor, 105 for City, 100 for Airports, 90 for anything else
 RO1A:4830 EA D4 C4         ld   (C4D4),a
 RO1A:4833 AF               xor  a
 RO1A:4834 EA D5 C4         ld   (C4D5),a
 RO1A:4837 EA D6 C4         ld   (C4D6),a
 RO1A:483A EA D7 C4         ld   (C4D7),a
 RO1A:483D 0E 00            ld   c,00
 RO1A:483F CD 9A 46         call 469A           // H holds 168 for Harbor, 176 for anything else; L holds 112 for HQ, 104 for anything else
 RO1A:4842 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:4846 3E 3D            ld   a,3D
 RO1A:4848 CD 44 38         call 3844
 RO1A:484B FA 86 C6         ld   a,(C686)
 RO1A:484E FE 00            cp   a,00
 RO1A:4850 28 05            jr   z,4857         // Change to Capture song skipped if music is meant to be muted (somehow)
 RO1A:4852 3E 2B            ld   a,2B
 RO1A:4854 CD 16 38         call 3816           // Capture jingle
 RO1A:4857 CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 RO1A:485A 11 D2 00         ld   de,00D2
 RO1A:485D 01 00 00         ld   bc,0000
 RO1A:4860 EF 27 47 40                          // Carry Flag set by A, B, or Start being pressed within 210 frames; no gradual scroll
 RO1A:4864 30 03            jr   nc,4869
 RO1A:4866 37               scf  
 RO1A:4867 18 05            jr   486E
 RO1A:4869 3E 3C            ld   a,3C
 RO1A:486B CD 44 38         call 3844
 RO1A:486E C9               ret                 // Capture animation unconditional portion plays out for 210 frames; if A, B, or Start is pressed, procedure is ended prematurely with Carry Flag set and ending sound not used
 RO1A:486F FA A2 C4         ld   a,(C4A2)
 RO1A:4872 47               ld   b,a
 RO1A:4873 FA A1 C4         ld   a,(C4A1)
 RO1A:4876 CD 5B 40         call 405B           // Handles backdrop graphics as a whole (A is Backdrop number, B is used palette set)
 RO1A:4879 3E 00            ld   a,00
 RO1A:487B E0 83            ld   (ff00+83),a
 RO1A:487D E0 4F            ld   (ff00+4F),a
 RO1A:487F 3E 0D            ld   a,0D           // Infantry
 RO1A:4881 21 00 80         ld   hl,8000
 RO1A:4884 CD D7 43         call 43D7           // Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
 RO1A:4887 3E 92            ld   a,92           // Soldier Hard Work
 RO1A:4889 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:488D 3E 00            ld   a,00
 RO1A:488F E0 83            ld   (ff00+83),a
 RO1A:4891 E0 4F            ld   (ff00+4F),a
 RO1A:4893 AF               xor  a
 RO1A:4894 EA CC C4         ld   (C4CC),a
 RO1A:4897 EA CE C4         ld   (C4CE),a
 RO1A:489A EA D1 C4         ld   (C4D1),a
 RO1A:489D EA D2 C4         ld   (C4D2),a
 RO1A:48A0 EA D3 C4         ld   (C4D3),a
 RO1A:48A3 3E 78            ld   a,78
 RO1A:48A5 EA D3 C4         ld   (C4D3),a       // Luck with a typo results in ending instruction timer being 30720 frames (512 seconds) instead of 120 frames (2 seconds)
 RO1A:48A8 AF               xor  a
 RO1A:48A9 EA D5 C4         ld   (C4D5),a
 RO1A:48AC EA D6 C4         ld   (C4D6),a
 RO1A:48AF EA D7 C4         ld   (C4D7),a
 RO1A:48B2 0E 00            ld   c,00
 RO1A:48B4 21 70 80         ld   hl,8070        // 112, 96
 RO1A:48B7 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:48BB 3E 01            ld   a,01
 RO1A:48BD E0 83            ld   (ff00+83),a
 RO1A:48BF E0 4F            ld   (ff00+4F),a
 RO1A:48C1 3E 05            ld   a,05           // Work Car or Supply Trucks
 RO1A:48C3 21 00 80         ld   hl,8000
 RO1A:48C6 CD D7 43         call 43D7           // Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
 RO1A:48C9 3E 2E            ld   a,2E           // Work Car basic movement (left)
 RO1A:48CB EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:48CF 3E 00            ld   a,00
 RO1A:48D1 E0 83            ld   (ff00+83),a
 RO1A:48D3 E0 4F            ld   (ff00+4F),a
 RO1A:48D5 AF               xor  a
 RO1A:48D6 EA CC C4         ld   (C4CC),a
 RO1A:48D9 EA CE C4         ld   (C4CE),a
 RO1A:48DC EA D1 C4         ld   (C4D1),a
 RO1A:48DF EA D2 C4         ld   (C4D2),a
 RO1A:48E2 EA D3 C4         ld   (C4D3),a
 RO1A:48E5 3E 1E            ld   a,1E
 RO1A:48E7 EA D4 C4         ld   (C4D4),a
 RO1A:48EA 3E 43            ld   a,43
 RO1A:48EC EA D5 C4         ld   (C4D5),a
 RO1A:48EF 3E B8            ld   a,B8
 RO1A:48F1 EA D6 C4         ld   (C4D6),a
 RO1A:48F4 3E 27            ld   a,27
 RO1A:48F6 EA D7 C4         ld   (C4D7),a       // Instruction $27:$43B8: gradually move left 1 pixel/frame, reset itself every 120 frames
 RO1A:48F9 0E 80            ld   c,80
 RO1A:48FB 21 70 50         ld   hl,5070
 RO1A:48FE EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:4902 FA 86 C6         ld   a,(C686)
 RO1A:4905 FE 00            cp   a,00
 RO1A:4907 28 05            jr   z,490E
 RO1A:4909 3E 28            ld   a,28
 RO1A:490B CD 16 38         call 3816           // Work Car jingle
 RO1A:490E 11 01 00         ld   de,0001
 RO1A:4911 01 00 00         ld   bc,0000
 RO1A:4914 EF 27 47 40                          // Carry Flag set by A, B, or Start being pressed within 1 frame; no gradual scroll
 RO1A:4918 CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 RO1A:491B CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO1A:491E 3E 3B            ld   a,3B
 RO1A:4920 CD 44 38         call 3844
 RO1A:4923 11 F0 00         ld   de,00F0
 RO1A:4926 01 00 00         ld   bc,0000
 RO1A:4929 EF 27 47 40                          // Carry Flag set by A, B, or Start being pressed within 240 frames; no gradual scroll
 RO1A:492D 38 00            jr   c,492F
 RO1A:492F CD 43 38         call 3843
 RO1A:4932 CD 15 38         call 3815
 RO1A:4935 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 RO1A:4938 EF 17 00 40                          // Clear all sprites in $C300 table, empties ($C4C8~$C4DB), WRA4($DB2C), WRA4($DB2E) 2 byte, and WRA4($D3AC~$DB2B)
 RO1A:493C C9               ret                 // Work Car action animation plays out for up to 4 seconds
 RO1A:493D FA A1 C4         ld   a,(C4A1)
 RO1A:4940 CD 42 50         call 5042           // A = 0 for land unit or invalid; 1 for STOL plane; 2 for sea unit; or 3 for VTOL air unit
 RO1A:4943 FE 00            cp   a,00
 RO1A:4945 28 0C            jr   z,4953
 RO1A:4947 FE 01            cp   a,01
 RO1A:4949 28 1B            jr   z,4966
 RO1A:494B FE 02            cp   a,02
 RO1A:494D 28 1B            jr   z,496A
 RO1A:494F FE 02            cp   a,02
 RO1A:4951 28 00            jr   z,4953
 RO1A:4953 FA A1 C4         ld   a,(C4A1)
 RO1A:4956 FE 05            cp   a,05           // Supply Truck?
 RO1A:4958 28 04            jr   z,495E
 RO1A:495A FE 06            cp   a,06           // Supply Truck+?
 RO1A:495C 28 04            jr   z,4962
 RO1A:495E 3E 11            ld   a,11
 RO1A:4960 18 0A            jr   496C
 RO1A:4962 3E 12            ld   a,12
 RO1A:4964 18 06            jr   496C
 RO1A:4966 3E 0A            ld   a,0A
 RO1A:4968 18 02            jr   496C
 RO1A:496A 3E 10            ld   a,10           // A = 17 for land or VTOL air unit other than Supply Truck+; 18 for Supply Truck+; 10 for plane other than Lite Attacker; or 16 for sea unit
 RO1A:496C F5               push af
 RO1A:496D FA A0 C4         ld   a,(C4A0)
 RO1A:4970 47               ld   b,a
 RO1A:4971 F1               pop  af
 RO1A:4972 CD 5B 40         call 405B           // Handles backdrop graphics as a whole (A is Backdrop number, B is used palette set)
 RO1A:4975 C9               ret  
 RO1A:4976 AF               xor  a
 RO1A:4977 EA D1 C4         ld   (C4D1),a
 RO1A:497A EA D2 C4         ld   (C4D2),a
 RO1A:497D EA CC C4         ld   (C4CC),a
 RO1A:4980 EA CD C4         ld   (C4CD),a
 RO1A:4983 EA CE C4         ld   (C4CE),a
 RO1A:4986 EA CF C4         ld   (C4CF),a
 RO1A:4989 3E 40            ld   a,40
 RO1A:498B EA D5 C4         ld   (C4D5),a
 RO1A:498E 3E 00            ld   a,00
 RO1A:4990 EA D6 C4         ld   (C4D6),a
 RO1A:4993 3E 31            ld   a,31
 RO1A:4995 EA D7 C4         ld   (C4D7),a       // Instruction $31:$4000
 RO1A:4998 AF               xor  a
 RO1A:4999 EA D3 C4         ld   (C4D3),a
 RO1A:499C 3E 3C            ld   a,3C
 RO1A:499E EA D4 C4         ld   (C4D4),a
 RO1A:49A1 3E 9D            ld   a,9D
 RO1A:49A3 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:49A7 FA D0 C4         ld   a,(C4D0)
 RO1A:49AA CD E8 2E         call 2EE8           // WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
 RO1A:49AD AF               xor  a
 RO1A:49AE CD 44 38         call 3844
 RO1A:49B1 C3 8A 02         jp   028A
 RO1A:49B4 AF               xor  a
 RO1A:49B5 EA D1 C4         ld   (C4D1),a
 RO1A:49B8 EA D2 C4         ld   (C4D2),a
 RO1A:49BB EA CC C4         ld   (C4CC),a
 RO1A:49BE EA CD C4         ld   (C4CD),a
 RO1A:49C1 EA CE C4         ld   (C4CE),a
 RO1A:49C4 EA CF C4         ld   (C4CF),a
 RO1A:49C7 3E 49            ld   a,49
 RO1A:49C9 EA D5 C4         ld   (C4D5),a
 RO1A:49CC 3E EC            ld   a,EC
 RO1A:49CE EA D6 C4         ld   (C4D6),a
 RO1A:49D1 3E 1A            ld   a,1A
 RO1A:49D3 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$49EC
 RO1A:49D6 AF               xor  a
 RO1A:49D7 EA D3 C4         ld   (C4D3),a
 RO1A:49DA 3E 5A            ld   a,5A
 RO1A:49DC EA D4 C4         ld   (C4D4),a
 RO1A:49DF FA D0 C4         ld   a,(C4D0)
 RO1A:49E2 CD 11 2F         call 2F11           // set 1,WRA4[$D000 + A * 16]
 RO1A:49E5 AF               xor  a
 RO1A:49E6 CD 44 38         call 3844
 RO1A:49E9 C3 8A 02         jp   028A
 RO1A:49EC AF               xor  a
 RO1A:49ED EA D1 C4         ld   (C4D1),a
 RO1A:49F0 EA D2 C4         ld   (C4D2),a
 RO1A:49F3 AF               xor  a
 RO1A:49F4 EA CC C4         ld   (C4CC),a
 RO1A:49F7 EA CD C4         ld   (C4CD),a
 RO1A:49FA EA CE C4         ld   (C4CE),a
 RO1A:49FD EA CF C4         ld   (C4CF),a
 RO1A:4A00 3E 4A            ld   a,4A
 RO1A:4A02 EA D5 C4         ld   (C4D5),a
 RO1A:4A05 3E 33            ld   a,33
 RO1A:4A07 EA D6 C4         ld   (C4D6),a
 RO1A:4A0A 3E 1A            ld   a,1A
 RO1A:4A0C EA D7 C4         ld   (C4D7),a       // Instruction $1A:$4A33
 RO1A:4A0F AF               xor  a
 RO1A:4A10 EA D3 C4         ld   (C4D3),a
 RO1A:4A13 3E 1E            ld   a,1E
 RO1A:4A15 EA D4 C4         ld   (C4D4),a
 RO1A:4A18 FA D0 C4         ld   a,(C4D0)
 RO1A:4A1B CD 2B 2F         call 2F2B           // res 1,WRA4[$D000 + A * 16]
 RO1A:4A1E FA A2 C4         ld   a,(C4A2)
 RO1A:4A21 FE 0F            cp   a,0F
 RO1A:4A23 38 02            jr   c,4A27
 RO1A:4A25 18 04            jr   4A2B
 RO1A:4A27 3E 37            ld   a,37
 RO1A:4A29 18 02            jr   4A2D
 RO1A:4A2B 3E 38            ld   a,38
 RO1A:4A2D EA DB C4         ld   (C4DB),a
 RO1A:4A30 C3 8A 02         jp   028A
 RO1A:4A33 AF               xor  a
 RO1A:4A34 EA D1 C4         ld   (C4D1),a
 RO1A:4A37 EA D2 C4         ld   (C4D2),a
 RO1A:4A3A AF               xor  a
 RO1A:4A3B EA CC C4         ld   (C4CC),a
 RO1A:4A3E 3E 80            ld   a,80
 RO1A:4A40 EA CD C4         ld   (C4CD),a
 RO1A:4A43 AF               xor  a
 RO1A:4A44 EA CE C4         ld   (C4CE),a
 RO1A:4A47 EA CF C4         ld   (C4CF),a
 RO1A:4A4A EA D5 C4         ld   (C4D5),a
 RO1A:4A4D EA D6 C4         ld   (C4D6),a
 RO1A:4A50 EA D7 C4         ld   (C4D7),a
 RO1A:4A53 AF               xor  a
 RO1A:4A54 EA D3 C4         ld   (C4D3),a
 RO1A:4A57 3E 78            ld   a,78
 RO1A:4A59 EA D4 C4         ld   (C4D4),a
 RO1A:4A5C C3 8A 02         jp   028A
 RO1A:4A5F 3E 00            ld   a,00
 RO1A:4A61 E0 83            ld   (ff00+83),a
 RO1A:4A63 E0 4F            ld   (ff00+4F),a
 RO1A:4A65 FA A1 C4         ld   a,(C4A1)
 RO1A:4A68 CD 7A 45         call 457A           // B holds unit A sprite's ROM block, DE holds location of first list of pointers to sprite stats modification tables for unit A sprite, WRA4($D33C) set to unit A sprite's first pointer number, unit A sprite's group graphics tiles established starting at ($8000)
 RO1A:4A6B FA A1 C4         ld   a,(C4A1)
 RO1A:4A6E CD 42 50         call 5042           // A = 0 for land unit or invalid; 1 for STOL plane; 2 for sea unit; or 3 for VTOL air unit
 RO1A:4A71 FE 00            cp   a,00
 RO1A:4A73 28 0E            jr   z,4A83
 RO1A:4A75 FE 01            cp   a,01
 RO1A:4A77 CA 13 4B         jp   z,4B13
 RO1A:4A7A FE 02            cp   a,02
 RO1A:4A7C CA 35 4B         jp   z,4B35
 RO1A:4A7F FE 03            cp   a,03
 RO1A:4A81 28 68            jr   z,4AEB
 RO1A:4A83 3E 01            ld   a,01
 RO1A:4A85 E0 83            ld   (ff00+83),a
 RO1A:4A87 E0 4F            ld   (ff00+4F),a
 RO1A:4A89 3E 0D            ld   a,0D           // Infantry
 RO1A:4A8B 21 00 88         ld   hl,8800
 RO1A:4A8E CD D7 43         call 43D7           // Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
 RO1A:4A91 3E 97            ld   a,97
 RO1A:4A93 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:4A97 AF               xor  a
 RO1A:4A98 EA CC C4         ld   (C4CC),a
 RO1A:4A9B EA CE C4         ld   (C4CE),a
 RO1A:4A9E EA D1 C4         ld   (C4D1),a
 RO1A:4AA1 EA D2 C4         ld   (C4D2),a
 RO1A:4AA4 FA A2 C4         ld   a,(C4A2)
 RO1A:4AA7 FE 04            cp   a,04
 RO1A:4AA9 38 0E            jr   c,4AB9
 RO1A:4AAB 3E 42            ld   a,42
 RO1A:4AAD EA D5 C4         ld   (C4D5),a
 RO1A:4AB0 3E 9F            ld   a,9F
 RO1A:4AB2 EA D6 C4         ld   (C4D6),a
 RO1A:4AB5 3E 27            ld   a,27
 RO1A:4AB7 18 0C            jr   4AC5           // Instruction $27:$429F
 RO1A:4AB9 3E 41            ld   a,41
 RO1A:4ABB EA D5 C4         ld   (C4D5),a
 RO1A:4ABE 3E F3            ld   a,F3
 RO1A:4AC0 EA D6 C4         ld   (C4D6),a
 RO1A:4AC3 3E 27            ld   a,27
 RO1A:4AC5 EA D7 C4         ld   (C4D7),a       // Instruction $27:$41F3
 RO1A:4AC8 AF               xor  a
 RO1A:4AC9 EA D3 C4         ld   (C4D3),a
 RO1A:4ACC FA A2 C4         ld   a,(C4A2)
 RO1A:4ACF CD 42 50         call 5042           // A = 0 for land unit or invalid; 1 for STOL plane; 2 for sea unit; or 3 for VTOL air unit
 RO1A:4AD2 FE 03            cp   a,03
 RO1A:4AD4 20 04            jr   nz,4ADA        // Jumps for not VTOL air unit
 RO1A:4AD6 3E 78            ld   a,78
 RO1A:4AD8 18 02            jr   4ADC
 RO1A:4ADA 3E 3C            ld   a,3C
 RO1A:4ADC EA D4 C4         ld   (C4D4),a
 RO1A:4ADF 0E C0            ld   c,C0
 RO1A:4AE1 21 70 48         ld   hl,4870
 RO1A:4AE4 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:4AE8 C3 55 4B         jp   4B55
 RO1A:4AEB AF               xor  a
 RO1A:4AEC EA CC C4         ld   (C4CC),a
 RO1A:4AEF EA CE C4         ld   (C4CE),a
 RO1A:4AF2 EA D1 C4         ld   (C4D1),a
 RO1A:4AF5 EA D2 C4         ld   (C4D2),a
 RO1A:4AF8 3E 01            ld   a,01
 RO1A:4AFA EA D3 C4         ld   (C4D3),a
 RO1A:4AFD 3E 5E            ld   a,5E
 RO1A:4AFF EA D4 C4         ld   (C4D4),a
 RO1A:4B02 0E 00            ld   c,00
 RO1A:4B04 21 58 28         ld   hl,2858
 RO1A:4B07 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:4B0B FA D0 C4         ld   a,(C4D0)
 RO1A:4B0E CD 11 2F         call 2F11           // set 1,WRA4[$D000 + A * 16]
 RO1A:4B11 18 42            jr   4B55
 RO1A:4B13 AF               xor  a
 RO1A:4B14 EA CC C4         ld   (C4CC),a
 RO1A:4B17 EA CE C4         ld   (C4CE),a
 RO1A:4B1A EA D1 C4         ld   (C4D1),a
 RO1A:4B1D EA D2 C4         ld   (C4D2),a
 RO1A:4B20 3E 01            ld   a,01
 RO1A:4B22 EA D3 C4         ld   (C4D3),a
 RO1A:4B25 3E 5E            ld   a,5E
 RO1A:4B27 EA D4 C4         ld   (C4D4),a
 RO1A:4B2A 0E 00            ld   c,00
 RO1A:4B2C 21 48 50         ld   hl,5048
 RO1A:4B2F EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:4B33 18 20            jr   4B55
 RO1A:4B35 AF               xor  a
 RO1A:4B36 EA CC C4         ld   (C4CC),a
 RO1A:4B39 EA CE C4         ld   (C4CE),a
 RO1A:4B3C EA D1 C4         ld   (C4D1),a
 RO1A:4B3F EA D2 C4         ld   (C4D2),a
 RO1A:4B42 3E 01            ld   a,01
 RO1A:4B44 EA D3 C4         ld   (C4D3),a
 RO1A:4B47 3E 5E            ld   a,5E
 RO1A:4B49 EA D4 C4         ld   (C4D4),a
 RO1A:4B4C 0E 00            ld   c,00
 RO1A:4B4E 21 70 50         ld   hl,5070
 RO1A:4B51 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:4B55 C9               ret  
 RO1A:4B56 AF               xor  a
 RO1A:4B57 EA D1 C4         ld   (C4D1),a
 RO1A:4B5A EA D2 C4         ld   (C4D2),a
 RO1A:4B5D EA CC C4         ld   (C4CC),a
 RO1A:4B60 EA CD C4         ld   (C4CD),a
 RO1A:4B63 EA CE C4         ld   (C4CE),a
 RO1A:4B66 EA CF C4         ld   (C4CF),a
 RO1A:4B69 3E 4B            ld   a,4B
 RO1A:4B6B EA D5 C4         ld   (C4D5),a
 RO1A:4B6E 3E 89            ld   a,89
 RO1A:4B70 EA D6 C4         ld   (C4D6),a
 RO1A:4B73 3E 1A            ld   a,1A
 RO1A:4B75 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$4B89
 RO1A:4B78 AF               xor  a
 RO1A:4B79 EA D3 C4         ld   (C4D3),a
 RO1A:4B7C 3E 5A            ld   a,5A
 RO1A:4B7E EA D4 C4         ld   (C4D4),a
 RO1A:4B81 3E 4F            ld   a,4F
 RO1A:4B83 CD 44 38         call 3844
 RO1A:4B86 C3 8A 02         jp   028A
 RO1A:4B89 AF               xor  a
 RO1A:4B8A EA D1 C4         ld   (C4D1),a
 RO1A:4B8D EA D2 C4         ld   (C4D2),a
 RO1A:4B90 3E FF            ld   a,FF
 RO1A:4B92 EA CC C4         ld   (C4CC),a
 RO1A:4B95 3E 80            ld   a,80
 RO1A:4B97 EA CD C4         ld   (C4CD),a
 RO1A:4B9A AF               xor  a
 RO1A:4B9B EA CE C4         ld   (C4CE),a
 RO1A:4B9E EA CF C4         ld   (C4CF),a
 RO1A:4BA1 3E 4B            ld   a,4B
 RO1A:4BA3 EA D5 C4         ld   (C4D5),a
 RO1A:4BA6 3E C0            ld   a,C0
 RO1A:4BA8 EA D6 C4         ld   (C4D6),a
 RO1A:4BAB 3E 1A            ld   a,1A
 RO1A:4BAD EA D7 C4         ld   (C4D7),a       // Instruction $1A:$4BC0
 RO1A:4BB0 AF               xor  a
 RO1A:4BB1 EA D3 C4         ld   (C4D3),a
 RO1A:4BB4 3E 0A            ld   a,0A
 RO1A:4BB6 EA D4 C4         ld   (C4D4),a
 RO1A:4BB9 AF               xor  a
 RO1A:4BBA CD 44 38         call 3844
 RO1A:4BBD C3 8A 02         jp   028A
 RO1A:4BC0 AF               xor  a
 RO1A:4BC1 EA D1 C4         ld   (C4D1),a
 RO1A:4BC4 EA D2 C4         ld   (C4D2),a
 RO1A:4BC7 3E FF            ld   a,FF
 RO1A:4BC9 EA CC C4         ld   (C4CC),a
 RO1A:4BCC AF               xor  a
 RO1A:4BCD EA CD C4         ld   (C4CD),a
 RO1A:4BD0 EA CE C4         ld   (C4CE),a
 RO1A:4BD3 EA CF C4         ld   (C4CF),a
 RO1A:4BD6 EA D5 C4         ld   (C4D5),a
 RO1A:4BD9 EA D6 C4         ld   (C4D6),a
 RO1A:4BDC EA D7 C4         ld   (C4D7),a
 RO1A:4BDF AF               xor  a
 RO1A:4BE0 EA D3 C4         ld   (C4D3),a
 RO1A:4BE3 3E 96            ld   a,96
 RO1A:4BE5 EA D4 C4         ld   (C4D4),a
 RO1A:4BE8 C3 8A 02         jp   028A
 RO1A:4BEB AF               xor  a
 RO1A:4BEC EA D1 C4         ld   (C4D1),a
 RO1A:4BEF EA D2 C4         ld   (C4D2),a
 RO1A:4BF2 3E FF            ld   a,FF
 RO1A:4BF4 EA CC C4         ld   (C4CC),a
 RO1A:4BF7 3E 80            ld   a,80
 RO1A:4BF9 EA CD C4         ld   (C4CD),a
 RO1A:4BFC AF               xor  a
 RO1A:4BFD EA CE C4         ld   (C4CE),a
 RO1A:4C00 EA CF C4         ld   (C4CF),a
 RO1A:4C03 3E 4C            ld   a,4C
 RO1A:4C05 EA D5 C4         ld   (C4D5),a
 RO1A:4C08 3E 1E            ld   a,1E
 RO1A:4C0A EA D6 C4         ld   (C4D6),a
 RO1A:4C0D 3E 1A            ld   a,1A
 RO1A:4C0F EA D7 C4         ld   (C4D7),a       // Instruction $1A:$4C1E
 RO1A:4C12 AF               xor  a
 RO1A:4C13 EA D3 C4         ld   (C4D3),a
 RO1A:4C16 3E 1E            ld   a,1E
 RO1A:4C18 EA D4 C4         ld   (C4D4),a
 RO1A:4C1B C3 8A 02         jp   028A
 RO1A:4C1E AF               xor  a
 RO1A:4C1F EA D1 C4         ld   (C4D1),a
 RO1A:4C22 EA D2 C4         ld   (C4D2),a
 RO1A:4C25 EA CC C4         ld   (C4CC),a
 RO1A:4C28 EA CD C4         ld   (C4CD),a
 RO1A:4C2B EA CE C4         ld   (C4CE),a
 RO1A:4C2E EA CF C4         ld   (C4CF),a
 RO1A:4C31 3E 4C            ld   a,4C
 RO1A:4C33 EA D5 C4         ld   (C4D5),a
 RO1A:4C36 3E 51            ld   a,51
 RO1A:4C38 EA D6 C4         ld   (C4D6),a
 RO1A:4C3B 3E 1A            ld   a,1A
 RO1A:4C3D EA D7 C4         ld   (C4D7),a       // Instruction $1A:$4C51
 RO1A:4C40 AF               xor  a
 RO1A:4C41 EA D3 C4         ld   (C4D3),a
 RO1A:4C44 3E 3C            ld   a,3C
 RO1A:4C46 EA D4 C4         ld   (C4D4),a
 RO1A:4C49 3E 45            ld   a,45
 RO1A:4C4B CD 44 38         call 3844
 RO1A:4C4E C3 8A 02         jp   028A
 RO1A:4C51 AF               xor  a
 RO1A:4C52 EA D1 C4         ld   (C4D1),a
 RO1A:4C55 EA D2 C4         ld   (C4D2),a
 RO1A:4C58 3E FF            ld   a,FF
 RO1A:4C5A EA CC C4         ld   (C4CC),a
 RO1A:4C5D 3E 80            ld   a,80
 RO1A:4C5F EA CD C4         ld   (C4CD),a
 RO1A:4C62 AF               xor  a
 RO1A:4C63 EA CE C4         ld   (C4CE),a
 RO1A:4C66 EA CF C4         ld   (C4CF),a
 RO1A:4C69 3E 4C            ld   a,4C
 RO1A:4C6B EA D5 C4         ld   (C4D5),a
 RO1A:4C6E 3E 89            ld   a,89
 RO1A:4C70 EA D6 C4         ld   (C4D6),a
 RO1A:4C73 3E 1A            ld   a,1A
 RO1A:4C75 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$4C89
 RO1A:4C78 AF               xor  a
 RO1A:4C79 EA D3 C4         ld   (C4D3),a
 RO1A:4C7C 3E 0A            ld   a,0A
 RO1A:4C7E EA D4 C4         ld   (C4D4),a
 RO1A:4C81 3E 46            ld   a,46
 RO1A:4C83 CD 44 38         call 3844
 RO1A:4C86 C3 8A 02         jp   028A
 RO1A:4C89 AF               xor  a
 RO1A:4C8A EA D1 C4         ld   (C4D1),a
 RO1A:4C8D EA D2 C4         ld   (C4D2),a
 RO1A:4C90 3E FF            ld   a,FF
 RO1A:4C92 EA CC C4         ld   (C4CC),a
 RO1A:4C95 AF               xor  a
 RO1A:4C96 EA CD C4         ld   (C4CD),a
 RO1A:4C99 EA CE C4         ld   (C4CE),a
 RO1A:4C9C EA CF C4         ld   (C4CF),a
 RO1A:4C9F 3E 4C            ld   a,4C
 RO1A:4CA1 EA D5 C4         ld   (C4D5),a
 RO1A:4CA4 3E BA            ld   a,BA
 RO1A:4CA6 EA D6 C4         ld   (C4D6),a
 RO1A:4CA9 3E 1A            ld   a,1A
 RO1A:4CAB EA D7 C4         ld   (C4D7),a       // Instruction $1A:$4CBA
 RO1A:4CAE AF               xor  a
 RO1A:4CAF EA D3 C4         ld   (C4D3),a
 RO1A:4CB2 3E 1E            ld   a,1E
 RO1A:4CB4 EA D4 C4         ld   (C4D4),a
 RO1A:4CB7 C3 8A 02         jp   028A
 RO1A:4CBA AF               xor  a
 RO1A:4CBB EA D1 C4         ld   (C4D1),a
 RO1A:4CBE EA D2 C4         ld   (C4D2),a
 RO1A:4CC1 3E FE            ld   a,FE
 RO1A:4CC3 EA CC C4         ld   (C4CC),a
 RO1A:4CC6 AF               xor  a
 RO1A:4CC7 EA CD C4         ld   (C4CD),a
 RO1A:4CCA EA CE C4         ld   (C4CE),a
 RO1A:4CCD EA CF C4         ld   (C4CF),a
 RO1A:4CD0 EA D5 C4         ld   (C4D5),a
 RO1A:4CD3 EA D6 C4         ld   (C4D6),a
 RO1A:4CD6 EA D7 C4         ld   (C4D7),a
 RO1A:4CD9 AF               xor  a
 RO1A:4CDA EA D3 C4         ld   (C4D3),a
 RO1A:4CDD 3E 32            ld   a,32
 RO1A:4CDF EA D4 C4         ld   (C4D4),a
 RO1A:4CE2 FA 3D D3         ld   a,(D33D)
 RO1A:4CE5 3C               inc  a
 RO1A:4CE6 EA 3D D3         ld   (D33D),a
 RO1A:4CE9 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:4CED FA D0 C4         ld   a,(C4D0)
 RO1A:4CF0 CD E8 2E         call 2EE8           // WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
 RO1A:4CF3 C3 8A 02         jp   028A
 RO1A:4CF6 AF               xor  a
 RO1A:4CF7 EA CC C4         ld   (C4CC),a
 RO1A:4CFA EA CD C4         ld   (C4CD),a
 RO1A:4CFD EA CE C4         ld   (C4CE),a
 RO1A:4D00 3E 80            ld   a,80
 RO1A:4D02 EA CF C4         ld   (C4CF),a
 RO1A:4D05 3E 4D            ld   a,4D
 RO1A:4D07 EA D5 C4         ld   (C4D5),a
 RO1A:4D0A 3E 20            ld   a,20
 RO1A:4D0C EA D6 C4         ld   (C4D6),a
 RO1A:4D0F 3E 1A            ld   a,1A
 RO1A:4D11 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$4D20
 RO1A:4D14 AF               xor  a
 RO1A:4D15 EA D3 C4         ld   (C4D3),a
 RO1A:4D18 3E 32            ld   a,32
 RO1A:4D1A EA D4 C4         ld   (C4D4),a
 RO1A:4D1D C3 8A 02         jp   028A
 RO1A:4D20 AF               xor  a
 RO1A:4D21 EA CC C4         ld   (C4CC),a
 RO1A:4D24 EA CD C4         ld   (C4CD),a
 RO1A:4D27 EA CE C4         ld   (C4CE),a
 RO1A:4D2A 3E 40            ld   a,40
 RO1A:4D2C EA CF C4         ld   (C4CF),a
 RO1A:4D2F 3E 4D            ld   a,4D
 RO1A:4D31 EA D5 C4         ld   (C4D5),a
 RO1A:4D34 3E 4A            ld   a,4A
 RO1A:4D36 EA D6 C4         ld   (C4D6),a
 RO1A:4D39 3E 1A            ld   a,1A
 RO1A:4D3B EA D7 C4         ld   (C4D7),a       // Instruction $1A:$4D4A
 RO1A:4D3E AF               xor  a
 RO1A:4D3F EA D3 C4         ld   (C4D3),a
 RO1A:4D42 3E 30            ld   a,30
 RO1A:4D44 EA D4 C4         ld   (C4D4),a
 RO1A:4D47 C3 8A 02         jp   028A
 RO1A:4D4A AF               xor  a
 RO1A:4D4B EA CC C4         ld   (C4CC),a
 RO1A:4D4E EA CD C4         ld   (C4CD),a
 RO1A:4D51 EA CE C4         ld   (C4CE),a
 RO1A:4D54 EA CF C4         ld   (C4CF),a
 RO1A:4D57 3E 4D            ld   a,4D
 RO1A:4D59 EA D5 C4         ld   (C4D5),a
 RO1A:4D5C 3E 9B            ld   a,9B
 RO1A:4D5E EA D6 C4         ld   (C4D6),a
 RO1A:4D61 3E 1A            ld   a,1A
 RO1A:4D63 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$4D9B
 RO1A:4D66 AF               xor  a
 RO1A:4D67 EA D3 C4         ld   (C4D3),a
 RO1A:4D6A 3E AA            ld   a,AA
 RO1A:4D6C EA D4 C4         ld   (C4D4),a
 RO1A:4D6F FA A2 C4         ld   a,(C4A2)
 RO1A:4D72 FE 21            cp   a,21
 RO1A:4D74 28 13            jr   z,4D89
 RO1A:4D76 FA 3C D3         ld   a,(D33C)
 RO1A:4D79 3C               inc  a
 RO1A:4D7A EA 3C D3         ld   (D33C),a
 RO1A:4D7D EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:4D81 FA D0 C4         ld   a,(C4D0)
 RO1A:4D84 CD E8 2E         call 2EE8           // WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
 RO1A:4D87 18 0F            jr   4D98
 RO1A:4D89 3E 16            ld   a,16
 RO1A:4D8B EA 3C D3         ld   (D33C),a
 RO1A:4D8E EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:4D92 FA D0 C4         ld   a,(C4D0)
 RO1A:4D95 CD E8 2E         call 2EE8           // WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
 RO1A:4D98 C3 8A 02         jp   028A
 RO1A:4D9B AF               xor  a
 RO1A:4D9C EA CC C4         ld   (C4CC),a
 RO1A:4D9F EA CD C4         ld   (C4CD),a
 RO1A:4DA2 EA CE C4         ld   (C4CE),a
 RO1A:4DA5 EA CF C4         ld   (C4CF),a
 RO1A:4DA8 3E 4D            ld   a,4D
 RO1A:4DAA EA D5 C4         ld   (C4D5),a
 RO1A:4DAD 3E D4            ld   a,D4
 RO1A:4DAF EA D6 C4         ld   (C4D6),a
 RO1A:4DB2 3E 1A            ld   a,1A
 RO1A:4DB4 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$4DD4
 RO1A:4DB7 AF               xor  a
 RO1A:4DB8 EA D3 C4         ld   (C4D3),a
 RO1A:4DBB 3E 01            ld   a,01
 RO1A:4DBD EA D4 C4         ld   (C4D4),a
 RO1A:4DC0 FA 3C D3         ld   a,(D33C)
 RO1A:4DC3 3C               inc  a
 RO1A:4DC4 EA 3C D3         ld   (D33C),a
 RO1A:4DC7 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:4DCB FA D0 C4         ld   a,(C4D0)
 RO1A:4DCE CD E8 2E         call 2EE8           // WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
 RO1A:4DD1 C3 8A 02         jp   028A
 RO1A:4DD4 AF               xor  a
 RO1A:4DD5 EA CC C4         ld   (C4CC),a
 RO1A:4DD8 EA CD C4         ld   (C4CD),a
 RO1A:4DDB EA CE C4         ld   (C4CE),a
 RO1A:4DDE EA CF C4         ld   (C4CF),a
 RO1A:4DE1 3E 4E            ld   a,4E
 RO1A:4DE3 EA D5 C4         ld   (C4D5),a
 RO1A:4DE6 3E 28            ld   a,28
 RO1A:4DE8 EA D6 C4         ld   (C4D6),a
 RO1A:4DEB 3E 1A            ld   a,1A
 RO1A:4DED EA D7 C4         ld   (C4D7),a       // Instruction $1A:$4E28
 RO1A:4DF0 AF               xor  a
 RO1A:4DF1 EA D3 C4         ld   (C4D3),a
 RO1A:4DF4 3E A0            ld   a,A0
 RO1A:4DF6 EA D4 C4         ld   (C4D4),a
 RO1A:4DF9 FA A2 C4         ld   a,(C4A2)
 RO1A:4DFC FE 21            cp   a,21
 RO1A:4DFE 28 15            jr   z,4E15
 RO1A:4E00 FA 3C D3         ld   a,(D33C)
 RO1A:4E03 3D               dec  a
 RO1A:4E04 3D               dec  a
 RO1A:4E05 3D               dec  a
 RO1A:4E06 EA 3C D3         ld   (D33C),a
 RO1A:4E09 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:4E0D FA D0 C4         ld   a,(C4D0)
 RO1A:4E10 CD E8 2E         call 2EE8           // WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
 RO1A:4E13 18 00            jr   4E15
 RO1A:4E15 FA A2 C4         ld   a,(C4A2)
 RO1A:4E18 FE 21            cp   a,21
 RO1A:4E1A 20 04            jr   nz,4E20
 RO1A:4E1C 3E 46            ld   a,46
 RO1A:4E1E 18 02            jr   4E22
 RO1A:4E20 3E 47            ld   a,47
 RO1A:4E22 EA DB C4         ld   (C4DB),a
 RO1A:4E25 C3 8A 02         jp   028A
 RO1A:4E28 AF               xor  a
 RO1A:4E29 EA CC C4         ld   (C4CC),a
 RO1A:4E2C EA CD C4         ld   (C4CD),a
 RO1A:4E2F 3E FF            ld   a,FF
 RO1A:4E31 EA CE C4         ld   (C4CE),a
 RO1A:4E34 3E 80            ld   a,80
 RO1A:4E36 EA CF C4         ld   (C4CF),a
 RO1A:4E39 3E 4E            ld   a,4E
 RO1A:4E3B EA D5 C4         ld   (C4D5),a
 RO1A:4E3E 3E 6C            ld   a,6C
 RO1A:4E40 EA D6 C4         ld   (C4D6),a
 RO1A:4E43 3E 1A            ld   a,1A
 RO1A:4E45 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$4E6C
 RO1A:4E48 AF               xor  a
 RO1A:4E49 EA D3 C4         ld   (C4D3),a
 RO1A:4E4C 3E 1E            ld   a,1E
 RO1A:4E4E EA D4 C4         ld   (C4D4),a
 RO1A:4E51 FA A2 C4         ld   a,(C4A2)
 RO1A:4E54 FE 21            cp   a,21
 RO1A:4E56 28 11            jr   z,4E69
 RO1A:4E58 FA 3C D3         ld   a,(D33C)
 RO1A:4E5B 3C               inc  a
 RO1A:4E5C EA 3C D3         ld   (D33C),a
 RO1A:4E5F EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:4E63 FA D0 C4         ld   a,(C4D0)
 RO1A:4E66 CD E8 2E         call 2EE8           // WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
 RO1A:4E69 C3 8A 02         jp   028A
 RO1A:4E6C AF               xor  a
 RO1A:4E6D EA CC C4         ld   (C4CC),a
 RO1A:4E70 EA CD C4         ld   (C4CD),a
 RO1A:4E73 3E FF            ld   a,FF
 RO1A:4E75 EA CE C4         ld   (C4CE),a
 RO1A:4E78 AF               xor  a
 RO1A:4E79 EA CF C4         ld   (C4CF),a
 RO1A:4E7C 3E 4E            ld   a,4E
 RO1A:4E7E EA D5 C4         ld   (C4D5),a
 RO1A:4E81 3E 97            ld   a,97
 RO1A:4E83 EA D6 C4         ld   (C4D6),a
 RO1A:4E86 3E 1A            ld   a,1A
 RO1A:4E88 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$4E97
 RO1A:4E8B AF               xor  a
 RO1A:4E8C EA D3 C4         ld   (C4D3),a
 RO1A:4E8F 3E 05            ld   a,05
 RO1A:4E91 EA D4 C4         ld   (C4D4),a
 RO1A:4E94 C3 8A 02         jp   028A
 RO1A:4E97 AF               xor  a
 RO1A:4E98 EA CC C4         ld   (C4CC),a
 RO1A:4E9B EA CD C4         ld   (C4CD),a
 RO1A:4E9E 3E FE            ld   a,FE
 RO1A:4EA0 EA CE C4         ld   (C4CE),a
 RO1A:4EA3 AF               xor  a
 RO1A:4EA4 EA CF C4         ld   (C4CF),a
 RO1A:4EA7 EA D5 C4         ld   (C4D5),a
 RO1A:4EAA EA D6 C4         ld   (C4D6),a
 RO1A:4EAD EA D7 C4         ld   (C4D7),a
 RO1A:4EB0 AF               xor  a
 RO1A:4EB1 EA D3 C4         ld   (C4D3),a
 RO1A:4EB4 3E 42            ld   a,42
 RO1A:4EB6 EA D4 C4         ld   (C4D4),a
 RO1A:4EB9 C3 8A 02         jp   028A
 RO1A:4EBC FA A2 C4         ld   a,(C4A2)
 RO1A:4EBF CD 42 50         call 5042           // A = 0 for land unit or invalid; 1 for STOL plane; 2 for sea unit; or 3 for VTOL air unit
 RO1A:4EC2 FE 00            cp   a,00
 RO1A:4EC4 28 0F            jr   z,4ED5
 RO1A:4EC6 FE 01            cp   a,01
 RO1A:4EC8 CA D5 4F         jp   z,4FD5
 RO1A:4ECB FE 02            cp   a,02
 RO1A:4ECD CA 0C 50         jp   z,500C
 RO1A:4ED0 FE 03            cp   a,03
 RO1A:4ED2 CA 81 4F         jp   z,4F81
 RO1A:4ED5 FA A2 C4         ld   a,(C4A2)
 RO1A:4ED8 FE 04            cp   a,04           // Work Car?
 RO1A:4EDA 38 59            jr   c,4F35
 RO1A:4EDC FA 3C D3         ld   a,(D33C)
 RO1A:4EDF 3C               inc  a
 RO1A:4EE0 3C               inc  a
 RO1A:4EE1 EA 3C D3         ld   (D33C),a
 RO1A:4EE4 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:4EE8 3E FF            ld   a,FF
 RO1A:4EEA EA CC C4         ld   (C4CC),a
 RO1A:4EED 3E 80            ld   a,80
 RO1A:4EEF EA CD C4         ld   (C4CD),a
 RO1A:4EF2 AF               xor  a
 RO1A:4EF3 EA CE C4         ld   (C4CE),a
 RO1A:4EF6 EA CF C4         ld   (C4CF),a
 RO1A:4EF9 EA D1 C4         ld   (C4D1),a
 RO1A:4EFC EA D2 C4         ld   (C4D2),a
 RO1A:4EFF 3E 49            ld   a,49
 RO1A:4F01 EA D5 C4         ld   (C4D5),a
 RO1A:4F04 3E B4            ld   a,B4
 RO1A:4F06 EA D6 C4         ld   (C4D6),a
 RO1A:4F09 3E 1A            ld   a,1A
 RO1A:4F0B EA D7 C4         ld   (C4D7),a       // Instruction $1A:$49B4
 RO1A:4F0E AF               xor  a
 RO1A:4F0F EA D3 C4         ld   (C4D3),a
 RO1A:4F12 3E 5A            ld   a,5A
 RO1A:4F14 EA D4 C4         ld   (C4D4),a
 RO1A:4F17 0E 80            ld   c,80
 RO1A:4F19 21 70 B0         ld   hl,B070
 RO1A:4F1C FA A2 C4         ld   a,(C4A2)
 RO1A:4F1F FE 0F            cp   a,0F
 RO1A:4F21 38 02            jr   c,4F25
 RO1A:4F23 18 04            jr   4F29
 RO1A:4F25 3E 37            ld   a,37
 RO1A:4F27 18 02            jr   4F2B
 RO1A:4F29 3E 38            ld   a,38
 RO1A:4F2B EA DB C4         ld   (C4DB),a
 RO1A:4F2E EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:4F32 C3 41 50         jp   5041
 RO1A:4F35 3E 01            ld   a,01
 RO1A:4F37 E0 83            ld   (ff00+83),a
 RO1A:4F39 E0 4F            ld   (ff00+4F),a
 RO1A:4F3B 3E 0D            ld   a,0D           // Infantry
 RO1A:4F3D 21 00 88         ld   hl,8800
 RO1A:4F40 CD D7 43         call 43D7           // Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
 RO1A:4F43 3E 93            ld   a,93           // Soldier basic running (left)
 RO1A:4F45 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:4F49 3E FF            ld   a,FF
 RO1A:4F4B EA CC C4         ld   (C4CC),a
 RO1A:4F4E AF               xor  a
 RO1A:4F4F EA CE C4         ld   (C4CE),a
 RO1A:4F52 EA D1 C4         ld   (C4D1),a
 RO1A:4F55 EA D2 C4         ld   (C4D2),a
 RO1A:4F58 3E 49            ld   a,49
 RO1A:4F5A EA D5 C4         ld   (C4D5),a
 RO1A:4F5D 3E 76            ld   a,76
 RO1A:4F5F EA D6 C4         ld   (C4D6),a
 RO1A:4F62 3E 1A            ld   a,1A
 RO1A:4F64 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$4976
 RO1A:4F67 AF               xor  a
 RO1A:4F68 EA D3 C4         ld   (C4D3),a
 RO1A:4F6B 3E 3C            ld   a,3C
 RO1A:4F6D EA D4 C4         ld   (C4D4),a
 RO1A:4F70 0E C0            ld   c,C0
 RO1A:4F72 21 70 B8         ld   hl,B870
 RO1A:4F75 3E 3A            ld   a,3A
 RO1A:4F77 EA DB C4         ld   (C4DB),a
 RO1A:4F7A EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:4F7E C3 41 50         jp   5041
 RO1A:4F81 FA 3C D3         ld   a,(D33C)
 RO1A:4F84 3C               inc  a
 RO1A:4F85 EA 3C D3         ld   (D33C),a
 RO1A:4F88 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:4F8C AF               xor  a
 RO1A:4F8D EA D1 C4         ld   (C4D1),a
 RO1A:4F90 EA D2 C4         ld   (C4D2),a
 RO1A:4F93 EA CC C4         ld   (C4CC),a
 RO1A:4F96 EA CD C4         ld   (C4CD),a
 RO1A:4F99 3E 01            ld   a,01
 RO1A:4F9B EA CE C4         ld   (C4CE),a
 RO1A:4F9E AF               xor  a
 RO1A:4F9F EA CF C4         ld   (C4CF),a
 RO1A:4FA2 3E 4C            ld   a,4C
 RO1A:4FA4 EA D5 C4         ld   (C4D5),a
 RO1A:4FA7 3E F6            ld   a,F6
 RO1A:4FA9 EA D6 C4         ld   (C4D6),a
 RO1A:4FAC 3E 1A            ld   a,1A
 RO1A:4FAE EA D7 C4         ld   (C4D7),a       // Instruction $1A:$4CF6
 RO1A:4FB1 AF               xor  a
 RO1A:4FB2 EA D3 C4         ld   (C4D3),a
 RO1A:4FB5 3E 35            ld   a,35
 RO1A:4FB7 EA D4 C4         ld   (C4D4),a
 RO1A:4FBA 0E 80            ld   c,80
 RO1A:4FBC 21 18 88         ld   hl,8818
 RO1A:4FBF FA A2 C4         ld   a,(C4A2)
 RO1A:4FC2 FE 21            cp   a,21
 RO1A:4FC4 20 04            jr   nz,4FCA
 RO1A:4FC6 3E 58            ld   a,58
 RO1A:4FC8 18 02            jr   4FCC
 RO1A:4FCA 3E 4B            ld   a,4B
 RO1A:4FCC EA DB C4         ld   (C4DB),a
 RO1A:4FCF EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:4FD3 18 6C            jr   5041
 RO1A:4FD5 3E FF            ld   a,FF
 RO1A:4FD7 EA CC C4         ld   (C4CC),a
 RO1A:4FDA AF               xor  a
 RO1A:4FDB EA CE C4         ld   (C4CE),a
 RO1A:4FDE EA D1 C4         ld   (C4D1),a
 RO1A:4FE1 EA D2 C4         ld   (C4D2),a
 RO1A:4FE4 3E 4B            ld   a,4B
 RO1A:4FE6 EA D5 C4         ld   (C4D5),a
 RO1A:4FE9 3E EB            ld   a,EB
 RO1A:4FEB EA D6 C4         ld   (C4D6),a
 RO1A:4FEE 3E 1A            ld   a,1A
 RO1A:4FF0 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$4BEB
 RO1A:4FF3 AF               xor  a
 RO1A:4FF4 EA D3 C4         ld   (C4D3),a
 RO1A:4FF7 3E 5A            ld   a,5A
 RO1A:4FF9 EA D4 C4         ld   (C4D4),a
 RO1A:4FFC 0E 80            ld   c,80
 RO1A:4FFE 21 54 C0         ld   hl,C054
 RO1A:5001 3E 44            ld   a,44
 RO1A:5003 EA DB C4         ld   (C4DB),a
 RO1A:5006 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:500A 18 35            jr   5041
 RO1A:500C 3E FF            ld   a,FF
 RO1A:500E EA CC C4         ld   (C4CC),a
 RO1A:5011 3E 80            ld   a,80
 RO1A:5013 EA CD C4         ld   (C4CD),a
 RO1A:5016 AF               xor  a
 RO1A:5017 EA CE C4         ld   (C4CE),a
 RO1A:501A EA D1 C4         ld   (C4D1),a
 RO1A:501D EA D2 C4         ld   (C4D2),a
 RO1A:5020 3E 4B            ld   a,4B
 RO1A:5022 EA D5 C4         ld   (C4D5),a
 RO1A:5025 3E 56            ld   a,56
 RO1A:5027 EA D6 C4         ld   (C4D6),a
 RO1A:502A 3E 1A            ld   a,1A
 RO1A:502C EA D7 C4         ld   (C4D7),a       // Instruction $1A:$4B56
 RO1A:502F AF               xor  a
 RO1A:5030 EA D3 C4         ld   (C4D3),a
 RO1A:5033 3E D2            ld   a,D2
 RO1A:5035 EA D4 C4         ld   (C4D4),a
 RO1A:5038 0E 80            ld   c,80
 RO1A:503A 21 72 C0         ld   hl,C072
 RO1A:503D EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:5041 C9               ret  
 RO1A:5042 FE 1D            cp   a,1D
 RO1A:5044 38 12            jr   c,5058
 RO1A:5046 FE 21            cp   a,21
 RO1A:5048 38 10            jr   c,505A
 RO1A:504A 28 14            jr   z,5060
 RO1A:504C FE 27            cp   a,27
 RO1A:504E 38 0A            jr   c,505A
 RO1A:5050 FE 2C            cp   a,2C
 RO1A:5052 38 0C            jr   c,5060
 RO1A:5054 FE 34            cp   a,34
 RO1A:5056 38 05            jr   c,505D
 RO1A:5058 AF               xor  a              // Land unit or invalid
 RO1A:5059 C9               ret  
 RO1A:505A 3E 01            ld   a,01           // Plane unit other than Lite Attacker
 RO1A:505C C9               ret  
 RO1A:505D 3E 02            ld   a,02           // Sea unit
 RO1A:505F C9               ret  
 RO1A:5060 3E 03            ld   a,03           // Lite Attacker or Helicopter unit
 RO1A:5062 C9               ret                 // A = 0 for land unit or invalid; 1 for STOL plane; 2 for sea unit; or 3 for VTOL air unit
 RO1A:5063 CD 3D 49         call 493D
 RO1A:5066 FA A2 C4         ld   a,(C4A2)
 RO1A:5069 CD 42 50         call 5042           // A = 0 for land unit or invalid; 1 for STOL plane; 2 for sea unit; or 3 for VTOL air unit
 RO1A:506C FE 01            cp   a,01
 RO1A:506E 28 02            jr   z,5072
 RO1A:5070 18 1A            jr   508C           // Branches for any unit other than a plane that isn't a Lite Attacker
 RO1A:5072 3E 01            ld   a,01
 RO1A:5074 E0 83            ld   (ff00+83),a
 RO1A:5076 E0 4F            ld   (ff00+4F),a
 RO1A:5078 FA A2 C4         ld   a,(C4A2)
 RO1A:507B CD 7A 45         call 457A           // B holds unit A sprite's ROM block, DE holds location of first list of pointers to sprite stats modification tables for unit A sprite, WRA4($D33C) set to unit A sprite's first pointer number, unit A sprite's group graphics tiles established starting at ($8000)
 RO1A:507E FA 3C D3         ld   a,(D33C)
 RO1A:5081 EA 3D D3         ld   (D33D),a
 RO1A:5084 CD BC 4E         call 4EBC
 RO1A:5087 CD 5F 4A         call 4A5F
 RO1A:508A 18 12            jr   509E
 RO1A:508C CD 5F 4A         call 4A5F
 RO1A:508F 3E 01            ld   a,01
 RO1A:5091 E0 83            ld   (ff00+83),a
 RO1A:5093 E0 4F            ld   (ff00+4F),a
 RO1A:5095 FA A2 C4         ld   a,(C4A2)
 RO1A:5098 CD 7A 45         call 457A           // B holds unit A sprite's ROM block, DE holds location of first list of pointers to sprite stats modification tables for unit A sprite, WRA4($D33C) set to unit A sprite's first pointer number, unit A sprite's group graphics tiles established starting at ($8000)
 RO1A:509B CD BC 4E         call 4EBC
 RO1A:509E 11 01 00         ld   de,0001
 RO1A:50A1 01 00 00         ld   bc,0000
 RO1A:50A4 EF 27 47 40                          // Carry Flag set by A, B, or Start being pressed during timer determined by DE; gradual scroll determined by BC
 RO1A:50A8 FA 86 C6         ld   a,(C686)
 RO1A:50AB FE 00            cp   a,00
 RO1A:50AD 28 05            jr   z,50B4
 RO1A:50AF 3E 25            ld   a,25
 RO1A:50B1 CD 16 38         call 3816           // Resupply jingle
 RO1A:50B4 CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 RO1A:50B7 FA A2 C4         ld   a,(C4A2)
 RO1A:50BA CD 42 50         call 5042           // A = 0 for land unit or invalid; 1 for STOL plane; 2 for sea unit; or 3 for VTOL air unit
 RO1A:50BD FE 00            cp   a,00
 RO1A:50BF 28 0C            jr   z,50CD
 RO1A:50C1 FE 01            cp   a,01
 RO1A:50C3 28 32            jr   z,50F7
 RO1A:50C5 FE 02            cp   a,02
 RO1A:50C7 28 12            jr   z,50DB
 RO1A:50C9 FE 03            cp   a,03
 RO1A:50CB 28 1C            jr   z,50E9
 RO1A:50CD 11 22 01         ld   de,0122
 RO1A:50D0 01 00 00         ld   bc,0000
 RO1A:50D3 EF 27 47 40                          // Carry Flag set by A, B, or Start being pressed during timer determined by DE; gradual scroll determined by BC
 RO1A:50D7 38 2A            jr   c,5103
 RO1A:50D9 18 28            jr   5103
 RO1A:50DB 11 2C 01         ld   de,012C
 RO1A:50DE 01 00 00         ld   bc,0000
 RO1A:50E1 EF 27 47 40                          // Carry Flag set by A, B, or Start being pressed during timer determined by DE; gradual scroll determined by BC
 RO1A:50E5 38 1C            jr   c,5103
 RO1A:50E7 18 1A            jr   5103
 RO1A:50E9 11 8A 02         ld   de,028A
 RO1A:50EC 01 00 00         ld   bc,0000
 RO1A:50EF EF 27 47 40                          // Carry Flag set by A, B, or Start being pressed during timer determined by DE; gradual scroll determined by BC
 RO1A:50F3 38 0E            jr   c,5103
 RO1A:50F5 18 0C            jr   5103
 RO1A:50F7 11 FF 00         ld   de,00FF
 RO1A:50FA 01 00 FE         ld   bc,FE00
 RO1A:50FD 38 04            jr   c,5103
 RO1A:50FF EF 27 47 40                          // Carry Flag set by A, B, or Start being pressed during timer determined by DE; gradual scroll determined by BC
 RO1A:5103 CD 43 38         call 3843
 RO1A:5106 CD 15 38         call 3815
 RO1A:5109 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 RO1A:510C EF 17 00 40                          // Clear all sprites in $C300 table, empties ($C4C8~$C4DB), WRA4($DB2C), WRA4($DB2E) 2 byte, and WRA4($D3AC~$DB2B)
 RO1A:5110 C9               ret  
 RO1A:5111 FA A2 C4         ld   a,(C4A2)
 RO1A:5114 FE 0D            cp   a,0D
 RO1A:5116 28 14            jr   z,512C
 RO1A:5118 FE 0E            cp   a,0E           // APCs
 RO1A:511A 28 10            jr   z,512C
 RO1A:511C FE 2A            cp   a,2A
 RO1A:511E 28 0C            jr   z,512C
 RO1A:5120 FE 2B            cp   a,2B           // Transport Helicopters
 RO1A:5122 28 08            jr   z,512C
 RO1A:5124 FE 25            cp   a,25           // Transport Plane
 RO1A:5126 28 06            jr   z,512E
 RO1A:5128 FE 30            cp   a,30           // Lander
 RO1A:512A 28 05            jr   z,5131
 RO1A:512C AF               xor  a
 RO1A:512D C9               ret  
 RO1A:512E 3E 01            ld   a,01
 RO1A:5130 C9               ret  
 RO1A:5131 3E 02            ld   a,02
 RO1A:5133 C9               ret                 // A = 1 for Transport Plane, 2 for Lander, 0 for otherwise
 RO1A:5134 CD 11 51         call 5111           // A = 1 for Transport Plane, 2 for Lander, 0 for otherwise
 RO1A:5137 FE 00            cp   a,00
 RO1A:5139 28 08            jr   z,5143
 RO1A:513B FE 01            cp   a,01
 RO1A:513D 28 10            jr   z,514F
 RO1A:513F FE 02            cp   a,02
 RO1A:5141 28 22            jr   z,5165
 RO1A:5143 3E 09            ld   a,09
 RO1A:5145 F5               push af
 RO1A:5146 FA A0 C4         ld   a,(C4A0)
 RO1A:5149 47               ld   b,a
 RO1A:514A F1               pop  af             // Plains, Active Player
 RO1A:514B CD 85 41         call 4185           // Handles backdrop graphics as a whole (A is Backdrop number, B is used palette set) (difference not clear)
 RO1A:514E C9               ret  
 RO1A:514F 3E 0B            ld   a,0B
 RO1A:5151 F5               push af
 RO1A:5152 FA A0 C4         ld   a,(C4A0)
 RO1A:5155 47               ld   b,a
 RO1A:5156 F1               pop  af             // Transport Plane, Active Player
 RO1A:5157 CD 85 41         call 4185           // Handles backdrop graphics as a whole (A is Backdrop number, B is used palette set) (difference not clear)
 RO1A:515A 01 07 0F         ld   bc,0F07
 RO1A:515D 11 06 05         ld   de,0506
 RO1A:5160 EF 15 41 6B                          // Sets last bit in each byte in rectangle 15~19,7~12 (done to set up unit sprite hiding)
 RO1A:5164 C9               ret  
 RO1A:5165 3E 0C            ld   a,0C
 RO1A:5167 F5               push af
 RO1A:5168 FA A0 C4         ld   a,(C4A0)
 RO1A:516B 47               ld   b,a
 RO1A:516C F1               pop  af             // Lander, Active Player
 RO1A:516D CD 85 41         call 4185           // Handles backdrop graphics as a whole (A is Backdrop number, B is used palette set) (difference not clear)
 RO1A:5170 01 07 0F         ld   bc,0F07
 RO1A:5173 11 06 05         ld   de,0506
 RO1A:5176 EF 15 41 6B                          // Sets last bit in each byte in rectangle 15~19,7~12 (done to set up unit sprite hiding)
 RO1A:517A C9               ret                 // Sets up backdrop for involved transport-related scene; also sets up unit sprite hiding for portion involving the transport for Lander/Transport Plane
 RO1A:517B AF               xor  a
 RO1A:517C EA CC C4         ld   (C4CC),a
 RO1A:517F EA CD C4         ld   (C4CD),a
 RO1A:5182 3E FF            ld   a,FF
 RO1A:5184 EA CE C4         ld   (C4CE),a
 RO1A:5187 AF               xor  a
 RO1A:5188 EA CF C4         ld   (C4CF),a
 RO1A:518B 3E 51            ld   a,51
 RO1A:518D EA D5 C4         ld   (C4D5),a
 RO1A:5190 3E AC            ld   a,AC
 RO1A:5192 EA D6 C4         ld   (C4D6),a
 RO1A:5195 3E 1A            ld   a,1A
 RO1A:5197 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$51AC
 RO1A:519A AF               xor  a
 RO1A:519B EA D3 C4         ld   (C4D3),a
 RO1A:519E 3E 02            ld   a,02
 RO1A:51A0 EA D4 C4         ld   (C4D4),a
 RO1A:51A3 FA D0 C4         ld   a,(C4D0)
 RO1A:51A6 CD 2B 2F         call 2F2B           // res 1,WRA4[$D000 + A * 16]
 RO1A:51A9 C3 8A 02         jp   028A
 RO1A:51AC AF               xor  a
 RO1A:51AD EA CC C4         ld   (C4CC),a
 RO1A:51B0 3E 80            ld   a,80
 RO1A:51B2 EA CD C4         ld   (C4CD),a
 RO1A:51B5 AF               xor  a
 RO1A:51B6 EA CE C4         ld   (C4CE),a
 RO1A:51B9 EA CF C4         ld   (C4CF),a
 RO1A:51BC EA D5 C4         ld   (C4D5),a
 RO1A:51BF EA D6 C4         ld   (C4D6),a
 RO1A:51C2 EA D7 C4         ld   (C4D7),a
 RO1A:51C5 AF               xor  a
 RO1A:51C6 EA D3 C4         ld   (C4D3),a
 RO1A:51C9 3E 7D            ld   a,7D
 RO1A:51CB EA D4 C4         ld   (C4D4),a
 RO1A:51CE FA D0 C4         ld   a,(C4D0)
 RO1A:51D1 CD 2B 2F         call 2F2B           // res 1,WRA4[$D000 + A * 16]
 RO1A:51D4 C3 8A 02         jp   028A
 RO1A:51D7 3E FF            ld   a,FF
 RO1A:51D9 EA CC C4         ld   (C4CC),a
 RO1A:51DC AF               xor  a
 RO1A:51DD EA CD C4         ld   (C4CD),a
 RO1A:51E0 3E FE            ld   a,FE
 RO1A:51E2 EA CE C4         ld   (C4CE),a
 RO1A:51E5 AF               xor  a
 RO1A:51E6 EA CF C4         ld   (C4CF),a
 RO1A:51E9 3E 52            ld   a,52
 RO1A:51EB EA D5 C4         ld   (C4D5),a
 RO1A:51EE 3E 0A            ld   a,0A
 RO1A:51F0 EA D6 C4         ld   (C4D6),a
 RO1A:51F3 3E 1A            ld   a,1A
 RO1A:51F5 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$520A
 RO1A:51F8 AF               xor  a
 RO1A:51F9 EA D3 C4         ld   (C4D3),a
 RO1A:51FC 3E 02            ld   a,02
 RO1A:51FE EA D4 C4         ld   (C4D4),a
 RO1A:5201 FA D0 C4         ld   a,(C4D0)
 RO1A:5204 CD 2B 2F         call 2F2B           // res 1,WRA4[$D000 + A * 16]
 RO1A:5207 C3 8A 02         jp   028A
 RO1A:520A 3E FF            ld   a,FF
 RO1A:520C EA CC C4         ld   (C4CC),a
 RO1A:520F AF               xor  a
 RO1A:5210 EA CD C4         ld   (C4CD),a
 RO1A:5213 3E FF            ld   a,FF
 RO1A:5215 EA CE C4         ld   (C4CE),a
 RO1A:5218 AF               xor  a
 RO1A:5219 EA CF C4         ld   (C4CF),a
 RO1A:521C 3E 52            ld   a,52
 RO1A:521E EA D5 C4         ld   (C4D5),a
 RO1A:5221 3E 3D            ld   a,3D
 RO1A:5223 EA D6 C4         ld   (C4D6),a
 RO1A:5226 3E 1A            ld   a,1A
 RO1A:5228 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$523D
 RO1A:522B AF               xor  a
 RO1A:522C EA D3 C4         ld   (C4D3),a
 RO1A:522F 3E 04            ld   a,04
 RO1A:5231 EA D4 C4         ld   (C4D4),a
 RO1A:5234 FA D0 C4         ld   a,(C4D0)
 RO1A:5237 CD 2B 2F         call 2F2B           // res 1,WRA4[$D000 + A * 16]
 RO1A:523A C3 8A 02         jp   028A
 RO1A:523D 3E FF            ld   a,FF
 RO1A:523F EA CC C4         ld   (C4CC),a
 RO1A:5242 AF               xor  a
 RO1A:5243 EA CD C4         ld   (C4CD),a
 RO1A:5246 3E FF            ld   a,FF
 RO1A:5248 EA CE C4         ld   (C4CE),a
 RO1A:524B 3E 80            ld   a,80
 RO1A:524D EA CF C4         ld   (C4CF),a
 RO1A:5250 AF               xor  a
 RO1A:5251 EA D5 C4         ld   (C4D5),a
 RO1A:5254 EA D6 C4         ld   (C4D6),a
 RO1A:5257 EA D7 C4         ld   (C4D7),a
 RO1A:525A EA D3 C4         ld   (C4D3),a
 RO1A:525D 3E 08            ld   a,08
 RO1A:525F EA D4 C4         ld   (C4D4),a
 RO1A:5262 FA D0 C4         ld   a,(C4D0)
 RO1A:5265 CD 2B 2F         call 2F2B           // res 1,WRA4[$D000 + A * 16]
 RO1A:5268 C3 8A 02         jp   028A
 RO1A:526B FA A1 C4         ld   a,(C4A1)
 RO1A:526E FE 04            cp   a,04
 RO1A:5270 38 62            jr   c,52D4
 RO1A:5272 3E 00            ld   a,00
 RO1A:5274 E0 83            ld   (ff00+83),a
 RO1A:5276 E0 4F            ld   (ff00+4F),a
 RO1A:5278 FA A1 C4         ld   a,(C4A1)
 RO1A:527B CD 7A 45         call 457A           // B holds unit A sprite's ROM block, DE holds location of first list of pointers to sprite stats modification tables for unit A sprite, WRA4($D33C) set to unit A sprite's first pointer number, unit A sprite's group graphics tiles established starting at ($8000)
 RO1A:527E FA 3C D3         ld   a,(D33C)
 RO1A:5281 3C               inc  a
 RO1A:5282 3C               inc  a
 RO1A:5283 EA 3C D3         ld   (D33C),a
 RO1A:5286 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:528A AF               xor  a
 RO1A:528B EA D1 C4         ld   (C4D1),a
 RO1A:528E EA D2 C4         ld   (C4D2),a
 RO1A:5291 EA CC C4         ld   (C4CC),a
 RO1A:5294 3E 80            ld   a,80
 RO1A:5296 EA CD C4         ld   (C4CD),a
 RO1A:5299 AF               xor  a
 RO1A:529A EA CE C4         ld   (C4CE),a
 RO1A:529D EA CF C4         ld   (C4CF),a
 RO1A:52A0 3E 51            ld   a,51
 RO1A:52A2 EA D5 C4         ld   (C4D5),a
 RO1A:52A5 3E 7B            ld   a,7B
 RO1A:52A7 EA D6 C4         ld   (C4D6),a
 RO1A:52AA 3E 1A            ld   a,1A
 RO1A:52AC EA D7 C4         ld   (C4D7),a       // Instruction $1A:$517B
 RO1A:52AF AF               xor  a
 RO1A:52B0 EA D3 C4         ld   (C4D3),a
 RO1A:52B3 3E 3C            ld   a,3C
 RO1A:52B5 EA D4 C4         ld   (C4D4),a
 RO1A:52B8 21 68 40         ld   hl,4068
 RO1A:52BB FA A1 C4         ld   a,(C4A1)
 RO1A:52BE FE 0F            cp   a,0F
 RO1A:52C0 38 02            jr   c,52C4
 RO1A:52C2 18 04            jr   52C8
 RO1A:52C4 3E 41            ld   a,41
 RO1A:52C6 18 02            jr   52CA
 RO1A:52C8 3E 42            ld   a,42
 RO1A:52CA EA DB C4         ld   (C4DB),a
 RO1A:52CD EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:52D1 C3 86 53         jp   5386
 RO1A:52D4 FA A2 C4         ld   a,(C4A2)
 RO1A:52D7 FE 25            cp   a,25           // Transport Plane?
 RO1A:52D9 28 57            jr   z,5332
 RO1A:52DB FE 30            cp   a,30           // Lander?
 RO1A:52DD 28 53            jr   z,5332
 RO1A:52DF 3E 00            ld   a,00
 RO1A:52E1 E0 83            ld   (ff00+83),a
 RO1A:52E3 E0 4F            ld   (ff00+4F),a
 RO1A:52E5 3E 0D            ld   a,0D           // Infantry
 RO1A:52E7 21 00 80         ld   hl,8000
 RO1A:52EA CD D7 43         call 43D7           // Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
 RO1A:52ED 3E 93            ld   a,93           // Soldier basic running (left)
 RO1A:52EF EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:52F3 AF               xor  a
 RO1A:52F4 EA D1 C4         ld   (C4D1),a
 RO1A:52F7 EA D2 C4         ld   (C4D2),a
 RO1A:52FA 3E FF            ld   a,FF
 RO1A:52FC EA CC C4         ld   (C4CC),a
 RO1A:52FF AF               xor  a
 RO1A:5300 EA CD C4         ld   (C4CD),a
 RO1A:5303 EA CE C4         ld   (C4CE),a
 RO1A:5306 EA CF C4         ld   (C4CF),a
 RO1A:5309 3E 51            ld   a,51
 RO1A:530B EA D5 C4         ld   (C4D5),a
 RO1A:530E 3E D7            ld   a,D7
 RO1A:5310 EA D6 C4         ld   (C4D6),a
 RO1A:5313 3E 1A            ld   a,1A
 RO1A:5315 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$51D7
 RO1A:5318 AF               xor  a
 RO1A:5319 EA D3 C4         ld   (C4D3),a
 RO1A:531C 3E 50            ld   a,50
 RO1A:531E EA D4 C4         ld   (C4D4),a
 RO1A:5321 0E 00            ld   c,00
 RO1A:5323 21 68 A0         ld   hl,A068
 RO1A:5326 3E 43            ld   a,43
 RO1A:5328 EA DB C4         ld   (C4DB),a
 RO1A:532B EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:532F C3 86 53         jp   5386
 RO1A:5332 3E 00            ld   a,00
 RO1A:5334 E0 83            ld   (ff00+83),a
 RO1A:5336 E0 4F            ld   (ff00+4F),a
 RO1A:5338 FA A1 C4         ld   a,(C4A1)
 RO1A:533B CD 7A 45         call 457A           // B holds unit A sprite's ROM block, DE holds location of first list of pointers to sprite stats modification tables for unit A sprite, WRA4($D33C) set to unit A sprite's first pointer number, unit A sprite's group graphics tiles established starting at ($8000)
 RO1A:533E FA 3C D3         ld   a,(D33C)
 RO1A:5341 C6 05            add  a,05
 RO1A:5343 EA 3C D3         ld   (D33C),a
 RO1A:5346 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:534A AF               xor  a
 RO1A:534B EA D1 C4         ld   (C4D1),a
 RO1A:534E EA D2 C4         ld   (C4D2),a
 RO1A:5351 EA CC C4         ld   (C4CC),a
 RO1A:5354 3E 80            ld   a,80
 RO1A:5356 EA CD C4         ld   (C4CD),a
 RO1A:5359 AF               xor  a
 RO1A:535A EA CE C4         ld   (C4CE),a
 RO1A:535D EA CF C4         ld   (C4CF),a
 RO1A:5360 3E 51            ld   a,51
 RO1A:5362 EA D5 C4         ld   (C4D5),a
 RO1A:5365 3E 7B            ld   a,7B
 RO1A:5367 EA D6 C4         ld   (C4D6),a
 RO1A:536A 3E 1A            ld   a,1A
 RO1A:536C EA D7 C4         ld   (C4D7),a       // Instruction $1A:$517B
 RO1A:536F AF               xor  a
 RO1A:5370 EA D3 C4         ld   (C4D3),a
 RO1A:5373 3E 3C            ld   a,3C
 RO1A:5375 EA D4 C4         ld   (C4D4),a
 RO1A:5378 21 68 48         ld   hl,4868
 RO1A:537B 3E 43            ld   a,43
 RO1A:537D EA DB C4         ld   (C4DB),a
 RO1A:5380 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:5384 18 00            jr   5386
 RO1A:5386 C9               ret  
 RO1A:5387 3E FF            ld   a,FF
 RO1A:5389 EA CC C4         ld   (C4CC),a
 RO1A:538C 3E 80            ld   a,80
 RO1A:538E EA CD C4         ld   (C4CD),a
 RO1A:5391 AF               xor  a
 RO1A:5392 EA CE C4         ld   (C4CE),a
 RO1A:5395 EA CF C4         ld   (C4CF),a
 RO1A:5398 3E 53            ld   a,53
 RO1A:539A EA D5 C4         ld   (C4D5),a
 RO1A:539D 3E BE            ld   a,BE
 RO1A:539F EA D6 C4         ld   (C4D6),a
 RO1A:53A2 3E 1A            ld   a,1A
 RO1A:53A4 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$53BE
 RO1A:53A7 AF               xor  a
 RO1A:53A8 EA D3 C4         ld   (C4D3),a
 RO1A:53AB 3E 28            ld   a,28
 RO1A:53AD EA D4 C4         ld   (C4D4),a
 RO1A:53B0 FA D0 C4         ld   a,(C4D0)
 RO1A:53B3 CD 2B 2F         call 2F2B           // res 1,WRA4[$D000 + A * 16]
 RO1A:53B6 3E 41            ld   a,41
 RO1A:53B8 CD 44 38         call 3844
 RO1A:53BB C3 8A 02         jp   028A
 RO1A:53BE 3E FF            ld   a,FF
 RO1A:53C0 EA CC C4         ld   (C4CC),a
 RO1A:53C3 AF               xor  a
 RO1A:53C4 EA CD C4         ld   (C4CD),a
 RO1A:53C7 EA CE C4         ld   (C4CE),a
 RO1A:53CA EA CF C4         ld   (C4CF),a
 RO1A:53CD EA D5 C4         ld   (C4D5),a
 RO1A:53D0 EA D6 C4         ld   (C4D6),a
 RO1A:53D3 EA D7 C4         ld   (C4D7),a
 RO1A:53D6 AF               xor  a
 RO1A:53D7 EA D3 C4         ld   (C4D3),a
 RO1A:53DA 3E 3C            ld   a,3C
 RO1A:53DC EA D4 C4         ld   (C4D4),a
 RO1A:53DF FA D0 C4         ld   a,(C4D0)
 RO1A:53E2 CD 2B 2F         call 2F2B           // res 1,WRA4[$D000 + A * 16]
 RO1A:53E5 C3 8A 02         jp   028A
 RO1A:53E8 AF               xor  a
 RO1A:53E9 EA CC C4         ld   (C4CC),a
 RO1A:53EC EA CD C4         ld   (C4CD),a
 RO1A:53EF EA CE C4         ld   (C4CE),a
 RO1A:53F2 EA CF C4         ld   (C4CF),a
 RO1A:53F5 3E 54            ld   a,54
 RO1A:53F7 EA D5 C4         ld   (C4D5),a
 RO1A:53FA 3E 1B            ld   a,1B
 RO1A:53FC EA D6 C4         ld   (C4D6),a
 RO1A:53FF 3E 1A            ld   a,1A
 RO1A:5401 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$541B
 RO1A:5404 AF               xor  a
 RO1A:5405 EA D3 C4         ld   (C4D3),a
 RO1A:5408 3E 98            ld   a,98
 RO1A:540A EA D4 C4         ld   (C4D4),a
 RO1A:540D FA D0 C4         ld   a,(C4D0)
 RO1A:5410 CD 2B 2F         call 2F2B           // res 1,WRA4[$D000 + A * 16]
 RO1A:5413 3E 47            ld   a,47
 RO1A:5415 EA DB C4         ld   (C4DB),a
 RO1A:5418 C3 8A 02         jp   028A
 RO1A:541B AF               xor  a
 RO1A:541C EA CC C4         ld   (C4CC),a
 RO1A:541F EA CD C4         ld   (C4CD),a
 RO1A:5422 3E FF            ld   a,FF
 RO1A:5424 EA CE C4         ld   (C4CE),a
 RO1A:5427 3E 80            ld   a,80
 RO1A:5429 EA CF C4         ld   (C4CF),a
 RO1A:542C 3E 54            ld   a,54
 RO1A:542E EA D5 C4         ld   (C4D5),a
 RO1A:5431 3E 55            ld   a,55
 RO1A:5433 EA D6 C4         ld   (C4D6),a
 RO1A:5436 3E 1A            ld   a,1A
 RO1A:5438 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$5455
 RO1A:543B AF               xor  a
 RO1A:543C EA D3 C4         ld   (C4D3),a
 RO1A:543F 3E 1E            ld   a,1E
 RO1A:5441 EA D4 C4         ld   (C4D4),a
 RO1A:5444 FA 3C D3         ld   a,(D33C)
 RO1A:5447 3C               inc  a
 RO1A:5448 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:544C FA D0 C4         ld   a,(C4D0)
 RO1A:544F CD E8 2E         call 2EE8           // WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
 RO1A:5452 C3 8A 02         jp   028A
 RO1A:5455 AF               xor  a
 RO1A:5456 EA CC C4         ld   (C4CC),a
 RO1A:5459 EA CD C4         ld   (C4CD),a
 RO1A:545C 3E FF            ld   a,FF
 RO1A:545E EA CE C4         ld   (C4CE),a
 RO1A:5461 AF               xor  a
 RO1A:5462 EA CF C4         ld   (C4CF),a
 RO1A:5465 3E 54            ld   a,54
 RO1A:5467 EA D5 C4         ld   (C4D5),a
 RO1A:546A 3E 80            ld   a,80
 RO1A:546C EA D6 C4         ld   (C4D6),a
 RO1A:546F 3E 1A            ld   a,1A
 RO1A:5471 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$5480
 RO1A:5474 AF               xor  a
 RO1A:5475 EA D3 C4         ld   (C4D3),a
 RO1A:5478 3E 05            ld   a,05
 RO1A:547A EA D4 C4         ld   (C4D4),a
 RO1A:547D C3 8A 02         jp   028A
 RO1A:5480 AF               xor  a
 RO1A:5481 EA CC C4         ld   (C4CC),a
 RO1A:5484 EA CD C4         ld   (C4CD),a
 RO1A:5487 3E FE            ld   a,FE
 RO1A:5489 EA CE C4         ld   (C4CE),a
 RO1A:548C AF               xor  a
 RO1A:548D EA CF C4         ld   (C4CF),a
 RO1A:5490 EA D5 C4         ld   (C4D5),a
 RO1A:5493 EA D6 C4         ld   (C4D6),a
 RO1A:5496 EA D7 C4         ld   (C4D7),a
 RO1A:5499 AF               xor  a
 RO1A:549A EA D3 C4         ld   (C4D3),a
 RO1A:549D 3E 42            ld   a,42
 RO1A:549F EA D4 C4         ld   (C4D4),a
 RO1A:54A2 C3 8A 02         jp   028A
 RO1A:54A5 FA A2 C4         ld   a,(C4A2)       // Parent unit
 RO1A:54A8 FE 07            cp   a,07
 RO1A:54AA 28 1F            jr   z,54CB
 RO1A:54AC FE 08            cp   a,08           // Convoy+?
 RO1A:54AE 28 1B            jr   z,54CB
 RO1A:54B0 FE 0D            cp   a,0D
 RO1A:54B2 28 17            jr   z,54CB
 RO1A:54B4 FE 0E            cp   a,0E           // APC+?
 RO1A:54B6 28 13            jr   z,54CB
 RO1A:54B8 FE 17            cp   a,17
 RO1A:54BA 28 0F            jr   z,54CB
 RO1A:54BC FE 18            cp   a,18           // IFV+?
 RO1A:54BE 28 0B            jr   z,54CB
 RO1A:54C0 FE 2A            cp   a,2A
 RO1A:54C2 28 4F            jr   z,5513
 RO1A:54C4 FE 2B            cp   a,2B           // Transport Helicopter+?
 RO1A:54C6 28 4B            jr   z,5513
 RO1A:54C8 C3 59 55         jp   5559
 RO1A:54CB 3E 01            ld   a,01
 RO1A:54CD E0 83            ld   (ff00+83),a
 RO1A:54CF E0 4F            ld   (ff00+4F),a
 RO1A:54D1 FA A2 C4         ld   a,(C4A2)       // Parent unit
 RO1A:54D4 CD 7A 45         call 457A           // B holds unit A sprite's ROM block, DE holds location of first list of pointers to sprite stats modification tables for unit A sprite, WRA4($D33C) set to unit A sprite's first pointer number, unit A sprite's group graphics tiles established starting at ($8000)
 RO1A:54D7 AF               xor  a
 RO1A:54D8 EA D1 C4         ld   (C4D1),a
 RO1A:54DB EA D2 C4         ld   (C4D2),a
 RO1A:54DE EA CC C4         ld   (C4CC),a
 RO1A:54E1 EA CD C4         ld   (C4CD),a
 RO1A:54E4 EA CE C4         ld   (C4CE),a
 RO1A:54E7 EA CF C4         ld   (C4CF),a
 RO1A:54EA 3E 53            ld   a,53
 RO1A:54EC EA D5 C4         ld   (C4D5),a
 RO1A:54EF 3E 87            ld   a,87
 RO1A:54F1 EA D6 C4         ld   (C4D6),a
 RO1A:54F4 3E 1A            ld   a,1A
 RO1A:54F6 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$5387
 RO1A:54F9 AF               xor  a
 RO1A:54FA EA D3 C4         ld   (C4D3),a
 RO1A:54FD 3E 78            ld   a,78
 RO1A:54FF EA D4 C4         ld   (C4D4),a
 RO1A:5502 0E 80            ld   c,80
 RO1A:5504 21 64 30         ld   hl,3064
 RO1A:5507 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:550B FA D0 C4         ld   a,(C4D0)
 RO1A:550E CD 11 2F         call 2F11           // set 1,WRA4[$D000 + A * 16]
 RO1A:5511 18 46            jr   5559
 RO1A:5513 3E 01            ld   a,01
 RO1A:5515 E0 83            ld   (ff00+83),a
 RO1A:5517 E0 4F            ld   (ff00+4F),a
 RO1A:5519 FA A2 C4         ld   a,(C4A2)
 RO1A:551C CD 7A 45         call 457A           // B holds unit A sprite's ROM block, DE holds location of first list of pointers to sprite stats modification tables for unit A sprite, WRA4($D33C) set to unit A sprite's first pointer number, unit A sprite's group graphics tiles established starting at ($8000)
 RO1A:551F AF               xor  a
 RO1A:5520 EA D1 C4         ld   (C4D1),a
 RO1A:5523 EA D2 C4         ld   (C4D2),a
 RO1A:5526 EA CC C4         ld   (C4CC),a
 RO1A:5529 EA CD C4         ld   (C4CD),a
 RO1A:552C EA CE C4         ld   (C4CE),a
 RO1A:552F EA CF C4         ld   (C4CF),a
 RO1A:5532 3E 53            ld   a,53
 RO1A:5534 EA D5 C4         ld   (C4D5),a
 RO1A:5537 3E E8            ld   a,E8
 RO1A:5539 EA D6 C4         ld   (C4D6),a
 RO1A:553C 3E 1A            ld   a,1A
 RO1A:553E EA D7 C4         ld   (C4D7),a       // Instruction $1A:$53E8
 RO1A:5541 AF               xor  a
 RO1A:5542 EA D3 C4         ld   (C4D3),a
 RO1A:5545 3E 05            ld   a,05
 RO1A:5547 EA D4 C4         ld   (C4D4),a
 RO1A:554A 0E 80            ld   c,80
 RO1A:554C 21 68 30         ld   hl,3068
 RO1A:554F EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:5553 FA D0 C4         ld   a,(C4D0)
 RO1A:5556 CD 11 2F         call 2F11           // set 1,WRA4[$D000 + A * 16]
 RO1A:5559 C9               ret  
 RO1A:555A CD 34 51         call 5134           // Sets up backdrop for involved transport-related scene; also sets up unit sprite hiding for portion involving the transport for Lander/Transport Plane
 RO1A:555D CD A5 54         call 54A5
 RO1A:5560 CD 6B 52         call 526B
 RO1A:5563 11 01 00         ld   de,0001
 RO1A:5566 01 00 00         ld   bc,0000
 RO1A:5569 EF 27 47 40                          // Carry Flag set by A, B, or Start being pressed during timer determined by DE; gradual scroll determined by BC
 RO1A:556D FA 86 C6         ld   a,(C686)
 RO1A:5570 FE 00            cp   a,00
 RO1A:5572 28 05            jr   z,5579
 RO1A:5574 3E 24            ld   a,24
 RO1A:5576 CD 16 38         call 3816           // Loading jingle
 RO1A:5579 CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 RO1A:557C FA A2 C4         ld   a,(C4A2)
 RO1A:557F FE 2A            cp   a,2A
 RO1A:5581 28 12            jr   z,5595
 RO1A:5583 FE 2B            cp   a,2B
 RO1A:5585 28 0E            jr   z,5595
 RO1A:5587 11 96 00         ld   de,0096
 RO1A:558A 01 00 00         ld   bc,0000
 RO1A:558D EF 27 47 40                          // Carry Flag set by A, B, or Start being pressed during timer determined by DE; gradual scroll determined by BC
 RO1A:5591 38 0E            jr   c,55A1
 RO1A:5593 18 0C            jr   55A1
 RO1A:5595 11 F0 00         ld   de,00F0
 RO1A:5598 01 00 00         ld   bc,0000
 RO1A:559B EF 27 47 40                          // Carry Flag set by A, B, or Start being pressed during timer determined by DE; gradual scroll determined by BC
 RO1A:559F 38 00            jr   c,55A1
 RO1A:55A1 CD 43 38         call 3843
 RO1A:55A4 CD 15 38         call 3815
 RO1A:55A7 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 RO1A:55AA EF 17 00 40                          // Clear all sprites in $C300 table, empties ($C4C8~$C4DB), WRA4($DB2C), WRA4($DB2E) 2 byte, and WRA4($D3AC~$DB2B)
 RO1A:55AE C9               ret  
 RO1A:55AF FA A2 C4         ld   a,(C4A2)
 RO1A:55B2 FE 07            cp   a,07
 RO1A:55B4 28 1F            jr   z,55D5
 RO1A:55B6 FE 08            cp   a,08
 RO1A:55B8 28 1B            jr   z,55D5
 RO1A:55BA FE 0D            cp   a,0D
 RO1A:55BC 28 17            jr   z,55D5
 RO1A:55BE FE 0E            cp   a,0E
 RO1A:55C0 28 13            jr   z,55D5
 RO1A:55C2 FE 17            cp   a,17
 RO1A:55C4 28 0F            jr   z,55D5
 RO1A:55C6 FE 18            cp   a,18
 RO1A:55C8 28 0B            jr   z,55D5
 RO1A:55CA FE 2A            cp   a,2A
 RO1A:55CC 28 5E            jr   z,562C
 RO1A:55CE FE 2B            cp   a,2B
 RO1A:55D0 28 5A            jr   z,562C
 RO1A:55D2 C3 7F 56         jp   567F
 RO1A:55D5 3E 01            ld   a,01
 RO1A:55D7 E0 83            ld   (ff00+83),a
 RO1A:55D9 E0 4F            ld   (ff00+4F),a
 RO1A:55DB FA A2 C4         ld   a,(C4A2)
 RO1A:55DE CD 7A 45         call 457A           // B holds unit A sprite's ROM block, DE holds location of first list of pointers to sprite stats modification tables for unit A sprite, WRA4($D33C) set to unit A sprite's first pointer number, unit A sprite's group graphics tiles established starting at ($8000)
 RO1A:55E1 AF               xor  a
 RO1A:55E2 EA D1 C4         ld   (C4D1),a
 RO1A:55E5 EA D2 C4         ld   (C4D2),a
 RO1A:55E8 3E FF            ld   a,FF
 RO1A:55EA EA CC C4         ld   (C4CC),a
 RO1A:55ED AF               xor  a
 RO1A:55EE EA CD C4         ld   (C4CD),a
 RO1A:55F1 EA CE C4         ld   (C4CE),a
 RO1A:55F4 EA CF C4         ld   (C4CF),a
 RO1A:55F7 3E 41            ld   a,41
 RO1A:55F9 EA D5 C4         ld   (C4D5),a
 RO1A:55FC 3E CB            ld   a,CB
 RO1A:55FE EA D6 C4         ld   (C4D6),a
 RO1A:5601 3E 27            ld   a,27
 RO1A:5603 EA D7 C4         ld   (C4D7),a       // Instruction $27:$41CB
 RO1A:5606 AF               xor  a
 RO1A:5607 EA D3 C4         ld   (C4D3),a
 RO1A:560A 3E 87            ld   a,87
 RO1A:560C EA D4 C4         ld   (C4D4),a
 RO1A:560F 0E 80            ld   c,80
 RO1A:5611 21 64 B8         ld   hl,B864
 RO1A:5614 FA A2 C4         ld   a,(C4A2)
 RO1A:5617 FE 0F            cp   a,0F
 RO1A:5619 38 02            jr   c,561D
 RO1A:561B 18 04            jr   5621
 RO1A:561D 3E 51            ld   a,51
 RO1A:561F 18 02            jr   5623
 RO1A:5621 3E 52            ld   a,52
 RO1A:5623 EA DB C4         ld   (C4DB),a
 RO1A:5626 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:562A 18 53            jr   567F
 RO1A:562C 3E 01            ld   a,01
 RO1A:562E E0 83            ld   (ff00+83),a
 RO1A:5630 E0 4F            ld   (ff00+4F),a
 RO1A:5632 FA A2 C4         ld   a,(C4A2)
 RO1A:5635 CD 7A 45         call 457A           // B holds unit A sprite's ROM block, DE holds location of first list of pointers to sprite stats modification tables for unit A sprite, WRA4($D33C) set to unit A sprite's first pointer number, unit A sprite's group graphics tiles established starting at ($8000)
 RO1A:5638 AF               xor  a
 RO1A:5639 EA D1 C4         ld   (C4D1),a
 RO1A:563C EA D2 C4         ld   (C4D2),a
 RO1A:563F EA CC C4         ld   (C4CC),a
 RO1A:5642 EA CD C4         ld   (C4CD),a
 RO1A:5645 3E 01            ld   a,01
 RO1A:5647 EA CE C4         ld   (C4CE),a
 RO1A:564A AF               xor  a
 RO1A:564B EA CF C4         ld   (C4CF),a
 RO1A:564E 3E 40            ld   a,40
 RO1A:5650 EA D5 C4         ld   (C4D5),a
 RO1A:5653 3E E6            ld   a,E6
 RO1A:5655 EA D6 C4         ld   (C4D6),a
 RO1A:5658 3E 27            ld   a,27
 RO1A:565A EA D7 C4         ld   (C4D7),a       // Instruction $27:$40E6
 RO1A:565D AF               xor  a
 RO1A:565E EA D3 C4         ld   (C4D3),a
 RO1A:5661 3E 3C            ld   a,3C
 RO1A:5663 EA D4 C4         ld   (C4D4),a
 RO1A:5666 0E 80            ld   c,80
 RO1A:5668 21 08 30         ld   hl,3008
 RO1A:566B FA A2 C4         ld   a,(C4A2)
 RO1A:566E FE 21            cp   a,21
 RO1A:5670 20 04            jr   nz,5676
 RO1A:5672 3E 58            ld   a,58
 RO1A:5674 18 02            jr   5678
 RO1A:5676 3E 4B            ld   a,4B
 RO1A:5678 EA DB C4         ld   (C4DB),a
 RO1A:567B EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:567F C9               ret  
 RO1A:5680 AF               xor  a
 RO1A:5681 EA CC C4         ld   (C4CC),a
 RO1A:5684 EA CD C4         ld   (C4CD),a
 RO1A:5687 3E 01            ld   a,01
 RO1A:5689 EA CE C4         ld   (C4CE),a
 RO1A:568C AF               xor  a
 RO1A:568D EA CF C4         ld   (C4CF),a
 RO1A:5690 3E 56            ld   a,56
 RO1A:5692 EA D5 C4         ld   (C4D5),a
 RO1A:5695 3E B1            ld   a,B1
 RO1A:5697 EA D6 C4         ld   (C4D6),a
 RO1A:569A 3E 1A            ld   a,1A
 RO1A:569C EA D7 C4         ld   (C4D7),a       // Instruction $1A:$56B1
 RO1A:569F AF               xor  a
 RO1A:56A0 EA D3 C4         ld   (C4D3),a
 RO1A:56A3 3E 02            ld   a,02
 RO1A:56A5 EA D4 C4         ld   (C4D4),a
 RO1A:56A8 FA D0 C4         ld   a,(C4D0)
 RO1A:56AB CD 2B 2F         call 2F2B           // res 1,WRA4[$D000 + A * 16]
 RO1A:56AE C3 8A 02         jp   028A
 RO1A:56B1 3E FF            ld   a,FF
 RO1A:56B3 EA CC C4         ld   (C4CC),a
 RO1A:56B6 3E 80            ld   a,80
 RO1A:56B8 EA CD C4         ld   (C4CD),a
 RO1A:56BB AF               xor  a
 RO1A:56BC EA CE C4         ld   (C4CE),a
 RO1A:56BF EA CF C4         ld   (C4CF),a
 RO1A:56C2 EA D5 C4         ld   (C4D5),a
 RO1A:56C5 EA D6 C4         ld   (C4D6),a
 RO1A:56C8 EA D7 C4         ld   (C4D7),a
 RO1A:56CB AF               xor  a
 RO1A:56CC EA D3 C4         ld   (C4D3),a
 RO1A:56CF 3E D2            ld   a,D2
 RO1A:56D1 EA D4 C4         ld   (C4D4),a
 RO1A:56D4 FA D0 C4         ld   a,(C4D0)
 RO1A:56D7 CD 2B 2F         call 2F2B           // res 1,WRA4[$D000 + A * 16]
 RO1A:56DA C3 8A 02         jp   028A
 RO1A:56DD 3E 01            ld   a,01
 RO1A:56DF EA CC C4         ld   (C4CC),a
 RO1A:56E2 AF               xor  a
 RO1A:56E3 EA CD C4         ld   (C4CD),a
 RO1A:56E6 3E 01            ld   a,01
 RO1A:56E8 EA CE C4         ld   (C4CE),a
 RO1A:56EB AF               xor  a
 RO1A:56EC EA CF C4         ld   (C4CF),a
 RO1A:56EF 3E 57            ld   a,57
 RO1A:56F1 EA D5 C4         ld   (C4D5),a
 RO1A:56F4 3E 10            ld   a,10
 RO1A:56F6 EA D6 C4         ld   (C4D6),a
 RO1A:56F9 3E 1A            ld   a,1A
 RO1A:56FB EA D7 C4         ld   (C4D7),a       // Instruction $1A:$5710
 RO1A:56FE AF               xor  a
 RO1A:56FF EA D3 C4         ld   (C4D3),a
 RO1A:5702 3E 04            ld   a,04
 RO1A:5704 EA D4 C4         ld   (C4D4),a
 RO1A:5707 FA D0 C4         ld   a,(C4D0)
 RO1A:570A CD 2B 2F         call 2F2B           // res 1,WRA4[$D000 + A * 16]
 RO1A:570D C3 8A 02         jp   028A
 RO1A:5710 3E 01            ld   a,01
 RO1A:5712 EA CC C4         ld   (C4CC),a
 RO1A:5715 AF               xor  a
 RO1A:5716 EA CD C4         ld   (C4CD),a
 RO1A:5719 3E 02            ld   a,02
 RO1A:571B EA CE C4         ld   (C4CE),a
 RO1A:571E AF               xor  a
 RO1A:571F EA CF C4         ld   (C4CF),a
 RO1A:5722 3E 57            ld   a,57
 RO1A:5724 EA D5 C4         ld   (C4D5),a
 RO1A:5727 3E 43            ld   a,43
 RO1A:5729 EA D6 C4         ld   (C4D6),a
 RO1A:572C 3E 1A            ld   a,1A
 RO1A:572E EA D7 C4         ld   (C4D7),a       // Instruction $1A:$5743
 RO1A:5731 AF               xor  a
 RO1A:5732 EA D3 C4         ld   (C4D3),a
 RO1A:5735 3E 02            ld   a,02
 RO1A:5737 EA D4 C4         ld   (C4D4),a
 RO1A:573A FA D0 C4         ld   a,(C4D0)
 RO1A:573D CD 2B 2F         call 2F2B           // res 1,WRA4[$D000 + A * 16]
 RO1A:5740 C3 8A 02         jp   028A
 RO1A:5743 3E 01            ld   a,01
 RO1A:5745 EA CC C4         ld   (C4CC),a
 RO1A:5748 AF               xor  a
 RO1A:5749 EA CD C4         ld   (C4CD),a
 RO1A:574C EA CE C4         ld   (C4CE),a
 RO1A:574F EA CF C4         ld   (C4CF),a
 RO1A:5752 EA D5 C4         ld   (C4D5),a
 RO1A:5755 EA D6 C4         ld   (C4D6),a
 RO1A:5758 EA D7 C4         ld   (C4D7),a
 RO1A:575B EA D3 C4         ld   (C4D3),a
 RO1A:575E 3E 50            ld   a,50
 RO1A:5760 EA D4 C4         ld   (C4D4),a
 RO1A:5763 FA D0 C4         ld   a,(C4D0)
 RO1A:5766 CD 2B 2F         call 2F2B           // res 1,WRA4[$D000 + A * 16]
 RO1A:5769 C3 8A 02         jp   028A
 RO1A:576C FA A1 C4         ld   a,(C4A1)
 RO1A:576F FE 04            cp   a,04
 RO1A:5771 38 7E            jr   c,57F1
 RO1A:5773 3E 00            ld   a,00
 RO1A:5775 E0 83            ld   (ff00+83),a
 RO1A:5777 E0 4F            ld   (ff00+4F),a
 RO1A:5779 FA A1 C4         ld   a,(C4A1)
 RO1A:577C CD 7A 45         call 457A           // B holds unit A sprite's ROM block, DE holds location of first list of pointers to sprite stats modification tables for unit A sprite, WRA4($D33C) set to unit A sprite's first pointer number, unit A sprite's group graphics tiles established starting at ($8000)
 RO1A:577F AF               xor  a
 RO1A:5780 EA D1 C4         ld   (C4D1),a
 RO1A:5783 EA D2 C4         ld   (C4D2),a
 RO1A:5786 3E FF            ld   a,FF
 RO1A:5788 EA CC C4         ld   (C4CC),a
 RO1A:578B 3E 80            ld   a,80
 RO1A:578D EA CD C4         ld   (C4CD),a
 RO1A:5790 AF               xor  a
 RO1A:5791 EA CE C4         ld   (C4CE),a
 RO1A:5794 EA CF C4         ld   (C4CF),a
 RO1A:5797 3E 56            ld   a,56
 RO1A:5799 EA D5 C4         ld   (C4D5),a
 RO1A:579C 3E 80            ld   a,80
 RO1A:579E EA D6 C4         ld   (C4D6),a
 RO1A:57A1 3E 1A            ld   a,1A
 RO1A:57A3 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$5680
 RO1A:57A6 AF               xor  a
 RO1A:57A7 EA D3 C4         ld   (C4D3),a
 RO1A:57AA 3E 76            ld   a,76
 RO1A:57AC EA D4 C4         ld   (C4D4),a
 RO1A:57AF 21 68 98         ld   hl,9868
 RO1A:57B2 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:57B6 FA A2 C4         ld   a,(C4A2)
 RO1A:57B9 FE 25            cp   a,25
 RO1A:57BB 28 02            jr   z,57BF
 RO1A:57BD 18 19            jr   57D8
 RO1A:57BF CD C7 5A         call 5AC7
 RO1A:57C2 FE 00            cp   a,00
 RO1A:57C4 28 02            jr   z,57C8
 RO1A:57C6 18 08            jr   57D0
 RO1A:57C8 3E 49            ld   a,49
 RO1A:57CA CD 44 38         call 3844
 RO1A:57CD C3 9D 58         jp   589D
 RO1A:57D0 3E 4A            ld   a,4A
 RO1A:57D2 CD 44 38         call 3844
 RO1A:57D5 C3 9D 58         jp   589D
 RO1A:57D8 CD C7 5A         call 5AC7
 RO1A:57DB FE 00            cp   a,00
 RO1A:57DD 28 02            jr   z,57E1
 RO1A:57DF 18 08            jr   57E9
 RO1A:57E1 3E 51            ld   a,51
 RO1A:57E3 CD 44 38         call 3844
 RO1A:57E6 C3 9D 58         jp   589D
 RO1A:57E9 3E 52            ld   a,52
 RO1A:57EB CD 44 38         call 3844
 RO1A:57EE C3 9D 58         jp   589D
 RO1A:57F1 FA A2 C4         ld   a,(C4A2)
 RO1A:57F4 FE 25            cp   a,25           // Transport Plane?
 RO1A:57F6 28 5B            jr   z,5853
 RO1A:57F8 FE 30            cp   a,30           // Lander?
 RO1A:57FA 28 57            jr   z,5853
 RO1A:57FC 3E 00            ld   a,00
 RO1A:57FE E0 83            ld   (ff00+83),a
 RO1A:5800 E0 4F            ld   (ff00+4F),a
 RO1A:5802 3E 0D            ld   a,0D           // Infantry
 RO1A:5804 21 00 80         ld   hl,8000
 RO1A:5807 CD D7 43         call 43D7           // Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
 RO1A:580A 3E 98            ld   a,98           // Soldier basic running (right)
 RO1A:580C EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:5810 AF               xor  a
 RO1A:5811 EA D1 C4         ld   (C4D1),a
 RO1A:5814 3E BE            ld   a,BE
 RO1A:5816 EA D2 C4         ld   (C4D2),a
 RO1A:5819 3E 01            ld   a,01
 RO1A:581B EA CC C4         ld   (C4CC),a
 RO1A:581E AF               xor  a
 RO1A:581F EA CD C4         ld   (C4CD),a
 RO1A:5822 EA CE C4         ld   (C4CE),a
 RO1A:5825 3E 80            ld   a,80
 RO1A:5827 EA CF C4         ld   (C4CF),a
 RO1A:582A 3E 56            ld   a,56
 RO1A:582C EA D5 C4         ld   (C4D5),a
 RO1A:582F 3E DD            ld   a,DD
 RO1A:5831 EA D6 C4         ld   (C4D6),a
 RO1A:5834 3E 1A            ld   a,1A
 RO1A:5836 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$56DD
 RO1A:5839 AF               xor  a
 RO1A:583A EA D3 C4         ld   (C4D3),a
 RO1A:583D 3E 08            ld   a,08
 RO1A:583F EA D4 C4         ld   (C4D4),a
 RO1A:5842 0E 00            ld   c,00
 RO1A:5844 21 5C 4A         ld   hl,4A5C
 RO1A:5847 3E 48            ld   a,48
 RO1A:5849 EA DB C4         ld   (C4DB),a
 RO1A:584C EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:5850 C3 9D 58         jp   589D
 RO1A:5853 3E 00            ld   a,00
 RO1A:5855 E0 83            ld   (ff00+83),a
 RO1A:5857 E0 4F            ld   (ff00+4F),a
 RO1A:5859 FA A1 C4         ld   a,(C4A1)
 RO1A:585C CD 7A 45         call 457A           // B holds unit A sprite's ROM block, DE holds location of first list of pointers to sprite stats modification tables for unit A sprite, WRA4($D33C) set to unit A sprite's first pointer number, unit A sprite's group graphics tiles established starting at ($8000)
 RO1A:585F AF               xor  a
 RO1A:5860 EA D1 C4         ld   (C4D1),a
 RO1A:5863 EA D2 C4         ld   (C4D2),a
 RO1A:5866 3E FF            ld   a,FF
 RO1A:5868 EA CC C4         ld   (C4CC),a
 RO1A:586B 3E 80            ld   a,80
 RO1A:586D EA CD C4         ld   (C4CD),a
 RO1A:5870 AF               xor  a
 RO1A:5871 EA CE C4         ld   (C4CE),a
 RO1A:5874 EA CF C4         ld   (C4CF),a
 RO1A:5877 3E 56            ld   a,56
 RO1A:5879 EA D5 C4         ld   (C4D5),a
 RO1A:587C 3E 80            ld   a,80
 RO1A:587E EA D6 C4         ld   (C4D6),a
 RO1A:5881 3E 1A            ld   a,1A
 RO1A:5883 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$5680
 RO1A:5886 AF               xor  a
 RO1A:5887 EA D3 C4         ld   (C4D3),a
 RO1A:588A 3E 50            ld   a,50
 RO1A:588C EA D4 C4         ld   (C4D4),a
 RO1A:588F 21 68 90         ld   hl,9068
 RO1A:5892 3E 48            ld   a,48
 RO1A:5894 EA DB C4         ld   (C4DB),a
 RO1A:5897 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:589B 18 00            jr   589D
 RO1A:589D C9               ret  
 RO1A:589E CD 34 51         call 5134           // Sets up backdrop for involved transport-related scene; also sets up unit sprite hiding for portion involving the transport for Lander/Transport Plane
 RO1A:58A1 CD AF 55         call 55AF
 RO1A:58A4 CD 6C 57         call 576C
 RO1A:58A7 11 01 00         ld   de,0001
 RO1A:58AA 01 00 00         ld   bc,0000
 RO1A:58AD EF 27 47 40                          // Carry Flag set by A, B, or Start being pressed during timer determined by DE; gradual scroll determined by BC
 RO1A:58B1 FA 86 C6         ld   a,(C686)
 RO1A:58B4 FE 00            cp   a,00
 RO1A:58B6 28 05            jr   z,58BD
 RO1A:58B8 3E 23            ld   a,23
 RO1A:58BA CD 16 38         call 3816           // Unloading jingle
 RO1A:58BD CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 RO1A:58C0 FA A2 C4         ld   a,(C4A2)
 RO1A:58C3 FE 2A            cp   a,2A
 RO1A:58C5 28 12            jr   z,58D9
 RO1A:58C7 FE 2B            cp   a,2B
 RO1A:58C9 28 0E            jr   z,58D9
 RO1A:58CB 11 68 01         ld   de,0168
 RO1A:58CE 01 00 00         ld   bc,0000
 RO1A:58D1 EF 27 47 40                          // Carry Flag set by A, B, or Start being pressed during timer determined by DE; gradual scroll determined by BC
 RO1A:58D5 38 0E            jr   c,58E5
 RO1A:58D7 18 0C            jr   58E5
 RO1A:58D9 11 3B 01         ld   de,013B
 RO1A:58DC 01 00 00         ld   bc,0000
 RO1A:58DF EF 27 47 40                          // Carry Flag set by A, B, or Start being pressed during timer determined by DE; gradual scroll determined by BC
 RO1A:58E3 38 00            jr   c,58E5
 RO1A:58E5 CD 43 38         call 3843
 RO1A:58E8 CD 15 38         call 3815
 RO1A:58EB CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 RO1A:58EE EF 17 00 40                          // Clear all sprites in $C300 table, empties ($C4C8~$C4DB), WRA4($DB2C), WRA4($DB2E) 2 byte, and WRA4($D3AC~$DB2B)
 RO1A:58F2 C9               ret  
 RO1A:58F3 CD D5 5A         call 5AD5           // A = 0 for vertical takeoff air unit, 1 otherwise
 RO1A:58F6 FE 00            cp   a,00
 RO1A:58F8 20 0B            jr   nz,5905        // Branches for STOL
 RO1A:58FA FA A0 C4         ld   a,(C4A0)
 RO1A:58FD 47               ld   b,a
 RO1A:58FE 3E 0E            ld   a,0E           // Aircraft Carrier zoomed in
 RO1A:5900 CD 5B 40         call 405B           // Handles backdrop graphics as a whole (A is Backdrop number, B is used palette set)
 RO1A:5903 18 0D            jr   5912
 RO1A:5905 3E F4            ld   a,F4
 RO1A:5907 E0 95            ld   (ff00+95),a
 RO1A:5909 FA A0 C4         ld   a,(C4A0)
 RO1A:590C 47               ld   b,a
 RO1A:590D 3E 0D            ld   a,0D           // Aircraft Carrier zoomed out
 RO1A:590F CD 5B 40         call 405B           // Handles backdrop graphics as a whole (A is Backdrop number, B is used palette set)
 RO1A:5912 C9               ret                 // Sets up backdrop for Aircraft Carrier; also defaults SCX to 244 for STOL Unloading
 RO1A:5913 CD F3 58         call 58F3           // Sets up backdrop for Aircraft Carrier; also defaults SCX to 244 for STOL Unloading
 RO1A:5916 3E 00            ld   a,00
 RO1A:5918 E0 83            ld   (ff00+83),a
 RO1A:591A E0 4F            ld   (ff00+4F),a
 RO1A:591C FA A1 C4         ld   a,(C4A1)
 RO1A:591F CD 7A 45         call 457A           // B holds unit A sprite's ROM block, DE holds location of first list of pointers to sprite stats modification tables for unit A sprite, WRA4($D33C) set to unit A sprite's first pointer number, unit A sprite's group graphics tiles established starting at ($8000)
 RO1A:5922 CD D5 5A         call 5AD5           // A = 0 for vertical takeoff air unit, 1 otherwise
 RO1A:5925 FE 00            cp   a,00
 RO1A:5927 20 05            jr   nz,592E
 RO1A:5929 CD 8F 59         call 598F
 RO1A:592C 18 03            jr   5931
 RO1A:592E CD 95 5A         call 5A95
 RO1A:5931 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:5935 FA 86 C6         ld   a,(C686)
 RO1A:5938 FE 00            cp   a,00
 RO1A:593A 28 05            jr   z,5941
 RO1A:593C 3E 23            ld   a,23
 RO1A:593E CD 16 38         call 3816           // Unloading jingle
 RO1A:5941 11 01 00         ld   de,0001
 RO1A:5944 01 00 00         ld   bc,0000
 RO1A:5947 EF 27 47 40                          // Carry Flag set by A, B, or Start being pressed during timer determined by DE; gradual scroll determined by BC
 RO1A:594B CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 RO1A:594E CD D2 04         call 04D2           // Next frame
 RO1A:5951 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO1A:5954 CD D5 5A         call 5AD5           // A = 0 for vertical takeoff air unit, 1 otherwise
 RO1A:5957 FE 00            cp   a,00
 RO1A:5959 20 0E            jr   nz,5969
 RO1A:595B 11 00 01         ld   de,0100
 RO1A:595E 01 00 00         ld   bc,0000
 RO1A:5961 EF 27 47 40                          // Carry Flag set by A, B, or Start being pressed during timer determined by DE; gradual scroll determined by BC
 RO1A:5965 38 1A            jr   c,5981
 RO1A:5967 18 18            jr   5981
 RO1A:5969 11 3C 00         ld   de,003C
 RO1A:596C 01 00 FF         ld   bc,FF00
 RO1A:596F EF 27 47 40                          // Carry Flag set by A, B, or Start being pressed during timer determined by DE; gradual scroll determined by BC
 RO1A:5973 38 0C            jr   c,5981
 RO1A:5975 11 F0 00         ld   de,00F0
 RO1A:5978 01 00 00         ld   bc,0000
 RO1A:597B EF 27 47 40                          // Carry Flag set by A, B, or Start being pressed during timer determined by DE; gradual scroll determined by BC
 RO1A:597F 38 00            jr   c,5981
 RO1A:5981 CD 43 38         call 3843
 RO1A:5984 CD 15 38         call 3815
 RO1A:5987 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 RO1A:598A EF 17 00 40                          // Clear all sprites in $C300 table, empties ($C4C8~$C4DB), WRA4($DB2C), WRA4($DB2E) 2 byte, and WRA4($D3AC~$DB2B)
 RO1A:598E C9               ret  
 RO1A:598F AF               xor  a
 RO1A:5990 EA D1 C4         ld   (C4D1),a
 RO1A:5993 EA D2 C4         ld   (C4D2),a
 RO1A:5996 EA CC C4         ld   (C4CC),a
 RO1A:5999 EA CD C4         ld   (C4CD),a
 RO1A:599C EA CE C4         ld   (C4CE),a
 RO1A:599F EA CF C4         ld   (C4CF),a
 RO1A:59A2 3E 5A            ld   a,5A
 RO1A:59A4 EA D5 C4         ld   (C4D5),a
 RO1A:59A7 3E EC            ld   a,EC
 RO1A:59A9 EA D6 C4         ld   (C4D6),a
 RO1A:59AC 3E 1A            ld   a,1A
 RO1A:59AE EA D7 C4         ld   (C4D7),a       // Instruction $1A:$5AEC
 RO1A:59B1 AF               xor  a
 RO1A:59B2 EA D3 C4         ld   (C4D3),a
 RO1A:59B5 3E 98            ld   a,98
 RO1A:59B7 EA D4 C4         ld   (C4D4),a
 RO1A:59BA 21 58 70         ld   hl,7058
 RO1A:59BD FA A1 C4         ld   a,(C4A1)
 RO1A:59C0 FE 21            cp   a,21
 RO1A:59C2 28 04            jr   z,59C8
 RO1A:59C4 3E 54            ld   a,54
 RO1A:59C6 18 01            jr   59C9
 RO1A:59C8 AF               xor  a
 RO1A:59C9 EA DB C4         ld   (C4DB),a
 RO1A:59CC C9               ret  
 RO1A:59CD AF               xor  a
 RO1A:59CE EA CC C4         ld   (C4CC),a
 RO1A:59D1 EA CD C4         ld   (C4CD),a
 RO1A:59D4 EA CE C4         ld   (C4CE),a
 RO1A:59D7 EA CF C4         ld   (C4CF),a
 RO1A:59DA 3E 5A            ld   a,5A
 RO1A:59DC EA D5 C4         ld   (C4D5),a
 RO1A:59DF 3E 0B            ld   a,0B
 RO1A:59E1 EA D6 C4         ld   (C4D6),a
 RO1A:59E4 3E 1A            ld   a,1A
 RO1A:59E6 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$5A0B
 RO1A:59E9 AF               xor  a
 RO1A:59EA EA D3 C4         ld   (C4D3),a
 RO1A:59ED 3E 3C            ld   a,3C
 RO1A:59EF EA D4 C4         ld   (C4D4),a
 RO1A:59F2 FA 3C D3         ld   a,(D33C)
 RO1A:59F5 3C               inc  a
 RO1A:59F6 EA 3C D3         ld   (D33C),a
 RO1A:59F9 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:59FD FA D0 C4         ld   a,(C4D0)
 RO1A:5A00 CD E8 2E         call 2EE8           // WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
 RO1A:5A03 3E 66            ld   a,66
 RO1A:5A05 CD 44 38         call 3844
 RO1A:5A08 C3 8A 02         jp   028A
 RO1A:5A0B AF               xor  a
 RO1A:5A0C EA CC C4         ld   (C4CC),a
 RO1A:5A0F EA CD C4         ld   (C4CD),a
 RO1A:5A12 EA CE C4         ld   (C4CE),a
 RO1A:5A15 EA CF C4         ld   (C4CF),a
 RO1A:5A18 3E 5A            ld   a,5A
 RO1A:5A1A EA D5 C4         ld   (C4D5),a
 RO1A:5A1D 3E 44            ld   a,44
 RO1A:5A1F EA D6 C4         ld   (C4D6),a
 RO1A:5A22 3E 1A            ld   a,1A
 RO1A:5A24 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$5A44
 RO1A:5A27 AF               xor  a
 RO1A:5A28 EA D3 C4         ld   (C4D3),a
 RO1A:5A2B 3E 3C            ld   a,3C
 RO1A:5A2D EA D4 C4         ld   (C4D4),a
 RO1A:5A30 FA 3C D3         ld   a,(D33C)
 RO1A:5A33 3C               inc  a
 RO1A:5A34 EA 3C D3         ld   (D33C),a
 RO1A:5A37 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:5A3B FA D0 C4         ld   a,(C4D0)
 RO1A:5A3E CD E8 2E         call 2EE8           // WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
 RO1A:5A41 C3 8A 02         jp   028A
 RO1A:5A44 3E FD            ld   a,FD
 RO1A:5A46 EA CC C4         ld   (C4CC),a
 RO1A:5A49 AF               xor  a
 RO1A:5A4A EA CE C4         ld   (C4CE),a
 RO1A:5A4D EA CF C4         ld   (C4CF),a
 RO1A:5A50 3E 5A            ld   a,5A
 RO1A:5A52 EA D5 C4         ld   (C4D5),a
 RO1A:5A55 3E 70            ld   a,70
 RO1A:5A57 EA D6 C4         ld   (C4D6),a
 RO1A:5A5A 3E 1A            ld   a,1A
 RO1A:5A5C EA D7 C4         ld   (C4D7),a       // Instruction $1A:$5A70
 RO1A:5A5F AF               xor  a
 RO1A:5A60 EA D3 C4         ld   (C4D3),a
 RO1A:5A63 3E 0F            ld   a,0F
 RO1A:5A65 EA D4 C4         ld   (C4D4),a
 RO1A:5A68 3E 46            ld   a,46
 RO1A:5A6A CD 44 38         call 3844
 RO1A:5A6D C3 8A 02         jp   028A
 RO1A:5A70 3E FD            ld   a,FD
 RO1A:5A72 EA CC C4         ld   (C4CC),a
 RO1A:5A75 3E FF            ld   a,FF
 RO1A:5A77 EA CE C4         ld   (C4CE),a
 RO1A:5A7A 3E 80            ld   a,80
 RO1A:5A7C EA CF C4         ld   (C4CF),a
 RO1A:5A7F AF               xor  a
 RO1A:5A80 EA D5 C4         ld   (C4D5),a
 RO1A:5A83 EA D6 C4         ld   (C4D6),a
 RO1A:5A86 EA D7 C4         ld   (C4D7),a
 RO1A:5A89 AF               xor  a
 RO1A:5A8A EA D3 C4         ld   (C4D3),a
 RO1A:5A8D 3E 28            ld   a,28
 RO1A:5A8F EA D4 C4         ld   (C4D4),a
 RO1A:5A92 C3 8A 02         jp   028A
 RO1A:5A95 AF               xor  a
 RO1A:5A96 EA D1 C4         ld   (C4D1),a
 RO1A:5A99 EA D2 C4         ld   (C4D2),a
 RO1A:5A9C 3E 01            ld   a,01
 RO1A:5A9E EA CC C4         ld   (C4CC),a
 RO1A:5AA1 AF               xor  a
 RO1A:5AA2 EA CD C4         ld   (C4CD),a
 RO1A:5AA5 EA CE C4         ld   (C4CE),a
 RO1A:5AA8 EA CF C4         ld   (C4CF),a
 RO1A:5AAB 3E 59            ld   a,59
 RO1A:5AAD EA D5 C4         ld   (C4D5),a
 RO1A:5AB0 3E CD            ld   a,CD
 RO1A:5AB2 EA D6 C4         ld   (C4D6),a
 RO1A:5AB5 3E 1A            ld   a,1A
 RO1A:5AB7 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$59CD
 RO1A:5ABA AF               xor  a
 RO1A:5ABB EA D3 C4         ld   (C4D3),a
 RO1A:5ABE 3E 3C            ld   a,3C
 RO1A:5AC0 EA D4 C4         ld   (C4D4),a
 RO1A:5AC3 21 58 54         ld   hl,5458
 RO1A:5AC6 C9               ret  
 RO1A:5AC7 FA A1 C4         ld   a,(C4A1)
 RO1A:5ACA FE 0F            cp   a,0F
 RO1A:5ACC 38 02            jr   c,5AD0
 RO1A:5ACE 18 02            jr   5AD2
 RO1A:5AD0 AF               xor  a
 RO1A:5AD1 C9               ret  
 RO1A:5AD2 3E 01            ld   a,01
 RO1A:5AD4 C9               ret  
 RO1A:5AD5 FA A1 C4         ld   a,(C4A1)       // A = 0 for vertical takeoff air unit, 1 otherwise
 RO1A:5AD8 FE 21            cp   a,21
 RO1A:5ADA 38 0B            jr   c,5AE7
 RO1A:5ADC 28 06            jr   z,5AE4         // Lite Attacker ends with A = 0
 RO1A:5ADE FE 27            cp   a,27
 RO1A:5AE0 38 05            jr   c,5AE7
 RO1A:5AE2 18 00            jr   5AE4
 RO1A:5AE4 AF               xor  a
 RO1A:5AE5 18 04            jr   5AEB
 RO1A:5AE7 3E 01            ld   a,01
 RO1A:5AE9 18 00            jr   5AEB
 RO1A:5AEB C9               ret                 // A = 0 for vertical takeoff air unit, 1 otherwise
 RO1A:5AEC AF               xor  a
 RO1A:5AED EA CC C4         ld   (C4CC),a
 RO1A:5AF0 3E FF            ld   a,FF
 RO1A:5AF2 EA CE C4         ld   (C4CE),a
 RO1A:5AF5 3E 80            ld   a,80
 RO1A:5AF7 EA CF C4         ld   (C4CF),a
 RO1A:5AFA 3E 5B            ld   a,5B
 RO1A:5AFC EA D5 C4         ld   (C4D5),a
 RO1A:5AFF 3E 32            ld   a,32
 RO1A:5B01 EA D6 C4         ld   (C4D6),a
 RO1A:5B04 3E 1A            ld   a,1A
 RO1A:5B06 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$5B32
 RO1A:5B09 AF               xor  a
 RO1A:5B0A EA D3 C4         ld   (C4D3),a
 RO1A:5B0D 3E 1E            ld   a,1E
 RO1A:5B0F EA D4 C4         ld   (C4D4),a
 RO1A:5B12 FA 3C D3         ld   a,(D33C)
 RO1A:5B15 3C               inc  a
 RO1A:5B16 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:5B1A FA D0 C4         ld   a,(C4D0)
 RO1A:5B1D CD E8 2E         call 2EE8           // WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
 RO1A:5B20 FA A1 C4         ld   a,(C4A1)
 RO1A:5B23 FE 21            cp   a,21
 RO1A:5B25 28 03            jr   z,5B2A
 RO1A:5B27 AF               xor  a
 RO1A:5B28 18 02            jr   5B2C
 RO1A:5B2A 3E 46            ld   a,46
 RO1A:5B2C EA DB C4         ld   (C4DB),a
 RO1A:5B2F C3 8A 02         jp   028A
 RO1A:5B32 AF               xor  a
 RO1A:5B33 EA CC C4         ld   (C4CC),a
 RO1A:5B36 3E FF            ld   a,FF
 RO1A:5B38 EA CE C4         ld   (C4CE),a
 RO1A:5B3B AF               xor  a
 RO1A:5B3C EA CF C4         ld   (C4CF),a
 RO1A:5B3F 3E 5B            ld   a,5B
 RO1A:5B41 EA D5 C4         ld   (C4D5),a
 RO1A:5B44 3E 5A            ld   a,5A
 RO1A:5B46 EA D6 C4         ld   (C4D6),a
 RO1A:5B49 3E 1A            ld   a,1A
 RO1A:5B4B EA D7 C4         ld   (C4D7),a       // Instruction $1A:$5B5A
 RO1A:5B4E AF               xor  a
 RO1A:5B4F EA D3 C4         ld   (C4D3),a
 RO1A:5B52 3E 08            ld   a,08
 RO1A:5B54 EA D4 C4         ld   (C4D4),a
 RO1A:5B57 C3 8A 02         jp   028A
 RO1A:5B5A AF               xor  a
 RO1A:5B5B EA CC C4         ld   (C4CC),a
 RO1A:5B5E 3E FE            ld   a,FE
 RO1A:5B60 EA CE C4         ld   (C4CE),a
 RO1A:5B63 AF               xor  a
 RO1A:5B64 EA D5 C4         ld   (C4D5),a
 RO1A:5B67 EA D6 C4         ld   (C4D6),a
 RO1A:5B6A EA D7 C4         ld   (C4D7),a
 RO1A:5B6D EA D3 C4         ld   (C4D3),a
 RO1A:5B70 3E 42            ld   a,42
 RO1A:5B72 EA D4 C4         ld   (C4D4),a
 RO1A:5B75 C3 8A 02         jp   028A
 RO1A:5B78 AF               xor  a
 RO1A:5B79 EA D1 C4         ld   (C4D1),a
 RO1A:5B7C EA D2 C4         ld   (C4D2),a
 RO1A:5B7F EA CC C4         ld   (C4CC),a
 RO1A:5B82 EA CD C4         ld   (C4CD),a
 RO1A:5B85 3E 01            ld   a,01
 RO1A:5B87 EA CE C4         ld   (C4CE),a
 RO1A:5B8A AF               xor  a
 RO1A:5B8B EA CF C4         ld   (C4CF),a       // Down 1 pixel/frame
 RO1A:5B8E 3E 5B            ld   a,5B
 RO1A:5B90 EA D5 C4         ld   (C4D5),a
 RO1A:5B93 3E BA            ld   a,BA
 RO1A:5B95 EA D6 C4         ld   (C4D6),a
 RO1A:5B98 3E 1A            ld   a,1A
 RO1A:5B9A EA D7 C4         ld   (C4D7),a       // Instruction $1A:$5BBA (shifting set to down 0.5 pixels/frame for 50 frames, also changes animation stage default for helicopter)
 RO1A:5B9D AF               xor  a
 RO1A:5B9E EA D3 C4         ld   (C4D3),a
 RO1A:5BA1 3E 35            ld   a,35
 RO1A:5BA3 EA D4 C4         ld   (C4D4),a
 RO1A:5BA6 21 00 70         ld   hl,7000        // 112, 0
 RO1A:5BA9 FA A1 C4         ld   a,(C4A1)
 RO1A:5BAC FE 21            cp   a,21
 RO1A:5BAE 28 04            jr   z,5BB4
 RO1A:5BB0 3E 4B            ld   a,4B
 RO1A:5BB2 18 02            jr   5BB6
 RO1A:5BB4 3E 58            ld   a,58
 RO1A:5BB6 EA DB C4         ld   (C4DB),a       // Sets up designated engine sound
 RO1A:5BB9 C9               ret                 // Helicopter/Lite Attacker landing process animation set up--lasts a total of 333 frames (53 from the initial instruction, then an additional 280 from the subprocedures)
 RO1A:5BBA AF               xor  a
 RO1A:5BBB EA CC C4         ld   (C4CC),a
 RO1A:5BBE EA CD C4         ld   (C4CD),a
 RO1A:5BC1 EA CE C4         ld   (C4CE),a
 RO1A:5BC4 3E 80            ld   a,80
 RO1A:5BC6 EA CF C4         ld   (C4CF),a       // Down 0.5 pixels/frame
 RO1A:5BC9 3E 5B            ld   a,5B
 RO1A:5BCB EA D5 C4         ld   (C4D5),a
 RO1A:5BCE 3E FC            ld   a,FC
 RO1A:5BD0 EA D6 C4         ld   (C4D6),a
 RO1A:5BD3 3E 1A            ld   a,1A
 RO1A:5BD5 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$5BFC (shifting set to down 0.25 pixels/frame for 48 frames)
 RO1A:5BD8 AF               xor  a
 RO1A:5BD9 EA D3 C4         ld   (C4D3),a
 RO1A:5BDC 3E 32            ld   a,32
 RO1A:5BDE EA D4 C4         ld   (C4D4),a
 RO1A:5BE1 FA A1 C4         ld   a,(C4A1)
 RO1A:5BE4 FE 21            cp   a,21
 RO1A:5BE6 28 11            jr   z,5BF9
 RO1A:5BE8 FA 3C D3         ld   a,(D33C)
 RO1A:5BEB 3C               inc  a
 RO1A:5BEC EA 3C D3         ld   (D33C),a       // Now (most likely) standard flying
 RO1A:5BEF EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:5BF3 FA D0 C4         ld   a,(C4D0)
 RO1A:5BF6 CD E8 2E         call 2EE8           // WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
 RO1A:5BF9 C3 8A 02         jp   028A           // Animation instruction: shifting set to down 0.5 pixels/frame for 50 frames, also changes animation stage default for helicopter
 RO1A:5BFC AF               xor  a
 RO1A:5BFD EA CC C4         ld   (C4CC),a
 RO1A:5C00 EA CD C4         ld   (C4CD),a
 RO1A:5C03 EA CE C4         ld   (C4CE),a
 RO1A:5C06 3E 40            ld   a,40
 RO1A:5C08 EA CF C4         ld   (C4CF),a       // Down 0.25 pixels/frame
 RO1A:5C0B 3E 5C            ld   a,5C
 RO1A:5C0D EA D5 C4         ld   (C4D5),a
 RO1A:5C10 3E 26            ld   a,26
 RO1A:5C12 EA D6 C4         ld   (C4D6),a
 RO1A:5C15 3E 1A            ld   a,1A
 RO1A:5C17 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$5C26 (Animation instruction: shifting ended, animation deceleration for 152 frames)
 RO1A:5C1A AF               xor  a
 RO1A:5C1B EA D3 C4         ld   (C4D3),a
 RO1A:5C1E 3E 30            ld   a,30
 RO1A:5C20 EA D4 C4         ld   (C4D4),a
 RO1A:5C23 C3 8A 02         jp   028A           // Animation instruction: shifting set to down 0.25 pixels/frame for 48 frames
 RO1A:5C26 AF               xor  a
 RO1A:5C27 EA CC C4         ld   (C4CC),a
 RO1A:5C2A EA CD C4         ld   (C4CD),a
 RO1A:5C2D EA CE C4         ld   (C4CE),a
 RO1A:5C30 EA CF C4         ld   (C4CF),a       // No more movement
 RO1A:5C33 3E 5C            ld   a,5C
 RO1A:5C35 EA D5 C4         ld   (C4D5),a
 RO1A:5C38 3E 77            ld   a,77
 RO1A:5C3A EA D6 C4         ld   (C4D6),a
 RO1A:5C3D 3E 1A            ld   a,1A
 RO1A:5C3F EA D7 C4         ld   (C4D7),a       // Instruction $1A:$5C77 (sprite clear-up after 30 frames)
 RO1A:5C42 AF               xor  a
 RO1A:5C43 EA D3 C4         ld   (C4D3),a
 RO1A:5C46 3E 98            ld   a,98
 RO1A:5C48 EA D4 C4         ld   (C4D4),a
 RO1A:5C4B FA A1 C4         ld   a,(C4A1)
 RO1A:5C4E FE 21            cp   a,21           // Lite Attacker?
 RO1A:5C50 28 13            jr   z,5C65
 RO1A:5C52 FA 3C D3         ld   a,(D33C)
 RO1A:5C55 3C               inc  a
 RO1A:5C56 EA 3C D3         ld   (D33C),a       // Now (most likely) landing deceleration
 RO1A:5C59 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:5C5D FA D0 C4         ld   a,(C4D0)
 RO1A:5C60 CD E8 2E         call 2EE8           // WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
 RO1A:5C63 18 0F            jr   5C74
 RO1A:5C65 3E 16            ld   a,16           // Lite Attacker not using retro/liftoff rockets
 RO1A:5C67 EA 3C D3         ld   (D33C),a
 RO1A:5C6A EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:5C6E FA D0 C4         ld   a,(C4D0)
 RO1A:5C71 CD E8 2E         call 2EE8           // WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
 RO1A:5C74 C3 8A 02         jp   028A           // Animation instruction: shifting ended, animation deceleration for 152 frames
 RO1A:5C77 AF               xor  a
 RO1A:5C78 EA CC C4         ld   (C4CC),a
 RO1A:5C7B EA CD C4         ld   (C4CD),a
 RO1A:5C7E EA CE C4         ld   (C4CE),a
 RO1A:5C81 EA CF C4         ld   (C4CF),a
 RO1A:5C84 EA D5 C4         ld   (C4D5),a
 RO1A:5C87 EA D6 C4         ld   (C4D6),a
 RO1A:5C8A EA D7 C4         ld   (C4D7),a
 RO1A:5C8D AF               xor  a
 RO1A:5C8E EA D3 C4         ld   (C4D3),a
 RO1A:5C91 3E 1E            ld   a,1E
 RO1A:5C93 EA D4 C4         ld   (C4D4),a
 RO1A:5C96 C3 8A 02         jp   028A           // Animation instruction: sprite clear-up after 30 frames
 RO1A:5C99 3E 60            ld   a,60
 RO1A:5C9B E0 95            ld   (ff00+95),a
 RO1A:5C9D AF               xor  a
 RO1A:5C9E EA D1 C4         ld   (C4D1),a
 RO1A:5CA1 EA D2 C4         ld   (C4D2),a
 RO1A:5CA4 3E FF            ld   a,FF
 RO1A:5CA6 EA CC C4         ld   (C4CC),a
 RO1A:5CA9 3E 00            ld   a,00
 RO1A:5CAB EA CD C4         ld   (C4CD),a       // Left 1 pixel/frame
 RO1A:5CAE AF               xor  a
 RO1A:5CAF EA CE C4         ld   (C4CE),a
 RO1A:5CB2 3E 28            ld   a,28
 RO1A:5CB4 EA CF C4         ld   (C4CF),a       // Down 0.140625 pixels/frame
 RO1A:5CB7 3E 5C            ld   a,5C
 RO1A:5CB9 EA D5 C4         ld   (C4D5),a
 RO1A:5CBC 3E D8            ld   a,D8
 RO1A:5CBE EA D6 C4         ld   (C4D6),a
 RO1A:5CC1 3E 1A            ld   a,1A
 RO1A:5CC3 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$5CD8 (shifting set to left 0 pixel/frame, down 0.140625 pixels/frame for 80 frames)
 RO1A:5CC6 AF               xor  a
 RO1A:5CC7 EA D3 C4         ld   (C4D3),a
 RO1A:5CCA 3E 14            ld   a,14
 RO1A:5CCC EA D4 C4         ld   (C4D4),a       // 20 frames
 RO1A:5CCF 21 4A A0         ld   hl,A04A        // 168, 74
 RO1A:5CD2 3E 58            ld   a,58
 RO1A:5CD4 EA DB C4         ld   (C4DB),a       // Engine sound
 RO1A:5CD7 C9               ret                 // STOL jet plane landing process animation set up--lasts a total of 230 frames (20 from the initial instruction, then an additional 210 from the subprocedures)
 RO1A:5CD8 AF               xor  a
 RO1A:5CD9 EA CC C4         ld   (C4CC),a
 RO1A:5CDC EA CD C4         ld   (C4CD),a       // Left 0 pixels/frame
 RO1A:5CDF AF               xor  a
 RO1A:5CE0 EA CE C4         ld   (C4CE),a
 RO1A:5CE3 3E 24            ld   a,24
 RO1A:5CE5 EA CF C4         ld   (C4CF),a       // Down 0.140625 pixels/frame
 RO1A:5CE8 3E 5D            ld   a,5D
 RO1A:5CEA EA D5 C4         ld   (C4D5),a
 RO1A:5CED 3E 03            ld   a,03
 RO1A:5CEF EA D6 C4         ld   (C4D6),a
 RO1A:5CF2 3E 1A            ld   a,1A
 RO1A:5CF4 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$5D03 (shifting set to left 1 pixel/frame, down 0 pixels/frame for 40 frames)
 RO1A:5CF7 AF               xor  a
 RO1A:5CF8 EA D3 C4         ld   (C4D3),a
 RO1A:5CFB 3E 50            ld   a,50
 RO1A:5CFD EA D4 C4         ld   (C4D4),a
 RO1A:5D00 C3 8A 02         jp   028A           // Animation instruction: shifting set to left 0 pixel/frame, down 0.140625 pixels/frame for 80 frames
 RO1A:5D03 3E FF            ld   a,FF
 RO1A:5D05 EA CC C4         ld   (C4CC),a
 RO1A:5D08 3E 00            ld   a,00
 RO1A:5D0A EA CD C4         ld   (C4CD),a       // Left 1 pixel/frame
 RO1A:5D0D AF               xor  a
 RO1A:5D0E EA CE C4         ld   (C4CE),a
 RO1A:5D11 EA CF C4         ld   (C4CF),a
 RO1A:5D14 3E 5D            ld   a,5D
 RO1A:5D16 EA D5 C4         ld   (C4D5),a
 RO1A:5D19 3E 2F            ld   a,2F
 RO1A:5D1B EA D6 C4         ld   (C4D6),a
 RO1A:5D1E 3E 1A            ld   a,1A
 RO1A:5D20 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$5D2F (shifting set to left 0.5 pixels/frame for 30 frames)
 RO1A:5D23 AF               xor  a
 RO1A:5D24 EA D3 C4         ld   (C4D3),a
 RO1A:5D27 3E 28            ld   a,28
 RO1A:5D29 EA D4 C4         ld   (C4D4),a
 RO1A:5D2C C3 8A 02         jp   028A           // Animation instruction: shifting set to left 1 pixel/frame, down 0 pixels/frame for 40 frames
 RO1A:5D2F 3E FF            ld   a,FF
 RO1A:5D31 EA CC C4         ld   (C4CC),a
 RO1A:5D34 3E 80            ld   a,80
 RO1A:5D36 EA CD C4         ld   (C4CD),a       // Left 0.5 pixels/frame
 RO1A:5D39 3E 5D            ld   a,5D
 RO1A:5D3B EA D5 C4         ld   (C4D5),a
 RO1A:5D3E 3E 54            ld   a,54
 RO1A:5D40 EA D6 C4         ld   (C4D6),a
 RO1A:5D43 3E 1A            ld   a,1A
 RO1A:5D45 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$5D54 (shifting set to left 0.25 pixels/frame for 30 frames)
 RO1A:5D48 AF               xor  a
 RO1A:5D49 EA D3 C4         ld   (C4D3),a
 RO1A:5D4C 3E 1E            ld   a,1E
 RO1A:5D4E EA D4 C4         ld   (C4D4),a
 RO1A:5D51 C3 8A 02         jp   028A           // Animation instruction: shifting set to left 0.5 pixels/frame for 30 frames
 RO1A:5D54 AF               xor  a
 RO1A:5D55 3E FF            ld   a,FF
 RO1A:5D57 EA CC C4         ld   (C4CC),a
 RO1A:5D5A 3E C0            ld   a,C0
 RO1A:5D5C EA CD C4         ld   (C4CD),a       // Left 0.25 pixels/frame
 RO1A:5D5F 3E 5D            ld   a,5D
 RO1A:5D61 EA D5 C4         ld   (C4D5),a
 RO1A:5D64 3E 7A            ld   a,7A
 RO1A:5D66 EA D6 C4         ld   (C4D6),a
 RO1A:5D69 3E 1A            ld   a,1A
 RO1A:5D6B EA D7 C4         ld   (C4D7),a       // Instruction $1A:$5D7A (sprite clear-up after 30 frames, shifting also ended)
 RO1A:5D6E AF               xor  a
 RO1A:5D6F EA D3 C4         ld   (C4D3),a
 RO1A:5D72 3E 1E            ld   a,1E
 RO1A:5D74 EA D4 C4         ld   (C4D4),a
 RO1A:5D77 C3 8A 02         jp   028A           // Animation instruction: shifting set to left 0.25 pixels/frame for 30 frames
 RO1A:5D7A AF               xor  a
 RO1A:5D7B EA CC C4         ld   (C4CC),a
 RO1A:5D7E EA CD C4         ld   (C4CD),a
 RO1A:5D81 EA CE C4         ld   (C4CE),a
 RO1A:5D84 EA CF C4         ld   (C4CF),a
 RO1A:5D87 EA D5 C4         ld   (C4D5),a
 RO1A:5D8A EA D6 C4         ld   (C4D6),a
 RO1A:5D8D EA D7 C4         ld   (C4D7),a
 RO1A:5D90 AF               xor  a
 RO1A:5D91 EA D3 C4         ld   (C4D3),a
 RO1A:5D94 3E 1E            ld   a,1E
 RO1A:5D96 EA D4 C4         ld   (C4D4),a
 RO1A:5D99 C3 8A 02         jp   028A           // Animation instruction: sprite clear-up after 30 frames, also ending shifting
 RO1A:5D9C AF               xor  a
 RO1A:5D9D EA CC C4         ld   (C4CC),a
 RO1A:5DA0 3E 20            ld   a,20
 RO1A:5DA2 EA CD C4         ld   (C4CD),a
 RO1A:5DA5 AF               xor  a
 RO1A:5DA6 EA CE C4         ld   (C4CE),a
 RO1A:5DA9 EA CF C4         ld   (C4CF),a
 RO1A:5DAC 3E 5D            ld   a,5D
 RO1A:5DAE EA D5 C4         ld   (C4D5),a
 RO1A:5DB1 3E C7            ld   a,C7
 RO1A:5DB3 EA D6 C4         ld   (C4D6),a
 RO1A:5DB6 3E 1A            ld   a,1A
 RO1A:5DB8 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$5DC7
 RO1A:5DBB AF               xor  a
 RO1A:5DBC EA D3 C4         ld   (C4D3),a
 RO1A:5DBF 3E 1E            ld   a,1E
 RO1A:5DC1 EA D4 C4         ld   (C4D4),a
 RO1A:5DC4 C3 8A 02         jp   028A
 RO1A:5DC7 AF               xor  a
 RO1A:5DC8 EA CC C4         ld   (C4CC),a
 RO1A:5DCB EA CD C4         ld   (C4CD),a
 RO1A:5DCE EA CE C4         ld   (C4CE),a
 RO1A:5DD1 EA CF C4         ld   (C4CF),a
 RO1A:5DD4 EA D5 C4         ld   (C4D5),a
 RO1A:5DD7 EA D6 C4         ld   (C4D6),a
 RO1A:5DDA EA D7 C4         ld   (C4D7),a
 RO1A:5DDD EA D3 C4         ld   (C4D3),a
 RO1A:5DE0 3E 3C            ld   a,3C
 RO1A:5DE2 EA D4 C4         ld   (C4D4),a
 RO1A:5DE5 C3 8A 02         jp   028A
 RO1A:5DE8 11 1E 00         ld   de,001E
 RO1A:5DEB 01 00 00         ld   bc,0000
 RO1A:5DEE EF 27 47 40                          // Carry Flag set by A, B, or Start being pressed within 30 frames; no gradual scroll
 RO1A:5DF2 38 7F            jr   c,5E73         // Ends entire Load animation prematurely if A, B, or Start was pressed within 30 frames
 RO1A:5DF4 CD F3 58         call 58F3           // Sets up backdrop for Aircraft Carrier
 RO1A:5DF7 3E 00            ld   a,00
 RO1A:5DF9 E0 83            ld   (ff00+83),a
 RO1A:5DFB E0 4F            ld   (ff00+4F),a
 RO1A:5DFD FA A1 C4         ld   a,(C4A1)       // Child unit
 RO1A:5E00 CD 7A 45         call 457A           // B holds unit A sprite's ROM block, DE holds location of first list of pointers to sprite stats modification tables for unit A sprite, WRA4($D33C) set to unit A sprite's first pointer number, unit A sprite's group graphics tiles established starting at ($8000)
 RO1A:5E03 CD D5 5A         call 5AD5           // A = 0 for vertical takeoff air unit, 1 otherwise
 RO1A:5E06 FE 00            cp   a,00
 RO1A:5E08 20 0D            jr   nz,5E17        // Jumps for STOL
 RO1A:5E0A FA 3C D3         ld   a,(D33C)
 RO1A:5E0D 3C               inc  a              // Standard flying
 RO1A:5E0E EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:5E12 CD 78 5B         call 5B78           // Helicopter/Lite Attacker landing process animation set up--lasts a total of 333 frames (53 from the initial instruction, then an additional 280 from the subprocedures)
 RO1A:5E15 18 0A            jr   5E21
 RO1A:5E17 FA 3C D3         ld   a,(D33C)
 RO1A:5E1A EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:5E1E CD 99 5C         call 5C99           // STOL jet plane landing process animation set up--lasts a total of 230 frames (20 from the initial instruction, then an additional 210 from the subprocedures)
 RO1A:5E21 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:5E25 FA 86 C6         ld   a,(C686)
 RO1A:5E28 FE 00            cp   a,00
 RO1A:5E2A 28 05            jr   z,5E31
 RO1A:5E2C 3E 24            ld   a,24
 RO1A:5E2E CD 16 38         call 3816           // Loading jingle
 RO1A:5E31 CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 RO1A:5E34 CD D2 04         call 04D2           // Next frame
 RO1A:5E37 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO1A:5E3A CD D5 5A         call 5AD5           // A = 0 for vertical takeoff air unit, 1 otherwise
 RO1A:5E3D FE 00            cp   a,00
 RO1A:5E3F 20 0E            jr   nz,5E4F        // Jumps for STOL plane
 RO1A:5E41 11 1D 01         ld   de,011D
 RO1A:5E44 01 00 00         ld   bc,0000
 RO1A:5E47 EF 27 47 40                          // Carry Flag set by A, B, or Start being pressed within 285 frames; no gradual scroll
 RO1A:5E4B 38 26            jr   c,5E73
 RO1A:5E4D 18 24            jr   5E73           // Jumps to ending for VTOL air unit
 RO1A:5E4F 11 14 00         ld   de,0014
 RO1A:5E52 01 00 00         ld   bc,0000
 RO1A:5E55 EF 27 47 40                          // Carry Flag set by A, B, or Start being pressed within 20 frames; no gradual scroll
 RO1A:5E59 38 18            jr   c,5E73
 RO1A:5E5B 11 50 00         ld   de,0050
 RO1A:5E5E 01 00 FF         ld   bc,FF00
 RO1A:5E61 EF 27 47 40                          // Carry Flag set by A, B, or Start being pressed within 80 frames; gradual scroll left 1 pixel/frame
 RO1A:5E65 38 0C            jr   c,5E73
 RO1A:5E67 11 82 00         ld   de,0082
 RO1A:5E6A 01 00 00         ld   bc,0000
 RO1A:5E6D EF 27 47 40                          // Carry Flag set by A, B, or Start being pressed within 130 frames; no gradual scroll
 RO1A:5E71 38 00            jr   c,5E73
 RO1A:5E73 CD 43 38         call 3843
 RO1A:5E76 CD 15 38         call 3815
 RO1A:5E79 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 RO1A:5E7C EF 17 00 40                          // Clear all sprites in $C300 table, empties ($C4C8~$C4DB), WRA4($DB2C), WRA4($DB2E) 2 byte, and WRA4($D3AC~$DB2B)
 RO1A:5E80 C9               ret                 // Loading on Aircraft Carrier animation plays out for up to 4 seconds for VTOL air unit, or 5 seconds for STOL air unit
 RO1A:5E81 FA A1 C4         ld   a,(C4A1)
 RO1A:5E84 FE 1D            cp   a,1D
 RO1A:5E86 38 06            jr   c,5E8E
 RO1A:5E88 FE 2C            cp   a,2C
 RO1A:5E8A 38 04            jr   c,5E90
 RO1A:5E8C 18 05            jr   5E93
 RO1A:5E8E AF               xor  a
 RO1A:5E8F C9               ret  
 RO1A:5E90 3E 01            ld   a,01
 RO1A:5E92 C9               ret  
 RO1A:5E93 3E 02            ld   a,02
 RO1A:5E95 C9               ret                 // A = 0 for land unit supplier, 1 for air unit supplier, 2 for sea unit supplier
 RO1A:5E96 FA A0 C4         ld   a,(C4A0)
 RO1A:5E99 47               ld   b,a
 RO1A:5E9A 3E 0F            ld   a,0F           // Communication Tower (summoning)
 RO1A:5E9C CD 5B 40         call 405B           // Handles backdrop graphics as a whole (A is Backdrop number, B is used palette set)
 RO1A:5E9F EF 17 00 40                          // Clear all sprites in $C300 table, empties ($C4C8~$C4DB), WRA4($DB2C), WRA4($DB2E) 2 byte, and WRA4($D3AC~$DB2B)
 RO1A:5EA3 3E 00            ld   a,00
 RO1A:5EA5 E0 83            ld   (ff00+83),a
 RO1A:5EA7 E0 4F            ld   (ff00+4F),a
 RO1A:5EA9 3E 0D            ld   a,0D           // Infantry
 RO1A:5EAB 21 00 80         ld   hl,8000
 RO1A:5EAE CD D7 43         call 43D7           // Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
 RO1A:5EB1 3E 93            ld   a,93           // Soldier basic running (left)
 RO1A:5EB3 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:5EB7 3E FF            ld   a,FF
 RO1A:5EB9 EA CC C4         ld   (C4CC),a
 RO1A:5EBC 3E 00            ld   a,00
 RO1A:5EBE EA CE C4         ld   (C4CE),a       // -1, 0
 RO1A:5EC1 AF               xor  a
 RO1A:5EC2 EA D1 C4         ld   (C4D1),a
 RO1A:5EC5 3E 20            ld   a,20
 RO1A:5EC7 EA D2 C4         ld   (C4D2),a       // 32 frames
 RO1A:5ECA AF               xor  a
 RO1A:5ECB EA D3 C4         ld   (C4D3),a
 RO1A:5ECE 3E 48            ld   a,48
 RO1A:5ED0 EA D3 C4         ld   (C4D3),a       // Supposed to be 72 frames, not 18432 frames
 RO1A:5ED3 AF               xor  a
 RO1A:5ED4 EA D5 C4         ld   (C4D5),a
 RO1A:5ED7 EA D6 C4         ld   (C4D6),a
 RO1A:5EDA EA D7 C4         ld   (C4D7),a
 RO1A:5EDD 0E 00            ld   c,00
 RO1A:5EDF 21 66 A0         ld   hl,A066        // 152, 86
 RO1A:5EE2 3E 3A            ld   a,3A
 RO1A:5EE4 EA DB C4         ld   (C4DB),a
 RO1A:5EE7 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:5EEB FA 86 C6         ld   a,(C686)
 RO1A:5EEE FE 00            cp   a,00
 RO1A:5EF0 28 05            jr   z,5EF7
 RO1A:5EF2 3E 27            ld   a,27
 RO1A:5EF4 CD 16 38         call 3816           // Summon jingle
 RO1A:5EF7 CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 RO1A:5EFA 11 68 00         ld   de,0068
 RO1A:5EFD 01 00 00         ld   bc,0000
 RO1A:5F00 EF 27 86 40                          // Handles all sprite advanced behavior for 104 frames, with sprites needing to spawn first
 RO1A:5F04 EF 17 00 40                          // Clear all sprites in $C300 table, empties ($C4C8~$C4DB), WRA4($DB2C), WRA4($DB2E) 2 byte, and WRA4($D3AC~$DB2B)
 RO1A:5F08 3E 00            ld   a,00
 RO1A:5F0A E0 83            ld   (ff00+83),a
 RO1A:5F0C E0 4F            ld   (ff00+4F),a
 RO1A:5F0E 3E 0E            ld   a,0E
 RO1A:5F10 21 00 80         ld   hl,8000
 RO1A:5F13 CD D7 43         call 43D7           // Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
 RO1A:5F16 3E 9F            ld   a,9F           // Electricity from Communication Tower signal
 RO1A:5F18 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:5F1C 3E 00            ld   a,00
 RO1A:5F1E E0 83            ld   (ff00+83),a
 RO1A:5F20 E0 4F            ld   (ff00+4F),a
 RO1A:5F22 AF               xor  a
 RO1A:5F23 EA CC C4         ld   (C4CC),a
 RO1A:5F26 EA CE C4         ld   (C4CE),a
 RO1A:5F29 EA D1 C4         ld   (C4D1),a
 RO1A:5F2C EA D2 C4         ld   (C4D2),a
 RO1A:5F2F EA D3 C4         ld   (C4D3),a
 RO1A:5F32 3E 38            ld   a,38
 RO1A:5F34 EA D4 C4         ld   (C4D4),a       // 56 frames
 RO1A:5F37 0E 00            ld   c,00
 RO1A:5F39 21 38 50         ld   hl,5038
 RO1A:5F3C 3E 5C            ld   a,5C
 RO1A:5F3E EA DB C4         ld   (C4DB),a
 RO1A:5F41 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:5F45 11 60 00         ld   de,0060
 RO1A:5F48 01 00 00         ld   bc,0000
 RO1A:5F4B EF 27 86 40                          // Handles all sprite advanced behavior for 96 frames, with sprites needing to spawn first
 RO1A:5F4F CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 RO1A:5F52 06 01            ld   b,01           // Patches modify this to 18 22 (JR U,+34) resulting in skipping to $1A:$5F76
 RO1A:5F54 3E 05            ld   a,05
 RO1A:5F56 EF 19 2A 4A                          
 RO1A:5F5A FE FF            cp   a,FF
 RO1A:5F5C CA 35 60         jp   z,6035
 RO1A:5F5F FA A6 C4         ld   a,(C4A6)       // Select Button Flag
 RO1A:5F62 FE 01            cp   a,01
 RO1A:5F64 28 10            jr   z,5F76
 RO1A:5F66 FA DE CB         ld   a,(CBDE)
 RO1A:5F69 FE 01            cp   a,01
 RO1A:5F6B CA 35 60         jp   z,6035         // Immediate ending
 RO1A:5F6E FA DD CB         ld   a,(CBDD)
 RO1A:5F71 FE 01            cp   a,01
 RO1A:5F73 CA 31 60         jp   z,6031
 RO1A:5F76 3E 27            ld   a,27
 RO1A:5F78 CD 16 38         call 3816           // Summon jingle
 RO1A:5F7B EF 27 D4 40                          // LCD Display shut off, empties graphics
 RO1A:5F7F CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 RO1A:5F82 CD F3 04         call 04F3           // Shuts off LCD Display if necessary
 RO1A:5F85 EF 17 00 40                          // Clear all sprites in $C300 table, empties ($C4C8~$C4DB), WRA4($DB2C), WRA4($DB2E) 2 byte, and WRA4($D3AC~$DB2B)
 RO1A:5F89 CD 81 5E         call 5E81           // A = 0 for land unit supplier, 1 for air unit supplier, 2 for sea unit supplier
 RO1A:5F8C FE 00            cp   a,00
 RO1A:5F8E 28 08            jr   z,5F98
 RO1A:5F90 FE 01            cp   a,01
 RO1A:5F92 28 08            jr   z,5F9C
 RO1A:5F94 FE 02            cp   a,02
 RO1A:5F96 28 08            jr   z,5FA0
 RO1A:5F98 3E 13            ld   a,13
 RO1A:5F9A 18 06            jr   5FA2
 RO1A:5F9C 3E 0A            ld   a,0A
 RO1A:5F9E 18 02            jr   5FA2
 RO1A:5FA0 3E 10            ld   a,10           // A = 19 for land unit supplier, 10 for air unit supplier, 16 for sea unit supplier
 RO1A:5FA2 F5               push af
 RO1A:5FA3 FA A0 C4         ld   a,(C4A0)
 RO1A:5FA6 47               ld   b,a
 RO1A:5FA7 F1               pop  af
 RO1A:5FA8 CD 5B 40         call 405B           // Handles backdrop graphics as a whole (A is Backdrop number, B is used palette set)
 RO1A:5FAB 3E 00            ld   a,00
 RO1A:5FAD E0 83            ld   (ff00+83),a
 RO1A:5FAF E0 4F            ld   (ff00+4F),a
 RO1A:5FB1 FA A1 C4         ld   a,(C4A1)
 RO1A:5FB4 CD A5 45         call 45A5
 RO1A:5FB7 3E 01            ld   a,01
 RO1A:5FB9 EA CC C4         ld   (C4CC),a       // Down 1 Pixel/Frame
 RO1A:5FBC 3E 00            ld   a,00
 RO1A:5FBE EA CE C4         ld   (C4CE),a
 RO1A:5FC1 AF               xor  a
 RO1A:5FC2 EA D1 C4         ld   (C4D1),a
 RO1A:5FC5 3E 20            ld   a,20
 RO1A:5FC7 EA D2 C4         ld   (C4D2),a       // Activation: 32 frame timer
 RO1A:5FCA AF               xor  a
 RO1A:5FCB EA D3 C4         ld   (C4D3),a
 RO1A:5FCE 3E 4A            ld   a,4A
 RO1A:5FD0 EA D4 C4         ld   (C4D4),a       // Duration: 74 frame timer
 RO1A:5FD3 3E 60            ld   a,60
 RO1A:5FD5 EA D5 C4         ld   (C4D5),a
 RO1A:5FD8 3E 44            ld   a,44
 RO1A:5FDA EA D6 C4         ld   (C4D6),a
 RO1A:5FDD 3E 1A            ld   a,1A
 RO1A:5FDF EA D7 C4         ld   (C4D7),a       // Instruction $1A:$6044
 RO1A:5FE2 0E 00            ld   c,00
 RO1A:5FE4 CD 81 5E         call 5E81           // A = 0 for land unit supplier, 1 for air unit supplier, 2 for sea unit supplier
 RO1A:5FE7 FE 00            cp   a,00
 RO1A:5FE9 28 08            jr   z,5FF3
 RO1A:5FEB FE 01            cp   a,01
 RO1A:5FED 28 09            jr   z,5FF8
 RO1A:5FEF FE 02            cp   a,02
 RO1A:5FF1 28 0A            jr   z,5FFD
 RO1A:5FF3 21 70 00         ld   hl,0070
 RO1A:5FF6 28 0A            jr   z,6002
 RO1A:5FF8 21 50 00         ld   hl,0050
 RO1A:5FFB 28 05            jr   z,6002
 RO1A:5FFD 21 70 00         ld   hl,0070
 RO1A:6000 28 00            jr   z,6002
 RO1A:6002 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:6006 CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 RO1A:6009 CD 81 5E         call 5E81           // A = 0 for land unit supplier, 1 for air unit supplier, 2 for sea unit supplier
 RO1A:600C FE 00            cp   a,00
 RO1A:600E 28 08            jr   z,6018
 RO1A:6010 FE 01            cp   a,01
 RO1A:6012 28 09            jr   z,601D
 RO1A:6014 FE 02            cp   a,02
 RO1A:6016 28 0A            jr   z,6022
 RO1A:6018 01 00 02         ld   bc,0200
 RO1A:601B 18 0A            jr   6027
 RO1A:601D 01 00 05         ld   bc,0500
 RO1A:6020 18 05            jr   6027
 RO1A:6022 01 00 02         ld   bc,0200
 RO1A:6025 18 00            jr   6027
 RO1A:6027 11 D8 00         ld   de,00D8
 RO1A:602A EF 27 86 40                          // Handles all sprite advanced behavior for frames equivalent to DE, with sprites needing to spawn first; also shifts SCY by B and SCY by C each frame
 RO1A:602E AF               xor  a
 RO1A:602F 18 06            jr   6037
 RO1A:6031 3E 01            ld   a,01
 RO1A:6033 18 02            jr   6037
 RO1A:6035 3E FF            ld   a,FF
 RO1A:6037 F5               push af
 RO1A:6038 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 RO1A:603B CD 67 2E         call 2E67           // Handles clear-up of all sprite portions and entire ($C400) table, sets ($C00E) to 1
 RO1A:603E EF 17 00 40                          // Clear all sprites in $C300 table, empties ($C4C8~$C4DB), WRA4($DB2C), WRA4($DB2E) 2 byte, and WRA4($D3AC~$DB2B)
 RO1A:6042 F1               pop  af
 RO1A:6043 C9               ret  
 RO1A:6044 3E 00            ld   a,00
 RO1A:6046 EA CC C4         ld   (C4CC),a
 RO1A:6049 3E 00            ld   a,00
 RO1A:604B EA CE C4         ld   (C4CE),a
 RO1A:604E AF               xor  a
 RO1A:604F EA D3 C4         ld   (C4D3),a
 RO1A:6052 3E 3C            ld   a,3C
 RO1A:6054 EA D4 C4         ld   (C4D4),a
 RO1A:6057 3E 60            ld   a,60
 RO1A:6059 EA D5 C4         ld   (C4D5),a
 RO1A:605C 3E 69            ld   a,69
 RO1A:605E EA D6 C4         ld   (C4D6),a
 RO1A:6061 3E 1A            ld   a,1A
 RO1A:6063 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$6069
 RO1A:6066 C3 8A 02         jp   028A
 RO1A:6069 3E 03            ld   a,03
 RO1A:606B EA CC C4         ld   (C4CC),a
 RO1A:606E 3E 00            ld   a,00
 RO1A:6070 EA CE C4         ld   (C4CE),a
 RO1A:6073 AF               xor  a
 RO1A:6074 EA D3 C4         ld   (C4D3),a
 RO1A:6077 3E 3C            ld   a,3C
 RO1A:6079 EA D4 C4         ld   (C4D4),a
 RO1A:607C AF               xor  a
 RO1A:607D EA D5 C4         ld   (C4D5),a
 RO1A:6080 EA D6 C4         ld   (C4D6),a
 RO1A:6083 EA D7 C4         ld   (C4D7),a
 RO1A:6086 C3 8A 02         jp   028A           // POP ROM Block, Return: ?

 RO1A:6089 EA A2 C4         ld   (C4A2),a
 RO1A:608C FE 00            cp   a,00
 RO1A:608E 28 02            jr   z,6092
 RO1A:6090 18 04            jr   6096
 RO1A:6092 3E 01            ld   a,01
 RO1A:6094 18 02            jr   6098
 RO1A:6096 3E 00            ld   a,00           // A holds winning army
 RO1A:6098 EA A0 C4         ld   (C4A0),a       // Other player
 RO1A:609B AF               xor  a
 RO1A:609C EA A1 C4         ld   (C4A1),a       // Headquarters
 RO1A:609F AF               xor  a
 RO1A:60A0 CD 41 45         call 4541           // Plays out successful capture process
 RO1A:60A3 C9               ret                 // Plays out successful Headquarters capture process (A is defeated army)
 RO1A:60A4 EA A0 C4         ld   (C4A0),a
 RO1A:60A7 FE 00            cp   a,00
 RO1A:60A9 28 02            jr   z,60AD
 RO1A:60AB 18 09            jr   60B6
 RO1A:60AD 3E 00            ld   a,00
 RO1A:60AF EA A2 C4         ld   (C4A2),a
 RO1A:60B2 3E 01            ld   a,01
 RO1A:60B4 18 09            jr   60BF
 RO1A:60B6 3E 01            ld   a,01
 RO1A:60B8 EA A2 C4         ld   (C4A2),a
 RO1A:60BB 3E 00            ld   a,00
 RO1A:60BD 18 00            jr   60BF
 RO1A:60BF EA A1 C4         ld   (C4A1),a       // ($C4A1) holds losing army
 RO1A:60C2 EF 17 00 40                          // Clear all sprites in $C300 table, empties ($C4C8~$C4DB), WRA4($DB2C), WRA4($DB2E) 2 byte, and WRA4($D3AC~$DB2B)
 RO1A:60C6 EF 27 D4 40                          // LCD Display shut off, empties graphics
 RO1A:60CA FA A1 C4         ld   a,(C4A1)
 RO1A:60CD 47               ld   b,a
 RO1A:60CE AF               xor  a              // Headquarters
 RO1A:60CF CD 5B 40         call 405B           // Handles backdrop graphics as a whole (A is Backdrop number, B is used palette set)
 RO1A:60D2 3E 2B            ld   a,2B
 RO1A:60D4 CD 16 38         call 3816           // Capture jingle
 RO1A:60D7 CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 RO1A:60DA 11 1E 00         ld   de,001E
 RO1A:60DD 01 00 00         ld   bc,0000
 RO1A:60E0 EF 27 47 40                          // Carry Flag set by A, B, or Start being pressed within 30 frames; no gradual scroll
 RO1A:60E4 DA 58 62         jp   c,6258         // Ends immediately if A, B, or Start was pressed within 30 frames
 RO1A:60E7 3E 00            ld   a,00
 RO1A:60E9 E0 83            ld   (ff00+83),a
 RO1A:60EB E0 4F            ld   (ff00+4F),a
 RO1A:60ED FA A0 C4         ld   a,(C4A0)
 RO1A:60F0 FE 00            cp   a,00
 RO1A:60F2 28 04            jr   z,60F8
 RO1A:60F4 3E 00            ld   a,00
 RO1A:60F6 18 02            jr   60FA
 RO1A:60F8 3E 01            ld   a,01
 RO1A:60FA EA A0 C4         ld   (C4A0),a       // Change player
 RO1A:60FD 3E 0D            ld   a,0D           // Infantry
 RO1A:60FF 21 00 80         ld   hl,8000
 RO1A:6102 CD D7 43         call 43D7           // Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
 RO1A:6105 3E 93            ld   a,93           // Soldier basic running (left)
 RO1A:6107 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:610B 3E 00            ld   a,00
 RO1A:610D E0 83            ld   (ff00+83),a
 RO1A:610F E0 4F            ld   (ff00+4F),a
 RO1A:6111 3E FF            ld   a,FF
 RO1A:6113 EA CC C4         ld   (C4CC),a
 RO1A:6116 AF               xor  a
 RO1A:6117 EA CE C4         ld   (C4CE),a       // Left 1 pixel/frame
 RO1A:611A EA D1 C4         ld   (C4D1),a
 RO1A:611D EA D2 C4         ld   (C4D2),a
 RO1A:6120 EA D3 C4         ld   (C4D3),a
 RO1A:6123 3E 5A            ld   a,5A
 RO1A:6125 EA D4 C4         ld   (C4D4),a       // 90 frames
 RO1A:6128 AF               xor  a
 RO1A:6129 EA D5 C4         ld   (C4D5),a
 RO1A:612C EA D6 C4         ld   (C4D6),a
 RO1A:612F EA D7 C4         ld   (C4D7),a
 RO1A:6132 0E 00            ld   c,00
 RO1A:6134 21 70 58         ld   hl,5870        // 80,96
 RO1A:6137 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:613B 3E 00            ld   a,00
 RO1A:613D E0 83            ld   (ff00+83),a
 RO1A:613F E0 4F            ld   (ff00+4F),a
 RO1A:6141 3E 0D            ld   a,0D           // Infantry
 RO1A:6143 21 00 80         ld   hl,8000
 RO1A:6146 CD D7 43         call 43D7           // Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
 RO1A:6149 3E 93            ld   a,93           // Soldier basic running (left)
 RO1A:614B EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:614F 3E 00            ld   a,00
 RO1A:6151 E0 83            ld   (ff00+83),a
 RO1A:6153 E0 4F            ld   (ff00+4F),a
 RO1A:6155 3E FF            ld   a,FF
 RO1A:6157 EA CC C4         ld   (C4CC),a
 RO1A:615A AF               xor  a
 RO1A:615B EA CE C4         ld   (C4CE),a       // Left 1 pixel/frame
 RO1A:615E EA D1 C4         ld   (C4D1),a
 RO1A:6161 3E 1E            ld   a,1E
 RO1A:6163 EA D2 C4         ld   (C4D2),a       // 30 frames
 RO1A:6166 AF               xor  a
 RO1A:6167 EA D3 C4         ld   (C4D3),a
 RO1A:616A 3E 5A            ld   a,5A
 RO1A:616C EA D4 C4         ld   (C4D4),a       // 90 frames
 RO1A:616F AF               xor  a
 RO1A:6170 EA D5 C4         ld   (C4D5),a
 RO1A:6173 EA D6 C4         ld   (C4D6),a
 RO1A:6176 EA D7 C4         ld   (C4D7),a
 RO1A:6179 0E 00            ld   c,00
 RO1A:617B 21 70 58         ld   hl,5870        // 80,96
 RO1A:617E EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:6182 3E 3D            ld   a,3D
 RO1A:6184 CD 44 38         call 3844
 RO1A:6187 11 78 00         ld   de,0078
 RO1A:618A 01 00 00         ld   bc,0000
 RO1A:618D EF 27 47 40                          // Carry Flag set by A, B, or Start being pressed within 120 frames; no gradual scroll
 RO1A:6191 DA 58 62         jp   c,6258         // Ends immediately if A, B, or Start was pressed within 120 frames
 RO1A:6194 11 5A 00         ld   de,005A
 RO1A:6197 01 00 00         ld   bc,0000
 RO1A:619A 3E 00            ld   a,00
 RO1A:619C EF 31 13 41                          // BG Palettes alternate every 4 frames ending with the winning player's Palettes after 90 frames; if A, B, or Start is pressed, Carry Flag is Set and process is ended prematurely
 RO1A:61A0 DA 58 62         jp   c,6258         // Ends immediately if A, B, or Start was pressed within 90 frames
 RO1A:61A3 3E 00            ld   a,00
 RO1A:61A5 E0 83            ld   (ff00+83),a
 RO1A:61A7 E0 4F            ld   (ff00+4F),a
 RO1A:61A9 FA A0 C4         ld   a,(C4A0)
 RO1A:61AC FE 00            cp   a,00
 RO1A:61AE 28 04            jr   z,61B4
 RO1A:61B0 3E 00            ld   a,00
 RO1A:61B2 18 02            jr   61B6
 RO1A:61B4 3E 01            ld   a,01
 RO1A:61B6 EA A0 C4         ld   (C4A0),a       // Change player
 RO1A:61B9 3E 0D            ld   a,0D           // Infantry
 RO1A:61BB 21 00 80         ld   hl,8000
 RO1A:61BE CD D7 43         call 43D7           // Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
 RO1A:61C1 3E 93            ld   a,93           // Soldier basic running (left)
 RO1A:61C3 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:61C7 3E 00            ld   a,00
 RO1A:61C9 E0 83            ld   (ff00+83),a
 RO1A:61CB E0 4F            ld   (ff00+4F),a
 RO1A:61CD 3E FF            ld   a,FF
 RO1A:61CF EA CC C4         ld   (C4CC),a
 RO1A:61D2 AF               xor  a
 RO1A:61D3 EA CE C4         ld   (C4CE),a       // Left 1 pixel/frame
 RO1A:61D6 AF               xor  a
 RO1A:61D7 EA D1 C4         ld   (C4D1),a
 RO1A:61DA EA D2 C4         ld   (C4D2),a
 RO1A:61DD EA D3 C4         ld   (C4D3),a
 RO1A:61E0 3E 73            ld   a,73
 RO1A:61E2 EA D4 C4         ld   (C4D4),a       // 115 frames
 RO1A:61E5 3E 43            ld   a,43
 RO1A:61E7 EA D5 C4         ld   (C4D5),a
 RO1A:61EA 3E 8F            ld   a,8F
 RO1A:61EC EA D6 C4         ld   (C4D6),a
 RO1A:61EF 3E 27            ld   a,27
 RO1A:61F1 EA D7 C4         ld   (C4D7),a       // Instruction $27:$438F: Soldier Victory Pose (facing left); resets itself every 60 frames
 RO1A:61F4 0E 00            ld   c,00
 RO1A:61F6 21 70 B0         ld   hl,B070        // 168,96 (53,96)
 RO1A:61F9 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:61FD 3E 00            ld   a,00
 RO1A:61FF E0 83            ld   (ff00+83),a
 RO1A:6201 E0 4F            ld   (ff00+4F),a
 RO1A:6203 3E 0D            ld   a,0D           // Infantry
 RO1A:6205 21 00 80         ld   hl,8000
 RO1A:6208 CD D7 43         call 43D7           // Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
 RO1A:620B 3E 93            ld   a,93           // Soldier basic running (left)
 RO1A:620D EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:6211 3E 00            ld   a,00
 RO1A:6213 E0 83            ld   (ff00+83),a
 RO1A:6215 E0 4F            ld   (ff00+4F),a
 RO1A:6217 3E FF            ld   a,FF
 RO1A:6219 EA CC C4         ld   (C4CC),a
 RO1A:621C AF               xor  a
 RO1A:621D EA CE C4         ld   (C4CE),a       // Left 1 pixel/frame
 RO1A:6220 AF               xor  a
 RO1A:6221 EA D1 C4         ld   (C4D1),a
 RO1A:6224 EA D2 C4         ld   (C4D2),a
 RO1A:6227 EA D3 C4         ld   (C4D3),a
 RO1A:622A 3E 73            ld   a,73
 RO1A:622C EA D4 C4         ld   (C4D4),a       // 115 frames
 RO1A:622F 3E 43            ld   a,43
 RO1A:6231 EA D5 C4         ld   (C4D5),a
 RO1A:6234 3E 8F            ld   a,8F
 RO1A:6236 EA D6 C4         ld   (C4D6),a
 RO1A:6239 3E 27            ld   a,27
 RO1A:623B EA D7 C4         ld   (C4D7),a       // Instruction $27:$438F: Soldier Victory Pose (facing left); resets itself every 60 frames
 RO1A:623E 0E 00            ld   c,00
 RO1A:6240 21 70 E0         ld   hl,E070        // 216,96 (101,96)
 RO1A:6243 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:6247 3E 3D            ld   a,3D
 RO1A:6249 CD 44 38         call 3844
 RO1A:624C 11 B4 00         ld   de,00B4
 RO1A:624F 01 00 00         ld   bc,0000
 RO1A:6252 EF 27 47 40                          // Carry Flag set by A, B, or Start being pressed during timer determined by DE; gradual scroll determined by BC
 RO1A:6256 38 00            jr   c,6258         // Ends immediately if A, B, or Start was pressed within 180 frames
 RO1A:6258 CD 43 38         call 3843
 RO1A:625B CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 RO1A:625E EF 17 00 40                          // Clear all sprites in $C300 table, empties ($C4C8~$C4DB), WRA4($DB2C), WRA4($DB2E) 2 byte, and WRA4($D3AC~$DB2B)
 RO1A:6262 C9               ret                 // Rout movie plays out for up to 14 seconds (A is winning army)
 RO1A:6263 EA A0 C4         ld   (C4A0),a
 RO1A:6266 EF 17 00 40                          // Clear all sprites in $C300 table, empties ($C4C8~$C4DB), WRA4($DB2C), WRA4($DB2E) 2 byte, and WRA4($D3AC~$DB2B)
 RO1A:626A EF 27 D4 40                          // LCD Display shut off, empties graphics
 RO1A:626E FA A0 C4         ld   a,(C4A0)
 RO1A:6271 47               ld   b,a
 RO1A:6272 AF               xor  a              // Headquarters
 RO1A:6273 CD 5B 40         call 405B           // Handles backdrop graphics as a whole (A is Backdrop number, B is used palette set)
 RO1A:6276 3E 2B            ld   a,2B
 RO1A:6278 CD 16 38         call 3816           // Capture jingle
 RO1A:627B CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 RO1A:627E 11 1E 00         ld   de,001E
 RO1A:6281 01 00 00         ld   bc,0000
 RO1A:6284 EF 27 47 40                          // Carry Flag set by A, B, or Start being pressed during timer determined by DE; gradual scroll determined by BC
 RO1A:6288 DA 75 63         jp   c,6375         // Ends immediately if A, B, or Start was pressed within 30 frames
 RO1A:628B 3E 00            ld   a,00
 RO1A:628D E0 83            ld   (ff00+83),a
 RO1A:628F E0 4F            ld   (ff00+4F),a
 RO1A:6291 3E 0D            ld   a,0D           // Infantry
 RO1A:6293 21 00 80         ld   hl,8000
 RO1A:6296 CD D7 43         call 43D7           // Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
 RO1A:6299 3E 93            ld   a,93           // Soldier basic running (left)
 RO1A:629B EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:629F 3E FF            ld   a,FF
 RO1A:62A1 EA CC C4         ld   (C4CC),a
 RO1A:62A4 AF               xor  a
 RO1A:62A5 EA CE C4         ld   (C4CE),a       // Left 1 pixel/frame
 RO1A:62A8 EA D1 C4         ld   (C4D1),a
 RO1A:62AB EA D2 C4         ld   (C4D2),a
 RO1A:62AE EA D3 C4         ld   (C4D3),a
 RO1A:62B1 3E 1E            ld   a,1E
 RO1A:62B3 EA D4 C4         ld   (C4D4),a       // 30 frames
 RO1A:62B6 AF               xor  a
 RO1A:62B7 EA D5 C4         ld   (C4D5),a
 RO1A:62BA EA D6 C4         ld   (C4D6),a
 RO1A:62BD EA D7 C4         ld   (C4D7),a
 RO1A:62C0 0E 00            ld   c,00
 RO1A:62C2 21 70 58         ld   hl,5870        // 80,96
 RO1A:62C5 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:62C9 3E 01            ld   a,01
 RO1A:62CB E0 83            ld   (ff00+83),a
 RO1A:62CD E0 4F            ld   (ff00+4F),a
 RO1A:62CF 3E 1C            ld   a,1C           // Yielding Infantry
 RO1A:62D1 21 00 80         ld   hl,8000
 RO1A:62D4 CD D7 43         call 43D7           // Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
 RO1A:62D7 3E D8            ld   a,D8           // Yielding Infantry
 RO1A:62D9 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:62DD AF               xor  a
 RO1A:62DE EA CC C4         ld   (C4CC),a
 RO1A:62E1 EA CE C4         ld   (C4CE),a
 RO1A:62E4 EA D1 C4         ld   (C4D1),a
 RO1A:62E7 3E 1E            ld   a,1E
 RO1A:62E9 EA D2 C4         ld   (C4D2),a       // 30 frames
 RO1A:62EC AF               xor  a
 RO1A:62ED EA D3 C4         ld   (C4D3),a
 RO1A:62F0 3E F0            ld   a,F0
 RO1A:62F2 EA D4 C4         ld   (C4D4),a       // 240 frames
 RO1A:62F5 AF               xor  a
 RO1A:62F6 EA D5 C4         ld   (C4D5),a
 RO1A:62F9 EA D6 C4         ld   (C4D6),a
 RO1A:62FC EA D7 C4         ld   (C4D7),a
 RO1A:62FF 0E 80            ld   c,80
 RO1A:6301 21 70 3A         ld   hl,3A70        // 50,96
 RO1A:6304 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:6308 3E 98            ld   a,98           // Soldier basic running (right)
 RO1A:630A EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:630E 3E 01            ld   a,01
 RO1A:6310 EA CC C4         ld   (C4CC),a
 RO1A:6313 AF               xor  a
 RO1A:6314 EA CE C4         ld   (C4CE),a       // Right 1 pixel/frame
 RO1A:6317 EA D1 C4         ld   (C4D1),a
 RO1A:631A EA D2 C4         ld   (C4D2),a
 RO1A:631D EA D3 C4         ld   (C4D3),a
 RO1A:6320 3E 1E            ld   a,1E
 RO1A:6322 EA D4 C4         ld   (C4D4),a       // 30 frames
 RO1A:6325 AF               xor  a
 RO1A:6326 EA D5 C4         ld   (C4D5),a
 RO1A:6329 EA D6 C4         ld   (C4D6),a
 RO1A:632C EA D7 C4         ld   (C4D7),a
 RO1A:632F 0E 00            ld   c,00
 RO1A:6331 21 70 58         ld   hl,5870        // 80,96
 RO1A:6334 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:6338 3E D8            ld   a,D8           // Yielding Infantry
 RO1A:633A EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:633E AF               xor  a
 RO1A:633F EA CC C4         ld   (C4CC),a
 RO1A:6342 EA CE C4         ld   (C4CE),a
 RO1A:6345 EA D1 C4         ld   (C4D1),a
 RO1A:6348 3E 1E            ld   a,1E
 RO1A:634A EA D2 C4         ld   (C4D2),a       // 30 frames
 RO1A:634D AF               xor  a
 RO1A:634E EA D3 C4         ld   (C4D3),a
 RO1A:6351 3E F0            ld   a,F0
 RO1A:6353 EA D4 C4         ld   (C4D4),a       // 240 frames
 RO1A:6356 AF               xor  a
 RO1A:6357 EA D5 C4         ld   (C4D5),a
 RO1A:635A EA D6 C4         ld   (C4D6),a
 RO1A:635D EA D7 C4         ld   (C4D7),a
 RO1A:6360 0E 80            ld   c,80
 RO1A:6362 21 70 75         ld   hl,7570        // 109,96
 RO1A:6365 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:6369 11 B4 00         ld   de,00B4
 RO1A:636C 01 00 00         ld   bc,0000
 RO1A:636F EF 27 47 40                          // Carry Flag set by A, B, or Start being pressed during timer determined by DE; gradual scroll determined by BC
 RO1A:6373 38 00            jr   c,6375         // Ends immediately if A, B, or Start was pressed within 180 frames
 RO1A:6375 CD 43 38         call 3843
 RO1A:6378 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 RO1A:637B EF 17 00 40                          // Clear all sprites in $C300 table, empties ($C4C8~$C4DB), WRA4($DB2C), WRA4($DB2E) 2 byte, and WRA4($D3AC~$DB2B)
 RO1A:637F C9               ret                 // Yield movie plays out for up to 3.5 seconds (A is defeated army)

 RO1A:6380 00 00                                // Null
 RO1A:6382 00 00                                // Grunt
 RO1A:6384 00 00                                // Bazooka
 RO1A:6386 0D 98                                // Commando (soldier basic running, right)
 RO1A:6388 00 00                                // Work Car
 RO1A:638A 00 00                                // Supply Truck
 RO1A:638C 05 38
 RO1A:638E 00 00                                // Convoy
 RO1A:6390 06 40            ld   b,40
 RO1A:6392 00 00                                // Buggy
 RO1A:6394 07 48               ld   c,b
 RO1A:6396 00 00                                // Humvee
 RO1A:6398 07 50               ld   d,b
 RO1A:639A 00 00                                // APC
 RO1A:639C 08 58
 RO1A:639E 00 00                                // Rocket Launcher
 RO1A:63A0 09 60               ld   h,b
 RO1A:63A2 00 00                                // Anti-Air Tank
 RO1A:63A4 09 68               ld   l,b
 RO1A:63A6 00 00                                // Anti-Air Missile Launcher
 RO1A:63A8 0A 70               ld   (hl),b
 RO1A:63AA 00 00                                // Artillery
 RO1A:63AC 0B 78               ld   a,b
 RO1A:63AE 00 00                                // IFV
 RO1A:63B0 0B 80               add  b
 RO1A:63B2 00 00                                // Hunter Tank
 RO1A:63B4 0C 88               adc  b
 RO1A:63B6 00 00                                // Main Battle Tank
 RO1A:63B8 0C 90               sub  b
 RO1A:63BA 00 00                                // Fighter
 RO1A:63BC 00 00               nop  
 RO1A:63BE 10 A2            <corrupted stop>
 RO1A:63C0 00 00                                // Attacker
 RO1A:63C2 00 00               nop  
 RO1A:63C4 10 A3            <corrupted stop>
 RO1A:63C6 00 00                                // Bomber
 RO1A:63C8 10 A4            <corrupted stop>
 RO1A:63CA 00 00                                // Transport Plane
 RO1A:63CC 00 00                                // Supply Plane
 RO1A:63CE 00 00                                // Gunship
 RO1A:63D0 01 11
 RO1A:63D2 00 00                                // Ship Buster
 RO1A:63D4 00 00                                // Transport Helicopter
 RO1A:63D6 00 08
 RO1A:63D8 03 1C                                // Aegis Warship
 RO1A:63DA 0F A0               and  b
 RO1A:63DC 00 00                                // Large Aircraft Carrier
 RO1A:63DE 00 00                                // Small Aircraft Carrier
 RO1A:63E0 00 00                                // Lander
 RO1A:63E2 00 00                                // Tanker
 RO1A:63E4 00 00                                // Submarine
 RO1A:63E6 0F A1                                // Submarine+

 RO1A:63E8 90 41 00 40 C8 40 F0 46 30 47 70 47 60 05 1B 14 0A             // 0: Headquarters
 RO1A:63F9 40 49 B0 47 78 48 F0 4E 30 4F 70 4F B0 05 1B 14 0A             // 1: City
 RO1A:640A 40 51 B0 4F 78 50 20 54 60 54 A0 54 E0 02 1B 14 0A             // 2: Factory
 RO1A:641B 70 56 E0 54 A8 55 90 5C D0 5C 10 5D 20 06 1B 14 0A             // 3: Harbor
 RO1A:642C E0 5E 50 5D 18 5E 00 64 40 64 80 64 20 05 1B 14 0A             // 4: Airport
 RO1A:643D 50 66 C0 64 88 65 F0 6B 30 6C 70 6C A0 05 1B 14 0A             // 5: Simple Airport
 RO1A:644E D0 74 40 73 08 74 E0 77 E0 77 E0 77 10 03 1B 14 0A             // 6: Bridge
 RO1A:645F B0 79 20 78 E8 78 70 7B 70 7B 70 7B C0 01 1B 14 0A             // 7: Road
 RO1A:6470 40 6E B0 6C 78 6D 80 72 C0 72 00 73 40 04 1B 14 0A             // 8: Communication Tower
 RO1A:6481 90 41 00 40 C8 40 90 44 90 44 90 44 00 03 1C 14 0A             // 9: Plains
 RO1A:6492 50 47 D0 44 10 46 30 49 30 49 30 49 E0 01 1C 20 0A             // 10: Skies

 RO1A:64A3 F0 50 60 4F 28 50 F0 54            ld   a,(ff00+54)
 RO1A:64AB 30 55 F0 54 00 04 1C 14 0A             // 11: Transport Plane

 RO1A:64B4 00 57 70 55 38 56 30 5B            jr   nc,6517
 RO1A:64BC 70 5B 30 5B 30 04 1C 14 0A             // 12: Lander

 RO1A:64C5 30 5E B0 5B F0 5C 70 67               ld   h,a
 RO1A:64CD B0 67 70 67 40 09 1C 20 0A             // 13: Aircraft Carrier zoomed out

 RO1A:64D6 80 69 F0 67 B8 68 A0 6C               ld   l,h
 RO1A:64DE E0 6C A0 6C 20 03 1C 14 0A             // 14: Aircraft Carrier zoomed in

 RO1A:64E7 A0 6F 20 6D 60 6E E0 73            ld   (ff00+73),a
 RO1A:64EF 20 74 E0 73 40 04 1C 20 0A             // 15: Communication Tower (summoning)

 RO1A:64F8 F0 4B 70 49 B0 4A 20 4F            jr   nz,654F
 RO1A:6500 20 4F 20 4F 30 03 1C 20 0A             // 16: Open Seas

 RO1A:6509 CB 77 3B 76 03 77 8B 7D               ld   a,l
 RO1A:6511 CB 7D CB 7D C0 05 1C 14 0A             // 17: Supply Truck

 RO1A:651A 92 77 02 76 CA 76 52 7D               ld   a,l
 RO1A:6522 92 7D 92 7D C0 05 1F 14 0A             // 18: Supply Truck+

 RO1A:652B AB 6C 2B 6A               ld   l,d
 RO1A:652F 6B 6B 7B 6F               ld   l,a
 RO1A:6533 7B 6F 7B 6F               ld   l,a
 RO1A:6537 D0 02 1A 20 0A             // 19: Basic Land (Summon)

 RO1A:653C 76 5E F6 59            or   a,59
 RO1A:6540 36 5C 06 61            ld   b,61
 RO1A:6544 06 61 06 61            ld   b,61
 RO1A:6548 90 02 21 20 12

 RO1A:654D 16 64 46 61               ld   h,c
 RO1A:6551 AE 62 A6 66               ld   h,(hl)
 RO1A:6555 A6 66 A6 66               ld   h,(hl)
 RO1A:6559 90 02 21 14 12

 RO1A:655E B6 69 E6 66            and  a,66
 RO1A:6562 4E 68 16 6C            ld   d,6C
 RO1A:6566 16 6C 16 6C            ld   d,6C
 RO1A:656A 60 02 21 14 12

 RO1A:656F D6 70 56 6C               ld   l,h
 RO1A:6573 96 6E E6 73            and  a,73
 RO1A:6577 E6 73 E6 73            and  a,73
 RO1A:657B 10 03 21 20 12

 RO1A:6580 F6 76 26 74            ld   h,74
 RO1A:6584 8E 75 06 7A            ld   b,7A
 RO1A:6588 06 7A 06 7A            ld   b,7A
 RO1A:658C 10 03 21 14 12

 RO1A:6591 80 44 00 40               ld   b,b
 RO1A:6595 40 42 30 4B            jr   nc,65E4
 RO1A:6599 30 4B 30 4B            jr   nc,65E8
 RO1A:659D B0 06 22 20 12

 RO1A:65A2 70 50 70 4B               ld   c,e
 RO1A:65A6 F0 4D A0 5B               ld   e,e
 RO1A:65AA A0 5B A0 5B               ld   e,e
 RO1A:65AE 30 0B 22 14 20

 RO1A:65B3 35 47 65 44               ld   b,h
 RO1A:65B7 CD 45 55 51               ld   d,c
 RO1A:65BB 55 51 55 51               ld   d,c
 RO1A:65BF 20 0A 27 14 12

 RO1A:65C4 86                                   // HQ
 RO1A:65C5 86                                   // City
 RO1A:65C6 86                                   // Factory
 RO1A:65C7 84                                   // Harbor
 RO1A:65C8 86                                   // Airport
 RO1A:65C9 86                                   // Simple Airport
 RO1A:65CA 83                                   // Bridge
 RO1A:65CB 83                                   // Road
 RO1A:65CC 86                                   // Communication Tower
 RO1A:65CD 82                                   // Plains
 RO1A:65CE 82                                   // Skies (Supply Plane)
 RO1A:65CF 86               add  (hl)
 RO1A:65D0 86               add  (hl)
 RO1A:65D1 86               add  (hl)
 RO1A:65D2 81               add  c
 RO1A:65D3 86               add  (hl)
 RO1A:65D4 83               add  e
 RO1A:65D5 86               add  (hl)
 RO1A:65D6 86               add  (hl)
 RO1A:65D7 84               add  h

 RO1A:65D8 B9 43 1D                             // Transport Helicopter taking off
 RO1A:65DB A3 43 1D                             // Transport Helicopter standard flying
 RO1A:65DE 3B 44 1D                             // Transport Helicopter landing
 RO1A:65E1 99 43 1D                             // Transport Helicopter landed
 RO1A:65E4 FA 43 1D                             // Transport Helicopter+ taking off
 RO1A:65E7 AE 43 1D                             // Transport Helicopter+ standard flying
 RO1A:65EA 7C 44 1D                             // Transport Helicopter+ landing
 RO1A:65ED 9E 43 1D                             // Transport Helicopter+ landed
 RO1A:65F0 BD 44 1D               dec  e
 RO1A:65F3 C7 4D 1D               dec  e
 RO1A:65F6 B1 4D 1D               dec  e
 RO1A:65F9 49 4E 1D               dec  e
 RO1A:65FC A7 4D 1D               dec  e
 RO1A:65FF 08 4E 1D         ld   (1D4E),sp
 RO1A:6602 BC 4D 1D               dec  e
 RO1A:6605 8A 4E 1D
 RO1A:6608 AC 4D 1D               dec  e
 RO1A:660B CB 4E 1D               dec  e
 RO1A:660E E1 57 1D               dec  e
 RO1A:6611 C8 57 1D               dec  e
 RO1A:6614 22 58 1D               dec  e
 RO1A:6617 BE 57 1D               dec  e
 RO1A:661A C3 57 1D                             // Lite Attacker not using retro/liftoff rockets
 RO1A:661D D3 57 1D                             // Lite Attacker using retro/liftoff rockets
 RO1A:6620 ED 60 1D               dec  e
 RO1A:6623 FB 60 1D               dec  e
 RO1A:6626 09 61 1D               dec  e
 RO1A:6629 17 61 1D               dec  e
 RO1A:662C 25 61 1D               dec  e
 RO1A:662F 33 61 1D               dec  e
 RO1A:6632 9F 6C 1D                             // Supply Plane
 RO1A:6635 A4 6C 1D                             // Fighter
 RO1A:6638 BD 6C 1D               dec  e
 RO1A:663B F4 6C 1D               dec  e
 RO1A:663E A9 6C 1D               dec  e
 RO1A:6641 C8 6C 1D               dec  e
 RO1A:6644 FF 6C 1D               dec  e
 RO1A:6647 AE 6C 1D               dec  e
 RO1A:664A D3 6C 1D               dec  e
 RO1A:664D 0A 6D 1D               dec  e
 RO1A:6650 B3 6C 1D               dec  e
 RO1A:6653 DE 6C 1D               dec  e
 RO1A:6656 15 6D 1D               dec  e
 RO1A:6659 B8 6C 1D               dec  e
 RO1A:665C E9 6C 1D               dec  e
 RO1A:665F 20 6D 1D               dec  e
 RO1A:6662 AD 76 1D                             // Work Car basic movement (left)
 RO1A:6665 01 77 1D         ld   bc,1D77
 RO1A:6668 BB 76 1D                             // Work Car basic movement (right)
 RO1A:666B 06 77 1D               dec  e
 RO1A:666E C9 76 1D               dec  e
 RO1A:6671 0B 77 1D               dec  e
 RO1A:6674 D7 76 1D               dec  e
 RO1A:6677 10 77 1D               dec  e
 RO1A:667A E5 76 1D               dec  e
 RO1A:667D 15 77 1D               dec  e
 RO1A:6680 F3 76 1D               dec  e
 RO1A:6683 1A 77 1D               dec  e
 RO1A:6686 3E 45 1E
 RO1A:6689 7B 45 1E
 RO1A:668C 30 45 1E
 RO1A:668F 76 45 1E
 RO1A:6692 22 45 1E
 RO1A:6695 80 45 1E
 RO1A:6698 4C 45 1E
 RO1A:669B 85 45 1E
 RO1A:669E 5A 45 1E
 RO1A:66A1 8A 45 1E
 RO1A:66A4 68 45 1E
 RO1A:66A7 8F 45 1E
 RO1A:66AA 36 50 1E
 RO1A:66AB 8A 50 1E
 RO1A:66B0 52 50 1E
 RO1A:66B3 8F 50 1E
 RO1A:66B6 44 50 1E
 RO1A:66B9 94 50 1E
 RO1A:66BC 60 50 1E
 RO1A:66BF 99 50 1E
 RO1A:66C2 6E 50 1E
 RO1A:66C5 9E 50 1E
 RO1A:66C8 7C 50 1E
 RO1A:66CB A3 50 1E
 RO1A:66CE E2 5A 1E
 RO1A:66D1 36 5B 1E
 RO1A:66D4 F0 5A 1E
 RO1A:66D7 3B 5B 1E
 RO1A:66DA FE 5A 1E
 RO1A:66DD 40 5B 1E
 RO1A:66E0 0C 5B 1E
 RO1A:66E3 45 5B 1E
 RO1A:66E6 1A 5B 1E
 RO1A:66E9 4A 5B 1E
 RO1A:66EC 28 5B 1E
 RO1A:66EF 4F 5B 1E
 RO1A:66F2 2E 66 1E
 RO1A:66F5 82 66 1E
 RO1A:66F8 4A 66 1E
 RO1A:66FB 87 66 1E
 RO1A:66FE 3C 66 1E
 RO1A:6701 8C 66 1E
 RO1A:6704 58 66 1E
 RO1A:6707 91 66 1E
 RO1A:670A 66 66 1E
 RO1A:670D 96 66 1E
 RO1A:6710 74 66 1E
 RO1A:6713 9B 66 1E
 RO1A:6716 5A 72 1E
 RO1A:6719 AE 72 1E
 RO1A:671C 76 72 1E
 RO1A:671F B3 72 1E
 RO1A:6722 68 72 1E
 RO1A:6725 B8 72 1E
 RO1A:6728 84 72 1E
 RO1A:672B BD 72 1E
 RO1A:672E 92 72 1E
 RO1A:6731 C2 72 1E
 RO1A:6734 A0 72 1E
 RO1A:6737 C7 72 1E
 RO1A:673A B6 45 1F               rra  
 RO1A:673D EE 45 1F               rra  
 RO1A:6740 A8 45 1F               rra  
 RO1A:6743 F3 45 1F               rra  
 RO1A:6746 9A 45 1F               rra  
 RO1A:6749 F8 45 1F               rra  
 RO1A:674C C4 45 1F         call nz,1F45
 RO1A:674F FD 45 1F               rra  
 RO1A:6752 D2 45 1F         jp   nc,1F45
 RO1A:6755 02 46 1F               rra  
 RO1A:6758 E0 45 1F               rra  
 RO1A:675B 07 46 1F               rra  
 RO1A:675E CE 53 1F               rra  
 RO1A:6761 14 54 1F               rra  
 RO1A:6764 C0 53 1F               rra  
 RO1A:6767 19 54 1F               rra  
 RO1A:676A B2 53 1F               rra  
 RO1A:676D 1E 54 1F               rra  
 RO1A:6770 A4 53 1F               rra  
 RO1A:6773 23 54 1F               rra  
 RO1A:6776 DC 53 1F         call c,1F53
 RO1A:6779 28 54 1F               rra  
 RO1A:677C EA 53 1F         ld   (1F53),a
 RO1A:677F 2D 54 1F               rra  
 RO1A:6782 F8 53 1F               rra  
 RO1A:6785 32 54 1F               rra  
 RO1A:6788 06 54 1F               rra  
 RO1A:678B 37 54 1F               rra  
 RO1A:678E A1 5E 1F                             // Soldier Hard Work
 RO1A:6791 AF 5E 1F                             // Soldier basic running (left)
 RO1A:6794 BD 5E 1F               rra  
 RO1A:6797 CB 5E 1F               rra  
 RO1A:679A D9 5E 1F               rra  
 RO1A:679D DE 5E 1F               rra  
 RO1A:67A0 E3 5E 1F                             // Soldier basic running (right)
 RO1A:67A3 F1 5E 1F               rra  
 RO1A:67A6 FF 5E 1F                             // Soldier Victory Pose (facing left)
 RO1A:67A9 04 5F 1F                             // Soldier Victory Pose (facing right)
 RO1A:67AC 09 5F 1F               rra  
 RO1A:67AF 0E 5F 1F               rra  
 RO1A:67B2 13 5F 1F               rra  
 RO1A:67B5 EF 74 1C                             // Electricity from Communication Tower signal
 RO1A:67B8 CA 68 1F         jp   z,1F68
 RO1A:67BB D8 68 1F               rra  
 RO1A:67BE FB 70 1F               rra  
 RO1A:67C1 06 71 1F               rra  
 RO1A:67C4 11 71 1F         ld   de,1F71
 RO1A:67C7 57 40 20
 RO1A:67CA 83 41 20
 RO1A:67CD F3 43 20
 RO1A:67D0 01 44 20
 RO1A:67D3 06 44 20
 RO1A:67D6 14 44 20
 RO1A:67D9 AC 51 20
 RO1A:67DC CF 51 20
 RO1A:67DF F2 51 20
 RO1A:67E2 15 52 20
 RO1A:67E5 35 52 20
 RO1A:67E8 55 52 20
 RO1A:67EB 75 52 20
 RO1A:67EE 7D 52 20
 RO1A:67F1 85 52 20
 RO1A:67F4 8D 52 20
 RO1A:67F7 95 52 20
 RO1A:67FA 9D 52 20
 RO1A:67FD E2 4E 26
 RO1A:6800 E7 4E 26
 RO1A:6803 F2 4E 26
 RO1A:6806 10 59 20
 RO1A:6809 7F 5A 20
 RO1A:680C 8D 5A 20
 RO1A:680F B9 61 20
 RO1A:6812 CA 61 20
 RO1A:6815 D2 61 20
 RO1A:6818 F5 61 20
 RO1A:681B 03 62 20
 RO1A:681E 14 62 20
 RO1A:6821 1C 62 20
 RO1A:6824 2D 62 20
 RO1A:6827 44 62 20
 RO1A:682A 4F 62 20
 RO1A:682D BF 72 20
 RO1A:6830 CD 72 20
 RO1A:6833 D2 44 21
 RO1A:6836 E0 44 21
 RO1A:6839 EE 44 21
 RO1A:683C F9 44 21
 RO1A:683F FE 44 21
 RO1A:6842 03 45 21
 RO1A:6845 11 45 21
 RO1A:6848 16 45 21
 RO1A:684B 27 45 21
 RO1A:684E 35 45 21
 RO1A:6851 95 53 21
 RO1A:6854 A3 53 21
 RO1A:6857 B1 53 21
 RO1A:685A BF 53 21
 RO1A:685D CD 53 21
 RO1A:6860 53 5C 22                             // Yielding Infantry
 RO1A:6863 D5 53 21
 RO1A:6866 DA 53 21
 RO1A:6869 33 4F 26
 RO1A:686C E7 51 27                             // "PRESS START" (Title Screen)
 RO1A:686F 3D 45 21
 RO1A:6872 4B 45 21
 
 RO1A:6875 DA 44 DA 49 EB 69 00 05 1D           // Transport Helicopters
 RO1A:687E E8 4E 68 55 EB 69 80 06 1D           // Gunships
 RO1A:6887 6F 58 2F 5D EB 69 C0 04 1D           // Ship Buster and Lite Attacker
 RO1A:6890 4D 61 1D 69 EB 69 D0 07 1D           // Ships
 RO1A:6899 4B 6D EB 70 EB 69 A0 03 1D           // Jets and Supply Plane
 RO1A:68A2 37 77 D7 7D EB 69 E0 06 1D           // Work Car and Supply Trucks
 RO1A:68AB AC 45 BC 4A EB 69 60 05 1E           // Convoys and Buggy regular
 RO1A:68B4 C0 50 E0 55 EB 69 30 05 1E           // Buggy+ and Humvees
 RO1A:68BD 6C 5B 3C 60 EB 69 C0 05 1E           // APCs and Rocket Launcher regular
 RO1A:68C6 B8 66 68 6C EB 69 60 06 1E           // Rocket Launcher+ and Anti-Air Tanks
 RO1A:68CF E4 72 94 78 EB 69 00 06 1E           // Anti-Air Missile Launchers and Artillery regular
 RO1A:68D8 24 46 E4 4B EB 69 00 06 1F           // Artillery+ and IFVs
 RO1A:68E1 5C 54 0C 5C EB 69 B0 07 1F           // All regular tanks
 RO1A:68EA 32 5F C2 65 EB 69 90 06 1F           // Infantry

 RO1A:68F3 1B 75 FB 75 FB 75 E0 00 1C           // Communication Tower signal

 RO1A:68FC EA 68 5A 6D 5A 6D 70 04 1F
 RO1A:6905 22 71 C2 75 C2 75 A0 04 1F
 RO1A:690E 62 40 F2 40 F2 40 90 00 20
 RO1A:6917 88 41 C8 42 C8 42 80 01 20
 RO1A:6920 21 44 E1 46 E1 46 C0 02 20
 RO1A:6929 BD 52 7D 58 7D 58 C0 05 20

 RO1A:6932 FA 4F 5A 54 5A 54 60 04 26

 RO1A:693B 1E 59 8E 59 8E 59 70 00 20
 RO1A:6944 99 5A C2 77 49 5D B0 02 20
 RO1A:694D 6B 62 4B 6F 4B 6F E0 0C 20
 RO1A:6956 E2 72 C2 77 C2 77 E0 04 20
 RO1A:695F 71 45 31 51 31 51 C0 0B 21
 RO1A:6968 F6 53 B6 59 B6 59 C0 05 21
 RO1A:6971 61 5C C1 5D 01 5E 60 01 22           // Yielding Infantry

 RO1A:697A EF 51 5F 52 5F 52 70 00 27

 RO1A:6983 00 00                                // Null
 RO1A:6985 0D 93                                // Grunt (infantry)
 RO1A:6987 0D 93                                // Bazooka (infantry)
 RO1A:6989 0D 93                                // Commando (infantry)
 RO1A:698B 05 2E                                // Work Car
 RO1A:698D 05 32                                // Supply Truck
 RO1A:698F 05 36                                // Supply Truck+
 RO1A:6991 06 3A                                // Convoy
 RO1A:6993 06 3E                                // Convoy+
 RO1A:6995 06 42                                // Buggy
 RO1A:6997 07 46                                // Buggy+
 RO1A:6999 07 4A                                // Humvee
 RO1A:699B 07 4E                                // Humvee+
 RO1A:699D 08 52                                // APC
 RO1A:699F 08 56               ld   d,(hl)
 RO1A:69A1 08 5A                                // Rocket Launcher
 RO1A:69A3 09 5E               ld   e,(hl)
 RO1A:69A5 09 62                                // Anti-Air Tank
 RO1A:69A7 09 66               ld   h,(hl)
 RO1A:69A9 0A 6A                                // Anti-Air Missile Launcher
 RO1A:69AB 0A 6E               ld   l,(hl)
 RO1A:69AD 0A 72                                // Artillery
 RO1A:69AF 0B 76               halt 
 RO1A:69B1 0B 7A                                // IFV
 RO1A:69B3 0B 7E               ld   a,(hl)
 RO1A:69B5 0C 82                                // Hunter Tank
 RO1A:69B7 0C 86               add  (hl)
 RO1A:69B9 0C 8A                                // Main Battle Tank
 RO1A:69BB 0C 8E               adc  (hl)
 RO1A:69BD 04 1F                                // Fighter
 RO1A:69BF 04 22                                // Lite Fighter
 RO1A:69C1 04 25                                // Interceptor
 RO1A:69C3 04 28                                // Attacker
 RO1A:69C5 02 16                                // Lite Attacker
 RO1A:69C7 04 2B                                // Lite Bomber
 RO1A:69C9 00 00                                // Bomber
 RO1A:69CB 10 A4                                // Mercenary Bomber
 RO1A:69CD 00 00                                // Transport Plane
 RO1A:69CF 04 1E                                // Supply Plane
 RO1A:69D1 01 09                                // Gunship
 RO1A:69D3 01 0D                                // Gunship+
 RO1A:69D5 02 12                                // Ship Buster
 RO1A:69D7 00 00                                // Transport Helicopter
 RO1A:69D9 00 04                                // Transport Helicopter+
 RO1A:69DB 03 1C                                // Aegis Warship
 RO1A:69DD 03 1D                                // Mercenary Missile Frigate
 RO1A:69DF 03 1B                                // Large Aircraft Carrier
 RO1A:69E1 03 1A                                // Small Aircraft Carrier
 RO1A:69E3 03 19                                // Lander
 RO1A:69E5 03 18                                // Tanker
 RO1A:69E7 0F A1                                // Submarine
 RO1A:69E9 0F A1                                // Submarine+

 RO1A:69EB F8 57 FF 7F 1F 02 FF 03
 RO1A:69F3 F8 63 FF 7F 7F 18 FE 30
 RO1A:69FB FB 5B 00 00 FF 7F CD 45
 RO1A:6A03 FB 5B 00 00 CD 45 FD 3E
 RO1A:6A0B FB 5B 00 00 FF 7F E0 7E
 RO1A:6A13 FB 5B 00 00 CD 45 E0 7E
 RO1A:6A1B F8 5B 00 00 FD 3E B6 29
 RO1A:6A23 FB 5B FF 7F 7F 1A FD 34

Base Land
 RO1A:6A2B 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02
 RO1A:6A4B 02 15 16 17 18 02 02 02 2B 2C 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02
 RO1A:6A6B 02 02 19 1A 02 1B 1C 1D 02 02 02 02 02 02 02 28 29 2A 02 02 02 02 02 1E 1F 02 02 02 02 02 02 02
 RO1A:6A8B 1E 1F 02 02 02 02 02 02 02 02 02 02 20 21 22 23 02 02 02 02 02 02 02 02 02 03 02 02 28 29 2A 02
 RO1A:6AAB 02 02 02 02 02 02 02 02 02 02 02 02 24 25 26 27 02 02 02 02 02 02 02 02 1B 1C 1D 02 02 02 02 02
 RO1A:6ACB 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02
 RO1A:6AEB 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03
 RO1A:6B0B 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04
 RO1A:6B2B 0E 0F 10 06 07 08 09 0A 11 12 13 14 05 05 0B 0C 0D 05 05 05 05 05 05 0B 0C 0D 05 11 12 13 14 05
 RO1A:6B4B 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01

 RO1A:6B6B 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01
 RO1A:6B8B 01 03 03 03 03 01 01 01 03 03 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01
 RO1A:6BAB 01 01 03 03 01 03 03 03 01 01 01 01 01 01 01 03 03 03 01 01 01 01 01 03 03 01 01 01 01 01 01 01
 RO1A:6BCB 03 03 01 01 01 01 01 01 01 01 01 01 03 03 03 03 01 01 01 01 01 01 01 01 01 01 01 01 03 03 03 01
 RO1A:6BEB 01 01 01 01 01 01 01 01 01 01 01 01 03 03 03 03 01 01 01 01 01 01 01 01 03 03 03 01 01 01 01 01
 RO1A:6C0B 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01
 RO1A:6C2B 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01
 RO1A:6C4B 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01
 RO1A:6C6B 02 02 02 02 02 02 02 02 02 02 02 02 01 01 02 02 02 01 01 01 01 01 01 02 02 02 01 02 02 02 02 01
 RO1A:6C8B 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

 RO1A:6CAB FF 00 FF 00 FF 00 FF 00 FF 00 FF 00 FF 00 FF 00
 RO1A:6CBB FF FF FF 00 FF 00 00 FF 00 FF FF FF FF FF FF FF
 RO1A:6CCB FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF
 RO1A:6CDB FF FF FF FF FF FF 00 FF FF FF 00 FF 00 FF FF FF
 RO1A:6CEB 00 FF 00 FF 00 FF 00 FF FF 00 FF 00 FF 00 FF 00
 RO1A:6CFB 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
 RO1A:6D0B 00 00 00 00 00 00 00 00 00 00 00 03 00 1F 00 FF
 RO1A:6D1B 00 00 00 00 00 00 00 3C 00 7E 00 FF 00 FF 01 FE
 RO1A:6D2B 00 00 00 00 00 00 00 00 01 02 0F 90 3F C0 FF 0C
 RO1A:6D3B 00 00 00 00 00 00 70 88 FE 01 FF 00 FF 38 FF 7F
 RO1A:6D4B 00 00 00 00 00 00 00 00 00 00 00 80 E0 10 F8 06
 RO1A:6D5B 00 00 00 00 00 00 00 00 00 00 01 02 03 0C 0F 30
 RO1A:6D6B 00 00 00 00 00 00 00 00 00 00 C0 20 F0 09 FC 03
 RO1A:6D7B 00 00 00 00 00 00 00 00 00 00 00 60 00 F0 00 FC
 RO1A:6D8B 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 0D
 RO1A:6D9B 00 00 00 00 00 00 00 00 00 00 02 10 16 A9 17 E8
 RO1A:6DAB 00 00 00 00 00 00 00 00 00 10 00 94 84 52 CC 33
 RO1A:6DBB 00 00 00 00 00 00 00 00 00 00 00 02 02 24 0A 35
 RO1A:6DCB 00 00 00 00 00 00 00 00 00 10 10 84 11 AC B9 46
 RO1A:6DDB 00 00 00 00 00 00 00 00 00 00 00 44 40 B5 64 99
 RO1A:6DEB 00 00 00 00 00 00 00 00 00 00 00 00 00 28 00 E8
 RO1A:6DFB FF FF FF FF FE FF F8 FF E6 F8 CC F0 F3 FC FC FF
 RO1A:6E0B FF FF F0 FF 0F F0 F0 00 18 00 0C 00 FC 00 3F C0
 RO1A:6E1B FF FF 1F FF E1 1F 1C 03 03 00 61 00 F3 00 9C 63
 RO1A:6E2B FF FF FF FF FF FF FF FF 1F FF EF 1F 87 7F 3F FF
 RO1A:6E3B C7 F8 F8 FF FF FF FF FF FF FF FF FF FF FF FF FF
 RO1A:6E4B 63 FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF
 RO1A:6E5B F6 FF F1 FE EE F0 D0 E0 40 80 B8 C0 E7 F8 F8 FF
 RO1A:6E6B 3F FF C4 3F 3B 04 04 00 00 00 8E 00 73 8E 8F FF
 RO1A:6E7B FF FF 3F FF C3 3F 3D 03 02 01 7D 03 83 7F FF FF
 RO1A:6E8B FA FF E5 FA CA F0 D8 E0 B0 C0 CC F0 F3 FC FC FF
 RO1A:6E9B 1F FF AF 5F 53 0F 0D 03 4E 01 B3 4F 4F FF FF FF
 RO1A:6EAB FF FF FF FF FF FF FF FF FF FF FF FF FE FF F1 FE
 RO1A:6EBB FF FF FF FF FF FF FF FF E0 FF DE E1 33 C0 E0 00
 RO1A:6ECB FF FF FF FF FF FF FF FF E1 FF 4E F1 BB 40 F0 00
 RO1A:6EDB FF FF FF FF FF FF FF FF FF FF 0F FF F7 0F 3B 07
 RO1A:6EEB FF F0 B8 C0 C6 F8 F9 FE FE FF FF FF FF FF FF FF
 RO1A:6EFB 00 00 02 00 07 00 FF 00 E7 18 38 FF FF FF FF FF
 RO1A:6F0B 18 00 3C 00 EF 10 93 7C 7C FF FF FF FF FF FF FF
 RO1A:6F1B 05 03 1C 03 F7 0F CF 3F 3F FF FF FF FF FF FF FF
 RO1A:6F2B FF FF FF FF F3 FF E1 FE 01 FF F0 FF FF FF FF FF
 RO1A:6F3B 8F FF 27 FF 10 EF 07 F8 00 FF 70 FF FF FF FF FF
 RO1A:6F4B FF FF FF FF 4F FF 81 7F 0F FF FF FF FF FF FF FF
 RO1A:6F5B FF FF FF FF F1 FF E4 FB 0F F0 80 FF E0 FF FF FF
 RO1A:6F6B FF FF FF FF FF FF 0F FF 20 DF 07 FF FF FF FF FF

 RO1A:6F7B 00 00 D6 5A 73 4E 10 42
 RO1A:6F83 F5 7F F0 7F EA 7F E0 7F
 RO1A:6F8B F5 7F 46 3F AE 53 A0 2E
 RO1A:6F93 FF 7F F8 7F F1 7F E0 7F
 RO1A:6F9B 00 7C 00 00 1F 02 FF 03
 RO1A:6FA3 F0 03 E0 03 E0 43 E0 7F
 RO1A:6FAB 00 7E 00 7C 10 7C 1F 7C
 RO1A:6FB3 1F 40 10 42 18 63 FF 7F

 RO1A:6FBB EF 27 D4 40                          // LCD Display shut off, empties graphics
 RO1A:6FBE EF 17 00 40                          // Clear all sprites in $C300 table, empties ($C4C8~$C4DB), WRA4($DB2C), WRA4($DB2E) 2 byte, and WRA4($D3AC~$DB2B)
 RO1A:6FC3 C9               ret  
 RO1A:6FC4 AF               xor  a
 RO1A:6FC5 EA CC C4         ld   (C4CC),a
 RO1A:6FC8 EA CE C4         ld   (C4CE),a
 RO1A:6FCB EA D1 C4         ld   (C4D1),a
 RO1A:6FCE EA D2 C4         ld   (C4D2),a
 RO1A:6FD1 EA D3 C4         ld   (C4D3),a
 RO1A:6FD4 3E C8            ld   a,C8
 RO1A:6FD6 EA D4 C4         ld   (C4D4),a
 RO1A:6FD9 AF               xor  a
 RO1A:6FDA EA D5 C4         ld   (C4D5),a
 RO1A:6FDD EA D6 C4         ld   (C4D6),a
 RO1A:6FE0 EA D7 C4         ld   (C4D7),a
 RO1A:6FE3 C3 8A 02         jp   028A
 RO1A:6FE6 3E 01            ld   a,01
 RO1A:6FE8 EA A0 C4         ld   (C4A0),a
 RO1A:6FEB 3E 00            ld   a,00
 RO1A:6FED E0 83            ld   (ff00+83),a
 RO1A:6FEF E0 4F            ld   (ff00+4F),a
 RO1A:6FF1 3E 17            ld   a,17
 RO1A:6FF3 21 00 80         ld   hl,8000
 RO1A:6FF6 EF 1A D7 43                          // Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
 RO1A:6FFA 3E BB            ld   a,BB
 RO1A:6FFC EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:7000 3E FF            ld   a,FF
 RO1A:7002 EA CC C4         ld   (C4CC),a
 RO1A:7005 AF               xor  a
 RO1A:7006 EA CE C4         ld   (C4CE),a
 RO1A:7009 EA D1 C4         ld   (C4D1),a
 RO1A:700C 3E 3C            ld   a,3C
 RO1A:700E EA D2 C4         ld   (C4D2),a
 RO1A:7011 AF               xor  a
 RO1A:7012 EA D3 C4         ld   (C4D3),a
 RO1A:7015 3E 64            ld   a,64
 RO1A:7017 EA D4 C4         ld   (C4D4),a
 RO1A:701A 3E 6F            ld   a,6F
 RO1A:701C EA D5 C4         ld   (C4D5),a
 RO1A:701F 3E C4            ld   a,C4
 RO1A:7021 EA D6 C4         ld   (C4D6),a
 RO1A:7024 3E 1A            ld   a,1A
 RO1A:7026 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$6FC4
 RO1A:7029 0E 00            ld   c,00
 RO1A:702B 21 70 B0         ld   hl,B070
 RO1A:702E EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:7032 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO1A:7035 3E BB            ld   a,BB
 RO1A:7037 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:703B 3E FF            ld   a,FF
 RO1A:703D EA CC C4         ld   (C4CC),a
 RO1A:7040 AF               xor  a
 RO1A:7041 EA CE C4         ld   (C4CE),a
 RO1A:7044 EA D1 C4         ld   (C4D1),a
 RO1A:7047 3E 3C            ld   a,3C
 RO1A:7049 EA D2 C4         ld   (C4D2),a
 RO1A:704C AF               xor  a
 RO1A:704D EA D3 C4         ld   (C4D3),a
 RO1A:7050 3E 64            ld   a,64
 RO1A:7052 EA D4 C4         ld   (C4D4),a
 RO1A:7055 3E 6F            ld   a,6F
 RO1A:7057 EA D5 C4         ld   (C4D5),a
 RO1A:705A 3E C4            ld   a,C4
 RO1A:705C EA D6 C4         ld   (C4D6),a
 RO1A:705F 3E 1A            ld   a,1A
 RO1A:7061 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$6FC4
 RO1A:7064 0E 00            ld   c,00
 RO1A:7066 21 70 E0         ld   hl,E070
 RO1A:7069 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:706D CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO1A:7070 C9               ret  
 RO1A:7071 AF               xor  a
 RO1A:7072 EA CC C4         ld   (C4CC),a
 RO1A:7075 EA CE C4         ld   (C4CE),a
 RO1A:7078 EA D1 C4         ld   (C4D1),a
 RO1A:707B EA D2 C4         ld   (C4D2),a
 RO1A:707E AF               xor  a
 RO1A:707F EA D3 C4         ld   (C4D3),a
 RO1A:7082 3E 23            ld   a,23
 RO1A:7084 EA D4 C4         ld   (C4D4),a
 RO1A:7087 3E 62            ld   a,62
 RO1A:7089 EA D5 C4         ld   (C4D5),a
 RO1A:708C 3E CB            ld   a,CB
 RO1A:708E EA D6 C4         ld   (C4D6),a
 RO1A:7091 3E 13            ld   a,13
 RO1A:7093 EA D7 C4         ld   (C4D7),a       // Instruction $13:$62CB
 RO1A:7096 3E A7            ld   a,A7
 RO1A:7098 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:709C FA D0 C4         ld   a,(C4D0)
 RO1A:709F CD E8 2E         call 2EE8           // WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
 RO1A:70A2 C3 8A 02         jp   028A
 RO1A:70A5 3E FF            ld   a,FF
 RO1A:70A7 EA CC C4         ld   (C4CC),a
 RO1A:70AA 3E 80            ld   a,80
 RO1A:70AC EA CD C4         ld   (C4CD),a
 RO1A:70AF AF               xor  a
 RO1A:70B0 EA CE C4         ld   (C4CE),a
 RO1A:70B3 EA D1 C4         ld   (C4D1),a
 RO1A:70B6 EA D2 C4         ld   (C4D2),a
 RO1A:70B9 AF               xor  a
 RO1A:70BA EA D3 C4         ld   (C4D3),a
 RO1A:70BD 3E 78            ld   a,78
 RO1A:70BF EA D4 C4         ld   (C4D4),a
 RO1A:70C2 AF               xor  a
 RO1A:70C3 EA D5 C4         ld   (C4D5),a
 RO1A:70C6 EA D6 C4         ld   (C4D6),a
 RO1A:70C9 EA D7 C4         ld   (C4D7),a
 RO1A:70CC C3 8A 02         jp   028A
 RO1A:70CF 3E 01            ld   a,01
 RO1A:70D1 EA A0 C4         ld   (C4A0),a
 RO1A:70D4 3E 00            ld   a,00
 RO1A:70D6 E0 83            ld   (ff00+83),a
 RO1A:70D8 E0 4F            ld   (ff00+4F),a
 RO1A:70DA 3E 17            ld   a,17
 RO1A:70DC 21 00 80         ld   hl,8000
 RO1A:70DF EF 1A D7 43                          // Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
 RO1A:70E3 3E 01            ld   a,01
 RO1A:70E5 EA A0 C4         ld   (C4A0),a
 RO1A:70E8 3E 01            ld   a,01
 RO1A:70EA E0 83            ld   (ff00+83),a
 RO1A:70EC E0 4F            ld   (ff00+4F),a
 RO1A:70EE 3E 13            ld   a,13
 RO1A:70F0 21 00 80         ld   hl,8000
 RO1A:70F3 EF 1A D7 43                          // Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
 RO1A:70F7 21 E1 46         ld   hl,46E1
 RO1A:70FA 0E 20            ld   c,20
 RO1A:70FC 3E 08            ld   a,08
 RO1A:70FE 06 08            ld   b,08
 RO1A:7100 CD D9 06         call 06D9           // ($C4E0 + A * 8) to ($C4E0 + A * 8 + B * 8 - 1) hold C:(HL) to C:(HL + B * 8 - 1)
 RO1A:7103 CD F2 06         call 06F2           // Both BG and Sprite Palette tables are updated
 RO1A:7106 3E A8            ld   a,A8
 RO1A:7108 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:710C AF               xor  a
 RO1A:710D EA CC C4         ld   (C4CC),a
 RO1A:7110 EA CE C4         ld   (C4CE),a
 RO1A:7113 EA D1 C4         ld   (C4D1),a
 RO1A:7116 EA D2 C4         ld   (C4D2),a
 RO1A:7119 3E 01            ld   a,01
 RO1A:711B EA D3 C4         ld   (C4D3),a
 RO1A:711E 3E A4            ld   a,A4
 RO1A:7120 EA D4 C4         ld   (C4D4),a
 RO1A:7123 3E 70            ld   a,70
 RO1A:7125 EA D5 C4         ld   (C4D5),a
 RO1A:7128 3E 71            ld   a,71
 RO1A:712A EA D6 C4         ld   (C4D6),a
 RO1A:712D 3E 1A            ld   a,1A
 RO1A:712F EA D7 C4         ld   (C4D7),a       // Instruction $1A:$7071
 RO1A:7132 0E 80            ld   c,80
 RO1A:7134 21 70 14         ld   hl,1470
 RO1A:7137 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:713B CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO1A:713E 3E BC            ld   a,BC
 RO1A:7140 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:7144 3E FF            ld   a,FF
 RO1A:7146 EA CC C4         ld   (C4CC),a
 RO1A:7149 3E 80            ld   a,80
 RO1A:714B EA CD C4         ld   (C4CD),a
 RO1A:714E AF               xor  a
 RO1A:714F EA CE C4         ld   (C4CE),a
 RO1A:7152 EA D1 C4         ld   (C4D1),a
 RO1A:7155 3E 3C            ld   a,3C
 RO1A:7157 EA D2 C4         ld   (C4D2),a
 RO1A:715A 3E 01            ld   a,01
 RO1A:715C EA D3 C4         ld   (C4D3),a
 RO1A:715F 3E 18            ld   a,18
 RO1A:7161 EA D4 C4         ld   (C4D4),a
 RO1A:7164 AF               xor  a
 RO1A:7165 EA D5 C4         ld   (C4D5),a
 RO1A:7168 EA D6 C4         ld   (C4D6),a
 RO1A:716B EA D7 C4         ld   (C4D7),a
 RO1A:716E 0E 00            ld   c,00
 RO1A:7170 21 70 B0         ld   hl,B070
 RO1A:7173 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:7177 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO1A:717A 3E BC            ld   a,BC
 RO1A:717C EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:7180 3E FF            ld   a,FF
 RO1A:7182 EA CC C4         ld   (C4CC),a
 RO1A:7185 3E 80            ld   a,80
 RO1A:7187 EA CD C4         ld   (C4CD),a
 RO1A:718A AF               xor  a
 RO1A:718B EA CE C4         ld   (C4CE),a
 RO1A:718E EA D1 C4         ld   (C4D1),a
 RO1A:7191 3E 3C            ld   a,3C
 RO1A:7193 EA D2 C4         ld   (C4D2),a
 RO1A:7196 3E 01            ld   a,01
 RO1A:7198 EA D3 C4         ld   (C4D3),a
 RO1A:719B 3E 5E            ld   a,5E
 RO1A:719D EA D4 C4         ld   (C4D4),a
 RO1A:71A0 AF               xor  a
 RO1A:71A1 EA D5 C4         ld   (C4D5),a
 RO1A:71A4 EA D6 C4         ld   (C4D6),a
 RO1A:71A7 EA D7 C4         ld   (C4D7),a
 RO1A:71AA 0E 00            ld   c,00
 RO1A:71AC 21 70 D0         ld   hl,D070
 RO1A:71AF EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:71B3 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO1A:71B6 3E AA            ld   a,AA
 RO1A:71B8 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:71BC AF               xor  a
 RO1A:71BD EA CC C4         ld   (C4CC),a
 RO1A:71C0 EA CD C4         ld   (C4CD),a
 RO1A:71C3 EA CE C4         ld   (C4CE),a
 RO1A:71C6 EA CF C4         ld   (C4CF),a
 RO1A:71C9 EA D1 C4         ld   (C4D1),a
 RO1A:71CC EA D2 C4         ld   (C4D2),a
 RO1A:71CF 3E 01            ld   a,01
 RO1A:71D1 EA D3 C4         ld   (C4D3),a
 RO1A:71D4 3E E0            ld   a,E0
 RO1A:71D6 EA D4 C4         ld   (C4D4),a
 RO1A:71D9 3E 70            ld   a,70
 RO1A:71DB EA D5 C4         ld   (C4D5),a
 RO1A:71DE 3E A5            ld   a,A5
 RO1A:71E0 EA D6 C4         ld   (C4D6),a
 RO1A:71E3 3E 1A            ld   a,1A
 RO1A:71E5 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$70A5
 RO1A:71E8 0E 80            ld   c,80
 RO1A:71EA 21 70 16         ld   hl,1670
 RO1A:71ED EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:71F1 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO1A:71F4 C9               ret  
 RO1A:71F5 AF               xor  a
 RO1A:71F6 EA CC C4         ld   (C4CC),a
 RO1A:71F9 EA CD C4         ld   (C4CD),a
 RO1A:71FC EA CE C4         ld   (C4CE),a
 RO1A:71FF EA D1 C4         ld   (C4D1),a
 RO1A:7202 EA D2 C4         ld   (C4D2),a
 RO1A:7205 EA D3 C4         ld   (C4D3),a
 RO1A:7208 3E C8            ld   a,C8
 RO1A:720A EA D4 C4         ld   (C4D4),a
 RO1A:720D AF               xor  a
 RO1A:720E EA D5 C4         ld   (C4D5),a
 RO1A:7211 EA D6 C4         ld   (C4D6),a
 RO1A:7214 EA D7 C4         ld   (C4D7),a
 RO1A:7217 FA D0 C4         ld   a,(C4D0)
 RO1A:721A CD 11 2F         call 2F11           // set 1,WRA4[$D000 + A * 16]
 RO1A:721D C3 8A 02         jp   028A
 RO1A:7220 AF               xor  a
 RO1A:7221 EA CC C4         ld   (C4CC),a
 RO1A:7224 EA CD C4         ld   (C4CD),a
 RO1A:7227 EA CE C4         ld   (C4CE),a
 RO1A:722A EA D1 C4         ld   (C4D1),a
 RO1A:722D EA D2 C4         ld   (C4D2),a
 RO1A:7230 EA D3 C4         ld   (C4D3),a
 RO1A:7233 3E 5D            ld   a,5D
 RO1A:7235 EA D4 C4         ld   (C4D4),a
 RO1A:7238 AF               xor  a
 RO1A:7239 3E 71            ld   a,71
 RO1A:723B EA D5 C4         ld   (C4D5),a
 RO1A:723E 3E F5            ld   a,F5
 RO1A:7240 EA D6 C4         ld   (C4D6),a
 RO1A:7243 3E 1A            ld   a,1A
 RO1A:7245 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$71F5
 RO1A:7248 3E C8            ld   a,C8
 RO1A:724A EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:724E FA D0 C4         ld   a,(C4D0)
 RO1A:7251 CD E8 2E         call 2EE8           // WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
 RO1A:7254 3E 7B            ld   a,7B
 RO1A:7256 CD 44 38         call 3844
 RO1A:7259 C3 8A 02         jp   028A
 RO1A:725C AF               xor  a
 RO1A:725D EA A0 C4         ld   (C4A0),a
 RO1A:7260 3E 00            ld   a,00
 RO1A:7262 E0 83            ld   (ff00+83),a
 RO1A:7264 E0 4F            ld   (ff00+4F),a
 RO1A:7266 3E 19            ld   a,19
 RO1A:7268 21 00 80         ld   hl,8000
 RO1A:726B EF 1A D7 43                          // Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
 RO1A:726F 3E C7            ld   a,C7
 RO1A:7271 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:7275 3E FF            ld   a,FF
 RO1A:7277 EA CC C4         ld   (C4CC),a
 RO1A:727A 3E 80            ld   a,80
 RO1A:727C EA CD C4         ld   (C4CD),a
 RO1A:727F AF               xor  a
 RO1A:7280 EA CE C4         ld   (C4CE),a
 RO1A:7283 EA D1 C4         ld   (C4D1),a
 RO1A:7286 EA D2 C4         ld   (C4D2),a
 RO1A:7289 EA D3 C4         ld   (C4D3),a
 RO1A:728C 3E D2            ld   a,D2
 RO1A:728E EA D4 C4         ld   (C4D4),a
 RO1A:7291 AF               xor  a
 RO1A:7292 3E 72            ld   a,72
 RO1A:7294 EA D5 C4         ld   (C4D5),a
 RO1A:7297 3E 20            ld   a,20
 RO1A:7299 EA D6 C4         ld   (C4D6),a
 RO1A:729C 3E 1A            ld   a,1A
 RO1A:729E EA D7 C4         ld   (C4D7),a       // Instruction $1A:$7220
 RO1A:72A1 0E 00            ld   c,00
 RO1A:72A3 21 70 C0         ld   hl,C070
 RO1A:72A6 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:72AA 3E 7A            ld   a,7A
 RO1A:72AC CD 44 38         call 3844
 RO1A:72AF CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO1A:72B2 C9               ret  
 RO1A:72B3 AF               xor  a
 RO1A:72B4 EA CC C4         ld   (C4CC),a
 RO1A:72B7 EA CD C4         ld   (C4CD),a
 RO1A:72BA EA CE C4         ld   (C4CE),a
 RO1A:72BD EA D1 C4         ld   (C4D1),a
 RO1A:72C0 EA D2 C4         ld   (C4D2),a
 RO1A:72C3 3E 02            ld   a,02
 RO1A:72C5 EA D3 C4         ld   (C4D3),a
 RO1A:72C8 3E 94            ld   a,94
 RO1A:72CA EA D4 C4         ld   (C4D4),a
 RO1A:72CD AF               xor  a
 RO1A:72CE EA D5 C4         ld   (C4D5),a
 RO1A:72D1 EA D6 C4         ld   (C4D6),a
 RO1A:72D4 EA D7 C4         ld   (C4D7),a
 RO1A:72D7 C3 8A 02         jp   028A
 RO1A:72DA 3E 01            ld   a,01
 RO1A:72DC EA A0 C4         ld   (C4A0),a
 RO1A:72DF 3E 00            ld   a,00
 RO1A:72E1 E0 83            ld   (ff00+83),a
 RO1A:72E3 E0 4F            ld   (ff00+4F),a
 RO1A:72E5 3E 13            ld   a,13
 RO1A:72E7 21 00 80         ld   hl,8000
 RO1A:72EA EF 1A D7 43                          // Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
 RO1A:72EE 3E 01            ld   a,01
 RO1A:72F0 EA A0 C4         ld   (C4A0),a
 RO1A:72F3 3E 01            ld   a,01
 RO1A:72F5 E0 83            ld   (ff00+83),a
 RO1A:72F7 E0 4F            ld   (ff00+4F),a
 RO1A:72F9 3E 18            ld   a,18
 RO1A:72FB 21 00 80         ld   hl,8000
 RO1A:72FE EF 1A D7 43                          // Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
 RO1A:7302 21 4B 6F         ld   hl,6F4B
 RO1A:7305 0E 20            ld   c,20
 RO1A:7307 3E 08            ld   a,08
 RO1A:7309 06 08            ld   b,08
 RO1A:730B CD D9 06         call 06D9           // ($C4E0 + A * 8) to ($C4E0 + A * 8 + B * 8 - 1) hold C:(HL) to C:(HL + B * 8 - 1)
 RO1A:730E CD F2 06         call 06F2           // Both BG and Sprite Palette tables are updated
 RO1A:7311 3E A9            ld   a,A9
 RO1A:7313 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:7317 3E FF            ld   a,FF
 RO1A:7319 EA CC C4         ld   (C4CC),a
 RO1A:731C 3E 80            ld   a,80
 RO1A:731E EA CD C4         ld   (C4CD),a
 RO1A:7321 AF               xor  a
 RO1A:7322 EA CE C4         ld   (C4CE),a
 RO1A:7325 EA CF C4         ld   (C4CF),a
 RO1A:7328 EA D1 C4         ld   (C4D1),a
 RO1A:732B EA D2 C4         ld   (C4D2),a
 RO1A:732E EA D3 C4         ld   (C4D3),a
 RO1A:7331 3E 96            ld   a,96
 RO1A:7333 EA D4 C4         ld   (C4D4),a
 RO1A:7336 3E 72            ld   a,72
 RO1A:7338 EA D5 C4         ld   (C4D5),a
 RO1A:733B 3E B3            ld   a,B3
 RO1A:733D EA D6 C4         ld   (C4D6),a
 RO1A:7340 3E 1A            ld   a,1A
 RO1A:7342 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$72B3
 RO1A:7345 0E 00            ld   c,00
 RO1A:7347 21 60 A0         ld   hl,A060
 RO1A:734A EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:734E CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO1A:7351 3E BD            ld   a,BD
 RO1A:7353 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:7357 AF               xor  a
 RO1A:7358 EA CC C4         ld   (C4CC),a
 RO1A:735B EA CD C4         ld   (C4CD),a
 RO1A:735E EA CE C4         ld   (C4CE),a
 RO1A:7361 EA CF C4         ld   (C4CF),a
 RO1A:7364 EA D1 C4         ld   (C4D1),a
 RO1A:7367 3E B4            ld   a,B4
 RO1A:7369 EA D2 C4         ld   (C4D2),a
 RO1A:736C AF               xor  a
 RO1A:736D EA D3 C4         ld   (C4D3),a
 RO1A:7370 3E 22            ld   a,22
 RO1A:7372 EA D4 C4         ld   (C4D4),a
 RO1A:7375 AF               xor  a
 RO1A:7376 EA D5 C4         ld   (C4D5),a
 RO1A:7379 EA D6 C4         ld   (C4D6),a
 RO1A:737C EA D7 C4         ld   (C4D7),a
 RO1A:737F 3E 7C            ld   a,7C
 RO1A:7381 EA DB C4         ld   (C4DB),a
 RO1A:7384 0E 80            ld   c,80
 RO1A:7386 21 40 80         ld   hl,8040
 RO1A:7389 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:738D CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO1A:7390 3E BD            ld   a,BD
 RO1A:7392 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:7396 AF               xor  a
 RO1A:7397 EA CC C4         ld   (C4CC),a
 RO1A:739A EA CD C4         ld   (C4CD),a
 RO1A:739D EA CE C4         ld   (C4CE),a
 RO1A:73A0 EA CF C4         ld   (C4CF),a
 RO1A:73A3 EA D1 C4         ld   (C4D1),a
 RO1A:73A6 3E E6            ld   a,E6
 RO1A:73A8 EA D2 C4         ld   (C4D2),a
 RO1A:73AB AF               xor  a
 RO1A:73AC EA D3 C4         ld   (C4D3),a
 RO1A:73AF 3E 22            ld   a,22
 RO1A:73B1 EA D4 C4         ld   (C4D4),a
 RO1A:73B4 AF               xor  a
 RO1A:73B5 EA D5 C4         ld   (C4D5),a
 RO1A:73B8 EA D6 C4         ld   (C4D6),a
 RO1A:73BB EA D7 C4         ld   (C4D7),a
 RO1A:73BE 3E 7C            ld   a,7C
 RO1A:73C0 EA DB C4         ld   (C4DB),a
 RO1A:73C3 0E 80            ld   c,80
 RO1A:73C5 21 90 40         ld   hl,4090
 RO1A:73C8 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:73CC CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO1A:73CF 3E BD            ld   a,BD
 RO1A:73D1 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:73D5 AF               xor  a
 RO1A:73D6 EA CC C4         ld   (C4CC),a
 RO1A:73D9 EA CD C4         ld   (C4CD),a
 RO1A:73DC EA CE C4         ld   (C4CE),a
 RO1A:73DF EA CF C4         ld   (C4CF),a
 RO1A:73E2 3E 01            ld   a,01
 RO1A:73E4 EA D1 C4         ld   (C4D1),a
 RO1A:73E7 3E 04            ld   a,04
 RO1A:73E9 EA D2 C4         ld   (C4D2),a
 RO1A:73EC AF               xor  a
 RO1A:73ED EA D3 C4         ld   (C4D3),a
 RO1A:73F0 3E 22            ld   a,22
 RO1A:73F2 EA D4 C4         ld   (C4D4),a
 RO1A:73F5 AF               xor  a
 RO1A:73F6 EA D5 C4         ld   (C4D5),a
 RO1A:73F9 EA D6 C4         ld   (C4D6),a
 RO1A:73FC EA D7 C4         ld   (C4D7),a
 RO1A:73FF 3E 7C            ld   a,7C
 RO1A:7401 EA DB C4         ld   (C4DB),a
 RO1A:7404 0E 80            ld   c,80
 RO1A:7406 21 58 88         ld   hl,8858
 RO1A:7409 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:740D CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO1A:7410 C9               ret  
 RO1A:7411 AF               xor  a
 RO1A:7412 EA CC C4         ld   (C4CC),a
 RO1A:7415 EA CD C4         ld   (C4CD),a
 RO1A:7418 EA CE C4         ld   (C4CE),a
 RO1A:741B EA D1 C4         ld   (C4D1),a
 RO1A:741E EA D2 C4         ld   (C4D2),a
 RO1A:7421 EA D3 C4         ld   (C4D3),a
 RO1A:7424 3E 14            ld   a,14
 RO1A:7426 EA D4 C4         ld   (C4D4),a
 RO1A:7429 AF               xor  a
 RO1A:742A EA D5 C4         ld   (C4D5),a
 RO1A:742D EA D6 C4         ld   (C4D6),a
 RO1A:7430 EA D7 C4         ld   (C4D7),a
 RO1A:7433 3E BE            ld   a,BE
 RO1A:7435 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:7439 FA D0 C4         ld   a,(C4D0)
 RO1A:743C CD E8 2E         call 2EE8           // WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
 RO1A:743F C3 8A 02         jp   028A
 RO1A:7442 AF               xor  a
 RO1A:7443 EA CC C4         ld   (C4CC),a
 RO1A:7446 EA CD C4         ld   (C4CD),a
 RO1A:7449 EA CE C4         ld   (C4CE),a
 RO1A:744C EA D1 C4         ld   (C4D1),a
 RO1A:744F EA D2 C4         ld   (C4D2),a
 RO1A:7452 EA D3 C4         ld   (C4D3),a
 RO1A:7455 3E 22            ld   a,22
 RO1A:7457 EA D4 C4         ld   (C4D4),a
 RO1A:745A 3E 74            ld   a,74
 RO1A:745C EA D5 C4         ld   (C4D5),a
 RO1A:745F 3E 11            ld   a,11
 RO1A:7461 EA D6 C4         ld   (C4D6),a
 RO1A:7464 3E 1A            ld   a,1A
 RO1A:7466 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$7411
 RO1A:7469 3E BD            ld   a,BD
 RO1A:746B EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:746F FA D0 C4         ld   a,(C4D0)
 RO1A:7472 CD E8 2E         call 2EE8           // WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
 RO1A:7475 C3 8A 02         jp   028A
 RO1A:7478 AF               xor  a
 RO1A:7479 EA CC C4         ld   (C4CC),a
 RO1A:747C EA CD C4         ld   (C4CD),a
 RO1A:747F EA CE C4         ld   (C4CE),a
 RO1A:7482 EA D1 C4         ld   (C4D1),a
 RO1A:7485 EA D2 C4         ld   (C4D2),a
 RO1A:7488 EA D3 C4         ld   (C4D3),a
 RO1A:748B 3E 42            ld   a,42
 RO1A:748D EA D4 C4         ld   (C4D4),a
 RO1A:7490 3E 74            ld   a,74
 RO1A:7492 EA D5 C4         ld   (C4D5),a
 RO1A:7495 3E 42            ld   a,42
 RO1A:7497 EA D6 C4         ld   (C4D6),a
 RO1A:749A 3E 1A            ld   a,1A
 RO1A:749C EA D7 C4         ld   (C4D7),a       // Instruction $1A:$7442
 RO1A:749F 3E C4            ld   a,C4
 RO1A:74A1 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:74A5 FA D0 C4         ld   a,(C4D0)
 RO1A:74A8 CD E8 2E         call 2EE8           // WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
 RO1A:74AB 3E 7F            ld   a,7F
 RO1A:74AD CD 44 38         call 3844
 RO1A:74B0 C3 8A 02         jp   028A
 RO1A:74B3 AF               xor  a
 RO1A:74B4 EA CC C4         ld   (C4CC),a
 RO1A:74B7 EA CD C4         ld   (C4CD),a
 RO1A:74BA EA CE C4         ld   (C4CE),a
 RO1A:74BD EA D1 C4         ld   (C4D1),a
 RO1A:74C0 EA D2 C4         ld   (C4D2),a
 RO1A:74C3 EA D3 C4         ld   (C4D3),a
 RO1A:74C6 3E 78            ld   a,78
 RO1A:74C8 EA D4 C4         ld   (C4D4),a
 RO1A:74CB 3E 74            ld   a,74
 RO1A:74CD EA D5 C4         ld   (C4D5),a
 RO1A:74D0 3E 78            ld   a,78
 RO1A:74D2 EA D6 C4         ld   (C4D6),a
 RO1A:74D5 3E 1A            ld   a,1A
 RO1A:74D7 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$7478
 RO1A:74DA 3E C0            ld   a,C0
 RO1A:74DC EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:74E0 FA D0 C4         ld   a,(C4D0)
 RO1A:74E3 CD E8 2E         call 2EE8           // WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
 RO1A:74E6 C3 8A 02         jp   028A
 RO1A:74E9 3E 01            ld   a,01
 RO1A:74EB EA A0 C4         ld   (C4A0),a
 RO1A:74EE 3E 01            ld   a,01
 RO1A:74F0 E0 83            ld   (ff00+83),a
 RO1A:74F2 E0 4F            ld   (ff00+4F),a
 RO1A:74F4 3E 18            ld   a,18
 RO1A:74F6 21 00 80         ld   hl,8000
 RO1A:74F9 EF 1A D7 43                          // Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
 RO1A:74FD 21 4B 6F         ld   hl,6F4B
 RO1A:7500 0E 20            ld   c,20
 RO1A:7502 3E 08            ld   a,08
 RO1A:7504 06 08            ld   b,08
 RO1A:7506 CD D9 06         call 06D9           // ($C4E0 + A * 8) to ($C4E0 + A * 8 + B * 8 - 1) hold C:(HL) to C:(HL + B * 8 - 1)
 RO1A:7509 CD F2 06         call 06F2           // Both BG and Sprite Palette tables are updated
 RO1A:750C 3E C5            ld   a,C5
 RO1A:750E EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:7512 AF               xor  a
 RO1A:7513 EA CC C4         ld   (C4CC),a
 RO1A:7516 EA CD C4         ld   (C4CD),a
 RO1A:7519 EA CE C4         ld   (C4CE),a
 RO1A:751C EA CF C4         ld   (C4CF),a
 RO1A:751F EA D1 C4         ld   (C4D1),a
 RO1A:7522 EA D2 C4         ld   (C4D2),a
 RO1A:7525 EA D3 C4         ld   (C4D3),a
 RO1A:7528 3E 58            ld   a,58
 RO1A:752A EA D4 C4         ld   (C4D4),a
 RO1A:752D AF               xor  a
 RO1A:752E EA D5 C4         ld   (C4D5),a
 RO1A:7531 EA D6 C4         ld   (C4D6),a
 RO1A:7534 EA D7 C4         ld   (C4D7),a
 RO1A:7537 3E 7D            ld   a,7D
 RO1A:7539 EA DB C4         ld   (C4DB),a
 RO1A:753C 0E 80            ld   c,80
 RO1A:753E 21 4A 54         ld   hl,544A
 RO1A:7541 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:7545 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO1A:7548 AF               xor  a
 RO1A:7549 EA DB C4         ld   (C4DB),a
 RO1A:754C 3E BE            ld   a,BE
 RO1A:754E EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:7552 AF               xor  a
 RO1A:7553 EA CC C4         ld   (C4CC),a
 RO1A:7556 EA CD C4         ld   (C4CD),a
 RO1A:7559 EA CE C4         ld   (C4CE),a
 RO1A:755C EA CF C4         ld   (C4CF),a
 RO1A:755F EA D1 C4         ld   (C4D1),a
 RO1A:7562 EA D2 C4         ld   (C4D2),a
 RO1A:7565 EA D3 C4         ld   (C4D3),a
 RO1A:7568 3E 58            ld   a,58
 RO1A:756A EA D4 C4         ld   (C4D4),a
 RO1A:756D 3E 62            ld   a,62
 RO1A:756F EA D5 C4         ld   (C4D5),a
 RO1A:7572 3E 56            ld   a,56
 RO1A:7574 EA D6 C4         ld   (C4D6),a
 RO1A:7577 3E 13            ld   a,13
 RO1A:7579 EA D7 C4         ld   (C4D7),a       // Instruction $13:$6256
 RO1A:757C 0E 80            ld   c,80
 RO1A:757E 21 60 80         ld   hl,8060
 RO1A:7581 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:7585 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO1A:7588 3E C6            ld   a,C6
 RO1A:758A EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:758E AF               xor  a
 RO1A:758F EA CC C4         ld   (C4CC),a
 RO1A:7592 EA CD C4         ld   (C4CD),a
 RO1A:7595 EA CE C4         ld   (C4CE),a
 RO1A:7598 EA CF C4         ld   (C4CF),a
 RO1A:759B EA D1 C4         ld   (C4D1),a
 RO1A:759E 3E B2            ld   a,B2
 RO1A:75A0 EA D2 C4         ld   (C4D2),a
 RO1A:75A3 AF               xor  a
 RO1A:75A4 EA D3 C4         ld   (C4D3),a
 RO1A:75A7 3E 94            ld   a,94
 RO1A:75A9 EA D4 C4         ld   (C4D4),a
 RO1A:75AC AF               xor  a
 RO1A:75AD EA D5 C4         ld   (C4D5),a
 RO1A:75B0 EA D6 C4         ld   (C4D6),a
 RO1A:75B3 EA D7 C4         ld   (C4D7),a
 RO1A:75B6 0E 80            ld   c,80
 RO1A:75B8 21 48 70         ld   hl,7048
 RO1A:75BB EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:75BF CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO1A:75C2 C9               ret  
 RO1A:75C3 AF               xor  a
 RO1A:75C4 EA A0 C4         ld   (C4A0),a
 RO1A:75C7 3E 01            ld   a,01
 RO1A:75C9 E0 83            ld   (ff00+83),a
 RO1A:75CB E0 4F            ld   (ff00+4F),a
 RO1A:75CD 3E 12            ld   a,12
 RO1A:75CF 21 00 80         ld   hl,8000
 RO1A:75D2 EF 1A D7 43                          // Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
 RO1A:75D6 3E A6            ld   a,A6
 RO1A:75D8 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:75DC AF               xor  a
 RO1A:75DD EA CC C4         ld   (C4CC),a
 RO1A:75E0 EA CD C4         ld   (C4CD),a
 RO1A:75E3 EA CE C4         ld   (C4CE),a
 RO1A:75E6 EA CF C4         ld   (C4CF),a
 RO1A:75E9 EA D1 C4         ld   (C4D1),a
 RO1A:75EC EA D2 C4         ld   (C4D2),a
 RO1A:75EF 3E 01            ld   a,01
 RO1A:75F1 EA D3 C4         ld   (C4D3),a
 RO1A:75F4 3E E0            ld   a,E0
 RO1A:75F6 EA D4 C4         ld   (C4D4),a
 RO1A:75F9 AF               xor  a
 RO1A:75FA EA D5 C4         ld   (C4D5),a
 RO1A:75FD EA D6 C4         ld   (C4D6),a
 RO1A:7600 EA D7 C4         ld   (C4D7),a
 RO1A:7603 0E 80            ld   c,80
 RO1A:7605 21 90 38         ld   hl,3890
 RO1A:7608 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:760C CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO1A:760F C9               ret  
 RO1A:7610 F0 83            ld   a,(ff00+83)
 RO1A:7612 F5               push af
 RO1A:7613 3E 00            ld   a,00
 RO1A:7615 E0 83            ld   (ff00+83),a
 RO1A:7617 E0 4F            ld   (ff00+4F),a
 RO1A:7619 7C               ld   a,h
 RO1A:761A EA 21 C0         ld   (C021),a
 RO1A:761D 7D               ld   a,l
 RO1A:761E EA 22 C0         ld   (C022),a
 RO1A:7621 FA 23 C0         ld   a,(C023)       // Timer
 RO1A:7624 FE 14            cp   a,14
 RO1A:7626 DA 6C 76         jp   c,766C
 RO1A:7629 AF               xor  a
 RO1A:762A EA 23 C0         ld   (C023),a
 RO1A:762D FA 24 C0         ld   a,(C024)
 RO1A:7630 3C               inc  a
 RO1A:7631 EA 24 C0         ld   (C024),a
 RO1A:7634 FA 24 C0         ld   a,(C024)
 RO1A:7637 FE 03            cp   a,03
 RO1A:7639 DA 40 76         jp   c,7640
 RO1A:763C AF               xor  a
 RO1A:763D EA 24 C0         ld   (C024),a
 RO1A:7640 FA 24 C0         ld   a,(C024)
 RO1A:7643 06 30            ld   b,30
 RO1A:7645 CD 95 29         call 2995           // HL = 0, 48, or 96
 RO1A:7648 7C               ld   a,h
 RO1A:7649 47               ld   b,a
 RO1A:764A 7D               ld   a,l
 RO1A:764B 4F               ld   c,a            // BC = 0, 48, or 96
 RO1A:764C 21 16 66         ld   hl,6616
 RO1A:764F 09               add  hl,bc
 RO1A:7650 7C               ld   a,h
 RO1A:7651 57               ld   d,a
 RO1A:7652 7D               ld   a,l
 RO1A:7653 5F               ld   e,a
 RO1A:7654 D5               push de
 RO1A:7655 3E 20            ld   a,20
 RO1A:7657 06 10            ld   b,10
 RO1A:7659 CD 95 29         call 2995           // HL = A * B
 RO1A:765C 7C               ld   a,h
 RO1A:765D 47               ld   b,a
 RO1A:765E 7D               ld   a,l
 RO1A:765F 4F               ld   c,a
 RO1A:7660 21 00 90         ld   hl,9000
 RO1A:7663 09               add  hl,bc          // HL = $9200
 RO1A:7664 D1               pop  de
 RO1A:7665 01 30 00         ld   bc,0030
 RO1A:7668 EF 21 59 3B                          // (HL ~ HL+BC-1) = (DE ~ DE+BC-1)
 RO1A:766C FA 23 C0         ld   a,(C023)
 RO1A:766F 3C               inc  a
 RO1A:7670 EA 23 C0         ld   (C023),a
 RO1A:7673 F1               pop  af
 RO1A:7674 E0 83            ld   (ff00+83),a
 RO1A:7676 E0 4F            ld   (ff00+4F),a
 RO1A:7678 C9               ret  
 RO1A:7679 F0 83            ld   a,(ff00+83)
 RO1A:767B F5               push af
 RO1A:767C 3E 00            ld   a,00
 RO1A:767E E0 83            ld   (ff00+83),a
 RO1A:7680 E0 4F            ld   (ff00+4F),a
 RO1A:7682 7C               ld   a,h
 RO1A:7683 EA 21 C0         ld   (C021),a
 RO1A:7686 7D               ld   a,l
 RO1A:7687 EA 22 C0         ld   (C022),a
 RO1A:768A FA 23 C0         ld   a,(C023)
 RO1A:768D FE 14            cp   a,14
 RO1A:768F DA D5 76         jp   c,76D5
 RO1A:7692 AF               xor  a
 RO1A:7693 EA 23 C0         ld   (C023),a
 RO1A:7696 FA 24 C0         ld   a,(C024)
 RO1A:7699 3C               inc  a
 RO1A:769A EA 24 C0         ld   (C024),a
 RO1A:769D FA 24 C0         ld   a,(C024)
 RO1A:76A0 FE 03            cp   a,03
 RO1A:76A2 DA A9 76         jp   c,76A9
 RO1A:76A5 AF               xor  a
 RO1A:76A6 EA 24 C0         ld   (C024),a
 RO1A:76A9 FA 24 C0         ld   a,(C024)
 RO1A:76AC 06 30            ld   b,30
 RO1A:76AE CD 95 29         call 2995           // HL = A * B
 RO1A:76B1 7C               ld   a,h
 RO1A:76B2 47               ld   b,a
 RO1A:76B3 7D               ld   a,l
 RO1A:76B4 4F               ld   c,a
 RO1A:76B5 21 C6 69         ld   hl,69C6
 RO1A:76B8 09               add  hl,bc
 RO1A:76B9 7C               ld   a,h
 RO1A:76BA 57               ld   d,a
 RO1A:76BB 7D               ld   a,l
 RO1A:76BC 5F               ld   e,a
 RO1A:76BD D5               push de
 RO1A:76BE 3E 01            ld   a,01
 RO1A:76C0 06 10            ld   b,10
 RO1A:76C2 CD 95 29         call 2995           // HL = A * B
 RO1A:76C5 7C               ld   a,h
 RO1A:76C6 47               ld   b,a
 RO1A:76C7 7D               ld   a,l
 RO1A:76C8 4F               ld   c,a
 RO1A:76C9 21 00 90         ld   hl,9000
 RO1A:76CC 09               add  hl,bc
 RO1A:76CD D1               pop  de
 RO1A:76CE 01 30 00         ld   bc,0030
 RO1A:76D1 EF 21 59 3B                          // (HL ~ HL+BC-1) = (DE ~ DE+BC-1)
 RO1A:76D5 FA 23 C0         ld   a,(C023)
 RO1A:76D8 3C               inc  a
 RO1A:76D9 EA 23 C0         ld   (C023),a
 RO1A:76DC F1               pop  af
 RO1A:76DD E0 83            ld   (ff00+83),a
 RO1A:76DF E0 4F            ld   (ff00+4F),a
 RO1A:76E1 C9               ret  
 RO1A:76E2 C5               push bc
 RO1A:76E3 D5               push de
 RO1A:76E4 E5               push hl
 RO1A:76E5 3E 01            ld   a,01
 RO1A:76E7 21 A7 C6         ld   hl,C6A7
 RO1A:76EA CD C7 3A         call 3AC7           // A = [$C6A7] AND 2
 RO1A:76ED E1               pop  hl
 RO1A:76EE D1               pop  de
 RO1A:76EF C1               pop  bc
 RO1A:76F0 C9               ret  
 RO1A:76F1 C5               push bc
 RO1A:76F2 D5               push de
 RO1A:76F3 E5               push hl
 RO1A:76F4 3E 03            ld   a,03
 RO1A:76F6 21 A7 C6         ld   hl,C6A7
 RO1A:76F9 CD C7 3A         call 3AC7           // A = [$C6A7] AND 8
 RO1A:76FC E1               pop  hl
 RO1A:76FD D1               pop  de
 RO1A:76FE C1               pop  bc
 RO1A:76FF C9               ret  
 RO1A:7700 E5               push hl
 RO1A:7701 21 00 00         ld   hl,0000
 RO1A:7704 E5               push hl             // Loop begins here
 RO1A:7705 D5               push de
 RO1A:7706 C5               push bc
 RO1A:7707 CD A2 05         call 05A2           // Button update, next frame
 RO1A:770A CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO1A:770D EF 17 DF 40                          // Handles all sprite advanced behavior for the frame with sprites needing to spawn first
 RO1A:7711 CD 10 76         call 7610
 RO1A:7714 C1               pop  bc
 RO1A:7715 D1               pop  de
 RO1A:7716 E1               pop  hl
 RO1A:7717 CD CA 29         call 29CA           // Carry Flag active if DE < HL, A = 0 if DE = HL
 RO1A:771A 20 03            jr   nz,771F
 RO1A:771C AF               xor  a
 RO1A:771D 18 26            jr   7745
 RO1A:771F CD E2 76         call 76E2           // A = 2 if already halfway through Standard
 RO1A:7722 28 14            jr   z,7738
 RO1A:7724 F0 91            ld   a,(ff00+91)
 RO1A:7726 CB 47            bit  0,a            // A
 RO1A:7728 20 0A            jr   nz,7734
 RO1A:772A CB 4F            bit  1,a            // B
 RO1A:772C 20 06            jr   nz,7734
 RO1A:772E CB 5F            bit  3,a            // Start
 RO1A:7730 20 02            jr   nz,7734
 RO1A:7732 18 04            jr   7738
 RO1A:7734 AF               xor  a
 RO1A:7735 37               scf  
 RO1A:7736 18 0D            jr   7745
 RO1A:7738 F0 95            ld   a,(ff00+95)
 RO1A:773A 80               add  b
 RO1A:773B E0 95            ld   (ff00+95),a
 RO1A:773D F0 96            ld   a,(ff00+96)
 RO1A:773F 81               add  c
 RO1A:7740 E0 96            ld   (ff00+96),a
 RO1A:7742 23               inc  hl
 RO1A:7743 18 BF            jr   7704
 RO1A:7745 E1               pop  hl
 RO1A:7746 C9               ret  
 RO1A:7747 E5               push hl
 RO1A:7748 21 00 00         ld   hl,0000
 RO1A:774B E5               push hl             // Loop begins here
 RO1A:774C D5               push de
 RO1A:774D C5               push bc
 RO1A:774E CD A2 05         call 05A2           // Button update, next frame
 RO1A:7751 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO1A:7754 EF 17 DF 40                          // Handles all sprite advanced behavior for the frame with sprites needing to spawn first
 RO1A:7758 CD 79 76         call 7679
 RO1A:775B C1               pop  bc
 RO1A:775C D1               pop  de
 RO1A:775D E1               pop  hl
 RO1A:775E CD CA 29         call 29CA           // Carry Flag active if DE < HL, A = 0 if DE = HL
 RO1A:7761 20 03            jr   nz,7766
 RO1A:7763 AF               xor  a
 RO1A:7764 18 26            jr   778C
 RO1A:7766 CD E2 76         call 76E2           // A = 2 if already halfway through Standard
 RO1A:7769 28 14            jr   z,777F
 RO1A:776B F0 91            ld   a,(ff00+91)
 RO1A:776D CB 47            bit  0,a            // A
 RO1A:776F 20 0A            jr   nz,777B
 RO1A:7771 CB 4F            bit  1,a            // B
 RO1A:7773 20 06            jr   nz,777B
 RO1A:7775 CB 5F            bit  3,a            // Start
 RO1A:7777 20 02            jr   nz,777B
 RO1A:7779 18 04            jr   777F
 RO1A:777B AF               xor  a
 RO1A:777C 37               scf  
 RO1A:777D 18 0D            jr   778C
 RO1A:777F F0 95            ld   a,(ff00+95)
 RO1A:7781 80               add  b
 RO1A:7782 E0 95            ld   (ff00+95),a
 RO1A:7784 F0 96            ld   a,(ff00+96)
 RO1A:7786 81               add  c
 RO1A:7787 E0 96            ld   (ff00+96),a
 RO1A:7789 23               inc  hl
 RO1A:778A 18 BF            jr   774B
 RO1A:778C E1               pop  hl
 RO1A:778D C9               ret  
 RO1A:778E E5               push hl
 RO1A:778F 21 00 00         ld   hl,0000
 RO1A:7792 E5               push hl             // Loop begins here
 RO1A:7793 D5               push de
 RO1A:7794 C5               push bc
 RO1A:7795 CD A2 05         call 05A2           // Button update, next frame
 RO1A:7798 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO1A:779B EF 17 DF 40                          // Handles all sprite advanced behavior for the frame with sprites needing to spawn first
 RO1A:779F C1               pop  bc
 RO1A:77A0 D1               pop  de
 RO1A:77A1 E1               pop  hl
 RO1A:77A2 CD CA 29         call 29CA           // Carry Flag active if DE < HL, A = 0 if DE = HL
 RO1A:77A5 20 03            jr   nz,77AA
 RO1A:77A7 AF               xor  a
 RO1A:77A8 18 26            jr   77D0
 RO1A:77AA CD E2 76         call 76E2           // A = 2 if already halfway through Standard
 RO1A:77AD 28 14            jr   z,77C3
 RO1A:77AF F0 91            ld   a,(ff00+91)
 RO1A:77B1 CB 47            bit  0,a            // A
 RO1A:77B3 20 0A            jr   nz,77BF
 RO1A:77B5 CB 4F            bit  1,a            // B
 RO1A:77B7 20 06            jr   nz,77BF
 RO1A:77B9 CB 5F            bit  3,a            // Start
 RO1A:77BB 20 02            jr   nz,77BF
 RO1A:77BD 18 04            jr   77C3
 RO1A:77BF AF               xor  a
 RO1A:77C0 37               scf  
 RO1A:77C1 18 0D            jr   77D0
 RO1A:77C3 F0 95            ld   a,(ff00+95)
 RO1A:77C5 80               add  b
 RO1A:77C6 E0 95            ld   (ff00+95),a
 RO1A:77C8 F0 96            ld   a,(ff00+96)
 RO1A:77CA 81               add  c
 RO1A:77CB E0 96            ld   (ff00+96),a
 RO1A:77CD 23               inc  hl
 RO1A:77CE 18 C2            jr   7792
 RO1A:77D0 E1               pop  hl
 RO1A:77D1 C9               ret  
 RO1A:77D2 E5               push hl
 RO1A:77D3 21 00 00         ld   hl,0000
 RO1A:77D6 E5               push hl             // Loop begins here
 RO1A:77D7 D5               push de
 RO1A:77D8 C5               push bc
 RO1A:77D9 CD A2 05         call 05A2           // Button update, next frame
 RO1A:77DC CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO1A:77DF EF 17 DF 40                          // Handles all sprite advanced behavior for the frame with sprites needing to spawn first
 RO1A:77E3 C1               pop  bc
 RO1A:77E4 D1               pop  de
 RO1A:77E5 E1               pop  hl
 RO1A:77E6 CD CA 29         call 29CA           // Carry Flag active if DE < HL, A = 0 if DE = HL
 RO1A:77E9 20 03            jr   nz,77EE
 RO1A:77EB AF               xor  a
 RO1A:77EC 18 26            jr   7814           // End immediately with A = 0 if DE = HL
 RO1A:77EE CD F1 76         call 76F1           // A = 8 if already completed Standard
 RO1A:77F1 28 14            jr   z,7807         // Button press ignored if incomplete
 RO1A:77F3 F0 91            ld   a,(ff00+91)
 RO1A:77F5 CB 47            bit  0,a            // A
 RO1A:77F7 20 0A            jr   nz,7803
 RO1A:77F9 CB 4F            bit  1,a            // B
 RO1A:77FB 20 06            jr   nz,7803
 RO1A:77FD CB 5F            bit  3,a            // Start
 RO1A:77FF 20 02            jr   nz,7803
 RO1A:7801 18 04            jr   7807
 RO1A:7803 AF               xor  a
 RO1A:7804 37               scf  
 RO1A:7805 18 0D            jr   7814           // End immediately with 0 and Carry Flags set on valid button press
 RO1A:7807 F0 95            ld   a,(ff00+95)
 RO1A:7809 80               add  b
 RO1A:780A E0 95            ld   (ff00+95),a
 RO1A:780C F0 96            ld   a,(ff00+96)
 RO1A:780E 81               add  c
 RO1A:780F E0 96            ld   (ff00+96),a
 RO1A:7811 23               inc  hl
 RO1A:7812 18 C2            jr   77D6
 RO1A:7814 E1               pop  hl
 RO1A:7815 C9               ret  
 RO1A:7816 CD BB 6F         call 6FBB           // Empties all graphics to prepare graphical scene
 RO1A:7819 3E 14            ld   a,14
 RO1A:781B 0E 00            ld   c,00
 RO1A:781D EF 1A AF 42                          // Handles backdrop graphics as a whole (A is Backdrop number, B is used palette set) (starting Y of main attraction not set to 4)
 RO1A:7821 CD E6 6F         call 6FE6
 RO1A:7824 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO1A:7827 CD D2 04         call 04D2           // Next frame
 RO1A:782A 3E 1D            ld   a,1D
 RO1A:782C CD 16 38         call 3816
 RO1A:782F CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 RO1A:7832 11 2C 01         ld   de,012C        // 300
 RO1A:7835 01 00 FE         ld   bc,FE00
 RO1A:7838 CD 8E 77         call 778E
 RO1A:783B 38 74            jr   c,78B1
 RO1A:783D CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 RO1A:7840 CD BB 6F         call 6FBB           // Empties all graphics to prepare graphical scene
 RO1A:7843 3E 15            ld   a,15
 RO1A:7845 0E 00            ld   c,00
 RO1A:7847 EF 1A AF 42                          // Handles backdrop graphics as a whole (A is Backdrop number, B is used palette set) (starting Y of main attraction not set to 4)
 RO1A:784B CD CF 70         call 70CF
 RO1A:784E CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO1A:7851 11 01 00         ld   de,0001        // 1
 RO1A:7854 01 00 00         ld   bc,0000
 RO1A:7857 CD 8E 77         call 778E
 RO1A:785A CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 RO1A:785D 11 76 02         ld   de,0276        // 630
 RO1A:7860 01 00 00         ld   bc,0000
 RO1A:7863 CD 00 77         call 7700
 RO1A:7866 38 49            jr   c,78B1
 RO1A:7868 CD 5C 72         call 725C
 RO1A:786B 11 2C 01         ld   de,012C        // 300
 RO1A:786E 01 00 00         ld   bc,0000
 RO1A:7871 CD 00 77         call 7700
 RO1A:7874 38 3B            jr   c,78B1
 RO1A:7876 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 RO1A:7879 CD BB 6F         call 6FBB           // Empties all graphics to prepare graphical scene
 RO1A:787C 3E 16            ld   a,16
 RO1A:787E 0E 00            ld   c,00
 RO1A:7880 EF 1A AF 42                          // Handles backdrop graphics as a whole (A is Backdrop number, B is used palette set) (starting Y of main attraction not set to 4)
 RO1A:7884 CD DA 72         call 72DA
 RO1A:7887 CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 RO1A:788A 11 86 01         ld   de,0186        // 390
 RO1A:788D 01 00 00         ld   bc,0000
 RO1A:7890 CD 47 77         call 7747
 RO1A:7893 38 1C            jr   c,78B1
 RO1A:7895 CD E9 74         call 74E9
 RO1A:7898 11 E4 02         ld   de,02E4        // 740
 RO1A:789B 01 00 00         ld   bc,0000
 RO1A:789E CD 47 77         call 7747
 RO1A:78A1 38 0E            jr   c,78B1
 RO1A:78A3 CD C3 75         call 75C3
 RO1A:78A6 11 E0 01         ld   de,01E0        // 480
 RO1A:78A9 01 00 00         ld   bc,0000
 RO1A:78AC CD 47 77         call 7747
 RO1A:78AF 38 00            jr   c,78B1
 RO1A:78B1 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 RO1A:78B4 CD 15 38         call 3815
 RO1A:78B7 EF 17 00 40                          // Clear all sprites in $C300 table, empties ($C4C8~$C4DB), WRA4($DB2C), WRA4($DB2E) 2 byte, and WRA4($D3AC~$DB2B)
 RO1A:78BB C9               ret  
 RO1A:78BC AF               xor  a
 RO1A:78BD EA A0 C4         ld   (C4A0),a
 RO1A:78C0 3E 00            ld   a,00
 RO1A:78C2 E0 83            ld   (ff00+83),a
 RO1A:78C4 E0 4F            ld   (ff00+4F),a
 RO1A:78C6 3E 17            ld   a,17
 RO1A:78C8 21 00 80         ld   hl,8000
 RO1A:78CB EF 1A D7 43                          // Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
 RO1A:78CF 3E BB            ld   a,BB
 RO1A:78D1 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:78D5 3E FF            ld   a,FF
 RO1A:78D7 EA CC C4         ld   (C4CC),a
 RO1A:78DA AF               xor  a
 RO1A:78DB EA CE C4         ld   (C4CE),a
 RO1A:78DE EA D1 C4         ld   (C4D1),a
 RO1A:78E1 3E 3C            ld   a,3C
 RO1A:78E3 EA D2 C4         ld   (C4D2),a
 RO1A:78E6 AF               xor  a
 RO1A:78E7 EA D3 C4         ld   (C4D3),a
 RO1A:78EA 3E 64            ld   a,64
 RO1A:78EC EA D4 C4         ld   (C4D4),a
 RO1A:78EF 3E 6F            ld   a,6F
 RO1A:78F1 EA D5 C4         ld   (C4D5),a
 RO1A:78F4 3E C4            ld   a,C4
 RO1A:78F6 EA D6 C4         ld   (C4D6),a
 RO1A:78F9 3E 1A            ld   a,1A
 RO1A:78FB EA D7 C4         ld   (C4D7),a       // Instruction $1A:$6FC4
 RO1A:78FE 0E 00            ld   c,00
 RO1A:7900 21 70 B0         ld   hl,B070
 RO1A:7903 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:7907 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO1A:790A 3E BB            ld   a,BB
 RO1A:790C EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:7910 3E FF            ld   a,FF
 RO1A:7912 EA CC C4         ld   (C4CC),a
 RO1A:7915 AF               xor  a
 RO1A:7916 EA CE C4         ld   (C4CE),a
 RO1A:7919 EA D1 C4         ld   (C4D1),a
 RO1A:791C 3E 3C            ld   a,3C
 RO1A:791E EA D2 C4         ld   (C4D2),a
 RO1A:7921 AF               xor  a
 RO1A:7922 EA D3 C4         ld   (C4D3),a
 RO1A:7925 3E 64            ld   a,64
 RO1A:7927 EA D4 C4         ld   (C4D4),a
 RO1A:792A 3E 6F            ld   a,6F
 RO1A:792C EA D5 C4         ld   (C4D5),a
 RO1A:792F 3E C4            ld   a,C4
 RO1A:7931 EA D6 C4         ld   (C4D6),a
 RO1A:7934 3E 1A            ld   a,1A
 RO1A:7936 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$6FC4
 RO1A:7939 0E 00            ld   c,00
 RO1A:793B 21 70 E0         ld   hl,E070
 RO1A:793E EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:7942 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO1A:7945 21 31 51         ld   hl,5131
 RO1A:7948 0E 21            ld   c,21
 RO1A:794A 3E 08            ld   a,08
 RO1A:794C 06 08            ld   b,08
 RO1A:794E CD D9 06         call 06D9           // ($C4E0 + A * 8) to ($C4E0 + A * 8 + B * 8 - 1) hold C:(HL) to C:(HL + B * 8 - 1)
 RO1A:7951 CD F2 06         call 06F2           // Both BG and Sprite Palette tables are updated
 RO1A:7954 C9               ret  
 RO1A:7955 AF               xor  a
 RO1A:7956 EA CC C4         ld   (C4CC),a
 RO1A:7959 3E FE            ld   a,FE
 RO1A:795B EA CE C4         ld   (C4CE),a
 RO1A:795E AF               xor  a
 RO1A:795F EA CF C4         ld   (C4CF),a
 RO1A:7962 AF               xor  a
 RO1A:7963 EA D1 C4         ld   (C4D1),a
 RO1A:7966 EA D2 C4         ld   (C4D2),a
 RO1A:7969 EA D3 C4         ld   (C4D3),a
 RO1A:796C 3E 42            ld   a,42
 RO1A:796E EA D4 C4         ld   (C4D4),a
 RO1A:7971 AF               xor  a
 RO1A:7972 EA D5 C4         ld   (C4D5),a
 RO1A:7975 EA D6 C4         ld   (C4D6),a
 RO1A:7978 EA D7 C4         ld   (C4D7),a
 RO1A:797B C3 8A 02         jp   028A
 RO1A:797E AF               xor  a
 RO1A:797F EA CC C4         ld   (C4CC),a
 RO1A:7982 3E FF            ld   a,FF
 RO1A:7984 EA CE C4         ld   (C4CE),a
 RO1A:7987 AF               xor  a
 RO1A:7988 EA CF C4         ld   (C4CF),a
 RO1A:798B AF               xor  a
 RO1A:798C EA D1 C4         ld   (C4D1),a
 RO1A:798F EA D2 C4         ld   (C4D2),a
 RO1A:7992 EA D3 C4         ld   (C4D3),a
 RO1A:7995 3E 08            ld   a,08
 RO1A:7997 EA D4 C4         ld   (C4D4),a
 RO1A:799A 3E 79            ld   a,79
 RO1A:799C EA D5 C4         ld   (C4D5),a
 RO1A:799F 3E 55            ld   a,55
 RO1A:79A1 EA D6 C4         ld   (C4D6),a
 RO1A:79A4 3E 1A            ld   a,1A
 RO1A:79A6 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$7955
 RO1A:79A9 C3 8A 02         jp   028A
 RO1A:79AC AF               xor  a
 RO1A:79AD EA CC C4         ld   (C4CC),a
 RO1A:79B0 3E FF            ld   a,FF
 RO1A:79B2 EA CE C4         ld   (C4CE),a
 RO1A:79B5 3E 80            ld   a,80
 RO1A:79B7 EA CF C4         ld   (C4CF),a
 RO1A:79BA AF               xor  a
 RO1A:79BB EA D1 C4         ld   (C4D1),a
 RO1A:79BE EA D2 C4         ld   (C4D2),a
 RO1A:79C1 EA D3 C4         ld   (C4D3),a
 RO1A:79C4 3E 30            ld   a,30
 RO1A:79C6 EA D4 C4         ld   (C4D4),a
 RO1A:79C9 3E 79            ld   a,79
 RO1A:79CB EA D5 C4         ld   (C4D5),a
 RO1A:79CE 3E 7E            ld   a,7E
 RO1A:79D0 EA D6 C4         ld   (C4D6),a
 RO1A:79D3 3E 1A            ld   a,1A
 RO1A:79D5 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$797E
 RO1A:79D8 3E B8            ld   a,B8
 RO1A:79DA EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:79DE FA D0 C4         ld   a,(C4D0)
 RO1A:79E1 CD E8 2E         call 2EE8           // WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
 RO1A:79E4 C3 8A 02         jp   028A
 RO1A:79E7 AF               xor  a
 RO1A:79E8 EA CC C4         ld   (C4CC),a
 RO1A:79EB EA CE C4         ld   (C4CE),a
 RO1A:79EE EA D1 C4         ld   (C4D1),a
 RO1A:79F1 EA D2 C4         ld   (C4D2),a
 RO1A:79F4 EA D3 C4         ld   (C4D3),a
 RO1A:79F7 3E 98            ld   a,98
 RO1A:79F9 EA D4 C4         ld   (C4D4),a
 RO1A:79FC 3E 79            ld   a,79
 RO1A:79FE EA D5 C4         ld   (C4D5),a
 RO1A:7A01 3E AC            ld   a,AC
 RO1A:7A03 EA D6 C4         ld   (C4D6),a
 RO1A:7A06 3E 1A            ld   a,1A
 RO1A:7A08 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$79AC
 RO1A:7A0B 3E B9            ld   a,B9
 RO1A:7A0D EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:7A11 FA D0 C4         ld   a,(C4D0)
 RO1A:7A14 CD E8 2E         call 2EE8           // WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
 RO1A:7A17 3E 80            ld   a,80
 RO1A:7A19 CD 44 38         call 3844
 RO1A:7A1C C3 8A 02         jp   028A
 RO1A:7A1F 3E FF            ld   a,FF
 RO1A:7A21 EA CC C4         ld   (C4CC),a
 RO1A:7A24 AF               xor  a
 RO1A:7A25 EA CD C4         ld   (C4CD),a
 RO1A:7A28 3E FE            ld   a,FE
 RO1A:7A2A EA CE C4         ld   (C4CE),a
 RO1A:7A2D AF               xor  a
 RO1A:7A2E EA CF C4         ld   (C4CF),a
 RO1A:7A31 3E 7A            ld   a,7A
 RO1A:7A33 EA D5 C4         ld   (C4D5),a
 RO1A:7A36 3E 52            ld   a,52
 RO1A:7A38 EA D6 C4         ld   (C4D6),a
 RO1A:7A3B 3E 1A            ld   a,1A
 RO1A:7A3D EA D7 C4         ld   (C4D7),a       // Instruction $1A:$7A52
 RO1A:7A40 AF               xor  a
 RO1A:7A41 EA D3 C4         ld   (C4D3),a
 RO1A:7A44 3E 02            ld   a,02
 RO1A:7A46 EA D4 C4         ld   (C4D4),a
 RO1A:7A49 FA D0 C4         ld   a,(C4D0)
 RO1A:7A4C CD 2B 2F         call 2F2B           // res 1,WRA4[$D000 + A * 16]
 RO1A:7A4F C3 8A 02         jp   028A
 RO1A:7A52 3E FF            ld   a,FF
 RO1A:7A54 EA CC C4         ld   (C4CC),a
 RO1A:7A57 AF               xor  a
 RO1A:7A58 EA CD C4         ld   (C4CD),a
 RO1A:7A5B 3E FF            ld   a,FF
 RO1A:7A5D EA CE C4         ld   (C4CE),a
 RO1A:7A60 AF               xor  a
 RO1A:7A61 EA CF C4         ld   (C4CF),a
 RO1A:7A64 3E 7A            ld   a,7A
 RO1A:7A66 EA D5 C4         ld   (C4D5),a
 RO1A:7A69 3E 85            ld   a,85
 RO1A:7A6B EA D6 C4         ld   (C4D6),a
 RO1A:7A6E 3E 1A            ld   a,1A
 RO1A:7A70 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$7A85
 RO1A:7A73 AF               xor  a
 RO1A:7A74 EA D3 C4         ld   (C4D3),a
 RO1A:7A77 3E 04            ld   a,04
 RO1A:7A79 EA D4 C4         ld   (C4D4),a
 RO1A:7A7C FA D0 C4         ld   a,(C4D0)
 RO1A:7A7F CD 2B 2F         call 2F2B           // res 1,WRA4[$D000 + A * 16]
 RO1A:7A82 C3 8A 02         jp   028A
 RO1A:7A85 3E FF            ld   a,FF
 RO1A:7A87 EA CC C4         ld   (C4CC),a
 RO1A:7A8A AF               xor  a
 RO1A:7A8B EA CD C4         ld   (C4CD),a
 RO1A:7A8E 3E FF            ld   a,FF
 RO1A:7A90 EA CE C4         ld   (C4CE),a
 RO1A:7A93 3E 80            ld   a,80
 RO1A:7A95 EA CF C4         ld   (C4CF),a
 RO1A:7A98 AF               xor  a
 RO1A:7A99 EA D5 C4         ld   (C4D5),a
 RO1A:7A9C EA D6 C4         ld   (C4D6),a
 RO1A:7A9F EA D7 C4         ld   (C4D7),a
 RO1A:7AA2 EA D3 C4         ld   (C4D3),a
 RO1A:7AA5 3E 08            ld   a,08
 RO1A:7AA7 EA D4 C4         ld   (C4D4),a
 RO1A:7AAA FA D0 C4         ld   a,(C4D0)
 RO1A:7AAD CD 2B 2F         call 2F2B           // res 1,WRA4[$D000 + A * 16]
 RO1A:7AB0 C3 8A 02         jp   028A
 RO1A:7AB3 AF               xor  a
 RO1A:7AB4 EA A0 C4         ld   (C4A0),a
 RO1A:7AB7 3E 01            ld   a,01
 RO1A:7AB9 E0 83            ld   (ff00+83),a
 RO1A:7ABB E0 4F            ld   (ff00+4F),a
 RO1A:7ABD 3E 15            ld   a,15
 RO1A:7ABF 21 00 80         ld   hl,8000
 RO1A:7AC2 EF 1A D7 43                          // Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
 RO1A:7AC6 AF               xor  a
 RO1A:7AC7 EA A0 C4         ld   (C4A0),a
 RO1A:7ACA 3E 00            ld   a,00
 RO1A:7ACC E0 83            ld   (ff00+83),a
 RO1A:7ACE E0 4F            ld   (ff00+4F),a
 RO1A:7AD0 3E 0D            ld   a,0D           // Infantry
 RO1A:7AD2 21 00 80         ld   hl,8000
 RO1A:7AD5 EF 1A D7 43                          // Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
 RO1A:7AD9 3E 93            ld   a,93           // Soldier basic running (left)
 RO1A:7ADB EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:7ADF 3E FF            ld   a,FF
 RO1A:7AE1 EA CC C4         ld   (C4CC),a
 RO1A:7AE4 AF               xor  a
 RO1A:7AE5 EA CE C4         ld   (C4CE),a
 RO1A:7AE8 EA D1 C4         ld   (C4D1),a
 RO1A:7AEB 3E 3C            ld   a,3C
 RO1A:7AED EA D2 C4         ld   (C4D2),a
 RO1A:7AF0 AF               xor  a
 RO1A:7AF1 EA D3 C4         ld   (C4D3),a
 RO1A:7AF4 3E 32            ld   a,32
 RO1A:7AF6 EA D4 C4         ld   (C4D4),a
 RO1A:7AF9 3E 7A            ld   a,7A
 RO1A:7AFB EA D5 C4         ld   (C4D5),a
 RO1A:7AFE 3E 1F            ld   a,1F
 RO1A:7B00 EA D6 C4         ld   (C4D6),a
 RO1A:7B03 3E 1A            ld   a,1A
 RO1A:7B05 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$7A1F
 RO1A:7B08 0E 00            ld   c,00
 RO1A:7B0A 21 74 B0         ld   hl,B074
 RO1A:7B0D EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:7B11 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO1A:7B14 3E 93            ld   a,93           // Soldier basic running (left)
 RO1A:7B16 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:7B1A 3E FF            ld   a,FF
 RO1A:7B1C EA CC C4         ld   (C4CC),a
 RO1A:7B1F AF               xor  a
 RO1A:7B20 EA CE C4         ld   (C4CE),a
 RO1A:7B23 EA D1 C4         ld   (C4D1),a
 RO1A:7B26 3E 5A            ld   a,5A
 RO1A:7B28 EA D2 C4         ld   (C4D2),a
 RO1A:7B2B AF               xor  a
 RO1A:7B2C EA D3 C4         ld   (C4D3),a
 RO1A:7B2F 3E 32            ld   a,32
 RO1A:7B31 EA D4 C4         ld   (C4D4),a
 RO1A:7B34 3E 7A            ld   a,7A
 RO1A:7B36 EA D5 C4         ld   (C4D5),a
 RO1A:7B39 3E 1F            ld   a,1F
 RO1A:7B3B EA D6 C4         ld   (C4D6),a
 RO1A:7B3E 3E 1A            ld   a,1A
 RO1A:7B40 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$7A1F
 RO1A:7B43 0E 00            ld   c,00
 RO1A:7B45 21 74 B0         ld   hl,B074
 RO1A:7B48 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:7B4C CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO1A:7B4F 3E B7            ld   a,B7
 RO1A:7B51 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:7B55 AF               xor  a
 RO1A:7B56 EA CC C4         ld   (C4CC),a
 RO1A:7B59 EA CD C4         ld   (C4CD),a
 RO1A:7B5C EA CE C4         ld   (C4CE),a
 RO1A:7B5F EA CF C4         ld   (C4CF),a
 RO1A:7B62 EA D1 C4         ld   (C4D1),a
 RO1A:7B65 EA D2 C4         ld   (C4D2),a
 RO1A:7B68 EA D3 C4         ld   (C4D3),a
 RO1A:7B6B 3E D2            ld   a,D2
 RO1A:7B6D EA D4 C4         ld   (C4D4),a
 RO1A:7B70 3E 79            ld   a,79
 RO1A:7B72 EA D5 C4         ld   (C4D5),a
 RO1A:7B75 3E E7            ld   a,E7
 RO1A:7B77 EA D6 C4         ld   (C4D6),a
 RO1A:7B7A 3E 1A            ld   a,1A
 RO1A:7B7C EA D7 C4         ld   (C4D7),a       // Instruction $1A:$79E7
 RO1A:7B7F 0E 80            ld   c,80
 RO1A:7B81 21 74 58         ld   hl,5874
 RO1A:7B84 EF 17 63 40                          // WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
 RO1A:7B88 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO1A:7B8B 11 01 00         ld   de,0001        // 1
 RO1A:7B8E 01 00 00         ld   bc,0000
 RO1A:7B91 CD 8E 77         call 778E
 RO1A:7B94 C9               ret  
 RO1A:7B95 3E FF            ld   a,FF
 RO1A:7B97 EA CC C4         ld   (C4CC),a
 RO1A:7B9A 3E 80            ld   a,80
 RO1A:7B9C EA CD C4         ld   (C4CD),a
 RO1A:7B9F AF               xor  a
 RO1A:7BA0 EA CE C4         ld   (C4CE),a
 RO1A:7BA3 3E 40            ld   a,40
 RO1A:7BA5 EA CF C4         ld   (C4CF),a
 RO1A:7BA8 AF               xor  a
 RO1A:7BA9 EA D1 C4         ld   (C4D1),a
 RO1A:7BAC EA D2 C4         ld   (C4D2),a
 RO1A:7BAF 3E 01            ld   a,01
 RO1A:7BB1 EA D3 C4         ld   (C4D3),a
 RO1A:7BB4 AF               xor  a
 RO1A:7BB5 EA D4 C4         ld   (C4D4),a
 RO1A:7BB8 AF               xor  a
 RO1A:7BB9 EA D5 C4         ld   (C4D5),a
 RO1A:7BBC EA D6 C4         ld   (C4D6),a
 RO1A:7BBF EA D7 C4         ld   (C4D7),a
 RO1A:7BC2 C3 8A 02         jp   028A
 RO1A:7BC5 AF               xor  a
 RO1A:7BC6 EA CC C4         ld   (C4CC),a
 RO1A:7BC9 EA CD C4         ld   (C4CD),a
 RO1A:7BCC EA CE C4         ld   (C4CE),a
 RO1A:7BCF EA CF C4         ld   (C4CF),a
 RO1A:7BD2 EA D1 C4         ld   (C4D1),a
 RO1A:7BD5 EA D2 C4         ld   (C4D2),a
 RO1A:7BD8 EA D3 C4         ld   (C4D3),a
 RO1A:7BDB 3E 1E            ld   a,1E
 RO1A:7BDD EA D4 C4         ld   (C4D4),a
 RO1A:7BE0 3E 7B            ld   a,7B
 RO1A:7BE2 EA D5 C4         ld   (C4D5),a
 RO1A:7BE5 3E 95            ld   a,95
 RO1A:7BE7 EA D6 C4         ld   (C4D6),a
 RO1A:7BEA 3E 1A            ld   a,1A
 RO1A:7BEC EA D7 C4         ld   (C4D7),a       // Instruction $1A:$7B95
 RO1A:7BEF 3E DB            ld   a,DB
 RO1A:7BF1 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO1A:7BF5 3E 82            ld   a,82
 RO1A:7BF7 CD 44 38         call 3844
 RO1A:7BFA FA D0 C4         ld   a,(C4D0)
 RO1A:7BFD CD E8 2E         call 2EE8           // WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
 RO1A:7C00 C3 8A 02         jp   028A
 RO1A:7C03 AF               xor  a
 RO1A:7C04 EA CC C4         ld   (C4CC),a
 RO1A:7C07 EA CD C4         ld   (C4CD),a
 RO1A:7C0A EA CE C4         ld   (C4CE),a
 RO1A:7C0D EA CF C4         ld   (C4CF),a
 RO1A:7C10 EA D1 C4         ld   (C4D1),a
 RO1A:7C13 EA D2 C4         ld   (C4D2),a
 RO1A:7C16 3E 01            ld   a,01
 RO1A:7C18 EA D3 C4         ld   (C4D3),a
 RO1A:7C1B 3E 3B            ld   a,3B
 RO1A:7C1D EA D4 C4         ld   (C4D4),a
 RO1A:7C20 3E 7B            ld   a,7B
 RO1A:7C22 EA D5 C4         ld   (C4D5),a
 RO1A:7C25 3E C5            ld   a,C5
 RO1A:7C27 EA D6 C4         ld   (C4D6),a
 RO1A:7C2A 3E 1A            ld   a,1A
 RO1A:7C2C EA D7 C4         ld   (C4D7),a       // Instruction $1A:$7BC5
 RO1A:7C2F C3 8A 02         jp   028A
 RO1A:7C32 CD BB 6F         call 6FBB           // Empties all graphics to prepare graphical scene
 RO1A:7C35 3E 14            ld   a,14
 RO1A:7C37 0E 00            ld   c,00
 RO1A:7C39 EF 1A AF 42                          // Handles backdrop graphics as a whole (A is Backdrop number, B is used palette set) (starting Y of main attraction not set to 4)
 RO1A:7C3D CD BC 78         call 78BC
 RO1A:7C40 3E 1E            ld   a,1E
 RO1A:7C42 CD 16 38         call 3816
 RO1A:7C45 CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 RO1A:7C48 11 2C 01         ld   de,012C        // DE = 300
 RO1A:7C4B 01 00 FE         ld   bc,FE00        // -2,0
 RO1A:7C4E CD D2 77         call 77D2           // Window Shift, ending with Carry Flag set if not hitting natural timeout (BC is per frame shift, DE is timer)
 RO1A:7C51 DA 18 7D         jp   c,7D18
 RO1A:7C54 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 RO1A:7C57 CD BB 6F         call 6FBB           // Empties all graphics to prepare graphical scene
 RO1A:7C5A 3E 14            ld   a,14
 RO1A:7C5C 0E 00            ld   c,00
 RO1A:7C5E EF 1A AF 42                          // Handles backdrop graphics as a whole (A is Backdrop number, B is used palette set) (starting Y of main attraction not set to 4)
 RO1A:7C62 CD B3 7A         call 7AB3
 RO1A:7C65 CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 RO1A:7C68 11 FE 01         ld   de,01FE        // DE = 510
 RO1A:7C6B 01 00 00         ld   bc,0000        // 0,0
 RO1A:7C6E CD D2 77         call 77D2           // Window Shift, ending with Carry Flag set if not hitting natural timeout (BC is per frame shift, DE is timer)
 RO1A:7C71 DA 18 7D         jp   c,7D18
 RO1A:7C74 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 RO1A:7C77 CD BB 6F         call 6FBB           // Empties all graphics to prepare graphical scene
 RO1A:7C7A 3E 17            ld   a,17
 RO1A:7C7C 0E 00            ld   c,00
 RO1A:7C7E EF 1A AF 42                          // Handles backdrop graphics as a whole (A is Backdrop number, B is used palette set) (starting Y of main attraction not set to 4)
 RO1A:7C82 EF 26 9F 76                          
 RO1A:7C86 CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 RO1A:7C89 11 48 03         ld   de,0348        // DE = 840
 RO1A:7C8C 01 00 FE         ld   bc,FE00        // -2,0
 RO1A:7C8F CD D2 77         call 77D2           // Window Shift, ending with Carry Flag set if not hitting natural timeout (BC is per frame shift, DE is timer)
 RO1A:7C92 DA 18 7D         jp   c,7D18
 RO1A:7C95 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 RO1A:7C98 CD BB 6F         call 6FBB           // Empties all graphics to prepare graphical scene
 RO1A:7C9B 3E 17            ld   a,17
 RO1A:7C9D 0E 00            ld   c,00
 RO1A:7C9F EF 1A AF 42                          // Handles backdrop graphics as a whole (A is Backdrop number, B is used palette set) (starting Y of main attraction not set to 4)
 RO1A:7CA3 EF 26 E2 77                          
 RO1A:7CA7 CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 RO1A:7CAA 11 B2 02         ld   de,02B2        // DE = 690
 RO1A:7CAD 01 00 00         ld   bc,0000        // 0,0
 RO1A:7CB0 CD D2 77         call 77D2           // Window Shift, ending with Carry Flag set if not hitting natural timeout (BC is per frame shift, DE is timer)
 RO1A:7CB3 DA 18 7D         jp   c,7D18
 RO1A:7CB6 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 RO1A:7CB9 CD BB 6F         call 6FBB           // Empties all graphics to prepare graphical scene
 RO1A:7CBC 3E 19            ld   a,19
 RO1A:7CBE 0E 00            ld   c,00
 RO1A:7CC0 EF 1A AF 42                          // Handles backdrop graphics as a whole (A is Backdrop number, B is used palette set) (starting Y of main attraction not set to 4)
 RO1A:7CC4 EF 26 0D 7A                          
 RO1A:7CC8 CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 RO1A:7CCB 11 0C 03         ld   de,030C        // DE = 780
 RO1A:7CCE 01 00 00         ld   bc,0000        // 0,0
 RO1A:7CD1 CD D2 77         call 77D2           // Window Shift, ending with Carry Flag set if not hitting natural timeout (BC is per frame shift, DE is timer)
 RO1A:7CD4 38 42            jr   c,7D18
 RO1A:7CD6 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 RO1A:7CD9 CD BB 6F         call 6FBB           // Empties all graphics to prepare graphical scene
 RO1A:7CDC 3E 1A            ld   a,1A
 RO1A:7CDE 0E 00            ld   c,00
 RO1A:7CE0 EF 1A AF 42                          // Handles backdrop graphics as a whole (A is Backdrop number, B is used palette set) (starting Y of main attraction not set to 4)
 RO1A:7CE4 3E 70            ld   a,70
 RO1A:7CE6 E0 96            ld   (ff00+96),a
 RO1A:7CE8 EF 26 AC 71                          
 RO1A:7CEC EF 26 13 7D                          
 RO1A:7CF0 CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 RO1A:7CF3 11 1A 04         ld   de,041A        // DE = 1050
 RO1A:7CF6 01 00 00         ld   bc,0000        // 0,0
 RO1A:7CF9 CD D2 77         call 77D2           // Window Shift, ending with Carry Flag set if not hitting natural timeout (BC is per frame shift, DE is timer)
 RO1A:7CFC 38 1A            jr   c,7D18
 RO1A:7CFE 11 70 00         ld   de,0070        // DE = 112
 RO1A:7D01 01 FF 00         ld   bc,00FF        // 0,-1
 RO1A:7D04 CD D2 77         call 77D2           // Window Shift, ending with Carry Flag set if not hitting natural timeout (BC is per frame shift, DE is timer)
 RO1A:7D07 38 0F            jr   c,7D18
 RO1A:7D09 EF 26 AF 7E                          
 RO1A:7D0D 11 60 09         ld   de,0960        // DE = 2400
 RO1A:7D10 01 00 00         ld   bc,0000        // 0,0
 RO1A:7D13 CD D2 77         call 77D2           // Window Shift, ending with Carry Flag set if not hitting natural timeout (BC is per frame shift, DE is timer)
 RO1A:7D16 38 00            jr   c,7D18
 RO1A:7D18 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 RO1A:7D1B CD 15 38         call 3815
 RO1A:7D1E EF 17 00 40                          // Clear all sprites in $C300 table, empties ($C4C8~$C4DB), WRA4($DB2C), WRA4($DB2E) 2 byte, and WRA4($D3AC~$DB2B)
 RO1A:7D22 C9               ret  


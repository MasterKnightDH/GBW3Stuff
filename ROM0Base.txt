 ROM0:0000 00               nop  
 ROM0:0001 00               nop  
 ROM0:0002 00               nop  
 ROM0:0003 00               nop  
 ROM0:0004 00               nop  
 ROM0:0005 00               nop  
 ROM0:0006 00               nop  
 ROM0:0007 00               nop  
 ROM0:0008 00               nop  
 ROM0:0009 00               nop  
 ROM0:000A 00               nop  
 ROM0:000B 00               nop  
 ROM0:000C 00               nop  
 ROM0:000D 00               nop  
 ROM0:000E 00               nop  
 ROM0:000F 00               nop  
 ROM0:0010 00               nop  
 ROM0:0011 00               nop  
 ROM0:0012 00               nop  
 ROM0:0013 00               nop  
 ROM0:0014 00               nop  
 ROM0:0015 00               nop  
 ROM0:0016 00               nop  
 ROM0:0017 00               nop  
 ROM0:0018 00               nop  
 ROM0:0019 00               nop  
 ROM0:001A 00               nop  
 ROM0:001B 00               nop  
 ROM0:001C 00               nop  
 ROM0:001D 00               nop  
 ROM0:001E 00               nop  
 ROM0:001F 00               nop  
 ROM0:0020 00               nop  
 ROM0:0021 00               nop  
 ROM0:0022 00               nop  
 ROM0:0023 00               nop  
 ROM0:0024 00               nop  
 ROM0:0025 00               nop  
 ROM0:0026 00               nop  
 ROM0:0027 00               nop  
 ROM0:0028 C3 06 3B         jp   3B06
 ROM0:002B 00               nop  
 ROM0:002C 00               nop  
 ROM0:002D 00               nop  
 ROM0:002E 00               nop  
 ROM0:002F 00               nop  
 ROM0:0030 00               nop  
 ROM0:0031 00               nop  
 ROM0:0032 00               nop  
 ROM0:0033 00               nop  
 ROM0:0034 00               nop  
 ROM0:0035 00               nop  
 ROM0:0036 00               nop  
 ROM0:0037 00               nop  
 ROM0:0038 00               nop  
 ROM0:0039 00               nop  
 ROM0:003A 00               nop  
 ROM0:003B 00               nop  
 ROM0:003C 00               nop  
 ROM0:003D 00               nop  
 ROM0:003E 00               nop  
 ROM0:003F 00               nop  
 ROM0:0040 C3 08 C0         jp   C008
 ROM0:0043 00               nop  
 ROM0:0044 00               nop  
 ROM0:0045 00               nop  
 ROM0:0046 00               nop  
 ROM0:0047 00               nop  
 ROM0:0048 C3 02 C0         jp   C002
 ROM0:004B 00               nop  
 ROM0:004C 00               nop  
 ROM0:004D 00               nop  
 ROM0:004E 00               nop  
 ROM0:004F 00               nop  
 ROM0:0050 C3 05 C0         jp   C005
 ROM0:0053 00               nop  
 ROM0:0054 00               nop  
 ROM0:0055 00               nop  
 ROM0:0056 00               nop  
 ROM0:0057 00               nop  
 ROM0:0058 C3 7A 0F         jp   0F7A
 ROM0:005B C3 0B C0         jp   C00B
 ROM0:005E 00               nop  
 ROM0:005F 00               nop  
 ROM0:0060 3E 10            ld   a,10           // Deselect Directions
 ROM0:0062 E0 00            ld   (ff00+00),a
 ROM0:0064 F0 00            ld   a,(ff00+00)
 ROM0:0066 F0 00            ld   a,(ff00+00)
 ROM0:0068 F0 00            ld   a,(ff00+00)
 ROM0:006A F0 00            ld   a,(ff00+00)
 ROM0:006C F0 00            ld   a,(ff00+00)
 ROM0:006E F0 00            ld   a,(ff00+00)
 ROM0:0070 2F               cpl  
 ROM0:0071 E6 09            and  a,09           // Checks for A or Start
 ROM0:0073 C2 B1 02         jp   nz,02B1        // Soft Reset on A or Start
 ROM0:0076 D9               reti 
 ROM0:0077 00               nop  
 ROM0:0078 00               nop  
 ROM0:0079 00               nop  
 ROM0:007A 00               nop  
 ROM0:007B 00               nop  
 ROM0:007C 00               nop  
 ROM0:007D 00               nop  
 ROM0:007E 00               nop  
 ROM0:007F 00               nop  
 ROM0:0080 00               nop  
 ROM0:0081 00               nop  
 ROM0:0082 00               nop  
 ROM0:0083 00               nop  
 ROM0:0084 00               nop  
 ROM0:0085 00               nop  
 ROM0:0086 00               nop  
 ROM0:0087 00               nop  
 ROM0:0088 00               nop  
 ROM0:0089 00               nop  
 ROM0:008A 00               nop  
 ROM0:008B 00               nop  
 ROM0:008C 00               nop  
 ROM0:008D 00               nop  
 ROM0:008E 00               nop  
 ROM0:008F 00               nop  
 ROM0:0090 00               nop  
 ROM0:0091 00               nop  
 ROM0:0092 00               nop  
 ROM0:0093 00               nop  
 ROM0:0094 00               nop  
 ROM0:0095 00               nop  
 ROM0:0096 00               nop  
 ROM0:0097 00               nop  
 ROM0:0098 00               nop  
 ROM0:0099 00               nop  
 ROM0:009A 00               nop  
 ROM0:009B 00               nop  
 ROM0:009C 00               nop  
 ROM0:009D 00               nop  
 ROM0:009E 00               nop  
 ROM0:009F 00               nop  
 ROM0:00A0 00               nop  
 ROM0:00A1 00               nop  
 ROM0:00A2 00               nop  
 ROM0:00A3 00               nop  
 ROM0:00A4 00               nop  
 ROM0:00A5 00               nop  
 ROM0:00A6 00               nop  
 ROM0:00A7 00               nop  
 ROM0:00A8 00               nop  
 ROM0:00A9 00               nop  
 ROM0:00AA 00               nop  
 ROM0:00AB 00               nop  
 ROM0:00AC 00               nop  
 ROM0:00AD 00               nop  
 ROM0:00AE 00               nop  
 ROM0:00AF 00               nop  
 ROM0:00B0 00               nop  
 ROM0:00B1 00               nop  
 ROM0:00B2 00               nop  
 ROM0:00B3 00               nop  
 ROM0:00B4 00               nop  
 ROM0:00B5 00               nop  
 ROM0:00B6 00               nop  
 ROM0:00B7 00               nop  
 ROM0:00B8 00               nop  
 ROM0:00B9 00               nop  
 ROM0:00BA 00               nop  
 ROM0:00BB 00               nop  
 ROM0:00BC 00               nop  
 ROM0:00BD 00               nop  
 ROM0:00BE 00               nop  
 ROM0:00BF 00               nop  
 ROM0:00C0 00               nop  
 ROM0:00C1 00               nop  
 ROM0:00C2 00               nop  
 ROM0:00C3 00               nop  
 ROM0:00C4 00               nop  
 ROM0:00C5 00               nop  
 ROM0:00C6 00               nop  
 ROM0:00C7 00               nop  
 ROM0:00C8 00               nop  
 ROM0:00C9 00               nop  
 ROM0:00CA 00               nop  
 ROM0:00CB 00               nop  
 ROM0:00CC 00               nop  
 ROM0:00CD 00               nop  
 ROM0:00CE 00               nop  
 ROM0:00CF 00               nop  
 ROM0:00D0 00               nop  
 ROM0:00D1 00               nop  
 ROM0:00D2 00               nop  
 ROM0:00D3 00               nop  
 ROM0:00D4 00               nop  
 ROM0:00D5 00               nop  
 ROM0:00D6 00               nop  
 ROM0:00D7 00               nop  
 ROM0:00D8 00               nop  
 ROM0:00D9 00               nop  
 ROM0:00DA 00               nop  
 ROM0:00DB 00               nop  
 ROM0:00DC 00               nop  
 ROM0:00DD 00               nop  
 ROM0:00DE 00               nop  
 ROM0:00DF 00               nop  
 ROM0:00E0 00               nop  
 ROM0:00E1 00               nop  
 ROM0:00E2 00               nop  
 ROM0:00E3 00               nop  
 ROM0:00E4 00               nop  
 ROM0:00E5 00               nop  
 ROM0:00E6 00               nop  
 ROM0:00E7 00               nop  
 ROM0:00E8 00               nop  
 ROM0:00E9 00               nop  
 ROM0:00EA 00               nop  
 ROM0:00EB 00               nop  
 ROM0:00EC 00               nop  
 ROM0:00ED 00               nop  
 ROM0:00EE 00               nop  
 ROM0:00EF 00               nop  
 ROM0:00F0 00               nop  
 ROM0:00F1 00               nop  
 ROM0:00F2 00               nop  
 ROM0:00F3 00               nop  
 ROM0:00F4 00               nop  
 ROM0:00F5 00               nop  
 ROM0:00F6 00               nop  
 ROM0:00F7 00               nop  
 ROM0:00F8 00               nop  
 ROM0:00F9 00               nop  
 ROM0:00FA 00               nop  
 ROM0:00FB 00               nop  
 ROM0:00FC 00               nop  
 ROM0:00FD 00               nop  
 ROM0:00FE 00               nop  
 ROM0:00FF 00               nop  
 ROM0:0100 00               nop  
 ROM0:0101 C3 91 02         jp   0291
 ROM0:0104 CE ED 66 66+     db   CE,ED,66,66,CC,0D,00,0B,03,73,00,83,00,0C,00,0D
 ROM0:0114 00 08 11 1F+     db   00,08,11,1F,88,89,00,0E,DC,CC,6E,E6,DD,DD,D9,99
 ROM0:0124 BB BB 67 63+     db   BB,BB,67,63,6E,0E,EC,CC,DD,DC,99,9F,BB,B9,33,3E
 ROM0:0134 47 42 20 57+     db   "GB WARS3   BWWJ"
 ROM0:0143 C0               db   C0
 ROM0:0144 31 38            db   31,38
 ROM0:0146 00               db   00
 ROM0:0147 1B               db   1B
 ROM0:0148 05               db   05
 ROM0:0149 04               db   04
 ROM0:014A 00               db   00
 ROM0:014B 33               db   33
 ROM0:014C 00               db   00
 ROM0:014D 14               db   14
 ROM0:014E 32 AF            db   32,AF
 ROM0:0150 F0 80            ld   a,(ff00+80)
 ROM0:0152 F5               push af
 ROM0:0153 FA A3 C4         ld   a,(C4A3)
 ROM0:0156 7F               ld   a,a
 ROM0:0157 E0 80            ld   (ff00+80),a
 ROM0:0159 EA 00 20         ld   (2000),a
 ROM0:015C CD 59 3B         call 3B59           // (HL ~ HL+BC-1) = (DE ~ DE+BC-1)
 ROM0:015F F1               pop  af
 ROM0:0160 E0 80            ld   (ff00+80),a
 ROM0:0162 EA 00 20         ld   (2000),a
 ROM0:0165 C9               ret                 // ROM($C4A3):(HL ~ HL+BC-1) = ROM($C4A3):(DE ~ DE+BC-1)
 ROM0:0166 5F               ld   e,a
 ROM0:0167 F0 80            ld   a,(ff00+80)
 ROM0:0169 F5               push af
 ROM0:016A 3E 02            ld   a,02
 ROM0:016C E0 80            ld   (ff00+80),a
 ROM0:016E EA 00 20         ld   (2000),a
 ROM0:0171 7B               ld   a,e            // A = Unit Type
 ROM0:0172 CD 00 40         call 4000           // HL holds pointer to unit type's positions table on Battle Screen (A = Unit Type, B = Side)
 ROM0:0175 FA AE C4         ld   a,(C4AE)       // Side
 ROM0:0178 FE 00            cp   a,00
 ROM0:017A 28 04            jr   z,0180
 ROM0:017C 01 18 00         ld   bc,0018
 ROM0:017F 09               add  hl,bc          // Adds 24 for White Moon
 ROM0:0180 E5               push hl
 ROM0:0181 FA AE C4         ld   a,(C4AE)
 ROM0:0184 FE 00            cp   a,00
 ROM0:0186 28 02            jr   z,018A
 ROM0:0188 18 05            jr   018F           // Branches for White Moon
 ROM0:018A 21 84 D3         ld   hl,D384
 ROM0:018D 18 03            jr   0192
 ROM0:018F 21 8E D3         ld   hl,D38E
 ROM0:0192 FA 3E D3         ld   a,(D33E)
 ROM0:0195 CD BC 29         call 29BC           // HL += A
 ROM0:0198 7E               ld   a,(hl)
 ROM0:0199 E1               pop  hl
 ROM0:019A FE 01            cp   a,01
 ROM0:019C 28 02            jr   z,01A0
 ROM0:019E 18 33            jr   01D3           // Ends immediately if HP portion isn't alive
 ROM0:01A0 FA 3E D3         ld   a,(D33E)
 ROM0:01A3 87               add  a
 ROM0:01A4 CD BC 29         call 29BC           // HL += A
 ROM0:01A7 2A               ldi  a,(hl)
 ROM0:01A8 47               ld   b,a
 ROM0:01A9 7E               ld   a,(hl)
 ROM0:01AA 4F               ld   c,a            // BC holds portion's position
 ROM0:01AB FA AE C4         ld   a,(C4AE)
 ROM0:01AE FE 00            cp   a,00
 ROM0:01B0 20 10            jr   nz,01C2        // Branches for White Moon
 ROM0:01B2 16 03            ld   d,03
 ROM0:01B4 1E 01            ld   e,01
 ROM0:01B6 FA 3E D3         ld   a,(D33E)       // Portion, Position coordinates, 3, 1
 ROM0:01B9 CD DA 01         call 01DA           // Changes Red Star HP portion's graphics change flag, A = first tile of set of graphics to use (A = HP Portion #)
 ROM0:01BC 67               ld   h,a
 ROM0:01BD 3E 00            ld   a,00
 ROM0:01BF 6F               ld   l,a
 ROM0:01C0 18 0E            jr   01D0
 ROM0:01C2 16 03            ld   d,03
 ROM0:01C4 1E 01            ld   e,01
 ROM0:01C6 FA 3E D3         ld   a,(D33E)       // Portion, Position coordinates, 3, 1
 ROM0:01C9 CD F8 01         call 01F8           // Changes White Moon HP portion's graphics change flag, A = first tile of set of graphics to use (A = HP Portion #)
 ROM0:01CC 67               ld   h,a
 ROM0:01CD 3E 01            ld   a,01
 ROM0:01CF 6F               ld   l,a
 ROM0:01D0 CD DB 39         call 39DB           // VRA0 rectangle BC, size DE set to H + Prior Tiles (L is horizontal flip flag)
 ROM0:01D3 F1               pop  af
 ROM0:01D4 E0 80            ld   (ff00+80),a
 ROM0:01D6 EA 00 20         ld   (2000),a
 ROM0:01D9 C9               ret                 // Updates top half of helicopter's current HP portion graphics (A is Unit Type, B is Side)
 ROM0:01DA C5               push bc
 ROM0:01DB D5               push de
 ROM0:01DC 21 98 D3         ld   hl,D398
 ROM0:01DF CD BC 29         call 29BC           // HL = $D398 + A
 ROM0:01E2 7E               ld   a,(hl)
 ROM0:01E3 FE 00            cp   a,00
 ROM0:01E5 28 02            jr   z,01E9
 ROM0:01E7 18 08            jr   01F1
 ROM0:01E9 3E 01            ld   a,01
 ROM0:01EB 77               ld   (hl),a
 ROM0:01EC 3E 01            ld   a,01           // Red Star primary
 ROM0:01EE D1               pop  de
 ROM0:01EF C1               pop  bc
 ROM0:01F0 C9               ret  
 ROM0:01F1 AF               xor  a
 ROM0:01F2 77               ld   (hl),a
 ROM0:01F3 3E EC            ld   a,EC           // Red Star secondary (for helicopters)
 ROM0:01F5 D1               pop  de
 ROM0:01F6 C1               pop  bc
 ROM0:01F7 C9               ret                 // Changes Red Star HP portion's graphics change flag, A = first tile of set of graphics to use (A = HP Portion #)
 ROM0:01F8 C5               push bc
 ROM0:01F9 D5               push de
 ROM0:01FA 21 A2 D3         ld   hl,D3A2
 ROM0:01FD CD BC 29         call 29BC           // HL += A
 ROM0:0200 7E               ld   a,(hl)
 ROM0:0201 FE 00            cp   a,00
 ROM0:0203 28 02            jr   z,0207
 ROM0:0205 18 08            jr   020F
 ROM0:0207 3E 01            ld   a,01
 ROM0:0209 77               ld   (hl),a
 ROM0:020A 3E 2B            ld   a,2B           // White Moon primary
 ROM0:020C D1               pop  de
 ROM0:020D C1               pop  bc
 ROM0:020E C9               ret  
 ROM0:020F AF               xor  a
 ROM0:0210 77               ld   (hl),a
 ROM0:0211 3E F2            ld   a,F2           // White Moon secondary (for helicopters)
 ROM0:0213 D1               pop  de
 ROM0:0214 C1               pop  bc
 ROM0:0215 C9               ret                 // Changes White Moon HP portion's graphics change flag, A = first tile of set of graphics to use (A = HP Portion #)
 ROM0:0216 F0 82            ld   a,(ff00+82)
 ROM0:0218 F5               push af
 ROM0:0219 3E 04            ld   a,04
 ROM0:021B E0 82            ld   (ff00+82),a
 ROM0:021D E0 70            ld   (ff00+70),a
 ROM0:021F FA 40 D3         ld   a,(D340)
 ROM0:0222 FE 00            cp   a,00
 ROM0:0224 28 1E            jr   z,0244         // Skips Red Star helicopter battle screen animation stuff if Red Star helicopter check is Off
 ROM0:0226 FA 43 D3         ld   a,(D343)
 ROM0:0229 EA 3E D3         ld   (D33E),a
 ROM0:022C FA B7 C4         ld   a,(C4B7)       // Red Star's Unit Type
 ROM0:022F 06 00            ld   b,00
 ROM0:0231 CD 66 01         call 0166           // Updates top half of Red Star helicopter's current HP portion graphics
 ROM0:0234 FA 43 D3         ld   a,(D343)
 ROM0:0237 C6 05            add  a,05
 ROM0:0239 EA 3E D3         ld   (D33E),a
 ROM0:023C FA B7 C4         ld   a,(C4B7)       // Red Star's Unit Type
 ROM0:023F 06 00            ld   b,00
 ROM0:0241 CD 66 01         call 0166           // Updates top half of Red Star helicopter's current HP portion graphics
 ROM0:0244 FA 41 D3         ld   a,(D341)
 ROM0:0247 FE 00            cp   a,00
 ROM0:0249 28 1E            jr   z,0269         // Skips White Moon helicopter battle screen animation stuff if Red Star helicopter check is Off
 ROM0:024B FA 43 D3         ld   a,(D343)
 ROM0:024E EA 3E D3         ld   (D33E),a
 ROM0:0251 FA B8 C4         ld   a,(C4B8)       // White Moon's Unit Type
 ROM0:0254 06 01            ld   b,01
 ROM0:0256 CD 66 01         call 0166           // Updates top half of White Moon helicopter's current HP portion graphics
 ROM0:0259 FA 43 D3         ld   a,(D343)
 ROM0:025C C6 05            add  a,05
 ROM0:025E EA 3E D3         ld   (D33E),a
 ROM0:0261 FA B8 C4         ld   a,(C4B8)       // White Moon's Unit Type
 ROM0:0264 06 01            ld   b,01
 ROM0:0266 CD 66 01         call 0166           // Updates top half of White Moon helicopter's current HP portion graphics
 ROM0:0269 FA 43 D3         ld   a,(D343)
 ROM0:026C FE 04            cp   a,04
 ROM0:026E 28 06            jr   z,0276
 ROM0:0270 3C               inc  a
 ROM0:0271 EA 43 D3         ld   (D343),a
 ROM0:0274 18 04            jr   027A
 ROM0:0276 AF               xor  a
 ROM0:0277 EA 43 D3         ld   (D343),a
 ROM0:027A F1               pop  af
 ROM0:027B E0 82            ld   (ff00+82),a
 ROM0:027D E0 70            ld   (ff00+70),a
 ROM0:027F C9               ret                 // Updates current HP portion graphics of each side for helicopters, queueing through the first 5 in each cycle and adding the 5th one after for the procedure
 ROM0:0280 F0 80            ld   a,(ff00+80)
 ROM0:0282 F5               push af
 ROM0:0283 78               ld   a,b
 ROM0:0284 E0 80            ld   (ff00+80),a
 ROM0:0286 EA 00 20         ld   (2000),a
 ROM0:0289 E9               jp   hl             // CALL B:(HL)
 ROM0:028A F1               pop  af
 ROM0:028B E0 80            ld   (ff00+80),a
 ROM0:028D EA 00 20         ld   (2000),a
 ROM0:0290 C9               ret  
 ROM0:0291 F3               di                  // Game starts here
 ROM0:0292 31 00 D0         ld   sp,D000
 ROM0:0295 F5               push af
 ROM0:0296 3E 10            ld   a,10
 ROM0:0298 E0 80            ld   (ff00+80),a
 ROM0:029A EA 00 20         ld   (2000),a
 ROM0:029D F1               pop  af
 ROM0:029E EA 10 C0         ld   (C010),a
 ROM0:02A1 CD 00 40         call 4000           // Startup advertisement screens; starts with setting up non-GBC infinite loop
 ROM0:02A4 CD 30 39         call 3930           // A set to flag for SRA0($A000~A006) values not matching $47,$42,$57,$33,$00,$09,$14
 ROM0:02A7 A7               and  a
 ROM0:02A8 28 07            jr   z,02B1
 ROM0:02AA CD 88 39         call 3988           // Full save erasure
 ROM0:02AD EF 19 41 4D                          
 ROM0:02B1 F3               di                  // Soft Resetting goes here
 ROM0:02B2 31 FF FF         ld   sp,FFFF
 ROM0:02B5 AF               xor  a
 ROM0:02B6 E0 FF            ld   (ff00+FF),a
 ROM0:02B8 E0 0F            ld   (ff00+0F),a
 ROM0:02BA E0 41            ld   (ff00+41),a
 ROM0:02BC 3E 00            ld   a,00
 ROM0:02BE CD 8D 05         call 058D           // ($4000) = 0, ($FF81) = 0
 ROM0:02C1 3E 00            ld   a,00
 ROM0:02C3 E0 82            ld   (ff00+82),a
 ROM0:02C5 E0 70            ld   (ff00+70),a
 ROM0:02C7 3E 00            ld   a,00
 ROM0:02C9 E0 83            ld   (ff00+83),a
 ROM0:02CB E0 4F            ld   (ff00+4F),a
 ROM0:02CD CD FA 02         call 02FA
 ROM0:02D0 CD CE 34         call 34CE           // Empty $FFC8 to $FFCB
 ROM0:02D3 CD E9 37         call 37E9
 ROM0:02D6 CD DF 03         call 03DF
 ROM0:02D9 CD E2 02         call 02E2
 ROM0:02DC 31 00 D0         ld   sp,D000
 ROM0:02DF C3 6D 15         jp   156D
 ROM0:02E2 0E 84            ld   c,84
 ROM0:02E4 06 0A            ld   b,0A
 ROM0:02E6 21 F0 02         ld   hl,02F0
 ROM0:02E9 2A               ldi  a,(hl)
 ROM0:02EA E2               ld   (ff00+c),a
 ROM0:02EB 0C               inc  c
 ROM0:02EC 05               dec  b
 ROM0:02ED 20 FA            jr   nz,02E9
 ROM0:02EF C9               ret  

 ROM0:02F0 3E C4            ld   a,C4
 ROM0:02F2 E0 46            ld   (ff00+46),a
 ROM0:02F4 3E 28            ld   a,28           // Sets up delay
 ROM0:02F6 3D               dec  a
 ROM0:02F7 20 FD            jr   nz,02F6
 ROM0:02F9 C9               ret                 // Official Sprite table setup on OAM

 ROM0:02FA AF               xor  a
 ROM0:02FB E0 95            ld   (ff00+95),a
 ROM0:02FD E0 43            ld   (ff00+43),a
 ROM0:02FF E0 96            ld   (ff00+96),a
 ROM0:0301 E0 42            ld   (ff00+42),a
 ROM0:0303 E0 97            ld   (ff00+97),a
 ROM0:0305 E0 4B            ld   (ff00+4B),a
 ROM0:0307 E0 98            ld   (ff00+98),a
 ROM0:0309 E0 4A            ld   (ff00+4A),a
 ROM0:030B AF               xor  a
 ROM0:030C E0 8E            ld   (ff00+8E),a
 ROM0:030E E0 90            ld   (ff00+90),a    // Blanks controls
 ROM0:0310 E0 91            ld   (ff00+91),a
 ROM0:0312 E0 92            ld   (ff00+92),a
 ROM0:0314 E0 93            ld   (ff00+93),a
 ROM0:0316 3E 04            ld   a,04
 ROM0:0318 E0 94            ld   (ff00+94),a
 ROM0:031A AF               xor  a
 ROM0:031B EA 01 C0         ld   (C001),a
 ROM0:031E EA 0E C0         ld   (C00E),a
 ROM0:0321 CD 44 03         call 0344           // ($C002) holds $D9
 ROM0:0324 CD 59 03         call 0359           // ($C005) 3 byte holds: $C3, $BB, $03
 ROM0:0327 CD 6F 03         call 036F           // V-Blank Interrupt procedure: sets up text and graphics stats for standard zoom map
 ROM0:032A CD 85 03         call 0385           // ($C00B) holds $D9
 ROM0:032D 3E 43            ld   a,43
 ROM0:032F EA 0F C0         ld   (C00F),a
 ROM0:0332 E0 40            ld   (ff00+40),a
 ROM0:0334 C9               ret  
 ROM0:0335 D5               push de
 ROM0:0336 11 02 C0         ld   de,C002
 ROM0:0339 3E C3            ld   a,C3
 ROM0:033B 12               ld   (de),a
 ROM0:033C 13               inc  de
 ROM0:033D 7D               ld   a,l
 ROM0:033E 12               ld   (de),a
 ROM0:033F 13               inc  de
 ROM0:0340 7C               ld   a,h
 ROM0:0341 12               ld   (de),a
 ROM0:0342 D1               pop  de
 ROM0:0343 C9               ret                 // ($C002) 3 byte holds: $C3, HL reverse
 ROM0:0344 3E D9            ld   a,D9
 ROM0:0346 EA 02 C0         ld   (C002),a
 ROM0:0349 C9               ret                 // ($C002) holds $D9
 ROM0:034A D5               push de
 ROM0:034B 11 05 C0         ld   de,C005
 ROM0:034E 3E C3            ld   a,C3
 ROM0:0350 12               ld   (de),a
 ROM0:0351 13               inc  de
 ROM0:0352 7D               ld   a,l
 ROM0:0353 12               ld   (de),a
 ROM0:0354 13               inc  de
 ROM0:0355 7C               ld   a,h
 ROM0:0356 12               ld   (de),a
 ROM0:0357 D1               pop  de
 ROM0:0358 C9               ret                 // ($C005) 3 byte holds: $C3, HL reverse
 ROM0:0359 21 BB 03         ld   hl,03BB
 ROM0:035C CD 4A 03         call 034A           // ($C005) 3 byte holds: $C3, $BB, $03
 ROM0:035F C9               ret  
 ROM0:0360 D5               push de
 ROM0:0361 11 08 C0         ld   de,C008
 ROM0:0364 3E C3            ld   a,C3
 ROM0:0366 12               ld   (de),a
 ROM0:0367 13               inc  de
 ROM0:0368 7D               ld   a,l
 ROM0:0369 12               ld   (de),a
 ROM0:036A 13               inc  de
 ROM0:036B 7C               ld   a,h
 ROM0:036C 12               ld   (de),a
 ROM0:036D D1               pop  de
 ROM0:036E C9               ret                 // ($C008) 3 byte holds: $C3, HL reverse
 ROM0:036F 21 EC 03         ld   hl,03EC
 ROM0:0372 CD 60 03         call 0360           // ($C008) 3 byte holds: $C3, $EC, $03
 ROM0:0375 C9               ret  
 ROM0:0376 D5               push de
 ROM0:0377 11 0B C0         ld   de,C00B
 ROM0:037A 3E C3            ld   a,C3
 ROM0:037C 12               ld   (de),a
 ROM0:037D 13               inc  de
 ROM0:037E 7D               ld   a,l
 ROM0:037F 12               ld   (de),a
 ROM0:0380 13               inc  de
 ROM0:0381 7C               ld   a,h
 ROM0:0382 12               ld   (de),a
 ROM0:0383 D1               pop  de
 ROM0:0384 C9               ret                 // ($C00B) 3 byte holds: $C3, HL reverse
 ROM0:0385 3E D9            ld   a,D9
 ROM0:0387 EA 0B C0         ld   (C00B),a
 ROM0:038A C9               ret                 // ($C00B) holds $D9
 ROM0:038B F3               di   
 ROM0:038C 21 88 04         ld   hl,0488
 ROM0:038F CD 60 03         call 0360           // ($C008) 3 byte holds: $C3, HL reverse
 ROM0:0392 21 9E 0F         ld   hl,0F9E
 ROM0:0395 CD 4A 03         call 034A           // ($C005) 3 byte holds: $C3, HL reverse
 ROM0:0398 CD 6F 05         call 056F           // ($FF0F) = 0, res 2,($FFFF) (Timer Off)
 ROM0:039B FB               ei   
 ROM0:039C C9               ret  
 ROM0:039D F3               di   
 ROM0:039E CD 6F 03         call 036F           // V-Blank Interrupt procedure: sets up text and graphics stats for standard zoom map
 ROM0:03A1 CD 59 03         call 0359           // ($C005) 3 byte holds: $C3, $BB, $03
 ROM0:03A4 CD DF 03         call 03DF
 ROM0:03A7 CD 65 05         call 0565           // ($FF0F) = 0, set 2,($FFFF) (Timer On)
 ROM0:03AA FB               ei   
 ROM0:03AB C9               ret  
 ROM0:03AC F3               di   
 ROM0:03AD 21 3A 04         ld   hl,043A        // V-Blank Interrupt procedure: constant helicopter graphics update on Battle Screen
 ROM0:03B0 CD 60 03         call 0360           // ($C008) 3 byte holds: $C3, HL reverse
 ROM0:03B3 FB               ei   
 ROM0:03B4 C9               ret  
 ROM0:03B5 F3               di   
 ROM0:03B6 CD 6F 03         call 036F           // V-Blank Interrupt procedure: sets up text and graphics stats for standard zoom map
 ROM0:03B9 FB               ei   
 ROM0:03BA C9               ret  
 ROM0:03BB F5               push af
 ROM0:03BC C5               push bc
 ROM0:03BD D5               push de
 ROM0:03BE E5               push hl
 ROM0:03BF FB               ei   
 ROM0:03C0 21 8F FF         ld   hl,FF8F
 ROM0:03C3 7E               ld   a,(hl)
 ROM0:03C4 34               inc  (hl)
 ROM0:03C5 E6 03            and  a,03
 ROM0:03C7 20 11            jr   nz,03DA
 ROM0:03C9 21 01 C0         ld   hl,C001
 ROM0:03CC CB 56            bit  2,(hl)
 ROM0:03CE 20 0A            jr   nz,03DA
 ROM0:03D0 CB D6            set  2,(hl)
 ROM0:03D2 CD 01 38         call 3801
 ROM0:03D5 21 01 C0         ld   hl,C001
 ROM0:03D8 CB 96            res  2,(hl)
 ROM0:03DA E1               pop  hl
 ROM0:03DB D1               pop  de
 ROM0:03DC C1               pop  bc
 ROM0:03DD F1               pop  af
 ROM0:03DE D9               reti 
 ROM0:03DF 3E 78            ld   a,78
 ROM0:03E1 E0 06            ld   (ff00+06),a
 ROM0:03E3 3E 03            ld   a,03
 ROM0:03E5 E0 07            ld   (ff00+07),a
 ROM0:03E7 3E 07            ld   a,07
 ROM0:03E9 E0 07            ld   (ff00+07),a
 ROM0:03EB C9               ret  
 ROM0:03EC F5               push af
 ROM0:03ED C5               push bc
 ROM0:03EE D5               push de
 ROM0:03EF E5               push hl
 ROM0:03F0 21 01 C0         ld   hl,C001
 ROM0:03F3 CB 46            bit  0,(hl)
 ROM0:03F5 20 3E            jr   nz,0435        // Ends immediately if already set
 ROM0:03F7 CB C6            set  0,(hl)
 ROM0:03F9 F0 95            ld   a,(ff00+95)
 ROM0:03FB E0 43            ld   (ff00+43),a
 ROM0:03FD F0 96            ld   a,(ff00+96)
 ROM0:03FF E0 42            ld   (ff00+42),a    // SCX and SCY established
 ROM0:0401 F0 97            ld   a,(ff00+97)
 ROM0:0403 E0 4B            ld   (ff00+4B),a
 ROM0:0405 F0 98            ld   a,(ff00+98)
 ROM0:0407 E0 4A            ld   (ff00+4A),a    // WX and WY established
 ROM0:0409 FA 0F C0         ld   a,(C00F)
 ROM0:040C E0 40            ld   (ff00+40),a
 ROM0:040E CD 1B 07         call 071B           // If bit 7,($C560) is active: Palette tables are updated based on bit 6,($C560) for BG and bit 5,($C560) for Sprites; or given Palette tables based on bits in ($C561) 2 byte if ($C560) doesn't have bits 5 and 6 active
 ROM0:0411 FA 0E C0         ld   a,(C00E)
 ROM0:0414 A7               and  a
 ROM0:0415 28 07            jr   z,041E
 ROM0:0417 CD 84 FF         call FF84           // Official Sprite table setup on OAM
 ROM0:041A AF               xor  a
 ROM0:041B EA 0E C0         ld   (C00E),a
 ROM0:041E FA CA FF         ld   a,(FFCA)
 ROM0:0421 F5               push af
 ROM0:0422 CD 37 35         call 3537           // Establishes all unchecked text into appropriate VRAM bank; bit 7,($C00F) being inactive or LY => 142 stops after only one text portion and leaves it considered unchecked
 ROM0:0425 F1               pop  af
 ROM0:0426 A7               and  a
 ROM0:0427 20 03            jr   nz,042C
 ROM0:0429 CD B6 16         call 16B6           // Basic map tile updates depending on state of ($FFAC)
 ROM0:042C 21 8E FF         ld   hl,FF8E
 ROM0:042F 34               inc  (hl)
 ROM0:0430 21 01 C0         ld   hl,C001
 ROM0:0433 CB 86            res  0,(hl)
 ROM0:0435 E1               pop  hl
 ROM0:0436 D1               pop  de
 ROM0:0437 C1               pop  bc
 ROM0:0438 F1               pop  af
 ROM0:0439 D9               reti                // V-Blank Interrupt procedure: sets up text and graphics stats for standard zoom map
 ROM0:043A F5               push af
 ROM0:043B C5               push bc
 ROM0:043C D5               push de
 ROM0:043D E5               push hl
 ROM0:043E 21 01 C0         ld   hl,C001
 ROM0:0441 CB 46            bit  0,(hl)
 ROM0:0443 20 3E            jr   nz,0483        // Ends immediately if already set
 ROM0:0445 CB C6            set  0,(hl)
 ROM0:0447 F0 95            ld   a,(ff00+95)
 ROM0:0449 E0 43            ld   (ff00+43),a
 ROM0:044B F0 96            ld   a,(ff00+96)
 ROM0:044D E0 42            ld   (ff00+42),a    // SCX and SCY established
 ROM0:044F F0 97            ld   a,(ff00+97)
 ROM0:0451 E0 4B            ld   (ff00+4B),a
 ROM0:0453 F0 98            ld   a,(ff00+98)
 ROM0:0455 E0 4A            ld   (ff00+4A),a    // WX and WY established
 ROM0:0457 FA 0F C0         ld   a,(C00F)
 ROM0:045A E0 40            ld   (ff00+40),a
 ROM0:045C CD 1B 07         call 071B           // If bit 7,($C560) is active: Palette tables are updated based on bit 6,($C560) for BG and bit 5,($C560) for Sprites; or given Palette tables based on bits in ($C561) 2 byte if ($C560) doesn't have bits 5 and 6 active
 ROM0:045F FA 0E C0         ld   a,(C00E)
 ROM0:0462 A7               and  a
 ROM0:0463 28 07            jr   z,046C
 ROM0:0465 CD 84 FF         call FF84           // Official Sprite table setup on OAM
 ROM0:0468 AF               xor  a
 ROM0:0469 EA 0E C0         ld   (C00E),a
 ROM0:046C FA CA FF         ld   a,(FFCA)
 ROM0:046F F5               push af
 ROM0:0470 CD 37 35         call 3537           // Establishes all unchecked text into appropriate VRAM bank; bit 7,($C00F) being inactive or LY => 142 stops after only one text portion and leaves it considered unchecked
 ROM0:0473 F1               pop  af
 ROM0:0474 A7               and  a
 ROM0:0475 20 03            jr   nz,047A
 ROM0:0477 CD 16 02         call 0216           // Updates current HP portion graphics of each side for helicopters, queueing through the first 5 in each cycle and adding the 5th one after for the procedure
 ROM0:047A 21 8E FF         ld   hl,FF8E
 ROM0:047D 34               inc  (hl)
 ROM0:047E 21 01 C0         ld   hl,C001
 ROM0:0481 CB 86            res  0,(hl)
 ROM0:0483 E1               pop  hl
 ROM0:0484 D1               pop  de
 ROM0:0485 C1               pop  bc
 ROM0:0486 F1               pop  af
 ROM0:0487 D9               reti                // V-Blank Interrupt procedure: constant helicopter graphics update on Battle Screen
 ROM0:0488 F5               push af
 ROM0:0489 C5               push bc
 ROM0:048A D5               push de
 ROM0:048B E5               push hl
 ROM0:048C 21 01 C0         ld   hl,C001
 ROM0:048F CB 46            bit  0,(hl)
 ROM0:0491 20 3A            jr   nz,04CD        // Ends immediately if already set
 ROM0:0493 CB C6            set  0,(hl)
 ROM0:0495 F0 95            ld   a,(ff00+95)
 ROM0:0497 E0 43            ld   (ff00+43),a
 ROM0:0499 F0 96            ld   a,(ff00+96)
 ROM0:049B E0 42            ld   (ff00+42),a
 ROM0:049D F0 97            ld   a,(ff00+97)
 ROM0:049F E0 4B            ld   (ff00+4B),a
 ROM0:04A1 F0 98            ld   a,(ff00+98)
 ROM0:04A3 E0 4A            ld   (ff00+4A),a
 ROM0:04A5 FA 0F C0         ld   a,(C00F)
 ROM0:04A8 E0 40            ld   (ff00+40),a
 ROM0:04AA CD 1B 07         call 071B           // If bit 7,($C560) is active: Palette tables are updated based on bit 6,($C560) for BG and bit 5,($C560) for Sprites; or given Palette tables based on bits in ($C561) 2 byte if ($C560) doesn't have bits 5 and 6 active
 ROM0:04AD FA 0E C0         ld   a,(C00E)
 ROM0:04B0 A7               and  a
 ROM0:04B1 28 07            jr   z,04BA
 ROM0:04B3 CD 84 FF         call FF84           // Official Sprite table setup on OAM
 ROM0:04B6 AF               xor  a
 ROM0:04B7 EA 0E C0         ld   (C00E),a
 ROM0:04BA CD 37 35         call 3537           // Establishes all unchecked text into appropriate VRAM bank; bit 7,($C00F) being inactive or LY => 142 stops after only one text portion and leaves it considered unchecked
 ROM0:04BD CD 8E 2A         call 2A8E
 ROM0:04C0 FB               ei   
 ROM0:04C1 CD 01 38         call 3801
 ROM0:04C4 21 8E FF         ld   hl,FF8E
 ROM0:04C7 34               inc  (hl)
 ROM0:04C8 21 01 C0         ld   hl,C001
 ROM0:04CB CB 86            res  0,(hl)
 ROM0:04CD E1               pop  hl
 ROM0:04CE D1               pop  de
 ROM0:04CF C1               pop  bc
 ROM0:04D0 F1               pop  af
 ROM0:04D1 D9               reti 
 ROM0:04D2 E5               push hl
 ROM0:04D3 FA 0F C0         ld   a,(C00F)
 ROM0:04D6 CB 7F            bit  7,a
 ROM0:04D8 28 09            jr   z,04E3         // End immediately if ($C00F) is less than 128
 ROM0:04DA 21 8E FF         ld   hl,FF8E
 ROM0:04DD 7E               ld   a,(hl)
 ROM0:04DE 76               halt 
 ROM0:04DF 00               nop  
 ROM0:04E0 BE               cp   (hl)
 ROM0:04E1 28 FB            jr   z,04DE         // Guessing ($FF8E) is a byte for loading cooldown
 ROM0:04E3 E1               pop  hl
 ROM0:04E4 C9               ret                 // bit 7,($C00F) active: Halt/NOP process until ($FF8E) is changed
 ROM0:04E5 FA 0F C0         ld   a,(C00F)
 ROM0:04E8 CB 7F            bit  7,a
 ROM0:04EA C0               ret  nz
 ROM0:04EB CB FF            set  7,a
 ROM0:04ED EA 0F C0         ld   (C00F),a
 ROM0:04F0 E0 40            ld   (ff00+40),a
 ROM0:04F2 C9               ret                 // If ($C00F) bit 7 is off, set 7,($C00F); ($FF40) = new ($C00F)
 ROM0:04F3 F0 40            ld   a,(ff00+40)
 ROM0:04F5 CB 7F            bit  7,a
 ROM0:04F7 C8               ret  z              // Ends immediately if LCD Display Enable is off
 ROM0:04F8 F0 FF            ld   a,(ff00+FF)
 ROM0:04FA EA 00 C0         ld   (C000),a
 ROM0:04FD CB 87            res  0,a
 ROM0:04FF E0 FF            ld   (ff00+FF),a    // Shuts off V-Blank Interrupt Enable
 ROM0:0501 FA 0F C0         ld   a,(C00F)
 ROM0:0504 CB BF            res  7,a
 ROM0:0506 EA 0F C0         ld   (C00F),a
 ROM0:0509 E0 40            ld   (ff00+40),a    // Shuts off LCD Display Enable
 ROM0:050B AF               xor  a
 ROM0:050C E0 0F            ld   (ff00+0F),a
 ROM0:050E FA 00 C0         ld   a,(C000)
 ROM0:0511 E0 FF            ld   (ff00+FF),a
 ROM0:0513 C9               ret                 // Shuts off LCD Display if necessary
 ROM0:0514 FA 0F C0         ld   a,(C00F)
 ROM0:0517 CB EF            set  5,a
 ROM0:0519 EA 0F C0         ld   (C00F),a
 ROM0:051C E0 40            ld   (ff00+40),a
 ROM0:051E C9               ret                 // Turns on Window Display
 ROM0:051F FA 0F C0         ld   a,(C00F)
 ROM0:0522 CB AF            res  5,a
 ROM0:0524 EA 0F C0         ld   (C00F),a
 ROM0:0527 E0 40            ld   (ff00+40),a
 ROM0:0529 C9               ret                 // Shuts off Window Display
 ROM0:052A AF               xor  a
 ROM0:052B E0 0F            ld   (ff00+0F),a
 ROM0:052D F0 FF            ld   a,(ff00+FF)
 ROM0:052F CB C7            set  0,a
 ROM0:0531 E0 FF            ld   (ff00+FF),a
 ROM0:0533 C9               ret                 // ($FF0F) = 0, set 0,($FFFF) (V-Blank On)
 ROM0:0534 F0 FF            ld   a,(ff00+FF)
 ROM0:0536 CB 87            res  0,a
 ROM0:0538 E0 FF            ld   (ff00+FF),a
 ROM0:053A C9               ret                 // res 0,($FFFF) (V-Blank Off)
 ROM0:053B F0 41            ld   a,(ff00+41)
 ROM0:053D F6 08            or   a,08
 ROM0:053F E0 41            ld   (ff00+41),a    // set 3,($FF41) (Mode 0H-Blank Interrupt On)
 ROM0:0541 AF               xor  a
 ROM0:0542 E0 0F            ld   (ff00+0F),a
 ROM0:0544 18 0B            jr   0551
 ROM0:0546 F0 41            ld   a,(ff00+41)
 ROM0:0548 E6 F7            and  a,F7
 ROM0:054A E0 41            ld   (ff00+41),a
 ROM0:054C AF               xor  a
 ROM0:054D E0 0F            ld   (ff00+0F),a
 ROM0:054F 18 0A            jr   055B
 ROM0:0551 AF               xor  a
 ROM0:0552 E0 0F            ld   (ff00+0F),a
 ROM0:0554 F0 FF            ld   a,(ff00+FF)
 ROM0:0556 CB CF            set  1,a
 ROM0:0558 E0 FF            ld   (ff00+FF),a
 ROM0:055A C9               ret                 // ($FF0F) = 0; set 1,($FFFF) (LCD STAT On)
 ROM0:055B AF               xor  a
 ROM0:055C E0 0F            ld   (ff00+0F),a
 ROM0:055E F0 FF            ld   a,(ff00+FF)
 ROM0:0560 CB 8F            res  1,a
 ROM0:0562 E0 FF            ld   (ff00+FF),a
 ROM0:0564 C9               ret                 // ($FF0F) = 0; res 1,($FFFF) (LCD STAT Off)
 ROM0:0565 AF               xor  a
 ROM0:0566 E0 0F            ld   (ff00+0F),a
 ROM0:0568 F0 FF            ld   a,(ff00+FF)
 ROM0:056A CB D7            set  2,a
 ROM0:056C E0 FF            ld   (ff00+FF),a
 ROM0:056E C9               ret                 // ($FF0F) = 0, set 2,($FFFF) (Timer On)
 ROM0:056F AF               xor  a
 ROM0:0570 E0 0F            ld   (ff00+0F),a
 ROM0:0572 F0 FF            ld   a,(ff00+FF)
 ROM0:0574 CB 97            res  2,a
 ROM0:0576 E0 FF            ld   (ff00+FF),a
 ROM0:0578 C9               ret                 // ($FF0F) = 0, res 2,($FFFF) (Timer Off)
 ROM0:0579 AF               xor  a
 ROM0:057A E0 0F            ld   (ff00+0F),a
 ROM0:057C F0 FF            ld   a,(ff00+FF)
 ROM0:057E CB E7            set  4,a
 ROM0:0580 E0 FF            ld   (ff00+FF),a
 ROM0:0582 C9               ret                 // ($FF0F) = 0, set 4,($FFFF) (Joypad On)
 ROM0:0583 AF               xor  a
 ROM0:0584 E0 0F            ld   (ff00+0F),a
 ROM0:0586 F0 FF            ld   a,(ff00+FF)
 ROM0:0588 CB A7            res  4,a
 ROM0:058A E0 FF            ld   (ff00+FF),a
 ROM0:058C C9               ret                 // ($FF0F) = 0, res 4,($FFFF) (Joypad Off)
 ROM0:058D E0 81            ld   (ff00+81),a
 ROM0:058F EA 00 40         ld   (4000),a
 ROM0:0592 C9               ret                 // ($4000) = A, ($FF81) = A
 ROM0:0593 F5               push af
 ROM0:0594 3E 0A            ld   a,0A
 ROM0:0596 EA 00 00         ld   (0000),a
 ROM0:0599 F1               pop  af
 ROM0:059A C9               ret                 // ($0000) = 10
 ROM0:059B F5               push af
 ROM0:059C AF               xor  a
 ROM0:059D EA 00 00         ld   (0000),a
 ROM0:05A0 F1               pop  af
 ROM0:05A1 C9               ret                 // ($0000) = 0
 ROM0:05A2 CD D2 04         call 04D2           // Next frame
 ROM0:05A5 CD AC 05         call 05AC           // Establishes current direct and newly pressed controls, also sets up Soft Reset method
 ROM0:05A8 CD EB 05         call 05EB           // Establishes considered active controls
 ROM0:05AB C9               ret                 // Handles button presses and everything
 ROM0:05AC 3E 20            ld   a,20
 ROM0:05AE E0 00            ld   (ff00+00),a
 ROM0:05B0 F0 00            ld   a,(ff00+00)
 ROM0:05B2 F0 00            ld   a,(ff00+00)
 ROM0:05B4 2F               cpl  
 ROM0:05B5 E6 0F            and  a,0F
 ROM0:05B7 CB 37            swap a
 ROM0:05B9 47               ld   b,a            // Directions R/L/U/D
 ROM0:05BA 3E 10            ld   a,10
 ROM0:05BC E0 00            ld   (ff00+00),a
 ROM0:05BE F0 00            ld   a,(ff00+00)
 ROM0:05C0 F0 00            ld   a,(ff00+00)
 ROM0:05C2 F0 00            ld   a,(ff00+00)
 ROM0:05C4 F0 00            ld   a,(ff00+00)
 ROM0:05C6 F0 00            ld   a,(ff00+00)
 ROM0:05C8 F0 00            ld   a,(ff00+00)
 ROM0:05CA 2F               cpl  
 ROM0:05CB E6 0F            and  a,0F
 ROM0:05CD B0               or   b              // Buttons A/B/Z/S, then Directions R/L/U/D
 ROM0:05CE 4F               ld   c,a
 ROM0:05CF F0 90            ld   a,(ff00+90)
 ROM0:05D1 A9               xor  c
 ROM0:05D2 A1               and  c
 ROM0:05D3 47               ld   b,a
 ROM0:05D4 E0 91            ld   (ff00+91),a    // Established newly pressed controls
 ROM0:05D6 79               ld   a,c
 ROM0:05D7 E0 90            ld   (ff00+90),a
 ROM0:05D9 FE 0F            cp   a,0F           // A, B, Select/Z, Start all pressed simultaneously?
 ROM0:05DB 20 06            jr   nz,05E3        // End with A = 48 if soft reset method not used
 ROM0:05DD F0 91            ld   a,(ff00+91)
 ROM0:05DF E6 0F            and  a,0F
 ROM0:05E1 20 05            jr   nz,05E8        // Soft Reset method avoids working literally every frame
 ROM0:05E3 3E 30            ld   a,30
 ROM0:05E5 E0 00            ld   (ff00+00),a
 ROM0:05E7 C9               ret                 // Establishes current direct and newly pressed controls, also sets up Soft Reset method
 ROM0:05E8 C3 B1 02         jp   02B1           // Soft Reset is happening
 ROM0:05EB F0 90            ld   a,(ff00+90)
 ROM0:05ED E6 F0            and  a,F0           // D-Pad stuff
 ROM0:05EF 28 20            jr   z,0611
 ROM0:05F1 21 93 FF         ld   hl,FF93
 ROM0:05F4 F0 91            ld   a,(ff00+91)
 ROM0:05F6 E6 F0            and  a,F0
 ROM0:05F8 28 04            jr   z,05FE         // Jump if initial hold is over
 ROM0:05FA 36 14            ld   (hl),14        // ($FF93) holds 20 frames of holding a D-Pad direction
 ROM0:05FC 18 06            jr   0604
 ROM0:05FE 35               dec  (hl)
 ROM0:05FF 20 10            jr   nz,0611        // Just check buttons unless D-Pad direction was held for at least 20 frames
 ROM0:0601 F0 94            ld   a,(ff00+94)
 ROM0:0603 77               ld   (hl),a         // 2 frames extra
 ROM0:0604 F0 91            ld   a,(ff00+91)
 ROM0:0606 E6 0F            and  a,0F           // Was A/B/Z/S used?
 ROM0:0608 6F               ld   l,a
 ROM0:0609 F0 90            ld   a,(ff00+90)
 ROM0:060B E6 F0            and  a,F0
 ROM0:060D B5               or   l
 ROM0:060E E0 92            ld   (ff00+92),a
 ROM0:0610 C9               ret  
 ROM0:0611 F0 91            ld   a,(ff00+91)
 ROM0:0613 E6 0F            and  a,0F
 ROM0:0615 E0 92            ld   (ff00+92),a
 ROM0:0617 C9               ret                 // Establishes considered active controls
 ROM0:0618 AF               xor  a
 ROM0:0619 EA 60 C5         ld   (C560),a
 ROM0:061C EA 61 C5         ld   (C561),a
 ROM0:061F EA 62 C5         ld   (C562),a       // Empties Palette update bytes
 ROM0:0622 21 2F 06         ld   hl,062F
 ROM0:0625 AF               xor  a
 ROM0:0626 06 10            ld   b,10
 ROM0:0628 CD BC 06         call 06BC           // ($C4E0) to ($C55F) hold ($062F) to ($06AE)
 ROM0:062B CD F2 06         call 06F2           // Both BG and Sprite Palette tables are updated
 ROM0:062E C9               ret                 // Resets Palettes to absolute default Palettes

 ROM0:062F FF 7F 00 00 FF 7F 00 00 FF 7F 10 42 00 00 18 63
 ROM0:063F FF 7F 10 42 00 00 18 63 FF 7F 10 42 00 00 18 63
 ROM0:064F FF 7F 10 42 00 00 18 63 FF 7F 10 42 00 00 18 63
 ROM0:065F FF 7F 10 42 00 00 18 63 FF 7F 10 42 00 00 18 63
 ROM0:066F FF 7F 80 69 FF 7F FF 7F 00 00 BE 01 31 46 FF 7F
 ROM0:067F 00 00 BE 01 31 46 FF 7F 00 00 BE 01 31 46 FF 7F
 ROM0:068F 00 00 BE 01 31 46 FF 7F 00 00 BE 01 31 46 FF 7F
 ROM0:069F 00 00 BE 01 31 46 FF 7F 00 00 BE 01 31 46 FF 7F

 ROM0:06AF 3E 00            ld   a,00
 ROM0:06B1 06 01            ld   b,01
 ROM0:06B3 0E 01            ld   c,01
 ROM0:06B5 21 18 51         ld   hl,5118
 ROM0:06B8 CD D9 06         call 06D9
 ROM0:06BB C9               ret                 // ($C4E0) 8 byte set to 00 00 00 69 FF 7F 40 72
 ROM0:06BC C5               push bc
 ROM0:06BD D5               push de
 ROM0:06BE CB 20            sla  b
 ROM0:06C0 CB 20            sla  b
 ROM0:06C2 CB 20            sla  b
 ROM0:06C4 87               add  a
 ROM0:06C5 87               add  a
 ROM0:06C6 87               add  a
 ROM0:06C7 11 E0 C4         ld   de,C4E0
 ROM0:06CA 83               add  e
 ROM0:06CB 5F               ld   e,a            // E = 240 + A * 8
 ROM0:06CC 7A               ld   a,d
 ROM0:06CD CE 00            adc  a,00
 ROM0:06CF 57               ld   d,a            // DE = $C4E0 + A * 8
 ROM0:06D0 2A               ldi  a,(hl)
 ROM0:06D1 12               ld   (de),a         // ($C4E0 + A * 8) = (HL)
 ROM0:06D2 13               inc  de
 ROM0:06D3 05               dec  b
 ROM0:06D4 20 FA            jr   nz,06D0
 ROM0:06D6 D1               pop  de
 ROM0:06D7 C1               pop  bc
 ROM0:06D8 C9               ret                 // ($C4E0 + A * 8) to ($C4E0 + A * 8 + B * 8 - 1) hold (HL) to (HL + B * 8 - 1)
 ROM0:06D9 C5               push bc
 ROM0:06DA D5               push de
 ROM0:06DB 57               ld   d,a
 ROM0:06DC F0 80            ld   a,(ff00+80)
 ROM0:06DE F5               push af
 ROM0:06DF 79               ld   a,c
 ROM0:06E0 E0 80            ld   (ff00+80),a
 ROM0:06E2 EA 00 20         ld   (2000),a
 ROM0:06E5 7A               ld   a,d
 ROM0:06E6 CD BC 06         call 06BC           // ($C4E0 + A * 8) to ($C4E0 + A * 8 + B * 8 - 1) hold C:(HL) to C:(HL + B * 8 - 1)
 ROM0:06E9 F1               pop  af
 ROM0:06EA E0 80            ld   (ff00+80),a
 ROM0:06EC EA 00 20         ld   (2000),a
 ROM0:06EF D1               pop  de
 ROM0:06F0 C1               pop  bc
 ROM0:06F1 C9               ret  
 ROM0:06F2 AF               xor  a
 ROM0:06F3 CB F7            set  6,a
 ROM0:06F5 CB EF            set  5,a            // A = 96
 ROM0:06F7 18 13            jr   070C
 ROM0:06F9 AF               xor  a
 ROM0:06FA CB F7            set  6,a            // A = 64
 ROM0:06FC 18 0E            jr   070C
 ROM0:06FE AF               xor  a
 ROM0:06FF CB EF            set  5,a            // A = 32
 ROM0:0701 18 09            jr   070C
 ROM0:0703 78               ld   a,b
 ROM0:0704 EA 61 C5         ld   (C561),a
 ROM0:0707 79               ld   a,c
 ROM0:0708 EA 62 C5         ld   (C562),a
 ROM0:070B AF               xor  a
 ROM0:070C CB FF            set  7,a
 ROM0:070E EA 60 C5         ld   (C560),a
 ROM0:0711 FA 0F C0         ld   a,(C00F)
 ROM0:0714 CB 7F            bit  7,a
 ROM0:0716 C0               ret  nz
 ROM0:0717 CD 1B 07         call 071B           // Palette tables are updated based on bit 6,($C560) for BG and bit 5,($C560) for Sprites; or given Palette tables based on bits in B and C if ($C560) doesn't have bits 5 and 6 active
 ROM0:071A C9               ret  
 ROM0:071B FA 60 C5         ld   a,(C560)
 ROM0:071E CB 7F            bit  7,a
 ROM0:0720 28 66            jr   z,0788         // End immediately if ($C560) < 128
 ROM0:0722 CB 77            bit  6,a
 ROM0:0724 20 34            jr   nz,075A
 ROM0:0726 CB 6F            bit  5,a
 ROM0:0728 20 42            jr   nz,076C
 ROM0:072A 06 08            ld   b,08
 ROM0:072C FA 61 C5         ld   a,(C561)
 ROM0:072F 4F               ld   c,a
 ROM0:0730 CB 09            rrc  c              // Loop begins here
 ROM0:0732 30 0A            jr   nc,073E        // Cycle skipped if bit is empty
 ROM0:0734 C5               push bc
 ROM0:0735 3E 08            ld   a,08
 ROM0:0737 90               sub  b
 ROM0:0738 06 08            ld   b,08
 ROM0:073A CD 89 07         call 0789           // Info in $C4E0 table determined by A placed in respective Palette table (BG)
 ROM0:073D C1               pop  bc
 ROM0:073E 05               dec  b
 ROM0:073F 20 EF            jr   nz,0730
 ROM0:0741 06 08            ld   b,08
 ROM0:0743 FA 62 C5         ld   a,(C562)
 ROM0:0746 4F               ld   c,a
 ROM0:0747 CB 09            rrc  c              // Loop begins here
 ROM0:0749 30 0A            jr   nc,0755        // Cycle skipped if bit is empty
 ROM0:074B C5               push bc
 ROM0:074C 3E 10            ld   a,10
 ROM0:074E 90               sub  b
 ROM0:074F 06 08            ld   b,08
 ROM0:0751 CD 89 07         call 0789           // Info in $C4E0 table determined by A placed in respective Palette table (Sprite)
 ROM0:0754 C1               pop  bc
 ROM0:0755 05               dec  b
 ROM0:0756 20 EF            jr   nz,0747
 ROM0:0758 18 23            jr   077D           // This jumps to closing stuff
 ROM0:075A AF               xor  a
 ROM0:075B 06 40            ld   b,40
 ROM0:075D CD 89 07         call 0789           // Info in $C4E0 tables placed in BG Palette tables
 ROM0:0760 FA 60 C5         ld   a,(C560)
 ROM0:0763 CB B7            res  6,a
 ROM0:0765 EA 60 C5         ld   (C560),a
 ROM0:0768 CB 6F            bit  5,a
 ROM0:076A 28 11            jr   z,077D
 ROM0:076C 3E 08            ld   a,08
 ROM0:076E 06 40            ld   b,40
 ROM0:0770 CD 89 07         call 0789           // Info in $C520 tables placed in Sprite Palette table
 ROM0:0773 FA 60 C5         ld   a,(C560)
 ROM0:0776 CB AF            res  5,a
 ROM0:0778 EA 60 C5         ld   (C560),a
 ROM0:077B 18 00            jr   077D
 ROM0:077D AF               xor  a
 ROM0:077E EA 61 C5         ld   (C561),a
 ROM0:0781 EA 62 C5         ld   (C562),a
 ROM0:0784 EA 60 C5         ld   (C560),a
 ROM0:0787 C9               ret  
 ROM0:0788 C9               ret                 // If bit 7,($C560) is active: Palette tables are updated based on bit 6,($C560) for BG and bit 5,($C560) for Sprites; or given Palette tables based on bits in ($C561) 2 byte if ($C560) doesn't have bits 5 and 6 active
 ROM0:0789 87               add  a
 ROM0:078A 87               add  a
 ROM0:078B 87               add  a
 ROM0:078C 5F               ld   e,a
 ROM0:078D 16 00            ld   d,00           // DE = A * 8
 ROM0:078F 21 E0 C4         ld   hl,C4E0
 ROM0:0792 19               add  hl,de          // HL = $C4E0 + A * 8
 ROM0:0793 0E 68            ld   c,68
 ROM0:0795 CB 77            bit  6,a
 ROM0:0797 28 02            jr   z,079B
 ROM0:0799 0E 6A            ld   c,6A           // BG for (A/8)%2 = 0, Sprite for (A/8)%2 = 1
 ROM0:079B E6 3F            and  a,3F
 ROM0:079D 5F               ld   e,a            // E = (A * 8) % 64
 ROM0:079E 7B               ld   a,e            // Loop begins here
 ROM0:079F E2               ld   (ff00+c),a     // Related Palette index established
 ROM0:07A0 0C               inc  c              // Related Palette data
 ROM0:07A1 F0 41            ld   a,(ff00+41)
 ROM0:07A3 E6 02            and  a,02           // Search OAM-RAM mode?
 ROM0:07A5 20 FA            jr   nz,07A1
 ROM0:07A7 7E               ld   a,(hl)
 ROM0:07A8 E2               ld   (ff00+c),a     // Related Palette data established
 ROM0:07A9 F2               ld   a,(ff00+c)
 ROM0:07AA BE               cp   (hl)
 ROM0:07AB 20 F4            jr   nz,07A1        // Catches sudden change with infinite loop
 ROM0:07AD 0D               dec  c
 ROM0:07AE 1C               inc  e
 ROM0:07AF 23               inc  hl
 ROM0:07B0 05               dec  b
 ROM0:07B1 20 EB            jr   nz,079E
 ROM0:07B3 C9               ret                 // Info in $C4E0 table determined by A placed in respective Palette table
 ROM0:07B4 F0 80            ld   a,(ff00+80)
 ROM0:07B6 F5               push af
 ROM0:07B7 11 FF 7F         ld   de,7FFF
 ROM0:07BA 21 67 C5         ld   hl,C567
 ROM0:07BD 01 40 00         ld   bc,0040
 ROM0:07C0 CD A5 3B         call 3BA5           // ($C567) to ($C5E6) odd hold $FF, ($C567) to ($C5E6) even hold $7F
 ROM0:07C3 3E 10            ld   a,10
 ROM0:07C5 E0 80            ld   (ff00+80),a
 ROM0:07C7 EA 00 20         ld   (2000),a
 ROM0:07CA CD 6E 4B         call 4B6E           // ($C520) sprite set grabs first color of each palette from ($C5A7) sprite set
 ROM0:07CD 3E 01            ld   a,01
 ROM0:07CF EA 63 C5         ld   (C563),a
 ROM0:07D2 3E 08            ld   a,08
 ROM0:07D4 EA 64 C5         ld   (C564),a
 ROM0:07D7 CD D2 04         call 04D2           // Next frame
 ROM0:07DA CD 8B 4B         call 4B8B           // Updates all Palette tables to be closer to new colors, decrements ($C564), empties ($C563) if ($C564) becomes empty
 ROM0:07DD FA 63 C5         ld   a,(C563)
 ROM0:07E0 A7               and  a
 ROM0:07E1 20 F4            jr   nz,07D7
 ROM0:07E3 F1               pop  af
 ROM0:07E4 E0 80            ld   (ff00+80),a
 ROM0:07E6 EA 00 20         ld   (2000),a
 ROM0:07E9 C9               ret                 // Shifts palettes closer to all white over the span of 8 frames
 ROM0:07EA F0 80            ld   a,(ff00+80)
 ROM0:07EC F5               push af
 ROM0:07ED 11 FF 7F         ld   de,7FFF
 ROM0:07F0 21 67 C5         ld   hl,C567
 ROM0:07F3 01 20 00         ld   bc,0020
 ROM0:07F6 CD A5 3B         call 3BA5
 ROM0:07F9 3E 10            ld   a,10
 ROM0:07FB E0 80            ld   (ff00+80),a
 ROM0:07FD EA 00 20         ld   (2000),a
 ROM0:0800 3E 01            ld   a,01
 ROM0:0802 EA 63 C5         ld   (C563),a
 ROM0:0805 3E 08            ld   a,08
 ROM0:0807 EA 64 C5         ld   (C564),a
 ROM0:080A CD D2 04         call 04D2           // Next frame
 ROM0:080D CD 9E 4B         call 4B9E           // Updates BG Palette tables to be closer to new colors, decrements ($C564), empties ($C563) if ($C564) becomes empty
 ROM0:0810 FA 63 C5         ld   a,(C563)
 ROM0:0813 A7               and  a
 ROM0:0814 20 F4            jr   nz,080A
 ROM0:0816 F1               pop  af
 ROM0:0817 E0 80            ld   (ff00+80),a
 ROM0:0819 EA 00 20         ld   (2000),a
 ROM0:081C C9               ret                 // Shifts BG palettes closer to all white over the span of 8 frames
 ROM0:081D F0 80            ld   a,(ff00+80)
 ROM0:081F F5               push af
 ROM0:0820 3E 10            ld   a,10
 ROM0:0822 E0 80            ld   (ff00+80),a
 ROM0:0824 EA 00 20         ld   (2000),a
 ROM0:0827 CD 55 4B         call 4B55           // Palettes put in ($C567~$C5E6) while ($C4E0~C55F) ends up with all White
 ROM0:082A CD 6E 4B         call 4B6E           // ($C520) sprite set grabs first color of each palette from ($C5A7) sprite set
 ROM0:082D CD F2 06         call 06F2           // Both BG and Sprite Palette tables are updated
 ROM0:0830 3E 01            ld   a,01
 ROM0:0832 EA 63 C5         ld   (C563),a
 ROM0:0835 3E 08            ld   a,08
 ROM0:0837 EA 64 C5         ld   (C564),a
 ROM0:083A CD E5 04         call 04E5           // If ($C00F) bit 7 is off, set 7,($C00F); ($FF40) = new ($C00F)
 ROM0:083D CD D2 04         call 04D2           // Next frame
 ROM0:0840 CD 8B 4B         call 4B8B           // Updates all Palette tables to be closer to new colors, decrements ($C564), empties ($C563) if ($C564) becomes empty
 ROM0:0843 FA 63 C5         ld   a,(C563)
 ROM0:0846 A7               and  a
 ROM0:0847 20 F4            jr   nz,083D
 ROM0:0849 F1               pop  af
 ROM0:084A E0 80            ld   (ff00+80),a
 ROM0:084C EA 00 20         ld   (2000),a
 ROM0:084F C9               ret                 // Shifts palettes closer to new colors from all white over the span of 8 frames
 ROM0:0850 C5               push bc
 ROM0:0851 D5               push de
 ROM0:0852 F0 82            ld   a,(ff00+82)
 ROM0:0854 F5               push af
 ROM0:0855 3E 07            ld   a,07
 ROM0:0857 E0 82            ld   (ff00+82),a
 ROM0:0859 E0 70            ld   (ff00+70),a    // WRAM Bank #7
 ROM0:085B AF               xor  a
 ROM0:085C E0 A1            ld   (ff00+A1),a
 ROM0:085E E0 A2            ld   (ff00+A2),a    // $FFA1 and $FFA2 are emptied
 ROM0:0860 21 A3 FF         ld   hl,FFA3
 ROM0:0863 CD BB 08         call 08BB           // Freaking Jump to ($FFA3)
 ROM0:0866 F0 A1            ld   a,(ff00+A1)    // Big loop starts here
 ROM0:0868 6F               ld   l,a
 ROM0:0869 26 00            ld   h,00
 ROM0:086B 29               add  hl,hl
 ROM0:086C 7C               ld   a,h
 ROM0:086D C6 DE            add  a,DE
 ROM0:086F 67               ld   h,a            // HL = $DE00 + ($FFA1) * 2
 ROM0:0870 46               ld   b,(hl)
 ROM0:0871 23               inc  hl
 ROM0:0872 4E               ld   c,(hl)         // BC = WRA7($DE00 + ($FFA1) * 2) 2 byte
 ROM0:0873 21 A5 FF         ld   hl,FFA5
 ROM0:0876 CD BB 08         call 08BB           // Another of these....this time to ($FFA5)
 ROM0:0879 1E 00            ld   e,00
 ROM0:087B C5               push bc             // Loop starts here
 ROM0:087C D5               push de
 ROM0:087D CD D9 28         call 28D9           // BC = relative coordinates, Set Carry Flag based on relative coordinates being out of bounds
 ROM0:0880 38 20            jr   c,08A2         // Finish given loop if relative coordinates is out of bounds
 ROM0:0882 21 A7 FF         ld   hl,FFA7
 ROM0:0885 CD BB 08         call 08BB           // Oh joy. ($FFA7) version.
 ROM0:0888 A7               and  a
 ROM0:0889 20 17            jr   nz,08A2        // End smaller cycle if A != 0
 ROM0:088B 21 A9 FF         ld   hl,FFA9
 ROM0:088E CD BB 08         call 08BB           // ($FFA9) version. How fun.
 ROM0:0891 F0 A2            ld   a,(ff00+A2)
 ROM0:0893 6F               ld   l,a
 ROM0:0894 26 00            ld   h,00
 ROM0:0896 29               add  hl,hl
 ROM0:0897 7C               ld   a,h
 ROM0:0898 C6 DE            add  a,DE
 ROM0:089A 67               ld   h,a
 ROM0:089B 70               ld   (hl),b
 ROM0:089C 23               inc  hl
 ROM0:089D 71               ld   (hl),c         // ($DE00 + ($FFA2) * 2) 2 byte = BC
 ROM0:089E 21 A2 FF         ld   hl,FFA2
 ROM0:08A1 34               inc  (hl)           // ($DE00 + ($FFA2) * 2) 2 byte = BC, ($FFA2) += 1
 ROM0:08A2 D1               pop  de             // Meets back here if ($FFA7) process resulted in A != 0
 ROM0:08A3 C1               pop  bc
 ROM0:08A4 1C               inc  e
 ROM0:08A5 7B               ld   a,e
 ROM0:08A6 FE 06            cp   a,06
 ROM0:08A8 20 D1            jr   nz,087B        // Loop happens 6 times
 ROM0:08AA 21 A1 FF         ld   hl,FFA1
 ROM0:08AD 34               inc  (hl)
 ROM0:08AE F0 A2            ld   a,(ff00+A2)
 ROM0:08B0 BE               cp   (hl)
 ROM0:08B1 20 B3            jr   nz,0866        // Big loop restarts if ($FFA1) != ($FFA2)
 ROM0:08B3 F1               pop  af
 ROM0:08B4 E0 82            ld   (ff00+82),a
 ROM0:08B6 E0 70            ld   (ff00+70),a
 ROM0:08B8 D1               pop  de
 ROM0:08B9 C1               pop  bc
 ROM0:08BA C9               ret                 // ($FFA3) process; then loop making use of list of tiles starting at WRA7($DE00), starting with ($FFA5) process, and then loop per adjacent tile that does ($FFA7) process where result A = 0 adds the tile to the WRA7($DE00) table list and manages the ($FFA9) process; big loop done when all associated tiles are checked
 ROM0:08BB 2A               ldi  a,(hl)
 ROM0:08BC 66               ld   h,(hl)
 ROM0:08BD 6F               ld   l,a
 ROM0:08BE E9               jp   hl             // Jump to (HL) 2 byte
 ROM0:08BF C9               ret  
 ROM0:08C0 73               ld   (hl),e
 ROM0:08C1 23               inc  hl
 ROM0:08C2 72               ld   (hl),d
 ROM0:08C3 23               inc  hl
 ROM0:08C4 C9               ret                 // (HL) 2 byte = DE, HL += 2
 ROM0:08C5 F0 A2            ld   a,(ff00+A2)
 ROM0:08C7 6F               ld   l,a
 ROM0:08C8 26 00            ld   h,00           // HL = ($FFA2)
 ROM0:08CA 29               add  hl,hl          // HL = ($FFA2) * 2
 ROM0:08CB 7C               ld   a,h
 ROM0:08CC C6 DE            add  a,DE           // A = ($FFA2) / 128 + 222
 ROM0:08CE 67               ld   h,a
 ROM0:08CF 70               ld   (hl),b         // ($DE00 + ($FFA2) * 2) = B
 ROM0:08D0 23               inc  hl
 ROM0:08D1 71               ld   (hl),c         // ($DE00 + ($FFA2) * 2 + 1) = C
 ROM0:08D2 21 A2 FF         ld   hl,FFA2
 ROM0:08D5 34               inc  (hl)           // ($FFA2) += 1
 ROM0:08D6 C9               ret                 // ($DE00 + ($FFA2) * 2) 2 byte = BC, ($FFA2) += 1
 ROM0:08D7 79               ld   a,c
 ROM0:08D8 0F               rrca 
 ROM0:08D9 0F               rrca 
 ROM0:08DA 6F               ld   l,a
 ROM0:08DB E6 0F            and  a,0F
 ROM0:08DD C6 D0            add  a,D0
 ROM0:08DF 67               ld   h,a
 ROM0:08E0 7D               ld   a,l
 ROM0:08E1 E6 F0            and  a,F0
 ROM0:08E3 80               add  b
 ROM0:08E4 6F               ld   l,a
 ROM0:08E5 C9               ret                 // HL = $D000 + B + C * 64
 ROM0:08E6 67               ld   h,a
 ROM0:08E7 79               ld   a,c
 ROM0:08E8 0F               rrca 
 ROM0:08E9 0F               rrca 
 ROM0:08EA 6F               ld   l,a
 ROM0:08EB E6 0F            and  a,0F
 ROM0:08ED 84               add  h
 ROM0:08EE 67               ld   h,a
 ROM0:08EF 7D               ld   a,l
 ROM0:08F0 E6 F0            and  a,F0
 ROM0:08F2 80               add  b
 ROM0:08F3 6F               ld   l,a
 ROM0:08F4 C9               ret                 // HL = A * 256 + B + C * 64
 ROM0:08F5 F0 82            ld   a,(ff00+82)
 ROM0:08F7 F5               push af
 ROM0:08F8 3E 05            ld   a,05
 ROM0:08FA E0 82            ld   (ff00+82),a
 ROM0:08FC E0 70            ld   (ff00+70),a
 ROM0:08FE CD D7 08         call 08D7           // HL = $D000 + B + C * 64
 ROM0:0901 6E               ld   l,(hl)
 ROM0:0902 F1               pop  af
 ROM0:0903 E0 82            ld   (ff00+82),a
 ROM0:0905 E0 70            ld   (ff00+70),a
 ROM0:0907 7D               ld   a,l
 ROM0:0908 FE FF            cp   a,FF
 ROM0:090A C9               ret                 // cp WRA5($D000 + B + C * 64), -1
 ROM0:090B C5               push bc
 ROM0:090C D5               push de
 ROM0:090D 6F               ld   l,a
 ROM0:090E F0 82            ld   a,(ff00+82)
 ROM0:0910 F5               push af
 ROM0:0911 3E 03            ld   a,03
 ROM0:0913 E0 82            ld   (ff00+82),a
 ROM0:0915 E0 70            ld   (ff00+70),a
 ROM0:0917 CD 7A 09         call 097A           // HL = $D000 + A * 16
 ROM0:091A 06 00            ld   b,00
 ROM0:091C 09               add  hl,bc          // HL = $D000 + A * 16 + C
 ROM0:091D 46               ld   b,(hl)         // B = ($D000 + A * 16 + C)
 ROM0:091E F1               pop  af
 ROM0:091F E0 82            ld   (ff00+82),a
 ROM0:0921 E0 70            ld   (ff00+70),a
 ROM0:0923 78               ld   a,b            // A = ($D000 + A * 16 + C)
 ROM0:0924 D1               pop  de
 ROM0:0925 C1               pop  bc
 ROM0:0926 C9               ret  
 ROM0:0927 C5               push bc
 ROM0:0928 6F               ld   l,a
 ROM0:0929 F0 82            ld   a,(ff00+82)
 ROM0:092B F5               push af
 ROM0:092C 3E 03            ld   a,03
 ROM0:092E E0 82            ld   (ff00+82),a
 ROM0:0930 E0 70            ld   (ff00+70),a
 ROM0:0932 CD 7A 09         call 097A           // HL = $D000 + A * 16
 ROM0:0935 06 00            ld   b,00
 ROM0:0937 09               add  hl,bc          // HL = $D000 + A * 16 + C
 ROM0:0938 5E               ld   e,(hl)
 ROM0:0939 23               inc  hl
 ROM0:093A 56               ld   d,(hl)         // DE = ($D000 + A * 16 + C)
 ROM0:093B F1               pop  af
 ROM0:093C E0 82            ld   (ff00+82),a
 ROM0:093E E0 70            ld   (ff00+70),a
 ROM0:0940 C1               pop  bc
 ROM0:0941 C9               ret  
 ROM0:0942 C5               push bc
 ROM0:0943 D5               push de
 ROM0:0944 6F               ld   l,a
 ROM0:0945 F0 82            ld   a,(ff00+82)
 ROM0:0947 F5               push af
 ROM0:0948 3E 03            ld   a,03
 ROM0:094A E0 82            ld   (ff00+82),a
 ROM0:094C E0 70            ld   (ff00+70),a
 ROM0:094E CD 7A 09         call 097A           // HL = $D000 + A * 16
 ROM0:0951 58               ld   e,b
 ROM0:0952 06 00            ld   b,00
 ROM0:0954 09               add  hl,bc          // HL = $D000 + A * 16 + C
 ROM0:0955 73               ld   (hl),e         // ($D000 + A * 16 + C) = B
 ROM0:0956 F1               pop  af
 ROM0:0957 E0 82            ld   (ff00+82),a
 ROM0:0959 E0 70            ld   (ff00+70),a
 ROM0:095B D1               pop  de
 ROM0:095C C1               pop  bc
 ROM0:095D C9               ret  
 ROM0:095E D5               push de
 ROM0:095F 6F               ld   l,a
 ROM0:0960 F0 82            ld   a,(ff00+82)
 ROM0:0962 F5               push af
 ROM0:0963 3E 03            ld   a,03
 ROM0:0965 E0 82            ld   (ff00+82),a
 ROM0:0967 E0 70            ld   (ff00+70),a
 ROM0:0969 CD 7A 09         call 097A           // HL = $D000 + A * 16
 ROM0:096C 01 01 00         ld   bc,0001
 ROM0:096F 09               add  hl,bc          // HL = $D000 + A * 16 + 1
 ROM0:0970 46               ld   b,(hl)
 ROM0:0971 23               inc  hl
 ROM0:0972 4E               ld   c,(hl)
 ROM0:0973 F1               pop  af
 ROM0:0974 E0 82            ld   (ff00+82),a
 ROM0:0976 E0 70            ld   (ff00+70),a
 ROM0:0978 D1               pop  de
 ROM0:0979 C9               ret                 // BC = unit coordinates
 ROM0:097A 26 00            ld   h,00
 ROM0:097C 29               add  hl,hl
 ROM0:097D 29               add  hl,hl
 ROM0:097E 29               add  hl,hl
 ROM0:097F 29               add  hl,hl
 ROM0:0980 11 00 D0         ld   de,D000
 ROM0:0983 19               add  hl,de
 ROM0:0984 C9               ret                 // HL = $D000 + L * 16
 ROM0:0985 F0 82            ld   a,(ff00+82)
 ROM0:0987 F5               push af
 ROM0:0988 3E 01            ld   a,01
 ROM0:098A E0 82            ld   (ff00+82),a
 ROM0:098C E0 70            ld   (ff00+70),a    // Map WRAM Bank
 ROM0:098E CD F8 15         call 15F8           // HL = $D000 + B + C * 64
 ROM0:0991 66               ld   h,(hl)         // H = Terrain type
 ROM0:0992 F1               pop  af
 ROM0:0993 E0 82            ld   (ff00+82),a
 ROM0:0995 E0 70            ld   (ff00+70),a
 ROM0:0997 7C               ld   a,h
 ROM0:0998 E6 3F            and  a,3F
 ROM0:099A C9               ret                 // A = Terrain type
 ROM0:099B 21 AB 18         ld   hl,18AB
 ROM0:099E 85               add  l
 ROM0:099F 6F               ld   l,a
 ROM0:09A0 7C               ld   a,h
 ROM0:09A1 CE 00            adc  a,00
 ROM0:09A3 67               ld   h,a
 ROM0:09A4 7E               ld   a,(hl)
 ROM0:09A5 C9               ret                 // A = Terrain Type ID
 ROM0:09A6 F0 80            ld   a,(ff00+80)
 ROM0:09A8 F5               push af
 ROM0:09A9 78               ld   a,b
 ROM0:09AA E0 80            ld   (ff00+80),a
 ROM0:09AC EA 00 20         ld   (2000),a
 ROM0:09AF 7E               ld   a,(hl)
 ROM0:09B0 EA 24 C6         ld   (C624),a
 ROM0:09B3 F1               pop  af
 ROM0:09B4 E0 80            ld   (ff00+80),a
 ROM0:09B6 EA 00 20         ld   (2000),a
 ROM0:09B9 FA 24 C6         ld   a,(C624)
 ROM0:09BC C9               ret                 // A = B:(HL)
 ROM0:09BD 11 00 0A         ld   de,0A00
 ROM0:09C0 21 E0 C4         ld   hl,C4E0
 ROM0:09C3 01 40 00         ld   bc,0040
 ROM0:09C6 CD 50 3B         call 3B50           // ($C4E0~$C51F) = ($0A00~$0A3F)
 ROM0:09C9 01 00 FF         ld   bc,FF00
 ROM0:09CC CD 03 07         call 0703           // All BG Palette tables are updated
 ROM0:09CF C9               ret                 // Updates BG Palettes to $0A00 table

 ROM0:09D0 09               add  hl,bc
 ROM0:09D1 09               add  hl,bc
 ROM0:09D2 09               add  hl,bc
 ROM0:09D3 09               add  hl,bc
 ROM0:09D4 09               add  hl,bc
 ROM0:09D5 09               add  hl,bc
 ROM0:09D6 0B               dec  bc
 ROM0:09D7 0B               dec  bc
 ROM0:09D8 0B               dec  bc
 ROM0:09D9 0F               rrca 
 ROM0:09DA 0B               dec  bc
 ROM0:09DB 0B               dec  bc
 ROM0:09DC 0B               dec  bc
 ROM0:09DD 0B               dec  bc
 ROM0:09DE 0B               dec  bc
 ROM0:09DF 0F               rrca 
 ROM0:09E0 0B               dec  bc
 ROM0:09E1 0B               dec  bc
 ROM0:09E2 0B               dec  bc
 ROM0:09E3 0B               dec  bc
 ROM0:09E4 0B               dec  bc
 ROM0:09E5 4B               ld   c,e
 ROM0:09E6 0B               dec  bc
 ROM0:09E7 4B               ld   c,e
 ROM0:09E8 2D               dec  l
 ROM0:09E9 6D               ld   l,l
 ROM0:09EA 2D               dec  l
 ROM0:09EB 6D               ld   l,l
 ROM0:09EC 6D               ld   l,l
 ROM0:09ED 6D               ld   l,l
 ROM0:09EE 6E               ld   l,(hl)
 ROM0:09EF 6E               ld   l,(hl)
 ROM0:09F0 6F               ld   l,a
 ROM0:09F1 6E               ld   l,(hl)
 ROM0:09F2 6E               ld   l,(hl)
 ROM0:09F3 6E               ld   l,(hl)
 ROM0:09F4 6E               ld   l,(hl)
 ROM0:09F5 6E               ld   l,(hl)
 ROM0:09F6 6F               ld   l,a
 ROM0:09F7 6E               ld   l,(hl)
 ROM0:09F8 6E               ld   l,(hl)
 ROM0:09F9 6E               ld   l,(hl)
 ROM0:09FA 6E               ld   l,(hl)
 ROM0:09FB 6E               ld   l,(hl)
 ROM0:09FC 6E               ld   l,(hl)
 ROM0:09FD 6E               ld   l,(hl)
 ROM0:09FE 6E               ld   l,(hl)
 ROM0:09FF 6E               ld   l,(hl)

 ROM0:0A00 E7 1C 07 69 FF 7F 47 72
 ROM0:0A08 FF 7F E7 1C 7F 1F FF 4B
 ROM0:0A10 FF 7F 6C 1F 08 1E E7 1C
 ROM0:0A18 FF 7F E7 1C 7F 1F 16 1E
 ROM0:0A20 10 42 6B 2D FF 7F FF 7F
 ROM0:0A28 FF 7F E7 1C FF 1C 9F 31
 ROM0:0A30 FF 7F E7 1C FF 1C F1 1C
 ROM0:0A38 FF 7F E7 1C 08 21 07 1F

 ROM0:0A40 01 02 03         ld   bc,0302
 ROM0:0A43 04               inc  b
 ROM0:0A44 05               dec  b
 ROM0:0A45 06 07            ld   b,07
 ROM0:0A47 08 09 0A         ld   (0A09),sp
 ROM0:0A4A 00               nop  
 ROM0:0A4B 14               inc  d
 ROM0:0A4C 0C               inc  c
 ROM0:0A4D 0D               dec  c
 ROM0:0A4E 0E 13            ld   c,13
 ROM0:0A50 00               nop  
 ROM0:0A51 0B               dec  bc
 ROM0:0A52 0F               rrca 
 ROM0:0A53 10 11            <corrupted stop>
 ROM0:0A55 04               inc  b
 ROM0:0A56 12               ld   (de),a
 ROM0:0A57 06 00            ld   b,00
 ROM0:0A59 00               nop  
 ROM0:0A5A 00               nop  
 ROM0:0A5B 00               nop  
 ROM0:0A5C 00               nop  
 ROM0:0A5D 00               nop  
 ROM0:0A5E 01 01 01         ld   bc,0101
 ROM0:0A61 04               inc  b
 ROM0:0A62 01 01 01         ld   bc,0101
 ROM0:0A65 01 01 04         ld   bc,0401
 ROM0:0A68 01 01 01         ld   bc,0101
 ROM0:0A6B 01 01 41         ld   bc,4101
 ROM0:0A6E 01 41 06         ld   bc,0641
 ROM0:0A71 12               ld   (de),a
 ROM0:0A72 04               inc  b
 ROM0:0A73 11 10 0F         ld   de,0F10
 ROM0:0A76 0B               dec  bc
 ROM0:0A77 00               nop  
 ROM0:0A78 13               inc  de
 ROM0:0A79 0E 0D            ld   c,0D
 ROM0:0A7B 0C               inc  c
 ROM0:0A7C 14               inc  d
 ROM0:0A7D 00               nop  
 ROM0:0A7E 0A               ld   a,(bc)
 ROM0:0A7F 09               add  hl,bc
 ROM0:0A80 08 07 06         ld   (0607),sp
 ROM0:0A83 05               dec  b
 ROM0:0A84 04               inc  b
 ROM0:0A85 03               inc  bc
 ROM0:0A86 02               ld   (bc),a
 ROM0:0A87 01 22 62         ld   bc,6222
 ROM0:0A8A 22               ldi  (hl),a
 ROM0:0A8B 62               ld   h,d
 ROM0:0A8C 62               ld   h,d
 ROM0:0A8D 62               ld   h,d
 ROM0:0A8E 63               ld   h,e
 ROM0:0A8F 63               ld   h,e
 ROM0:0A90 64               ld   h,h
 ROM0:0A91 63               ld   h,e
 ROM0:0A92 63               ld   h,e
 ROM0:0A93 63               ld   h,e
 ROM0:0A94 63               ld   h,e
 ROM0:0A95 63               ld   h,e
 ROM0:0A96 64               ld   h,h
 ROM0:0A97 63               ld   h,e
 ROM0:0A98 63               ld   h,e
 ROM0:0A99 63               ld   h,e
 ROM0:0A9A 63               ld   h,e
 ROM0:0A9B 63               ld   h,e
 ROM0:0A9C 63               ld   h,e
 ROM0:0A9D 63               ld   h,e
 ROM0:0A9E 63               ld   h,e
 ROM0:0A9F 63               ld   h,e
 ROM0:0AA0 00               nop  
 ROM0:0AA1 00               nop  
 ROM0:0AA2 00               nop  
 ROM0:0AA3 00               nop  
 ROM0:0AA4 00               nop  
 ROM0:0AA5 00               nop  
 ROM0:0AA6 00               nop  
 ROM0:0AA7 00               nop  
 ROM0:0AA8 00               nop  
 ROM0:0AA9 00               nop  
 ROM0:0AAA 00               nop  
 ROM0:0AAB 00               nop  
 ROM0:0AAC 00               nop  
 ROM0:0AAD 00               nop  
 ROM0:0AAE 00               nop  
 ROM0:0AAF 00               nop  
 ROM0:0AB0 FF               rst  38
 ROM0:0AB1 3F               ccf  
 ROM0:0AB2 FF               rst  38
 ROM0:0AB3 7F               ld   a,a
 ROM0:0AB4 BF               cp   a
 ROM0:0AB5 7F               ld   a,a
 ROM0:0AB6 9F               sbc  a
 ROM0:0AB7 7F               ld   a,a
 ROM0:0AB8 0F               rrca 
 ROM0:0AB9 FF               rst  38
 ROM0:0ABA 00               nop  
 ROM0:0ABB FF               rst  38
 ROM0:0ABC 00               nop  
 ROM0:0ABD FF               rst  38
 ROM0:0ABE 00               nop  
 ROM0:0ABF FF               rst  38
 ROM0:0AC0 FF               rst  38
 ROM0:0AC1 FF               rst  38
 ROM0:0AC2 FF               rst  38
 ROM0:0AC3 FF               rst  38
 ROM0:0AC4 FF               rst  38
 ROM0:0AC5 E7               rst  20
 ROM0:0AC6 FF               rst  38
 ROM0:0AC7 E7               rst  20
 ROM0:0AC8 FF               rst  38
 ROM0:0AC9 E7               rst  20
 ROM0:0ACA FF               rst  38
 ROM0:0ACB 00               nop  
 ROM0:0ACC FF               rst  38
 ROM0:0ACD 00               nop  
 ROM0:0ACE 18 E7            jr   0AB7
 ROM0:0AD0 FF               rst  38
 ROM0:0AD1 FF               rst  38
 ROM0:0AD2 FF               rst  38
 ROM0:0AD3 FF               rst  38
 ROM0:0AD4 FF               rst  38
 ROM0:0AD5 FF               rst  38
 ROM0:0AD6 FF               rst  38
 ROM0:0AD7 FE FF            cp   a,FF
 ROM0:0AD9 FE 01            cp   a,01
 ROM0:0ADB FE 03            cp   a,03
 ROM0:0ADD FC               -    
 ROM0:0ADE 03               inc  bc
 ROM0:0ADF FC               -    
 ROM0:0AE0 FF               rst  38
 ROM0:0AE1 FF               rst  38
 ROM0:0AE2 FF               rst  38
 ROM0:0AE3 FF               rst  38
 ROM0:0AE4 FF               rst  38
 ROM0:0AE5 00               nop  
 ROM0:0AE6 FF               rst  38
 ROM0:0AE7 00               nop  
 ROM0:0AE8 FF               rst  38
 ROM0:0AE9 00               nop  
 ROM0:0AEA FF               rst  38
 ROM0:0AEB 00               nop  
 ROM0:0AEC FF               rst  38
 ROM0:0AED 00               nop  
 ROM0:0AEE F0 00            ld   a,(ff00+00)
 ROM0:0AF0 FF               rst  38
 ROM0:0AF1 FF               rst  38
 ROM0:0AF2 FF               rst  38
 ROM0:0AF3 FF               rst  38
 ROM0:0AF4 FF               rst  38
 ROM0:0AF5 00               nop  
 ROM0:0AF6 FF               rst  38
 ROM0:0AF7 03               inc  bc
 ROM0:0AF8 FF               rst  38
 ROM0:0AF9 03               inc  bc
 ROM0:0AFA FF               rst  38
 ROM0:0AFB 00               nop  
 ROM0:0AFC FF               rst  38
 ROM0:0AFD 00               nop  
 ROM0:0AFE 00               nop  
 ROM0:0AFF 00               nop  
 ROM0:0B00 FF               rst  38
 ROM0:0B01 FE FF            cp   a,FF
 ROM0:0B03 FF               rst  38
 ROM0:0B04 FF               rst  38
 ROM0:0B05 07               rlca 
 ROM0:0B06 FF               rst  38
 ROM0:0B07 03               inc  bc
 ROM0:0B08 FF               rst  38
 ROM0:0B09 03               inc  bc
 ROM0:0B0A FC               -    
 ROM0:0B0B 03               inc  bc
 ROM0:0B0C FC               -    
 ROM0:0B0D 03               inc  bc
 ROM0:0B0E 1C               inc  e
 ROM0:0B0F 03               inc  bc
 ROM0:0B10 00               nop  
 ROM0:0B11 FF               rst  38
 ROM0:0B12 00               nop  
 ROM0:0B13 FF               rst  38
 ROM0:0B14 0C               inc  c
 ROM0:0B15 FF               rst  38
 ROM0:0B16 2C               inc  l
 ROM0:0B17 F7               rst  30
 ROM0:0B18 2C               inc  l
 ROM0:0B19 F7               rst  30
 ROM0:0B1A 0C               inc  c
 ROM0:0B1B F7               rst  30
 ROM0:0B1C 2C               inc  l
 ROM0:0B1D FF               rst  38
 ROM0:0B1E 00               nop  
 ROM0:0B1F FF               rst  38
 ROM0:0B20 18 E7            jr   0B09
 ROM0:0B22 18 E7            jr   0B0B
 ROM0:0B24 00               nop  
 ROM0:0B25 FF               rst  38
 ROM0:0B26 00               nop  
 ROM0:0B27 FF               rst  38
 ROM0:0B28 00               nop  
 ROM0:0B29 FF               rst  38
 ROM0:0B2A 00               nop  
 ROM0:0B2B FF               rst  38
 ROM0:0B2C 00               nop  
 ROM0:0B2D FF               rst  38
 ROM0:0B2E 00               nop  
 ROM0:0B2F FF               rst  38
 ROM0:0B30 03               inc  bc
 ROM0:0B31 FC               -    
 ROM0:0B32 03               inc  bc
 ROM0:0B33 FC               -    
 ROM0:0B34 03               inc  bc
 ROM0:0B35 FC               -    
 ROM0:0B36 33               inc  sp
 ROM0:0B37 FC               -    
 ROM0:0B38 4B               ld   c,e
 ROM0:0B39 FC               -    
 ROM0:0B3A 7B               ld   a,e
 ROM0:0B3B FC               -    
 ROM0:0B3C 4B               ld   c,e
 ROM0:0B3D FC               -    
 ROM0:0B3E 7B               ld   a,e
 ROM0:0B3F FC               -    
 ROM0:0B40 F0 00            ld   a,(ff00+00)
 ROM0:0B42 F0 00            ld   a,(ff00+00)
 ROM0:0B44 F0 00            ld   a,(ff00+00)
 ROM0:0B46 30 C0            jr   nc,0B08
 ROM0:0B48 30 C0            jr   nc,0B0A
 ROM0:0B4A F0 00            ld   a,(ff00+00)
 ROM0:0B4C 30 C0            jr   nc,0B0E
 ROM0:0B4E 30 C0            jr   nc,0B10
 ROM0:0B50 1C               inc  e
 ROM0:0B51 03               inc  bc
 ROM0:0B52 1C               inc  e
 ROM0:0B53 03               inc  bc
 ROM0:0B54 1C               inc  e
 ROM0:0B55 03               inc  bc
 ROM0:0B56 1C               inc  e
 ROM0:0B57 03               inc  bc
 ROM0:0B58 1C               inc  e
 ROM0:0B59 03               inc  bc
 ROM0:0B5A 1C               inc  e
 ROM0:0B5B 03               inc  bc
 ROM0:0B5C 1C               inc  e
 ROM0:0B5D 03               inc  bc
 ROM0:0B5E 1C               inc  e
 ROM0:0B5F 03               inc  bc
 ROM0:0B60 00               nop  
 ROM0:0B61 FF               rst  38
 ROM0:0B62 0C               inc  c
 ROM0:0B63 FF               rst  38
 ROM0:0B64 2C               inc  l
 ROM0:0B65 F7               rst  30
 ROM0:0B66 2C               inc  l
 ROM0:0B67 F7               rst  30
 ROM0:0B68 0C               inc  c
 ROM0:0B69 F7               rst  30
 ROM0:0B6A 2C               inc  l
 ROM0:0B6B FF               rst  38
 ROM0:0B6C 00               nop  
 ROM0:0B6D FF               rst  38
 ROM0:0B6E 00               nop  
 ROM0:0B6F FF               rst  38
 ROM0:0B70 00               nop  
 ROM0:0B71 FF               rst  38
 ROM0:0B72 00               nop  
 ROM0:0B73 FF               rst  38
 ROM0:0B74 00               nop  
 ROM0:0B75 FF               rst  38
 ROM0:0B76 00               nop  
 ROM0:0B77 FF               rst  38
 ROM0:0B78 3C               inc  a
 ROM0:0B79 E7               rst  20
 ROM0:0B7A 3C               inc  a
 ROM0:0B7B C3 3C C3         jp   C33C
 ROM0:0B7E 3C               inc  a
 ROM0:0B7F E7               rst  20
 ROM0:0B80 6B               ld   l,e
 ROM0:0B81 FC               -    
 ROM0:0B82 5B               ld   e,e
 ROM0:0B83 FC               -    
 ROM0:0B84 6B               ld   l,e
 ROM0:0B85 FC               -    
 ROM0:0B86 4B               ld   c,e
 ROM0:0B87 FC               -    
 ROM0:0B88 33               inc  sp
 ROM0:0B89 FC               -    
 ROM0:0B8A 03               inc  bc
 ROM0:0B8B FC               -    
 ROM0:0B8C 03               inc  bc
 ROM0:0B8D FC               -    
 ROM0:0B8E 03               inc  bc
 ROM0:0B8F FC               -    
 ROM0:0B90 14               inc  d
 ROM0:0B91 EB               -    
 ROM0:0B92 0A               ld   a,(bc)
 ROM0:0B93 F5               push af
 ROM0:0B94 14               inc  d
 ROM0:0B95 EB               -    
 ROM0:0B96 0F               rrca 
 ROM0:0B97 F5               push af
 ROM0:0B98 9F               sbc  a
 ROM0:0B99 6B               ld   l,e
 ROM0:0B9A BF               cp   a
 ROM0:0B9B 75               ld   (hl),l
 ROM0:0B9C FF               rst  38
 ROM0:0B9D 7F               ld   a,a
 ROM0:0B9E FF               rst  38
 ROM0:0B9F 3F               ccf  
 ROM0:0BA0 00               nop  
 ROM0:0BA1 FF               rst  38
 ROM0:0BA2 00               nop  
 ROM0:0BA3 FF               rst  38
 ROM0:0BA4 0F               rrca 
 ROM0:0BA5 F9               ld   sp,hl
 ROM0:0BA6 FF               rst  38
 ROM0:0BA7 F0 FF            ld   a,(ff00+FF)
 ROM0:0BA9 F0 FF            ld   a,(ff00+FF)
 ROM0:0BAB F9               ld   sp,hl
 ROM0:0BAC FF               rst  38
 ROM0:0BAD FF               rst  38
 ROM0:0BAE FF               rst  38
 ROM0:0BAF FF               rst  38
 ROM0:0BB0 03               inc  bc
 ROM0:0BB1 FC               -    
 ROM0:0BB2 03               inc  bc
 ROM0:0BB3 FC               -    
 ROM0:0BB4 01 FE FF         ld   bc,FFFE
 ROM0:0BB7 FE FF            cp   a,FF
 ROM0:0BB9 FE FF            cp   a,FF
 ROM0:0BBB FF               rst  38
 ROM0:0BBC FF               rst  38
 ROM0:0BBD FF               rst  38
 ROM0:0BBE FF               rst  38
 ROM0:0BBF FF               rst  38
 ROM0:0BC0 00               nop  
 ROM0:0BC1 00               nop  
 ROM0:0BC2 FF               rst  38
 ROM0:0BC3 00               nop  
 ROM0:0BC4 FF               rst  38
 ROM0:0BC5 00               nop  
 ROM0:0BC6 FF               rst  38
 ROM0:0BC7 00               nop  
 ROM0:0BC8 FF               rst  38
 ROM0:0BC9 00               nop  
 ROM0:0BCA FF               rst  38
 ROM0:0BCB 00               nop  
 ROM0:0BCC FF               rst  38
 ROM0:0BCD FF               rst  38
 ROM0:0BCE FF               rst  38
 ROM0:0BCF FF               rst  38
 ROM0:0BD0 F0 00            ld   a,(ff00+00)
 ROM0:0BD2 F0 C0            ld   a,(ff00+C0)
 ROM0:0BD4 F0 C0            ld   a,(ff00+C0)
 ROM0:0BD6 F0 00            ld   a,(ff00+00)
 ROM0:0BD8 F0 C0            ld   a,(ff00+C0)
 ROM0:0BDA F0 C0            ld   a,(ff00+C0)
 ROM0:0BDC F0 00            ld   a,(ff00+00)
 ROM0:0BDE F0 00            ld   a,(ff00+00)
 ROM0:0BE0 1E 03            ld   e,03
 ROM0:0BE2 1F               rra  
 ROM0:0BE3 03               inc  bc
 ROM0:0BE4 1E 03            ld   e,03
 ROM0:0BE6 1C               inc  e
 ROM0:0BE7 03               inc  bc
 ROM0:0BE8 1C               inc  e
 ROM0:0BE9 03               inc  bc
 ROM0:0BEA 1C               inc  e
 ROM0:0BEB 03               inc  bc
 ROM0:0BEC 1C               inc  e
 ROM0:0BED 03               inc  bc
 ROM0:0BEE 1C               inc  e
 ROM0:0BEF 03               inc  bc
 ROM0:0BF0 FF               rst  38
 ROM0:0BF1 7F               ld   a,a
 ROM0:0BF2 84               add  h
 ROM0:0BF3 10 7F            <corrupted stop>
 ROM0:0BF5 03               inc  bc
 ROM0:0BF6 FF               rst  38
 ROM0:0BF7 4B               ld   c,e
 ROM0:0BF8 FF               rst  38
 ROM0:0BF9 7F               ld   a,a
 ROM0:0BFA 84               add  h
 ROM0:0BFB 10 7F            <corrupted stop>
 ROM0:0BFD 03               inc  bc
 ROM0:0BFE 16 02            ld   d,02
 ROM0:0C00 FF               rst  38
 ROM0:0C01 7F               ld   a,a
 ROM0:0C02 84               add  h
 ROM0:0C03 10 1F            <corrupted stop>
 ROM0:0C05 00               nop  
 ROM0:0C06 9F               sbc  a
 ROM0:0C07 31 FF 7F         ld   sp,7FFF
 ROM0:0C0A 84               add  h
 ROM0:0C0B 10 5F            <corrupted stop>
 ROM0:0C0D 08 11 00         ld   (0011),sp
 ROM0:0C10 FF               rst  38
 ROM0:0C11 7F               ld   a,a
 ROM0:0C12 84               add  h
 ROM0:0C13 10 08            <corrupted stop>
 ROM0:0C15 21 00 03         ld   hl,0300
 ROM0:0C18 00               nop  
 ROM0:0C19 00               nop  
 ROM0:0C1A 00               nop  
 ROM0:0C1B 00               nop  
 ROM0:0C1C 00               nop  
 ROM0:0C1D 00               nop  
 ROM0:0C1E 00               nop  
 ROM0:0C1F 00               nop  
 ROM0:0C20 00               nop  
 ROM0:0C21 00               nop  
 ROM0:0C22 00               nop  
 ROM0:0C23 00               nop  
 ROM0:0C24 00               nop  
 ROM0:0C25 00               nop  
 ROM0:0C26 00               nop  
 ROM0:0C27 00               nop  
 ROM0:0C28 00               nop  
 ROM0:0C29 00               nop  
 ROM0:0C2A 00               nop  
 ROM0:0C2B 00               nop  
 ROM0:0C2C 00               nop  
 ROM0:0C2D 00               nop  
 ROM0:0C2E 00               nop  
 ROM0:0C2F 00               nop 

 ROM0:0C30 CD 43 38         call 3843
 ROM0:0C33 CD 15 38         call 3815
 ROM0:0C36 EF 18 F2 55                          
 ROM0:0C3A EF 18 D7 53                          // Blanks $C615 and $C618
 ROM0:0C3E AF               xor  a
 ROM0:0C3F EA 1A C6         ld   (C61A),a       // Set to 0
 ROM0:0C42 21 00 00         ld   hl,0000
 ROM0:0C45 EF 18 D4 56                          // Inserts text of online communication status "Preparing" at 1,1
 ROM0:0C49 21 00 00         ld   hl,0000
 ROM0:0C4C EF 18 78 57                          // Inserts text of online communication button check message for Preparation at 14,1
 ROM0:0C50 CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 ROM0:0C53 CD D2 04         call 04D2           // Next frame (loop begins here)
 ROM0:0C56 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROM0:0C59 CD AC 05         call 05AC           // Establishes current direct and newly pressed controls, also sets up Soft Reset method
 ROM0:0C5C CD EB 05         call 05EB           // Establishes considered active controls
 ROM0:0C5F 3E 00            ld   a,00
 ROM0:0C61 EF 15 91 67                          // Updates menu shifting diagonally down-right BG graphics (A is modification of where menu BG graphics had been stored)
 ROM0:0C65 CD 73 0C         call 0C73
 ROM0:0C68 30 E9            jr   nc,0C53
 ROM0:0C6A F5               push af
 ROM0:0C6B EF 18 44 54                          // IR Port Data Read disabled, LED Off, Receiving IR Signal; ($C901) = -1
 ROM0:0C6F F1               pop  af
 ROM0:0C70 A7               and  a
 ROM0:0C71 C9               ret  
 ROM0:0C72 E9               jp   hl
 ROM0:0C73 3E 04            ld   a,04
 ROM0:0C75 E0 82            ld   (ff00+82),a
 ROM0:0C77 E0 70            ld   (ff00+70),a
 ROM0:0C79 FA 1A C6         ld   a,(C61A)
 ROM0:0C7C 87               add  a
 ROM0:0C7D 5F               ld   e,a
 ROM0:0C7E 16 00            ld   d,00
 ROM0:0C80 21 9E 0C         ld   hl,0C9E
 ROM0:0C83 19               add  hl,de
 ROM0:0C84 2A               ldi  a,(hl)
 ROM0:0C85 66               ld   h,(hl)
 ROM0:0C86 6F               ld   l,a
 ROM0:0C87 CD 72 0C         call 0C72           // Basically CALL HL
 ROM0:0C8A FA 1A C6         ld   a,(C61A)
 ROM0:0C8D FE 13            cp   a,13
 ROM0:0C8F 28 06            jr   z,0C97
 ROM0:0C91 FE 14            cp   a,14
 ROM0:0C93 28 06            jr   z,0C9B
 ROM0:0C95 AF               xor  a
 ROM0:0C96 C9               ret  
 ROM0:0C97 3E 01            ld   a,01
 ROM0:0C99 37               scf  
 ROM0:0C9A C9               ret  
 ROM0:0C9B AF               xor  a
 ROM0:0C9C 37               scf  
 ROM0:0C9D C9               ret  

 ROM0:0C9E B0 0C               inc  c
 ROM0:0CA0 30 0D            jr   nc,0CAF
 ROM0:0CA2 63 0D               dec  c
 ROM0:0CA4 EC 0D               dec  c
 ROM0:0CA6 0B 0E
 ROM0:0CA8 2A 0E
 ROM0:0CAA E5 0C               inc  c
 ROM0:0CAC 4D 0D               dec  c
 ROM0:0CAE CC 0D

 ROM0:0CB0 EF 18 DF 53                          
 ROM0:0CB4 EA 1B C6         ld   (C61B),a
 ROM0:0CB7 30 03            jr   nc,0CBC
 ROM0:0CB9 C3 11 0E         jp   0E11
 ROM0:0CBC FA 1B C6         ld   a,(C61B)
 ROM0:0CBF B7               or   a
 ROM0:0CC0 28 2C            jr   z,0CEE
 ROM0:0CC2 3E 06            ld   a,06
 ROM0:0CC4 EA 1A C6         ld   (C61A),a       // Set to 6
 ROM0:0CC7 21 01 00         ld   hl,0001
 ROM0:0CCA EF 18 D4 56                          // Inserts text of online communication status "Waiting" at 1,1
 ROM0:0CCE 21 01 00         ld   hl,0001
 ROM0:0CD1 EF 18 78 57                          // Inserts text of online communication button check message for Wait at 14,1
 ROM0:0CD5 C5               push bc
 ROM0:0CD6 3E 01            ld   a,01
 ROM0:0CD8 CD 44 38         call 3844
 ROM0:0CDB 0E 1E            ld   c,1E
 ROM0:0CDD CD D2 04         call 04D2           // Next frame
 ROM0:0CE0 0D               dec  c
 ROM0:0CE1 20 FA            jr   nz,0CDD        // 30 frame wait
 ROM0:0CE3 C1               pop  bc
 ROM0:0CE4 C9               ret  
 ROM0:0CE5 EF 18 09 54                          
 ROM0:0CE9 30 03            jr   nc,0CEE
 ROM0:0CEB C3 11 0E         jp   0E11
 ROM0:0CEE F0 83            ld   a,(ff00+83)
 ROM0:0CF0 F5               push af
 ROM0:0CF1 3E 00            ld   a,00
 ROM0:0CF3 E0 83            ld   (ff00+83),a
 ROM0:0CF5 E0 4F            ld   (ff00+4F),a
 ROM0:0CF7 AF               xor  a
 ROM0:0CF8 01 01 01         ld   bc,0101
 ROM0:0CFB 11 03 11         ld   de,1103
 ROM0:0CFE EF 15 D3 6A                          // Sets VRA0 map tiles in rectangle 1,1 to 17,3, to 0
 ROM0:0D02 F1               pop  af
 ROM0:0D03 E0 83            ld   (ff00+83),a
 ROM0:0D05 E0 4F            ld   (ff00+4F),a
 ROM0:0D07 3E 01            ld   a,01
 ROM0:0D09 EA 1A C6         ld   (C61A),a       // Set to 1
 ROM0:0D0C 21 02 00         ld   hl,0002
 ROM0:0D0F EF 18 D4 56                          // Inserts text of online communication status "Ready" at 1,1
 ROM0:0D13 21 01 00         ld   hl,0001
 ROM0:0D16 EF 18 78 57                          // Inserts text of online communication button check message for Wait at 14,1
 ROM0:0D1A C5               push bc
 ROM0:0D1B 3E 02            ld   a,02
 ROM0:0D1D CD 44 38         call 3844
 ROM0:0D20 0E 3C            ld   c,3C
 ROM0:0D22 CD D2 04         call 04D2           // Next frame
 ROM0:0D25 0D               dec  c
 ROM0:0D26 20 FA            jr   nz,0D22
 ROM0:0D28 C1               pop  bc
 ROM0:0D29 3E 02            ld   a,02
 ROM0:0D2B EF 18 90 58                          
 ROM0:0D2F C9               ret  
 ROM0:0D30 EF 18 69 54                          
 ROM0:0D34 DA F2 0D         jp   c,0DF2
 ROM0:0D37 FA 1C C6         ld   a,(C61C)
 ROM0:0D3A EF 18 EE 54                          
 ROM0:0D3E DA F2 0D         jp   c,0DF2
 ROM0:0D41 B7               or   a
 ROM0:0D42 28 03            jr   z,0D47
 ROM0:0D44 C3 F2 0D         jp   0DF2
 ROM0:0D47 3E 07            ld   a,07
 ROM0:0D49 EA 1A C6         ld   (C61A),a       // Set to 7
 ROM0:0D4C C9               ret  
 ROM0:0D4D FA 1D C6         ld   a,(C61D)
 ROM0:0D50 EF 18 EE 54                          
 ROM0:0D54 DA D3 0D         jp   c,0DD3
 ROM0:0D57 B7               or   a
 ROM0:0D58 20 03            jr   nz,0D5D
 ROM0:0D5A C3 85 0D         jp   0D85
 ROM0:0D5D 3E 02            ld   a,02
 ROM0:0D5F EA 1A C6         ld   (C61A),a       // Set to 2
 ROM0:0D62 C9               ret  
 ROM0:0D63 CD 3A 0E         call 0E3A
 ROM0:0D66 DA D3 0D         jp   c,0DD3
 ROM0:0D69 3E 14            ld   a,14
 ROM0:0D6B EF 18 90 58                          
 ROM0:0D6F EF 18 48 54                          
 ROM0:0D73 C5               push bc
 ROM0:0D74 3E 0D            ld   a,0D
 ROM0:0D76 CD 44 38         call 3844
 ROM0:0D79 0E 1E            ld   c,1E
 ROM0:0D7B CD D2 04         call 04D2           // Next frame
 ROM0:0D7E 0D               dec  c
 ROM0:0D7F 20 FA            jr   nz,0D7B
 ROM0:0D81 C1               pop  bc
 ROM0:0D82 C3 34 0E         jp   0E34
 ROM0:0D85 3E 08            ld   a,08
 ROM0:0D87 EA 1A C6         ld   (C61A),a       // Set to 8
 ROM0:0D8A FA 1C C6         ld   a,(C61C)
 ROM0:0D8D FE 02            cp   a,02
 ROM0:0D8F 28 05            jr   z,0D96
 ROM0:0D91 21 03 00         ld   hl,0003
 ROM0:0D94 18 0F            jr   0DA5
 ROM0:0D96 FA 1D C6         ld   a,(C61D)
 ROM0:0D99 FE 00            cp   a,00
 ROM0:0D9B 20 05            jr   nz,0DA2
 ROM0:0D9D 21 B8 0D         ld   hl,0DB8
 ROM0:0DA0 18 03            jr   0DA5
 ROM0:0DA2 21 C2 0D         ld   hl,0DC2
 ROM0:0DA5 06 18            ld   b,18
 ROM0:0DA7 EF 18 D4 56                          // Inserts text of online communication status at 1,1 (L is which message to use if H is 0; if H isn't 0, HL is coordinates of message in ROM Block B)
 ROM0:0DAB 21 02 00         ld   hl,0002
 ROM0:0DAE EF 18 78 57                          // Inserts text of online communication button check message for Recommence at 14,1
 ROM0:0DB2 3E 03            ld   a,03
 ROM0:0DB4 CD 44 38         call 3844
 ROM0:0DB7 C9               ret  

 ROM0:0DB8 61 91 89               adc  c
 ROM0:0DBB 9C               sbc  h
 ROM0:0DBC 63               ld   h,e
 ROM0:0DBD 6C               ld   l,h
 ROM0:0DBE 9B 6D               ld   l,l
 ROM0:0DC0 2E 00

 ROM0:0DC2 83 87 63               ld   h,e
 ROM0:0DC5 9C               sbc  h
 ROM0:0DC6 63               ld   h,e
 ROM0:0DC7 6C               ld   l,h
 ROM0:0DC8 9B 6D               ld   l,l
 ROM0:0DCA 2E 00

 ROM0:0DCC F0 91            ld   a,(ff00+91)
 ROM0:0DCE B7               or   a
 ROM0:0DCF C8               ret  z
 ROM0:0DD0 C3 30 0E         jp   0E30
 ROM0:0DD3 3E 03            ld   a,03
 ROM0:0DD5 EA 1A C6         ld   (C61A),a       // Set to 3
 ROM0:0DD8 21 04 00         ld   hl,0004
 ROM0:0DDB EF 18 D4 56                          // Inserts text of online communication status "Signal Error" at 1,1
 ROM0:0DDF 21 02 00         ld   hl,0002
 ROM0:0DE2 EF 18 78 57                          // Inserts text of online communication button check message for Recommence at 14,1
 ROM0:0DE6 3E 03            ld   a,03
 ROM0:0DE8 CD 44 38         call 3844
 ROM0:0DEB C9               ret  
 ROM0:0DEC F0 91            ld   a,(ff00+91)
 ROM0:0DEE B7               or   a
 ROM0:0DEF 20 3F            jr   nz,0E30
 ROM0:0DF1 C9               ret  
 ROM0:0DF2 3E 04            ld   a,04
 ROM0:0DF4 EA 1A C6         ld   (C61A),a       // Set to 4
 ROM0:0DF7 21 03 00         ld   hl,0003
 ROM0:0DFA EF 18 D4 56                          // Inserts text of online communication status "Can't Connect" at 1,1
 ROM0:0DFE 21 02 00         ld   hl,0002
 ROM0:0E01 EF 18 78 57                          // Inserts text of online communication button check message for Recommence at 14,1
 ROM0:0E05 3E 03            ld   a,03
 ROM0:0E07 CD 44 38         call 3844
 ROM0:0E0A C9               ret  
 ROM0:0E0B F0 91            ld   a,(ff00+91)
 ROM0:0E0D B7               or   a
 ROM0:0E0E 20 20            jr   nz,0E30
 ROM0:0E10 C9               ret  
 ROM0:0E11 3E 05            ld   a,05
 ROM0:0E13 EA 1A C6         ld   (C61A),a       // Set to 5
 ROM0:0E16 21 03 00         ld   hl,0003
 ROM0:0E19 EF 18 D4 56                          // Inserts text of online communication status "Can't Connect" at 1,1
 ROM0:0E1D 21 02 00         ld   hl,0002
 ROM0:0E20 EF 18 78 57                          // Inserts text of online communication button check message for Recommence at 14,1
 ROM0:0E24 3E 03            ld   a,03
 ROM0:0E26 CD 44 38         call 3844
 ROM0:0E29 C9               ret  
 ROM0:0E2A F0 91            ld   a,(ff00+91)
 ROM0:0E2C B7               or   a
 ROM0:0E2D 20 01            jr   nz,0E30
 ROM0:0E2F C9               ret  
 ROM0:0E30 3E 14            ld   a,14
 ROM0:0E32 18 02            jr   0E36
 ROM0:0E34 3E 13            ld   a,13
 ROM0:0E36 EA 1A C6         ld   (C61A),a       // Set to either 19 or 20
 ROM0:0E39 C9               ret  
 ROM0:0E3A FA 1E C6         ld   a,(C61E)
 ROM0:0E3D 6F               ld   l,a
 ROM0:0E3E 5F               ld   e,a
 ROM0:0E3F FA 1F C6         ld   a,(C61F)
 ROM0:0E42 67               ld   h,a
 ROM0:0E43 57               ld   d,a
 ROM0:0E44 FA 20 C6         ld   a,(C620)
 ROM0:0E47 B7               or   a
 ROM0:0E48 28 1D            jr   z,0E67
 ROM0:0E4A 4F               ld   c,a
 ROM0:0E4B FA 22 C6         ld   a,(C622)
 ROM0:0E4E 47               ld   b,a
 ROM0:0E4F CD 9B 0E         call 0E9B
 ROM0:0E52 38 46            jr   c,0E9A
 ROM0:0E54 3E 04            ld   a,04
 ROM0:0E56 EF 18 90 58                          
 ROM0:0E5A FA 20 C6         ld   a,(C620)
 ROM0:0E5D 85               add  l
 ROM0:0E5E 6F               ld   l,a
 ROM0:0E5F 7C               ld   a,h
 ROM0:0E60 CE 00            adc  a,00
 ROM0:0E62 67               ld   h,a
 ROM0:0E63 7C               ld   a,h
 ROM0:0E64 57               ld   d,a
 ROM0:0E65 7D               ld   a,l
 ROM0:0E66 5F               ld   e,a
 ROM0:0E67 3E 04            ld   a,04
 ROM0:0E69 EA 20 C6         ld   (C620),a
 ROM0:0E6C FA 21 C6         ld   a,(C621)
 ROM0:0E6F B7               or   a
 ROM0:0E70 28 27            jr   z,0E99
 ROM0:0E72 0E 00            ld   c,00
 ROM0:0E74 FA 22 C6         ld   a,(C622)
 ROM0:0E77 47               ld   b,a
 ROM0:0E78 CD 9B 0E         call 0E9B
 ROM0:0E7B 38 1D            jr   c,0E9A
 ROM0:0E7D 24               inc  h
 ROM0:0E7E 14               inc  d
 ROM0:0E7F FA 21 C6         ld   a,(C621)
 ROM0:0E82 3D               dec  a
 ROM0:0E83 EA 21 C6         ld   (C621),a
 ROM0:0E86 FA 20 C6         ld   a,(C620)
 ROM0:0E89 3C               inc  a
 ROM0:0E8A EA 20 C6         ld   (C620),a
 ROM0:0E8D FE 14            cp   a,14
 ROM0:0E8F 38 02            jr   c,0E93
 ROM0:0E91 3E 14            ld   a,14
 ROM0:0E93 EF 18 90 58                          
 ROM0:0E97 18 D3            jr   0E6C
 ROM0:0E99 AF               xor  a
 ROM0:0E9A C9               ret  
 ROM0:0E9B E5               push hl
 ROM0:0E9C D5               push de
 ROM0:0E9D FA 1D C6         ld   a,(C61D)
 ROM0:0EA0 FE 00            cp   a,00
 ROM0:0EA2 28 06            jr   z,0EAA
 ROM0:0EA4 EF 18 8A 55                          
 ROM0:0EA8 18 04            jr   0EAE
 ROM0:0EAA EF 18 46 55                          
 ROM0:0EAE D1               pop  de
 ROM0:0EAF E1               pop  hl
 ROM0:0EB0 C9               ret  
 ROM0:0EB1 3E 00            ld   a,00
 ROM0:0EB3 E0 83            ld   (ff00+83),a
 ROM0:0EB5 E0 4F            ld   (ff00+4F),a
 ROM0:0EB7 F0 80            ld   a,(ff00+80)
 ROM0:0EB9 F5               push af
 ROM0:0EBA 3E 01            ld   a,01
 ROM0:0EBC E0 80            ld   (ff00+80),a
 ROM0:0EBE EA 00 20         ld   (2000),a
 ROM0:0EC1 11 80 51         ld   de,5180
 ROM0:0EC4 21 10 90         ld   hl,9010
 ROM0:0EC7 01 30 00         ld   bc,0030
 ROM0:0ECA CD 50 3B         call 3B50           // VRA0($9010~$903F) = $1:($5180~$51AF) (border graphics)
 ROM0:0ECD F1               pop  af
 ROM0:0ECE E0 80            ld   (ff00+80),a
 ROM0:0ED0 EA 00 20         ld   (2000),a
 ROM0:0ED3 C9               ret  
 ROM0:0ED4 79               ld   a,c
 ROM0:0ED5 07               rlca 
 ROM0:0ED6 CB 37            swap a
 ROM0:0ED8 6F               ld   l,a
 ROM0:0ED9 E6 0F            and  a,0F
 ROM0:0EDB C6 98            add  a,98
 ROM0:0EDD 67               ld   h,a
 ROM0:0EDE 3E F0            ld   a,F0
 ROM0:0EE0 A5               and  l
 ROM0:0EE1 80               add  b
 ROM0:0EE2 6F               ld   l,a
 ROM0:0EE3 C9               ret                 // HL = $9800 + B + C * 32
 ROM0:0EE4 79               ld   a,c
 ROM0:0EE5 C6 20            add  a,20
 ROM0:0EE7 4F               ld   c,a
 ROM0:0EE8 18 EA            jr   0ED4           // HL = $9800 + B + (C + 1) * 32
 ROM0:0EEA D5               push de
 ROM0:0EEB 7D               ld   a,l
 ROM0:0EEC E6 E0            and  a,E0
 ROM0:0EEE 57               ld   d,a
 ROM0:0EEF 7D               ld   a,l
 ROM0:0EF0 3C               inc  a
 ROM0:0EF1 E6 1F            and  a,1F
 ROM0:0EF3 B2               or   d
 ROM0:0EF4 6F               ld   l,a
 ROM0:0EF5 D1               pop  de
 ROM0:0EF6 C9               ret                 // L = (L/32)*32 + (L+1)%32
 ROM0:0EF7 D5               push de
 ROM0:0EF8 11 20 00         ld   de,0020
 ROM0:0EFB 19               add  hl,de
 ROM0:0EFC 7C               ld   a,h
 ROM0:0EFD E6 9B            and  a,9B
 ROM0:0EFF 67               ld   h,a
 ROM0:0F00 D1               pop  de
 ROM0:0F01 C9               ret                 // HL = AND (HL + $20),$9BFF
 ROM0:0F02 3E 00            ld   a,00
 ROM0:0F04 E0 83            ld   (ff00+83),a
 ROM0:0F06 E0 4F            ld   (ff00+4F),a
 ROM0:0F08 CD 11 0F         call 0F11           // Empties VRA0($9800) to ($9BFF)
 ROM0:0F0B 3E 01            ld   a,01
 ROM0:0F0D E0 83            ld   (ff00+83),a
 ROM0:0F0F E0 4F            ld   (ff00+4F),a
 ROM0:0F11 21 00 98         ld   hl,9800
 ROM0:0F14 01 00 04         ld   bc,0400
 ROM0:0F17 AF               xor  a
 ROM0:0F18 CD 79 3B         call 3B79           // Empties ($9800) to ($9BFF)
 ROM0:0F1B C9               ret                 // Empties ($9800) to ($9BFF) in both VRAM banks
 ROM0:0F1C F5               push af
 ROM0:0F1D FA 0F C0         ld   a,(C00F)
 ROM0:0F20 CB 7F            bit  7,a
 ROM0:0F22 20 03            jr   nz,0F27
 ROM0:0F24 F1               pop  af
 ROM0:0F25 22               ldi  (hl),a
 ROM0:0F26 C9               ret                 // (HL) = A, increment HL
 ROM0:0F27 F1               pop  af
 ROM0:0F28 CD 2D 0F         call 0F2D           // (HL) = A with cooldown based on bit 1,($FF41)
 ROM0:0F2B 23               inc  hl
 ROM0:0F2C C9               ret  
 ROM0:0F2D D5               push de
 ROM0:0F2E 5F               ld   e,a
 ROM0:0F2F FB               ei   
 ROM0:0F30 F3               di   
 ROM0:0F31 F0 41            ld   a,(ff00+41)
 ROM0:0F33 E6 02            and  a,02
 ROM0:0F35 20 F8            jr   nz,0F2F
 ROM0:0F37 73               ld   (hl),e
 ROM0:0F38 F0 41            ld   a,(ff00+41)
 ROM0:0F3A E6 02            and  a,02
 ROM0:0F3C 20 F1            jr   nz,0F2F
 ROM0:0F3E FB               ei   
 ROM0:0F3F D1               pop  de
 ROM0:0F40 C9               ret                 // (HL) = A with cooldown based on bit 1,($FF41)
 ROM0:0F41 FA 0F C0         ld   a,(C00F)
 ROM0:0F44 CB 7F            bit  7,a
 ROM0:0F46 20 02            jr   nz,0F4A
 ROM0:0F48 2A               ldi  a,(hl)
 ROM0:0F49 C9               ret  
 ROM0:0F4A CD 4F 0F         call 0F4F           // A = (HL) with cooldown based on bit 1,($FF41)
 ROM0:0F4D 23               inc  hl
 ROM0:0F4E C9               ret  
 ROM0:0F4F D5               push de
 ROM0:0F50 FB               ei   
 ROM0:0F51 F3               di   
 ROM0:0F52 F0 41            ld   a,(ff00+41)
 ROM0:0F54 E6 02            and  a,02
 ROM0:0F56 20 F8            jr   nz,0F50
 ROM0:0F58 5E               ld   e,(hl)
 ROM0:0F59 F0 41            ld   a,(ff00+41)
 ROM0:0F5B E6 02            and  a,02
 ROM0:0F5D 20 F1            jr   nz,0F50
 ROM0:0F5F FB               ei   
 ROM0:0F60 7B               ld   a,e
 ROM0:0F61 D1               pop  de
 ROM0:0F62 C9               ret                 // A = (HL) with cooldown based on bit 1,($FF41)
 ROM0:0F63 1A               ld   a,(de)         // Loop begins here
 ROM0:0F64 13               inc  de
 ROM0:0F65 A7               and  a
 ROM0:0F66 28 11            jr   z,0F79
 ROM0:0F68 CD 2D 0F         call 0F2D           // (HL) = (DE) with cooldown based on bit 1,($FF41)
 ROM0:0F6B D5               push de
 ROM0:0F6C 7D               ld   a,l
 ROM0:0F6D E6 E0            and  a,E0
 ROM0:0F6F 57               ld   d,a
 ROM0:0F70 7D               ld   a,l
 ROM0:0F71 3C               inc  a
 ROM0:0F72 E6 1F            and  a,1F
 ROM0:0F74 B2               or   d
 ROM0:0F75 6F               ld   l,a
 ROM0:0F76 D1               pop  de
 ROM0:0F77 18 EA            jr   0F63
 ROM0:0F79 C9               ret                 // (HL) holds text starting at (DE)
 ROM0:0F7A F5               push af             // Serial Interrupt starts here
 ROM0:0F7B F0 82            ld   a,(ff00+82)
 ROM0:0F7D F5               push af
 ROM0:0F7E 3E 07            ld   a,07
 ROM0:0F80 E0 82            ld   (ff00+82),a
 ROM0:0F82 E0 70            ld   (ff00+70),a
 ROM0:0F84 F0 80            ld   a,(ff00+80)
 ROM0:0F86 F5               push af
 ROM0:0F87 3E 30            ld   a,30
 ROM0:0F89 E0 80            ld   (ff00+80),a
 ROM0:0F8B EA 00 20         ld   (2000),a
 ROM0:0F8E CD 04 3E         call 3E04
 ROM0:0F91 F1               pop  af
 ROM0:0F92 E0 80            ld   (ff00+80),a
 ROM0:0F94 EA 00 20         ld   (2000),a
 ROM0:0F97 F1               pop  af
 ROM0:0F98 E0 82            ld   (ff00+82),a
 ROM0:0F9A E0 70            ld   (ff00+70),a
 ROM0:0F9C F1               pop  af
 ROM0:0F9D D9               reti 
 ROM0:0F9E F5               push af
 ROM0:0F9F F0 82            ld   a,(ff00+82)
 ROM0:0FA1 F5               push af
 ROM0:0FA2 3E 07            ld   a,07
 ROM0:0FA4 E0 82            ld   (ff00+82),a
 ROM0:0FA6 E0 70            ld   (ff00+70),a
 ROM0:0FA8 F0 80            ld   a,(ff00+80)
 ROM0:0FAA F5               push af
 ROM0:0FAB 3E 30            ld   a,30
 ROM0:0FAD E0 80            ld   (ff00+80),a
 ROM0:0FAF EA 00 20         ld   (2000),a
 ROM0:0FB2 CD 08 3E         call 3E08
 ROM0:0FB5 F1               pop  af
 ROM0:0FB6 E0 80            ld   (ff00+80),a
 ROM0:0FB8 EA 00 20         ld   (2000),a
 ROM0:0FBB F1               pop  af
 ROM0:0FBC E0 82            ld   (ff00+82),a
 ROM0:0FBE E0 70            ld   (ff00+70),a
 ROM0:0FC0 F1               pop  af
 ROM0:0FC1 D9               reti 
 ROM0:0FC2 EA C0 C8         ld   (C8C0),a
 ROM0:0FC5 F0 82            ld   a,(ff00+82)
 ROM0:0FC7 F5               push af
 ROM0:0FC8 3E 07            ld   a,07
 ROM0:0FCA E0 82            ld   (ff00+82),a
 ROM0:0FCC E0 70            ld   (ff00+70),a
 ROM0:0FCE F0 80            ld   a,(ff00+80)
 ROM0:0FD0 F5               push af
 ROM0:0FD1 3E 30            ld   a,30
 ROM0:0FD3 E0 80            ld   (ff00+80),a
 ROM0:0FD5 EA 00 20         ld   (2000),a
 ROM0:0FD8 FA C0 C8         ld   a,(C8C0)
 ROM0:0FDB E5               push hl
 ROM0:0FDC F5               push af
 ROM0:0FDD F5               push af
 ROM0:0FDE FA C1 C8         ld   a,(C8C1)
 ROM0:0FE1 E6 1F            and  a,1F
 ROM0:0FE3 21 C2 C8         ld   hl,C8C2
 ROM0:0FE6 85               add  l
 ROM0:0FE7 6F               ld   l,a
 ROM0:0FE8 3E 00            ld   a,00
 ROM0:0FEA 84               add  h
 ROM0:0FEB 67               ld   h,a
 ROM0:0FEC F1               pop  af
 ROM0:0FED 77               ld   (hl),a
 ROM0:0FEE FA C1 C8         ld   a,(C8C1)
 ROM0:0FF1 3C               inc  a
 ROM0:0FF2 E6 1F            and  a,1F
 ROM0:0FF4 EA C1 C8         ld   (C8C1),a
 ROM0:0FF7 AF               xor  a
 ROM0:0FF8 EA BB C8         ld   (C8BB),a
 ROM0:0FFB EA BC C8         ld   (C8BC),a
 ROM0:0FFE EA BD C8         ld   (C8BD),a
 ROM0:1001 21 0E 3E         ld   hl,3E0E
 ROM0:1004 2A               ldi  a,(hl)
 ROM0:1005 66               ld   h,(hl)
 ROM0:1006 6F               ld   l,a
 ROM0:1007 F1               pop  af
 ROM0:1008 85               add  l
 ROM0:1009 6F               ld   l,a
 ROM0:100A 3E 00            ld   a,00
 ROM0:100C 8C               adc  h
 ROM0:100D 67               ld   h,a
 ROM0:100E 7E               ld   a,(hl)
 ROM0:100F E1               pop  hl
 ROM0:1010 CD 00 3E         call 3E00
 ROM0:1013 EA C0 C8         ld   (C8C0),a
 ROM0:1016 F1               pop  af
 ROM0:1017 E0 80            ld   (ff00+80),a
 ROM0:1019 EA 00 20         ld   (2000),a
 ROM0:101C F1               pop  af
 ROM0:101D E0 82            ld   (ff00+82),a
 ROM0:101F E0 70            ld   (ff00+70),a
 ROM0:1021 FA C0 C8         ld   a,(C8C0)
 ROM0:1024 C9               ret  
 ROM0:1025 D5               push de
 ROM0:1026 E5               push hl
 ROM0:1027 F5               push af
 ROM0:1028 CD A2 10         call 10A2
 ROM0:102B F1               pop  af
 ROM0:102C 5F               ld   e,a
 ROM0:102D 7E               ld   a,(hl)
 ROM0:102E EA BF C8         ld   (C8BF),a
 ROM0:1031 57               ld   d,a
 ROM0:1032 CB 4A            bit  1,d
 ROM0:1034 20 26            jr   nz,105C
 ROM0:1036 CB 52            bit  2,d
 ROM0:1038 20 13            jr   nz,104D
 ROM0:103A CB 42            bit  0,d
 ROM0:103C 28 06            jr   z,1044
 ROM0:103E CB 43            bit  0,e
 ROM0:1040 20 06            jr   nz,1048
 ROM0:1042 18 E9            jr   102D
 ROM0:1044 AF               xor  a
 ROM0:1045 E1               pop  hl
 ROM0:1046 D1               pop  de
 ROM0:1047 C9               ret  
 ROM0:1048 AF               xor  a
 ROM0:1049 3E FF            ld   a,FF
 ROM0:104B 18 F8            jr   1045
 ROM0:104D AF               xor  a
 ROM0:104E EA BC C8         ld   (C8BC),a
 ROM0:1051 EA BD C8         ld   (C8BD),a
 ROM0:1054 3E FF            ld   a,FF
 ROM0:1056 EA BB C8         ld   (C8BB),a
 ROM0:1059 37               scf  
 ROM0:105A 18 E9            jr   1045
 ROM0:105C 3E 17            ld   a,17
 ROM0:105E CD C2 0F         call 0FC2
 ROM0:1061 EA BB C8         ld   (C8BB),a
 ROM0:1064 7D               ld   a,l
 ROM0:1065 EA BC C8         ld   (C8BC),a
 ROM0:1068 7C               ld   a,h
 ROM0:1069 EA BD C8         ld   (C8BD),a
 ROM0:106C FA BB C8         ld   a,(C8BB)
 ROM0:106F FE 32            cp   a,32
 ROM0:1071 20 13            jr   nz,1086
 ROM0:1073 7C               ld   a,h
 ROM0:1074 FE 03            cp   a,03
 ROM0:1076 20 0E            jr   nz,1086
 ROM0:1078 7D               ld   a,l
 ROM0:1079 3D               dec  a
 ROM0:107A FE 02            cp   a,02
 ROM0:107C 30 08            jr   nc,1086
 ROM0:107E 79               ld   a,c
 ROM0:107F EA E8 C8         ld   (C8E8),a
 ROM0:1082 78               ld   a,b
 ROM0:1083 EA E9 C8         ld   (C8E9),a
 ROM0:1086 FA BB C8         ld   a,(C8BB)
 ROM0:1089 37               scf  
 ROM0:108A 18 B9            jr   1045
 ROM0:108C E5               push hl
 ROM0:108D F0 82            ld   a,(ff00+82)
 ROM0:108F F5               push af
 ROM0:1090 3E 07            ld   a,07
 ROM0:1092 E0 82            ld   (ff00+82),a
 ROM0:1094 E0 70            ld   (ff00+70),a
 ROM0:1096 CD A2 10         call 10A2
 ROM0:1099 6E               ld   l,(hl)
 ROM0:109A F1               pop  af
 ROM0:109B E0 82            ld   (ff00+82),a
 ROM0:109D E0 70            ld   (ff00+70),a
 ROM0:109F 7D               ld   a,l
 ROM0:10A0 E1               pop  hl
 ROM0:10A1 C9               ret  
 ROM0:10A2 F0 80            ld   a,(ff00+80)
 ROM0:10A4 F5               push af
 ROM0:10A5 3E 30            ld   a,30
 ROM0:10A7 E0 80            ld   (ff00+80),a
 ROM0:10A9 EA 00 20         ld   (2000),a
 ROM0:10AC 21 0C 3E         ld   hl,3E0C
 ROM0:10AF 2A               ldi  a,(hl)
 ROM0:10B0 66               ld   h,(hl)
 ROM0:10B1 6F               ld   l,a
 ROM0:10B2 F1               pop  af
 ROM0:10B3 E0 80            ld   (ff00+80),a
 ROM0:10B5 EA 00 20         ld   (2000),a
 ROM0:10B8 C9               ret  
 ROM0:10B9 C3 B9 10         jp   10B9
 ROM0:10BC 68               ld   l,b
 ROM0:10BD 74               ld   (hl),h
 ROM0:10BE 74               ld   (hl),h
 ROM0:10BF 70               ld   (hl),b
 ROM0:10C0 3A               ldd  a,(hl)
 ROM0:10C1 2F               cpl  
 ROM0:10C2 2F               cpl  
 ROM0:10C3 67               ld   h,a
 ROM0:10C4 61               ld   h,c
 ROM0:10C5 6D               ld   l,l
 ROM0:10C6 65               ld   h,l
 ROM0:10C7 62               ld   h,d
 ROM0:10C8 6F               ld   l,a
 ROM0:10C9 79               ld   a,c
 ROM0:10CA 2E 64            ld   l,64
 ROM0:10CC 61               ld   h,c
 ROM0:10CD 74               ld   (hl),h
 ROM0:10CE 61               ld   h,c
 ROM0:10CF 63               ld   h,e
 ROM0:10D0 65               ld   h,l
 ROM0:10D1 6E               ld   l,(hl)
 ROM0:10D2 74               ld   (hl),h
 ROM0:10D3 65               ld   h,l
 ROM0:10D4 72               ld   (hl),d
 ROM0:10D5 2E 6E            ld   l,6E
 ROM0:10D7 65               ld   h,l
 ROM0:10D8 2E 6A            ld   l,6A
 ROM0:10DA 70               ld   (hl),b
 ROM0:10DB 2F               cpl  
 ROM0:10DC 63               ld   h,e
 ROM0:10DD 67               ld   h,a
 ROM0:10DE 62               ld   h,d
 ROM0:10DF 2F               cpl  
 ROM0:10E0 64               ld   h,h
 ROM0:10E1 6F               ld   l,a
 ROM0:10E2 77               ld   (hl),a
 ROM0:10E3 6E               ld   l,(hl)
 ROM0:10E4 6C               ld   l,h
 ROM0:10E5 6F               ld   l,a
 ROM0:10E6 61               ld   h,c
 ROM0:10E7 64               ld   h,h
 ROM0:10E8 00               nop  
 ROM0:10E9 3F               ccf  
 ROM0:10EA 6E               ld   l,(hl)
 ROM0:10EB 61               ld   h,c
 ROM0:10EC 6D               ld   l,l
 ROM0:10ED 65               ld   h,l
 ROM0:10EE 3D               dec  a
 ROM0:10EF 2F               cpl  
 ROM0:10F0 31 38 2F         ld   sp,2F38
 ROM0:10F3 43               ld   b,e
 ROM0:10F4 47               ld   b,a
 ROM0:10F5 42               ld   b,d
 ROM0:10F6 2D               dec  l
 ROM0:10F7 42               ld   b,d
 ROM0:10F8 57               ld   d,a
 ROM0:10F9 57               ld   d,a
 ROM0:10FA 4A               ld   c,d
 ROM0:10FB 2F               cpl  
 ROM0:10FC 00

 ROM0:10FD CD D4 58         call 58D4           // RO18: Disables Interrupt, makes sure that IR Port Data Read is enabled; if it needs to, ($C900) 10 byte holds 1, -1, 6/14, 8/20, 2/8, 4/13, 5/12, 110/220, 0, 0 (Normal Speed uses first value, Double Speed uses second)
 ROM0:1100 CD 4F 12         call 124F           // IR Port Data Read enabled, LED Off, Receiving IR Signal; ($C901) = -1, ($C900) = 1
 ROM0:1103 3E 46            ld   a,46           // Loop begins here
 ROM0:1105 EA F6 C8         ld   (C8F6),a
 ROM0:1108 3E 22            ld   a,22
 ROM0:110A EA F7 C8         ld   (C8F7),a       // 70,34
 ROM0:110D CD 9F 12         call 129F
 ROM0:1110 FA 00 C9         ld   a,(C900)
 ROM0:1113 EA F9 C8         ld   (C8F9),a
 ROM0:1116 FA 01 C9         ld   a,(C901)
 ROM0:1119 FE 8B            cp   a,8B
 ROM0:111B CA 2E 11         jp   z,112E
 ROM0:111E FE FF            cp   a,FF
 ROM0:1120 CA 03 12         jp   z,1203
 ROM0:1123 FA 00 C9         ld   a,(C900)       // Check for A Button press
 ROM0:1126 FE 02            cp   a,02
 ROM0:1128 CA 94 11         jp   z,1194
 ROM0:112B C3 03 11         jp   1103
 ROM0:112E FA 00 C9         ld   a,(C900)       // Check for A Button press
 ROM0:1131 FE 02            cp   a,02
 ROM0:1133 28 77            jr   z,11AC
 ROM0:1135 21 F6 C8         ld   hl,C8F6
 ROM0:1138 06 02            ld   b,02
 ROM0:113A CD 3B 14         call 143B
 ROM0:113D FA 01 C9         ld   a,(C901)
 ROM0:1140 FE 8B            cp   a,8B
 ROM0:1142 C2 03 11         jp   nz,1103
 ROM0:1145 CD 2A 15         call 152A
 ROM0:1148 FA 01 C9         ld   a,(C901)
 ROM0:114B FE 8B            cp   a,8B
 ROM0:114D C2 03 11         jp   nz,1103
 ROM0:1150 FA F6 C8         ld   a,(C8F6)
 ROM0:1153 47               ld   b,a
 ROM0:1154 FE 46            cp   a,46
 ROM0:1156 C2 03 12         jp   nz,1203
 ROM0:1159 FA F7 C8         ld   a,(C8F7)
 ROM0:115C FE 22            cp   a,22
 ROM0:115E C2 03 12         jp   nz,1203
 ROM0:1161 EA F6 C8         ld   (C8F6),a
 ROM0:1164 78               ld   a,b
 ROM0:1165 EA F7 C8         ld   (C8F7),a
 ROM0:1168 CD 4F 12         call 124F           // IR Port Data Read enabled, LED Off, Receiving IR Signal; ($C901) = -1, ($C900) = 1
 ROM0:116B CD 02 13         call 1302
 ROM0:116E FA 01 C9         ld   a,(C901)
 ROM0:1171 FE 8B            cp   a,8B
 ROM0:1173 C2 03 11         jp   nz,1103
 ROM0:1176 21 F6 C8         ld   hl,C8F6
 ROM0:1179 06 02            ld   b,02
 ROM0:117B CD 57 13         call 1357
 ROM0:117E FA 01 C9         ld   a,(C901)
 ROM0:1181 FE 8B            cp   a,8B
 ROM0:1183 C2 03 11         jp   nz,1103
 ROM0:1186 CD 25 15         call 1525
 ROM0:1189 FA 01 C9         ld   a,(C901)
 ROM0:118C FE 8B            cp   a,8B
 ROM0:118E C2 03 11         jp   nz,1103
 ROM0:1191 C3 FD 11         jp   11FD
 ROM0:1194 CD 4F 12         call 124F           // IR Port Data Read enabled, LED Off, Receiving IR Signal; ($C901) = -1, ($C900) = 1
 ROM0:1197 CD 35 15         call 1535           // Establishes current player controls for IR system
 ROM0:119A FA 09 C9         ld   a,(C909)
 ROM0:119D CB 47            bit  0,a            // A Button?
 ROM0:119F 18 62            jr   1203
 ROM0:11A1 CD 02 13         call 1302
 ROM0:11A4 FA 01 C9         ld   a,(C901)
 ROM0:11A7 FE 8B            cp   a,8B
 ROM0:11A9 C2 97 11         jp   nz,1197
 ROM0:11AC 21 F6 C8         ld   hl,C8F6
 ROM0:11AF 06 02            ld   b,02
 ROM0:11B1 CD 57 13         call 1357
 ROM0:11B4 FA 01 C9         ld   a,(C901)
 ROM0:11B7 FE 8B            cp   a,8B
 ROM0:11B9 C2 94 11         jp   nz,1194
 ROM0:11BC CD 25 15         call 1525
 ROM0:11BF FA 01 C9         ld   a,(C901)
 ROM0:11C2 FE 8B            cp   a,8B
 ROM0:11C4 C2 94 11         jp   nz,1194
 ROM0:11C7 CD 4F 12         call 124F           // IR Port Data Read enabled, LED Off, Receiving IR Signal; ($C901) = -1, ($C900) = 1
 ROM0:11CA CD C3 12         call 12C3
 ROM0:11CD FA 01 C9         ld   a,(C901)
 ROM0:11D0 FE 8B            cp   a,8B
 ROM0:11D2 C2 94 11         jp   nz,1194
 ROM0:11D5 21 F6 C8         ld   hl,C8F6
 ROM0:11D8 06 02            ld   b,02
 ROM0:11DA CD 3B 14         call 143B
 ROM0:11DD FA 01 C9         ld   a,(C901)
 ROM0:11E0 FE 8B            cp   a,8B
 ROM0:11E2 C2 94 11         jp   nz,1194
 ROM0:11E5 CD 2A 15         call 152A
 ROM0:11E8 FA 01 C9         ld   a,(C901)
 ROM0:11EB FE 8B            cp   a,8B
 ROM0:11ED 20 A5            jr   nz,1194
 ROM0:11EF FA F6 C8         ld   a,(C8F6)
 ROM0:11F2 FE 22            cp   a,22
 ROM0:11F4 20 0D            jr   nz,1203
 ROM0:11F6 FA F7 C8         ld   a,(C8F7)
 ROM0:11F9 FE 46            cp   a,46
 ROM0:11FB 20 06            jr   nz,1203
 ROM0:11FD AF               xor  a
 ROM0:11FE FA F9 C8         ld   a,(C8F9)       // 1 = A not pressed; 2 = A pressed
 ROM0:1201 18 01            jr   1204
 ROM0:1203 37               scf  
 ROM0:1204 F5               push af
 ROM0:1205 CD EB 58         call 58EB
 ROM0:1208 F1               pop  af
 ROM0:1209 C9               ret  
 ROM0:120A 18 F7            jr   1203
 ROM0:120C 18 F5            jr   1203
 ROM0:120E 18 F3            jr   1203
 ROM0:1210 18 F1            jr   1203
 ROM0:1212 18 EF            jr   1203
 ROM0:1214 AF               xor  a
 ROM0:1215 EA 08 C9         ld   (C908),a
 ROM0:1218 EA 09 C9         ld   (C909),a
 ROM0:121B 47               ld   b,a
 ROM0:121C 3C               inc  a
 ROM0:121D 20 FD            jr   nz,121C
 ROM0:121F 04               inc  b
 ROM0:1220 20 FA            jr   nz,121C        // Delay loop...
 ROM0:1222 21 02 C9         ld   hl,C902
 ROM0:1225 F0 4D            ld   a,(ff00+4D)
 ROM0:1227 CB 7F            bit  7,a            // At Double Speed?
 ROM0:1229 28 12            jr   z,123D
 ROM0:122B 36 0E            ld   (hl),0E
 ROM0:122D 23               inc  hl
 ROM0:122E 36 14            ld   (hl),14
 ROM0:1230 23               inc  hl
 ROM0:1231 36 08            ld   (hl),08
 ROM0:1233 23               inc  hl
 ROM0:1234 36 0D            ld   (hl),0D
 ROM0:1236 23               inc  hl
 ROM0:1237 36 0C            ld   (hl),0C
 ROM0:1239 23               inc  hl
 ROM0:123A 36 DC            ld   (hl),DC        // 14, 20, 8, 13, 12, 220
 ROM0:123C C9               ret  
 ROM0:123D 36 06            ld   (hl),06
 ROM0:123F 23               inc  hl
 ROM0:1240 36 08            ld   (hl),08
 ROM0:1242 23               inc  hl
 ROM0:1243 36 02            ld   (hl),02
 ROM0:1245 23               inc  hl
 ROM0:1246 36 04            ld   (hl),04
 ROM0:1248 23               inc  hl
 ROM0:1249 36 05            ld   (hl),05
 ROM0:124B 23               inc  hl
 ROM0:124C 36 6E            ld   (hl),6E        // 6, 8, 2, 4, 5, 110
 ROM0:124E C9               ret                 // ($C902) 8 byte holds: 6/14, 8/20, 2/8, 4/13, 5/12, 110/220, 0, 0 (Normal Speed uses first value, Double Speed uses second)
 ROM0:124F 3E C0            ld   a,C0
 ROM0:1251 CD 4F 13         call 134F           // ($FF56) = A, ($C901) = -1
 ROM0:1254 3E 01            ld   a,01
 ROM0:1256 EA 00 C9         ld   (C900),a       // Set to 1
 ROM0:1259 C9               ret                 // IR Port Data Read enabled, LED Off, Receiving IR Signal; ($C901) = -1, ($C900) = 1
 ROM0:125A AF               xor  a
 ROM0:125B CD 4F 13         call 134F           // ($FF56) = A, ($C901) = -1
 ROM0:125E C9               ret                 // IR Port Data Read disabled, LED Off, Receiving IR Signal; ($C901) = -1
 ROM0:125F 14               inc  d
 ROM0:1260 C8               ret  z
 ROM0:1261 F2               ld   a,(ff00+c)
 ROM0:1262 CB 4F            bit  1,a
 ROM0:1264 28 F9            jr   z,125F
 ROM0:1266 B7               or   a
 ROM0:1267 C9               ret                 // bit 1($FF00 + C) being off results in 256 - D cycles resulting in D = 0; otherwise, D += 1, OR ($FF00 + C),($FF00 + C)
 ROM0:1268 14               inc  d
 ROM0:1269 C8               ret  z
 ROM0:126A F2               ld   a,(ff00+c)
 ROM0:126B CB 4F            bit  1,a
 ROM0:126D 20 F9            jr   nz,1268
 ROM0:126F B7               or   a
 ROM0:1270 C9               ret                 // bit 1($FF00 + C) being on results in 256 - D cycles resulting in D = 0; otherwise, D += 1, OR ($FF00 + C),($FF00 + C)
 ROM0:1271 1E 06            ld   e,06
 ROM0:1273 14               inc  d
 ROM0:1274 28 07            jr   z,127D
 ROM0:1276 F2               ld   a,(ff00+c)
 ROM0:1277 CB 4F            bit  1,a
 ROM0:1279 20 F8            jr   nz,1273
 ROM0:127B B7               or   a
 ROM0:127C C9               ret  
 ROM0:127D 1D               dec  e
 ROM0:127E 20 F6            jr   nz,1276
 ROM0:1280 C9               ret                 // bit 1($FF00 + C) results in 1536 - D delay cycles; otherwise, OR ($FF00 + C),($FF00 + C)
 ROM0:1281 3E C1            ld   a,C1
 ROM0:1283 E2               ld   (ff00+c),a
 ROM0:1284 7A               ld   a,d
 ROM0:1285 3D               dec  a
 ROM0:1286 20 FD            jr   nz,1285
 ROM0:1288 C9               ret                 // ($FF00 + C) = $C1 (bits 0, 6, and 7); delay cycling equivalent to D
 ROM0:1289 3E C0            ld   a,C0
 ROM0:128B E2               ld   (ff00+c),a
 ROM0:128C 7A               ld   a,d
 ROM0:128D 3D               dec  a
 ROM0:128E 20 FD            jr   nz,128D
 ROM0:1290 C9               ret                 // ($FF00 + C) = $C0 (bits 6 and 7); delay cycling equivalent to D
 ROM0:1291 3E C0            ld   a,C0
 ROM0:1293 E2               ld   (ff00+c),a
 ROM0:1294 7A               ld   a,d
 ROM0:1295 1E 05            ld   e,05
 ROM0:1297 3D               dec  a
 ROM0:1298 20 FD            jr   nz,1297
 ROM0:129A 1D               dec  e
 ROM0:129B 7A               ld   a,d
 ROM0:129C 20 F9            jr   nz,1297        // Delay cycle D * 5
 ROM0:129E C9               ret                 // ($FF00 + C) = $C0 (bits 6 and 7); E set to 5 then D and E used together for delay cycling before both A and E end up at 0
 ROM0:129F 16 00            ld   d,00
 ROM0:12A1 5A               ld   e,d
 ROM0:12A2 3E 01            ld   a,01
 ROM0:12A4 EA 00 C9         ld   (C900),a       // Set to 1
 ROM0:12A7 CD 35 15         call 1535           // Establishes current player controls for IR system
 ROM0:12AA 06 02            ld   b,02
 ROM0:12AC 0E 56            ld   c,56
 ROM0:12AE FA 09 C9         ld   a,(C909)       // Newly pressed, bit 1, bits -OO- O-O-
 ROM0:12B1 CB 4F            bit  1,a            // B Button?
 ROM0:12B3 28 06            jr   z,12BB
 ROM0:12B5 3E FF            ld   a,FF
 ROM0:12B7 EA 01 C9         ld   (C901),a       // Pressing B ends with ($C901) = -1
 ROM0:12BA C9               ret  
 ROM0:12BB CB 47            bit  0,a            // A Button?
 ROM0:12BD 20 43            jr   nz,1302        // Branches for A Button press
 ROM0:12BF F2               ld   a,(ff00+c)
 ROM0:12C0 A0               and  b
 ROM0:12C1 20 E4            jr   nz,12A7        // Cycles back during Read Normal
 ROM0:12C3 06 1A            ld   b,1A           // bits -O-O O---
 ROM0:12C5 0E 56            ld   c,56
 ROM0:12C7 16 00            ld   d,00
 ROM0:12C9 CD 71 12         call 1271           // Read Normal results in 1536 delay cycles; otherwise, OR ($FF00 + C),($FF00 + C)
 ROM0:12CC CA 23 14         jp   z,1423         // Ends with A and ($C901) set to 16 if IR Comm Off or Read Normal delay cycles are done
 ROM0:12CF 16 00            ld   d,00
 ROM0:12D1 CD 5F 12         call 125F           // Receiving IR Signal results in 256 delay cycles resulting in D = 0; otherwise, D = 1, OR ($FF00 + C),($FF00 + C)
 ROM0:12D4 CA 23 14         jp   z,1423         // Ends with A and ($C901) set to 16 if IR Comm Off or Receiving IR Signal delay cycles are done
 ROM0:12D7 CD 68 12         call 1268           // Read Normal results in 255 delay cycles resulting in D = 0; otherwise, D = 1, OR ($FF00 + C),($FF00 + C)
 ROM0:12DA CA 23 14         jp   z,1423         // Ends with A and ($C901) set to 16 if IR Comm Off or Read Normal delay cycles are done
 ROM0:12DD CD 5F 12         call 125F           // Receiving IR Signal results in 255 delay cycles resulting in D = 0; otherwise, D = 1, OR ($FF00 + C),($FF00 + C)
 ROM0:12E0 CA 23 14         jp   z,1423         // Ends with A and ($C901) set to 16 if IR Comm Off or Receiving IR Signal delay cycles are done
 ROM0:12E3 3E 8B            ld   a,8B
 ROM0:12E5 EA 01 C9         ld   (C901),a
 ROM0:12E8 FA 07 C9         ld   a,(C907)       // A = 110 * Game Speed
 ROM0:12EB 57               ld   d,a
 ROM0:12EC CD 91 12         call 1291           // Data Read Enabled; 550 * Game Speed delay cycles
 ROM0:12EF 16 1A            ld   d,1A
 ROM0:12F1 CD 81 12         call 1281           // Data Read Enabled, Write Data LED On; 26 delay cycles
 ROM0:12F4 16 34            ld   d,34
 ROM0:12F6 CD 89 12         call 1289           // Data Read Enabled; 52 delay cycles
 ROM0:12F9 16 1A            ld   d,1A
 ROM0:12FB CD 81 12         call 1281           // Data Read Enabled, Write Data LED On; 26 delay cycles
 ROM0:12FE CD 89 12         call 1289           // Data Read Enabled; 26 delay cycles
 ROM0:1301 C9               ret  
 ROM0:1302 3E 02            ld   a,02           // A Button press starts here
 ROM0:1304 EA 00 C9         ld   (C900),a       // Set to 2
 ROM0:1307 06 1A            ld   b,1A
 ROM0:1309 0E 56            ld   c,56
 ROM0:130B FA 07 C9         ld   a,(C907)       // A = 110 * Game Speed
 ROM0:130E 57               ld   d,a
 ROM0:130F CD 91 12         call 1291           // Data Read Enabled; 550 * Game Speed delay cycles
 ROM0:1312 16 1A            ld   d,1A
 ROM0:1314 CD 81 12         call 1281           // Data Read Enabled, Write Data LED On; 26 delay cycles
 ROM0:1317 16 34            ld   d,34
 ROM0:1319 CD 89 12         call 1289           // Data Read Enabled; 52 delay cycles
 ROM0:131C 16 1A            ld   d,1A
 ROM0:131E CD 81 12         call 1281           // Data Read Enabled, Write Data LED On; 26 delay cycles
 ROM0:1321 CD 89 12         call 1289           // Data Read Enabled; 26 delay cycles
 ROM0:1324 16 00            ld   d,00
 ROM0:1326 CD 71 12         call 1271           // Read Normal results in 1536 delay cycles; otherwise, OR ($FF00 + C),($FF00 + C)
 ROM0:1329 CA 23 14         jp   z,1423         // Ends with A and ($C901) set to 16 if IR Comm Off or Read Normal delay cycles are done
 ROM0:132C 16 00            ld   d,00
 ROM0:132E CD 5F 12         call 125F           // Receiving IR Signal results in 256 delay cycles resulting in D = 0; otherwise, D = 1, OR ($FF00 + C),($FF00 + C)
 ROM0:1331 CA 23 14         jp   z,1423         // Ends with A and ($C901) set to 16 if IR Comm Off or Receiving IR Signal delay cycles are done
 ROM0:1334 16 00            ld   d,00
 ROM0:1336 CD 68 12         call 1268           // Read Normal results in 256 delay cycles resulting in D = 0; otherwise, D = 1, OR ($FF00 + C),($FF00 + C)
 ROM0:1339 CA 23 14         jp   z,1423         // Ends with A and ($C901) set to 16 if IR Comm Off or Read Normal delay cycles are done
 ROM0:133C 16 00            ld   d,00
 ROM0:133E CD 5F 12         call 125F           // Receiving IR Signal results in 256 delay cycles resulting in D = 0; otherwise, D = 1, OR ($FF00 + C),($FF00 + C)
 ROM0:1341 CA 23 14         jp   z,1423         // Ends with A and ($C901) set to 16 if IR Comm Off or Receiving IR Signal delay cycles are done
 ROM0:1344 16 1A            ld   d,1A
 ROM0:1346 CD 89 12         call 1289           // Data Read Enabled; 26 delay cycles
 ROM0:1349 3E 8B            ld   a,8B
 ROM0:134B EA 01 C9         ld   (C901),a
 ROM0:134E C9               ret  
 ROM0:134F E0 56            ld   (ff00+56),a
 ROM0:1351 3E FF            ld   a,FF
 ROM0:1353 EA 01 C9         ld   (C901),a
 ROM0:1356 C9               ret                 // ($FF56) = A, ($C901) = -1
 ROM0:1357 AF               xor  a
 ROM0:1358 EA FB C8         ld   (C8FB),a
 ROM0:135B EA FC C8         ld   (C8FC),a
 ROM0:135E E5               push hl
 ROM0:135F C5               push bc
 ROM0:1360 FA 07 C9         ld   a,(C907)       // A = 110 * Game Speed
 ROM0:1363 57               ld   d,a
 ROM0:1364 CD 91 12         call 1291           // ($FF00 + C) = $C0 (bits 6 and 7); 550 * Game Speed delay cycles
 ROM0:1367 21 FD C8         ld   hl,C8FD
 ROM0:136A 3E 5A            ld   a,5A
 ROM0:136C 22               ldi  (hl),a
 ROM0:136D 70               ld   (hl),b
 ROM0:136E 2B               dec  hl
 ROM0:136F 06 02            ld   b,02
 ROM0:1371 16 1E            ld   d,1E
 ROM0:1373 CD 89 12         call 1289           // ($FF00 + C) = $C0 (bits 6 and 7); 30 delay cycles
 ROM0:1376 CD AC 13         call 13AC
 ROM0:1379 C1               pop  bc
 ROM0:137A E1               pop  hl
 ROM0:137B CD 2F 15         call 152F           // Nothing but RET; likely intended to pass by 16 clock cycles
 ROM0:137E CD AC 13         call 13AC
 ROM0:1381 FA FB C8         ld   a,(C8FB)
 ROM0:1384 EA FD C8         ld   (C8FD),a
 ROM0:1387 FA FC C8         ld   a,(C8FC)
 ROM0:138A EA FE C8         ld   (C8FE),a
 ROM0:138D E5               push hl
 ROM0:138E 21 FD C8         ld   hl,C8FD
 ROM0:1391 06 02            ld   b,02
 ROM0:1393 CD AC 13         call 13AC
 ROM0:1396 21 01 C9         ld   hl,C901
 ROM0:1399 06 01            ld   b,01
 ROM0:139B CD A5 14         call 14A5
 ROM0:139E FA FD C8         ld   a,(C8FD)
 ROM0:13A1 EA FB C8         ld   (C8FB),a
 ROM0:13A4 FA FE C8         ld   a,(C8FE)
 ROM0:13A7 EA FC C8         ld   (C8FC),a
 ROM0:13AA E1               pop  hl
 ROM0:13AB C9               ret  
 ROM0:13AC 0E 56            ld   c,56
 ROM0:13AE 16 16            ld   d,16
 ROM0:13B0 CD 89 12         call 1289           // Data Read Enabled; 22 delay cycles
 ROM0:13B3 CD 81 12         call 1281           // Data Read Enabled, Write Data LED On; 22 delay cycles
 ROM0:13B6 CD 89 12         call 1289           // Data Read Enabled; 22 delay cycles
 ROM0:13B9 78               ld   a,b
 ROM0:13BA 2F               cpl  
 ROM0:13BB 47               ld   b,a
 ROM0:13BC 04               inc  b              // B *= -1
 ROM0:13BD 28 52            jr   z,1411         // Branches if B is 0 (loop beings here)
 ROM0:13BF 3E 08            ld   a,08
 ROM0:13C1 EA FA C8         ld   (C8FA),a
 ROM0:13C4 2A               ldi  a,(hl)
 ROM0:13C5 5F               ld   e,a
 ROM0:13C6 FA FB C8         ld   a,(C8FB)
 ROM0:13C9 83               add  e
 ROM0:13CA EA FB C8         ld   (C8FB),a
 ROM0:13CD 30 09            jr   nc,13D8
 ROM0:13CF FA FC C8         ld   a,(C8FC)
 ROM0:13D2 3C               inc  a
 ROM0:13D3 EA FC C8         ld   (C8FC),a
 ROM0:13D6 18 03            jr   13DB
 ROM0:13D8 CD 2F 15         call 152F           // Nothing but RET; likely intended to pass by 16 clock cycles
 ROM0:13DB 7B               ld   a,e
 ROM0:13DC 07               rlca 
 ROM0:13DD 5F               ld   e,a
 ROM0:13DE 30 10            jr   nc,13F0
 ROM0:13E0 FA 02 C9         ld   a,(C902)
 ROM0:13E3 57               ld   d,a
 ROM0:13E4 CD 81 12         call 1281           // ($FF00 + C) = $C1 (bits 0, 6, and 7); delay cycling equivalent to D
 ROM0:13E7 FA 03 C9         ld   a,(C903)
 ROM0:13EA 57               ld   d,a
 ROM0:13EB CD 89 12         call 1289           // ($FF00 + C) = $C0 (bits 6 and 7); delay cycling equivalent to D
 ROM0:13EE 18 0E            jr   13FE
 ROM0:13F0 FA 04 C9         ld   a,(C904)
 ROM0:13F3 57               ld   d,a
 ROM0:13F4 CD 81 12         call 1281           // ($FF00 + C) = $C1 (bits 0, 6, and 7); delay cycling equivalent to D
 ROM0:13F7 FA 05 C9         ld   a,(C905)
 ROM0:13FA 57               ld   d,a
 ROM0:13FB CD 89 12         call 1289           // ($FF00 + C) = $C0 (bits 6 and 7); delay cycling equivalent to D
 ROM0:13FE FA FA C8         ld   a,(C8FA)
 ROM0:1401 3D               dec  a
 ROM0:1402 EA FA C8         ld   (C8FA),a
 ROM0:1405 28 08            jr   z,140F
 ROM0:1407 CD 30 15         call 1530           // JR Z,+0, then JR NZ,+0; likely intended to pass by 36 clock cycles
 ROM0:140A CD 30 15         call 1530           // JR Z,+0, then JR NZ,+0; likely intended to pass by 36 clock cycles
 ROM0:140D 18 CC            jr   13DB
 ROM0:140F 18 AB            jr   13BC
 ROM0:1411 CD 2F 15         call 152F           // Nothing but RET; likely intended to pass by 16 clock cycles
 ROM0:1414 CD 2F 15         call 152F           // Nothing but RET; likely intended to pass by 16 clock cycles
 ROM0:1417 CD 30 15         call 1530           // JR Z,+0, then JR NZ,+0; likely intended to pass by 36 clock cycles
 ROM0:141A 16 16            ld   d,16
 ROM0:141C CD 81 12         call 1281           // ($FF00 + C) = $C1 (bits 0, 6, and 7); delay cycling equivalent to D
 ROM0:141F CD 89 12         call 1289           // ($FF00 + C) = $C0 (bits 6 and 7); delay cycling equivalent to D
 ROM0:1422 C9               ret  
 ROM0:1423 3E 10            ld   a,10
 ROM0:1425 EA 01 C9         ld   (C901),a
 ROM0:1428 C9               ret                 // A and ($C901) set to 16
 ROM0:1429 FA 01 C9         ld   a,(C901)
 ROM0:142C F6 04            or   a,04
 ROM0:142E EA 01 C9         ld   (C901),a
 ROM0:1431 C9               ret                 // A and ($C901) set to OR ($C901),4
 ROM0:1432 FA 01 C9         ld   a,(C901)
 ROM0:1435 F6 20            or   a,20
 ROM0:1437 EA 01 C9         ld   (C901),a
 ROM0:143A C9               ret                 // A and ($C901) set to OR ($C901),32
 ROM0:143B AF               xor  a
 ROM0:143C EA FB C8         ld   (C8FB),a
 ROM0:143F EA FC C8         ld   (C8FC),a
 ROM0:1442 C5               push bc
 ROM0:1443 E5               push hl
 ROM0:1444 21 FD C8         ld   hl,C8FD
 ROM0:1447 06 02            ld   b,02
 ROM0:1449 CD A5 14         call 14A5
 ROM0:144C FA FE C8         ld   a,(C8FE)
 ROM0:144F EA FF C8         ld   (C8FF),a
 ROM0:1452 47               ld   b,a
 ROM0:1453 E1               pop  hl
 ROM0:1454 F1               pop  af
 ROM0:1455 B8               cp   b
 ROM0:1456 DA 32 14         jp   c,1432         // Ends with A and ($C901) set to OR ($C901),32 if lower than B
 ROM0:1459 FA FD C8         ld   a,(C8FD)
 ROM0:145C FE 5A            cp   a,5A
 ROM0:145E C2 32 14         jp   nz,1432        // Ends with A and ($C901) set to OR ($C901),32 if not equal to 90
 ROM0:1461 CD A5 14         call 14A5
 ROM0:1464 FA FB C8         ld   a,(C8FB)
 ROM0:1467 57               ld   d,a
 ROM0:1468 FA FC C8         ld   a,(C8FC)
 ROM0:146B 5F               ld   e,a
 ROM0:146C E5               push hl
 ROM0:146D D5               push de
 ROM0:146E 21 FD C8         ld   hl,C8FD
 ROM0:1471 06 02            ld   b,02
 ROM0:1473 CD A5 14         call 14A5
 ROM0:1476 D1               pop  de
 ROM0:1477 21 FD C8         ld   hl,C8FD
 ROM0:147A 2A               ldi  a,(hl)
 ROM0:147B AA               xor  d
 ROM0:147C 47               ld   b,a
 ROM0:147D 7E               ld   a,(hl)
 ROM0:147E AB               xor  e
 ROM0:147F B0               or   b
 ROM0:1480 28 08            jr   z,148A
 ROM0:1482 FA 01 C9         ld   a,(C901)
 ROM0:1485 F6 04            or   a,04
 ROM0:1487 EA 01 C9         ld   (C901),a
 ROM0:148A D5               push de
 ROM0:148B FA 07 C9         ld   a,(C907)       // A = 110 * Game Speed
 ROM0:148E 57               ld   d,a
 ROM0:148F CD 91 12         call 1291           // ($FF00 + C) = $C0 (bits 6 and 7); 550 * Game Speed delay cycles
 ROM0:1492 21 01 C9         ld   hl,C901
 ROM0:1495 06 01            ld   b,01
 ROM0:1497 CD AC 13         call 13AC
 ROM0:149A D1               pop  de
 ROM0:149B E1               pop  hl
 ROM0:149C 7A               ld   a,d
 ROM0:149D EA FB C8         ld   (C8FB),a
 ROM0:14A0 7B               ld   a,e
 ROM0:14A1 EA FC C8         ld   (C8FC),a
 ROM0:14A4 C9               ret  
 ROM0:14A5 0E 56            ld   c,56
 ROM0:14A7 16 00            ld   d,00
 ROM0:14A9 CD 71 12         call 1271           // Read Normal results in 1536 delay cycles; otherwise, OR ($FF00 + C),($FF00 + C)
 ROM0:14AC CA 23 14         jp   z,1423         // Ends with A and ($C901) set to 16 if IR Comm Off or Read Normal delay cycles are done
 ROM0:14AF 16 00            ld   d,00
 ROM0:14B1 CD 5F 12         call 125F           // Receiving IR Signal results in 256 cycles resulting in D = 0; otherwise, D = 1, OR ($FF00 + C),($FF00 + C)
 ROM0:14B4 CA 23 14         jp   z,1423         // Ends with A and ($C901) set to 16 if IR Comm Off or Receiving IR Signal delay cycles are done
 ROM0:14B7 16 00            ld   d,00
 ROM0:14B9 CD 68 12         call 1268           // Read Normal results in 256 cycles resulting in D = 0; otherwise, D = 1, OR ($FF00 + C),($FF00 + C)
 ROM0:14BC CA 23 14         jp   z,1423         // Ends with A and ($C901) set to 16 if IR Comm Off or Read Normal delay cycles are done
 ROM0:14BF CD 30 15         call 1530           // JR Z,+0, then JR NZ,+0; likely intended to pass by 36 clock cycles
 ROM0:14C2 CD 30 15         call 1530           // JR Z,+0, then JR NZ,+0; likely intended to pass by 36 clock cycles
 ROM0:14C5 F5               push af
 ROM0:14C6 F1               pop  af
 ROM0:14C7 78               ld   a,b
 ROM0:14C8 2F               cpl  
 ROM0:14C9 47               ld   b,a
 ROM0:14CA 04               inc  b              // B *= -1 for initial cycle (loop begins here)
 ROM0:14CB 28 4A            jr   z,1517
 ROM0:14CD 3E 08            ld   a,08
 ROM0:14CF EA FA C8         ld   (C8FA),a
 ROM0:14D2 16 00            ld   d,00
 ROM0:14D4 CD 5F 12         call 125F           // Receiving IR Signal results in 256 cycles resulting in D = 0; otherwise, D = 1, OR ($FF00 + C),($FF00 + C)
 ROM0:14D7 CD 68 12         call 1268           // Read Normal results in 255 cycles resulting in D = 0; otherwise, D = 1, OR ($FF00 + C),($FF00 + C)
 ROM0:14DA FA 06 C9         ld   a,(C906)
 ROM0:14DD BA               cp   d
 ROM0:14DE 30 06            jr   nc,14E6
 ROM0:14E0 7B               ld   a,e
 ROM0:14E1 CB C7            set  0,a
 ROM0:14E3 5F               ld   e,a
 ROM0:14E4 18 04            jr   14EA
 ROM0:14E6 7B               ld   a,e
 ROM0:14E7 CB 87            res  0,a
 ROM0:14E9 5F               ld   e,a
 ROM0:14EA FA FA C8         ld   a,(C8FA)
 ROM0:14ED 3D               dec  a
 ROM0:14EE EA FA C8         ld   (C8FA),a
 ROM0:14F1 28 0B            jr   z,14FE
 ROM0:14F3 7B               ld   a,e
 ROM0:14F4 07               rlca 
 ROM0:14F5 5F               ld   e,a
 ROM0:14F6 CD 30 15         call 1530           // JR Z,+0, then JR NZ,+0; likely intended to pass by 36 clock cycles
 ROM0:14F9 CD 30 15         call 1530           // JR Z,+0, then JR NZ,+0; likely intended to pass by 36 clock cycles
 ROM0:14FC 18 D4            jr   14D2
 ROM0:14FE 7B               ld   a,e
 ROM0:14FF 22               ldi  (hl),a
 ROM0:1500 FA FB C8         ld   a,(C8FB)
 ROM0:1503 83               add  e
 ROM0:1504 EA FB C8         ld   (C8FB),a
 ROM0:1507 30 09            jr   nc,1512
 ROM0:1509 FA FC C8         ld   a,(C8FC)
 ROM0:150C 3C               inc  a
 ROM0:150D EA FC C8         ld   (C8FC),a
 ROM0:1510 18 03            jr   1515
 ROM0:1512 CD 2F 15         call 152F           // Nothing but RET; likely intended to pass by 16 clock cycles
 ROM0:1515 18 B3            jr   14CA
 ROM0:1517 16 00            ld   d,00
 ROM0:1519 CD 5F 12         call 125F           // Receiving IR Signal results in 256 cycles resulting in D = 0; otherwise, D = 1, OR ($FF00 + C),($FF00 + C)
 ROM0:151C CA 23 14         jp   z,1423         // Ends with A and ($C901) set to 16 if IR Comm Off or Receiving IR Signal delay cycles are done
 ROM0:151F 16 11            ld   d,11
 ROM0:1521 CD 89 12         call 1289           // ($FF00 + C) = $C0 (bits 6 and 7); 17 delay cycles
 ROM0:1524 C9               ret  
 ROM0:1525 06 00            ld   b,00
 ROM0:1527 C3 57 13         jp   1357
 ROM0:152A 06 00            ld   b,00
 ROM0:152C C3 3B 14         jp   143B
 ROM0:152F C9               ret                 // Nothing but RET; likely intended to pass by 16 clock cycles
 ROM0:1530 28 00            jr   z,1532
 ROM0:1532 20 00            jr   nz,1534
 ROM0:1534 C9               ret                 // JR Z,+0, then JR NZ,+0; likely intended to pass by 36 clock cycles
 ROM0:1535 3E 20            ld   a,20
 ROM0:1537 E0 00            ld   (ff00+00),a    // Disables Buttons
 ROM0:1539 F0 00            ld   a,(ff00+00)
 ROM0:153B F0 00            ld   a,(ff00+00)
 ROM0:153D 2F               cpl  
 ROM0:153E E6 0F            and  a,0F
 ROM0:1540 CB 37            swap a              // 0000RLUD
 ROM0:1542 47               ld   b,a
 ROM0:1543 3E 10            ld   a,10
 ROM0:1545 E0 00            ld   (ff00+00),a    // Disables Directions
 ROM0:1547 F0 00            ld   a,(ff00+00)
 ROM0:1549 F0 00            ld   a,(ff00+00)
 ROM0:154B F0 00            ld   a,(ff00+00)
 ROM0:154D F0 00            ld   a,(ff00+00)
 ROM0:154F F0 00            ld   a,(ff00+00)
 ROM0:1551 F0 00            ld   a,(ff00+00)
 ROM0:1553 2F               cpl  
 ROM0:1554 E6 0F            and  a,0F
 ROM0:1556 B0               or   b              // ABZSRLUD
 ROM0:1557 4F               ld   c,a
 ROM0:1558 FA 08 C9         ld   a,(C908)
 ROM0:155B A9               xor  c
 ROM0:155C A1               and  c
 ROM0:155D EA 09 C9         ld   (C909),a
 ROM0:1560 E0 91            ld   (ff00+91),a    // Newly pressed controls
 ROM0:1562 79               ld   a,c
 ROM0:1563 EA 08 C9         ld   (C908),a
 ROM0:1566 E0 90            ld   (ff00+90),a    // Currently pressed controls
 ROM0:1568 3E 30            ld   a,30
 ROM0:156A E0 00            ld   (ff00+00),a    // Disables all controls
 ROM0:156C C9               ret                 // Establishes current player controls for IR system
 ROM0:156D 31 00 D0         ld   sp,D000
 ROM0:1570 FB               ei   
 ROM0:1571 CD B3 15         call 15B3
 ROM0:1574 CD 18 06         call 0618           // Resets Palettes to absolute default Palettes
 ROM0:1577 EF 01 00 40                          // Graphics holding: VRA0($9000) to VRA0($97FF) then VRA0($8800) to VRA0($8FFF) holds basic text
 ROM0:157B EF 0B 82 42                          // Empties $FFAC, $FFB1, and $FFB2
 ROM0:157F CD CE 34         call 34CE           // Empty $FFC8 to $FFCB
 ROM0:1582 CD 7C 2D         call 2D7C           // Resets all Sprite-related data
 ROM0:1585 CD 2A 05         call 052A           // ($FF0F) = 0, set 0,($FFFF) (V-Blank On)
 ROM0:1588 CD 65 05         call 0565           // ($FF0F) = 0, set 2,($FFFF) (Timer On)
 ROM0:158B EF 14 70 4C                          
 ROM0:158F EF 13 65 61                          
 ROM0:1593 EF 13 54 5D                          
 ROM0:1597 EF 31 53 54                          
 ROM0:159B 30 06            jr   nc,15A3
 ROM0:159D 3E 06            ld   a,06           // "Message BOX"
 ROM0:159F EF 14 50 4B                          // Manages display of text window with "Message BOX was erased."
 ROM0:15A3 EF 14 92 4C                          // Shuts off LCD Display if necessary
 ROM0:15A7 3E 02            ld   a,02
 ROM0:15A9 E0 80            ld   (ff00+80),a
 ROM0:15AB EA 00 20         ld   (2000),a
 ROM0:15AE C3 68 4B         jp   4B68
 ROM0:15B1 18 FE            jr   15B1
 ROM0:15B3 21 4D FF         ld   hl,FF4D
 ROM0:15B6 CB 7E            bit  7,(hl)
 ROM0:15B8 20 0D            jr   nz,15C7
 ROM0:15BA CB C6            set  0,(hl)
 ROM0:15BC AF               xor  a
 ROM0:15BD E0 0F            ld   (ff00+0F),a
 ROM0:15BF E0 FF            ld   (ff00+FF),a
 ROM0:15C1 3E 30            ld   a,30
 ROM0:15C3 E0 00            ld   (ff00+00),a
 ROM0:15C5 10 00            stop
 ROM0:15C7 C9               ret  
 ROM0:15C8 21 4D FF         ld   hl,FF4D
 ROM0:15CB CB 7E            bit  7,(hl)
 ROM0:15CD 28 0D            jr   z,15DC
 ROM0:15CF CB C6            set  0,(hl)
 ROM0:15D1 AF               xor  a
 ROM0:15D2 E0 0F            ld   (ff00+0F),a
 ROM0:15D4 E0 FF            ld   (ff00+FF),a
 ROM0:15D6 3E 30            ld   a,30
 ROM0:15D8 E0 00            ld   (ff00+00),a
 ROM0:15DA 10 00            stop
 ROM0:15DC C9               ret  
 ROM0:15DD 79               ld   a,c
 ROM0:15DE E6 0F            and  a,0F
 ROM0:15E0 0F               rrca 
 ROM0:15E1 0F               rrca 
 ROM0:15E2 6F               ld   l,a            // L = (C%16) / 4 + (C%4) * 64
 ROM0:15E3 E6 0F            and  a,0F
 ROM0:15E5 C6 98            add  a,98
 ROM0:15E7 67               ld   h,a            // H = $98 + (C%16) / 4
 ROM0:15E8 7D               ld   a,l
 ROM0:15E9 E6 F0            and  a,F0
 ROM0:15EB 6F               ld   l,a            // L = (C%4) * 64
 ROM0:15EC 78               ld   a,b
 ROM0:15ED E6 0F            and  a,0F
 ROM0:15EF 07               rlca 
 ROM0:15F0 85               add  l
 ROM0:15F1 6F               ld   l,a            // HL = $9800 + C%16 * 64 + B%16 * 2
 ROM0:15F2 79               ld   a,c
 ROM0:15F3 E6 01            and  a,01
 ROM0:15F5 85               add  l
 ROM0:15F6 6F               ld   l,a
 ROM0:15F7 C9               ret                 // HL = $9800 + C%16 * 64 + B%16 * 2 + C%2
 ROM0:15F8 79               ld   a,c
 ROM0:15F9 0F               rrca 
 ROM0:15FA 0F               rrca 
 ROM0:15FB 6F               ld   l,a
 ROM0:15FC E6 0F            and  a,0F
 ROM0:15FE C6 D0            add  a,D0
 ROM0:1600 67               ld   h,a
 ROM0:1601 7D               ld   a,l
 ROM0:1602 E6 F0            and  a,F0
 ROM0:1604 80               add  b
 ROM0:1605 6F               ld   l,a
 ROM0:1606 C9               ret                 // HL = $D000 + B + C * 64
 ROM0:1607 D5               push de
 ROM0:1608 26 00            ld   h,00
 ROM0:160A 6F               ld   l,a
 ROM0:160B 29               add  hl,hl
 ROM0:160C 29               add  hl,hl
 ROM0:160D 29               add  hl,hl          // HL = A * 8
 ROM0:160E 11 6C 1C         ld   de,1C6C
 ROM0:1611 19               add  hl,de
 ROM0:1612 D1               pop  de
 ROM0:1613 C9               ret                 // HL points to portion for terrain/unit marked by A
 ROM0:1614 FA 7F C8         ld   a,(C87F)
 ROM0:1617 6F               ld   l,a
 ROM0:1618 FA 80 C8         ld   a,(C880)
 ROM0:161B 67               ld   h,a
 ROM0:161C FE A0            cp   a,A0
 ROM0:161E 30 1D            jr   nc,163D
 ROM0:1620 F0 80            ld   a,(ff00+80)
 ROM0:1622 F5               push af
 ROM0:1623 F0 82            ld   a,(ff00+82)
 ROM0:1625 F5               push af
 ROM0:1626 FA 7E C8         ld   a,(C87E)
 ROM0:1629 E0 80            ld   (ff00+80),a
 ROM0:162B EA 00 20         ld   (2000),a
 ROM0:162E CD 5E 16         call 165E           // Newly played map data set up in WRAM banks 1 and 2
 ROM0:1631 F1               pop  af
 ROM0:1632 E0 82            ld   (ff00+82),a
 ROM0:1634 E0 70            ld   (ff00+70),a
 ROM0:1636 F1               pop  af
 ROM0:1637 E0 80            ld   (ff00+80),a
 ROM0:1639 EA 00 20         ld   (2000),a
 ROM0:163C C9               ret  
 ROM0:163D F0 80            ld   a,(ff00+80)
 ROM0:163F F5               push af
 ROM0:1640 F0 82            ld   a,(ff00+82)
 ROM0:1642 F5               push af
 ROM0:1643 CD 93 05         call 0593           // ($0000) = 10
 ROM0:1646 FA 7E C8         ld   a,(C87E)
 ROM0:1649 CD 8D 05         call 058D           // ($4000) = ($C87E), ($FF81) = ($C87E)
 ROM0:164C CD 5E 16         call 165E           // Currently played map data set up in WRAM banks 1 and 2
 ROM0:164F CD 9B 05         call 059B           // ($0000) = 0
 ROM0:1652 F1               pop  af
 ROM0:1653 E0 82            ld   (ff00+82),a
 ROM0:1655 E0 70            ld   (ff00+70),a
 ROM0:1657 F1               pop  af
 ROM0:1658 E0 80            ld   (ff00+80),a
 ROM0:165A EA 00 20         ld   (2000),a
 ROM0:165D C9               ret                 // Active map data set up in WRAM banks 1 and 2
 ROM0:165E EF 0B 24 45                          // Empties map data stored on WRAM Banks 1 and 2
 ROM0:1662 3E 01            ld   a,01
 ROM0:1664 E0 82            ld   (ff00+82),a
 ROM0:1666 E0 70            ld   (ff00+70),a
 ROM0:1668 FA 33 C6         ld   a,(C633)
 ROM0:166B EA 84 C8         ld   (C884),a       // ($C884) holds Day/Side value
 ROM0:166E 54               ld   d,h
 ROM0:166F 5D               ld   e,l
 ROM0:1670 21 85 C8         ld   hl,C885
 ROM0:1673 01 2E 00         ld   bc,002E
 ROM0:1676 CD 50 3B         call 3B50           // ($C885~$C8B2) = WRA0(HL~(HL + 45))
 ROM0:1679 FA B1 C8         ld   a,(C8B1)
 ROM0:167C EA 89 C9         ld   (C989),a
 ROM0:167F FA B2 C8         ld   a,(C8B2)
 ROM0:1682 EA 8A C9         ld   (C98A),a
 ROM0:1685 0E 00            ld   c,00
 ROM0:1687 06 00            ld   b,00           // Loop begins here or 2 lines later
 ROM0:1689 CD F8 15         call 15F8           // HL = $D000 + B + C * 64
 ROM0:168C 1A               ld   a,(de)
 ROM0:168D 13               inc  de
 ROM0:168E 22               ldi  (hl),a
 ROM0:168F 04               inc  b
 ROM0:1690 FA 89 C9         ld   a,(C989)
 ROM0:1693 B8               cp   b
 ROM0:1694 20 F6            jr   nz,168C
 ROM0:1696 0C               inc  c
 ROM0:1697 FA 8A C9         ld   a,(C98A)
 ROM0:169A B9               cp   c
 ROM0:169B 20 EA            jr   nz,1687        // Establishes base map data
 ROM0:169D 3E 02            ld   a,02
 ROM0:169F E0 82            ld   (ff00+82),a
 ROM0:16A1 E0 70            ld   (ff00+70),a
 ROM0:16A3 1A               ld   a,(de)
 ROM0:16A4 FE FF            cp   a,FF           // Ends when done creating predeployed units
 ROM0:16A6 28 0D            jr   z,16B5
 ROM0:16A8 47               ld   b,a
 ROM0:16A9 13               inc  de
 ROM0:16AA 1A               ld   a,(de)
 ROM0:16AB 4F               ld   c,a
 ROM0:16AC 13               inc  de
 ROM0:16AD 1A               ld   a,(de)
 ROM0:16AE 13               inc  de
 ROM0:16AF EF 12 E3 41                          // Establishes newly created unit's stats with first available unit slot
 ROM0:16B3 18 EE            jr   16A3
 ROM0:16B5 C9               ret                 // Map data set up in WRAM banks 1 and 2
 ROM0:16B6 F0 AC            ld   a,(ff00+AC)
 ROM0:16B8 CB 7F            bit  7,a
 ROM0:16BA 28 29            jr   z,16E5         // Simple Water graphics update if camera doesn't want to move
 ROM0:16BC CB 4F            bit  1,a            // Right
 ROM0:16BE 20 0C            jr   nz,16CC
 ROM0:16C0 CB 47            bit  0,a            // Left
 ROM0:16C2 20 10            jr   nz,16D4
 ROM0:16C4 CD 4D 17         call 174D           // Establishes graphics of tiles starting at ($FFAD) coordinates to right; A = remaining cycles at end of V-Blank period if any
 ROM0:16C7 A7               and  a
 ROM0:16C8 20 1A            jr   nz,16E4        // Ends immediately if any cycles are left
 ROM0:16CA 18 10            jr   16DC
 ROM0:16CC CD EE 16         call 16EE           // Establishes graphics of tiles starting at ($FFAD) coordinates downward, right version; A = remaining cycles at end of V-Blank period if any
 ROM0:16CF A7               and  a
 ROM0:16D0 20 12            jr   nz,16E4        // Ends immediately if any cycles are left
 ROM0:16D2 18 08            jr   16DC
 ROM0:16D4 CD 1B 17         call 171B           // Establishes graphics of tiles starting at ($FFAD) coordinates downward, left version; A = remaining cycles at end of V-Blank period if any
 ROM0:16D7 A7               and  a
 ROM0:16D8 20 0A            jr   nz,16E4        // End immediately if any cycles are left
 ROM0:16DA 18 00            jr   16DC
 ROM0:16DC F0 AC            ld   a,(ff00+AC)
 ROM0:16DE CB BF            res  7,a
 ROM0:16E0 CB F7            set  6,a
 ROM0:16E2 E0 AC            ld   (ff00+AC),a
 ROM0:16E4 C9               ret  
 ROM0:16E5 F0 B1            ld   a,(ff00+B1)
 ROM0:16E7 CB 47            bit  0,a
 ROM0:16E9 C8               ret  z
 ROM0:16EA CD 6A 21         call 216A           // Water graphics update check process
 ROM0:16ED C9               ret                 // Basic map tile updates depending on state of ($FFAC)
 ROM0:16EE F0 83            ld   a,(ff00+83)    // Right starts here
 ROM0:16F0 F5               push af
 ROM0:16F1 F0 82            ld   a,(ff00+82)
 ROM0:16F3 F5               push af             // Saves WRAM and VRAM banks
 ROM0:16F4 F0 AD            ld   a,(ff00+AD)
 ROM0:16F6 47               ld   b,a
 ROM0:16F7 F0 AE            ld   a,(ff00+AE)
 ROM0:16F9 4F               ld   c,a
 ROM0:16FA F0 AF            ld   a,(ff00+AF)
 ROM0:16FC 57               ld   d,a            // Loop begins on next line, with D being the max number of cycles
 ROM0:16FD CD 7A 17         call 177A           // Establishes tile's graphics (BC is base coordinates)
 ROM0:1700 F0 44            ld   a,(ff00+44)
 ROM0:1702 FE 8E            cp   a,8E
 ROM0:1704 38 04            jr   c,170A
 ROM0:1706 0C               inc  c
 ROM0:1707 15               dec  d
 ROM0:1708 20 F3            jr   nz,16FD
 ROM0:170A F1               pop  af
 ROM0:170B E0 82            ld   (ff00+82),a
 ROM0:170D E0 70            ld   (ff00+70),a
 ROM0:170F F1               pop  af
 ROM0:1710 E0 83            ld   (ff00+83),a
 ROM0:1712 E0 4F            ld   (ff00+4F),a    // Restores WRAM and VRAM banks
 ROM0:1714 79               ld   a,c
 ROM0:1715 E0 AE            ld   (ff00+AE),a
 ROM0:1717 7A               ld   a,d
 ROM0:1718 E0 AF            ld   (ff00+AF),a
 ROM0:171A C9               ret                 // Establishes graphics of tiles starting at ($FFAD) coordinates downward, right version; A = remaining cycles at end of V-Blank period if any
 ROM0:171B F0 83            ld   a,(ff00+83)    // Left starts here
 ROM0:171D F5               push af
 ROM0:171E F0 82            ld   a,(ff00+82)
 ROM0:1720 F5               push af             // Saves WRAM and VRAM banks
 ROM0:1721 F0 AE            ld   a,(ff00+AE)
 ROM0:1723 4F               ld   c,a
 ROM0:1724 F0 AF            ld   a,(ff00+AF)
 ROM0:1726 57               ld   d,a
 ROM0:1727 F0 AD            ld   a,(ff00+AD)    // Loop begins here
 ROM0:1729 47               ld   b,a
 ROM0:172A CB 41            bit  0,c
 ROM0:172C 28 01            jr   z,172F
 ROM0:172E 05               dec  b
 ROM0:172F CD 7A 17         call 177A           // Establishes tile's graphics (BC is base coordinates)
 ROM0:1732 F0 44            ld   a,(ff00+44)
 ROM0:1734 FE 8E            cp   a,8E
 ROM0:1736 38 04            jr   c,173C         // Jump if result of below 142
 ROM0:1738 0C               inc  c
 ROM0:1739 15               dec  d
 ROM0:173A 20 EB            jr   nz,1727
 ROM0:173C F1               pop  af
 ROM0:173D E0 82            ld   (ff00+82),a
 ROM0:173F E0 70            ld   (ff00+70),a
 ROM0:1741 F1               pop  af
 ROM0:1742 E0 83            ld   (ff00+83),a
 ROM0:1744 E0 4F            ld   (ff00+4F),a    // Restores WRAM and VRAM banks
 ROM0:1746 79               ld   a,c
 ROM0:1747 E0 AE            ld   (ff00+AE),a
 ROM0:1749 7A               ld   a,d
 ROM0:174A E0 AF            ld   (ff00+AF),a
 ROM0:174C C9               ret                 // Establishes graphics of tiles starting at ($FFAD) coordinates downward, left version; A = remaining cycles at end of V-Blank period if any
 ROM0:174D F0 83            ld   a,(ff00+83)    // Up/Down starts here
 ROM0:174F F5               push af
 ROM0:1750 F0 82            ld   a,(ff00+82)
 ROM0:1752 F5               push af             // Saves WRAM and VRAM banks
 ROM0:1753 F0 AD            ld   a,(ff00+AD)
 ROM0:1755 47               ld   b,a
 ROM0:1756 F0 AE            ld   a,(ff00+AE)
 ROM0:1758 4F               ld   c,a
 ROM0:1759 F0 AF            ld   a,(ff00+AF)
 ROM0:175B 57               ld   d,a            // Loop begins on next line with D being the max number of cycles
 ROM0:175C CD 7A 17         call 177A           // Establishes tile's graphics (BC is base coordinates)
 ROM0:175F F0 44            ld   a,(ff00+44)
 ROM0:1761 FE 8E            cp   a,8E
 ROM0:1763 38 04            jr   c,1769
 ROM0:1765 04               inc  b
 ROM0:1766 15               dec  d
 ROM0:1767 20 F3            jr   nz,175C
 ROM0:1769 F1               pop  af
 ROM0:176A E0 82            ld   (ff00+82),a
 ROM0:176C E0 70            ld   (ff00+70),a
 ROM0:176E F1               pop  af
 ROM0:176F E0 83            ld   (ff00+83),a
 ROM0:1771 E0 4F            ld   (ff00+4F),a    // Restores WRAM and VRAM banks
 ROM0:1773 78               ld   a,b
 ROM0:1774 E0 AD            ld   (ff00+AD),a
 ROM0:1776 7A               ld   a,d
 ROM0:1777 E0 AF            ld   (ff00+AF),a
 ROM0:1779 C9               ret                 // Establishes graphics of tiles starting at ($FFAD) coordinates to right; A = remaining cycles at end of V-Blank period if any
 ROM0:177A D5               push de
 ROM0:177B CD F8 15         call 15F8           // HL = $D000 + B + C * 64 (to clarify, BC is only read)
 ROM0:177E 3E 01            ld   a,01
 ROM0:1780 E0 82            ld   (ff00+82),a
 ROM0:1782 E0 70            ld   (ff00+70),a
 ROM0:1784 56               ld   d,(hl)         // D = Terrain/Transport/End Turn tile info
 ROM0:1785 3E 02            ld   a,02
 ROM0:1787 E0 82            ld   (ff00+82),a
 ROM0:1789 E0 70            ld   (ff00+70),a
 ROM0:178B 5E               ld   e,(hl)         // E = Unit/Valid Movement tile info
 ROM0:178C CB 7B            bit  7,e            // Valid movement?
 ROM0:178E 20 20            jr   nz,17B0
 ROM0:1790 7A               ld   a,d            // A = Terrain/Transport/End Turn tile info
 ROM0:1791 E6 C0            and  a,C0           // Transport/End Turn
 ROM0:1793 20 0E            jr   nz,17A3
 ROM0:1795 7B               ld   a,e            // A = Unit tile info
 ROM0:1796 A7               and  a
 ROM0:1797 20 03            jr   nz,179C
 ROM0:1799 7A               ld   a,d
 ROM0:179A 18 02            jr   179E
 ROM0:179C C6 34            add  a,34           // A = Unit Type #, Terrain Type # if tile isn't occupied
 ROM0:179E CD D5 17         call 17D5           // Establishes tile's unit/terrain graphics (A is unit/terrain, BC is base coordinates)
 ROM0:17A1 D1               pop  de
 ROM0:17A2 C9               ret  
 ROM0:17A3 7B               ld   a,e
 ROM0:17A4 A7               and  a
 ROM0:17A5 20 05            jr   nz,17AC
 ROM0:17A7 7A               ld   a,d
 ROM0:17A8 E6 3F            and  a,3F
 ROM0:17AA 18 12            jr   17BE
 ROM0:17AC C6 34            add  a,34
 ROM0:17AE 18 0E            jr   17BE           // A = Unit Type #, Terrain Type # if tile isn't occupied
 ROM0:17B0 7B               ld   a,e            // Valid movement starts here
 ROM0:17B1 E6 7F            and  a,7F
 ROM0:17B3 20 05            jr   nz,17BA
 ROM0:17B5 7A               ld   a,d
 ROM0:17B6 E6 3F            and  a,3F
 ROM0:17B8 18 02            jr   17BC
 ROM0:17BA C6 34            add  a,34           // A = Unit Type #, Terrain Type # if tile isn't occupied
 ROM0:17BC 16 00            ld   d,00
 ROM0:17BE CD 3D 18         call 183D           // Establishes tile's unit/terrain graphics except for bottom right portion which is readied with HL (A is unit/terrain, BC is base coordinates)
 ROM0:17C1 AF               xor  a
 ROM0:17C2 E0 4F            ld   (ff00+4F),a
 ROM0:17C4 7A               ld   a,d
 ROM0:17C5 07               rlca 
 ROM0:17C6 07               rlca 
 ROM0:17C7 E6 03            and  a,03           // Transport/End Turn info
 ROM0:17C9 C6 B4            add  a,B4           // Movement, Transport, End Turn, End/Transport
 ROM0:17CB 77               ld   (hl),a
 ROM0:17CC 3E 01            ld   a,01
 ROM0:17CE E0 4F            ld   (ff00+4F),a
 ROM0:17D0 3E 00            ld   a,00
 ROM0:17D2 77               ld   (hl),a
 ROM0:17D3 D1               pop  de
 ROM0:17D4 C9               ret                 // Establishes tile's graphics (BC is base coordinates)
 ROM0:17D5 C5               push bc
 ROM0:17D6 D5               push de
 ROM0:17D7 5F               ld   e,a
 ROM0:17D8 CD DD 15         call 15DD           // HL = $9800 + C%16 * 64 + B%16 * 2 + C%2
 ROM0:17DB E5               push hl
 ROM0:17DC 26 00            ld   h,00
 ROM0:17DE 6B               ld   l,e
 ROM0:17DF 29               add  hl,hl
 ROM0:17E0 29               add  hl,hl
 ROM0:17E1 29               add  hl,hl          // HL = A * 8
 ROM0:17E2 11 6C 1C         ld   de,1C6C
 ROM0:17E5 19               add  hl,de          // HL points to portion for terrain/unit marked by A
 ROM0:17E6 44               ld   b,h
 ROM0:17E7 4D               ld   c,l            // BC points to portion for terrain/unit marked by A
 ROM0:17E8 E1               pop  hl             // HL = $9800 + C%16 * 64 + B%16 * 2 + C%2
 ROM0:17E9 AF               xor  a
 ROM0:17EA E0 4F            ld   (ff00+4F),a    // VRA0 ($9800 onwards would have tile placements)
 ROM0:17EC 0A               ld   a,(bc)         // Graphics portion
 ROM0:17ED 03               inc  bc
 ROM0:17EE 77               ld   (hl),a
 ROM0:17EF 3E 01            ld   a,01
 ROM0:17F1 E0 4F            ld   (ff00+4F),a    // VRA1 ($9800 onwards would have the colors, Duke! The colors!)
 ROM0:17F3 0A               ld   a,(bc)         // Color palette
 ROM0:17F4 03               inc  bc
 ROM0:17F5 77               ld   (hl),a
 ROM0:17F6 E5               push hl
 ROM0:17F7 7D               ld   a,l
 ROM0:17F8 E6 E0            and  a,E0
 ROM0:17FA 57               ld   d,a
 ROM0:17FB 7D               ld   a,l
 ROM0:17FC 3C               inc  a
 ROM0:17FD E6 1F            and  a,1F
 ROM0:17FF B2               or   d
 ROM0:1800 6F               ld   l,a
 ROM0:1801 AF               xor  a
 ROM0:1802 E0 4F            ld   (ff00+4F),a
 ROM0:1804 0A               ld   a,(bc)
 ROM0:1805 03               inc  bc
 ROM0:1806 77               ld   (hl),a
 ROM0:1807 3E 01            ld   a,01
 ROM0:1809 E0 4F            ld   (ff00+4F),a
 ROM0:180B 0A               ld   a,(bc)
 ROM0:180C 03               inc  bc
 ROM0:180D 77               ld   (hl),a
 ROM0:180E E1               pop  hl             // HL = $9800 + C%16 * 64 + B%16 * 2 + C%2
 ROM0:180F 11 20 00         ld   de,0020
 ROM0:1812 19               add  hl,de          // HL = $9800 + C%16 * 64 + B%16 * 2 + C%2 + 32
 ROM0:1813 7C               ld   a,h
 ROM0:1814 E6 9B            and  a,9B
 ROM0:1816 67               ld   h,a
 ROM0:1817 AF               xor  a
 ROM0:1818 E0 4F            ld   (ff00+4F),a
 ROM0:181A 0A               ld   a,(bc)
 ROM0:181B 03               inc  bc
 ROM0:181C 77               ld   (hl),a
 ROM0:181D 3E 01            ld   a,01
 ROM0:181F E0 4F            ld   (ff00+4F),a
 ROM0:1821 0A               ld   a,(bc)
 ROM0:1822 03               inc  bc
 ROM0:1823 77               ld   (hl),a
 ROM0:1824 7D               ld   a,l
 ROM0:1825 E6 E0            and  a,E0
 ROM0:1827 57               ld   d,a
 ROM0:1828 7D               ld   a,l
 ROM0:1829 3C               inc  a
 ROM0:182A E6 1F            and  a,1F
 ROM0:182C B2               or   d
 ROM0:182D 6F               ld   l,a
 ROM0:182E AF               xor  a
 ROM0:182F E0 4F            ld   (ff00+4F),a
 ROM0:1831 0A               ld   a,(bc)
 ROM0:1832 03               inc  bc
 ROM0:1833 77               ld   (hl),a
 ROM0:1834 3E 01            ld   a,01
 ROM0:1836 E0 4F            ld   (ff00+4F),a
 ROM0:1838 0A               ld   a,(bc)
 ROM0:1839 77               ld   (hl),a
 ROM0:183A D1               pop  de
 ROM0:183B C1               pop  bc
 ROM0:183C C9               ret                 // Establishes tile's unit/terrain graphics (A is unit/terrain, BC is base coordinates)
 ROM0:183D C5               push bc
 ROM0:183E D5               push de
 ROM0:183F 5F               ld   e,a
 ROM0:1840 CD DD 15         call 15DD           // HL = $9800 + C%16 * 64 + B%16 * 2 + C%2
 ROM0:1843 E5               push hl
 ROM0:1844 26 00            ld   h,00
 ROM0:1846 6B               ld   l,e
 ROM0:1847 29               add  hl,hl
 ROM0:1848 29               add  hl,hl
 ROM0:1849 29               add  hl,hl          // HL = A * 8
 ROM0:184A 11 6C 1C         ld   de,1C6C
 ROM0:184D 19               add  hl,de          // HL points to portion for terrain/unit marked by A
 ROM0:184E 44               ld   b,h
 ROM0:184F 4D               ld   c,l            // BC points to portion for terrain/unit marked by A
 ROM0:1850 E1               pop  hl             // HL = $9800 + C%16 * 64 + B%16 * 2 + C%2
 ROM0:1851 AF               xor  a
 ROM0:1852 E0 4F            ld   (ff00+4F),a    // Tile placements
 ROM0:1854 0A               ld   a,(bc)
 ROM0:1855 03               inc  bc
 ROM0:1856 77               ld   (hl),a
 ROM0:1857 3E 01            ld   a,01
 ROM0:1859 E0 4F            ld   (ff00+4F),a    // "...I'm color-blind, kid...."
 ROM0:185B 0A               ld   a,(bc)
 ROM0:185C 03               inc  bc
 ROM0:185D 77               ld   (hl),a
 ROM0:185E E5               push hl
 ROM0:185F 7D               ld   a,l
 ROM0:1860 E6 E0            and  a,E0
 ROM0:1862 57               ld   d,a
 ROM0:1863 7D               ld   a,l
 ROM0:1864 3C               inc  a
 ROM0:1865 E6 1F            and  a,1F
 ROM0:1867 B2               or   d
 ROM0:1868 6F               ld   l,a
 ROM0:1869 AF               xor  a
 ROM0:186A E0 4F            ld   (ff00+4F),a
 ROM0:186C 0A               ld   a,(bc)
 ROM0:186D 03               inc  bc
 ROM0:186E 77               ld   (hl),a
 ROM0:186F 3E 01            ld   a,01
 ROM0:1871 E0 4F            ld   (ff00+4F),a
 ROM0:1873 0A               ld   a,(bc)
 ROM0:1874 03               inc  bc
 ROM0:1875 77               ld   (hl),a
 ROM0:1876 E1               pop  hl
 ROM0:1877 11 20 00         ld   de,0020
 ROM0:187A 19               add  hl,de          // Tile's second row starts here
 ROM0:187B 7C               ld   a,h
 ROM0:187C E6 9B            and  a,9B
 ROM0:187E 67               ld   h,a
 ROM0:187F AF               xor  a
 ROM0:1880 E0 4F            ld   (ff00+4F),a
 ROM0:1882 0A               ld   a,(bc)
 ROM0:1883 03               inc  bc
 ROM0:1884 77               ld   (hl),a
 ROM0:1885 3E 01            ld   a,01
 ROM0:1887 E0 4F            ld   (ff00+4F),a
 ROM0:1889 0A               ld   a,(bc)
 ROM0:188A 03               inc  bc
 ROM0:188B 77               ld   (hl),a
 ROM0:188C 7D               ld   a,l
 ROM0:188D E6 E0            and  a,E0
 ROM0:188F 57               ld   d,a
 ROM0:1890 7D               ld   a,l
 ROM0:1891 3C               inc  a
 ROM0:1892 E6 1F            and  a,1F
 ROM0:1894 B2               or   d
 ROM0:1895 6F               ld   l,a
 ROM0:1896 D1               pop  de
 ROM0:1897 C1               pop  bc
 ROM0:1898 C9               ret                 // Establishes tile's unit/terrain graphics except for bottom right portion which is readied with HL (A is unit/terrain, BC is base coordinates)
 ROM0:1899 F5               push af
 ROM0:189A E5               push hl
 ROM0:189B 21 41 FF         ld   hl,FF41
 ROM0:189E F0 40            ld   a,(ff00+40)
 ROM0:18A0 CB E7            set  4,a
 ROM0:18A2 CB 4E            bit  1,(hl)
 ROM0:18A4 20 FC            jr   nz,18A2        // Searching OAM-RAM Mode cooldown
 ROM0:18A6 E0 40            ld   (ff00+40),a
 ROM0:18A8 E1               pop  hl
 ROM0:18A9 F1               pop  af
 ROM0:18AA D9               reti                // LCD Stat Interrupt procedure: Sets BG & Window Tile Data portion to ($8000~$8FFF)

 ROM0:18AB 00 01 02 03 04 05 06 07 08 09 0A 0B
 ROM0:18B7 01 02 03 04 05 06 07 08 09 0A 0B
 ROM0:18C2 02 03 04 05 06 07 09 0A 0B
 ROM0:18CB 0C               inc  c
 ROM0:18CC 0D               dec  c
 ROM0:18CD 0E 0F            ld   c,0F
 ROM0:18CF 10 11            <corrupted stop>
 ROM0:18D1 12               ld   (de),a
 ROM0:18D2 13               inc  de
 ROM0:18D3 14               inc  d
 ROM0:18D4 15               dec  d
 ROM0:18D5 16 15            ld   d,15
 ROM0:18D7 15               dec  d
 ROM0:18D8 15               dec  d
 ROM0:18D9 15               dec  d
 ROM0:18DA 15               dec  d
 ROM0:18DB 15               dec  d
 ROM0:18DC 15               dec  d

 ROM0:18DD 04
 ROM0:18DE 03 03 00 60 03 F5 00 40 F5 03 00 20 F5 F5 00 00

 ROM0:18EE 04
 ROM0:18EF 03 03 01 60 03 F5 01 40 F5 03 01 20 F5 F5 01 00

 ROM0:18FF 08 
 ROM0:1900 FC 05 03 21 FC F3 03 01 05 FC 02 41 F3 FC 02 01
 ROM0:1910 03 03 01 61 03 F5 01 41 F5 03 01 21 F5 F5 01 01

 ROM0:1920 08
 ROM0:1921 FC 04 03 21 FC F4 03 01 04 FC 02 41 F4 FC 02 01
 ROM0:1931 03 03 01 61 03 F5 01 41 F5 03 01 21 F5 F5 01 01

 ROM0:1941 0C
 ROM0:1942 F0 F8 0F 60 F0 00 0E 60 F8 F0 0D 60 F8 F8 0C 60
 ROM0:1952 F8 00 0B 60 F8 08 0A 60 00 F0 09 60 00 F8 08 60
 ROM0:1962 00 00 07 60 00 08 06 60 08 F8 05 60 08 00 04 60

 ROM0:1972 08
 ROM0:1973 04 04 17 02 04 FC 16 02 04 F4 15 02 FC 04 14 02
 ROM0:1983 FC F4 13 02 F4 04 12 02 F4 FC 11 02 F4 F4 10 02

 ROM0:1993 04
 ROM0:1994 03 03 00 61 03 F5 00 41 F5 03 00 21 F5 F5 00 01

 ROM0:19A4 04
 ROM0:19A5 03 03 00 62 03 F5 00 42 F5 03 00 22 F5 F5 00 02

 ROM0:19B5 0C
 ROM0:19B6 1F 1B 1A 60 D9 1B 1A 20 1F DD 1A 40 E1 23 18 20
 ROM0:19C6 17 23 18 60 17 D5 18 40 D9 23 19 20 1F 23 19 60
 ROM0:19D6 1F D5 19 40 D9 DD 1A 00 E1 D5 18 00 D9 D5 19 00

 ROM0:19E6 0C
 ROM0:19E7 1F 1B 1A 62 D9 1B 1A 22 1F DD 1A 42 E1 23 18 22
 ROM0:19F7 17 23 18 62 17 D5 18 42 D9 23 19 22 1F 23 19 62
 ROM0:1A07 1F D5 19 42 D9 DD 1A 02 E1 D5 18 02 D9 D5 19 02

 ROM0:1A17 08
 ROM0:1A18 13 0B 00 60 13 ED 00 40 03 13 00 60 F5 13 00 20
 ROM0:1A28 03 E5 00 40 F5 E5 00 00 E5 0B 00 20 E5 ED 00 00

 ROM0:1A38 08
 ROM0:1A39 13 0B 01 60 13 ED 01 40 03 13 01 60 F5 13 01 20
 ROM0:1A49 03 E5 01 40 F5 E5 01 00 E5 0B 01 20 E5 ED 01 00

 ROM0:1A59 DD 18 0F EE 18 0F 00 00              // Regular Cursor
 ROM0:1A61 FF 18 0F 20 19 0F 00 00              // Arrowed Cursor
 ROM0:1A69 41 19 0A 00 00                       // Missile Aiming Cursor Valid
 ROM0:1A6E 72 19 01 00 00                       // Missile Aiming Cursor Invalid (adds 2 to palette to ensure it's colored Red)
 ROM0:1A73 DD 18 FF 00 00                       // Non-blinking Cursor (Palette +0)
 ROM0:1A78 93 19 FF 00 00                       // Non-blinking Cursor (Palette +1)
 ROM0:1A7D A4 19 FF 00 00                       // Non-blinking Cursor (Palette +2)
 ROM0:1A82 B5 19 0F E6 19 0F 00 00              // Big Cursor
 ROM0:1A8A 17 1A 0F 38 1A 0F 00 00              // Surrounding Area Cursor

 ROM0:1A92 59 1A               ld   a,(de)
 ROM0:1A94 61 1A               ld   a,(de)
 ROM0:1A96 69 1A               ld   a,(de)
 ROM0:1A98 6E 1A               ld   a,(de)
 ROM0:1A9A 73 1A               ld   a,(de)
 ROM0:1A9C 78 1A               ld   a,(de)
 ROM0:1A9E 7D 1A               ld   a,(de)
 ROM0:1AA0 82 1A               ld   a,(de)
 ROM0:1AA2 8A 1A

 ROM0:1AA4 FC 00 84 78 BC 40 A0 40 A0 40 E0 00 00 00 00 00
 ROM0:1AB4 FC 00 FC 78 FC 40 E0 40 E0 40 E0 00 00 00 00 00
 ROM0:1AC4 00 00 FF 00 81 7E 42 3C 24 18 18 00 00 00 00 00
 ROM0:1AD4 60 00 50 20 48 30 44 38 44 38 48 30 50 20 60 00
 ROM0:1AE4 00 00 03 00 02 01 02 01 06 01 18 07 66 19 9A 61
 ROM0:1AF4 00 00 80 00 80 00 80 00 E0 00 18 E0 E6 18 99 06
 ROM0:1B04 01 00 02 01 02 01 05 02 05 02 0A 04 0A 04 7B 04
 ROM0:1B14 62 81 81 00 80 00 04 00 0E 04 1C 08 38 10 90 00
 ROM0:1B24 86 01 01 00 41 00 E0 40 70 20 38 10 11 00 02 01
 ROM0:1B34 80 00 40 80 40 80 A0 40 A0 40 50 20 DE 20 02 FC
 ROM0:1B44 40 3F 7B 04 0A 04 05 02 05 02 02 01 02 01 01 00
 ROM0:1B54 40 80 88 00 1C 08 0E 04 07 02 82 00 80 00 61 80
 ROM0:1B64 09 00 1C 08 38 10 70 20 20 00 01 00 81 00 46 81
 ROM0:1B74 DE 20 50 20 50 20 A0 40 A0 40 40 80 40 80 80 00
 ROM0:1B84 99 60 67 18 18 07 07 00 01 00 01 00 01 00 00 00
 ROM0:1B94 59 86 66 98 18 E0 60 80 40 80 40 80 C0 00 00 00
 ROM0:1BA4 00 00 00 00 00 00 00 00 01 00 02 01 05 02 0A 04
 ROM0:1BB4 00 00 1C 00 14 08 76 08 81 7E 76 89 89 00 00 00
 ROM0:1BC4 00 00 00 00 00 00 00 00 80 00 40 80 A0 40 50 20
 ROM0:1BD4 0A 04 14 08 74 08 42 3C 74 08 14 08 14 08 0A 04
 ROM0:1BE4 50 20 28 10 28 10 2E 10 42 3C 2E 10 28 10 50 20
 ROM0:1BF4 0A 04 05 02 02 01 01 00 00 00 00 00 00 00 00 00
 ROM0:1C04 00 00 91 00 6E 91 81 7E 6E 10 28 10 38 00 00 00
 ROM0:1C14 50 20 A0 40 40 80 80 00 00 00 00 00 00 00 00 00
 ROM0:1C24 A0 40 A0 40 A0 40 A0 40 A0 40 A0 40 A0 40 E0 00
 ROM0:1C34 FF 00 80 7F BF 40 A0 40 A0 40 A0 40 A0 40 A0 40
 ROM0:1C44 FF 00 01 FE FF 00 00 00 00 00 00 00 00 00 00 00

 ROM0:1C54 CE 39 00 00 FF 7F 0B 5B              // White/Teal
 ROM0:1C5C CE 39 00 00 E8 7E E3 4C              // Aqua/Dark Blue
 ROM0:1C64 CE 39 00 00 DF 19 73 04              // Orange/Dark Red

 ROM0:1C6C 00 01 00 01 00 01 00 01              // Blank
 ROM0:1C74 01 05 02 05 03 05 04 05              // HQ (Red)
 ROM0:1C7C 05 05 06 05 07 05 08 05              // City (Red)
 ROM0:1C84 09 05 0A 05 0B 05 0C 05              // Ruined City (Red)
 ROM0:1C8C 0D 05 0E 05 0F 05 10 05              // Factory (Red)
 ROM0:1C94 11 05 12 05 13 05 14 05              // Ruined Factory (Red)
 ROM0:1C9C 15 05 16 05 17 05 18 05              // Airport (Red)
 ROM0:1CA4 19 05 1A 05 1B 05 1C 05              // Ruined Airport (Red)
 ROM0:1CAC 1D 05 1E 05 1F 05 20 05              // Simple Airport (Red)
 ROM0:1CB4 21 05 22 05 23 05 24 05              // Harbor (Red)
 ROM0:1CBC 25 05 26 05 27 05 28 05              // Ruined Harbor (Red)
 ROM0:1CC4 29 05 2A 05 2B 05 2C 05              // Communication Tower
 ROM0:1CCC 01 03 02 03 03 03 04 03              // HQ (White)
 ROM0:1CD4 05 03 06 03 07 03 08 03              // City (White)
 ROM0:1CDC 09 03 0A 03 0B 03 0C 03
 ROM0:1CE4 0D 03 0E 03 0F 03 10 03
 ROM0:1CEC 11 03 12 03 13 03 14 03
 ROM0:1CF4 15 03 16 03 17 03 18 03
 ROM0:1CFC 19 03 1A 03 1B 03 1C 03
 ROM0:1D04 1D 03 1E 03 1F 03 20 03
 ROM0:1D0C 21 03 22 03 23 03 24 03
 ROM0:1D14 25 03 26 03 27 03 28 03
 ROM0:1D1C 29 03 2A 03 2B 03 2C 03
 ROM0:1D24 05 04 06 04 07 04 08 04              // City (Neutral)
 ROM0:1D2C 09 04 0A 04 0B 04 0C 04              // Ruined City (Neutral)
 ROM0:1D34 0D 04 0E 04 0F 04 10 04              // Factory (Neutral)
 ROM0:1D3C 11 04 12 04 13 04 14 04              // Ruined Factory (Neutral)
 ROM0:1D44 15 04 16 04 17 04 18 04              // Airport (Neutral)
 ROM0:1D4C 19 04 1A 04 1B 04 1C 04              // Ruined Airport (Neutral)
 ROM0:1D54 21 04 22 04 23 04 24 04              // Harbor (Neutral)
 ROM0:1D5C 25 04 26 04 27 04 28 04              // Ruined Harbor (Neutral)
 ROM0:1D64 29 04 2A 04 2B 04 2C 04              // Communication Tower (Neutral)
 ROM0:1D6C 2D 04 2E 04 2F 04 30 04              // Plains
 ROM0:1D74 31 03 32 03 33 03 34 03              // Road
 ROM0:1D7C 35 01 36 01 37 01 38 01              // Bridge
 ROM0:1D84 39 01 3A 01 3B 01 3C 01              // Bridge
 ROM0:1D8C 3D 02 3E 02 3F 02 40 02              // Mountain
 ROM0:1D94 41 04 42 04 43 04 44 04              // Forest
 ROM0:1D9C 45 02 46 02 47 02 48 02              // Wasteland
 ROM0:1DA4 49 02 4A 02 4B 02 4C 02              // Desert
 ROM0:1DAC 4D 06 4E 06 4F 06 50 06              // River
 ROM0:1DB4 51 06 52 06 53 06 54 06              // Sea
 ROM0:1DBC 55 06 56 06 57 06 58 06              // Beach
 ROM0:1DC4 51 06 59 06 53 06 5A 06
 ROM0:1DCC 5B 06 5C 06 53 06 5A 06
 ROM0:1DD4 5E 06 5C 06 53 06 5A 06
 ROM0:1DDC 5E 06 5F 06 53 06 54 06
 ROM0:1DE4 5B 06 5F 06 53 06 54 06
 ROM0:1DEC 5D 06 52 06 53 06 54 06
 ROM0:1DF4 5D 06 59 06 53 06 5A 06
 ROM0:1DFC 00 01 00 01 00 01 00 01              // End of terrain
 ROM0:1E04 00 01 00 01 00 01 00 01
 ROM0:1E0C 00 09 00 09 00 09 00 09              // Beginning of Units
 ROM0:1E14 C8 0E C9 0E D8 0E D9 0E              // DEL
 ROM0:1E1C 00 0D 01 0D 10 0D 11 0D              // Grunt
 ROM0:1E24 01 2B 00 2B 11 2B 10 2B
 ROM0:1E2C 02 0D 03 0D 12 0D 13 0D              // Bazooka
 ROM0:1E34 03 2B 02 2B 13 2B 12 2B
 ROM0:1E3C 04 0D 05 0D 14 0D 15 0D              // Commando
 ROM0:1E44 05 2B 04 2B 15 2B 14 2B
 ROM0:1E4C 06 0D 07 0D 16 0D 17 0D              // Work Car
 ROM0:1E54 07 2B 06 2B 17 2B 16 2B
 ROM0:1E5C 08 0D 09 0D 18 0D 19 0D              // Supply Truck
 ROM0:1E64 09 2B 08 2B 19 2B 18 2B
 ROM0:1E6C 0A 0D 0B 0D 1A 0D 1B 0D              // Supply Truck+
 ROM0:1E74 0B 2B 0A 2B 1B 2B 1A 2B
 ROM0:1E7C 0C 0D 0D 0D 1C 0D 1D 0D              // Convoy
 ROM0:1E84 0D 2B 0C 2B 1D 2B 1C 2B
 ROM0:1E8C 0E 0D 0F 0D 1E 0D 1F 0D              // Convoy+
 ROM0:1E94 0F 2B 0E 2B 1F 2B 1E 2B
 ROM0:1E9C 20 0D 21 0D 30 0D 31 0D              // Buggy
 ROM0:1EA4 21 2B 20 2B 31 2B 30 2B
 ROM0:1EAC 22 0D 23 0D 32 0D 33 0D              // Buggy+
 ROM0:1EB4 23 2B 22 2B 33 2B 32 2B
 ROM0:1EBC 24 0D 25 0D 34 0D 35 0D              // Humvee
 ROM0:1EC4 25 2B 24 2B 35 2B 34 2B
 ROM0:1ECC 26 0D 27 0D 36 0D 37 0D              // Humvee+
 ROM0:1ED4 27 2B 26 2B 37 2B 36 2B
 ROM0:1EDC 28 0D 29 0D 38 0D 39 0D              // APC
 ROM0:1EE4 29 2B 28 2B 39 2B 38 2B
 ROM0:1EEC 2A 0D 2B 0D 3A 0D 3B 0D              // APC+
 ROM0:1EF4 2B 2B 2A 2B 3B 2B 3A 2B
 ROM0:1EFC 2C 0D 2D 0D 3C 0D 3D 0D              // Rocket Launcher
 ROM0:1F04 2D 2B 2C 2B 3D 2B 3C 2B
 ROM0:1F0C 2E 0D 2F 0D 3E 0D 3F 0D              // Rocket Launcher+
 ROM0:1F14 2F 2B 2E 2B 3F 2B 3E 2B
 ROM0:1F1C 40 0D 41 0D 50 0D 51 0D              // Anti-Air Tank
 ROM0:1F24 41 2B 40 2B 51 2B 50 2B
 ROM0:1F2C 42 0D 43 0D 52 0D 53 0D              // Mercenary Anti-Air Tank
 ROM0:1F34 43 2B 42 2B 53 2B 52 2B
 ROM0:1F3C 44 0D 45 0D 54 0D 55 0D              // Anti-Air Missile Launcher
 ROM0:1F44 45 2B 44 2B 55 2B 54 2B
 ROM0:1F4C 46 0D 47 0D 56 0D 57 0D              // Anti-Air Missile Launcher+
 ROM0:1F54 47 2B 46 2B 57 2B 56 2B
 ROM0:1F5C 48 0D 49 0D 58 0D 59 0D              // Artillery
 ROM0:1F64 49 2B 48 2B 59 2B 58 2B
 ROM0:1F6C 4A 0D 4B 0D 5A 0D 5B 0D              // Artillery+
 ROM0:1F74 4B 2B 4A 2B 5B 2B 5A 2B
 ROM0:1F7C 4C 0D 4D 0D 5C 0D 5D 0D              // IFV
 ROM0:1F84 4D 2B 4C 2B 5D 2B 5C 2B
 ROM0:1F8C 4E 0D 4F 0D 5E 0D 5F 0D              // IFV+
 ROM0:1F94 4F 2B 4E 2B 5F 2B 5E 2B
 ROM0:1F9C 60 0D 61 0D 70 0D 71 0D              // Hunter Tank
 ROM0:1FA4 61 2B 60 2B 71 2B 70 2B
 ROM0:1FAC 62 0D 63 0D 72 0D 73 0D              // Hunter Tank+
 ROM0:1FB4 63 2B 62 2B 73 2B 72 2B
 ROM0:1FBC 64 0D 65 0D 74 0D 75 0D              // Main Battle Tank
 ROM0:1FC4 65 2B 64 2B 75 2B 74 2B
 ROM0:1FCC 66 0D 67 0D 76 0D 77 0D              // Mercenary Tank
 ROM0:1FD4 67 2B 66 2B 77 2B 76 2B
 ROM0:1FDC 68 0D 69 0D 78 0D 79 0D              // Fighter
 ROM0:1FE4 69 2B 68 2B 79 2B 78 2B
 ROM0:1FEC 6A 0D 6B 0D 7A 0D 7B 0D              // Lite Fighter
 ROM0:1FF4 6B 2B 6A 2B 7B 2B 7A 2B
 ROM0:1FFC 6C 0D 6D 0D 7C 0D 7D 0D              // Interceptor
 ROM0:2004 6D 2B 6C 2B 7D 2B 7C 2B
 ROM0:200C 6E 0D 6F 0D 7E 0D 7F 0D              // Attacker
 ROM0:2014 6F 2B 6E 2B 7F 2B 7E 2B
 ROM0:201C 80 0D 81 0D 90 0D 91 0D              // Lite Attacker
 ROM0:2024 81 2B 80 2B 91 2B 90 2B
 ROM0:202C 82 0D 83 0D 92 0D 93 0D              // Lite Bomber
 ROM0:2034 83 2B 82 2B 93 2B 92 2B
 ROM0:203C 84 0D 85 0D 94 0D 95 0D              // Bomber
 ROM0:2044 85 2B 84 2B 95 2B 94 2B
 ROM0:204C 86 0D 87 0D 96 0D 97 0D              // Mercenary Bomber
 ROM0:2054 87 2B 86 2B 97 2B 96 2B
 ROM0:205C 88 0D 89 0D 98 0D 99 0D              // Transport Plane
 ROM0:2064 89 2B 88 2B 99 2B 98 2B
 ROM0:206C 8A 0D 8B 0D 9A 0D 9B 0D              // Supply Plane
 ROM0:2074 8B 2B 8A 2B 9B 2B 9A 2B
 ROM0:207C 8C 0D 8D 0D 9C 0D 9D 0D              // Gunship
 ROM0:2084 8D 2B 8C 2B 9D 2B 9C 2B
 ROM0:208C 8E 0D 8F 0D 9E 0D 9F 0D              // Gunship+
 ROM0:2094 8F 2B 8E 2B 9F 2B 9E 2B
 ROM0:209C A0 0D A1 0D B0 0D B1 0D              // Ship Buster
 ROM0:20A4 A1 2B A0 2B B1 2B B0 2B
 ROM0:20AC A2 0D A3 0D B2 0D B3 0D              // Transport Helicopter
 ROM0:20B4 A3 2B A2 2B B3 2B B2 2B
 ROM0:20BC A4 0D A5 0D B4 0D B5 0D              // Transport Helicopter+
 ROM0:20C4 A5 2B A4 2B B5 2B B4 2B
 ROM0:20CC A6 0D A7 0D B6 0D B7 0D              // Aegis Warship
 ROM0:20D4 A7 2B A6 2B B7 2B B6 2B
 ROM0:20DC A8 0D A9 0D B8 0D B9 0D              // Mercenary Missile Frigate
 ROM0:20E4 A9 2B A8 2B B9 2B B8 2B
 ROM0:20EC AA 0D AB 0D BA 0D BB 0D              // Aircraft Carrier L
 ROM0:20F4 AB 2B AA 2B BB 2B BA 2B
 ROM0:20FC AC 0D AD 0D BC 0D BD 0D              // Aircraft Carrier S
 ROM0:2104 AD 2B AC 2B BD 2B BC 2B
 ROM0:210C AE 0D AF 0D BE 0D BF 0D              // Lander
 ROM0:2114 AF 2B AE 2B BF 2B BE 2B
 ROM0:211C C0 0D C1 0D D0 0D D1 0D              // Tanker
 ROM0:2124 C1 2B C0 2B D1 2B D0 2B
 ROM0:212C C2 0D C3 0D D2 0D D3 0D              // Submarine
 ROM0:2134 C3 2B C2 2B D3 2B D2 2B
 ROM0:213C C4 0D C5 0D D4 0D D5 0D              // Submarine+
 ROM0:2144 C5 2B C4 2B D5 2B D4 2B
 ROM0:214C C6 0D C7 0D D6 0D D7 0D              // (Kanji)
 ROM0:2154 C6 0B C7 0B D6 0B D7 0B
 ROM0:215C C8 0E C9 0E D8 0E D9 0E              // DEL

 ROM0:2164 AF               xor  a
 ROM0:2165 E0 B1            ld   (ff00+B1),a
 ROM0:2167 E0 B2            ld   (ff00+B2),a
 ROM0:2169 C9               ret                 // Empties $FFB1 and $FFB2
 ROM0:216A F0 B2            ld   a,(ff00+B2)
 ROM0:216C 3C               inc  a
 ROM0:216D E0 B2            ld   (ff00+B2),a
 ROM0:216F FE 1E            cp   a,1E
 ROM0:2171 38 0E            jr   c,2181         // Jumps if $FFB2 was less than 29
 ROM0:2173 FE 3C            cp   a,3C
 ROM0:2175 38 0E            jr   c,2185         // Jumps if $FFB2 was anywhere from 29 to 58
 ROM0:2177 FE 5A            cp   a,5A
 ROM0:2179 20 10            jr   nz,218B        // Jumps if $FFB2 was either anywhere from 59 to 88, or anywhere above 89
 ROM0:217B AF               xor  a
 ROM0:217C E0 B2            ld   (ff00+B2),a
 ROM0:217E C3 72 22         jp   2272           // End with $FFB2 blanked if it was originally 89
 ROM0:2181 06 00            ld   b,00
 ROM0:2183 18 0A            jr   218F
 ROM0:2185 06 05            ld   b,05
 ROM0:2187 D6 1E            sub  a,1E
 ROM0:2189 18 04            jr   218F
 ROM0:218B 06 0A            ld   b,0A
 ROM0:218D D6 3C            sub  a,3C
 ROM0:218F 21 AD 21         ld   hl,21AD
 ROM0:2192 85               add  l
 ROM0:2193 6F               ld   l,a
 ROM0:2194 7C               ld   a,h
 ROM0:2195 CE 00            adc  a,00
 ROM0:2197 67               ld   h,a
 ROM0:2198 7E               ld   a,(hl)
 ROM0:2199 A7               and  a
 ROM0:219A CA 72 22         jp   z,2272
 ROM0:219D 3D               dec  a
 ROM0:219E 80               add  b
 ROM0:219F 21 CB 21         ld   hl,21CB
 ROM0:21A2 87               add  a
 ROM0:21A3 85               add  l
 ROM0:21A4 6F               ld   l,a
 ROM0:21A5 7C               ld   a,h
 ROM0:21A6 CE 00            adc  a,00
 ROM0:21A8 67               ld   h,a
 ROM0:21A9 2A               ldi  a,(hl)
 ROM0:21AA 66               ld   h,(hl)
 ROM0:21AB 6F               ld   l,a
 ROM0:21AC E9               jp   hl

 ROM0:21AD 00 01 02 03 04 05               dec  b
 ROM0:21B3 00 00 00 00 00 00               nop  
 ROM0:21B9 00 00 00 00 00 00               nop  
 ROM0:21BF 00 00 00 00 00 00               nop  
 ROM0:21C5 00 00 00 00 00 00

 ROM0:21CB E9 21
 ROM0:21CE 01 22         ld   hl,2201
 ROM0:21CF 19 22               ldi  (hl),a
 ROM0:21D1 31 22
 ROM0:21D3 49 22

 ROM0:21D5 F1 21
 ROM0:21D7 09 22         ld   hl,2209
 ROM0:21D9 21 22
 ROM0:21DB 39 22               ldi  (hl),a
 ROM0:21DD 51 22

 ROM0:21DF F9 21
 ROM0:21E1 11 22         ld   hl,2211
 ROM0:21E3 29 22               ldi  (hl),a
 ROM0:21E5 41 22               ldi  (hl),a
 ROM0:21E7 59 22

 ROM0:21E9 11 F3 23         ld   de,23F3        // Bridge 1
 ROM0:21EC 21 50 93         ld   hl,9350
 ROM0:21EF 18 6E            jr   225F
 ROM0:21F1 11 33 24         ld   de,2433        // Bridge 2
 ROM0:21F4 21 50 93         ld   hl,9350
 ROM0:21F7 18 66            jr   225F
 ROM0:21F9 11 73 24         ld   de,2473        // Bridge 3
 ROM0:21FC 21 50 93         ld   hl,9350
 ROM0:21FF 18 5E            jr   225F
 ROM0:2201 11 B3 24         ld   de,24B3        // Bridge 1
 ROM0:2204 21 90 93         ld   hl,9390
 ROM0:2207 18 56            jr   225F
 ROM0:2209 11 F3 24         ld   de,24F3        // Bridge 2
 ROM0:220C 21 90 93         ld   hl,9390
 ROM0:220F 18 4E            jr   225F
 ROM0:2211 11 33 25         ld   de,2533        // Bridge 3
 ROM0:2214 21 90 93         ld   hl,9390
 ROM0:2217 18 46            jr   225F
 ROM0:2219 11 33 23         ld   de,2333        // River 1
 ROM0:221C 21 D0 94         ld   hl,94D0
 ROM0:221F 18 3E            jr   225F
 ROM0:2221 11 73 23         ld   de,2373        // River 2
 ROM0:2224 21 D0 94         ld   hl,94D0
 ROM0:2227 18 36            jr   225F
 ROM0:2229 11 B3 23         ld   de,23B3        // River 3
 ROM0:222C 21 D0 94         ld   hl,94D0
 ROM0:222F 18 2E            jr   225F
 ROM0:2231 11 73 25         ld   de,2573        // Beach 1
 ROM0:2234 21 50 95         ld   hl,9550
 ROM0:2237 18 26            jr   225F
 ROM0:2239 11 B3 25         ld   de,25B3        // Beach 2
 ROM0:223C 21 50 95         ld   hl,9550
 ROM0:223F 18 1E            jr   225F
 ROM0:2241 11 F3 25         ld   de,25F3        // Beach 3
 ROM0:2244 21 50 95         ld   hl,9550
 ROM0:2247 18 16            jr   225F
 ROM0:2249 11 73 22         ld   de,2273        // Sea 1
 ROM0:224C 21 10 95         ld   hl,9510
 ROM0:224F 18 0E            jr   225F
 ROM0:2251 11 B3 22         ld   de,22B3        // Sea 2
 ROM0:2254 21 10 95         ld   hl,9510
 ROM0:2257 18 06            jr   225F
 ROM0:2259 11 F3 22         ld   de,22F3        // Sea 3
 ROM0:225C 21 10 95         ld   hl,9510
 ROM0:225F F0 83            ld   a,(ff00+83)
 ROM0:2261 F5               push af
 ROM0:2262 AF               xor  a
 ROM0:2263 E0 4F            ld   (ff00+4F),a
 ROM0:2265 0E 40            ld   c,40
 ROM0:2267 1A               ld   a,(de)
 ROM0:2268 22               ldi  (hl),a
 ROM0:2269 13               inc  de
 ROM0:226A 0D               dec  c
 ROM0:226B 20 FA            jr   nz,2267
 ROM0:226D F1               pop  af
 ROM0:226E E0 83            ld   (ff00+83),a
 ROM0:2270 E0 4F            ld   (ff00+4F),a
 ROM0:2272 C9               ret  

 ROM0:2273 00 FF 7F 80 4E 80 31 80 7E 80 4D 80 33 80 49 80
 ROM0:2283 00 FF FC 01 3A 01 D4 01 EE 01 F6 01 30 01 EE 01
 ROM0:2293 7E 80 1D 80 63 80 6C 80 4F 80 30 80 7F 80 00 FF
 ROM0:22A3 76 01 A8 01 DE 01 EE 01 92 01 7E 01 D8 01 00 FF          // Sea 1

 ROM0:22B3 00 FF 1B 80 7E 80 49 80 77 80 7B 80 15 80 6E 80
 ROM0:22C3 00 FF FE 01 0C 01 F2 01 36 01 C6 01 B8 01 7E 01
 ROM0:22D3 77 80 0C 80 6F 80 77 80 2B 80 5C 80 3F 80 00 FF
 ROM0:22E3 92 01 CC 01 B2 01 7E 01 8C 01 72 01 FE 01 00 FF          // Sea 2

 ROM0:22F3 00 FF 6F 80 16 80 79 80 3F 80 52 80 4D 80 37 80
 ROM0:2303 00 FF 3E 01 D2 01 EC 01 9E 01 6C 01 F2 01 9E 01
 ROM0:2313 78 80 7F 80 33 80 4C 80 7F 80 19 80 66 80 00 FF
 ROM0:2323 6E 01 D6 01 38 01 FE 01 CC 01 B2 01 6E 01 00 FF          // Sea 3

 ROM0:2333 FF 00 A8 28 A2 22 A2 22 8A 0A 88 08 C2 42 C0 40
 ROM0:2343 FF 00 49 48 41 40 09 08 4B 4A 0B 0A 23 22 A1 A0
 ROM0:2353 C0 40 84 04 A4 24 A4 24 A2 22 80 00 A2 22 FF 00
 ROM0:2363 A5 A4 85 84 05 04 91 90 11 10 01 00 11 10 FF 00          // River 1

 ROM0:2373 FF 00 C4 44 84 04 84 04 80 00 80 00 A8 28 A2 22
 ROM0:2383 FF 00 A5 A4 85 84 01 00 81 80 01 00 09 08 41 40
 ROM0:2393 A2 22 8A 0A C8 48 C2 42 C0 40 84 04 84 04 FF 00
 ROM0:23A3 49 48 0B 0A 4B 4A 23 22 21 20 A5 A4 85 84 FF 00          // River 2

 ROM0:23B3 FF 00 8A 0A C8 48 C2 42 C0 40 80 00 84 04 84 04
 ROM0:23C3 FF 00 0B 0A 2B 2A 23 22 A1 A0 85 84 85 84 05 04
 ROM0:23D3 84 04 80 00 A0 20 A8 28 A2 22 8A 0A CA 4A FF 00
 ROM0:23E3 81 80 01 00 01 00 09 08 41 40 4B 4A 0B 0A FF 00          // River 3

 ROM0:23F3 FF 00 A8 78 A7 67 98 58 A0 25 88 0D 80 00 BF 00
 ROM0:2403 FF 00 09 1E E1 E6 19 1A 05 A4 01 B0 01 00 FD 00
 ROM0:2413 B8 00 A7 07 98 18 A5 20 8D 00 80 00 A2 7F FF 00
 ROM0:2423 1D 00 E5 E0 19 18 A5 04 B1 00 01 00 11 FE FF 00          // Bridge 1

 ROM0:2433 FF 00 C0 78 87 67 98 58 A0 25 80 0D 80 00 BF 00
 ROM0:2443 FF 00 05 1E E5 E6 19 1A 85 A4 01 B0 01 00 FD 00
 ROM0:2453 B8 00 A7 07 98 18 A5 20 8D 00 80 00 84 7F FF 00
 ROM0:2463 1D 00 E5 E0 19 18 A5 04 B1 00 01 00 85 FE FF 00          // Bridge 2

 ROM0:2473 FF 00 88 78 C7 67 D8 58 A0 25 80 0D 80 00 BF 00
 ROM0:2483 FF 00 0B 1E E3 E6 1B 1A 85 A4 81 B0 01 00 FD 00
 ROM0:2493 B8 00 A7 07 98 18 A5 20 8D 00 80 00 CA 7F FF 00
 ROM0:24A3 1D 00 E5 E0 19 18 A5 04 B1 00 01 00 0B FE FF 00          // Bridge 3

 ROM0:24B3 FF 00 A8 78 A7 67 98 58 A0 25 88 0D 80 00 BF 00
 ROM0:24C3 FF 00 09 1E E1 E6 19 1A 05 A4 01 B0 01 00 FD 00
 ROM0:24D3 B8 00 A7 07 98 18 A5 20 8D 00 80 00 A2 7F FF 00
 ROM0:24E3 1D 00 E5 E0 19 18 A5 04 B1 00 01 00 11 FE FF 00          // Bridge 1

 ROM0:24F3 FF 00 C0 78 87 67 98 58 A0 25 80 0D 80 00 BF 00
 ROM0:2503 FF 00 05 1E E5 E6 19 1A 85 A4 01 B0 01 00 FD 00
 ROM0:2513 B8 00 A7 07 98 18 A5 20 8D 00 80 00 84 7F FF 00
 ROM0:2523 1D 00 E5 E0 19 18 A5 04 B1 00 01 00 85 FE FF 00          // Bridge 2

 ROM0:2533 FF 00 88 78 C7 67 D8 58 A0 25 80 0D 80 00 BF 00
 ROM0:2543 FF 00 0B 1E E3 E6 1B 1A 85 A4 81 B0 01 00 FD 00
 ROM0:2553 B8 00 A7 07 98 18 A5 20 8D 00 80 00 CA 7F FF 00
 ROM0:2563 1D 00 E5 E0 19 18 A5 04 B1 00 01 00 0B FE FF 00          // Bridge 3

 ROM0:2573 FF 00 84 04 80 00 A1 20 E0 00 8C 00 80 00 80 00
 ROM0:2583 FF 00 01 00 01 00 B5 30 01 00 33 02 01 00 27 20
 ROM0:2593 E0 00 86 00 E1 61 98 00 81 00 80 00 C8 00 FF 00
 ROM0:25A3 09 08 01 00 21 00 01 00 01 00 67 60 01 00 FF 00          // Beach 1

 ROM0:25B3 FF 00 80 00 80 00 A1 20 E0 00 8C 00 80 00 80 00
 ROM0:25C3 FF 00 01 00 01 00 9D 18 01 00 61 00 01 00 2D 20
 ROM0:25D3 E0 00 86 00 E0 60 8C 00 81 00 80 00 C8 00 FF 00
 ROM0:25E3 05 04 01 00 21 00 01 00 01 00 C7 C0 01 00 FF 00          // Beach 2

 ROM0:25F3 FF 00 84 04 80 00 C1 40 E0 00 86 00 80 00 80 00
 ROM0:2603 FF 00 01 00 01 00 9D 18 01 00 35 04 01 00 47 40
 ROM0:2613 E0 00 83 00 B0 30 84 00 81 00 80 00 C8 00 FF 00
 ROM0:2623 01 00 01 00 A1 80 01 00 01 00 6D 60 01 00 FF 00          // Beach 3

 ROM0:2633 EF 0D 50 66                          // ($C60C) = # of sets w/ properties, $A000 table has sets w/ properties, ($CA90) = winning state, ($C99C) = 0, ($C99F) = 1, ($DEA1) WRAM Bank 2 = 4
 ROM0:2637 EF 0D 79 66                          // Sprite portion update at start, ($DD80) WRAM Bank #2 tables viable captures, WRAM Bank #2 ($DEA0) involves reaching enemy HQ, ($C9DE) and ($C9DD) are emptied, ($C99E) holds active player, ($C9A2) holds 0 or 50, ($C9A3) holds other, ($C9A4) holds 0 or 11
 ROM0:263B EF 0D AD 67                          // A = Yield status
 ROM0:263F A7               and  a
 ROM0:2640 CA 4A 26         jp   z,264A         // Skip next 3 effective lines if Yield will not be considered
 ROM0:2643 EF 0D 2A 68                          // AI Yield Attempt ending with A = Acceptance
 ROM0:2647 A7               and  a
 ROM0:2648 20 40            jr   nz,268A        // Immediate ending for Accepted Yield
 ROM0:264A AF               xor  a
 ROM0:264B EA 9D C9         ld   (C99D),a       // ($C99D) is emptied
 ROM0:264E FA 9D C9         ld   a,(C99D)       // Loop starts here
 ROM0:2651 47               ld   b,a
 ROM0:2652 87               add  a
 ROM0:2653 80               add  b
 ROM0:2654 21 92 26         ld   hl,2692        // Pointers: 0DC855 0D8361 0D0C5F 0D0560 0D3562 0DAD62 0D2563 0D0040 0D9740 0D0C5F 0D0560 0D534E
                                                // 0D:55C8: Must be repairs checking
												// 0D:6183: Work Car River work check
												// 0D:5F0C: Flying transports will handle their transporting
												// 0D:6005: Landers will handle their transporting
												// 0D:6235: Grunts want properties
												// 0D:62AD: Work Cars want to build up properties
												// 0D:6325: Bombers want to bomb properties
												// 0D:4000: Indirects open fire
												// 0D:4097: Directs open fire
												// 0D:5F0C: Flying transports again
												// 0D:6005: Landers again
												// 0D:4E53: Building units
 ROM0:2657 CD BC 29         call 29BC
 ROM0:265A 2A               ldi  a,(hl)         // ROM Bank
 ROM0:265B A7               and  a
 ROM0:265C 28 1C            jr   z,267A         // End entire loop if ($C99D) = 13
 ROM0:265E 47               ld   b,a
 ROM0:265F 2A               ldi  a,(hl)
 ROM0:2660 66               ld   h,(hl)
 ROM0:2661 6F               ld   l,a            // Address
 ROM0:2662 F0 80            ld   a,(ff00+80)
 ROM0:2664 F5               push af
 ROM0:2665 CD 8B 26         call 268B
 ROM0:2668 F1               pop  af
 ROM0:2669 E0 80            ld   (ff00+80),a
 ROM0:266B EA 00 20         ld   (2000),a       // Restore ROM Bank
 ROM0:266E FA 94 CA         ld   a,(CA94)
 ROM0:2671 A7               and  a
 ROM0:2672 20 16            jr   nz,268A        // End immediately if victory is determined
 ROM0:2674 21 9D C9         ld   hl,C99D
 ROM0:2677 34               inc  (hl)
 ROM0:2678 18 D4            jr   264E           // Loop until AI management is done
 ROM0:267A EF 0B 1E 6D                          // Victory condition check results in ($CA94) and ($CA95) being set based on victory condition managed
 ROM0:267E FA 94 CA         ld   a,(CA94)
 ROM0:2681 A7               and  a
 ROM0:2682 C2 8A 26         jp   nz,268A        // End immediately if victory is determined
 ROM0:2685 3E 3C            ld   a,3C
 ROM0:2687 CD AF 3B         call 3BAF           // Advances game state by 60 frames before any further functions
 ROM0:268A C9               ret  
 ROM0:268B 78               ld   a,b
 ROM0:268C E0 80            ld   (ff00+80),a
 ROM0:268E EA 00 20         ld   (2000),a
 ROM0:2691 E9               jp   hl             // Jump (B):HL

 ROM0:2692 0D C8 55                             // Repair/Resupply
 ROM0:2695 0D 83 61                             // Bridge building efforts
 ROM0:2698 0D 0C 5F                             // Air transport movement
 ROM0:269B 0D 05 60                             // Lander movement
 ROM0:269E 0D 35 62                             // Captures by foot soldiers
 ROM0:26A1 0D AD 62                             // Development by Work Cars
 ROM0:26A4 0D 25 63                             // Bombing by Bombers
 ROM0:26A7 0D 00 40                             // Range Unit Attacks
 ROM0:26AA 0D 97 40                             // Direct Unit Attacks
 ROM0:26AD 0D 0C 5F                             // Air transport movement
 ROM0:26B0 0D 05 60                             // Lander movement
 ROM0:26B3 0D 53 4E                             // Build units
 ROM0:26B6 00

 ROM0:26B7 FA 25 C0         ld   a,(C025)
 ROM0:26BA 6F               ld   l,a
 ROM0:26BB FA 26 C0         ld   a,(C026)
 ROM0:26BE 67               ld   h,a            // HL = ($C025) 2 byte reverse
 ROM0:26BF 2A               ldi  a,(hl)
 ROM0:26C0 47               ld   b,a            // B = (($C025) 2 byte reverse)
 ROM0:26C1 7D               ld   a,l
 ROM0:26C2 EA 25 C0         ld   (C025),a
 ROM0:26C5 7C               ld   a,h
 ROM0:26C6 EA 26 C0         ld   (C026),a
 ROM0:26C9 78               ld   a,b
 ROM0:26CA C9               ret                 // A = (($C025) 2 byte reverse), ($C025) 2 byte reverse incremented
 ROM0:26CB F5               push af
 ROM0:26CC F0 44            ld   a,(ff00+44)
 ROM0:26CE 3C               inc  a
 ROM0:26CF E6 0F            and  a,0F
 ROM0:26D1 28 18            jr   z,26EB         // Branches if LY value % 16 = 15
 ROM0:26D3 E6 07            and  a,07
 ROM0:26D5 20 26            jr   nz,26FD        // End immediately if LY value % 16 = 0~6 or 8~14
 ROM0:26D7 F0 96            ld   a,(ff00+96)
 ROM0:26D9 CB 5F            bit  3,a
 ROM0:26DB 20 08            jr   nz,26E5        // Branches if intended SCY % 16 > 7
 ROM0:26DD F0 95            ld   a,(ff00+95)
 ROM0:26DF D6 04            sub  a,04
 ROM0:26E1 E0 43            ld   (ff00+43),a
 ROM0:26E3 18 18            jr   26FD           // LY % 16 = 7; intended SCY % 16 < 8: SCX = intended SCX - 4
 ROM0:26E5 F0 95            ld   a,(ff00+95)
 ROM0:26E7 E0 43            ld   (ff00+43),a
 ROM0:26E9 18 12            jr   26FD           // LY % 16 = 7; intended SCY % 16 > 7: SCX = intended SCX
 ROM0:26EB F0 96            ld   a,(ff00+96)
 ROM0:26ED CB 5F            bit  3,a
 ROM0:26EF 20 06            jr   nz,26F7        // Branches if intended SCY % 16 > 7
 ROM0:26F1 F0 95            ld   a,(ff00+95)
 ROM0:26F3 E0 43            ld   (ff00+43),a
 ROM0:26F5 18 06            jr   26FD           // LY % 16 = 15; intended SCY % 16 < 8: SCX = intended SCX
 ROM0:26F7 F0 95            ld   a,(ff00+95)
 ROM0:26F9 D6 04            sub  a,04
 ROM0:26FB E0 43            ld   (ff00+43),a    // LY % 16 = 15; intended SCY % 16 > 7: SCX = intended SCX - 4
 ROM0:26FD F1               pop  af
 ROM0:26FE D9               reti                // LCD Stat Interrupt procedure: Shifts SCX if advancing to next row of zoomed out map tiles
 ROM0:26FF F5               push af
 ROM0:2700 C5               push bc
 ROM0:2701 D5               push de
 ROM0:2702 E5               push hl
 ROM0:2703 21 01 C0         ld   hl,C001
 ROM0:2706 CB 46            bit  0,(hl)
 ROM0:2708 20 47            jr   nz,2751        // End immediately if already set
 ROM0:270A CB C6            set  0,(hl)
 ROM0:270C FA C4 C9         ld   a,(C9C4)
 ROM0:270F E6 1F            and  a,1F
 ROM0:2711 CB 27            sla  a
 ROM0:2713 CB 27            sla  a
 ROM0:2715 CB 27            sla  a
 ROM0:2717 E0 96            ld   (ff00+96),a
 ROM0:2719 E0 42            ld   (ff00+42),a    // Sets up SCY
 ROM0:271B E6 08            and  a,08
 ROM0:271D 0F               rrca 
 ROM0:271E 47               ld   b,a            // B = Y%2 * 4
 ROM0:271F FA C3 C9         ld   a,(C9C3)
 ROM0:2722 E6 1F            and  a,1F
 ROM0:2724 CB 27            sla  a
 ROM0:2726 CB 27            sla  a
 ROM0:2728 CB 27            sla  a
 ROM0:272A E0 95            ld   (ff00+95),a
 ROM0:272C 90               sub  b
 ROM0:272D E0 43            ld   (ff00+43),a    // Sets up SCX
 ROM0:272F FA 0F C0         ld   a,(C00F)
 ROM0:2732 E0 40            ld   (ff00+40),a
 ROM0:2734 FA 0E C0         ld   a,(C00E)
 ROM0:2737 A7               and  a
 ROM0:2738 28 07            jr   z,2741
 ROM0:273A CD 84 FF         call FF84           // Official Sprite table setup on OAM
 ROM0:273D AF               xor  a
 ROM0:273E EA 0E C0         ld   (C00E),a
 ROM0:2741 CD 56 27         call 2756           // Zoomed out map tile updates depending on state of ($FFAC)
 ROM0:2744 FB               ei   
 ROM0:2745 CD 1B 07         call 071B           // If bit 7,($C560) is active: Palette tables are updated based on bit 6,($C560) for BG and bit 5,($C560) for Sprites; or given Palette tables based on bits in ($C561) 2 byte if ($C560) doesn't have bits 5 and 6 active
 ROM0:2748 21 8E FF         ld   hl,FF8E
 ROM0:274B 34               inc  (hl)
 ROM0:274C 21 01 C0         ld   hl,C001
 ROM0:274F CB 86            res  0,(hl)
 ROM0:2751 E1               pop  hl
 ROM0:2752 D1               pop  de
 ROM0:2753 C1               pop  bc
 ROM0:2754 F1               pop  af
 ROM0:2755 D9               reti                // V-Blank Interrupt procedure: sets up graphics stats for zoomed out map
 ROM0:2756 F0 AC            ld   a,(ff00+AC)
 ROM0:2758 CB 7F            bit  7,a
 ROM0:275A C8               ret  z
 ROM0:275B CB 57            bit  2,a
 ROM0:275D 20 18            jr   nz,2777
 ROM0:275F CB 5F            bit  3,a
 ROM0:2761 20 14            jr   nz,2777
 ROM0:2763 CB 47            bit  0,a
 ROM0:2765 20 08            jr   nz,276F
 ROM0:2767 CD BA 27         call 27BA           // Establishes graphics of zoomed out map tiles starting at ($FFAD) coordinates downward, right version; A = remaining cycles at end of V-Blank period if any
 ROM0:276A A7               and  a
 ROM0:276B 20 1A            jr   nz,2787
 ROM0:276D 18 10            jr   277F
 ROM0:276F CD 88 27         call 2788           // Establishes graphics of zoomed out map tiles starting at ($FFAD) coordinates downward, left version; A = remaining cycles at end of V-Blank period if any
 ROM0:2772 A7               and  a
 ROM0:2773 20 12            jr   nz,2787
 ROM0:2775 18 08            jr   277F
 ROM0:2777 CD E7 27         call 27E7           // Establishes graphics of zoomed out map tiles starting at ($FFAD) coordinates to right; A = remaining cycles at end of V-Blank period if any
 ROM0:277A A7               and  a
 ROM0:277B 20 0A            jr   nz,2787
 ROM0:277D 18 00            jr   277F
 ROM0:277F F0 AC            ld   a,(ff00+AC)
 ROM0:2781 CB BF            res  7,a
 ROM0:2783 CB F7            set  6,a
 ROM0:2785 E0 AC            ld   (ff00+AC),a
 ROM0:2787 C9               ret                 // Zoomed out map tile updates depending on state of ($FFAC)
 ROM0:2788 F0 83            ld   a,(ff00+83)    // Left starts here
 ROM0:278A F5               push af
 ROM0:278B F0 82            ld   a,(ff00+82)
 ROM0:278D F5               push af             // Saves WRAM and VRAM banks
 ROM0:278E F0 AE            ld   a,(ff00+AE)
 ROM0:2790 4F               ld   c,a
 ROM0:2791 F0 AF            ld   a,(ff00+AF)
 ROM0:2793 57               ld   d,a
 ROM0:2794 F0 AD            ld   a,(ff00+AD)    // Loop begins here
 ROM0:2796 47               ld   b,a
 ROM0:2797 CB 41            bit  0,c
 ROM0:2799 28 01            jr   z,279C
 ROM0:279B 05               dec  b
 ROM0:279C CD 14 28         call 2814           // Establishes zoomed out map tile's graphics
 ROM0:279F F0 44            ld   a,(ff00+44)
 ROM0:27A1 FE 8E            cp   a,8E
 ROM0:27A3 38 04            jr   c,27A9
 ROM0:27A5 0C               inc  c
 ROM0:27A6 15               dec  d
 ROM0:27A7 20 EB            jr   nz,2794
 ROM0:27A9 F1               pop  af
 ROM0:27AA E0 82            ld   (ff00+82),a
 ROM0:27AC E0 70            ld   (ff00+70),a
 ROM0:27AE F1               pop  af
 ROM0:27AF E0 83            ld   (ff00+83),a
 ROM0:27B1 E0 4F            ld   (ff00+4F),a    // Restores WRAM and VRAM banks
 ROM0:27B3 79               ld   a,c
 ROM0:27B4 E0 AE            ld   (ff00+AE),a
 ROM0:27B6 7A               ld   a,d
 ROM0:27B7 E0 AF            ld   (ff00+AF),a
 ROM0:27B9 C9               ret                 // Establishes graphics of zoomed out map tiles starting at ($FFAD) coordinates downward, left version; A = remaining cycles at end of V-Blank period if any
 ROM0:27BA F0 83            ld   a,(ff00+83)    // Right starts here
 ROM0:27BC F5               push af
 ROM0:27BD F0 82            ld   a,(ff00+82)
 ROM0:27BF F5               push af             // Saves WRAM and VRAM banks
 ROM0:27C0 F0 AD            ld   a,(ff00+AD)
 ROM0:27C2 47               ld   b,a
 ROM0:27C3 F0 AE            ld   a,(ff00+AE)
 ROM0:27C5 4F               ld   c,a
 ROM0:27C6 F0 AF            ld   a,(ff00+AF)
 ROM0:27C8 57               ld   d,a            // Loop begins on next line
 ROM0:27C9 CD 14 28         call 2814           // Establishes zoomed out map tile's graphics
 ROM0:27CC F0 44            ld   a,(ff00+44)
 ROM0:27CE FE 8E            cp   a,8E
 ROM0:27D0 38 04            jr   c,27D6
 ROM0:27D2 0C               inc  c
 ROM0:27D3 15               dec  d
 ROM0:27D4 20 F3            jr   nz,27C9
 ROM0:27D6 F1               pop  af
 ROM0:27D7 E0 82            ld   (ff00+82),a
 ROM0:27D9 E0 70            ld   (ff00+70),a
 ROM0:27DB F1               pop  af
 ROM0:27DC E0 83            ld   (ff00+83),a
 ROM0:27DE E0 4F            ld   (ff00+4F),a    // Restores WRAM and VRAM banks
 ROM0:27E0 79               ld   a,c
 ROM0:27E1 E0 AE            ld   (ff00+AE),a
 ROM0:27E3 7A               ld   a,d
 ROM0:27E4 E0 AF            ld   (ff00+AF),a
 ROM0:27E6 C9               ret                 // Establishes graphics of zoomed out map tiles starting at ($FFAD) coordinates downward, right version; A = remaining cycles at end of V-Blank period if any
 ROM0:27E7 F0 83            ld   a,(ff00+83)    // Up/Down begins here
 ROM0:27E9 F5               push af
 ROM0:27EA F0 82            ld   a,(ff00+82)
 ROM0:27EC F5               push af             // Saves WRAM and VRAM banks
 ROM0:27ED F0 AD            ld   a,(ff00+AD)
 ROM0:27EF 47               ld   b,a
 ROM0:27F0 F0 AE            ld   a,(ff00+AE)
 ROM0:27F2 4F               ld   c,a
 ROM0:27F3 F0 AF            ld   a,(ff00+AF)
 ROM0:27F5 57               ld   d,a            // Loop begins on next line
 ROM0:27F6 CD 14 28         call 2814           // Establishes zoomed out map tile's graphics
 ROM0:27F9 F0 44            ld   a,(ff00+44)
 ROM0:27FB FE 8E            cp   a,8E
 ROM0:27FD 38 04            jr   c,2803
 ROM0:27FF 04               inc  b
 ROM0:2800 15               dec  d
 ROM0:2801 20 F3            jr   nz,27F6
 ROM0:2803 F1               pop  af
 ROM0:2804 E0 82            ld   (ff00+82),a
 ROM0:2806 E0 70            ld   (ff00+70),a
 ROM0:2808 F1               pop  af
 ROM0:2809 E0 83            ld   (ff00+83),a
 ROM0:280B E0 4F            ld   (ff00+4F),a    // Restores WRAM and VRAM banks
 ROM0:280D 78               ld   a,b
 ROM0:280E E0 AD            ld   (ff00+AD),a
 ROM0:2810 7A               ld   a,d
 ROM0:2811 E0 AF            ld   (ff00+AF),a
 ROM0:2813 C9               ret                 // Establishes graphics of zoomed out map tiles starting at ($FFAD) coordinates to right; A = remaining cycles at end of V-Blank period if any
 ROM0:2814 D5               push de
 ROM0:2815 CD 3A 28         call 283A           // HL = $D000 + B + C%64 * 64 + C/64 * 16, with B and C in the formula each set to 50 if exceeding 239--BC is popped after
 ROM0:2818 3E 01            ld   a,01
 ROM0:281A E0 82            ld   (ff00+82),a
 ROM0:281C E0 70            ld   (ff00+70),a
 ROM0:281E 7E               ld   a,(hl)
 ROM0:281F E6 3F            and  a,3F           // Terrain of tile
 ROM0:2821 57               ld   d,a
 ROM0:2822 21 6E 28         ld   hl,286E
 ROM0:2825 85               add  l
 ROM0:2826 6F               ld   l,a
 ROM0:2827 7C               ld   a,h
 ROM0:2828 CE 00            adc  a,00
 ROM0:282A 67               ld   h,a
 ROM0:282B 5E               ld   e,(hl)         // Tile's color pallete (0 for Bridge/Null's, 1 for brown/yellow, 2 for white/grey, 3 for green, 4 for red, 5 for blue)
 ROM0:282C CD 58 28         call 2858           // HL = $9800 + B%32 + C%32 * 32
 ROM0:282F 3E 01            ld   a,01
 ROM0:2831 E0 4F            ld   (ff00+4F),a
 ROM0:2833 73               ld   (hl),e
 ROM0:2834 AF               xor  a
 ROM0:2835 E0 4F            ld   (ff00+4F),a
 ROM0:2837 72               ld   (hl),d
 ROM0:2838 D1               pop  de
 ROM0:2839 C9               ret                 // Establishes zoomed out map tile's graphics
 ROM0:283A C5               push bc
 ROM0:283B 78               ld   a,b
 ROM0:283C FE F0            cp   a,F0
 ROM0:283E 38 02            jr   c,2842
 ROM0:2840 06 32            ld   b,32
 ROM0:2842 79               ld   a,c
 ROM0:2843 FE F0            cp   a,F0
 ROM0:2845 38 02            jr   c,2849
 ROM0:2847 3E 32            ld   a,32
 ROM0:2849 0F               rrca 
 ROM0:284A 0F               rrca 
 ROM0:284B 6F               ld   l,a
 ROM0:284C E6 0F            and  a,0F
 ROM0:284E C6 D0            add  a,D0
 ROM0:2850 67               ld   h,a            // H = $D0 + (C/4)%16
 ROM0:2851 7D               ld   a,l
 ROM0:2852 E6 F0            and  a,F0
 ROM0:2854 80               add  b
 ROM0:2855 6F               ld   l,a
 ROM0:2856 C1               pop  bc
 ROM0:2857 C9               ret                 // HL = $D000 + B + C%64 * 64 + C/64 * 16, with B and C in the formula each set to 50 if exceeding 239
 ROM0:2858 79               ld   a,c
 ROM0:2859 E6 1F            and  a,1F
 ROM0:285B 07               rlca 
 ROM0:285C CB 37            swap a
 ROM0:285E 6F               ld   l,a
 ROM0:285F E6 0F            and  a,0F
 ROM0:2861 C6 98            add  a,98
 ROM0:2863 67               ld   h,a
 ROM0:2864 3E F0            ld   a,F0
 ROM0:2866 A5               and  l
 ROM0:2867 6F               ld   l,a
 ROM0:2868 78               ld   a,b
 ROM0:2869 E6 1F            and  a,1F
 ROM0:286B 85               add  l
 ROM0:286C 6F               ld   l,a
 ROM0:286D C9               ret                 // HL = $9800 + B%32 + C%32 * 32

 ROM0:286E 00               nop  
 ROM0:286F 04 04 04               inc  b
 ROM0:2872 04 04               inc  b
 ROM0:2874 04 04 04               inc  b
 ROM0:2877 04 04               inc  b
 ROM0:2879 04               inc  b
 ROM0:287A 02 02 02               ld   (bc),a
 ROM0:287D 02 02               ld   (bc),a
 ROM0:287F 02 02 02               ld   (bc),a
 ROM0:2882 02 02               ld   (bc),a
 ROM0:2884 02               ld   (bc),a
 ROM0:2885 03 03               inc  bc
 ROM0:2887 03 03               inc  bc
 ROM0:2889 03 03               inc  bc
 ROM0:288B 03 03               inc  bc
 ROM0:288D 03               inc  bc
 ROM0:288E 03               inc  bc
 ROM0:288F 02               ld   (bc),a
 ROM0:2890 00               nop  
 ROM0:2891 00               nop  
 ROM0:2892 01 03 01         ld   bc,0103
 ROM0:2895 01 05 05         ld   bc,0505
 ROM0:2898 05               dec  b
 ROM0:2899 05               dec  b
 ROM0:289A 05               dec  b
 ROM0:289B 05               dec  b
 ROM0:289C 05               dec  b
 ROM0:289D 05               dec  b
 ROM0:289E 05               dec  b
 ROM0:289F 05               dec  b

 ROM0:28A0 C5               push bc
 ROM0:28A1 D5               push de
 ROM0:28A2 E5               push hl
 ROM0:28A3 F0 80            ld   a,(ff00+80)
 ROM0:28A5 F5               push af
 ROM0:28A6 FA 1A CA         ld   a,(CA1A)
 ROM0:28A9 E0 80            ld   (ff00+80),a
 ROM0:28AB EA 00 20         ld   (2000),a
 ROM0:28AE FA 1B CA         ld   a,(CA1B)
 ROM0:28B1 5F               ld   e,a
 ROM0:28B2 FA 1C CA         ld   a,(CA1C)
 ROM0:28B5 57               ld   d,a
 ROM0:28B6 21 21 CA         ld   hl,CA21
 ROM0:28B9 01 2E 00         ld   bc,002E
 ROM0:28BC CD 50 3B         call 3B50           // (HL ~ HL+BC-1) = (DE ~ DE+BC-1)
 ROM0:28BF 21 41 CA         ld   hl,CA41
 ROM0:28C2 0E 08            ld   c,08
 ROM0:28C4 7E               ld   a,(hl)         // Loop begins here
 ROM0:28C5 A7               and  a
 ROM0:28C6 20 03            jr   nz,28CB
 ROM0:28C8 3E 20            ld   a,20
 ROM0:28CA 77               ld   (hl),a
 ROM0:28CB 23               inc  hl
 ROM0:28CC 0D               dec  c
 ROM0:28CD 20 F5            jr   nz,28C4
 ROM0:28CF F1               pop  af
 ROM0:28D0 E0 80            ld   (ff00+80),a
 ROM0:28D2 EA 00 20         ld   (2000),a
 ROM0:28D5 E1               pop  hl
 ROM0:28D6 D1               pop  de
 ROM0:28D7 C1               pop  bc
 ROM0:28D8 C9               ret  
 ROM0:28D9 79               ld   a,c
 ROM0:28DA E6 01            and  a,01
 ROM0:28DC 87               add  a
 ROM0:28DD 87               add  a
 ROM0:28DE 87               add  a
 ROM0:28DF 87               add  a              // A = C%2 * 16
 ROM0:28E0 83               add  e
 ROM0:28E1 83               add  e              // A = C%2 * 16 + E * 2
 ROM0:28E2 21 FD 28         ld   hl,28FD
 ROM0:28E5 85               add  l
 ROM0:28E6 6F               ld   l,a
 ROM0:28E7 7C               ld   a,h
 ROM0:28E8 CE 00            adc  a,00
 ROM0:28EA 67               ld   h,a            // HL = $28FD + C%2 * 16 + E * 2
 ROM0:28EB 2A               ldi  a,(hl)
 ROM0:28EC 80               add  b
 ROM0:28ED 47               ld   b,a
 ROM0:28EE 7E               ld   a,(hl)
 ROM0:28EF 81               add  c
 ROM0:28F0 4F               ld   c,a            // BC = relative coordinates
 ROM0:28F1 FA 89 C9         ld   a,(C989)
 ROM0:28F4 3D               dec  a
 ROM0:28F5 B8               cp   b
 ROM0:28F6 D8               ret  c
 ROM0:28F7 FA 8A C9         ld   a,(C98A)
 ROM0:28FA 3D               dec  a
 ROM0:28FB B9               cp   c              // Set Carry Flag based on relative coordinates being out of bounds
 ROM0:28FC C9               ret                 // BC = relative coordinates, Set Carry Flag based on relative coordinates being out of bounds

 ROM0:28FD FF FF
 ROM0:28FF 00 FF
 ROM0:2901 FF 00
 ROM0:2903 01 00
 ROM0:2905 FF 01
 ROM0:2907 00 01
 ROM0:2909 00 00
 ROM0:290B 00 00
 
 ROM0:290D 00 FF
 ROM0:290F 01 FF
 ROM0:2911 FF 00
 ROM0:2913 01 00
 ROM0:2915 00 01
 ROM0:2917 01 01
 ROM0:2919 00 00
 ROM0:291B 00 00
 
 ROM0:291D C5               push bc
 ROM0:291E D5               push de
 ROM0:291F E5               push hl
 ROM0:2920 7A               ld   a,d
 ROM0:2921 B8               cp   b
 ROM0:2922 30 06            jr   nc,292A
 ROM0:2924 78               ld   a,b
 ROM0:2925 42               ld   b,d
 ROM0:2926 57               ld   d,a
 ROM0:2927 79               ld   a,c
 ROM0:2928 4B               ld   c,e
 ROM0:2929 5F               ld   e,a            // If D < B, BC and DE switch places
 ROM0:292A 7A               ld   a,d
 ROM0:292B 90               sub  b
 ROM0:292C 67               ld   h,a            // H = D - B
 ROM0:292D 7B               ld   a,e
 ROM0:292E 91               sub  c              // A = E - C
 ROM0:292F CD 8F 29         call 298F           // If (E - C) < 0, A = C - E
 ROM0:2932 6F               ld   l,a            // A = |E - C|
 ROM0:2933 CB 3F            srl  a              // A /= 2
 ROM0:2935 BC               cp   h
 ROM0:2936 30 0E            jr   nc,2946        // If L/2 => H, end with A = L
 ROM0:2938 2F               cpl  
 ROM0:2939 3C               inc  a
 ROM0:293A 84               add  h
 ROM0:293B 85               add  l              // A = H + (L + 1)/2
 ROM0:293C CB 45            bit  0,l
 ROM0:293E 28 07            jr   z,2947
 ROM0:2940 CB 09            rrc  c
 ROM0:2942 DE 00            sbc  a,00           // Correction based on Y coordinates
 ROM0:2944 18 01            jr   2947
 ROM0:2946 7D               ld   a,l
 ROM0:2947 E1               pop  hl
 ROM0:2948 D1               pop  de
 ROM0:2949 C1               pop  bc
 ROM0:294A C9               ret                 // A = minimum distance between 2 locations
 ROM0:294B C5               push bc
 ROM0:294C 1E 00            ld   e,00
 ROM0:294E 7A               ld   a,d
 ROM0:294F 93               sub  e
 ROM0:2950 47               ld   b,a            // B = D
 ROM0:2951 CD 60 29         call 2960           // [$CAAC] (2 bytes) is multiplied by 5 and then 1 is added with end result using modulo 65536; A = end result / 256
 ROM0:2954 B8               cp   b              // Loop begins here
 ROM0:2955 38 06            jr   c,295D
 ROM0:2957 28 04            jr   z,295D
 ROM0:2959 90               sub  b
 ROM0:295A 3D               dec  a
 ROM0:295B 18 F7            jr   2954
 ROM0:295D 83               add  e
 ROM0:295E C1               pop  bc
 ROM0:295F C9               ret                 // A = Pseudo RNG result / 256 % (1 + D)
 ROM0:2960 E5               push hl
 ROM0:2961 C5               push bc
 ROM0:2962 FA AC CA         ld   a,(CAAC)
 ROM0:2965 6F               ld   l,a
 ROM0:2966 4F               ld   c,a
 ROM0:2967 FA AD CA         ld   a,(CAAD)
 ROM0:296A 67               ld   h,a
 ROM0:296B 47               ld   b,a
 ROM0:296C 29               add  hl,hl
 ROM0:296D 29               add  hl,hl
 ROM0:296E 09               add  hl,bc          // HL = ($CAAC) * 5
 ROM0:296F 01 01 00         ld   bc,0001
 ROM0:2972 09               add  hl,bc          // HL = ($CAAC) * 5 + 1
 ROM0:2973 7D               ld   a,l
 ROM0:2974 EA AC CA         ld   (CAAC),a
 ROM0:2977 7C               ld   a,h
 ROM0:2978 EA AD CA         ld   (CAAD),a       // [$CAAC] (2 bytes) is multiplied by 5 and then 1 is added with end result using modulo 65536; A = end result / 256
 ROM0:297B C1               pop  bc
 ROM0:297C E1               pop  hl
 ROM0:297D C9               ret  
 ROM0:297E C5               push bc
 ROM0:297F 06 00            ld   b,00
 ROM0:2981 D6 0A            sub  a,0A           // Loop begins here
 ROM0:2983 38 03            jr   c,2988
 ROM0:2985 04               inc  b
 ROM0:2986 18 F9            jr   2981
 ROM0:2988 C6 0A            add  a,0A
 ROM0:298A CB 30            swap b
 ROM0:298C B0               or   b
 ROM0:298D C1               pop  bc
 ROM0:298E C9               ret                 // A = ((A % 160) / 10) * 16 + (A % 10), add 1 if A is an even number at least 160
 ROM0:298F CB 7F            bit  7,a
 ROM0:2991 C8               ret  z
 ROM0:2992 2F               cpl  
 ROM0:2993 3C               inc  a
 ROM0:2994 C9               ret                 // If A > 127, A = 256 - A
 ROM0:2995 C5               push bc
 ROM0:2996 D5               push de
 ROM0:2997 21 00 00         ld   hl,0000
 ROM0:299A 58               ld   e,b
 ROM0:299B 16 00            ld   d,00
 ROM0:299D 06 08            ld   b,08
 ROM0:299F 0F               rrca                // Loop begins here
 ROM0:29A0 30 01            jr   nc,29A3
 ROM0:29A2 19               add  hl,de
 ROM0:29A3 CB 23            sla  e
 ROM0:29A5 CB 12            rl   d
 ROM0:29A7 05               dec  b
 ROM0:29A8 20 F5            jr   nz,299F
 ROM0:29AA D1               pop  de
 ROM0:29AB C1               pop  bc
 ROM0:29AC C9               ret                 // HL = A * B
 ROM0:29AD D5               push de
 ROM0:29AE 29               add  hl,hl
 ROM0:29AF 29               add  hl,hl
 ROM0:29B0 E5               push hl             // DE, HL * 4
 ROM0:29B1 29               add  hl,hl
 ROM0:29B2 29               add  hl,hl
 ROM0:29B3 29               add  hl,hl
 ROM0:29B4 E5               push hl             // DE, HL * 4, HL * 32
 ROM0:29B5 29               add  hl,hl          // HL = HL * 64
 ROM0:29B6 D1               pop  de
 ROM0:29B7 19               add  hl,de          // HL = HL * 96
 ROM0:29B8 D1               pop  de
 ROM0:29B9 19               add  hl,de          // HL = HL * 100
 ROM0:29BA D1               pop  de
 ROM0:29BB C9               ret                 // HL *= 100
 ROM0:29BC 85               add  l
 ROM0:29BD 6F               ld   l,a
 ROM0:29BE 7C               ld   a,h
 ROM0:29BF CE 00            adc  a,00
 ROM0:29C1 67               ld   h,a
 ROM0:29C2 C9               ret                 // HL += A
 ROM0:29C3 7D               ld   a,l
 ROM0:29C4 93               sub  e
 ROM0:29C5 6F               ld   l,a
 ROM0:29C6 7C               ld   a,h
 ROM0:29C7 9A               sbc  d
 ROM0:29C8 67               ld   h,a
 ROM0:29C9 C9               ret                 // HL -= DE
 ROM0:29CA 7A               ld   a,d
 ROM0:29CB BC               cp   h
 ROM0:29CC 38 09            jr   c,29D7
 ROM0:29CE 20 07            jr   nz,29D7
 ROM0:29D0 7B               ld   a,e
 ROM0:29D1 BD               cp   l
 ROM0:29D2 38 03            jr   c,29D7
 ROM0:29D4 20 01            jr   nz,29D7
 ROM0:29D6 AF               xor  a
 ROM0:29D7 C9               ret                 // if DE = HL, A = 0; otherwise, A = D or E depending on H or L; Carry Flag set by DE < HL
 ROM0:29D8 7C               ld   a,h
 ROM0:29D9 B5               or   l
 ROM0:29DA C8               ret  z              // if HL = 0, return instruction
 ROM0:29DB 7A               ld   a,d
 ROM0:29DC B3               or   e
 ROM0:29DD 28 3E            jr   z,2A1D         // if DE = 0, end with HL = 0
 ROM0:29DF 7C               ld   a,h
 ROM0:29E0 AA               xor  d              // A = H XOR D
 ROM0:29E1 07               rlca 
 ROM0:29E2 F5               push af             // Push RLCA (H XOR D) result
 ROM0:29E3 7A               ld   a,d
 ROM0:29E4 07               rlca 
 ROM0:29E5 30 07            jr   nc,29EE        // Keeps going if D > 127
 ROM0:29E7 7A               ld   a,d
 ROM0:29E8 2F               cpl  
 ROM0:29E9 57               ld   d,a            // D = CPL D
 ROM0:29EA 7B               ld   a,e
 ROM0:29EB 2F               cpl  
 ROM0:29EC 5F               ld   e,a            // E = CPL E
 ROM0:29ED 13               inc  de             // If DE > 32767, DE = 65536 - DE
 ROM0:29EE 7C               ld   a,h
 ROM0:29EF 07               rlca 
 ROM0:29F0 30 07            jr   nc,29F9
 ROM0:29F2 7C               ld   a,h
 ROM0:29F3 2F               cpl  
 ROM0:29F4 67               ld   h,a
 ROM0:29F5 7D               ld   a,l
 ROM0:29F6 2F               cpl  
 ROM0:29F7 6F               ld   l,a
 ROM0:29F8 23               inc  hl             // If HL > 32767, HL = 65536 - HL
 ROM0:29F9 44               ld   b,h
 ROM0:29FA 4D               ld   c,l            // BC = HL
 ROM0:29FB 21 00 00         ld   hl,0000
 ROM0:29FE 3E 10            ld   a,10           // A = 16, BC = HL, HL = 0, loop begins on next line
 ROM0:2A00 29               add  hl,hl          // HL is doubled
 ROM0:2A01 CB 11            rl   c
 ROM0:2A03 CB 10            rl   b              // BC is doubled
 ROM0:2A05 30 07            jr   nc,2A0E
 ROM0:2A07 19               add  hl,de          // if old BC > 127, add DE to HL
 ROM0:2A08 30 04            jr   nc,2A0E
 ROM0:2A0A 0C               inc  c              // if new HL > 65535, add 1 to C
 ROM0:2A0B 20 01            jr   nz,2A0E
 ROM0:2A0D 04               inc  b              // if C was 255 3 lines ago, add 1 to B
 ROM0:2A0E 3D               dec  a
 ROM0:2A0F 20 EF            jr   nz,2A00        // Loop happens for 1 cycle of each byte; BC holds (DE * HL) / 65536, HL holds (DE * HL) % 65536
 ROM0:2A11 F1               pop  af             // A = RLCA (H XOR D)
 ROM0:2A12 D0               ret  nc             // Double negatives or no negatives causes return
 ROM0:2A13 7C               ld   a,h
 ROM0:2A14 2F               cpl  
 ROM0:2A15 67               ld   h,a
 ROM0:2A16 7D               ld   a,l
 ROM0:2A17 2F               cpl  
 ROM0:2A18 6F               ld   l,a
 ROM0:2A19 2C               inc  l
 ROM0:2A1A C0               ret  nz
 ROM0:2A1B 24               inc  h              // Signed number business
 ROM0:2A1C C9               ret  
 ROM0:2A1D 21 00 00         ld   hl,0000
 ROM0:2A20 C9               ret  
 ROM0:2A21 E5               push hl
 ROM0:2A22 21 A8 CA         ld   hl,CAA8
 ROM0:2A25 36 01            ld   (hl),01
 ROM0:2A27 CB 78            bit  7,b
 ROM0:2A29 C4 70 2A         call nz,2A70
 ROM0:2A2C CB 7A            bit  7,d
 ROM0:2A2E C4 79 2A         call nz,2A79        // $CAA8 is 0 if only B OR D, but not both, is negative. Heh. Oh, and signed number business.
 ROM0:2A31 21 A9 CA         ld   hl,CAA9
 ROM0:2A34 71               ld   (hl),c
 ROM0:2A35 23               inc  hl
 ROM0:2A36 70               ld   (hl),b         // $CAA9 2 byte holds BC
 ROM0:2A37 23               inc  hl
 ROM0:2A38 36 11            ld   (hl),11        // $CAAB holds 17
 ROM0:2A3A 01 00 00         ld   bc,0000
 ROM0:2A3D 21 AB CA         ld   hl,CAAB
 ROM0:2A40 CB 13            rl   e              // E is incremented by 1 if BC > Divisor on last loop
 ROM0:2A42 CB 12            rl   d              // DE (originally holds Dividend) is doubled
 ROM0:2A44 35               dec  (hl)
 ROM0:2A45 28 1A            jr   z,2A61
 ROM0:2A47 CB 11            rl   c
 ROM0:2A49 CB 10            rl   b              // BC is doubled
 ROM0:2A4B 2B               dec  hl
 ROM0:2A4C 2B               dec  hl
 ROM0:2A4D 79               ld   a,c
 ROM0:2A4E 96               sub  (hl)
 ROM0:2A4F 4F               ld   c,a
 ROM0:2A50 23               inc  hl
 ROM0:2A51 78               ld   a,b
 ROM0:2A52 9E               sbc  (hl)
 ROM0:2A53 47               ld   b,a
 ROM0:2A54 30 08            jr   nc,2A5E        // If BC => Divisor, skip "restoration"
 ROM0:2A56 2B               dec  hl
 ROM0:2A57 79               ld   a,c
 ROM0:2A58 86               add  (hl)
 ROM0:2A59 4F               ld   c,a
 ROM0:2A5A 23               inc  hl
 ROM0:2A5B 78               ld   a,b
 ROM0:2A5C 8E               adc  (hl)
 ROM0:2A5D 47               ld   b,a            // End of restoration of BC
 ROM0:2A5E 3F               ccf                 // Inverts Carry Flag
 ROM0:2A5F 18 DC            jr   2A3D           // BC reduced by Divisor where feasible
 ROM0:2A61 21 A8 CA         ld   hl,CAA8        // Come here after DE /= BC with BC = DE%BC is established
 ROM0:2A64 AF               xor  a
 ROM0:2A65 BE               cp   (hl)
 ROM0:2A66 20 06            jr   nz,2A6E        // Finished if Dividend or Divisor but not both was negative
 ROM0:2A68 CD 71 2A         call 2A71
 ROM0:2A6B CD 7A 2A         call 2A7A           // Signed number business
 ROM0:2A6E E1               pop  hl
 ROM0:2A6F C9               ret  
 ROM0:2A70 35               dec  (hl)
 ROM0:2A71 78               ld   a,b
 ROM0:2A72 2F               cpl  
 ROM0:2A73 47               ld   b,a
 ROM0:2A74 79               ld   a,c
 ROM0:2A75 2F               cpl  
 ROM0:2A76 4F               ld   c,a
 ROM0:2A77 03               inc  bc
 ROM0:2A78 C9               ret                 // BC being signed is handled
 ROM0:2A79 35               dec  (hl)
 ROM0:2A7A 7A               ld   a,d
 ROM0:2A7B 2F               cpl  
 ROM0:2A7C 57               ld   d,a
 ROM0:2A7D 7B               ld   a,e
 ROM0:2A7E 2F               cpl  
 ROM0:2A7F 5F               ld   e,a
 ROM0:2A80 13               inc  de
 ROM0:2A81 C9               ret                 // DE being signed is handled
 ROM0:2A82 00               nop  
 ROM0:2A83 AF               xor  a
 ROM0:2A84 EA D2 CA         ld   (CAD2),a
 ROM0:2A87 EA D3 CA         ld   (CAD3),a
 ROM0:2A8A EA D4 CA         ld   (CAD4),a
 ROM0:2A8D C9               ret  
 ROM0:2A8E CD 60 29         call 2960           // [$CAAC] (2 bytes) is multiplied by 5 and then 1 is added with end result using modulo 65536; A = end result / 256
 ROM0:2A91 CD 8C 10         call 108C
 ROM0:2A94 CB 67            bit  4,a
 ROM0:2A96 28 33            jr   z,2ACB
 ROM0:2A98 FA D4 CA         ld   a,(CAD4)
 ROM0:2A9B FE 63            cp   a,63
 ROM0:2A9D 20 07            jr   nz,2AA6
 ROM0:2A9F FA D3 CA         ld   a,(CAD3)
 ROM0:2AA2 FE 3B            cp   a,3B
 ROM0:2AA4 28 25            jr   z,2ACB
 ROM0:2AA6 FA D2 CA         ld   a,(CAD2)
 ROM0:2AA9 3C               inc  a
 ROM0:2AAA EA D2 CA         ld   (CAD2),a
 ROM0:2AAD FE 3C            cp   a,3C
 ROM0:2AAF 20 1A            jr   nz,2ACB
 ROM0:2AB1 AF               xor  a
 ROM0:2AB2 EA D2 CA         ld   (CAD2),a
 ROM0:2AB5 FA D3 CA         ld   a,(CAD3)
 ROM0:2AB8 3C               inc  a
 ROM0:2AB9 EA D3 CA         ld   (CAD3),a
 ROM0:2ABC FE 3C            cp   a,3C
 ROM0:2ABE 20 0B            jr   nz,2ACB
 ROM0:2AC0 AF               xor  a
 ROM0:2AC1 EA D3 CA         ld   (CAD3),a
 ROM0:2AC4 FA D4 CA         ld   a,(CAD4)
 ROM0:2AC7 3C               inc  a
 ROM0:2AC8 EA D4 CA         ld   (CAD4),a
 ROM0:2ACB C9               ret  
 ROM0:2ACC FA D4 CA         ld   a,(CAD4)
 ROM0:2ACF 01 04 08         ld   bc,0804
 ROM0:2AD2 16 02            ld   d,02
 ROM0:2AD4 CD 37 32         call 3237           // [$C300 + [$FFC8]] holds # of digit bytes, then designated HL (reversed), then number text (A is the number, BC is coordinates, D is the number of digits)
 ROM0:2AD7 21 EC 2A         ld   hl,2AEC
 ROM0:2ADA 01 04 0A         ld   bc,0A04
 ROM0:2ADD CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 ROM0:2AE0 FA D3 CA         ld   a,(CAD3)
 ROM0:2AE3 01 04 0B         ld   bc,0B04
 ROM0:2AE6 16 02            ld   d,02
 ROM0:2AE8 CD 37 32         call 3237           // [$C300 + [$FFC8]] holds # of digit bytes, then designated HL (reversed), then number text (A is the number, BC is coordinates, D is the number of digits)
 ROM0:2AEB C9               ret  

 ROM0:2AEC 3A 00

 ROM0:2AEE 21 CB 32         ld   hl,32CB
 ROM0:2AF1 CB 53            bit  2,e
 ROM0:2AF3 CB 64            bit  4,h
 ROM0:2AF5 CB 83            res  0,e
 ROM0:2AF7 CB 94            res  2,h
 ROM0:2AF9 CB A5            res  4,l
 ROM0:2AFB CB 78            bit  7,b
 ROM0:2AFD EA C9 CB         ld   (CBC9),a
 ROM0:2B00 79               ld   a,c
 ROM0:2B01 EA CB CB         ld   (CBCB),a
 ROM0:2B04 AF               xor  a
 ROM0:2B05 EA CA CB         ld   (CBCA),a
 ROM0:2B08 7E               ld   a,(hl)
 ROM0:2B09 FE 00            cp   a,00
 ROM0:2B0B 28 2A            jr   z,2B37
 ROM0:2B0D FE 01            cp   a,01
 ROM0:2B0F 20 0C            jr   nz,2B1D
 ROM0:2B11 AF               xor  a
 ROM0:2B12 EA CA CB         ld   (CBCA),a
 ROM0:2B15 FA CB CB         ld   a,(CBCB)
 ROM0:2B18 3C               inc  a
 ROM0:2B19 EA CB CB         ld   (CBCB),a
 ROM0:2B1C 23               inc  hl
 ROM0:2B1D FA CA CB         ld   a,(CBCA)
 ROM0:2B20 4F               ld   c,a
 ROM0:2B21 FA C9 CB         ld   a,(CBC9)
 ROM0:2B24 81               add  c
 ROM0:2B25 47               ld   b,a
 ROM0:2B26 FA CB CB         ld   a,(CBCB)
 ROM0:2B29 4F               ld   c,a
 ROM0:2B2A 2A               ldi  a,(hl)
 ROM0:2B2B CD ED 34         call 34ED           // [$C300 + [$FFC8]] 3 byte holds: 1, B + C%8 * 32, 152 or 24 + C / 8, A; [$FFCA] incremented (152 or 24 + C / 8 is 24 + C / 8 if [$FFCB] != 0)
 ROM0:2B2E FA CA CB         ld   a,(CBCA)
 ROM0:2B31 3C               inc  a
 ROM0:2B32 EA CA CB         ld   (CBCA),a
 ROM0:2B35 18 D1            jr   2B08
 ROM0:2B37 C9               ret  
 ROM0:2B38 F0 83            ld   a,(ff00+83)
 ROM0:2B3A F5               push af
 ROM0:2B3B 3E 00            ld   a,00
 ROM0:2B3D E0 83            ld   (ff00+83),a
 ROM0:2B3F E0 4F            ld   (ff00+4F),a
 ROM0:2B41 78               ld   a,b
 ROM0:2B42 EA C9 CB         ld   (CBC9),a
 ROM0:2B45 79               ld   a,c
 ROM0:2B46 EA CB CB         ld   (CBCB),a
 ROM0:2B49 AF               xor  a
 ROM0:2B4A EA CA CB         ld   (CBCA),a
 ROM0:2B4D 7E               ld   a,(hl)         // Loop begins here
 ROM0:2B4E FE 00            cp   a,00
 ROM0:2B50 28 33            jr   z,2B85         // Break ending
 ROM0:2B52 FE 01            cp   a,01
 ROM0:2B54 20 0E            jr   nz,2B64        // Continue Line branch
 ROM0:2B56 AF               xor  a
 ROM0:2B57 EA CA CB         ld   (CBCA),a
 ROM0:2B5A FA CB CB         ld   a,(CBCB)
 ROM0:2B5D 3C               inc  a
 ROM0:2B5E EA CB CB         ld   (CBCB),a
 ROM0:2B61 23               inc  hl
 ROM0:2B62 18 E9            jr   2B4D
 ROM0:2B64 FA CA CB         ld   a,(CBCA)
 ROM0:2B67 4F               ld   c,a
 ROM0:2B68 FA C9 CB         ld   a,(CBC9)
 ROM0:2B6B 81               add  c
 ROM0:2B6C 47               ld   b,a
 ROM0:2B6D FA CB CB         ld   a,(CBCB)
 ROM0:2B70 4F               ld   c,a
 ROM0:2B71 2A               ldi  a,(hl)
 ROM0:2B72 E5               push hl
 ROM0:2B73 F5               push af
 ROM0:2B74 CD D4 0E         call 0ED4           // HL = $9800 + B + C * 32
 ROM0:2B77 F1               pop  af
 ROM0:2B78 CD 1C 0F         call 0F1C           // VRA0($9800 + B + C * 32) = character
 ROM0:2B7B E1               pop  hl
 ROM0:2B7C FA CA CB         ld   a,(CBCA)
 ROM0:2B7F 3C               inc  a
 ROM0:2B80 EA CA CB         ld   (CBCA),a
 ROM0:2B83 18 C8            jr   2B4D
 ROM0:2B85 F1               pop  af
 ROM0:2B86 E0 83            ld   (ff00+83),a
 ROM0:2B88 E0 4F            ld   (ff00+4F),a
 ROM0:2B8A C9               ret                 // [$9800] 1024 byte string holds dialogue (BC is starting coordinates, HL is dialogue pointer)
 ROM0:2B8B F0 83            ld   a,(ff00+83)
 ROM0:2B8D F5               push af
 ROM0:2B8E 3E 00            ld   a,00
 ROM0:2B90 E0 83            ld   (ff00+83),a
 ROM0:2B92 E0 4F            ld   (ff00+4F),a
 ROM0:2B94 78               ld   a,b
 ROM0:2B95 EA C9 CB         ld   (CBC9),a
 ROM0:2B98 79               ld   a,c
 ROM0:2B99 EA CB CB         ld   (CBCB),a
 ROM0:2B9C AF               xor  a
 ROM0:2B9D EA CA CB         ld   (CBCA),a
 ROM0:2BA0 7E               ld   a,(hl)
 ROM0:2BA1 FE 00            cp   a,00
 ROM0:2BA3 20 15            jr   nz,2BBA
 ROM0:2BA5 23               inc  hl
 ROM0:2BA6 7E               ld   a,(hl)
 ROM0:2BA7 FE 00            cp   a,00
 ROM0:2BA9 28 30            jr   z,2BDB
 ROM0:2BAB 2B               dec  hl
 ROM0:2BAC AF               xor  a
 ROM0:2BAD EA CA CB         ld   (CBCA),a
 ROM0:2BB0 FA CB CB         ld   a,(CBCB)
 ROM0:2BB3 3C               inc  a
 ROM0:2BB4 EA CB CB         ld   (CBCB),a
 ROM0:2BB7 23               inc  hl
 ROM0:2BB8 18 E6            jr   2BA0
 ROM0:2BBA FA CA CB         ld   a,(CBCA)
 ROM0:2BBD 4F               ld   c,a
 ROM0:2BBE FA C9 CB         ld   a,(CBC9)
 ROM0:2BC1 81               add  c
 ROM0:2BC2 47               ld   b,a
 ROM0:2BC3 FA CB CB         ld   a,(CBCB)
 ROM0:2BC6 4F               ld   c,a
 ROM0:2BC7 2A               ldi  a,(hl)
 ROM0:2BC8 E5               push hl
 ROM0:2BC9 F5               push af
 ROM0:2BCA CD D4 0E         call 0ED4           // HL = $9800 + B + C * 32
 ROM0:2BCD F1               pop  af
 ROM0:2BCE CD 1C 0F         call 0F1C           // (HL) = A, increment HL
 ROM0:2BD1 E1               pop  hl
 ROM0:2BD2 FA CA CB         ld   a,(CBCA)
 ROM0:2BD5 3C               inc  a
 ROM0:2BD6 EA CA CB         ld   (CBCA),a
 ROM0:2BD9 18 C5            jr   2BA0
 ROM0:2BDB F1               pop  af
 ROM0:2BDC E0 83            ld   (ff00+83),a
 ROM0:2BDE E0 4F            ld   (ff00+4F),a
 ROM0:2BE0 C9               ret  
 ROM0:2BE1 E5               push hl
 ROM0:2BE2 58               ld   e,b
 ROM0:2BE3 51               ld   d,c
 ROM0:2BE4 AF               xor  a
 ROM0:2BE5 F5               push af             // Loop begins here
 ROM0:2BE6 D5               push de
 ROM0:2BE7 06 02            ld   b,02
 ROM0:2BE9 CD 95 29         call 2995           // HL = A * 2
 ROM0:2BEC 01 14 75         ld   bc,7514
 ROM0:2BEF 09               add  hl,bc
 ROM0:2BF0 2A               ldi  a,(hl)
 ROM0:2BF1 47               ld   b,a
 ROM0:2BF2 7E               ld   a,(hl)
 ROM0:2BF3 60               ld   h,b
 ROM0:2BF4 6F               ld   l,a
 ROM0:2BF5 D1               pop  de
 ROM0:2BF6 CD CA 29         call 29CA           // Carry Flag active if DE < HL, A = 0 if DE = HL
 ROM0:2BF9 28 0B            jr   z,2C06
 ROM0:2BFB F1               pop  af
 ROM0:2BFC 3C               inc  a
 ROM0:2BFD FE 00            cp   a,00
 ROM0:2BFF 20 E4            jr   nz,2BE5
 ROM0:2C01 E1               pop  hl
 ROM0:2C02 3E 0A            ld   a,0A
 ROM0:2C04 37               scf  
 ROM0:2C05 C9               ret  
 ROM0:2C06 F1               pop  af
 ROM0:2C07 E1               pop  hl
 ROM0:2C08 37               scf  
 ROM0:2C09 3F               ccf  
 ROM0:2C0A C9               ret  
 ROM0:2C0B 7C               ld   a,h
 ROM0:2C0C EA 00 DF         ld   (DF00),a
 ROM0:2C0F 7D               ld   a,l
 ROM0:2C10 EA 01 DF         ld   (DF01),a
 ROM0:2C13 7A               ld   a,d
 ROM0:2C14 EA 04 DF         ld   (DF04),a
 ROM0:2C17 7B               ld   a,e
 ROM0:2C18 EA 05 DF         ld   (DF05),a
 ROM0:2C1B AF               xor  a
 ROM0:2C1C EA 02 DF         ld   (DF02),a
 ROM0:2C1F EA 03 DF         ld   (DF03),a
 ROM0:2C22 EA 06 DF         ld   (DF06),a
 ROM0:2C25 EA 07 DF         ld   (DF07),a
 ROM0:2C28 FA 00 DF         ld   a,(DF00)
 ROM0:2C2B 67               ld   h,a
 ROM0:2C2C FA 01 DF         ld   a,(DF01)
 ROM0:2C2F 6F               ld   l,a
 ROM0:2C30 7E               ld   a,(hl)
 ROM0:2C31 FE 00            cp   a,00
 ROM0:2C33 28 26            jr   z,2C5B
 ROM0:2C35 7E               ld   a,(hl)
 ROM0:2C36 CD DE 63         call 63DE
 ROM0:2C39 38 0E            jr   c,2C49
 ROM0:2C3B 7E               ld   a,(hl)
 ROM0:2C3C CD F0 63         call 63F0
 ROM0:2C3F 38 02            jr   c,2C43
 ROM0:2C41 18 0C            jr   2C4F
 ROM0:2C43 7E               ld   a,(hl)
 ROM0:2C44 CD C5 2C         call 2CC5
 ROM0:2C47 18 E7            jr   2C30
 ROM0:2C49 7E               ld   a,(hl)
 ROM0:2C4A CD 5C 2C         call 2C5C
 ROM0:2C4D 18 E1            jr   2C30
 ROM0:2C4F 7E               ld   a,(hl)
 ROM0:2C50 CD FC 2C         call 2CFC
 ROM0:2C53 18 DB            jr   2C30
 ROM0:2C55 7E               ld   a,(hl)
 ROM0:2C56 CD 91 2C         call 2C91
 ROM0:2C59 18 D5            jr   2C30
 ROM0:2C5B C9               ret  
 ROM0:2C5C E5               push hl
 ROM0:2C5D AF               xor  a
 ROM0:2C5E 47               ld   b,a
 ROM0:2C5F 7E               ld   a,(hl)
 ROM0:2C60 4F               ld   c,a
 ROM0:2C61 CD 8B 33         call 338B
 ROM0:2C64 F5               push af
 ROM0:2C65 FA 04 DF         ld   a,(DF04)
 ROM0:2C68 67               ld   h,a
 ROM0:2C69 FA 05 DF         ld   a,(DF05)
 ROM0:2C6C 6F               ld   l,a
 ROM0:2C6D 11 0E DC         ld   de,DC0E
 ROM0:2C70 CD CA 29         call 29CA           // Carry Flag active if DE < HL, A = 0 if DE = HL
 ROM0:2C73 28 0E            jr   z,2C83
 ROM0:2C75 F1               pop  af
 ROM0:2C76 77               ld   (hl),a
 ROM0:2C77 23               inc  hl
 ROM0:2C78 7C               ld   a,h
 ROM0:2C79 EA 04 DF         ld   (DF04),a
 ROM0:2C7C 7D               ld   a,l
 ROM0:2C7D EA 05 DF         ld   (DF05),a
 ROM0:2C80 E1               pop  hl
 ROM0:2C81 23               inc  hl
 ROM0:2C82 C9               ret  
 ROM0:2C83 21 0E DC         ld   hl,DC0E
 ROM0:2C86 36 00            ld   (hl),00
 ROM0:2C88 21 0F DC         ld   hl,DC0F
 ROM0:2C8B 36 00            ld   (hl),00
 ROM0:2C8D F1               pop  af
 ROM0:2C8E E1               pop  hl
 ROM0:2C8F 23               inc  hl
 ROM0:2C90 C9               ret  
 ROM0:2C91 E5               push hl
 ROM0:2C92 AF               xor  a
 ROM0:2C93 47               ld   b,a
 ROM0:2C94 7E               ld   a,(hl)
 ROM0:2C95 4F               ld   c,a
 ROM0:2C96 3E 0A            ld   a,0A
 ROM0:2C98 F5               push af
 ROM0:2C99 FA 04 DF         ld   a,(DF04)
 ROM0:2C9C 67               ld   h,a
 ROM0:2C9D FA 05 DF         ld   a,(DF05)
 ROM0:2CA0 6F               ld   l,a
 ROM0:2CA1 11 0E DC         ld   de,DC0E
 ROM0:2CA4 CD CA 29         call 29CA           // Carry Flag active if DE < HL, A = 0 if DE = HL
 ROM0:2CA7 28 0E            jr   z,2CB7
 ROM0:2CA9 F1               pop  af
 ROM0:2CAA 77               ld   (hl),a
 ROM0:2CAB 23               inc  hl
 ROM0:2CAC 7C               ld   a,h
 ROM0:2CAD EA 04 DF         ld   (DF04),a
 ROM0:2CB0 7D               ld   a,l
 ROM0:2CB1 EA 05 DF         ld   (DF05),a
 ROM0:2CB4 E1               pop  hl
 ROM0:2CB5 23               inc  hl
 ROM0:2CB6 C9               ret  
 ROM0:2CB7 21 0E DC         ld   hl,DC0E
 ROM0:2CBA 36 00            ld   (hl),00
 ROM0:2CBC 21 0F DC         ld   hl,DC0F
 ROM0:2CBF 36 00            ld   (hl),00
 ROM0:2CC1 F1               pop  af
 ROM0:2CC2 E1               pop  hl
 ROM0:2CC3 23               inc  hl
 ROM0:2CC4 C9               ret  
 ROM0:2CC5 E5               push hl
 ROM0:2CC6 2A               ldi  a,(hl)
 ROM0:2CC7 47               ld   b,a
 ROM0:2CC8 7E               ld   a,(hl)
 ROM0:2CC9 4F               ld   c,a
 ROM0:2CCA CD 8B 33         call 338B
 ROM0:2CCD F5               push af
 ROM0:2CCE FA 04 DF         ld   a,(DF04)
 ROM0:2CD1 67               ld   h,a
 ROM0:2CD2 FA 05 DF         ld   a,(DF05)
 ROM0:2CD5 6F               ld   l,a
 ROM0:2CD6 11 0E DC         ld   de,DC0E
 ROM0:2CD9 CD CA 29         call 29CA           // Carry Flag active if DE < HL, A = 0 if DE = HL
 ROM0:2CDC 28 0F            jr   z,2CED
 ROM0:2CDE F1               pop  af
 ROM0:2CDF 77               ld   (hl),a
 ROM0:2CE0 23               inc  hl
 ROM0:2CE1 7C               ld   a,h
 ROM0:2CE2 EA 04 DF         ld   (DF04),a
 ROM0:2CE5 7D               ld   a,l
 ROM0:2CE6 EA 05 DF         ld   (DF05),a
 ROM0:2CE9 E1               pop  hl
 ROM0:2CEA 23               inc  hl
 ROM0:2CEB 23               inc  hl
 ROM0:2CEC C9               ret  
 ROM0:2CED 21 0E DC         ld   hl,DC0E
 ROM0:2CF0 36 00            ld   (hl),00
 ROM0:2CF2 21 0F DC         ld   hl,DC0F
 ROM0:2CF5 36 00            ld   (hl),00
 ROM0:2CF7 F1               pop  af
 ROM0:2CF8 E1               pop  hl
 ROM0:2CF9 23               inc  hl
 ROM0:2CFA 23               inc  hl
 ROM0:2CFB C9               ret  
 ROM0:2CFC E5               push hl
 ROM0:2CFD 2A               ldi  a,(hl)
 ROM0:2CFE 47               ld   b,a
 ROM0:2CFF 7E               ld   a,(hl)
 ROM0:2D00 4F               ld   c,a
 ROM0:2D01 3E 0A            ld   a,0A
 ROM0:2D03 F5               push af
 ROM0:2D04 FA 04 DF         ld   a,(DF04)
 ROM0:2D07 67               ld   h,a
 ROM0:2D08 FA 05 DF         ld   a,(DF05)
 ROM0:2D0B 6F               ld   l,a
 ROM0:2D0C CD CA 29         call 29CA           // Carry Flag active if DE < HL, A = 0 if DE = HL
 ROM0:2D0F 28 0F            jr   z,2D20
 ROM0:2D11 F1               pop  af
 ROM0:2D12 77               ld   (hl),a
 ROM0:2D13 23               inc  hl
 ROM0:2D14 7C               ld   a,h
 ROM0:2D15 EA 04 DF         ld   (DF04),a
 ROM0:2D18 7D               ld   a,l
 ROM0:2D19 EA 05 DF         ld   (DF05),a
 ROM0:2D1C E1               pop  hl
 ROM0:2D1D 23               inc  hl
 ROM0:2D1E 23               inc  hl
 ROM0:2D1F C9               ret  
 ROM0:2D20 21 0E DC         ld   hl,DC0E
 ROM0:2D23 36 00            ld   (hl),00
 ROM0:2D25 21 0F DC         ld   hl,DC0F
 ROM0:2D28 36 00            ld   (hl),00
 ROM0:2D2A F1               pop  af
 ROM0:2D2B E1               pop  hl
 ROM0:2D2C 23               inc  hl
 ROM0:2D2D C9               ret  
 ROM0:2D2E F0 80            ld   a,(ff00+80)
 ROM0:2D30 F5               push af
 ROM0:2D31 3E 33            ld   a,33
 ROM0:2D33 E0 80            ld   (ff00+80),a
 ROM0:2D35 EA 00 20         ld   (2000),a
 ROM0:2D38 62               ld   h,d
 ROM0:2D39 6B               ld   l,e
 ROM0:2D3A 01 07 02         ld   bc,0207
 ROM0:2D3D CD 38 2B         call 2B38           // VRA0[$9800] 1024 byte string holds dialogue (BC is starting coordinates, HL is dialogue pointer)
 ROM0:2D40 EF 31 8C 71                          
 ROM0:2D44 F1               pop  af
 ROM0:2D45 E0 80            ld   (ff00+80),a
 ROM0:2D47 EA 00 20         ld   (2000),a
 ROM0:2D4A C9               ret  
 ROM0:2D4B F0 80            ld   a,(ff00+80)
 ROM0:2D4D F5               push af
 ROM0:2D4E 3E 33            ld   a,33
 ROM0:2D50 E0 80            ld   (ff00+80),a
 ROM0:2D52 EA 00 20         ld   (2000),a
 ROM0:2D55 62               ld   h,d
 ROM0:2D56 6B               ld   l,e
 ROM0:2D57 01 07 02         ld   bc,0207
 ROM0:2D5A CD 38 2B         call 2B38           // VRA0[$9800] 1024 byte string holds dialogue (BC is starting coordinates, HL is dialogue pointer)
 ROM0:2D5D F1               pop  af
 ROM0:2D5E E0 80            ld   (ff00+80),a
 ROM0:2D60 EA 00 20         ld   (2000),a
 ROM0:2D63 C9               ret  
 ROM0:2D64 E5               push hl
 ROM0:2D65 1A               ld   a,(de)
 ROM0:2D66 B7               or   a
 ROM0:2D67 28 04            jr   z,2D6D
 ROM0:2D69 22               ldi  (hl),a
 ROM0:2D6A 13               inc  de
 ROM0:2D6B 18 F8            jr   2D65
 ROM0:2D6D 36 00            ld   (hl),00
 ROM0:2D6F E1               pop  hl
 ROM0:2D70 C9               ret  
 ROM0:2D71 E5               push hl
 ROM0:2D72 2A               ldi  a,(hl)
 ROM0:2D73 B7               or   a
 ROM0:2D74 20 FC            jr   nz,2D72
 ROM0:2D76 2B               dec  hl
 ROM0:2D77 CD 64 2D         call 2D64
 ROM0:2D7A E1               pop  hl
 ROM0:2D7B C9               ret  
 ROM0:2D7C F0 82            ld   a,(ff00+82)
 ROM0:2D7E F5               push af
 ROM0:2D7F C5               push bc
 ROM0:2D80 E5               push hl
 ROM0:2D81 3E 04            ld   a,04
 ROM0:2D83 E0 82            ld   (ff00+82),a
 ROM0:2D85 E0 70            ld   (ff00+70),a
 ROM0:2D87 01 80 02         ld   bc,0280
 ROM0:2D8A 21 00 D0         ld   hl,D000
 ROM0:2D8D AF               xor  a
 ROM0:2D8E CD 79 3B         call 3B79           // Empties WRA4($D000) to WRA4($D27F)
 ROM0:2D91 01 28 00         ld   bc,0028
 ROM0:2D94 21 80 D2         ld   hl,D280
 ROM0:2D97 AF               xor  a
 ROM0:2D98 CD 79 3B         call 3B79           // Empties WRA4($D280) to WRA4($D2A7)
 ROM0:2D9B AF               xor  a
 ROM0:2D9C E0 B7            ld   (ff00+B7),a    // Resets active sprite count
 ROM0:2D9E 3E 01            ld   a,01
 ROM0:2DA0 EA A8 D2         ld   (D2A8),a
 ROM0:2DA3 3E FF            ld   a,FF
 ROM0:2DA5 EA A9 D2         ld   (D2A9),a
 ROM0:2DA8 3E 29            ld   a,29
 ROM0:2DAA EA D2 D2         ld   (D2D2),a
 ROM0:2DAD 3E FF            ld   a,FF
 ROM0:2DAF EA D3 D2         ld   (D2D3),a
 ROM0:2DB2 3E FF            ld   a,FF
 ROM0:2DB4 EA FC D2         ld   (D2FC),a
 ROM0:2DB7 3E 28            ld   a,28
 ROM0:2DB9 EA FD D2         ld   (D2FD),a
 ROM0:2DBC 21 00 C4         ld   hl,C400
 ROM0:2DBF 01 A0 00         ld   bc,00A0
 ROM0:2DC2 AF               xor  a
 ROM0:2DC3 CD 79 3B         call 3B79           // Empties ($C400) to ($C49F)
 ROM0:2DC6 3E 28            ld   a,28
 ROM0:2DC8 E0 BC            ld   (ff00+BC),a
 ROM0:2DCA 3E 01            ld   a,01
 ROM0:2DCC EA 0E C0         ld   (C00E),a
 ROM0:2DCF E1               pop  hl
 ROM0:2DD0 C1               pop  bc
 ROM0:2DD1 F1               pop  af
 ROM0:2DD2 E0 82            ld   (ff00+82),a
 ROM0:2DD4 E0 70            ld   (ff00+70),a
 ROM0:2DD6 C9               ret                 // Resets all Sprite-related data
 ROM0:2DD7 C5               push bc
 ROM0:2DD8 E5               push hl
 ROM0:2DD9 06 00            ld   b,00
 ROM0:2DDB CD 48 30         call 3048           // HL = $D000 + A * 16
 ROM0:2DDE 01 10 00         ld   bc,0010
 ROM0:2DE1 AF               xor  a
 ROM0:2DE2 CD 79 3B         call 3B79           // Empties ($D000 + A * 16) to ($D00F + A * 16)
 ROM0:2DE5 E1               pop  hl
 ROM0:2DE6 C1               pop  bc
 ROM0:2DE7 C9               ret  
 ROM0:2DE8 E5               push hl
 ROM0:2DE9 E0 BA            ld   (ff00+BA),a
 ROM0:2DEB F0 82            ld   a,(ff00+82)
 ROM0:2DED F5               push af
 ROM0:2DEE 3E 04            ld   a,04
 ROM0:2DF0 E0 82            ld   (ff00+82),a
 ROM0:2DF2 E0 70            ld   (ff00+70),a
 ROM0:2DF4 F0 BA            ld   a,(ff00+BA)
 ROM0:2DF6 CD C5 2F         call 2FC5           // A = number of already active sprites, also establishes later clear-up stats for sprite and prepares sprite's general stats table with cleansing
 ROM0:2DF9 FE 28            cp   a,28
 ROM0:2DFB 28 17            jr   z,2E14         // Ends immediately if already maxed
 ROM0:2DFD C5               push bc
 ROM0:2DFE 06 04            ld   b,04
 ROM0:2E00 CD 48 30         call 3048           // HL = $D004 + A * 16
 ROM0:2E03 C1               pop  bc
 ROM0:2E04 71               ld   (hl),c
 ROM0:2E05 23               inc  hl             // HL = $D005
 ROM0:2E06 70               ld   (hl),b
 ROM0:2E07 23               inc  hl
 ROM0:2E08 23               inc  hl
 ROM0:2E09 23               inc  hl             // HL = $D008
 ROM0:2E0A 73               ld   (hl),e
 ROM0:2E0B 23               inc  hl
 ROM0:2E0C 72               ld   (hl),d
 ROM0:2E0D F0 B8            ld   a,(ff00+B8)    // A = number of bytes starting at ($D280) before a result of 0
 ROM0:2E0F CD 77 31         call 3177           // [$D006 + A * 16] 2 byte reverse holds new pointer for used sprite stats modification table, [$DxxA] and [$DxxB] updated accordingly
 ROM0:2E12 18 02            jr   2E16           // New sprite graphics table prepared
 ROM0:2E14 E0 B8            ld   (ff00+B8),a
 ROM0:2E16 F1               pop  af
 ROM0:2E17 E0 82            ld   (ff00+82),a
 ROM0:2E19 E0 70            ld   (ff00+70),a
 ROM0:2E1B F0 B8            ld   a,(ff00+B8)    // A = number of bytes starting at ($D280) before a result of 0, to a maximum of 40 bytes
 ROM0:2E1D E1               pop  hl
 ROM0:2E1E C9               ret                 // A = number of already active sprites; $Dxx5, $Dxx6, and $Dxx8~$DxxB prepared (B is ROM Block of Sprite, C is base Character Tile # / 2 with bit 7 determining VRAM Bank; and DE is pointer to sprite stats modification tables pointers)
 ROM0:2E1F C5               push bc
 ROM0:2E20 D5               push de
 ROM0:2E21 E5               push hl
 ROM0:2E22 FE 28            cp   a,28
 ROM0:2E24 30 3D            jr   nc,2E63        // Ends immediately if A >= 40
 ROM0:2E26 06 00            ld   b,00
 ROM0:2E28 4F               ld   c,a
 ROM0:2E29 F0 82            ld   a,(ff00+82)
 ROM0:2E2B F5               push af
 ROM0:2E2C 3E 04            ld   a,04
 ROM0:2E2E E0 82            ld   (ff00+82),a
 ROM0:2E30 E0 70            ld   (ff00+70),a
 ROM0:2E32 21 80 D2         ld   hl,D280
 ROM0:2E35 09               add  hl,bc          // HL = $D280 + 0~39 value
 ROM0:2E36 7E               ld   a,(hl)
 ROM0:2E37 A7               and  a
 ROM0:2E38 28 24            jr   z,2E5E         // Ends immediately if WRA4($D280 + 0~39 value) is empty
 ROM0:2E3A AF               xor  a
 ROM0:2E3B 77               ld   (hl),a         // Empties WRA4($D280 + 0~39 value)
 ROM0:2E3C 79               ld   a,c            // A = 0~39 value
 ROM0:2E3D CD D7 2D         call 2DD7           // Empties WRA4($D000 + 0~39 value * 16) to WRA4($D00F + 0~39 value * 16)
 ROM0:2E40 21 D4 D2         ld   hl,D2D4
 ROM0:2E43 09               add  hl,bc          // HL = $D2D4 + 0~39 value
 ROM0:2E44 5E               ld   e,(hl)         // E = WRA4($D2D4 + 0~39 value)
 ROM0:2E45 AF               xor  a
 ROM0:2E46 77               ld   (hl),a         // WRA4($D2D4 + 0~39 value) = 0
 ROM0:2E47 21 AA D2         ld   hl,D2AA
 ROM0:2E4A 09               add  hl,bc          // HL = $D2AA + 0~39 value
 ROM0:2E4B 56               ld   d,(hl)         // D = WRA4($D2AA + 0~39 value)
 ROM0:2E4C AF               xor  a
 ROM0:2E4D 77               ld   (hl),a         // WRA4($D2AA + 0~39 value) = 0
 ROM0:2E4E 21 AA D2         ld   hl,D2AA
 ROM0:2E51 4B               ld   c,e            // C = WRA4($D2D4 + 0~39 value)
 ROM0:2E52 09               add  hl,bc          // HL = $D2AA + WRA4($D2D4 + 0~39 value)
 ROM0:2E53 72               ld   (hl),d         // WRA4($D2AA + WRA4($D2D4 + 0~39 value)) = WRA4($D2AA + 0~39 value)
 ROM0:2E54 21 D4 D2         ld   hl,D2D4
 ROM0:2E57 4A               ld   c,d            // C = WRA4($D2AA + 0~39 value)
 ROM0:2E58 09               add  hl,bc          // HL = $D2D4 + WRA4($D2AA + 0~39 value)
 ROM0:2E59 73               ld   (hl),e         // WRA4($D2D4 + WRA4($D2AA + 0~39 value)) = WRA4($D2D4 + 0~39 value)
 ROM0:2E5A 21 B7 FF         ld   hl,FFB7
 ROM0:2E5D 35               dec  (hl)
 ROM0:2E5E F1               pop  af
 ROM0:2E5F E0 82            ld   (ff00+82),a
 ROM0:2E61 E0 70            ld   (ff00+70),a
 ROM0:2E63 E1               pop  hl
 ROM0:2E64 D1               pop  de
 ROM0:2E65 C1               pop  bc
 ROM0:2E66 C9               ret                 // Handles clear-up of sprite
 ROM0:2E67 C5               push bc
 ROM0:2E68 E5               push hl
 ROM0:2E69 06 00            ld   b,00
 ROM0:2E6B 78               ld   a,b            // Loop begins here
 ROM0:2E6C CD 1F 2E         call 2E1F           // Handles clear-up of sprite
 ROM0:2E6F 04               inc  b
 ROM0:2E70 78               ld   a,b
 ROM0:2E71 FE 28            cp   a,28
 ROM0:2E73 20 F6            jr   nz,2E6B        // Cycles for all 40 sprites
 ROM0:2E75 21 00 C4         ld   hl,C400
 ROM0:2E78 01 A0 00         ld   bc,00A0
 ROM0:2E7B AF               xor  a
 ROM0:2E7C CD 79 3B         call 3B79           // Empties ($C400) to ($C49F)
 ROM0:2E7F 3E 01            ld   a,01
 ROM0:2E81 EA 0E C0         ld   (C00E),a
 ROM0:2E84 E1               pop  hl
 ROM0:2E85 C1               pop  bc
 ROM0:2E86 C9               ret                 // Handles clear-up of all sprite portions and entire ($C400) table, sets ($C00E) to 1
 ROM0:2E87 CD 48 30         call 3048           // HL = $D000 + A * 16 + B
 ROM0:2E8A F0 82            ld   a,(ff00+82)
 ROM0:2E8C F5               push af
 ROM0:2E8D 3E 04            ld   a,04
 ROM0:2E8F E0 82            ld   (ff00+82),a
 ROM0:2E91 E0 70            ld   (ff00+70),a
 ROM0:2E93 71               ld   (hl),c
 ROM0:2E94 F1               pop  af
 ROM0:2E95 E0 82            ld   (ff00+82),a
 ROM0:2E97 E0 70            ld   (ff00+70),a
 ROM0:2E99 C9               ret                 // WRA4($D000 + A * 16 + B) = C
 ROM0:2E9A CD 48 30         call 3048           // HL = $D000 + A * 16 + B
 ROM0:2E9D F0 82            ld   a,(ff00+82)
 ROM0:2E9F F5               push af
 ROM0:2EA0 3E 04            ld   a,04
 ROM0:2EA2 E0 82            ld   (ff00+82),a
 ROM0:2EA4 E0 70            ld   (ff00+70),a
 ROM0:2EA6 46               ld   b,(hl)
 ROM0:2EA7 F1               pop  af
 ROM0:2EA8 E0 82            ld   (ff00+82),a
 ROM0:2EAA E0 70            ld   (ff00+70),a
 ROM0:2EAC 78               ld   a,b
 ROM0:2EAD C9               ret                 // A = WRA4($D000 + A * 16 + B)
 ROM0:2EAE E5               push hl
 ROM0:2EAF C5               push bc
 ROM0:2EB0 06 01            ld   b,01
 ROM0:2EB2 CD 48 30         call 3048           // HL = $D001 + A * 16
 ROM0:2EB5 C1               pop  bc
 ROM0:2EB6 F0 82            ld   a,(ff00+82)
 ROM0:2EB8 F5               push af
 ROM0:2EB9 3E 04            ld   a,04
 ROM0:2EBB E0 82            ld   (ff00+82),a
 ROM0:2EBD E0 70            ld   (ff00+70),a
 ROM0:2EBF 71               ld   (hl),c
 ROM0:2EC0 23               inc  hl
 ROM0:2EC1 70               ld   (hl),b
 ROM0:2EC2 F1               pop  af
 ROM0:2EC3 E0 82            ld   (ff00+82),a
 ROM0:2EC5 E0 70            ld   (ff00+70),a
 ROM0:2EC7 E1               pop  hl
 ROM0:2EC8 C9               ret                 // WRA4($D001 + A * 16) = C; WRA4($D002 + A * 16) = B
 ROM0:2EC9 D5               push de
 ROM0:2ECA E5               push hl
 ROM0:2ECB 48               ld   c,b
 ROM0:2ECC 06 03            ld   b,03
 ROM0:2ECE CD 9A 2E         call 2E9A           // A = WRA4($D003 + A * 16)
 ROM0:2ED1 E6 F8            and  a,F8
 ROM0:2ED3 B1               or   c              // A = OR B,(AND WRA4($D003 + A * 16),$F8)
 ROM0:2ED4 4F               ld   c,a
 ROM0:2ED5 F0 82            ld   a,(ff00+82)
 ROM0:2ED7 F5               push af
 ROM0:2ED8 3E 04            ld   a,04
 ROM0:2EDA E0 82            ld   (ff00+82),a
 ROM0:2EDC E0 70            ld   (ff00+70),a
 ROM0:2EDE 79               ld   a,c            // A = OR B,(AND WRA4($D003 + A * 16),$F8)
 ROM0:2EDF 77               ld   (hl),a
 ROM0:2EE0 F1               pop  af
 ROM0:2EE1 E0 82            ld   (ff00+82),a
 ROM0:2EE3 E0 70            ld   (ff00+70),a
 ROM0:2EE5 E1               pop  hl
 ROM0:2EE6 D1               pop  de
 ROM0:2EE7 C9               ret                 // WRA4($D003 + A * 16) has Palette bits modified according to B
 ROM0:2EE8 C5               push bc
 ROM0:2EE9 E5               push hl
 ROM0:2EEA 4F               ld   c,a
 ROM0:2EEB C5               push bc
 ROM0:2EEC 06 05            ld   b,05
 ROM0:2EEE CD 48 30         call 3048           // HL = $D005 + A * 16
 ROM0:2EF1 C1               pop  bc
 ROM0:2EF2 F0 82            ld   a,(ff00+82)
 ROM0:2EF4 F5               push af
 ROM0:2EF5 3E 04            ld   a,04
 ROM0:2EF7 E0 82            ld   (ff00+82),a
 ROM0:2EF9 E0 70            ld   (ff00+70),a
 ROM0:2EFB 70               ld   (hl),b         // WRA4($D005 + A * 16) = B
 ROM0:2EFC 23               inc  hl
 ROM0:2EFD 23               inc  hl
 ROM0:2EFE 23               inc  hl
 ROM0:2EFF 73               ld   (hl),e         // WRA4($D008 + A * 16) = E
 ROM0:2F00 23               inc  hl
 ROM0:2F01 72               ld   (hl),d         // WRA4($D009 + A * 16) = D
 ROM0:2F02 23               inc  hl
 ROM0:2F03 AF               xor  a
 ROM0:2F04 77               ld   (hl),a         // WRA4($D00A + A * 16) = 0
 ROM0:2F05 79               ld   a,c
 ROM0:2F06 CD 77 31         call 3177           // [$D006 + A * 16] 2 byte reverse holds new pointer for used sprite stats modification table, [$DxxA] and [$DxxB] updated accordingly
 ROM0:2F09 F1               pop  af
 ROM0:2F0A E0 82            ld   (ff00+82),a
 ROM0:2F0C E0 70            ld   (ff00+70),a
 ROM0:2F0E E1               pop  hl
 ROM0:2F0F C1               pop  bc
 ROM0:2F10 C9               ret                 // WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
 ROM0:2F11 C5               push bc
 ROM0:2F12 E5               push hl
 ROM0:2F13 06 00            ld   b,00
 ROM0:2F15 CD 48 30         call 3048           // HL = $D000 + A * 16 + B
 ROM0:2F18 F0 82            ld   a,(ff00+82)
 ROM0:2F1A F5               push af
 ROM0:2F1B 3E 04            ld   a,04
 ROM0:2F1D E0 82            ld   (ff00+82),a
 ROM0:2F1F E0 70            ld   (ff00+70),a
 ROM0:2F21 CB CE            set  1,(hl)
 ROM0:2F23 F1               pop  af
 ROM0:2F24 E0 82            ld   (ff00+82),a
 ROM0:2F26 E0 70            ld   (ff00+70),a
 ROM0:2F28 E1               pop  hl
 ROM0:2F29 C1               pop  bc
 ROM0:2F2A C9               ret                 // set 1,WRA4[$D000 + A * 16]
 ROM0:2F2B C5               push bc
 ROM0:2F2C E5               push hl
 ROM0:2F2D 06 00            ld   b,00
 ROM0:2F2F CD 48 30         call 3048           // HL = $D000 + A * 16
 ROM0:2F32 F0 82            ld   a,(ff00+82)
 ROM0:2F34 F5               push af
 ROM0:2F35 3E 04            ld   a,04
 ROM0:2F37 E0 82            ld   (ff00+82),a
 ROM0:2F39 E0 70            ld   (ff00+70),a
 ROM0:2F3B CB 8E            res  1,(hl)
 ROM0:2F3D F1               pop  af
 ROM0:2F3E E0 82            ld   (ff00+82),a
 ROM0:2F40 E0 70            ld   (ff00+70),a
 ROM0:2F42 E1               pop  hl
 ROM0:2F43 C1               pop  bc
 ROM0:2F44 C9               ret                 // res 1,WRA4[$D000 + A * 16]
 ROM0:2F45 C5               push bc
 ROM0:2F46 E5               push hl
 ROM0:2F47 06 00            ld   b,00
 ROM0:2F49 CD 48 30         call 3048           // HL = $D000 + A * 16
 ROM0:2F4C F0 82            ld   a,(ff00+82)
 ROM0:2F4E F5               push af
 ROM0:2F4F 3E 04            ld   a,04
 ROM0:2F51 E0 82            ld   (ff00+82),a
 ROM0:2F53 E0 70            ld   (ff00+70),a
 ROM0:2F55 CB 86            res  0,(hl)         // res 0,($D000 + A * 16) WRAM bank 4
 ROM0:2F57 F1               pop  af
 ROM0:2F58 E0 82            ld   (ff00+82),a
 ROM0:2F5A E0 70            ld   (ff00+70),a
 ROM0:2F5C E1               pop  hl
 ROM0:2F5D C1               pop  bc
 ROM0:2F5E C9               ret                 // res 0,($D000 + A * 16) WRAM bank 4
 ROM0:2F5F C5               push bc
 ROM0:2F60 E5               push hl
 ROM0:2F61 06 00            ld   b,00
 ROM0:2F63 CD 48 30         call 3048           // HL = $D000 + A * 16
 ROM0:2F66 F0 82            ld   a,(ff00+82)
 ROM0:2F68 F5               push af
 ROM0:2F69 3E 04            ld   a,04
 ROM0:2F6B E0 82            ld   (ff00+82),a
 ROM0:2F6D E0 70            ld   (ff00+70),a
 ROM0:2F6F CB C6            set  0,(hl)
 ROM0:2F71 F1               pop  af
 ROM0:2F72 E0 82            ld   (ff00+82),a
 ROM0:2F74 E0 70            ld   (ff00+70),a
 ROM0:2F76 E1               pop  hl
 ROM0:2F77 C1               pop  bc
 ROM0:2F78 C9               ret                 // set 0,($D000 + A * 16) WRAM bank 4
 ROM0:2F79 C5               push bc
 ROM0:2F7A E5               push hl
 ROM0:2F7B F0 82            ld   a,(ff00+82)
 ROM0:2F7D F5               push af
 ROM0:2F7E 3E 04            ld   a,04
 ROM0:2F80 E0 82            ld   (ff00+82),a
 ROM0:2F82 E0 70            ld   (ff00+70),a
 ROM0:2F84 21 80 D2         ld   hl,D280
 ROM0:2F87 06 00            ld   b,00
 ROM0:2F89 2A               ldi  a,(hl)         // Loop begins here
 ROM0:2F8A A7               and  a
 ROM0:2F8B 28 04            jr   z,2F91         // End cycle if given byte is empty
 ROM0:2F8D 78               ld   a,b
 ROM0:2F8E CD 45 2F         call 2F45           // res 0,($D000 + B * 16) WRAM bank 4
 ROM0:2F91 04               inc  b
 ROM0:2F92 78               ld   a,b
 ROM0:2F93 FE 28            cp   a,28
 ROM0:2F95 20 F2            jr   nz,2F89
 ROM0:2F97 F1               pop  af
 ROM0:2F98 E0 82            ld   (ff00+82),a
 ROM0:2F9A E0 70            ld   (ff00+70),a
 ROM0:2F9C E1               pop  hl
 ROM0:2F9D C1               pop  bc
 ROM0:2F9E C9               ret                 // res 0,WRA4($Dxx0) for every active sprite
 ROM0:2F9F C5               push bc
 ROM0:2FA0 E5               push hl
 ROM0:2FA1 F0 82            ld   a,(ff00+82)
 ROM0:2FA3 F5               push af
 ROM0:2FA4 3E 04            ld   a,04
 ROM0:2FA6 E0 82            ld   (ff00+82),a
 ROM0:2FA8 E0 70            ld   (ff00+70),a
 ROM0:2FAA 21 80 D2         ld   hl,D280
 ROM0:2FAD 06 00            ld   b,00
 ROM0:2FAF 2A               ldi  a,(hl)         // Loop begins here
 ROM0:2FB0 A7               and  a
 ROM0:2FB1 28 04            jr   z,2FB7         // End cycle if given byte is empty
 ROM0:2FB3 78               ld   a,b
 ROM0:2FB4 CD 5F 2F         call 2F5F           // set 0,WRA4($D000 + B * 16)
 ROM0:2FB7 04               inc  b
 ROM0:2FB8 78               ld   a,b
 ROM0:2FB9 FE 28            cp   a,28
 ROM0:2FBB 20 F2            jr   nz,2FAF
 ROM0:2FBD F1               pop  af
 ROM0:2FBE E0 82            ld   (ff00+82),a
 ROM0:2FC0 E0 70            ld   (ff00+70),a
 ROM0:2FC2 E1               pop  hl
 ROM0:2FC3 C1               pop  bc
 ROM0:2FC4 C9               ret                 // set 0,WRA4($Dxx0) for every active sprite
 ROM0:2FC5 A7               and  a
 ROM0:2FC6 28 20            jr   z,2FE8         // If A = 0, end immediately with A = 40
 ROM0:2FC8 C5               push bc
 ROM0:2FC9 E5               push hl
 ROM0:2FCA E0 BA            ld   (ff00+BA),a
 ROM0:2FCC CD EB 2F         call 2FEB           // A = number of bytes starting at ($D280) before a result of 0, to a maximum of 40 bytes
 ROM0:2FCF FE 28            cp   a,28
 ROM0:2FD1 28 12            jr   z,2FE5         // If above result is 40, end immediately with A = 40
 ROM0:2FD3 E0 B8            ld   (ff00+B8),a    // ($FFB8) stores number of bytes starting at ($D280) before a result of 0
 ROM0:2FD5 F0 BA            ld   a,(ff00+BA)    // Initial A
 ROM0:2FD7 CD 00 30         call 3000           // Updates later clear-up stats for sprite, also sets ($D280 + ($FFB8)) to initial A
 ROM0:2FDA F0 B8            ld   a,(ff00+B8)
 ROM0:2FDC CD D7 2D         call 2DD7           // Empties ($D000 + A * 16) to ($D00F + A * 16)
 ROM0:2FDF 21 B7 FF         ld   hl,FFB7
 ROM0:2FE2 34               inc  (hl)
 ROM0:2FE3 F0 B8            ld   a,(ff00+B8)    // A = number of bytes starting at ($D280) before a result of 0, to a maximum of 40 bytes
 ROM0:2FE5 E1               pop  hl
 ROM0:2FE6 C1               pop  bc
 ROM0:2FE7 C9               ret                 // A = number of already active sprites, also establishes later clear-up stats for sprite and prepares sprite's general stats table with cleansing
 ROM0:2FE8 3E 28            ld   a,28
 ROM0:2FEA C9               ret  
 ROM0:2FEB C5               push bc
 ROM0:2FEC E5               push hl
 ROM0:2FED 21 80 D2         ld   hl,D280
 ROM0:2FF0 06 00            ld   b,00
 ROM0:2FF2 2A               ldi  a,(hl)         // Loop begins here
 ROM0:2FF3 A7               and  a
 ROM0:2FF4 28 06            jr   z,2FFC
 ROM0:2FF6 04               inc  b
 ROM0:2FF7 78               ld   a,b
 ROM0:2FF8 FE 28            cp   a,28
 ROM0:2FFA 20 F6            jr   nz,2FF2
 ROM0:2FFC 78               ld   a,b
 ROM0:2FFD E1               pop  hl
 ROM0:2FFE C1               pop  bc
 ROM0:2FFF C9               ret                 // A = number of bytes starting at ($D280) before a result of 0, to a maximum of 40 bytes
 ROM0:3000 C5               push bc
 ROM0:3001 D5               push de
 ROM0:3002 E5               push hl
 ROM0:3003 E0 BA            ld   (ff00+BA),a
 ROM0:3005 57               ld   d,a
 ROM0:3006 FA D2 D2         ld   a,(D2D2)
 ROM0:3009 4F               ld   c,a
 ROM0:300A 06 00            ld   b,00
 ROM0:300C 21 80 D2         ld   hl,D280        // Loop begins here
 ROM0:300F 09               add  hl,bc
 ROM0:3010 7E               ld   a,(hl)         // A = ($D2A9) for first loop
 ROM0:3011 BA               cp   d
 ROM0:3012 30 07            jr   nc,301B
 ROM0:3014 21 AA D2         ld   hl,D2AA
 ROM0:3017 09               add  hl,bc
 ROM0:3018 4E               ld   c,(hl)         // C = ($D2D3) for first loop
 ROM0:3019 18 F1            jr   300C
 ROM0:301B F0 B8            ld   a,(ff00+B8)
 ROM0:301D 5F               ld   e,a
 ROM0:301E 16 00            ld   d,00           // DE = number of bytes starting at ($D280) before a result of 0, to a maximum of 40 bytes
 ROM0:3020 21 AA D2         ld   hl,D2AA
 ROM0:3023 19               add  hl,de          // HL = $D2AA + ($FFB8)
 ROM0:3024 71               ld   (hl),c
 ROM0:3025 21 D4 D2         ld   hl,D2D4
 ROM0:3028 06 00            ld   b,00
 ROM0:302A 09               add  hl,bc          // If ($D2D2) is 41, HL = $D2FD
 ROM0:302B 46               ld   b,(hl)
 ROM0:302C 73               ld   (hl),e
 ROM0:302D 21 AA D2         ld   hl,D2AA
 ROM0:3030 78               ld   a,b
 ROM0:3031 85               add  l
 ROM0:3032 6F               ld   l,a
 ROM0:3033 7C               ld   a,h
 ROM0:3034 CE 00            adc  a,00
 ROM0:3036 67               ld   h,a
 ROM0:3037 73               ld   (hl),e
 ROM0:3038 21 D4 D2         ld   hl,D2D4
 ROM0:303B 19               add  hl,de
 ROM0:303C 70               ld   (hl),b
 ROM0:303D 21 80 D2         ld   hl,D280
 ROM0:3040 19               add  hl,de
 ROM0:3041 F0 BA            ld   a,(ff00+BA)
 ROM0:3043 77               ld   (hl),a
 ROM0:3044 E1               pop  hl
 ROM0:3045 D1               pop  de
 ROM0:3046 C1               pop  bc
 ROM0:3047 C9               ret                 // Updates later clear-up stats for sprite, also sets ($D280 + ($FFB8)) to initial A
 ROM0:3048 CB 37            swap a
 ROM0:304A 67               ld   h,a
 ROM0:304B E6 F0            and  a,F0
 ROM0:304D 80               add  b
 ROM0:304E 6F               ld   l,a
 ROM0:304F 7C               ld   a,h
 ROM0:3050 E6 0F            and  a,0F
 ROM0:3052 C6 D0            add  a,D0
 ROM0:3054 67               ld   h,a
 ROM0:3055 C9               ret                 // HL = $D000 + A * 16 + B
 ROM0:3056 F0 80            ld   a,(ff00+80)
 ROM0:3058 F5               push af             // Store active block
 ROM0:3059 F0 82            ld   a,(ff00+82)
 ROM0:305B F5               push af             // Stores WRAM Bank
 ROM0:305C 3E 04            ld   a,04
 ROM0:305E E0 82            ld   (ff00+82),a
 ROM0:3060 E0 70            ld   (ff00+70),a    // WRAM Bank 4
 ROM0:3062 3E 28            ld   a,28
 ROM0:3064 E0 BB            ld   (ff00+BB),a    // ($FFBB) = 40
 ROM0:3066 AF               xor  a
 ROM0:3067 E0 BD            ld   (ff00+BD),a    // ($FFBD) = 0
 ROM0:3069 FA D2 D2         ld   a,(D2D2)
 ROM0:306C E0 B9            ld   (ff00+B9),a    // ($FFB9) = Last active sprite ID #, 41 if no active sprites
 ROM0:306E 18 29            jr   3099
 ROM0:3070 CB 37            swap a              // Yes this mess loops.
 ROM0:3072 67               ld   h,a
 ROM0:3073 E6 F0            and  a,F0
 ROM0:3075 6F               ld   l,a
 ROM0:3076 7C               ld   a,h
 ROM0:3077 E6 0F            and  a,0F
 ROM0:3079 C6 D0            add  a,D0
 ROM0:307B 67               ld   h,a
 ROM0:307C CB 4E            bit  1,(hl)         // bit 1,($D000 + A * 16)
 ROM0:307E 20 03            jr   nz,3083        // Skip next line if bit 1 is active
 ROM0:3080 CD 4A 31         call 314A           // (If not skipped) [$D006 + [$FFB9] * 16] 2 byte and respective graphics timer bytes updated based on if [$D00B + [$FFB9] * 16] is 0
 ROM0:3083 F0 B9            ld   a,(ff00+B9)    // A = ($FFB9)
 ROM0:3085 CD CA 30         call 30CA           // Establishes sprite's portions in $C400 table, decrements 1 per portion from ($FFBB)
 ROM0:3088 F0 BB            ld   a,(ff00+BB)    // A = Remaining allowed sprite portions
 ROM0:308A A7               and  a
 ROM0:308B 28 28            jr   z,30B5         // End with ($FFBC) = 0 and ($C00E) = 1 if capacity was met
 ROM0:308D 21 AA D2         ld   hl,D2AA
 ROM0:3090 F0 B9            ld   a,(ff00+B9)
 ROM0:3092 4F               ld   c,a
 ROM0:3093 06 00            ld   b,00           // BC = ($FFB9)
 ROM0:3095 09               add  hl,bc          // HL = $D2AA + ($FFB9)
 ROM0:3096 7E               ld   a,(hl)
 ROM0:3097 E0 B9            ld   (ff00+B9),a    // ($FFB9) = ($D2AA + ($FFB9))
 ROM0:3099 FE 28            cp   a,28
 ROM0:309B 38 D3            jr   c,3070         // Not this mess again.
 ROM0:309D F0 BC            ld   a,(ff00+BC)
 ROM0:309F 47               ld   b,a
 ROM0:30A0 F0 BB            ld   a,(ff00+BB)
 ROM0:30A2 90               sub  b              // A = ($FFBB) - ($FFBC)
 ROM0:30A3 38 10            jr   c,30B5
 ROM0:30A5 28 0E            jr   z,30B5         // Jump to ending stuff unless ($FFBB) > ($FFBC)
 ROM0:30A7 47               ld   b,a            // B = ($FFBB) - ($FFBC)
 ROM0:30A8 F0 BD            ld   a,(ff00+BD)
 ROM0:30AA 6F               ld   l,a
 ROM0:30AB 26 C4            ld   h,C4           // HL = $C400 + ($FFBD)
 ROM0:30AD AF               xor  a
 ROM0:30AE 22               ldi  (hl),a
 ROM0:30AF 22               ldi  (hl),a
 ROM0:30B0 22               ldi  (hl),a
 ROM0:30B1 22               ldi  (hl),a
 ROM0:30B2 05               dec  b
 ROM0:30B3 20 F9            jr   nz,30AE        // Clears expired sprite portion data
 ROM0:30B5 F0 BB            ld   a,(ff00+BB)    // Ending stuff
 ROM0:30B7 E0 BC            ld   (ff00+BC),a
 ROM0:30B9 3E 01            ld   a,01
 ROM0:30BB EA 0E C0         ld   (C00E),a
 ROM0:30BE F1               pop  af
 ROM0:30BF E0 82            ld   (ff00+82),a
 ROM0:30C1 E0 70            ld   (ff00+70),a
 ROM0:30C3 F1               pop  af
 ROM0:30C4 E0 80            ld   (ff00+80),a
 ROM0:30C6 EA 00 20         ld   (2000),a
 ROM0:30C9 C9               ret                 // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROM0:30CA C5               push bc
 ROM0:30CB CB 37            swap a
 ROM0:30CD 67               ld   h,a
 ROM0:30CE E6 F0            and  a,F0
 ROM0:30D0 6F               ld   l,a
 ROM0:30D1 7C               ld   a,h
 ROM0:30D2 E6 0F            and  a,0F
 ROM0:30D4 C6 D0            add  a,D0
 ROM0:30D6 67               ld   h,a
 ROM0:30D7 CB 46            bit  0,(hl)         // bit 0,($D000 + A * 16)
 ROM0:30D9 20 6D            jr   nz,3148        // Ends immediately if bit 0,($D000 + A * 16) is on
 ROM0:30DB 2A               ldi  a,(hl)
 ROM0:30DC E0 BE            ld   (ff00+BE),a    // ($FFBE) = ($D000 + A * 16)
 ROM0:30DE 2A               ldi  a,(hl)
 ROM0:30DF E0 BF            ld   (ff00+BF),a    // ($FFBF) = ($D001 + A * 16)
 ROM0:30E1 2A               ldi  a,(hl)
 ROM0:30E2 E0 C0            ld   (ff00+C0),a    // ($FFC0) = ($D002 + A * 16)
 ROM0:30E4 2A               ldi  a,(hl)
 ROM0:30E5 E0 C1            ld   (ff00+C1),a    // ($FFC1) = ($D003 + A * 16)
 ROM0:30E7 2A               ldi  a,(hl)
 ROM0:30E8 E0 C2            ld   (ff00+C2),a    // ($FFC2) = ($D004 + A * 16)
 ROM0:30EA 2A               ldi  a,(hl)
 ROM0:30EB E0 80            ld   (ff00+80),a    // ($FF80) = ($D005 + A * 16)
 ROM0:30ED EA 00 20         ld   (2000),a       // ($2000) = ($D005 + A * 16)
 ROM0:30F0 2A               ldi  a,(hl)
 ROM0:30F1 5F               ld   e,a            // E = ($D006 + A * 16)
 ROM0:30F2 56               ld   d,(hl)         // D = ($D007 + A * 16)
 ROM0:30F3 1A               ld   a,(de)         // A = (($D006 + A * 16))
 ROM0:30F4 13               inc  de             // DE = ($D006 + A * 16) + 1
 ROM0:30F5 E0 C7            ld   (ff00+C7),a    // ($FFC7) = (($D006 + A * 16))
 ROM0:30F7 F0 BF            ld   a,(ff00+BF)    // A = ($D001 + A * 16) <-- start of loop
 ROM0:30F9 4F               ld   c,a            // C = ($D001 + A * 16)
 ROM0:30FA 1A               ld   a,(de)         // A = (($D006 + A * 16) + 1 + loops * 4)
 ROM0:30FB 13               inc  de
 ROM0:30FC 81               add  c              // A = (($D006 + A * 16) + 1 + loops * 4) + ($D001 + A * 16) (exact Y coordinate of sprite)
 ROM0:30FD E0 C3            ld   (ff00+C3),a    // ($FFC3) = exact Y coordinate of sprite
 ROM0:30FF F0 C0            ld   a,(ff00+C0)    // A = ($D002 + A * 16)
 ROM0:3101 4F               ld   c,a            // C = ($D002 + A * 16)
 ROM0:3102 1A               ld   a,(de)         // A = (($D006 + A * 16) + 2 + loops * 4)
 ROM0:3103 13               inc  de
 ROM0:3104 81               add  c              // A = (($D006 + A * 16) + 2 + loops * 4) + ($D002 + A * 16) (exact X coordinate of sprite)
 ROM0:3105 E0 C4            ld   (ff00+C4),a    // ($FFC4) = exact X coordinate of sprite
 ROM0:3107 F0 C2            ld   a,(ff00+C2)    // A = ($D004 + A * 16)
 ROM0:3109 6F               ld   l,a            // L = ($D004 + A * 16)
 ROM0:310A 26 00            ld   h,00
 ROM0:310C 29               add  hl,hl          // HL = ($D004 + A * 16) * 2
 ROM0:310D 1A               ld   a,(de)         // A = (($D006 + A * 16) + 3 + loops * 4)
 ROM0:310E 13               inc  de
 ROM0:310F 4F               ld   c,a            // C = (($D006 + A * 16) + 3 + loops * 4)
 ROM0:3110 06 00            ld   b,00
 ROM0:3112 09               add  hl,bc          // HL = ($D004 + A * 16) * 2 + (($D006 + A * 16) + 3 + loops * 4)
 ROM0:3113 7D               ld   a,l            // A = (($D004 + A * 16) * 2 + (($D006 + A * 16) + 3 + loops * 4))%256 (exact character tile of sprite)
 ROM0:3114 E0 C5            ld   (ff00+C5),a    // ($FFC5) = exact character tile of sprite
 ROM0:3116 7C               ld   a,h            // A = (($D004 + A * 16) * 2 + (($D006 + A * 16) + 3 + loops * 4)) / 256
 ROM0:3117 07               rlca 
 ROM0:3118 07               rlca 
 ROM0:3119 07               rlca                // A = ((($D004 + A * 16) * 2) / 256) * 8 (VRAM Bank of sprite)
 ROM0:311A E0 C6            ld   (ff00+C6),a    // ($FFC6) = ((($D004 + A * 16) * 2) / 256) * 8
 ROM0:311C F0 C1            ld   a,(ff00+C1)    // A = ($D003 + A * 16)
 ROM0:311E 4F               ld   c,a            // C = ($D003 + A * 16)
 ROM0:311F F0 C6            ld   a,(ff00+C6)    // A = ((($D004 + A * 16) * 2) / 256) * 8
 ROM0:3121 47               ld   b,a            // B = ((($D004 + A * 16) * 2) / 256) * 8
 ROM0:3122 1A               ld   a,(de)         // A = (($D006 + A * 16) + 4 + loops * 4)
 ROM0:3123 13               inc  de
 ROM0:3124 B0               or   b              // A = ((($D004 + A * 16) * 2) / 256) * 8 OR (($D006 + A * 16) + 4 + loops * 4)
 ROM0:3125 81               add  c              // A = ((($D004 + A * 16) * 2) / 256) * 8 OR (($D006 + A * 16) + 4 + loops * 4) + ($D003 + A * 16) (exact attributes of sprite)
 ROM0:3126 E0 C6            ld   (ff00+C6),a    // ($FFC6) = exact attributes of sprite
 ROM0:3128 F0 BD            ld   a,(ff00+BD)    // A = ($FFBD)
 ROM0:312A 6F               ld   l,a            // L = ($FFBD)
 ROM0:312B 26 C4            ld   h,C4           // H = 196
 ROM0:312D F0 C3            ld   a,(ff00+C3)    // A = exact Y coordinate of sprite
 ROM0:312F 22               ldi  (hl),a         // ($C400 + ($FFBD)) = exact Y coordinate of sprite
 ROM0:3130 F0 C4            ld   a,(ff00+C4)    // A = exact X coordinate of sprite
 ROM0:3132 22               ldi  (hl),a         // ($C401 + ($FFBD)) = exact X coordinate of sprite
 ROM0:3133 F0 C5            ld   a,(ff00+C5)    // A = exact character tile of sprite
 ROM0:3135 22               ldi  (hl),a         // ($C402 + ($FFBD)) = exact character tile of sprite
 ROM0:3136 F0 C6            ld   a,(ff00+C6)    // A = exact attributes of sprite
 ROM0:3138 22               ldi  (hl),a         // ($C403 + ($FFBD)) = exact attributes of sprite
 ROM0:3139 7D               ld   a,l            // A = ($FFBD) + 4
 ROM0:313A E0 BD            ld   (ff00+BD),a    // ($FFBD) += 4
 ROM0:313C 21 BB FF         ld   hl,FFBB
 ROM0:313F 35               dec  (hl)           // ($FFBB) -= 1
 ROM0:3140 28 06            jr   z,3148         // Return if ($FFBB) is 0
 ROM0:3142 21 C7 FF         ld   hl,FFC7
 ROM0:3145 35               dec  (hl)           // ($FFC7) -= 1
 ROM0:3146 20 AF            jr   nz,30F7        // Loop if ($FFC7) != 0
 ROM0:3148 C1               pop  bc
 ROM0:3149 C9               ret                 // Establishes sprite's portions in $C400 table
 ROM0:314A C5               push bc
 ROM0:314B F0 B9            ld   a,(ff00+B9)
 ROM0:314D CB 37            swap a
 ROM0:314F 67               ld   h,a
 ROM0:3150 E6 F0            and  a,F0
 ROM0:3152 C6 0B            add  a,0B
 ROM0:3154 6F               ld   l,a
 ROM0:3155 7C               ld   a,h
 ROM0:3156 E6 0F            and  a,0F
 ROM0:3158 C6 D0            add  a,D0
 ROM0:315A 67               ld   h,a            // HL = $D00B + ($FFB9) * 16
 ROM0:315B 7E               ld   a,(hl)         // A = ($D00B + ($FFB9) * 16)
 ROM0:315C FE FF            cp   a,FF
 ROM0:315E 28 0E            jr   z,316E         // End if ($D00B + ($FFB9) * 16) = -1
 ROM0:3160 A7               and  a
 ROM0:3161 20 09            jr   nz,316C        // Jump if ($D00B + ($FFB9) * 16) != 0
 ROM0:3163 2B               dec  hl             // HL = $D00A + ($FFB9) * 16
 ROM0:3164 34               inc  (hl)           // inc ($D00A + ($FFB9) * 16)
 ROM0:3165 F0 B9            ld   a,(ff00+B9)
 ROM0:3167 CD 77 31         call 3177           // [$D006 + A * 16] 2 byte reverse holds new pointer for used sprite stats modification table, [$DxxA] and [$DxxB] updated accordingly
 ROM0:316A 18 02            jr   316E
 ROM0:316C 3D               dec  a              // Goes back here if  != 0 and -1
 ROM0:316D 77               ld   (hl),a         // ($D00B + ($FFB9) * 16) -= 1 if != 0 and -1
 ROM0:316E C1               pop  bc
 ROM0:316F C9               ret                 // [$D006 + [$FFB9] * 16] 2 byte and respective graphics timer bytes updated based on if [$D00B + [$FFB9] * 16] is 0
 ROM0:3170 F0 B9            ld   a,(ff00+B9)
 ROM0:3172 CD 1F 2E         call 2E1F           // Handles clear-up of sprite
 ROM0:3175 C1               pop  bc
 ROM0:3176 C9               ret  
 ROM0:3177 D5               push de
 ROM0:3178 E5               push hl
 ROM0:3179 CB 37            swap a
 ROM0:317B 67               ld   h,a
 ROM0:317C E6 F0            and  a,F0
 ROM0:317E C6 05            add  a,05
 ROM0:3180 6F               ld   l,a
 ROM0:3181 7C               ld   a,h
 ROM0:3182 E6 0F            and  a,0F
 ROM0:3184 C6 D0            add  a,D0
 ROM0:3186 67               ld   h,a            // HL = $D005 + A * 16
 ROM0:3187 F0 80            ld   a,(ff00+80)
 ROM0:3189 F5               push af             // Stores original block
 ROM0:318A 7E               ld   a,(hl)
 ROM0:318B E0 80            ld   (ff00+80),a
 ROM0:318D EA 00 20         ld   (2000),a       // Active block = ($D005 + A * 16)
 ROM0:3190 23               inc  hl
 ROM0:3191 23               inc  hl
 ROM0:3192 23               inc  hl             // HL = $D008 + A * 16
 ROM0:3193 2A               ldi  a,(hl)         // A = ($D008 + A * 16)
 ROM0:3194 5F               ld   e,a            // E = ($D008 + A * 16)
 ROM0:3195 2A               ldi  a,(hl)         // A = ($D009 + A * 16)
 ROM0:3196 57               ld   d,a            // D = ($D009 + A * 16)
 ROM0:3197 2A               ldi  a,(hl)         // A = ($D00A + A * 16)
 ROM0:3198 CD BA 31         call 31BA           // A = [Basic DE address + [$D00A + A * 16] * 3 + 2], BC = [Basic DE address + [$D00A + A * 16] * 3] 2 byte reverse
 ROM0:319B 77               ld   (hl),a         // [$D00B + A * 16] = [Basic DE address + [$D00A + A * 16] * 3 + 2]
 ROM0:319C 79               ld   a,c
 ROM0:319D B0               or   b
 ROM0:319E 20 0A            jr   nz,31AA        // Jumps if [Basic DE address + [$D00A + A * 16] * 3] 2 byte reverse is blank
 ROM0:31A0 1A               ld   a,(de)         // A = [Basic DE address]
 ROM0:31A1 13               inc  de
 ROM0:31A2 4F               ld   c,a            // C = [Basic DE address]
 ROM0:31A3 1A               ld   a,(de)         // A = [Basic DE address + 1]
 ROM0:31A4 13               inc  de
 ROM0:31A5 47               ld   b,a            // BC = [Basic DE address] 2 byte reverse
 ROM0:31A6 1A               ld   a,(de)         // A = [Basic DE address + 2]
 ROM0:31A7 32               ldd  (hl),a         // [$D00B + A * 16] = [Basic DE address + 2]
 ROM0:31A8 AF               xor  a
 ROM0:31A9 22               ldi  (hl),a
 ROM0:31AA 2B               dec  hl
 ROM0:31AB 2B               dec  hl
 ROM0:31AC 2B               dec  hl
 ROM0:31AD 2B               dec  hl             // HL = $D007 + A * 16
 ROM0:31AE 70               ld   (hl),b
 ROM0:31AF 2B               dec  hl
 ROM0:31B0 71               ld   (hl),c         // [$D006 + A * 16] 2 byte reverse holds new pointer for used sprite stats modification table, [$DxxA] and [$DxxB] updated accordingly
 ROM0:31B1 F1               pop  af
 ROM0:31B2 E0 80            ld   (ff00+80),a
 ROM0:31B4 EA 00 20         ld   (2000),a       // Restores original block
 ROM0:31B7 E1               pop  hl
 ROM0:31B8 D1               pop  de
 ROM0:31B9 C9               ret  
 ROM0:31BA E5               push hl
 ROM0:31BB 62               ld   h,d
 ROM0:31BC 6B               ld   l,e
 ROM0:31BD 4F               ld   c,a
 ROM0:31BE 06 00            ld   b,00
 ROM0:31C0 09               add  hl,bc
 ROM0:31C1 09               add  hl,bc
 ROM0:31C2 09               add  hl,bc          // HL = DE + A * 3
 ROM0:31C3 2A               ldi  a,(hl)
 ROM0:31C4 4F               ld   c,a
 ROM0:31C5 2A               ldi  a,(hl)
 ROM0:31C6 47               ld   b,a            // BC = [DE + A * 3] 2 byte reverse
 ROM0:31C7 7E               ld   a,(hl)         // A = [DE + A * 3 + 2]
 ROM0:31C8 E1               pop  hl
 ROM0:31C9 C9               ret                 // A = [DE + A * 3 + 2], BC = [DE + A * 3] 2 byte reverse
 ROM0:31CA E5               push hl
 ROM0:31CB D5               push de
 ROM0:31CC 21 46 CC         ld   hl,CC46
 ROM0:31CF CD E2 31         call 31E2           // ($CC46) 2 byte = Hexadecimal ASCII of A
 ROM0:31D2 CD D4 0E         call 0ED4           // HL = $9800 + B + C * 32
 ROM0:31D5 5D               ld   e,l
 ROM0:31D6 54               ld   d,h            // DE = $9800 + B + C * 32
 ROM0:31D7 21 46 CC         ld   hl,CC46
 ROM0:31DA 06 02            ld   b,02
 ROM0:31DC CD 0F 35         call 350F           // Load [$C300 + [$FFC8] + 0~4] with 2, E, modded D, [HL], [HL+1]; increment [$FFCA], B = 0, HL = $FFCA, A = [HL+1] (D is modded to be D%128 if [$FFCB] = 1)
 ROM0:31DF D1               pop  de
 ROM0:31E0 E1               pop  hl
 ROM0:31E1 C9               ret                 // Load [$C300 + [$FFC8] + 0~4] with 2, E, modded D, Hex ASCII of A; increment [$FFCA], B = 0, HL = $FFCA, A = [HL+1] (D is modded to be D%128 if [$FFCB] = 1)
 ROM0:31E2 F5               push af
 ROM0:31E3 CB 37            swap a
 ROM0:31E5 CD E9 31         call 31E9
 ROM0:31E8 F1               pop  af
 ROM0:31E9 E6 0F            and  a,0F
 ROM0:31EB C6 30            add  a,30
 ROM0:31ED FE 3A            cp   a,3A
 ROM0:31EF 38 02            jr   c,31F3
 ROM0:31F1 C6 07            add  a,07
 ROM0:31F3 22               ldi  (hl),a
 ROM0:31F4 C9               ret                 // (HL) 2 byte = Hexadecimal ASCII of A
 ROM0:31F5 C5               push bc
 ROM0:31F6 E5               push hl
 ROM0:31F7 D5               push de
 ROM0:31F8 6F               ld   l,a
 ROM0:31F9 26 00            ld   h,00
 ROM0:31FB 3E 20            ld   a,20
 ROM0:31FD EA 45 CC         ld   (CC45),a
 ROM0:3200 D5               push de
 ROM0:3201 C5               push bc
 ROM0:3202 11 46 CC         ld   de,CC46
 ROM0:3205 01 9C FF         ld   bc,FF9C        // BC = 65,436
 ROM0:3208 CD 34 33         call 3334           // ($CC46) = 48 + A / 100 with ($CC45) set to 48, or 32 w/ ($CC45) unchanged if result would be 48 already; HL holds remainder
 ROM0:320B 01 F6 FF         ld   bc,FFF6        // BC = 65,526
 ROM0:320E CD 34 33         call 3334           // ($CC47) = 48 + (A%100) / 10 with ($CC45) set to 48, or ($CC45) w/ that unchanged if result would be 48 already; HL holds remainder
 ROM0:3211 3E 30            ld   a,30
 ROM0:3213 EA 45 CC         ld   (CC45),a
 ROM0:3216 01 FF FF         ld   bc,FFFF        // BC = 65,535
 ROM0:3219 CD 34 33         call 3334           // ($CC48) = 48 + A%10; HL holds 0
 ROM0:321C C1               pop  bc
 ROM0:321D D1               pop  de
 ROM0:321E CD D4 0E         call 0ED4           // HL = $9800 + B + C * 32
 ROM0:3221 42               ld   b,d            // B = D
 ROM0:3222 C5               push bc
 ROM0:3223 3E 03            ld   a,03
 ROM0:3225 92               sub  d
 ROM0:3226 4F               ld   c,a            // C = 3 - D
 ROM0:3227 06 00            ld   b,00           // BC = 3 - D
 ROM0:3229 5D               ld   e,l
 ROM0:322A 54               ld   d,h            // DE = $9800 + B + C * 32
 ROM0:322B 21 46 CC         ld   hl,CC46
 ROM0:322E 09               add  hl,bc
 ROM0:322F C1               pop  bc             // B = D
 ROM0:3230 CD 0F 35         call 350F           // [$C300 + [$FFC8]] holds # of digit bytes, then designated HL (reversed), then number text (A is the number, BC is coordinates, D is the number of digits)
 ROM0:3233 D1               pop  de
 ROM0:3234 E1               pop  hl
 ROM0:3235 C1               pop  bc
 ROM0:3236 C9               ret  
 ROM0:3237 C5               push bc
 ROM0:3238 E5               push hl
 ROM0:3239 D5               push de
 ROM0:323A 6F               ld   l,a
 ROM0:323B 26 00            ld   h,00
 ROM0:323D 3E 30            ld   a,30
 ROM0:323F EA 45 CC         ld   (CC45),a
 ROM0:3242 18 BC            jr   3200           // [$C300 + [$FFC8]] holds # of digit bytes, then designated HL (reversed), then number text (A is the number, BC is coordinates, D is the number of digits)
 ROM0:3244 C5               push bc
 ROM0:3245 E5               push hl
 ROM0:3246 D5               push de
 ROM0:3247 6F               ld   l,a
 ROM0:3248 26 00            ld   h,00
 ROM0:324A 3E 5F            ld   a,5F
 ROM0:324C EA 45 CC         ld   (CC45),a
 ROM0:324F 18 AF            jr   3200
 ROM0:3251 3E 20            ld   a,20
 ROM0:3253 EA 45 CC         ld   (CC45),a
 ROM0:3256 18 05            jr   325D
 ROM0:3258 3E 30            ld   a,30
 ROM0:325A EA 45 CC         ld   (CC45),a
 ROM0:325D C5               push bc
 ROM0:325E D5               push de
 ROM0:325F E5               push hl
 ROM0:3260 D5               push de
 ROM0:3261 C5               push bc
 ROM0:3262 11 46 CC         ld   de,CC46
 ROM0:3265 01 F0 D8         ld   bc,D8F0        // BC = 55,536
 ROM0:3268 CD 34 33         call 3334           // ($CC46) = 48 + HL / 10000 with ($CC45) set to 48, or ($CC45) with that unchanged if result would be 48 already; HL holds remainder
 ROM0:326B 01 18 FC         ld   bc,FC18        // BC = 64,536
 ROM0:326E CD 34 33         call 3334           // ($CC47) = 48 + HL / 1000 with ($CC45) set to 48, or ($CC45) with that unchanged if result would be 48 already; HL holds remainder
 ROM0:3271 01 9C FF         ld   bc,FF9C        // BC = 65,436
 ROM0:3274 CD 34 33         call 3334           // ($CC48) = 48 + HL / 100 with ($CC45) set to 48, or ($CC45) with that unchanged if result would be 48 already; HL holds remainder
 ROM0:3277 01 F6 FF         ld   bc,FFF6        // BC = 65,526
 ROM0:327A CD 34 33         call 3334           // ($CC49) = 48 + HL / 10 with ($CC45) set to 48, or ($CC45) with that unchanged if result would be 48 already; HL holds remainder
 ROM0:327D 01 FF FF         ld   bc,FFFF        // BC = 65,535
 ROM0:3280 3E 30            ld   a,30
 ROM0:3282 EA 45 CC         ld   (CC45),a
 ROM0:3285 CD 34 33         call 3334           // ($CC4A) = 48 + HL; HL holds 0
 ROM0:3288 C1               pop  bc
 ROM0:3289 D1               pop  de
 ROM0:328A CD D4 0E         call 0ED4           // HL = $9800 + B + C * 32
 ROM0:328D 42               ld   b,d
 ROM0:328E C5               push bc
 ROM0:328F 3E 05            ld   a,05
 ROM0:3291 92               sub  d
 ROM0:3292 4F               ld   c,a            // C = 5 - D
 ROM0:3293 06 00            ld   b,00
 ROM0:3295 5D               ld   e,l
 ROM0:3296 54               ld   d,h
 ROM0:3297 21 46 CC         ld   hl,CC46
 ROM0:329A 09               add  hl,bc
 ROM0:329B C1               pop  bc             // B = D
 ROM0:329C CD 0F 35         call 350F           // Load [$C300 + [$FFC8] + 0~(2+B)] with B, E, modded D, [HL]...[HL+B-1]; increment [$FFCA], B = 0, HL = $FFCA, A = [HL+B-1] (D is modded to be D - 128 if [$FFCB] = 1 and D > 128)
 ROM0:329F E1               pop  hl
 ROM0:32A0 D1               pop  de
 ROM0:32A1 C1               pop  bc
 ROM0:32A2 C9               ret                 // [$C300 + [$FFC8]] holds # of digit bytes, then designated HL (reversed), then number text (HL is the number, BC is coordinates, D is the number of digits)
 ROM0:32A3 C5               push bc
 ROM0:32A4 D5               push de
 ROM0:32A5 E5               push hl
 ROM0:32A6 3E 02            ld   a,02
 ROM0:32A8 CD BC 29         call 29BC           // HL += 2
 ROM0:32AB 56               ld   d,(hl)
 ROM0:32AC 2B               dec  hl
 ROM0:32AD 2B               dec  hl
 ROM0:32AE 2A               ldi  a,(hl)
 ROM0:32AF 66               ld   h,(hl)
 ROM0:32B0 6F               ld   l,a            // D holds (HL) 3 byte reverse / 65536, HL holds (HL) 3 byte reverse % 65536
 ROM0:32B1 3E 20            ld   a,20
 ROM0:32B3 EA 45 CC         ld   (CC45),a
 ROM0:32B6 C5               push bc
 ROM0:32B7 7A               ld   a,d
 ROM0:32B8 A7               and  a
 ROM0:32B9 28 11            jr   z,32CC         // Branches if (HL) 3 byte reverse is less than 65536
 ROM0:32BB 01 A0 15         ld   bc,15A0        // BC = 5536
 ROM0:32BE 09               add  hl,bc
 ROM0:32BF 3E 35            ld   a,35
 ROM0:32C1 01 F0 D8         ld   bc,D8F0        // BC = 55536
 ROM0:32C4 11 46 CC         ld   de,CC46
 ROM0:32C7 CD 17 33         call 3317           // DE = 54 + HL / 10000; ($CC45) changed to 48; HL holds remainder
 ROM0:32CA 18 09            jr   32D5           // Finished with 10000 digit for above 65536
 ROM0:32CC 11 46 CC         ld   de,CC46
 ROM0:32CF 01 F0 D8         ld   bc,D8F0
 ROM0:32D2 CD 15 33         call 3315           // ($CC46) = 48 + HL / 10000 if HL / 10000 is at least 1, 32 otherwise; ($CC45) changed to 48 if former happens; HL holds remainder
 ROM0:32D5 01 18 FC         ld   bc,FC18        // BC = 64536
 ROM0:32D8 CD 15 33         call 3315           // ($CC47) = 48 + HL / 1000 if HL / 1000 is at least 1, ($CC45) otherwise; ($CC45) changed to 48 if former happens; HL holds remainder
 ROM0:32DB 01 9C FF         ld   bc,FF9C        // BC = 65436
 ROM0:32DE CD 15 33         call 3315           // ($CC48) = 48 + HL / 100 if HL / 100 is at least 1, ($CC45) otherwise; ($CC45) changed to 48 if former happens; HL holds remainder
 ROM0:32E1 01 F6 FF         ld   bc,FFF6        // BC = 65526
 ROM0:32E4 CD 15 33         call 3315           // ($CC49) = 48 + HL / 10 if HL / 10 is at least 1, ($CC45) otherwise; ($CC45) changed to 48 if former happens; HL holds remainder
 ROM0:32E7 01 FF FF         ld   bc,FFFF        // BC = 65535
 ROM0:32EA 3E 30            ld   a,30
 ROM0:32EC EA 45 CC         ld   (CC45),a
 ROM0:32EF CD 15 33         call 3315           // ($CC4A) = 48 + HL%10
 ROM0:32F2 3E 00            ld   a,00
 ROM0:32F4 12               ld   (de),a         // ($CC4B) = 0
 ROM0:32F5 C1               pop  bc
 ROM0:32F6 E1               pop  hl
 ROM0:32F7 D1               pop  de
 ROM0:32F8 CD D4 0E         call 0ED4           // HL = $9800 + B + C * 32
 ROM0:32FB 42               ld   b,d
 ROM0:32FC C5               push bc
 ROM0:32FD 3E 05            ld   a,05
 ROM0:32FF 92               sub  d
 ROM0:3300 4F               ld   c,a            // C = 5 - D
 ROM0:3301 06 00            ld   b,00
 ROM0:3303 5D               ld   e,l
 ROM0:3304 54               ld   d,h            // DE = $9800 + B + C * 32
 ROM0:3305 21 46 CC         ld   hl,CC46
 ROM0:3308 09               add  hl,bc          // HL = $CC46 + 5 - D
 ROM0:3309 C1               pop  bc             // B = D
 ROM0:330A 3E 00            ld   a,00
 ROM0:330C E0 83            ld   (ff00+83),a
 ROM0:330E E0 4F            ld   (ff00+4F),a
 ROM0:3310 CD 0F 35         call 350F           // Load [$C300 + [$FFC8] + 0~(2+B)] with B, E, modded D, [HL]...[HL+B-1]; increment [$FFCA], B = 0, HL = $FFCA, A = [HL+B-1] (D is modded to be D - 128 if [$FFCB] = 1 and D > 128)
 ROM0:3313 C1               pop  bc
 ROM0:3314 C9               ret                 // [$C300 + [$FFC8]] holds # of digit bytes, then designated HL (reversed), then number text (HL 3 byte reverse holds the number, BC is coordinates, D is the number of digits)
 ROM0:3315 3E 2F            ld   a,2F
 ROM0:3317 3C               inc  a
 ROM0:3318 09               add  hl,bc
 ROM0:3319 38 FC            jr   c,3317
 ROM0:331B FE 30            cp   a,30
 ROM0:331D 28 09            jr   z,3328         // Branches if A wasn't incremented past 48
 ROM0:331F F5               push af
 ROM0:3320 3E 30            ld   a,30
 ROM0:3322 EA 45 CC         ld   (CC45),a
 ROM0:3325 F1               pop  af
 ROM0:3326 18 03            jr   332B
 ROM0:3328 FA 45 CC         ld   a,(CC45)
 ROM0:332B 12               ld   (de),a
 ROM0:332C 13               inc  de
 ROM0:332D 7D               ld   a,l
 ROM0:332E 91               sub  c
 ROM0:332F 6F               ld   l,a
 ROM0:3330 7C               ld   a,h
 ROM0:3331 98               sbc  b
 ROM0:3332 67               ld   h,a
 ROM0:3333 C9               ret                 // DE = 48 + HL / (BC * -1) if HL / (BC * -1) is at least 1, ($CC45) otherwise; ($CC45) changed to 48 if former happens; HL holds remainder
 ROM0:3334 3E 2F            ld   a,2F
 ROM0:3336 3C               inc  a
 ROM0:3337 09               add  hl,bc
 ROM0:3338 38 FC            jr   c,3336
 ROM0:333A FE 30            cp   a,30
 ROM0:333C 28 09            jr   z,3347
 ROM0:333E F5               push af
 ROM0:333F 3E 30            ld   a,30
 ROM0:3341 EA 45 CC         ld   (CC45),a
 ROM0:3344 F1               pop  af
 ROM0:3345 18 03            jr   334A
 ROM0:3347 FA 45 CC         ld   a,(CC45)
 ROM0:334A 12               ld   (de),a
 ROM0:334B 13               inc  de
 ROM0:334C 7D               ld   a,l
 ROM0:334D 91               sub  c
 ROM0:334E 6F               ld   l,a
 ROM0:334F 7C               ld   a,h
 ROM0:3350 98               sbc  b
 ROM0:3351 67               ld   h,a
 ROM0:3352 C9               ret                 // (DE) = 48 + HL / (BC * -1) with ($CC45) set to 48, or ($CC45) with that unchanged if result would be 48 already; HL holds remainder
 ROM0:3353 E5               push hl
 ROM0:3354 C5               push bc
 ROM0:3355 E5               push hl
 ROM0:3356 CD D4 0E         call 0ED4           // HL = $9800 + B + C * 32
 ROM0:3359 54               ld   d,h
 ROM0:335A 5D               ld   e,l            // DE = $9800 + B + C * 32
 ROM0:335B 06 00            ld   b,00
 ROM0:335D E1               pop  hl
 ROM0:335E E5               push hl
 ROM0:335F 2A               ldi  a,(hl)         // Loop begins here
 ROM0:3360 FE 00            cp   a,00
 ROM0:3362 28 03            jr   z,3367         // Ends loop at a 00
 ROM0:3364 04               inc  b
 ROM0:3365 18 F8            jr   335F           // B = number of characters before a Break
 ROM0:3367 E1               pop  hl
 ROM0:3368 CD 0F 35         call 350F           // Load [$C300 + [$FFC8] + 0~(2+B)] with B, E, modded D, [HL]...[HL+B-1]; increment [$FFCA], B = 0, HL = $FFCA, A = [HL+B-1] (D is modded to be D - 128 if [$FFCB] = 1 and D > 128)
 ROM0:336B C1               pop  bc
 ROM0:336C E1               pop  hl
 ROM0:336D C9               ret                 // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROM0:336E C5               push bc
 ROM0:336F 46               ld   b,(hl)
 ROM0:3370 23               inc  hl
 ROM0:3371 4E               ld   c,(hl)
 ROM0:3372 23               inc  hl
 ROM0:3373 E5               push hl
 ROM0:3374 CD D4 0E         call 0ED4           // HL = $9800 (HL) coordinates
 ROM0:3377 54               ld   d,h
 ROM0:3378 5D               ld   e,l            // DE = $9800 (HL) coordinates
 ROM0:3379 E1               pop  hl             // HL = HL + 2
 ROM0:337A E5               push hl
 ROM0:337B 06 00            ld   b,00
 ROM0:337D 2A               ldi  a,(hl)         // Loop begins here
 ROM0:337E FE 00            cp   a,00
 ROM0:3380 28 03            jr   z,3385         // Goes to ending stuff if current (HL) = 0
 ROM0:3382 04               inc  b
 ROM0:3383 18 F8            jr   337D           // B = number of text bytes
 ROM0:3385 E1               pop  hl             // HL = HL + 2
 ROM0:3386 CD 0F 35         call 350F           // Load [$C300 + [$FFC8] + 0~(2+B)] with B, E, modded D, [HL]...[HL+B-1]; increment [$FFC8] for each byte, increment [$FFCA], B = 0, HL = $FFCA, A = [HL+B-1]
 ROM0:3389 C1               pop  bc
 ROM0:338A C9               ret                 // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROM0:338B 78               ld   a,b
 ROM0:338C FE 82            cp   a,82
 ROM0:338E 28 15            jr   z,33A5
 ROM0:3390 FE 83            cp   a,83
 ROM0:3392 28 1F            jr   z,33B3
 ROM0:3394 A7               and  a
 ROM0:3395 20 2D            jr   nz,33C4        // Ends immediately with A = 10 if B is 0
 ROM0:3397 79               ld   a,c
 ROM0:3398 FE 80            cp   a,80
 ROM0:339A 30 28            jr   nc,33C4        // Ends immediately with A = 10 if B != 130, B != 131, and C => 128
 ROM0:339C D6 20            sub  a,20
 ROM0:339E 38 24            jr   c,33C4         // Ends immediately with A = 10 if B != 130, B != 131, and C < 32
 ROM0:33A0 21 C7 33         ld   hl,33C7        // Valid ranges: 32~127 -> 0~95
 ROM0:33A3 18 1A            jr   33BF
 ROM0:33A5 79               ld   a,c            // Branch 1 starts here
 ROM0:33A6 FE F2            cp   a,F2
 ROM0:33A8 30 1A            jr   nc,33C4        // End immediately with A = 10 if B = 130 and C => 242
 ROM0:33AA D6 9F            sub  a,9F
 ROM0:33AC 38 16            jr   c,33C4         // End immediately with A = 10 if B = 130 and C < 159
 ROM0:33AE 21 27 34         ld   hl,3427        // Valid ranges: 159~241 -> 0~82
 ROM0:33B1 18 0C            jr   33BF
 ROM0:33B3 79               ld   a,c            // Branch 2 starts here
 ROM0:33B4 FE 94            cp   a,94
 ROM0:33B6 30 0C            jr   nc,33C4        // End immediately with A = 10 if B = 131 and C => 148
 ROM0:33B8 D6 40            sub  a,40
 ROM0:33BA 38 08            jr   c,33C4         // End immediately with A = 10 if B = 131 and C < 64
 ROM0:33BC 21 7A 34         ld   hl,347A        // Valid ranges: 64~147 -> 0~83
 ROM0:33BF CD BC 29         call 29BC           // HL += A
 ROM0:33C2 7E               ld   a,(hl)
 ROM0:33C3 C9               ret  
 ROM0:33C4 3E 0A            ld   a,0A
 ROM0:33C6 C9               ret  

 ROM0:33C7 5F               ld   e,a
 ROM0:33C8 01 02 03         ld   bc,0302
 ROM0:33CB 04               inc  b
 ROM0:33CC 05               dec  b
 ROM0:33CD 06 07            ld   b,07
 ROM0:33CF 08 09 0A         ld   (0A09),sp
 ROM0:33D2 0B               dec  bc
 ROM0:33D3 0C               inc  c
 ROM0:33D4 0D               dec  c
 ROM0:33D5 0E 0F            ld   c,0F
 ROM0:33D7 30 31            jr   nc,340A
 ROM0:33D9 32               ldd  (hl),a
 ROM0:33DA 33               inc  sp
 ROM0:33DB 34               inc  (hl)
 ROM0:33DC 35               dec  (hl)
 ROM0:33DD 36 37            ld   (hl),37
 ROM0:33DF 38 39            jr   c,341A
 ROM0:33E1 3A               ldd  a,(hl)
 ROM0:33E2 3B               dec  sp
 ROM0:33E3 3C               inc  a
 ROM0:33E4 3D               dec  a
 ROM0:33E5 3E 3F            ld   a,3F
 ROM0:33E7 10 11            <corrupted stop>
 ROM0:33E9 12               ld   (de),a
 ROM0:33EA 13               inc  de
 ROM0:33EB 14               inc  d
 ROM0:33EC 15               dec  d
 ROM0:33ED 16 17            ld   d,17
 ROM0:33EF 18 19            jr   340A
 ROM0:33F1 1A               ld   a,(de)
 ROM0:33F2 1B               dec  de
 ROM0:33F3 1C               inc  e
 ROM0:33F4 1D               dec  e
 ROM0:33F5 1E 1F            ld   e,1F
 ROM0:33F7 20 21            jr   nz,341A
 ROM0:33F9 22               ldi  (hl),a
 ROM0:33FA 23               inc  hl
 ROM0:33FB 24               inc  h
 ROM0:33FC 25               dec  h
 ROM0:33FD 26 27            ld   h,27
 ROM0:33FF 28 29            jr   z,342A
 ROM0:3401 2A               ldi  a,(hl)
 ROM0:3402 2B               dec  hl
 ROM0:3403 2C               inc  l
 ROM0:3404 2D               dec  l
 ROM0:3405 2E 2F            ld   l,2F
 ROM0:3407 40               ld   b,b
 ROM0:3408 41               ld   b,c
 ROM0:3409 42               ld   b,d
 ROM0:340A 43               ld   b,e
 ROM0:340B 44               ld   b,h
 ROM0:340C 45               ld   b,l
 ROM0:340D 46               ld   b,(hl)
 ROM0:340E 47               ld   b,a
 ROM0:340F 48               ld   c,b
 ROM0:3410 49               ld   c,c
 ROM0:3411 4A               ld   c,d
 ROM0:3412 4B               ld   c,e
 ROM0:3413 4C               ld   c,h
 ROM0:3414 4D               ld   c,l
 ROM0:3415 4E               ld   c,(hl)
 ROM0:3416 4F               ld   c,a
 ROM0:3417 50               ld   d,b
 ROM0:3418 51               ld   d,c
 ROM0:3419 52               ld   d,d
 ROM0:341A 53               ld   d,e
 ROM0:341B 54               ld   d,h
 ROM0:341C 55               ld   d,l
 ROM0:341D 56               ld   d,(hl)
 ROM0:341E 57               ld   d,a
 ROM0:341F 58               ld   e,b
 ROM0:3420 59               ld   e,c
 ROM0:3421 5A               ld   e,d
 ROM0:3422 5B               ld   e,e
 ROM0:3423 5C               ld   e,h
 ROM0:3424 5D               ld   e,l
 ROM0:3425 5E               ld   e,(hl)
 ROM0:3426 0A               ld   a,(bc)

 ROM0:3427 60               ld   h,b
 ROM0:3428 61               ld   h,c
 ROM0:3429 63               ld   h,e
 ROM0:342A 62               ld   h,d
 ROM0:342B 65               ld   h,l
 ROM0:342C 64               ld   h,h
 ROM0:342D 67               ld   h,a
 ROM0:342E 66               ld   h,(hl)
 ROM0:342F 69               ld   l,c
 ROM0:3430 68               ld   l,b
 ROM0:3431 6A               ld   l,d
 ROM0:3432 6B               ld   l,e
 ROM0:3433 6C               ld   l,h
 ROM0:3434 6D               ld   l,l
 ROM0:3435 6E               ld   l,(hl)
 ROM0:3436 6F               ld   l,a
 ROM0:3437 70               ld   (hl),b
 ROM0:3438 71               ld   (hl),c
 ROM0:3439 72               ld   (hl),d
 ROM0:343A 73               ld   (hl),e
 ROM0:343B 74               ld   (hl),h
 ROM0:343C 75               ld   (hl),l
 ROM0:343D 76               halt 
 ROM0:343E 77               ld   (hl),a
 ROM0:343F 78               ld   a,b
 ROM0:3440 79               ld   a,c
 ROM0:3441 7A               ld   a,d
 ROM0:3442 7B               ld   a,e
 ROM0:3443 7C               ld   a,h
 ROM0:3444 7D               ld   a,l
 ROM0:3445 7E               ld   a,(hl)
 ROM0:3446 7F               ld   a,a
 ROM0:3447 80               add  b
 ROM0:3448 81               add  c
 ROM0:3449 82               add  d
 ROM0:344A 83               add  e
 ROM0:344B 84               add  h
 ROM0:344C 85               add  l
 ROM0:344D 86               add  (hl)
 ROM0:344E 87               add  a
 ROM0:344F 88               adc  b
 ROM0:3450 89               adc  c
 ROM0:3451 8A               adc  d
 ROM0:3452 8B               adc  e
 ROM0:3453 8C               adc  h
 ROM0:3454 8D               adc  l
 ROM0:3455 8E               adc  (hl)
 ROM0:3456 8F               adc  a
 ROM0:3457 90               sub  b
 ROM0:3458 91               sub  c
 ROM0:3459 92               sub  d
 ROM0:345A 93               sub  e
 ROM0:345B 94               sub  h
 ROM0:345C 95               sub  l
 ROM0:345D 96               sub  (hl)
 ROM0:345E 97               sub  a
 ROM0:345F 98               sbc  b
 ROM0:3460 99               sbc  c
 ROM0:3461 9A               sbc  d
 ROM0:3462 9B               sbc  e
 ROM0:3463 9C               sbc  h
 ROM0:3464 9D               sbc  l
 ROM0:3465 9E               sbc  (hl)
 ROM0:3466 9F               sbc  a
 ROM0:3467 A0               and  b
 ROM0:3468 A1               and  c
 ROM0:3469 A2               and  d
 ROM0:346A A3               and  e
 ROM0:346B A4               and  h
 ROM0:346C A5               and  l
 ROM0:346D A6               and  (hl)
 ROM0:346E A7               and  a
 ROM0:346F A8               xor  b
 ROM0:3470 A9               xor  c
 ROM0:3471 AA               xor  d
 ROM0:3472 AB               xor  e
 ROM0:3473 AC               xor  h
 ROM0:3474 0A               ld   a,(bc)
 ROM0:3475 AD               xor  l
 ROM0:3476 0A               ld   a,(bc)
 ROM0:3477 0A               ld   a,(bc)
 ROM0:3478 AE               xor  (hl)
 ROM0:3479 AF               xor  a

 ROM0:347A B0               or   b
 ROM0:347B B1               or   c
 ROM0:347C B2               or   d
 ROM0:347D B3               or   e
 ROM0:347E B4               or   h
 ROM0:347F B5               or   l
 ROM0:3480 B6               or   (hl)
 ROM0:3481 B7               or   a
 ROM0:3482 B8               cp   b
 ROM0:3483 B9               cp   c
 ROM0:3484 BA               cp   d
 ROM0:3485 BB               cp   e
 ROM0:3486 BC               cp   h
 ROM0:3487 BD               cp   l
 ROM0:3488 BE               cp   (hl)
 ROM0:3489 BF               cp   a
 ROM0:348A C0               ret  nz
 ROM0:348B C1               pop  bc
 ROM0:348C C2 C3 C4         jp   nz,C4C3
 ROM0:348F C5               push bc
 ROM0:3490 C6 C7            add  a,C7
 ROM0:3492 C8               ret  z
 ROM0:3493 C9               ret  
 ROM0:3494 CA CB CC         jp   z,CCCB
 ROM0:3497 CD CE CF         call CFCE
 ROM0:349A D0               ret  nc
 ROM0:349B D1               pop  de
 ROM0:349C D2 D3 D4         jp   nc,D4D3
 ROM0:349F D5               push de
 ROM0:34A0 D6 D7            sub  a,D7
 ROM0:34A2 D8               ret  c
 ROM0:34A3 D9               reti 
 ROM0:34A4 DA DB DC         jp   c,DCDB
 ROM0:34A7 DD               -    
 ROM0:34A8 DE DF            sbc  a,DF
 ROM0:34AA E0 E1            ld   (ff00+E1),a
 ROM0:34AC E2               ld   (ff00+c),a
 ROM0:34AD E3               -    
 ROM0:34AE E4               -    
 ROM0:34AF E5               push hl
 ROM0:34B0 E6 E7            and  a,E7
 ROM0:34B2 E8 E9            add  sp,E9
 ROM0:34B4 EA EB EC         ld   (ECEB),a
 ROM0:34B7 ED               -    
 ROM0:34B8 EE 0A            xor  a,0A
 ROM0:34BA EF               rst  28
 ROM0:34BB F0 F1            ld   a,(ff00+F1)
 ROM0:34BD F2               ld   a,(ff00+c)
 ROM0:34BE F3               di   
 ROM0:34BF F4               -    
 ROM0:34C0 F5               push af
 ROM0:34C1 F6 F7            or   a,F7
 ROM0:34C3 F8 F9            ld   hl,sp+F9
 ROM0:34C5 FA FB FC         ld   a,(FCFB)
 ROM0:34C8 0A               ld   a,(bc)
 ROM0:34C9 FD               -    
 ROM0:34CA 0A               ld   a,(bc)
 ROM0:34CB 0A               ld   a,(bc)
 ROM0:34CC FE FF            cp   a,FF

 ROM0:34CE AF               xor  a
 ROM0:34CF E0 C8            ld   (ff00+C8),a
 ROM0:34D1 E0 C9            ld   (ff00+C9),a
 ROM0:34D3 E0 CA            ld   (ff00+CA),a
 ROM0:34D5 E0 CB            ld   (ff00+CB),a
 ROM0:34D7 C9               ret                 // Empty $FFC8 to $FFCB
 ROM0:34D8 E5               push hl
 ROM0:34D9 F5               push af
 ROM0:34DA F0 C8            ld   a,(ff00+C8)    // Loop begins here
 ROM0:34DC 6F               ld   l,a
 ROM0:34DD F0 C9            ld   a,(ff00+C9)
 ROM0:34DF 3D               dec  a
 ROM0:34E0 BD               cp   l
 ROM0:34E1 28 F7            jr   z,34DA         // Battery cooldown?
 ROM0:34E3 F1               pop  af
 ROM0:34E4 26 C3            ld   h,C3
 ROM0:34E6 77               ld   (hl),a
 ROM0:34E7 7D               ld   a,l
 ROM0:34E8 3C               inc  a
 ROM0:34E9 E0 C8            ld   (ff00+C8),a
 ROM0:34EB E1               pop  hl
 ROM0:34EC C9               ret  
 ROM0:34ED E5               push hl
 ROM0:34EE F5               push af
 ROM0:34EF CD D4 0E         call 0ED4           // HL = $9800 + B + C * 32
 ROM0:34F2 3E 01            ld   a,01
 ROM0:34F4 CD D8 34         call 34D8           // When [$FFC8] != [$FFC9] - 1 (loops until that's the case), 1 -> [$C300 + [$FFC8]] and [$FFC8] += 1
 ROM0:34F7 7D               ld   a,l
 ROM0:34F8 CD D8 34         call 34D8           // When [$FFC8] != [$FFC9] - 1 (loops until that's the case), B + C%8 * 32 -> [$C300 + [$FFC8] + 1] and [$FFC8] += 1
 ROM0:34FB F0 CB            ld   a,(ff00+CB)
 ROM0:34FD A7               and  a
 ROM0:34FE 28 02            jr   z,3502
 ROM0:3500 CB BC            res  7,h            // If ($FFCB) != 0, res 7, H
 ROM0:3502 7C               ld   a,h
 ROM0:3503 CD D8 34         call 34D8           // When [$FFC8] != [$FFC9] - 1 (loops until that's the case), 152 or 24 + C / 8 -> [$C300 + [$FFC8] + 2] and [$FFC8] += 1
 ROM0:3506 F1               pop  af
 ROM0:3507 CD D8 34         call 34D8           // When [$FFC8] != [$FFC9] - 1 (loops until that's the case), A -> [$C300 + [$FFC8] + 3] and [$FFC8] += 1
 ROM0:350A CD 29 35         call 3529           // Increment ($FFCA)
 ROM0:350D E1               pop  hl
 ROM0:350E C9               ret                 // [$C300 + [$FFC8]] 3 byte holds: 1, B + C%8 * 32, 152 or 24 + C / 8, A; [$FFCA] incremented (152 or 24 + C / 8 is 24 + C / 8 if [$FFCB] != 0)
 ROM0:350F 78               ld   a,b
 ROM0:3510 CD D8 34         call 34D8           // When [$FFC8] != [$FFC9] - 1 (loops until that's the case), B -> [$C300 + [$FFC8]] and [$FFC8] += 1
 ROM0:3513 7B               ld   a,e
 ROM0:3514 CD D8 34         call 34D8           // When [$FFC8] != [$FFC9] - 1 (loops until that's the case), E -> [$C300 + [$FFC8] + 2] and [$FFC8] += 1
 ROM0:3517 F0 CB            ld   a,(ff00+CB)
 ROM0:3519 A7               and  a
 ROM0:351A 28 02            jr   z,351E
 ROM0:351C CB BA            res  7,d
 ROM0:351E 7A               ld   a,d
 ROM0:351F CD D8 34         call 34D8
 ROM0:3522 2A               ldi  a,(hl)         // Loop begins here
 ROM0:3523 CD D8 34         call 34D8
 ROM0:3526 05               dec  b
 ROM0:3527 20 F9            jr   nz,3522
 ROM0:3529 21 CA FF         ld   hl,FFCA
 ROM0:352C 34               inc  (hl)
 ROM0:352D C9               ret  
 ROM0:352E F0 C9            ld   a,(ff00+C9)
 ROM0:3530 47               ld   b,a
 ROM0:3531 F0 C8            ld   a,(ff00+C8)
 ROM0:3533 B8               cp   b
 ROM0:3534 20 F8            jr   nz,352E
 ROM0:3536 C9               ret                 // Loops without doing anything until ($FFC8) = ($FFC9)
 ROM0:3537 F0 C9            ld   a,(ff00+C9)
 ROM0:3539 6F               ld   l,a
 ROM0:353A 26 C3            ld   h,C3
 ROM0:353C 11 CA FF         ld   de,FFCA        // Big loop begins here
 ROM0:353F 1A               ld   a,(de)
 ROM0:3540 B7               or   a
 ROM0:3541 28 30            jr   z,3573         // If ($FFCA) is empty, end with VRAM Bank restored
 ROM0:3543 3D               dec  a
 ROM0:3544 12               ld   (de),a
 ROM0:3545 4D               ld   c,l
 ROM0:3546 46               ld   b,(hl)         // B holds number of bytes used by text
 ROM0:3547 2C               inc  l
 ROM0:3548 5E               ld   e,(hl)
 ROM0:3549 2C               inc  l
 ROM0:354A 56               ld   d,(hl)
 ROM0:354B 2C               inc  l
 ROM0:354C CB 7A            bit  7,d
 ROM0:354E 28 05            jr   z,3555
 ROM0:3550 AF               xor  a
 ROM0:3551 E0 4F            ld   (ff00+4F),a
 ROM0:3553 18 06            jr   355B
 ROM0:3555 3E 01            ld   a,01
 ROM0:3557 E0 4F            ld   (ff00+4F),a
 ROM0:3559 CB FA            set  7,d            // Active VRAM Bank = 1 - bit 7,d; bit 7,d is set
 ROM0:355B 7E               ld   a,(hl)         // Loop begings here
 ROM0:355C 2C               inc  l
 ROM0:355D 12               ld   (de),a         // Positions text character
 ROM0:355E 13               inc  de
 ROM0:355F 05               dec  b
 ROM0:3560 20 F9            jr   nz,355B
 ROM0:3562 FA 0F C0         ld   a,(C00F)
 ROM0:3565 17               rla  
 ROM0:3566 30 D4            jr   nc,353C        // Restarts big loop if bit 7,($C00F) is inactive
 ROM0:3568 F0 44            ld   a,(ff00+44)
 ROM0:356A FE 8E            cp   a,8E
 ROM0:356C 30 CE            jr   nc,353C        // Restarts big loop if LY => 142
 ROM0:356E 21 CA FF         ld   hl,FFCA
 ROM0:3571 34               inc  (hl)
 ROM0:3572 69               ld   l,c
 ROM0:3573 7D               ld   a,l
 ROM0:3574 E0 C9            ld   (ff00+C9),a
 ROM0:3576 F0 83            ld   a,(ff00+83)
 ROM0:3578 E0 4F            ld   (ff00+4F),a
 ROM0:357A C9               ret                 // Establishes all unchecked text into appropriate VRAM bank; bit 7,($C00F) being inactive or LY => 142 stops after only one text portion and leaves it considered unchecked
 ROM0:357B FA 57 CC         ld   a,(CC57)       // Loop begins here
 ROM0:357E 4F               ld   c,a
 ROM0:357F FA 55 CC         ld   a,(CC55)
 ROM0:3582 B9               cp   c
 ROM0:3583 D2 FD 35         jp   nc,35FD        // End immediately if Value E has been reached
 ROM0:3586 FA 54 CC         ld   a,(CC54)       // Jumped to here if Value D hasn't been reached
 ROM0:3589 4F               ld   c,a
 ROM0:358A FA 52 CC         ld   a,(CC52)       // Base B
 ROM0:358D 81               add  c
 ROM0:358E 47               ld   b,a
 ROM0:358F FA 55 CC         ld   a,(CC55)
 ROM0:3592 4F               ld   c,a
 ROM0:3593 FA 53 CC         ld   a,(CC53)       // Base C
 ROM0:3596 81               add  c
 ROM0:3597 4F               ld   c,a
 ROM0:3598 CD D4 0E         call 0ED4           // HL = $9800 + B + C * 32
 ROM0:359B E5               push hl             // Base/Current HL
 ROM0:359C 3E 00            ld   a,00
 ROM0:359E E0 83            ld   (ff00+83),a
 ROM0:35A0 E0 4F            ld   (ff00+4F),a    // VRA0 (Tiles)
 ROM0:35A2 FA 59 CC         ld   a,(CC59)
 ROM0:35A5 6F               ld   l,a
 ROM0:35A6 FA 58 CC         ld   a,(CC58)
 ROM0:35A9 67               ld   h,a
 ROM0:35AA FA 50 CC         ld   a,(CC50)
 ROM0:35AD CD BC 29         call 29BC           // HL += A
 ROM0:35B0 7E               ld   a,(hl)
 ROM0:35B1 4F               ld   c,a
 ROM0:35B2 FA 5C CC         ld   a,(CC5C)
 ROM0:35B5 81               add  c
 ROM0:35B6 E1               pop  hl
 ROM0:35B7 E5               push hl             // Base/Current HL
 ROM0:35B8 CD 1C 0F         call 0F1C           // (HL) = A, increment HL
 ROM0:35BB 3E 01            ld   a,01
 ROM0:35BD E0 83            ld   (ff00+83),a
 ROM0:35BF E0 4F            ld   (ff00+4F),a    // VRA1 (Colors)
 ROM0:35C1 FA 5B CC         ld   a,(CC5B)
 ROM0:35C4 6F               ld   l,a
 ROM0:35C5 FA 5A CC         ld   a,(CC5A)
 ROM0:35C8 67               ld   h,a
 ROM0:35C9 FA 50 CC         ld   a,(CC50)
 ROM0:35CC CD BC 29         call 29BC           // HL += A
 ROM0:35CF 7E               ld   a,(hl)
 ROM0:35D0 E1               pop  hl
 ROM0:35D1 CB DF            set  3,a            // VRA1 graphics is used
 ROM0:35D3 CD 1C 0F         call 0F1C           // (HL) = A, increment HL
 ROM0:35D6 FA 50 CC         ld   a,(CC50)
 ROM0:35D9 3C               inc  a
 ROM0:35DA EA 50 CC         ld   (CC50),a
 ROM0:35DD FA 54 CC         ld   a,(CC54)
 ROM0:35E0 3C               inc  a
 ROM0:35E1 EA 54 CC         ld   (CC54),a
 ROM0:35E4 FA 56 CC         ld   a,(CC56)
 ROM0:35E7 4F               ld   c,a
 ROM0:35E8 FA 54 CC         ld   a,(CC54)
 ROM0:35EB B9               cp   c
 ROM0:35EC DA 86 35         jp   c,3586
 ROM0:35EF AF               xor  a
 ROM0:35F0 EA 54 CC         ld   (CC54),a
 ROM0:35F3 FA 55 CC         ld   a,(CC55)
 ROM0:35F6 3C               inc  a
 ROM0:35F7 EA 55 CC         ld   (CC55),a
 ROM0:35FA C3 7B 35         jp   357B
 ROM0:35FD C9               ret                 // Sets up BG graphics tile placements and attribute placements based on data in $CC50 bytes group, with VRA1 unconditionally active but no change to the active ROM Bank
 ROM0:35FE F0 80            ld   a,(ff00+80)
 ROM0:3600 F5               push af
 ROM0:3601 AF               xor  a
 ROM0:3602 EA 54 CC         ld   (CC54),a
 ROM0:3605 EA 55 CC         ld   (CC55),a
 ROM0:3608 EA 50 CC         ld   (CC50),a
 ROM0:360B EA 51 CC         ld   (CC51),a
 ROM0:360E FA 57 CC         ld   a,(CC57)       // Big loop begins here
 ROM0:3611 4F               ld   c,a
 ROM0:3612 FA 55 CC         ld   a,(CC55)
 ROM0:3615 B9               cp   c
 ROM0:3616 D2 BD 36         jp   nc,36BD        // End immediately if Value E has been reached
 ROM0:3619 FA 54 CC         ld   a,(CC54)       // Loop begins here if Value D hasn't been reached
 ROM0:361C 4F               ld   c,a
 ROM0:361D FA 52 CC         ld   a,(CC52)
 ROM0:3620 81               add  c
 ROM0:3621 47               ld   b,a
 ROM0:3622 FA 55 CC         ld   a,(CC55)
 ROM0:3625 4F               ld   c,a
 ROM0:3626 FA 53 CC         ld   a,(CC53)
 ROM0:3629 81               add  c
 ROM0:362A 4F               ld   c,a
 ROM0:362B CD D4 0E         call 0ED4           // HL = $9800 + B + C * 32
 ROM0:362E E5               push hl
 ROM0:362F 3E 00            ld   a,00
 ROM0:3631 E0 83            ld   (ff00+83),a
 ROM0:3633 E0 4F            ld   (ff00+4F),a
 ROM0:3635 F5               push af
 ROM0:3636 FA 61 CC         ld   a,(CC61)
 ROM0:3639 7F               ld   a,a
 ROM0:363A E0 80            ld   (ff00+80),a
 ROM0:363C EA 00 20         ld   (2000),a
 ROM0:363F F1               pop  af
 ROM0:3640 FA 59 CC         ld   a,(CC59)
 ROM0:3643 6F               ld   l,a
 ROM0:3644 FA 58 CC         ld   a,(CC58)
 ROM0:3647 67               ld   h,a            // Base pointer for tiles
 ROM0:3648 FA 50 CC         ld   a,(CC50)
 ROM0:364B 4F               ld   c,a
 ROM0:364C FA 51 CC         ld   a,(CC51)
 ROM0:364F 47               ld   b,a
 ROM0:3650 09               add  hl,bc
 ROM0:3651 7E               ld   a,(hl)
 ROM0:3652 E1               pop  hl
 ROM0:3653 E5               push hl
 ROM0:3654 CD 1C 0F         call 0F1C           // (HL) = A, increment HL
 ROM0:3657 3E 01            ld   a,01
 ROM0:3659 E0 83            ld   (ff00+83),a
 ROM0:365B E0 4F            ld   (ff00+4F),a
 ROM0:365D F5               push af
 ROM0:365E FA 62 CC         ld   a,(CC62)
 ROM0:3661 7F               ld   a,a
 ROM0:3662 E0 80            ld   (ff00+80),a
 ROM0:3664 EA 00 20         ld   (2000),a
 ROM0:3667 F1               pop  af
 ROM0:3668 FA 5B CC         ld   a,(CC5B)
 ROM0:366B 6F               ld   l,a
 ROM0:366C FA 5A CC         ld   a,(CC5A)
 ROM0:366F 67               ld   h,a            // Base pointer for attributes
 ROM0:3670 FA 50 CC         ld   a,(CC50)
 ROM0:3673 4F               ld   c,a
 ROM0:3674 FA 51 CC         ld   a,(CC51)
 ROM0:3677 47               ld   b,a
 ROM0:3678 09               add  hl,bc
 ROM0:3679 7E               ld   a,(hl)
 ROM0:367A CB DF            set  3,a            // VRA1 graphics is used
 ROM0:367C F5               push af
 ROM0:367D E6 07            and  a,07
 ROM0:367F C6 03            add  a,03
 ROM0:3681 E6 07            and  a,07
 ROM0:3683 57               ld   d,a
 ROM0:3684 F1               pop  af
 ROM0:3685 E6 F8            and  a,F8
 ROM0:3687 82               add  d
 ROM0:3688 E1               pop  hl
 ROM0:3689 CD 1C 0F         call 0F1C           // (HL) = A, increment HL
 ROM0:368C FA 51 CC         ld   a,(CC51)
 ROM0:368F 47               ld   b,a
 ROM0:3690 FA 50 CC         ld   a,(CC50)
 ROM0:3693 4F               ld   c,a
 ROM0:3694 03               inc  bc
 ROM0:3695 78               ld   a,b
 ROM0:3696 EA 51 CC         ld   (CC51),a
 ROM0:3699 79               ld   a,c
 ROM0:369A EA 50 CC         ld   (CC50),a
 ROM0:369D FA 54 CC         ld   a,(CC54)
 ROM0:36A0 3C               inc  a
 ROM0:36A1 EA 54 CC         ld   (CC54),a       // X Offset incremented
 ROM0:36A4 FA 56 CC         ld   a,(CC56)
 ROM0:36A7 4F               ld   c,a
 ROM0:36A8 FA 54 CC         ld   a,(CC54)
 ROM0:36AB B9               cp   c
 ROM0:36AC DA 19 36         jp   c,3619         // Smaller loop for next entry on current row
 ROM0:36AF AF               xor  a
 ROM0:36B0 EA 54 CC         ld   (CC54),a
 ROM0:36B3 FA 55 CC         ld   a,(CC55)
 ROM0:36B6 3C               inc  a
 ROM0:36B7 EA 55 CC         ld   (CC55),a       // Y Offset incremented
 ROM0:36BA C3 0E 36         jp   360E
 ROM0:36BD F1               pop  af
 ROM0:36BE E0 80            ld   (ff00+80),a
 ROM0:36C0 EA 00 20         ld   (2000),a
 ROM0:36C3 C9               ret                 // Sets up BG graphics tile placements and attribute placements based on data in $CC50 bytes group, with Attribute having Pallete shifted by +3 and VRA1 unconditionally active
 ROM0:36C4 F0 80            ld   a,(ff00+80)
 ROM0:36C6 F5               push af
 ROM0:36C7 AF               xor  a
 ROM0:36C8 EA 54 CC         ld   (CC54),a
 ROM0:36CB EA 55 CC         ld   (CC55),a
 ROM0:36CE EA 50 CC         ld   (CC50),a
 ROM0:36D1 EA 51 CC         ld   (CC51),a
 ROM0:36D4 FA 57 CC         ld   a,(CC57)       // Loop begins here
 ROM0:36D7 4F               ld   c,a
 ROM0:36D8 FA 55 CC         ld   a,(CC55)
 ROM0:36DB B9               cp   c
 ROM0:36DC D2 75 37         jp   nc,3775        // End immediately if Value E has been reached
 ROM0:36DF FA 54 CC         ld   a,(CC54)       // Loop begins here if Value D hasn't been reached
 ROM0:36E2 4F               ld   c,a
 ROM0:36E3 FA 52 CC         ld   a,(CC52)
 ROM0:36E6 81               add  c
 ROM0:36E7 47               ld   b,a
 ROM0:36E8 FA 55 CC         ld   a,(CC55)
 ROM0:36EB 4F               ld   c,a
 ROM0:36EC FA 53 CC         ld   a,(CC53)
 ROM0:36EF 81               add  c
 ROM0:36F0 4F               ld   c,a
 ROM0:36F1 CD D4 0E         call 0ED4           // HL = $9800 X,Y
 ROM0:36F4 E5               push hl
 ROM0:36F5 3E 00            ld   a,00
 ROM0:36F7 E0 83            ld   (ff00+83),a
 ROM0:36F9 E0 4F            ld   (ff00+4F),a
 ROM0:36FB F5               push af
 ROM0:36FC FA 61 CC         ld   a,(CC61)
 ROM0:36FF 7F               ld   a,a
 ROM0:3700 E0 80            ld   (ff00+80),a
 ROM0:3702 EA 00 20         ld   (2000),a
 ROM0:3705 F1               pop  af
 ROM0:3706 FA 59 CC         ld   a,(CC59)
 ROM0:3709 6F               ld   l,a
 ROM0:370A FA 58 CC         ld   a,(CC58)
 ROM0:370D 67               ld   h,a            // Tile placement pointer
 ROM0:370E FA 50 CC         ld   a,(CC50)
 ROM0:3711 4F               ld   c,a
 ROM0:3712 FA 51 CC         ld   a,(CC51)
 ROM0:3715 47               ld   b,a
 ROM0:3716 09               add  hl,bc
 ROM0:3717 7E               ld   a,(hl)
 ROM0:3718 E1               pop  hl             // HL = $9800 X,Y
 ROM0:3719 E5               push hl
 ROM0:371A CD 1C 0F         call 0F1C           // (HL) = A, increment HL
 ROM0:371D 3E 01            ld   a,01
 ROM0:371F E0 83            ld   (ff00+83),a
 ROM0:3721 E0 4F            ld   (ff00+4F),a
 ROM0:3723 F5               push af
 ROM0:3724 FA 62 CC         ld   a,(CC62)
 ROM0:3727 7F               ld   a,a
 ROM0:3728 E0 80            ld   (ff00+80),a
 ROM0:372A EA 00 20         ld   (2000),a
 ROM0:372D F1               pop  af
 ROM0:372E FA 5B CC         ld   a,(CC5B)
 ROM0:3731 6F               ld   l,a
 ROM0:3732 FA 5A CC         ld   a,(CC5A)
 ROM0:3735 67               ld   h,a            // Palettes placement pointer
 ROM0:3736 FA 50 CC         ld   a,(CC50)
 ROM0:3739 4F               ld   c,a
 ROM0:373A FA 51 CC         ld   a,(CC51)
 ROM0:373D 47               ld   b,a
 ROM0:373E 09               add  hl,bc
 ROM0:373F 7E               ld   a,(hl)
 ROM0:3740 E1               pop  hl             // HL = $9800 X,Y
 ROM0:3741 CD 1C 0F         call 0F1C           // (HL) = A, increment HL
 ROM0:3744 FA 51 CC         ld   a,(CC51)
 ROM0:3747 47               ld   b,a
 ROM0:3748 FA 50 CC         ld   a,(CC50)
 ROM0:374B 4F               ld   c,a
 ROM0:374C 03               inc  bc
 ROM0:374D 78               ld   a,b
 ROM0:374E EA 51 CC         ld   (CC51),a
 ROM0:3751 79               ld   a,c
 ROM0:3752 EA 50 CC         ld   (CC50),a
 ROM0:3755 FA 54 CC         ld   a,(CC54)
 ROM0:3758 3C               inc  a
 ROM0:3759 EA 54 CC         ld   (CC54),a
 ROM0:375C FA 56 CC         ld   a,(CC56)
 ROM0:375F 4F               ld   c,a
 ROM0:3760 FA 54 CC         ld   a,(CC54)
 ROM0:3763 B9               cp   c
 ROM0:3764 DA DF 36         jp   c,36DF
 ROM0:3767 AF               xor  a
 ROM0:3768 EA 54 CC         ld   (CC54),a
 ROM0:376B FA 55 CC         ld   a,(CC55)
 ROM0:376E 3C               inc  a
 ROM0:376F EA 55 CC         ld   (CC55),a
 ROM0:3772 C3 D4 36         jp   36D4
 ROM0:3775 F1               pop  af
 ROM0:3776 E0 80            ld   (ff00+80),a
 ROM0:3778 EA 00 20         ld   (2000),a
 ROM0:377B C9               ret                 // Sets up BG graphics tile placements and palette placements based on data in $CC50 bytes group
 ROM0:377C F5               push af
 ROM0:377D E5               push hl
 ROM0:377E 21 41 FF         ld   hl,FF41
 ROM0:3781 F0 CC            ld   a,(ff00+CC)
 ROM0:3783 CB 4E            bit  1,(hl)         // Check: OAM-RAM Search or Transfer Data To LCD Driver
 ROM0:3785 20 FC            jr   nz,3783
 ROM0:3787 E0 4B            ld   (ff00+4B),a    // Window X Position - 7
 ROM0:3789 C5               push bc
 ROM0:378A D5               push de
 ROM0:378B F0 CD            ld   a,(ff00+CD)
 ROM0:378D 3C               inc  a
 ROM0:378E E0 CD            ld   (ff00+CD),a
 ROM0:3790 CB 47            bit  0,a
 ROM0:3792 20 0A            jr   nz,379E
 ROM0:3794 3E 07            ld   a,07
 ROM0:3796 E0 97            ld   (ff00+97),a    // Intended WX = 7
 ROM0:3798 3E 17            ld   a,17
 ROM0:379A E0 45            ld   (ff00+45),a    // LY Compare = 23
 ROM0:379C 18 08            jr   37A6
 ROM0:379E 3E FF            ld   a,FF
 ROM0:37A0 E0 97            ld   (ff00+97),a    // Intended WX = -1
 ROM0:37A2 3E 60            ld   a,60
 ROM0:37A4 E0 45            ld   (ff00+45),a    // LY Compare = 96
 ROM0:37A6 21 41 FF         ld   hl,FF41
 ROM0:37A9 CB F6            set  6,(hl)         // Enable LYC=LY Coincidence Interrupt
 ROM0:37AB CD B3 37         call 37B3           // Substitute WX set to -1 on even half-frames, or 7 on odd ones
 ROM0:37AE D1               pop  de
 ROM0:37AF C1               pop  bc
 ROM0:37B0 E1               pop  hl
 ROM0:37B1 F1               pop  af
 ROM0:37B2 D9               reti                // STAT Interrupt Procedure: alternates WX value between 7 and -1, with 7 used on half frames with the V-Blank period
 ROM0:37B3 F0 CD            ld   a,(ff00+CD)
 ROM0:37B5 CB 47            bit  0,a
 ROM0:37B7 28 04            jr   z,37BD
 ROM0:37B9 3E 07            ld   a,07
 ROM0:37BB 18 02            jr   37BF
 ROM0:37BD 3E FF            ld   a,FF
 ROM0:37BF E0 CC            ld   (ff00+CC),a
 ROM0:37C1 C9               ret                 // Substitute WX set to -1 on even half-frames, or 7 on odd ones
 ROM0:37C2 EA 4E CC         ld   (CC4E),a
 ROM0:37C5 7A               ld   a,d
 ROM0:37C6 EA 4F CC         ld   (CC4F),a
 ROM0:37C9 FA CB FF         ld   a,(FFCB)
 ROM0:37CC F5               push af
 ROM0:37CD C5               push bc
 ROM0:37CE AF               xor  a
 ROM0:37CF EA CB FF         ld   (FFCB),a
 ROM0:37D2 FA 4E CC         ld   a,(CC4E)       // Initial A
 ROM0:37D5 CD ED 34         call 34ED           // [$C300 + [$FFC8]] 3 byte holds: 1, B + C%8 * 32, 152 + C / 8, A; [$FFCA] incremented
 ROM0:37D8 C1               pop  bc
 ROM0:37D9 3E 01            ld   a,01
 ROM0:37DB EA CB FF         ld   (FFCB),a
 ROM0:37DE FA 4F CC         ld   a,(CC4F)       // Initial D
 ROM0:37E1 CD ED 34         call 34ED           // [$C300 + [$FFC8]] 3 byte holds: 1, B + C%8 * 32, 24 + C / 8, A; [$FFCA] incremented
 ROM0:37E4 F1               pop  af
 ROM0:37E5 EA CB FF         ld   (FFCB),a
 ROM0:37E8 C9               ret                 // Text Character A with Palette/Attributes D place at coordinates BC
 ROM0:37E9 F0 80            ld   a,(ff00+80)
 ROM0:37EB F5               push af
 ROM0:37EC 3E 04            ld   a,04
 ROM0:37EE E0 80            ld   (ff00+80),a
 ROM0:37F0 EA 00 20         ld   (2000),a
 ROM0:37F3 CD 00 40         call 4000
 ROM0:37F6 F1               pop  af
 ROM0:37F7 E0 80            ld   (ff00+80),a
 ROM0:37F9 EA 00 20         ld   (2000),a
 ROM0:37FC AF               xor  a
 ROM0:37FD EA 87 CC         ld   (CC87),a
 ROM0:3800 C9               ret  
 ROM0:3801 F0 80            ld   a,(ff00+80)
 ROM0:3803 F5               push af
 ROM0:3804 3E 04            ld   a,04
 ROM0:3806 E0 80            ld   (ff00+80),a
 ROM0:3808 EA 00 20         ld   (2000),a
 ROM0:380B CD 03 40         call 4003
 ROM0:380E F1               pop  af
 ROM0:380F E0 80            ld   (ff00+80),a
 ROM0:3811 EA 00 20         ld   (2000),a
 ROM0:3814 C9               ret  
 ROM0:3815 AF               xor  a
 ROM0:3816 C5               push bc
 ROM0:3817 47               ld   b,a            // A is already designated song, and B is set to such
 ROM0:3818 CD 5E 38         call 385E           // A = 0 if ($C102) is 128, 1 otherwise
 ROM0:381B A7               and  a
 ROM0:381C 28 06            jr   z,3824         // Jump if ($C102) is 128
 ROM0:381E FA 87 CC         ld   a,(CC87)
 ROM0:3821 B8               cp   b              // Compare ($CC87) to new song
 ROM0:3822 28 1D            jr   z,3841         // End if ($CC87) is designated song
 ROM0:3824 78               ld   a,b            // A = Designated song
 ROM0:3825 EA 87 CC         ld   (CC87),a       // ($CC87) = Designated song
 ROM0:3828 C5               push bc
 ROM0:3829 47               ld   b,a            // B = Designated song
 ROM0:382A F0 80            ld   a,(ff00+80)
 ROM0:382C F5               push af             // Original block storage
 ROM0:382D 3E 04            ld   a,04
 ROM0:382F E0 80            ld   (ff00+80),a
 ROM0:3831 EA 00 20         ld   (2000),a       // Going to 04 block
 ROM0:3834 78               ld   a,b            // A = Designated song
 ROM0:3835 CD 06 40         call 4006           // If A < 45, ($C102) = A
 ROM0:3838 47               ld   b,a            // B = Designated song
 ROM0:3839 F1               pop  af
 ROM0:383A E0 80            ld   (ff00+80),a
 ROM0:383C EA 00 20         ld   (2000),a       // Original block restored
 ROM0:383F 78               ld   a,b            // A = Designated song
 ROM0:3840 C1               pop  bc
 ROM0:3841 C1               pop  bc
 ROM0:3842 C9               ret                 // Changes ($C102) to designated song as necessary
 ROM0:3843 AF               xor  a
 ROM0:3844 C5               push bc
 ROM0:3845 47               ld   b,a
 ROM0:3846 F0 80            ld   a,(ff00+80)
 ROM0:3848 F5               push af
 ROM0:3849 3E 04            ld   a,04
 ROM0:384B E0 80            ld   (ff00+80),a
 ROM0:384D EA 00 20         ld   (2000),a
 ROM0:3850 78               ld   a,b
 ROM0:3851 CD 09 40         call 4009           // ($C104) 3 byte holds: A, 2, (OR ($5581 + A),($C106))
 ROM0:3854 47               ld   b,a
 ROM0:3855 F1               pop  af
 ROM0:3856 E0 80            ld   (ff00+80),a
 ROM0:3858 EA 00 20         ld   (2000),a
 ROM0:385B 78               ld   a,b
 ROM0:385C C1               pop  bc
 ROM0:385D C9               ret  
 ROM0:385E C5               push bc
 ROM0:385F 47               ld   b,a            // A must be the song, and B would be set to such
 ROM0:3860 F0 80            ld   a,(ff00+80)
 ROM0:3862 F5               push af             // Original block storage
 ROM0:3863 3E 04            ld   a,04
 ROM0:3865 E0 80            ld   (ff00+80),a
 ROM0:3867 EA 00 20         ld   (2000),a       // Going to 04 block
 ROM0:386A 78               ld   a,b            // A must be the new song
 ROM0:386B CD 0F 40         call 400F           // A = 0 if ($C102) is 128, 1 otherwise
 ROM0:386E 47               ld   b,a            // B = 0 if ($C102) is 128, 1 otherwise
 ROM0:386F F1               pop  af
 ROM0:3870 E0 80            ld   (ff00+80),a
 ROM0:3872 EA 00 20         ld   (2000),a       // Original block restored
 ROM0:3875 78               ld   a,b            // A = 0 if ($C102) is 128, 1 otherwise
 ROM0:3876 C1               pop  bc
 ROM0:3877 C9               ret  
 ROM0:3878 C5               push bc
 ROM0:3879 47               ld   b,a
 ROM0:387A F0 80            ld   a,(ff00+80)
 ROM0:387C F5               push af
 ROM0:387D 3E 04            ld   a,04
 ROM0:387F E0 80            ld   (ff00+80),a
 ROM0:3881 EA 00 20         ld   (2000),a
 ROM0:3884 78               ld   a,b
 ROM0:3885 CD 12 40         call 4012           // A = 1 if ($C105) is active, 0 otherwise
 ROM0:3888 47               ld   b,a
 ROM0:3889 F1               pop  af
 ROM0:388A E0 80            ld   (ff00+80),a
 ROM0:388C EA 00 20         ld   (2000),a
 ROM0:388F 78               ld   a,b
 ROM0:3890 C1               pop  bc
 ROM0:3891 C9               ret  
 ROM0:3892 C5               push bc
 ROM0:3893 47               ld   b,a
 ROM0:3894 F0 80            ld   a,(ff00+80)
 ROM0:3896 F5               push af
 ROM0:3897 3E 04            ld   a,04
 ROM0:3899 E0 80            ld   (ff00+80),a
 ROM0:389B EA 00 20         ld   (2000),a
 ROM0:389E 78               ld   a,b
 ROM0:389F CD 18 40         call 4018
 ROM0:38A2 47               ld   b,a
 ROM0:38A3 F1               pop  af
 ROM0:38A4 E0 80            ld   (ff00+80),a
 ROM0:38A6 EA 00 20         ld   (2000),a
 ROM0:38A9 78               ld   a,b
 ROM0:38AA C1               pop  bc
 ROM0:38AB C9               ret  
 ROM0:38AC F0 80            ld   a,(ff00+80)
 ROM0:38AE F5               push af
 ROM0:38AF 3E 04            ld   a,04
 ROM0:38B1 E0 80            ld   (ff00+80),a
 ROM0:38B3 EA 00 20         ld   (2000),a
 ROM0:38B6 CD 1B 40         call 401B
 ROM0:38B9 F1               pop  af
 ROM0:38BA E0 80            ld   (ff00+80),a
 ROM0:38BC EA 00 20         ld   (2000),a
 ROM0:38BF C9               ret  
 ROM0:38C0 F0 80            ld   a,(ff00+80)
 ROM0:38C2 F5               push af
 ROM0:38C3 3E 04            ld   a,04
 ROM0:38C5 E0 80            ld   (ff00+80),a
 ROM0:38C7 EA 00 20         ld   (2000),a
 ROM0:38CA CD 1E 40         call 401E
 ROM0:38CD F1               pop  af
 ROM0:38CE E0 80            ld   (ff00+80),a
 ROM0:38D0 EA 00 20         ld   (2000),a
 ROM0:38D3 C9               ret  

 ROM0:38D4 80 A0               and  b
 ROM0:38D6 80 A2               and  d
 ROM0:38D8 80 A4               and  h
 ROM0:38DA 80 A6               and  (hl)
 ROM0:38DC 80 A8               xor  b
 ROM0:38DE 80 AA               xor  d

 ROM0:38E0 01 A0
 ROM0:38E2 01 B0               or   b
 ROM0:38E4 02 A0               and  b
 ROM0:38E6 06 A0            ld   b,A0
 ROM0:38E8 06 B0            ld   b,B0

 ROM0:38EA 02 B0               or   b
 ROM0:38EC 03 A0               and  b
 ROM0:38EE 03 B0               or   b
 ROM0:38F0 06 A0            ld   b,A0
 ROM0:38F2 06 B0            ld   b,B0

 ROM0:38F4 04 A0               and  b
 ROM0:38F6 04 B0               or   b
 ROM0:38F8 05 A0               and  b
 ROM0:38FA 06 A0            ld   b,A0
 ROM0:38FC 06 B0            ld   b,B0

 ROM0:38FE 05 B0               or   b
 ROM0:3900 05 B0               or   b
 ROM0:3902 05 B0               or   b
 ROM0:3904 05 B0               or   b
 ROM0:3906 05 B0               or   b

 ROM0:3908 06 A0            ld   b,A0
 ROM0:390A 06 A0            ld   b,A0
 ROM0:390C 06 A0            ld   b,A0
 ROM0:390E 06 A0            ld   b,A0
 ROM0:3910 06 A0            ld   b,A0

 ROM0:3912 06 B0            ld   b,B0
 ROM0:3914 06 B0            ld   b,B0
 ROM0:3916 06 B0            ld   b,B0
 ROM0:3918 06 B0            ld   b,B0
 ROM0:391A 06 B0            ld   b,B0

 ROM0:391C 07 A0               and  b
 ROM0:391E 07 B0               or   b
 ROM0:3920 08 A0
 ROM0:3922 08 B0               or   b
 ROM0:3924 09 A0               and  b
 ROM0:3926 09 B0               or   b
 ROM0:3928 0A A0               and  b
 ROM0:392A 0A B0               or   b
 ROM0:392C 0B A0               and  b
 ROM0:392E 0B B0               or   b

 ROM0:3930 3E 00            ld   a,00
 ROM0:3932 CD 8D 05         call 058D           // ($4000) = 0, ($FF81) = 0
 ROM0:3935 CD 93 05         call 0593           // ($0000) = 10
 ROM0:3938 21 00 A0         ld   hl,A000
 ROM0:393B 2A               ldi  a,(hl)
 ROM0:393C FE 47            cp   a,47
 ROM0:393E 20 21            jr   nz,3961        // Mismatch ends with A = 1
 ROM0:3940 2A               ldi  a,(hl)
 ROM0:3941 FE 42            cp   a,42
 ROM0:3943 20 1C            jr   nz,3961        // Mismatch ends with A = 1
 ROM0:3945 2A               ldi  a,(hl)
 ROM0:3946 FE 57            cp   a,57
 ROM0:3948 20 17            jr   nz,3961        // Mismatch ends with A = 1
 ROM0:394A 2A               ldi  a,(hl)
 ROM0:394B FE 33            cp   a,33
 ROM0:394D 20 12            jr   nz,3961        // Mismatch ends with A = 1
 ROM0:394F 2A               ldi  a,(hl)
 ROM0:3950 FE 00            cp   a,00
 ROM0:3952 20 0D            jr   nz,3961        // Mismatch ends with A = 1
 ROM0:3954 2A               ldi  a,(hl)
 ROM0:3955 FE 09            cp   a,09
 ROM0:3957 20 08            jr   nz,3961        // Mismatch ends with A = 1
 ROM0:3959 2A               ldi  a,(hl)
 ROM0:395A FE 14            cp   a,14
 ROM0:395C 20 03            jr   nz,3961        // Mismatch ends with A = 1
 ROM0:395E AF               xor  a
 ROM0:395F 18 02            jr   3963
 ROM0:3961 3E 01            ld   a,01
 ROM0:3963 C9               ret  
 ROM0:3964 3E 00            ld   a,00
 ROM0:3966 CD 8D 05         call 058D           // ($4000) = 0, ($FF81) = 0
 ROM0:3969 CD 93 05         call 0593           // ($0000) = 10
 ROM0:396C 21 00 A0         ld   hl,A000
 ROM0:396F 3E 47            ld   a,47
 ROM0:3971 22               ldi  (hl),a
 ROM0:3972 3E 42            ld   a,42
 ROM0:3974 22               ldi  (hl),a
 ROM0:3975 3E 57            ld   a,57
 ROM0:3977 22               ldi  (hl),a
 ROM0:3978 3E 33            ld   a,33
 ROM0:397A 22               ldi  (hl),a
 ROM0:397B 3E 00            ld   a,00
 ROM0:397D 22               ldi  (hl),a
 ROM0:397E 3E 09            ld   a,09
 ROM0:3980 22               ldi  (hl),a
 ROM0:3981 3E 14            ld   a,14
 ROM0:3983 22               ldi  (hl),a
 ROM0:3984 CD 9B 05         call 059B           // ($0000) = 0
 ROM0:3987 C9               ret  
 ROM0:3988 CD 93 05         call 0593           // ($0000) = 10
 ROM0:398B 16 00            ld   d,00
 ROM0:398D 7A               ld   a,d            // Loop begins here
 ROM0:398E CD 8D 05         call 058D           // ($4000) = D, ($FF81) = D
 ROM0:3991 21 00 A0         ld   hl,A000
 ROM0:3994 01 00 20         ld   bc,2000
 ROM0:3997 AF               xor  a
 ROM0:3998 CD 79 3B         call 3B79           // (HL ~ HL+BC-1) = 0
 ROM0:399B 14               inc  d
 ROM0:399C 7A               ld   a,d
 ROM0:399D FE 10            cp   a,10
 ROM0:399F 20 EC            jr   nz,398D        // Clears all SRAM banks
 ROM0:39A1 CD 64 39         call 3964           // SRA0($A000~A006) holds values $47,$42,$57,$33,$00,$09,$14
 ROM0:39A4 CD 93 05         call 0593           // ($0000) = 10
 ROM0:39A7 3E 00            ld   a,00
 ROM0:39A9 CD 8D 05         call 058D           // ($4000) = 0, ($FF81) = 0
 ROM0:39AC 21 12 A0         ld   hl,A012
 ROM0:39AF 01 3C 00         ld   bc,003C
 ROM0:39B2 3E FF            ld   a,FF
 ROM0:39B4 CD 79 3B         call 3B79           // (HL ~ HL+BC-1) = -1
 ROM0:39B7 CD 9B 05         call 059B           // ($0000) = 0
 ROM0:39BA EF 19 59 70                          
 ROM0:39BE 3E 00            ld   a,00
 ROM0:39C0 CD 8D 05         call 058D           // ($4000) = 0, ($FF81) = 0
 ROM0:39C3 CD 9B 05         call 059B           // ($0000) = 0
 ROM0:39C6 C9               ret  
 ROM0:39C7 D5               push de
 ROM0:39C8 E5               push hl
 ROM0:39C9 01 00 00         ld   bc,0000
 ROM0:39CC 2A               ldi  a,(hl)         // Loop begins here
 ROM0:39CD 81               add  c
 ROM0:39CE 4F               ld   c,a
 ROM0:39CF 78               ld   a,b
 ROM0:39D0 CE 00            adc  a,00
 ROM0:39D2 47               ld   b,a
 ROM0:39D3 1B               dec  de
 ROM0:39D4 7B               ld   a,e
 ROM0:39D5 B2               or   d
 ROM0:39D6 20 F4            jr   nz,39CC
 ROM0:39D8 E1               pop  hl
 ROM0:39D9 D1               pop  de
 ROM0:39DA C9               ret                 // BC holds sum of all values of HL to HL+DE-1
 ROM0:39DB 78               ld   a,b
 ROM0:39DC EA BC CC         ld   (CCBC),a
 ROM0:39DF 79               ld   a,c
 ROM0:39E0 EA BD CC         ld   (CCBD),a
 ROM0:39E3 7D               ld   a,l
 ROM0:39E4 EA BA CC         ld   (CCBA),a
 ROM0:39E7 FE 00            cp   a,00
 ROM0:39E9 28 02            jr   z,39ED
 ROM0:39EB 18 09            jr   39F6
 ROM0:39ED AF               xor  a
 ROM0:39EE EA BE CC         ld   (CCBE),a
 ROM0:39F1 EA BF CC         ld   (CCBF),a       // L, ?, B, C, 0, 0
 ROM0:39F4 18 09            jr   39FF
 ROM0:39F6 7A               ld   a,d
 ROM0:39F7 3D               dec  a
 ROM0:39F8 EA BE CC         ld   (CCBE),a
 ROM0:39FB AF               xor  a
 ROM0:39FC EA BF CC         ld   (CCBF),a       // L, ?, B, C, D - 1, 0
 ROM0:39FF 7A               ld   a,d            // Meets back here
 ROM0:3A00 EA C0 CC         ld   (CCC0),a
 ROM0:3A03 7B               ld   a,e
 ROM0:3A04 EA C1 CC         ld   (CCC1),a
 ROM0:3A07 7C               ld   a,h
 ROM0:3A08 EA BB CC         ld   (CCBB),a       // L, H, B, C, 0 or D - 1, 0, D, E
 ROM0:3A0B FA C1 CC         ld   a,(CCC1)       // Bigger loop begins here
 ROM0:3A0E 4F               ld   c,a
 ROM0:3A0F FA BF CC         ld   a,(CCBF)
 ROM0:3A12 B9               cp   c
 ROM0:3A13 D2 8E 3A         jp   nc,3A8E
 ROM0:3A16 FA BE CC         ld   a,(CCBE)       // Mini-loop begins here
 ROM0:3A19 4F               ld   c,a
 ROM0:3A1A FA BC CC         ld   a,(CCBC)
 ROM0:3A1D 81               add  c
 ROM0:3A1E 47               ld   b,a            // B += X
 ROM0:3A1F FA BF CC         ld   a,(CCBF)
 ROM0:3A22 4F               ld   c,a
 ROM0:3A23 FA BD CC         ld   a,(CCBD)
 ROM0:3A26 81               add  c
 ROM0:3A27 4F               ld   c,a            // C += Y
 ROM0:3A28 CD D4 0E         call 0ED4           // HL = $9800 + B + C * 32
 ROM0:3A2B F0 83            ld   a,(ff00+83)
 ROM0:3A2D F5               push af
 ROM0:3A2E 3E 00            ld   a,00
 ROM0:3A30 E0 83            ld   (ff00+83),a
 ROM0:3A32 E0 4F            ld   (ff00+4F),a
 ROM0:3A34 FA BB CC         ld   a,(CCBB)
 ROM0:3A37 CD 1C 0F         call 0F1C           // (HL) = A, increment HL
 ROM0:3A3A F1               pop  af
 ROM0:3A3B E0 83            ld   (ff00+83),a
 ROM0:3A3D E0 4F            ld   (ff00+4F),a
 ROM0:3A3F FA BB CC         ld   a,(CCBB)
 ROM0:3A42 3C               inc  a
 ROM0:3A43 EA BB CC         ld   (CCBB),a
 ROM0:3A46 FA BA CC         ld   a,(CCBA)
 ROM0:3A49 FE 00            cp   a,00
 ROM0:3A4B 28 02            jr   z,3A4F
 ROM0:3A4D 18 1F            jr   3A6E           // Branches for White Moon side
 ROM0:3A4F FA BE CC         ld   a,(CCBE)
 ROM0:3A52 3C               inc  a
 ROM0:3A53 EA BE CC         ld   (CCBE),a
 ROM0:3A56 FA C0 CC         ld   a,(CCC0)
 ROM0:3A59 4F               ld   c,a
 ROM0:3A5A FA BE CC         ld   a,(CCBE)
 ROM0:3A5D B9               cp   c
 ROM0:3A5E DA 16 3A         jp   c,3A16         // Mini-loop for same row
 ROM0:3A61 AF               xor  a
 ROM0:3A62 EA BE CC         ld   (CCBE),a
 ROM0:3A65 FA BF CC         ld   a,(CCBF)
 ROM0:3A68 3C               inc  a
 ROM0:3A69 EA BF CC         ld   (CCBF),a
 ROM0:3A6C 18 9D            jr   3A0B
 ROM0:3A6E FA BE CC         ld   a,(CCBE)
 ROM0:3A71 3D               dec  a
 ROM0:3A72 EA BE CC         ld   (CCBE),a
 ROM0:3A75 FA BE CC         ld   a,(CCBE)
 ROM0:3A78 FE FF            cp   a,FF
 ROM0:3A7A C2 16 3A         jp   nz,3A16         // Mini-loop for same row
 ROM0:3A7D FA C0 CC         ld   a,(CCC0)
 ROM0:3A80 3D               dec  a
 ROM0:3A81 EA BE CC         ld   (CCBE),a
 ROM0:3A84 FA BF CC         ld   a,(CCBF)
 ROM0:3A87 3C               inc  a
 ROM0:3A88 EA BF CC         ld   (CCBF),a
 ROM0:3A8B C3 0B 3A         jp   3A0B
 ROM0:3A8E C9               ret                 // VRA0 rectangle BC, size DE set to H + Prior Tiles (L is horizontal flip flag)
 ROM0:3A8F CD 93 3A         call 3A93           // HL = (2A + HL)
 ROM0:3A92 E9               jp   hl
 ROM0:3A93 87               add  a
 ROM0:3A94 85               add  l              // A = 2A + L
 ROM0:3A95 6F               ld   l,a
 ROM0:3A96 7C               ld   a,h
 ROM0:3A97 CE 00            adc  a,00
 ROM0:3A99 67               ld   h,a            // HL = 2A + HL
 ROM0:3A9A 2A               ldi  a,(hl)
 ROM0:3A9B 66               ld   h,(hl)
 ROM0:3A9C 6F               ld   l,a            // HL = (2A + HL) 2 byte reverse
 ROM0:3A9D C9               ret  
 ROM0:3A9E C5               push bc
 ROM0:3A9F 06 00            ld   b,00
 ROM0:3AA1 0F               rrca 
 ROM0:3AA2 38 1D            jr   c,3AC1         // A?
 ROM0:3AA4 04               inc  b
 ROM0:3AA5 0F               rrca 
 ROM0:3AA6 38 19            jr   c,3AC1         // B?
 ROM0:3AA8 04               inc  b
 ROM0:3AA9 0F               rrca 
 ROM0:3AAA 38 15            jr   c,3AC1         // Select?
 ROM0:3AAC 04               inc  b
 ROM0:3AAD 0F               rrca 
 ROM0:3AAE 38 11            jr   c,3AC1         // Start?
 ROM0:3AB0 04               inc  b
 ROM0:3AB1 0F               rrca 
 ROM0:3AB2 38 0D            jr   c,3AC1         // Right?
 ROM0:3AB4 04               inc  b
 ROM0:3AB5 0F               rrca 
 ROM0:3AB6 38 09            jr   c,3AC1         // Left?
 ROM0:3AB8 04               inc  b
 ROM0:3AB9 0F               rrca 
 ROM0:3ABA 38 05            jr   c,3AC1         // Up?
 ROM0:3ABC 04               inc  b
 ROM0:3ABD 0F               rrca 
 ROM0:3ABE 38 01            jr   c,3AC1         // Down?
 ROM0:3AC0 04               inc  b
 ROM0:3AC1 78               ld   a,b
 ROM0:3AC2 CD 93 3A         call 3A93           // HL = (2 * 0~8 + HL)
 ROM0:3AC5 C1               pop  bc
 ROM0:3AC6 C9               ret  
 ROM0:3AC7 C5               push bc
 ROM0:3AC8 E5               push hl
 ROM0:3AC9 CD E9 3A         call 3AE9           // HL += A/8, C = 2^A%8
 ROM0:3ACC 7E               ld   a,(hl)
 ROM0:3ACD A1               and  c
 ROM0:3ACE E1               pop  hl
 ROM0:3ACF C1               pop  bc
 ROM0:3AD0 C9               ret                 // A = AND (HL + A/8), 2^A%8
 ROM0:3AD1 C5               push bc
 ROM0:3AD2 E5               push hl
 ROM0:3AD3 CD E9 3A         call 3AE9           // HL += A/8, C = 2^A%8
 ROM0:3AD6 7E               ld   a,(hl)
 ROM0:3AD7 B1               or   c
 ROM0:3AD8 77               ld   (hl),a         // (HL + A/8) = (HL + A/8) OR 2^A%8
 ROM0:3AD9 E1               pop  hl
 ROM0:3ADA C1               pop  bc
 ROM0:3ADB C9               ret                 // (HL + A/8) = (HL + A/8) OR 2^A%8
 ROM0:3ADC C5               push bc
 ROM0:3ADD E5               push hl
 ROM0:3ADE CD E9 3A         call 3AE9           // HL += A/8, C = 2^A%8
 ROM0:3AE1 79               ld   a,c
 ROM0:3AE2 2F               cpl  
 ROM0:3AE3 46               ld   b,(hl)
 ROM0:3AE4 A0               and  b              // A = AND CPL 2^A%8,(HL + A/8)
 ROM0:3AE5 77               ld   (hl),a         // (HL + A/8) = AND CPL 2^A%8,(HL + A/8)
 ROM0:3AE6 E1               pop  hl
 ROM0:3AE7 C1               pop  bc
 ROM0:3AE8 C9               ret  
 ROM0:3AE9 47               ld   b,a
 ROM0:3AEA CB 3F            srl  a
 ROM0:3AEC CB 3F            srl  a
 ROM0:3AEE CB 3F            srl  a
 ROM0:3AF0 85               add  l
 ROM0:3AF1 6F               ld   l,a            // L += A/8
 ROM0:3AF2 7C               ld   a,h
 ROM0:3AF3 CE 00            adc  a,00
 ROM0:3AF5 67               ld   h,a            // HL += A/8
 ROM0:3AF6 78               ld   a,b
 ROM0:3AF7 E6 07            and  a,07
 ROM0:3AF9 47               ld   b,a            // B = A%8
 ROM0:3AFA 0E 01            ld   c,01
 ROM0:3AFC 78               ld   a,b
 ROM0:3AFD A7               and  a
 ROM0:3AFE 28 05            jr   z,3B05
 ROM0:3B00 05               dec  b
 ROM0:3B01 CB 21            sla  c
 ROM0:3B03 18 F7            jr   3AFC
 ROM0:3B05 C9               ret                 // HL += A/8, C = 2^A%8
 ROM0:3B06 E0 CE            ld   (ff00+CE),a    // A is stored in (FFCE)
 ROM0:3B08 F0 80            ld   a,(ff00+80)
 ROM0:3B0A F5               push af             // Bank is stored in stack pointer
 ROM0:3B0B C5               push bc
 ROM0:3B0C 7D               ld   a,l
 ROM0:3B0D E0 CF            ld   (ff00+CF),a
 ROM0:3B0F 7C               ld   a,h
 ROM0:3B10 E0 D0            ld   (ff00+D0),a    // HL is stored in (FFCF)
 ROM0:3B12 F8 04            ld   hl,sp+04
 ROM0:3B14 7E               ld   a,(hl)         // A = (SP+04)
 ROM0:3B15 4F               ld   c,a            // C = (SP+04) -- Original PC
 ROM0:3B16 C6 03            add  a,03
 ROM0:3B18 22               ldi  (hl),a         // (SP+04) += 3, HL = SP+05
 ROM0:3B19 7E               ld   a,(hl)
 ROM0:3B1A 47               ld   b,a            // BC = old address
 ROM0:3B1B CE 00            adc  a,00
 ROM0:3B1D 77               ld   (hl),a         // (SP+04) 2 byte = new address
 ROM0:3B1E 69               ld   l,c
 ROM0:3B1F 60               ld   h,b            // HL = old address
 ROM0:3B20 2A               ldi  a,(hl)         // A = (old address) 1st byte
 ROM0:3B21 F5               push af
 ROM0:3B22 2A               ldi  a,(hl)         // A = (old address) 2nd byte
 ROM0:3B23 66               ld   h,(hl)         // H = (old address) 3rd byte
 ROM0:3B24 6F               ld   l,a            // L = (old address) 2nd byte
 ROM0:3B25 F1               pop  af             // A = (old address) 1st byte
 ROM0:3B26 E0 80            ld   (ff00+80),a
 ROM0:3B28 EA 00 20         ld   (2000),a       // Establishes active ROM block
 ROM0:3B2B C1               pop  bc             // Original BC
 ROM0:3B2C CD 46 3B         call 3B46           // Grabs ($FFCE) stuff then procedes to involved procedure
 ROM0:3B2F F5               push af
 ROM0:3B30 78               ld   a,b
 ROM0:3B31 E0 CE            ld   (ff00+CE),a
 ROM0:3B33 79               ld   a,c
 ROM0:3B34 E0 CF            ld   (ff00+CF),a    // ($FFCE) 2 byte = BC
 ROM0:3B36 C1               pop  bc             // Saves AF in BC
 ROM0:3B37 F1               pop  af             // A = original ($FF80)
 ROM0:3B38 E0 80            ld   (ff00+80),a
 ROM0:3B3A EA 00 20         ld   (2000),a       // Establishes return to original ROM block
 ROM0:3B3D C5               push bc             // Pushes saved AF
 ROM0:3B3E F0 CE            ld   a,(ff00+CE)
 ROM0:3B40 47               ld   b,a
 ROM0:3B41 F0 CF            ld   a,(ff00+CF)
 ROM0:3B43 4F               ld   c,a            // BC is set back
 ROM0:3B44 F1               pop  af             // AF is set back
 ROM0:3B45 C9               ret  
 ROM0:3B46 E5               push hl             // Does not get POPped in this procedure; relies on resulting procedure HL to fully Return
 ROM0:3B47 F0 CF            ld   a,(ff00+CF)
 ROM0:3B49 6F               ld   l,a
 ROM0:3B4A F0 D0            ld   a,(ff00+D0)
 ROM0:3B4C 67               ld   h,a            // HL = (FFCF) 2 byte; HL was stored here before. Probably.
 ROM0:3B4D F0 CE            ld   a,(ff00+CE)    // A = (FFCE); A was stored here before. Probably.
 ROM0:3B4F C9               ret
 ROM0:3B50 1A               ld   a,(de)
 ROM0:3B51 22               ldi  (hl),a
 ROM0:3B52 13               inc  de
 ROM0:3B53 0B               dec  bc
 ROM0:3B54 78               ld   a,b
 ROM0:3B55 B1               or   c
 ROM0:3B56 20 F8            jr   nz,3B50
 ROM0:3B58 C9               ret                 // (HL ~ HL+BC-1) = (DE ~ DE+BC-1)
 ROM0:3B59 FA 0F C0         ld   a,(C00F)
 ROM0:3B5C CB 7F            bit  7,a
 ROM0:3B5E 28 F0            jr   z,3B50
 ROM0:3B60 FB               ei   
 ROM0:3B61 F3               di   
 ROM0:3B62 F0 41            ld   a,(ff00+41)
 ROM0:3B64 E6 02            and  a,02
 ROM0:3B66 20 F8            jr   nz,3B60
 ROM0:3B68 1A               ld   a,(de)
 ROM0:3B69 77               ld   (hl),a
 ROM0:3B6A F0 41            ld   a,(ff00+41)
 ROM0:3B6C E6 02            and  a,02
 ROM0:3B6E 20 F0            jr   nz,3B60
 ROM0:3B70 FB               ei   
 ROM0:3B71 13               inc  de
 ROM0:3B72 23               inc  hl
 ROM0:3B73 0B               dec  bc
 ROM0:3B74 78               ld   a,b
 ROM0:3B75 B1               or   c
 ROM0:3B76 20 E8            jr   nz,3B60
 ROM0:3B78 C9               ret                 // (HL ~ HL+BC-1) = (DE ~ DE+BC-1) (involves cooldown)
 ROM0:3B79 D5               push de
 ROM0:3B7A 57               ld   d,a
 ROM0:3B7B 72               ld   (hl),d
 ROM0:3B7C 23               inc  hl
 ROM0:3B7D 0B               dec  bc
 ROM0:3B7E 78               ld   a,b
 ROM0:3B7F B1               or   c
 ROM0:3B80 20 F9            jr   nz,3B7B
 ROM0:3B82 D1               pop  de
 ROM0:3B83 C9               ret                 // (HL ~ HL+BC-1) = A
 ROM0:3B84 D5               push de
 ROM0:3B85 57               ld   d,a
 ROM0:3B86 FA 0F C0         ld   a,(C00F)
 ROM0:3B89 CB 7F            bit  7,a
 ROM0:3B8B 28 EE            jr   z,3B7B
 ROM0:3B8D FB               ei   
 ROM0:3B8E F3               di   
 ROM0:3B8F F0 41            ld   a,(ff00+41)
 ROM0:3B91 E6 02            and  a,02
 ROM0:3B93 20 F8            jr   nz,3B8D
 ROM0:3B95 72               ld   (hl),d
 ROM0:3B96 F0 41            ld   a,(ff00+41)
 ROM0:3B98 E6 02            and  a,02
 ROM0:3B9A 20 F1            jr   nz,3B8D
 ROM0:3B9C FB               ei   
 ROM0:3B9D 23               inc  hl
 ROM0:3B9E 0B               dec  bc
 ROM0:3B9F 78               ld   a,b
 ROM0:3BA0 B1               or   c
 ROM0:3BA1 20 EA            jr   nz,3B8D
 ROM0:3BA3 D1               pop  de
 ROM0:3BA4 C9               ret  
 ROM0:3BA5 73               ld   (hl),e
 ROM0:3BA6 23               inc  hl
 ROM0:3BA7 72               ld   (hl),d         // (HL) 2 byte reverse = DE
 ROM0:3BA8 23               inc  hl
 ROM0:3BA9 0B               dec  bc
 ROM0:3BAA 78               ld   a,b
 ROM0:3BAB B1               or   c
 ROM0:3BAC 20 F7            jr   nz,3BA5        // Repeats for BC
 ROM0:3BAE C9               ret                 // (HL) 2 byte to (HL + (BC - 1) * 2) 2 byte filled with DE reverse
 ROM0:3BAF F5               push af
 ROM0:3BB0 CD A2 05         call 05A2           // Button update, next frame
 ROM0:3BB3 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROM0:3BB6 F1               pop  af
 ROM0:3BB7 3D               dec  a
 ROM0:3BB8 20 F5            jr   nz,3BAF
 ROM0:3BBA C9               ret                 // Advances game state by frame count determined directly by A before any further functions
 ROM0:3BBB 3E 00            ld   a,00
 ROM0:3BBD E0 83            ld   (ff00+83),a
 ROM0:3BBF E0 4F            ld   (ff00+4F),a
 ROM0:3BC1 F0 80            ld   a,(ff00+80)
 ROM0:3BC3 F5               push af
 ROM0:3BC4 3E 01            ld   a,01
 ROM0:3BC6 E0 80            ld   (ff00+80),a
 ROM0:3BC8 EA 00 20         ld   (2000),a
 ROM0:3BCB 11 80 51         ld   de,5180
 ROM0:3BCE 21 10 90         ld   hl,9010
 ROM0:3BD1 01 30 00         ld   bc,0030
 ROM0:3BD4 CD 50 3B         call 3B50           // ($9010~$903F) = $1:($5180~$51AF) (border graphics)
 ROM0:3BD7 3E 15            ld   a,15
 ROM0:3BD9 E0 80            ld   (ff00+80),a
 ROM0:3BDB EA 00 20         ld   (2000),a
 ROM0:3BDE 11 3A 6C         ld   de,6C3A
 ROM0:3BE1 21 40 90         ld   hl,9040
 ROM0:3BE4 01 60 00         ld   bc,0060
 ROM0:3BE7 CD 50 3B         call 3B50           // ($9040~$909F) = $15:($6C3A~$6C99) ("OK/NO" graphics)
 ROM0:3BEA F1               pop  af
 ROM0:3BEB E0 80            ld   (ff00+80),a
 ROM0:3BED EA 00 20         ld   (2000),a
 ROM0:3BF0 C9               ret                 // Establishes table graphics for absolute erasure prompt


 ROM0:3BF1 FF               rst  38
 ROM0:3BF2 FF               rst  38
 ROM0:3BF3 FF               rst  38
 ROM0:3BF4 FF               rst  38
 ROM0:3BF5 FF               rst  38
 ROM0:3BF6 FF               rst  38
 ROM0:3BF7 FF               rst  38
 ROM0:3BF8 FF               rst  38
 ROM0:3BF9 FF               rst  38
 ROM0:3BFA FF               rst  38
 ROM0:3BFB FF               rst  38
 ROM0:3BFC FF               rst  38
 ROM0:3BFD FF               rst  38
 ROM0:3BFE FF               rst  38
 ROM0:3BFF FF               rst  38
 ROM0:3C00 FF               rst  38
 ROM0:3C01 FF               rst  38
 ROM0:3C02 FF               rst  38
 ROM0:3C03 FF               rst  38
 ROM0:3C04 FF               rst  38
 ROM0:3C05 FF               rst  38
 ROM0:3C06 FF               rst  38
 ROM0:3C07 FF               rst  38
 ROM0:3C08 FF               rst  38
 ROM0:3C09 FF               rst  38
 ROM0:3C0A FF               rst  38
 ROM0:3C0B FF               rst  38
 ROM0:3C0C FF               rst  38
 ROM0:3C0D FF               rst  38
 ROM0:3C0E FF               rst  38
 ROM0:3C0F FF               rst  38
 ROM0:3C10 FF               rst  38
 ROM0:3C11 FF               rst  38
 ROM0:3C12 FF               rst  38
 ROM0:3C13 FF               rst  38
 ROM0:3C14 FF               rst  38
 ROM0:3C15 FF               rst  38
 ROM0:3C16 FF               rst  38
 ROM0:3C17 FF               rst  38
 ROM0:3C18 FF               rst  38
 ROM0:3C19 FF               rst  38
 ROM0:3C1A FF               rst  38
 ROM0:3C1B FF               rst  38
 ROM0:3C1C FF               rst  38
 ROM0:3C1D FF               rst  38
 ROM0:3C1E FF               rst  38
 ROM0:3C1F FF               rst  38
 ROM0:3C20 FF               rst  38
 ROM0:3C21 FF               rst  38
 ROM0:3C22 FF               rst  38
 ROM0:3C23 FF               rst  38
 ROM0:3C24 FF               rst  38
 ROM0:3C25 FF               rst  38
 ROM0:3C26 FF               rst  38
 ROM0:3C27 FF               rst  38
 ROM0:3C28 FF               rst  38
 ROM0:3C29 FF               rst  38
 ROM0:3C2A FF               rst  38
 ROM0:3C2B FF               rst  38
 ROM0:3C2C FF               rst  38
 ROM0:3C2D FF               rst  38
 ROM0:3C2E FF               rst  38
 ROM0:3C2F FF               rst  38
 ROM0:3C30 FF               rst  38
 ROM0:3C31 FF               rst  38
 ROM0:3C32 FF               rst  38
 ROM0:3C33 FF               rst  38
 ROM0:3C34 FF               rst  38
 ROM0:3C35 FF               rst  38
 ROM0:3C36 FF               rst  38
 ROM0:3C37 FF               rst  38
 ROM0:3C38 FF               rst  38
 ROM0:3C39 FF               rst  38
 ROM0:3C3A FF               rst  38
 ROM0:3C3B FF               rst  38
 ROM0:3C3C FF               rst  38
 ROM0:3C3D FF               rst  38
 ROM0:3C3E FF               rst  38
 ROM0:3C3F FF               rst  38
 ROM0:3C40 FF               rst  38
 ROM0:3C41 FF               rst  38
 ROM0:3C42 FF               rst  38
 ROM0:3C43 FF               rst  38
 ROM0:3C44 FF               rst  38
 ROM0:3C45 FF               rst  38
 ROM0:3C46 FF               rst  38
 ROM0:3C47 FF               rst  38
 ROM0:3C48 FF               rst  38
 ROM0:3C49 FF               rst  38
 ROM0:3C4A FF               rst  38
 ROM0:3C4B FF               rst  38
 ROM0:3C4C FF               rst  38
 ROM0:3C4D FF               rst  38
 ROM0:3C4E FF               rst  38
 ROM0:3C4F FF               rst  38
 ROM0:3C50 FF               rst  38
 ROM0:3C51 FF               rst  38
 ROM0:3C52 FF               rst  38
 ROM0:3C53 FF               rst  38
 ROM0:3C54 FF               rst  38
 ROM0:3C55 FF               rst  38
 ROM0:3C56 FF               rst  38
 ROM0:3C57 FF               rst  38
 ROM0:3C58 FF               rst  38
 ROM0:3C59 FF               rst  38
 ROM0:3C5A FF               rst  38
 ROM0:3C5B FF               rst  38
 ROM0:3C5C FF               rst  38
 ROM0:3C5D FF               rst  38
 ROM0:3C5E FF               rst  38
 ROM0:3C5F FF               rst  38
 ROM0:3C60 FF               rst  38
 ROM0:3C61 FF               rst  38
 ROM0:3C62 FF               rst  38
 ROM0:3C63 FF               rst  38
 ROM0:3C64 FF               rst  38
 ROM0:3C65 FF               rst  38
 ROM0:3C66 FF               rst  38
 ROM0:3C67 FF               rst  38
 ROM0:3C68 FF               rst  38
 ROM0:3C69 FF               rst  38
 ROM0:3C6A FF               rst  38
 ROM0:3C6B FF               rst  38
 ROM0:3C6C FF               rst  38
 ROM0:3C6D FF               rst  38
 ROM0:3C6E FF               rst  38
 ROM0:3C6F FF               rst  38
 ROM0:3C70 FF               rst  38
 ROM0:3C71 FF               rst  38
 ROM0:3C72 FF               rst  38
 ROM0:3C73 FF               rst  38
 ROM0:3C74 FF               rst  38
 ROM0:3C75 FF               rst  38
 ROM0:3C76 FF               rst  38
 ROM0:3C77 FF               rst  38
 ROM0:3C78 FF               rst  38
 ROM0:3C79 FF               rst  38
 ROM0:3C7A FF               rst  38
 ROM0:3C7B FF               rst  38
 ROM0:3C7C FF               rst  38
 ROM0:3C7D FF               rst  38
 ROM0:3C7E FF               rst  38
 ROM0:3C7F FF               rst  38
 ROM0:3C80 FF               rst  38
 ROM0:3C81 FF               rst  38
 ROM0:3C82 FF               rst  38
 ROM0:3C83 FF               rst  38
 ROM0:3C84 FF               rst  38
 ROM0:3C85 FF               rst  38
 ROM0:3C86 FF               rst  38
 ROM0:3C87 FF               rst  38
 ROM0:3C88 FF               rst  38
 ROM0:3C89 FF               rst  38
 ROM0:3C8A FF               rst  38
 ROM0:3C8B FF               rst  38
 ROM0:3C8C FF               rst  38
 ROM0:3C8D FF               rst  38
 ROM0:3C8E FF               rst  38
 ROM0:3C8F FF               rst  38
 ROM0:3C90 FF               rst  38
 ROM0:3C91 FF               rst  38
 ROM0:3C92 FF               rst  38
 ROM0:3C93 FF               rst  38
 ROM0:3C94 FF               rst  38
 ROM0:3C95 FF               rst  38
 ROM0:3C96 FF               rst  38
 ROM0:3C97 FF               rst  38
 ROM0:3C98 FF               rst  38
 ROM0:3C99 FF               rst  38
 ROM0:3C9A FF               rst  38
 ROM0:3C9B FF               rst  38
 ROM0:3C9C FF               rst  38
 ROM0:3C9D FF               rst  38
 ROM0:3C9E FF               rst  38
 ROM0:3C9F FF               rst  38
 ROM0:3CA0 FF               rst  38
 ROM0:3CA1 FF               rst  38
 ROM0:3CA2 FF               rst  38
 ROM0:3CA3 FF               rst  38
 ROM0:3CA4 FF               rst  38
 ROM0:3CA5 FF               rst  38
 ROM0:3CA6 FF               rst  38
 ROM0:3CA7 FF               rst  38
 ROM0:3CA8 FF               rst  38
 ROM0:3CA9 FF               rst  38
 ROM0:3CAA FF               rst  38
 ROM0:3CAB FF               rst  38
 ROM0:3CAC FF               rst  38
 ROM0:3CAD FF               rst  38
 ROM0:3CAE FF               rst  38
 ROM0:3CAF FF               rst  38
 ROM0:3CB0 FF               rst  38
 ROM0:3CB1 FF               rst  38
 ROM0:3CB2 FF               rst  38
 ROM0:3CB3 FF               rst  38
 ROM0:3CB4 FF               rst  38
 ROM0:3CB5 FF               rst  38
 ROM0:3CB6 FF               rst  38
 ROM0:3CB7 FF               rst  38
 ROM0:3CB8 FF               rst  38
 ROM0:3CB9 FF               rst  38
 ROM0:3CBA FF               rst  38
 ROM0:3CBB FF               rst  38
 ROM0:3CBC FF               rst  38
 ROM0:3CBD FF               rst  38
 ROM0:3CBE FF               rst  38
 ROM0:3CBF FF               rst  38
 ROM0:3CC0 FF               rst  38
 ROM0:3CC1 FF               rst  38
 ROM0:3CC2 FF               rst  38
 ROM0:3CC3 FF               rst  38
 ROM0:3CC4 FF               rst  38
 ROM0:3CC5 FF               rst  38
 ROM0:3CC6 FF               rst  38
 ROM0:3CC7 FF               rst  38
 ROM0:3CC8 FF               rst  38
 ROM0:3CC9 FF               rst  38
 ROM0:3CCA FF               rst  38
 ROM0:3CCB FF               rst  38
 ROM0:3CCC FF               rst  38
 ROM0:3CCD FF               rst  38
 ROM0:3CCE FF               rst  38
 ROM0:3CCF FF               rst  38
 ROM0:3CD0 FF               rst  38
 ROM0:3CD1 FF               rst  38
 ROM0:3CD2 FF               rst  38
 ROM0:3CD3 FF               rst  38
 ROM0:3CD4 FF               rst  38
 ROM0:3CD5 FF               rst  38
 ROM0:3CD6 FF               rst  38
 ROM0:3CD7 FF               rst  38
 ROM0:3CD8 FF               rst  38
 ROM0:3CD9 FF               rst  38
 ROM0:3CDA FF               rst  38
 ROM0:3CDB FF               rst  38
 ROM0:3CDC FF               rst  38
 ROM0:3CDD FF               rst  38
 ROM0:3CDE FF               rst  38
 ROM0:3CDF FF               rst  38
 ROM0:3CE0 FF               rst  38
 ROM0:3CE1 FF               rst  38
 ROM0:3CE2 FF               rst  38
 ROM0:3CE3 FF               rst  38
 ROM0:3CE4 FF               rst  38
 ROM0:3CE5 FF               rst  38
 ROM0:3CE6 FF               rst  38
 ROM0:3CE7 FF               rst  38
 ROM0:3CE8 FF               rst  38
 ROM0:3CE9 FF               rst  38
 ROM0:3CEA FF               rst  38
 ROM0:3CEB FF               rst  38
 ROM0:3CEC FF               rst  38
 ROM0:3CED FF               rst  38
 ROM0:3CEE FF               rst  38
 ROM0:3CEF FF               rst  38
 ROM0:3CF0 FF               rst  38
 ROM0:3CF1 FF               rst  38
 ROM0:3CF2 FF               rst  38
 ROM0:3CF3 FF               rst  38
 ROM0:3CF4 FF               rst  38
 ROM0:3CF5 FF               rst  38
 ROM0:3CF6 FF               rst  38
 ROM0:3CF7 FF               rst  38
 ROM0:3CF8 FF               rst  38
 ROM0:3CF9 FF               rst  38
 ROM0:3CFA FF               rst  38
 ROM0:3CFB FF               rst  38
 ROM0:3CFC FF               rst  38
 ROM0:3CFD FF               rst  38
 ROM0:3CFE FF               rst  38
 ROM0:3CFF FF               rst  38
 ROM0:3D00 FF               rst  38
 ROM0:3D01 FF               rst  38
 ROM0:3D02 FF               rst  38
 ROM0:3D03 FF               rst  38
 ROM0:3D04 FF               rst  38
 ROM0:3D05 FF               rst  38
 ROM0:3D06 FF               rst  38
 ROM0:3D07 FF               rst  38
 ROM0:3D08 FF               rst  38
 ROM0:3D09 FF               rst  38
 ROM0:3D0A FF               rst  38
 ROM0:3D0B FF               rst  38
 ROM0:3D0C FF               rst  38
 ROM0:3D0D FF               rst  38
 ROM0:3D0E FF               rst  38
 ROM0:3D0F FF               rst  38
 ROM0:3D10 FF               rst  38
 ROM0:3D11 FF               rst  38
 ROM0:3D12 FF               rst  38
 ROM0:3D13 FF               rst  38
 ROM0:3D14 FF               rst  38
 ROM0:3D15 FF               rst  38
 ROM0:3D16 FF               rst  38
 ROM0:3D17 FF               rst  38
 ROM0:3D18 FF               rst  38
 ROM0:3D19 FF               rst  38
 ROM0:3D1A FF               rst  38
 ROM0:3D1B FF               rst  38
 ROM0:3D1C FF               rst  38
 ROM0:3D1D FF               rst  38
 ROM0:3D1E FF               rst  38
 ROM0:3D1F FF               rst  38
 ROM0:3D20 FF               rst  38
 ROM0:3D21 FF               rst  38
 ROM0:3D22 FF               rst  38
 ROM0:3D23 FF               rst  38
 ROM0:3D24 FF               rst  38
 ROM0:3D25 FF               rst  38
 ROM0:3D26 FF               rst  38
 ROM0:3D27 FF               rst  38
 ROM0:3D28 FF               rst  38
 ROM0:3D29 FF               rst  38
 ROM0:3D2A FF               rst  38
 ROM0:3D2B FF               rst  38
 ROM0:3D2C FF               rst  38
 ROM0:3D2D FF               rst  38
 ROM0:3D2E FF               rst  38
 ROM0:3D2F FF               rst  38
 ROM0:3D30 FF               rst  38
 ROM0:3D31 FF               rst  38
 ROM0:3D32 FF               rst  38
 ROM0:3D33 FF               rst  38
 ROM0:3D34 FF               rst  38
 ROM0:3D35 FF               rst  38
 ROM0:3D36 FF               rst  38
 ROM0:3D37 FF               rst  38
 ROM0:3D38 FF               rst  38
 ROM0:3D39 FF               rst  38
 ROM0:3D3A FF               rst  38
 ROM0:3D3B FF               rst  38
 ROM0:3D3C FF               rst  38
 ROM0:3D3D FF               rst  38
 ROM0:3D3E FF               rst  38
 ROM0:3D3F FF               rst  38
 ROM0:3D40 FF               rst  38
 ROM0:3D41 FF               rst  38
 ROM0:3D42 FF               rst  38
 ROM0:3D43 FF               rst  38
 ROM0:3D44 FF               rst  38
 ROM0:3D45 FF               rst  38
 ROM0:3D46 FF               rst  38
 ROM0:3D47 FF               rst  38
 ROM0:3D48 FF               rst  38
 ROM0:3D49 FF               rst  38
 ROM0:3D4A FF               rst  38
 ROM0:3D4B FF               rst  38
 ROM0:3D4C FF               rst  38
 ROM0:3D4D FF               rst  38
 ROM0:3D4E FF               rst  38
 ROM0:3D4F FF               rst  38
 ROM0:3D50 FF               rst  38
 ROM0:3D51 FF               rst  38
 ROM0:3D52 FF               rst  38
 ROM0:3D53 FF               rst  38
 ROM0:3D54 FF               rst  38
 ROM0:3D55 FF               rst  38
 ROM0:3D56 FF               rst  38
 ROM0:3D57 FF               rst  38
 ROM0:3D58 FF               rst  38
 ROM0:3D59 FF               rst  38
 ROM0:3D5A FF               rst  38
 ROM0:3D5B FF               rst  38
 ROM0:3D5C FF               rst  38
 ROM0:3D5D FF               rst  38
 ROM0:3D5E FF               rst  38
 ROM0:3D5F FF               rst  38
 ROM0:3D60 FF               rst  38
 ROM0:3D61 FF               rst  38
 ROM0:3D62 FF               rst  38
 ROM0:3D63 FF               rst  38
 ROM0:3D64 FF               rst  38
 ROM0:3D65 FF               rst  38
 ROM0:3D66 FF               rst  38
 ROM0:3D67 FF               rst  38
 ROM0:3D68 FF               rst  38
 ROM0:3D69 FF               rst  38
 ROM0:3D6A FF               rst  38
 ROM0:3D6B FF               rst  38
 ROM0:3D6C FF               rst  38
 ROM0:3D6D FF               rst  38
 ROM0:3D6E FF               rst  38
 ROM0:3D6F FF               rst  38
 ROM0:3D70 FF               rst  38
 ROM0:3D71 FF               rst  38
 ROM0:3D72 FF               rst  38
 ROM0:3D73 FF               rst  38
 ROM0:3D74 FF               rst  38
 ROM0:3D75 FF               rst  38
 ROM0:3D76 FF               rst  38
 ROM0:3D77 FF               rst  38
 ROM0:3D78 FF               rst  38
 ROM0:3D79 FF               rst  38
 ROM0:3D7A FF               rst  38
 ROM0:3D7B FF               rst  38
 ROM0:3D7C FF               rst  38
 ROM0:3D7D FF               rst  38
 ROM0:3D7E FF               rst  38
 ROM0:3D7F FF               rst  38
 ROM0:3D80 FF               rst  38
 ROM0:3D81 FF               rst  38
 ROM0:3D82 FF               rst  38
 ROM0:3D83 FF               rst  38
 ROM0:3D84 FF               rst  38
 ROM0:3D85 FF               rst  38
 ROM0:3D86 FF               rst  38
 ROM0:3D87 FF               rst  38
 ROM0:3D88 FF               rst  38
 ROM0:3D89 FF               rst  38
 ROM0:3D8A FF               rst  38
 ROM0:3D8B FF               rst  38
 ROM0:3D8C FF               rst  38
 ROM0:3D8D FF               rst  38
 ROM0:3D8E FF               rst  38
 ROM0:3D8F FF               rst  38
 ROM0:3D90 FF               rst  38
 ROM0:3D91 FF               rst  38
 ROM0:3D92 FF               rst  38
 ROM0:3D93 FF               rst  38
 ROM0:3D94 FF               rst  38
 ROM0:3D95 FF               rst  38
 ROM0:3D96 FF               rst  38
 ROM0:3D97 FF               rst  38
 ROM0:3D98 FF               rst  38
 ROM0:3D99 FF               rst  38
 ROM0:3D9A FF               rst  38
 ROM0:3D9B FF               rst  38
 ROM0:3D9C FF               rst  38
 ROM0:3D9D FF               rst  38
 ROM0:3D9E FF               rst  38
 ROM0:3D9F FF               rst  38
 ROM0:3DA0 FF               rst  38
 ROM0:3DA1 FF               rst  38
 ROM0:3DA2 FF               rst  38
 ROM0:3DA3 FF               rst  38
 ROM0:3DA4 FF               rst  38
 ROM0:3DA5 FF               rst  38
 ROM0:3DA6 FF               rst  38
 ROM0:3DA7 FF               rst  38
 ROM0:3DA8 FF               rst  38
 ROM0:3DA9 FF               rst  38
 ROM0:3DAA FF               rst  38
 ROM0:3DAB FF               rst  38
 ROM0:3DAC FF               rst  38
 ROM0:3DAD FF               rst  38
 ROM0:3DAE FF               rst  38
 ROM0:3DAF FF               rst  38
 ROM0:3DB0 FF               rst  38
 ROM0:3DB1 FF               rst  38
 ROM0:3DB2 FF               rst  38
 ROM0:3DB3 FF               rst  38
 ROM0:3DB4 FF               rst  38
 ROM0:3DB5 FF               rst  38
 ROM0:3DB6 FF               rst  38
 ROM0:3DB7 FF               rst  38
 ROM0:3DB8 FF               rst  38
 ROM0:3DB9 FF               rst  38
 ROM0:3DBA FF               rst  38
 ROM0:3DBB FF               rst  38
 ROM0:3DBC FF               rst  38
 ROM0:3DBD FF               rst  38
 ROM0:3DBE FF               rst  38
 ROM0:3DBF FF               rst  38
 ROM0:3DC0 FF               rst  38
 ROM0:3DC1 FF               rst  38
 ROM0:3DC2 FF               rst  38
 ROM0:3DC3 FF               rst  38
 ROM0:3DC4 FF               rst  38
 ROM0:3DC5 FF               rst  38
 ROM0:3DC6 FF               rst  38
 ROM0:3DC7 FF               rst  38
 ROM0:3DC8 FF               rst  38
 ROM0:3DC9 FF               rst  38
 ROM0:3DCA FF               rst  38
 ROM0:3DCB FF               rst  38
 ROM0:3DCC FF               rst  38
 ROM0:3DCD FF               rst  38
 ROM0:3DCE FF               rst  38
 ROM0:3DCF FF               rst  38
 ROM0:3DD0 FF               rst  38
 ROM0:3DD1 FF               rst  38
 ROM0:3DD2 FF               rst  38
 ROM0:3DD3 FF               rst  38
 ROM0:3DD4 FF               rst  38
 ROM0:3DD5 FF               rst  38
 ROM0:3DD6 FF               rst  38
 ROM0:3DD7 FF               rst  38
 ROM0:3DD8 FF               rst  38
 ROM0:3DD9 FF               rst  38
 ROM0:3DDA FF               rst  38
 ROM0:3DDB FF               rst  38
 ROM0:3DDC FF               rst  38
 ROM0:3DDD FF               rst  38
 ROM0:3DDE FF               rst  38
 ROM0:3DDF FF               rst  38
 ROM0:3DE0 FF               rst  38
 ROM0:3DE1 FF               rst  38
 ROM0:3DE2 FF               rst  38
 ROM0:3DE3 FF               rst  38
 ROM0:3DE4 FF               rst  38
 ROM0:3DE5 FF               rst  38
 ROM0:3DE6 FF               rst  38
 ROM0:3DE7 FF               rst  38
 ROM0:3DE8 FF               rst  38
 ROM0:3DE9 FF               rst  38
 ROM0:3DEA FF               rst  38
 ROM0:3DEB FF               rst  38
 ROM0:3DEC FF               rst  38
 ROM0:3DED FF               rst  38
 ROM0:3DEE FF               rst  38
 ROM0:3DEF FF               rst  38
 ROM0:3DF0 FF               rst  38
 ROM0:3DF1 FF               rst  38
 ROM0:3DF2 FF               rst  38
 ROM0:3DF3 FF               rst  38
 ROM0:3DF4 FF               rst  38
 ROM0:3DF5 FF               rst  38
 ROM0:3DF6 FF               rst  38
 ROM0:3DF7 FF               rst  38
 ROM0:3DF8 FF               rst  38
 ROM0:3DF9 FF               rst  38
 ROM0:3DFA FF               rst  38
 ROM0:3DFB FF               rst  38
 ROM0:3DFC FF               rst  38
 ROM0:3DFD FF               rst  38
 ROM0:3DFE FF               rst  38
 ROM0:3DFF FF               rst  38
 ROM0:3E00 C3 10 3E         jp   3E10
 ROM0:3E03 00               nop  
 ROM0:3E04 C3 4F 3E         jp   3E4F
 ROM0:3E07 00               nop  
 ROM0:3E08 C3 5B 3E         jp   3E5B
 ROM0:3E0B 00               nop  

 ROM0:3E0C 21 D0
 ROM0:3E0E 8F 3E

 ROM0:3E10 FE 02            cp   a,02
 ROM0:3E12 EA 88 D1         ld   (D188),a
 ROM0:3E15 7D               ld   a,l
 ROM0:3E16 EA 86 D1         ld   (D186),a
 ROM0:3E19 7C               ld   a,h
 ROM0:3E1A EA 87 D1         ld   (D187),a
 ROM0:3E1D 20 0E            jr   nz,3E2D
 ROM0:3E1F EA 82 D1         ld   (D182),a
 ROM0:3E22 7D               ld   a,l
 ROM0:3E23 EA 81 D1         ld   (D181),a
 ROM0:3E26 21 83 D1         ld   hl,D183
 ROM0:3E29 79               ld   a,c
 ROM0:3E2A 22               ldi  (hl),a
 ROM0:3E2B 78               ld   a,b
 ROM0:3E2C 77               ld   (hl),a
 ROM0:3E2D 21 22 D0         ld   hl,D022
 ROM0:3E30 CB F6            set  6,(hl)
 ROM0:3E32 C3 30 40         jp   4030
 ROM0:3E35 EA 86 D1         ld   (D186),a
 ROM0:3E38 7D               ld   a,l
 ROM0:3E39 EA 87 D1         ld   (D187),a
 ROM0:3E3C 7C               ld   a,h
 ROM0:3E3D EA 88 D1         ld   (D188),a
 ROM0:3E40 21 22 D0         ld   hl,D022
 ROM0:3E43 CB B6            res  6,(hl)
 ROM0:3E45 21 87 D1         ld   hl,D187
 ROM0:3E48 2A               ldi  a,(hl)
 ROM0:3E49 66               ld   h,(hl)
 ROM0:3E4A 6F               ld   l,a
 ROM0:3E4B FA 86 D1         ld   a,(D186)
 ROM0:3E4E C9               ret  
 ROM0:3E4F F5               push af
 ROM0:3E50 C5               push bc
 ROM0:3E51 D5               push de
 ROM0:3E52 E5               push hl
 ROM0:3E53 CD CC 56         call 56CC
 ROM0:3E56 E1               pop  hl
 ROM0:3E57 D1               pop  de
 ROM0:3E58 C1               pop  bc
 ROM0:3E59 F1               pop  af
 ROM0:3E5A C9               ret  
 ROM0:3E5B F5               push af
 ROM0:3E5C C5               push bc
 ROM0:3E5D D5               push de
 ROM0:3E5E E5               push hl
 ROM0:3E5F AF               xor  a
 ROM0:3E60 E0 07            ld   (ff00+07),a
 ROM0:3E62 F0 0F            ld   a,(ff00+0F)
 ROM0:3E64 E6 1B            and  a,1B
 ROM0:3E66 E0 0F            ld   (ff00+0F),a
 ROM0:3E68 FA 6A D0         ld   a,(D06A)
 ROM0:3E6B B7               or   a
 ROM0:3E6C 28 1C            jr   z,3E8A
 ROM0:3E6E FA 22 D0         ld   a,(D022)
 ROM0:3E71 CB 4F            bit  1,a
 ROM0:3E73 20 09            jr   nz,3E7E
 ROM0:3E75 F0 02            ld   a,(ff00+02)
 ROM0:3E77 E6 80            and  a,80
 ROM0:3E79 20 03            jr   nz,3E7E
 ROM0:3E7B CD E4 58         call 58E4
 ROM0:3E7E F0 06            ld   a,(ff00+06)
 ROM0:3E80 E0 05            ld   (ff00+05),a
 ROM0:3E82 3E 02            ld   a,02
 ROM0:3E84 E0 07            ld   (ff00+07),a
 ROM0:3E86 3E 06            ld   a,06
 ROM0:3E88 E0 07            ld   (ff00+07),a
 ROM0:3E8A E1               pop  hl
 ROM0:3E8B D1               pop  de
 ROM0:3E8C C1               pop  bc
 ROM0:3E8D F1               pop  af
 ROM0:3E8E C9               ret  
 ROM0:3E8F 02               ld   (bc),a
 ROM0:3E90 12               ld   (de),a
 ROM0:3E91 0A               ld   a,(bc)
 ROM0:3E92 14               inc  d
 ROM0:3E93 16 18            ld   d,18
 ROM0:3E95 1A               ld   a,(de)
 ROM0:3E96 1E 20            ld   e,20
 ROM0:3E98 22               ldi  (hl),a
 ROM0:3E99 24               inc  h
 ROM0:3E9A 26 28            ld   h,28
 ROM0:3E9C 1C               inc  e
 ROM0:3E9D 2A               ldi  a,(hl)
 ROM0:3E9E 2C               inc  l
 ROM0:3E9F 0C               inc  c
 ROM0:3EA0 0E 10            ld   c,10
 ROM0:3EA2 36 3C            ld   (hl),3C
 ROM0:3EA4 06 08            ld   b,08
 ROM0:3EA6 00               nop  
 ROM0:3EA7 34               inc  (hl)
 ROM0:3EA8 00               nop  
 ROM0:3EA9 00               nop  
 ROM0:3EAA 00               nop  
 ROM0:3EAB 00               nop  
 ROM0:3EAC 00               nop  
 ROM0:3EAD 00               nop  
 ROM0:3EAE 00               nop  
 ROM0:3EAF 00               nop  
 ROM0:3EB0 00               nop  
 ROM0:3EB1 00               nop  
 ROM0:3EB2 00               nop  
 ROM0:3EB3 00               nop  
 ROM0:3EB4 00               nop  
 ROM0:3EB5 00               nop  
 ROM0:3EB6 00               nop  
 ROM0:3EB7 00               nop  
 ROM0:3EB8 00               nop  
 ROM0:3EB9 00               nop  
 ROM0:3EBA 00               nop  
 ROM0:3EBB 00               nop  
 ROM0:3EBC 00               nop  
 ROM0:3EBD 00               nop  
 ROM0:3EBE 00               nop  
 ROM0:3EBF 00               nop  
 ROM0:3EC0 00               nop  
 ROM0:3EC1 00               nop  
 ROM0:3EC2 00               nop  
 ROM0:3EC3 00               nop  
 ROM0:3EC4 00               nop  
 ROM0:3EC5 00               nop  
 ROM0:3EC6 00               nop  
 ROM0:3EC7 00               nop  
 ROM0:3EC8 00               nop  
 ROM0:3EC9 00               nop  
 ROM0:3ECA 00               nop  
 ROM0:3ECB 00               nop  
 ROM0:3ECC 00               nop  
 ROM0:3ECD 00               nop  
 ROM0:3ECE 00               nop  
 ROM0:3ECF 00               nop  
 ROM0:3ED0 00               nop  
 ROM0:3ED1 00               nop  
 ROM0:3ED2 00               nop  
 ROM0:3ED3 00               nop  
 ROM0:3ED4 00               nop  
 ROM0:3ED5 00               nop  
 ROM0:3ED6 00               nop  
 ROM0:3ED7 00               nop  
 ROM0:3ED8 00               nop  
 ROM0:3ED9 00               nop  
 ROM0:3EDA 00               nop  
 ROM0:3EDB 00               nop  
 ROM0:3EDC 00               nop  
 ROM0:3EDD 00               nop  
 ROM0:3EDE 00               nop  
 ROM0:3EDF 00               nop  
 ROM0:3EE0 00               nop  
 ROM0:3EE1 00               nop  
 ROM0:3EE2 00               nop  
 ROM0:3EE3 00               nop  
 ROM0:3EE4 00               nop  
 ROM0:3EE5 00               nop  
 ROM0:3EE6 00               nop  
 ROM0:3EE7 00               nop  
 ROM0:3EE8 00               nop  
 ROM0:3EE9 00               nop  
 ROM0:3EEA 00               nop  
 ROM0:3EEB 00               nop  
 ROM0:3EEC 00               nop  
 ROM0:3EED 00               nop  
 ROM0:3EEE 00               nop  
 ROM0:3EEF 00               nop  
 ROM0:3EF0 00               nop  
 ROM0:3EF1 00               nop  
 ROM0:3EF2 00               nop  
 ROM0:3EF3 00               nop  
 ROM0:3EF4 00               nop  
 ROM0:3EF5 00               nop  
 ROM0:3EF6 00               nop  
 ROM0:3EF7 00               nop  
 ROM0:3EF8 00               nop  
 ROM0:3EF9 00               nop  
 ROM0:3EFA 00               nop  
 ROM0:3EFB 00               nop  
 ROM0:3EFC 00               nop  
 ROM0:3EFD 00               nop  
 ROM0:3EFE 00               nop  
 ROM0:3EFF 00               nop  
 ROM0:3F00 FF               rst  38
 ROM0:3F01 FF               rst  38
 ROM0:3F02 FF               rst  38
 ROM0:3F03 FF               rst  38
 ROM0:3F04 FF               rst  38
 ROM0:3F05 FF               rst  38
 ROM0:3F06 FF               rst  38
 ROM0:3F07 FF               rst  38
 ROM0:3F08 FF               rst  38
 ROM0:3F09 FF               rst  38
 ROM0:3F0A FF               rst  38
 ROM0:3F0B FF               rst  38
 ROM0:3F0C FF               rst  38
 ROM0:3F0D FF               rst  38
 ROM0:3F0E FF               rst  38
 ROM0:3F0F FF               rst  38
 ROM0:3F10 FF               rst  38
 ROM0:3F11 FF               rst  38
 ROM0:3F12 FF               rst  38
 ROM0:3F13 FF               rst  38
 ROM0:3F14 FF               rst  38
 ROM0:3F15 FF               rst  38
 ROM0:3F16 FF               rst  38
 ROM0:3F17 FF               rst  38
 ROM0:3F18 FF               rst  38
 ROM0:3F19 FF               rst  38
 ROM0:3F1A FF               rst  38
 ROM0:3F1B FF               rst  38
 ROM0:3F1C FF               rst  38
 ROM0:3F1D FF               rst  38
 ROM0:3F1E FF               rst  38
 ROM0:3F1F FF               rst  38
 ROM0:3F20 FF               rst  38
 ROM0:3F21 FF               rst  38
 ROM0:3F22 FF               rst  38
 ROM0:3F23 FF               rst  38
 ROM0:3F24 FF               rst  38
 ROM0:3F25 FF               rst  38
 ROM0:3F26 FF               rst  38
 ROM0:3F27 FF               rst  38
 ROM0:3F28 FF               rst  38
 ROM0:3F29 FF               rst  38
 ROM0:3F2A FF               rst  38
 ROM0:3F2B FF               rst  38
 ROM0:3F2C FF               rst  38
 ROM0:3F2D FF               rst  38
 ROM0:3F2E FF               rst  38
 ROM0:3F2F FF               rst  38
 ROM0:3F30 FF               rst  38
 ROM0:3F31 FF               rst  38
 ROM0:3F32 FF               rst  38
 ROM0:3F33 FF               rst  38
 ROM0:3F34 FF               rst  38
 ROM0:3F35 FF               rst  38
 ROM0:3F36 FF               rst  38
 ROM0:3F37 FF               rst  38
 ROM0:3F38 FF               rst  38
 ROM0:3F39 FF               rst  38
 ROM0:3F3A FF               rst  38
 ROM0:3F3B FF               rst  38
 ROM0:3F3C FF               rst  38
 ROM0:3F3D FF               rst  38
 ROM0:3F3E FF               rst  38
 ROM0:3F3F FF               rst  38
 ROM0:3F40 FF               rst  38
 ROM0:3F41 FF               rst  38
 ROM0:3F42 FF               rst  38
 ROM0:3F43 FF               rst  38
 ROM0:3F44 FF               rst  38
 ROM0:3F45 FF               rst  38
 ROM0:3F46 FF               rst  38
 ROM0:3F47 FF               rst  38
 ROM0:3F48 FF               rst  38
 ROM0:3F49 FF               rst  38
 ROM0:3F4A FF               rst  38
 ROM0:3F4B FF               rst  38
 ROM0:3F4C FF               rst  38
 ROM0:3F4D FF               rst  38
 ROM0:3F4E FF               rst  38
 ROM0:3F4F FF               rst  38
 ROM0:3F50 FF               rst  38
 ROM0:3F51 FF               rst  38
 ROM0:3F52 FF               rst  38
 ROM0:3F53 FF               rst  38
 ROM0:3F54 FF               rst  38
 ROM0:3F55 FF               rst  38
 ROM0:3F56 FF               rst  38
 ROM0:3F57 FF               rst  38
 ROM0:3F58 FF               rst  38
 ROM0:3F59 FF               rst  38
 ROM0:3F5A FF               rst  38
 ROM0:3F5B FF               rst  38
 ROM0:3F5C FF               rst  38
 ROM0:3F5D FF               rst  38
 ROM0:3F5E FF               rst  38
 ROM0:3F5F FF               rst  38
 ROM0:3F60 FF               rst  38
 ROM0:3F61 FF               rst  38
 ROM0:3F62 FF               rst  38
 ROM0:3F63 FF               rst  38
 ROM0:3F64 FF               rst  38
 ROM0:3F65 FF               rst  38
 ROM0:3F66 FF               rst  38
 ROM0:3F67 FF               rst  38
 ROM0:3F68 FF               rst  38
 ROM0:3F69 FF               rst  38
 ROM0:3F6A FF               rst  38
 ROM0:3F6B FF               rst  38
 ROM0:3F6C FF               rst  38
 ROM0:3F6D FF               rst  38
 ROM0:3F6E FF               rst  38
 ROM0:3F6F FF               rst  38
 ROM0:3F70 FF               rst  38
 ROM0:3F71 FF               rst  38
 ROM0:3F72 FF               rst  38
 ROM0:3F73 FF               rst  38
 ROM0:3F74 FF               rst  38
 ROM0:3F75 FF               rst  38
 ROM0:3F76 FF               rst  38
 ROM0:3F77 FF               rst  38
 ROM0:3F78 FF               rst  38
 ROM0:3F79 FF               rst  38
 ROM0:3F7A FF               rst  38
 ROM0:3F7B FF               rst  38
 ROM0:3F7C FF               rst  38
 ROM0:3F7D FF               rst  38
 ROM0:3F7E FF               rst  38
 ROM0:3F7F FF               rst  38
 ROM0:3F80 FF               rst  38
 ROM0:3F81 FF               rst  38
 ROM0:3F82 FF               rst  38
 ROM0:3F83 FF               rst  38
 ROM0:3F84 FF               rst  38
 ROM0:3F85 FF               rst  38
 ROM0:3F86 FF               rst  38
 ROM0:3F87 FF               rst  38
 ROM0:3F88 FF               rst  38
 ROM0:3F89 FF               rst  38
 ROM0:3F8A FF               rst  38
 ROM0:3F8B FF               rst  38
 ROM0:3F8C FF               rst  38
 ROM0:3F8D FF               rst  38
 ROM0:3F8E FF               rst  38
 ROM0:3F8F FF               rst  38
 ROM0:3F90 FF               rst  38
 ROM0:3F91 FF               rst  38
 ROM0:3F92 FF               rst  38
 ROM0:3F93 FF               rst  38
 ROM0:3F94 FF               rst  38
 ROM0:3F95 FF               rst  38
 ROM0:3F96 FF               rst  38
 ROM0:3F97 FF               rst  38
 ROM0:3F98 FF               rst  38
 ROM0:3F99 FF               rst  38
 ROM0:3F9A FF               rst  38
 ROM0:3F9B FF               rst  38
 ROM0:3F9C FF               rst  38
 ROM0:3F9D FF               rst  38
 ROM0:3F9E FF               rst  38
 ROM0:3F9F FF               rst  38
 ROM0:3FA0 FF               rst  38
 ROM0:3FA1 FF               rst  38
 ROM0:3FA2 FF               rst  38
 ROM0:3FA3 FF               rst  38
 ROM0:3FA4 FF               rst  38
 ROM0:3FA5 FF               rst  38
 ROM0:3FA6 FF               rst  38
 ROM0:3FA7 FF               rst  38
 ROM0:3FA8 FF               rst  38
 ROM0:3FA9 FF               rst  38
 ROM0:3FAA FF               rst  38
 ROM0:3FAB FF               rst  38
 ROM0:3FAC FF               rst  38
 ROM0:3FAD FF               rst  38
 ROM0:3FAE FF               rst  38
 ROM0:3FAF FF               rst  38
 ROM0:3FB0 FF               rst  38
 ROM0:3FB1 FF               rst  38
 ROM0:3FB2 FF               rst  38
 ROM0:3FB3 FF               rst  38
 ROM0:3FB4 FF               rst  38
 ROM0:3FB5 FF               rst  38
 ROM0:3FB6 FF               rst  38
 ROM0:3FB7 FF               rst  38
 ROM0:3FB8 FF               rst  38
 ROM0:3FB9 FF               rst  38
 ROM0:3FBA FF               rst  38
 ROM0:3FBB FF               rst  38
 ROM0:3FBC FF               rst  38
 ROM0:3FBD FF               rst  38
 ROM0:3FBE FF               rst  38
 ROM0:3FBF FF               rst  38
 ROM0:3FC0 FF               rst  38
 ROM0:3FC1 FF               rst  38
 ROM0:3FC2 FF               rst  38
 ROM0:3FC3 FF               rst  38
 ROM0:3FC4 FF               rst  38
 ROM0:3FC5 FF               rst  38
 ROM0:3FC6 FF               rst  38
 ROM0:3FC7 FF               rst  38
 ROM0:3FC8 FF               rst  38
 ROM0:3FC9 FF               rst  38
 ROM0:3FCA FF               rst  38
 ROM0:3FCB FF               rst  38
 ROM0:3FCC FF               rst  38
 ROM0:3FCD FF               rst  38
 ROM0:3FCE FF               rst  38
 ROM0:3FCF FF               rst  38
 ROM0:3FD0 FF               rst  38
 ROM0:3FD1 FF               rst  38
 ROM0:3FD2 FF               rst  38
 ROM0:3FD3 FF               rst  38
 ROM0:3FD4 FF               rst  38
 ROM0:3FD5 FF               rst  38
 ROM0:3FD6 FF               rst  38
 ROM0:3FD7 FF               rst  38
 ROM0:3FD8 FF               rst  38
 ROM0:3FD9 FF               rst  38
 ROM0:3FDA FF               rst  38
 ROM0:3FDB FF               rst  38
 ROM0:3FDC FF               rst  38
 ROM0:3FDD FF               rst  38
 ROM0:3FDE FF               rst  38
 ROM0:3FDF FF               rst  38
 ROM0:3FE0 F5               push af
 ROM0:3FE1 3E 08            ld   a,08
 ROM0:3FE3 E0 80            ld   (ff00+80),a
 ROM0:3FE5 EA 00 20         ld   (2000),a
 ROM0:3FE8 F1               pop  af
 ROM0:3FE9 01 EE 3F         ld   bc,3FEE
 ROM0:3FEC C5               push bc
 ROM0:3FED E9               jp   hl
 ROM0:3FEE 3E 03            ld   a,03
 ROM0:3FF0 E0 80            ld   (ff00+80),a
 ROM0:3FF2 EA 00 20         ld   (2000),a
 ROM0:3FF5 C9               ret  
 ROM0:3FF6 00               nop  
 ROM0:3FF7 00               nop  
 ROM0:3FF8 00               nop  
 ROM0:3FF9 00               nop  
 ROM0:3FFA 00               nop  
 ROM0:3FFB 00               nop  
 ROM0:3FFC 00               nop  
 ROM0:3FFD 00               nop  
 ROM0:3FFE 00               nop  
 ROM0:3FFF 00               nop  

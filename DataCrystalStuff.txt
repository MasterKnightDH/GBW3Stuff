Little Magic RAM:

{{rammap|game=Little Magic}}
(The strategy game for the Famicom, not the puzzle game for the GB or Super Famicom.)

== In-Battle ==

*0323 - P1's class
*0324 - P2's class
*0325 - P1's HP
*0326 - P2's HP
*0327 - P1's ATK
*0328 - P2's ATK
*0329 - P1's DEF
*032A - P2's DEF
*032B - P1's LVL
*032C - P2's LVL

== Units ==

*6DC5 to 6DDD - P1 units' classes
*6DDE to 6DF6 - P2 units' classes
*6DF7 to 6E0F - P1 units' levels
*6E10 to 6E28 - P1 units' levels
*6E29 to 6E41 - P1 units' HP
*6E42 to 6E5A - P2 units' HP
*6E5B to 6E73 - P1 units' MP
*6E74 to 6E8C - P2 units' MP
*6E8D to 6EA5 - P1 units' ATK
*6EA6 to 6EBE - P2 units' ATK
*6EBF to 6ED7 - P1 units' DEF
*6ED8 to 6EF0 - P2 units' DEF
*6EF1 to 6F09 - P1 units' EXP
*6F0A to 6F22 - P2 units' EXP
*6F23 to 6F3B - P1 units' terrain
*6F3C to 6F54 - P2 units' terrain
*6F55 to 6F6D - P1 units' status (128=End Turn; 2=Boarded; 1=Reserves)
*6F6E to 6F86 - P2 units' status (128=End Turn; 2=Boarded; 1=Reserves)

== Armies ==

*6D82 - current Turn
*6D83 - final Turn
*6D85 - P1's Gold (increments of 10, 2 bytes)
*6D87 - P2's Gold (increments of 10, 2 bytes)
*6D8B - P1's spent Gold (increments of 10, 2 bytes)
*6D8D - P2's spent Gold (increments of 10, 2 bytes)
*6D8F - P1's music
*6D90 - P2's music
*6D91 - Battle default
*6D94 - Current Player's Castle location (X coordinates)
*6D95 - Current Player's Castle location (Y coordinates)
*6D99 to 6DAC - hired units of each type (odd addresses for P1, even addresses for P2)
*6DAD - P1's total current units
*6DAE - P2's total current units
*6DAF to 6DC2 - lost units of each type (odd addresses for P1, even addresses for P2)
*6DC3 - P1's total lost units
*6DC4 - P2's total lost units






Kakurenbo RAM

{{rammap|game=Kakurenbo Battle Monster Tactics}}

== Text ==

*9C42 - line 1 text
*9C82 - line 2 text

== Combatants ==

Player unit 1's stats:
*C30B - Coordinates (Y)
*C30C - Coordinates (X)
*C30D - Level
*C317 - Max HP
*C318 - Current HP
*C319 - Facing Direction (West, East, North, South)
*C31B - Base ATK
*C31C - Current ATK
*C31D - Base DEF
*C31E - Current DEF
*C320 - Base Speed
*C321 - Current Speed
*C322 - Base Vision
*C323 - Current Vision
*C325 - EXP (2 bytes)
*C32E - Skill 1 Trigger
*C330 - Skill 2 Trigger
*C332 - Skill 3 Trigger
*C334 - Skill 4 Trigger
*C336 - Skill 5 Trigger
*C338 - Skill 6 Trigger

Player unit 2's stats:
*C349 - Coordinates (Y)
*C34A - Coordinates (X)
*C34B - Level
*C355 - Max HP
*C356 - Current HP
*C357 - Facing Direction (West, East, North, South)
*C359 - Base ATK
*C35A - Current ATK
*C35B - Base DEF
*C35C - Current DEF
*C363 - EXP (2 bytes)
*C36C - Skill 1 Trigger
*C36E - Skill 2 Trigger
*C370 - Skill 3 Trigger
*C372 - Skill 4 Trigger
*C374 - Skill 5 Trigger
*C376 - Skill 6 Trigger

Player unit 3's stats:
*C387 - Coordinates (Y)
*C388 - Coordinates (X)
*C393 - Max HP
*C394 - Current HP
*C395 - Facing Direction (West, East, North, South)
*C397 - Base ATK
*C398 - Current ATK
*C399 - Base DEF
*C39A - Current DEF
*C3A1 - EXP (2 bytes)
*C3AA - Skill 1 Trigger
*C3AC - Skill 2 Trigger
*C3AE - Skill 3 Trigger
*C3B0 - Skill 4 Trigger
*C3B2 - Skill 5 Trigger
*C3B4 - Skill 6 Trigger

Monster 1's stats
*C3C5 - Coordinates (Y)
*C3C6 - Coordinates (X)
*C3D1 - Max HP
*C3D2 - Current HP
*C3D3 - Facing Direction (E, W, N, S)
*C3D5 - Base ATK
*C3D6 - Current ATK
*C3D7 - Base DEF
*C3D8 - Current DEF

Monster 2's stats
*C403 - Coordinates (Y)
*C404 - Coordinates (X)
*C40F - Max HP
*C410 - Current HP
*C311 - Facing Direction (E, W, N, S)
*C313 - Base ATK
*C314 - Current ATK
*C315 - Base DEF
*C316 - Current DEF





Kakurenbo ROM


== Block 1 (000000-004000) ==

*0000-000B ~ HL = [HL+2A] (2 bytes, reverse); JP HL
*0010-0015 ~ HL += A*2; D = $00, E = A
*0018-001C ~ HL = [HL] (2 bytes, reverse)
*0020-0024 ~ HL += A; D = $00, E = A
*0028-002E ~ HL += A*3; D = $00, E = A


== Block 2 (004000-008000) ==

== Block 3 (008000-00C000) ==

== Block 4 (00C000-010000) ==

== Block 5 (010000-014000) ==

== Block 6 (014000-018000) ==

== Block 7 (018000-01C000) ==

== Block 8 (01C000-020000) ==

== Block 9 (020000-024000) ==

== Block 10 (024000-028000) ==

== Block 11 (028000-02C000) ==

== Block 12 (02C000-030000) ==

== Block 13 (030000-034000) ==

== Block 14 (034000-038000) ==

== Block 15 (038000-03C000) ==

== Block 16 (03C000-040000) ==

== Block 17 (040000-044000) ==

== Block 18 (044000-048000) ==

== Block 19 (048000-04C000) ==

== Block 20 (04C000-050000) ==

== Block 21 (050000-054000) ==

== Block 22 (054000-058000) ==

== Block 23 (058000-05C000) ==

== Block 24 (05C000-060000) ==

== Block 25 (060000-064000) ==

== Block 26 (064000-068000) ==

*78AC-7993 ~ Element modifiers (8 bytes per character: Strength, Fire, Water, Wind, Ice, Earth, Thunder, ?; order of characters: Kevin, Kaen, Taren, Sylphy, Goum, Ryan, Silvia, Gunter, ?, Strength monster, Fire monster, Water monster, Wind monster, Ice monster, Earth monster, Thunder monster, ? monster, ? floating monster, Trinchula, turtle monster, 8 flying monster types, overcharge-sensitive monster)
*7994-7AA3 ~ Direction modifiers (17 bytes per character, last byte of each character for bomb modifier; order of characters: Kevin, Kaen, Taren, Sylphy, Goum, Ryan, Silvia, Gunter, ?, standard enemy, direction-neutral enemy, turtle enemy, flying enemy, direction-neutral flying enemy, direction-sensitive enemy, front-protected enemy)

== Block 27 (068000-06C000) ==

== Block 28 (06C000-070000) ==

== Block 29 (070000-074000) ==

== Block 30 (074000-078000) ==

== Block 31 (078000-07C000) ==

== Block 32 (07C000-080000) ==

== Block 33 (080000-084000) ==

== Block 34 (084000-088000) ==

== Block 35 (088000-08C000) ==

== Block 36 (08C000-090000) ==

== Block 37 (090000-094000) ==

== Block 38 (094000-098000) ==

== Block 39 (098000-09C000) ==

== Block 40 (09C000-0A0000) ==

== Block 41 (0A0000-0A4000) ==

== Block 42 (0A4000-0A8000) ==

== Block 43 (0A8000-0AC000) ==

== Block 44 (0AC000-0B0000) ==

== Block 45 (0B0000-0B4000) ==

== Block 46 (0B4000-0B8000) ==

== Block 47 (0B8000-0BC000) ==

== Block 48 (0BC000-0C0000) ==

== Block 49 (0C0000-0C4000) ==

== Block 50 (0C4000-0C8000) ==

== Block 51 (0C8000-0CC000) ==

== Block 52 (0CC000-0D0000) ==

== Block 53 (0D0000-0D4000) ==

== Block 54 (0D4000-0D8000) ==

== Block 55 (0D8000-0DC000) ==

== Block 56 (0DC000-0E0000) ==

== Block 57 (0E0000-0E4000) ==

== Block 58 (0E4000-0E8000) ==

== Block 59 (0E8000-0EC000) ==

== Block 60 (0EC000-0F0000) ==

== Block 61 (0F0000-0F4000) ==

== Block 62 (0F4000-0F8000) ==

== Block 63 (0F8000-0FC000) ==

== Block 64 (0FC000-100000) ==

== Block 65 (100000-104000) ==

== Block 66 (104000-108000) ==

== Block 67 (108000-10C000) ==

== Block 68 (10C000-110000) ==

== Block 69 (110000-114000) ==

== Block 70 (114000-118000) ==

== Block 71 (118000-11C000) ==

== Block 72 (11C000-120000) ==

== Block 73 (120000-124000) ==

== Block 74 (124000-128000) ==

== Block 75 (128000-12C000) ==

== Block 76 (12C000-130000) ==

== Block 77 (130000-134000) ==

== Block 78 (134000-138000) ==

== Block 79 (138000-13C000) ==

== Block 80 (13C000-140000) ==

== Block 81 (140000-144000) ==

== Block 82 (144000-148000) ==

== Block 83 (148000-14C000) ==

== Block 84 (14C000-150000) ==

== Block 85 (150000-154000) ==

== Block 86 (154000-158000) ==

== Block 87 (158000-15C000) ==

== Block 88 (15C000-160000) ==

== Block 89 (160000-164000) ==

== Block 90 (164000-168000) ==

== Block 91 (168000-16C000) ==

== Block 92 (16C000-170000) ==

== Block 93 (170000-174000) ==

== Block 94 (174000-178000) ==

== Block 95 (178000-17C000) ==

== Block 96 (17C000-180000) ==

== Block 97 (180000-184000) ==

== Block 98 (184000-188000) ==

== Block 99 (188000-18C000) ==

== Block 100 (18C000-190000) ==

== Block 101 (190000-194000) ==

== Block 102 (194000-198000) ==

== Block 103 (198000-19C000) ==

== Block 104 (19C000-1A0000) ==

== Block 105 (1A0000-1A4000) ==

== Block 106 (1A4000-1A8000) ==

== Block 107 (1A8000-1AC000) ==

== Block 108 (1AC000-1B0000) ==

== Block 109 (1B0000-1B4000) ==

== Block 110 (1B4000-1B8000) ==

== Block 111 (1B8000-1BC000) ==

== Block 112 (1BC000-1C0000) ==

== Block 113 (1C0000-1C4000) ==

== Block 114 (1C4000-1C8000) ==

== Block 115 (1C8000-1CC000) ==

== Block 116 (1CC000-1D0000) ==

== Block 117 (1D0000-1D4000) ==

== Block 118 (1D4000-1D8000) ==

== Block 119 (1D8000-1DC000) ==

== Block 120 (1DC000-1E0000) ==

== Block 121 (1E0000-1E4000) ==

== Block 122 (1E4000-1E8000) ==

== Block 123 (1E8000-1EC000) ==

== Block 124 (1EC000-1F0000) ==

== Block 125 (1F0000-1F4000) ==

== Block 126 (1F4000-1F8000) ==

== Block 127 (1F8000-1FC000) ==

== Block 128 (1FC000-200000) ==






Game Boy Wars 3 RAM

{{rammap|game=Game Boy Wars 3}}

== VRAM Banks ==

0:
*8800~97FF: primary graphics (9000~97FF is used before 8800~8FFF)
*9800 onwards: tile placements

1:
*8800~97FF: secondary graphics (9000~97FF is used before 8800~8FFF)
*9800 onwards: the colors, Duke, THE COLORS (saying this to a dog, who will respond "I'm color blind, kid")
(Shows in order on TLP: Black, Green, Blue, White)
-Bits 0/1/2: Color Palette #0-7
-Bit 3: VRAM Bank #
-Bit 5: Horizontal Flip
-Bit 6: Vertical Flip
-Bit 7: ON = BG Priority; OFF = OAM Priority

"GB Mobile System" startup screen: only colors are White, Light Blue, Purple, Blue

Hudson logo: only colors are White, Yellow, Blue, Black

Title screen:
-0 - Purple (darkest Purple, moderate Purple, light Purple, White)
-1 - Full Purple (dark, slightly light, light, lightest)
-2 - Full Purple (darkest, slightly dark, dark, moderate)
-3 - Full Purple (very darkest, darkest, slightly dark, moderate)
-4 - Red (Brown, Red, Orange, White)
-5 - Red (Brown, dark Red, light Orange, White)
-6 - Blue (Brown, moderate Blue, dark Blue, White)
-7 - original (?, ?, Black, White)




== SRAM Banks ==

0:Miscellaneous

* A007-A00C ~ Save File Active flags (1 for each byte; $A00B involves Map Edit Save)
* A00D ~ Highlighted Save File #
* A00E ~ Interrupt Save existence flag
* A00F-A010 ~ Custom Maps used flags
* A011 ~ Interrupt Save's Save File #
* A012-A04D ~ Standard Mode records
* A080/A280/A480-A085/A285/A485 ~ Commander Name
* A087/A287/A487 ~ Configuration flags default
* A088/A288/A488 ~ Beginner/Campaign/Standard choice memory
* A27E/A47E/A67E-A27F/A47F/A67F ~ Save Checksum value

1: File 1 Beginner/Campaign

* A000-A001 ~ coordinates of upper left most tile in full view
* A002-A003 ~ Cursor within view coordinates
* A004 ~ current Phase #
* A005-A00E ~ resource amounts
* A00F-A3F6 ~ unit stats (HP and Load Count together, Ammo Counts together, unused stats not stored)
* A3F7-A523 ~ current property info
* A524-A551 ~ map basics (map general info data (32 bytes), map name (8 bytes), starting resources (4 bytes), map size (2 bytes)
* A552-AF16 ~ map terrain data (compressed, can handle 50x50, eventually ends with -1)
* AF18 ~ active game mode
* AF19 ~ map #
* AF1A-AF21 ~ Built/Lost counts

2: File 1 last 1/3, File 2 first 1/3

3: File 2 latter 2/3

4: File 3 first 2/3

5: File 3 last 1/3, ?

6:

7-B: Custom Map data (sorted into blocks of 4096 bytes per map instead of 8196; for every even numbered map, add 4096 to given address below)

* $A000-$A01F ~ Map general info
* $A020-$A027 ~ Map name
* $A028-$A02D ~ Map stats (Starting Gold, Starting Materials, Map Size)
* $A02E-$A9F1 ~ Map Terrain (compacted for maps smaller than 50x50)
* $A9F2-$AB1D (earlier for maps smaller than 50x50) ~ Predeployed Units' Coordinates/Types

C:

* $A000-$AD7F ~ land mass numbers

D:

* $A000 table (?) ~ ?
* $A000 table (AI) ~ total Movement requirements to destination % 16 * 16
* $B000 table (AI) ~ total Movement requirements to destination / 16

E:

* $A106 ~ number of Badges available

F:


== Map stats ==

*C002~C004 - LCD STAT Interrupt instructions (Conditions: FF0F bit 1 active, IME=1)
*C005~C007 - Timer Interrupt instructions (Conditions: FF0F bit 2 active, IME=1)
*C008~C00A - V-Blank Interrupt instructions (Conditions: FF0F bit 0 active, IME=1) ($C3 means JP address; $D9 means both RET and EI)
*C00B~C00D - intended to be Serial Interrupt instructions (Intended Conditions: FF0F bit 3 active, IME=1)
*C00E - flag determining if Sprite table on OAM would need to update during V-Blank interrupt
*C00F - intended LCD Control value

*C011~C01A - terrain type text

Typing:
*C021 - current character
*C023~C024 - typing coordinates offset
*C025~C026 - pointer for text to type out
*C027 - timer for next typing character
*C028 - Pointing Down Mini-Arrow's sprite #

*C300~C3FF - Text info (in order: number of characters for text, coordinates of text, text using bytes equal to character count); loops back to start if necessary
*C400~C49F - Sprites info (per 4 bytes: Y coordinate, X coordinate, character tile, attributes)
*C4A0 - generally active player
*C4A1 - backdrop of terrain for infantry or Work Car action; supplier's type for resupplying; or child unit's type for transport-related action
*C4A2 - ownership for infantry or Work Car action; supplied unit's type for resupplying; or parent unit's type for transport-related action
*C4A3 - Backdrop/Sprite's ROM Block
*C4A4 - Backdrop's used Palette Set number
*C4A5 - Backdrop number
*C4A6 - Select Button Flag (used for paywall-free Summon)
*C4A7~C4AA - unused scorecard stuff that likely would have been on the Battle Screen
*C4AB - quaking Battle Screen flag
*C4AC - Unit Type of unit to check for placements on Battle Screen
*C4AD - side
*C4AE - side
*C4AF - given unit portion on Battle Screen
*C4B0 - Unit Type of unit to check for attack's bullet
*C4B1 - offense unit's Unit Type
*C4B2 - defense unit's Unit Type
*C4B3 - Red Star's Used Weapon
*C4B4 - White Moon's Used Weapon
*C4B5 - attack #
*C4B6 - attacking unit portion #
*C4B7 - Red Star's Unit Type
*C4B8 - White Moon's Unit Type
*C4B9~C4BA - Red Star's Unit Type in-battle graphics dimensions
*C4BB~C4BC - White Moon's Unit Type in-battle graphics dimensions
*C4BD~C4C6 - Pseudo RNG results for battle animations
*C4C7 - practically unused; supposed to be involving sprites
*C4C8~C4DB ~ following bytes' known behavior:
**1st and 3rd Bytes - designated centralizing location of sprite graphics (2nd and 4th bytes are remainder placeholders)
**5th and 7th Bytes - distance to move per frame (6th and 8th bytes are remainder placeholders)
**9th Byte - Sprite number
**10th and 11th Bytes - timer for sprite activation
**12th and 13th Bytes - timer for basic sprite existence, ending instruction if any triggers when time is up
**14th and 15th Bytes - ending instruction location within given ROM Block indicated by 16th Byte
**16th Byte - ROM Block for ending instruction indicated by 14th and 15th Bytes
**19th Byte - flag determining if Sprite should be hidden until ending instruction
**20th Byte - designated sound upon sprite activation

*C4DC - Red Star's altitude aim (0 for same, 1 for Surface to Air, 2 for Air to Surface)
*C4DD - White Moon's altitude aim (0 for same, 1 for Surface to Air, 2 for Air to Surface)
*C4DE - Battle Screen sprite advanced behavior continuing flag
*C4DF - selected Beginner Mode Map #
*C4E0~C51F - BG Palettes
*C520~C55F - Sprite Palettes
*C560 - bit 7 dictates palette updating, bit 6 dictates BG Palette updating, bit 5 dictates Sprite Palette updating
*C561~C562 - flags for which BG and Sprite Palettes to update
*C563 - check for 8 frame graphics shift going on
*C564 - number of cycles for 8 frame graphics shift
*C565~C566 - RGB storage
*C567~C9A6 - new BG Palettes
*C5A7~C5E6 - new Sprite Palettes

AI:
*C5E7 - highest priority unit type target for AI's attack
*C5E8~C5E9 - coordinates of highest Cover value tile valid for AI's attack
*C5EA - priority value for AI's attack (lowest wins)
*C5EB - AI unit to look over
*C5EC - action update choice
*C5ED~C5EE - coordinates of desired action
*C5EF - target of AI's attack
*C5F0~C5F1 - target coordinates of AI's attack, or can be nearest River tile coordinates
*C5F2 - storage of unit at position to check for AI's attack
*C5F3 - storage of unit at initial position during check for AI's attack
*C5F4~C5FA - flags for potentially valid targets
*C5FB~C601 - flags for valid targets from any tile in movement range
*C602 - both weapon flags (Range Fire, Direct Fire, ?, Sub ATK, Ship ATK, Air ATK, Lite ATK, Armor ATK)
*C603 - primary weapon flags (Range Fire, Direct Fire, ?, Sub ATK, Ship ATK, Air ATK, Lite ATK, Armor ATK)
*C604 - secondary weapon flags (Range Fire, Direct Fire, ?, Sub ATK, Ship ATK, Air ATK, Lite ATK, Armor ATK) (empty if secondary weapon can't range fire)
*C605 - weapon's ranges (always uses secondary weapon if available; otherwise, uses primary weapon where available)
*C606 - primary weapon's ranges
*C607 - secondary weapon's ranges
*C608~C609 (safety check) - coordinates of highest Cover tile valid for attack
*C608 (damage check) - unit # of target that would take the highest "efficient" damage
*C609 (damage check) - highest "efficient" damage to a target
*C60A - highest available Cover value tile type (repair validity treats tile type as +100 Cover)
*c60B - unused
*C60C - number of sets of land with properties
*C60D~C60E - unused

Text:
*C61A - typing text to dig up (0 = Campaign Briefing, 1 = Beginner Briefing, 2 = Campaign Fast Clear, 3 = Campaign Slow Clear)
*C61B - B and/or Start enabled; set to 0 or -1 depending on if B was pressed

Campaign Map:
*C61A - Zone #
*C61B - Map # for palette management
*C61C - Palette management progress (done at 9 for the 9 maps of the given Zone)
*C61D - Map Selection Cursor Sprite #
*C61E - Campaign Big Map View Type (0 = World Map; 1 = Select)
*C61F~C620 - Zone Map coordinates
*C621 - Campaign Map #

*C622 - current map

*C624 - temporary storage of byte grabbed for process $09A6
*C625 - Configuration menu highlighted choice
*C626 - sprite # of pointing right bullet on Configuration menu
*C627 - temporary Configuration menu flags
*C628 - File choice on File Mode
*C629 - File Menu Parent (0 = New Game, 1 = Continue, 2 = Save)
*C62A - Main Menu choice, File choice
*C62B~C62D - updated Medals flags
*C62E - Flag for victory on Campaign Map (doesn't seem to ever be read)
*C62F - active Game Mode (0 = Beginner; 1 = Campaign; 2 = Standard; 3 = Map Edit; 4 = VS; 5 = Attraction)
*C630 - active VS Mode (0 = Man; 1 = IR Communication)
*C631 - Red Star's AI check (0 = Human; 1 = CPU)
*C632 - White Moon's AI check (0 = Human; 1 = CPU)
*C633 - Current Phase number (divide by 2 and add one to get the Day number; the remainder determines the active army)
*C634 - Red Star's current Gold (3 bytes)
*C637 - White Moon's current Gold (3 bytes)
*C63A - Red Star's current Materials (2 bytes)
*C63C - White Moon's current Materials (2 bytes)
*C63E - Red Star's current Gold Income / 10 (2 bytes)
*C640 - White Moon's current Gold Income / 10 (2 bytes)
*C642 - Red Star's current Materials Income (2 bytes)
*C644 - White Moon's current Materials Income (2 bytes)
*C646 - Red Star HQ coordinates
*C648 - White Moon HQ coordinates
*C64B~C669 - Property counts (covered owned Ruined properties too despite them ending up unused)

Save data ($C67E to $C87D):
*C67E~C684 - Name
*C685 - Configuration menu flags (?, ?, Superiority, (ZOC block), Auto-Supply, Action Animation, ?, Battle Animation)
*C686 - Beginner/Campaign/Standard
*C687~C689 - Medals obtained flags
*C68A - Bit Weight for Active Game Mode (MSB to LSB: ?, ?, ?, VS, Map Edit, Standard, Campaign, Beginner)
*C68B - player's Rank
*C68C - active game mode (0 = Beginner; 1 = Campaign; 2 = Standard; 3 = Map Edit; 4 = VS; 5 = Attraction)
*C68D~C68E - cleared Beginner map flags
*C68F~C694 - cleared Campaign map flags
*C695~C69C - cleared Standard map flags
*C69D~C6A2 - open Campaign map flags
*C6A3 - map in play
*C6A4 - selected Campaign Map
*C6A5 - selected Standard Map
*C6A6 - obtained Ending flags
*C6A7 - Standard Mode progress flags
*C6A8~C76F - Reserve unit stats (Unit Type, EXP (2 bytes), ?)
*C770 2 byte - Lite Land enemies destroyed
*C772 2 byte - Armor enemies destroyed
*C774 2 byte - Air enemies destroyed
*C776 2 byte - Sea enemies destroyed
*C778 2 byte - properties captured
*C77A 2 byte - terrain tiles changed
*C77C - Yields denied
*C77D~C783 - All Unit Medal progress flags
*C783 - bit 5 holds Map Summon check flag, bit 6 holds Work Car usage check flag
*C784~C7B0 - number of times each Campaign Map has been cleared; caps at 99

*C87E~C880 - map data location pointer
*C881 - selected map flags (?, ?, ?, ?, ?, Campaign Map open, ?, cleared)
*C882 - Map's Mode (0 = Beginner; 1 = Campaign; 2 = Standard)
*C883 - Map #
*C885~C8A4 - map general info data
*C8A5~C8AC - map name
*C8AD~C8AE - map starting Gold / 1000G for each side
*C8AF~C8B0 - map starting Materials / 10M for each side
*C8B1~C8B2 - map size
*C8B3 - Red Star's built units count (2 bytes)
*C8B5 - White Moon's built units count (2 bytes)
*C8B7 - Red Star's lost units count (2 bytes)
*C8B9 - White Moon's lost units count (2 bytes)

*C908 - active controls (ABZSRLUD) (IR version)
*C909 - just pressed controls (ABZSRLUD) (IR Version)

*C93D - flag for showing property counts on Intel screen
*C93E - Sprite # for Pointing Down Arrow on properties overview of Intel (never read)
*C93F - Sprite # for Pointing Up Arrow on properties overview of Intel
*C940 (Purchase) - selected unit/action
*C941 (Purchase) - selected Unit's Type/Side

*C942 - unit's distance from opponent's HQ

*C940 (Design Maps) - menu choice
*C941~C942 (Design Maps) - submenu choice's value
*C943 (Design Maps) - maximum
*C944 (Design Maps) - minimum
*C945 (Design Maps) - chosen submenu (0 = Mode, 1 = Size, 2 = Gold, 3 = Parts, 8 = Save, 9 = End, -1 = N/A)
*C946 - fill terrain on Design Maps
*C947 - number of fill Columns on Design Maps
*C948 - number of valid points for action
*C949~C97A - valid points numbers for action

*C989 - map's horizontal measure
*C98A - map's vertical measure
*C98B - columns to left of view
*C98C - rows above view
*C98D - Sprite # for Cursor
*C98E - 1 = property can be used for building
*C98F - cursor X within view coordinate (0~8)
*C990 - cursor Y within view coordinate (0~8)
*C991 - cursor X coordinate
*C992 - cursor Y coordinate
*C993~C994 - P1's coordinates default
*C995~C996 - P2's coordinates default
*C997 - flag for start of phase stuff already being done
*C998 - designated sprite number for first explosion graphic
*C999 - damage done by Anti-City Weapon to given unit on given tile
*C999 (Auto-End Turn hack) - flags for Auto-End Turn: Bits 0 to 3 indicate Reserve possibilities, Bit 4 is Reserve Check Done flag, and Bit 5 is set by all units' having moved or being in Reserve
*C99A - total damage done by Anti-City Weapon
*C99B - Anti-City Missile target valid check flag
*C99C - AI Yield offered flag
*C99D - AI Procedure #
*C99E - AI Active Player
*C99F - Land groups checked flag
*C9A0 - Winning State
*C9A1 - active phase song
*C9A2 - active player's first unit
*C9A3 - inactive player's first unit
*C9A4 - Terrain # before active player's HQ
*C9A5 - timer for Work Car build check flash (frames 0-9: planned terrain; frames 10-19: default terrain/unit of tile; resets on frame 20)
*C9A6 - Terrain ID of Work Car's planned terrain
*C9A7 - displayed property type (HQ, City, Ruined City, Factory, Ruined Factory, Airport, Ruined Airport, Simple Airport*, Harbor, Ruined Harbor, Communications Tower)
*C9A8 - displayed property Strength
*C9AA (Linkup) - Receiving Unit's #
*C9AB (Linkup) - Giving Unit's #
*C9AC - Direction # of Linkup Star
*C9AD - HP transferred with Linkup command
*C9AE - unused
*C9AF - 6 if unloading from an Aircraft Carrier, 5 if unloading from anything else
*C9B0 - Unloading unit's Type
*C9B1 - Carrying unit's Type (no side)
*C9B2 - Concepts to talk about on Campaign Mode
*C9B3 - first concept to talk about on Campaign Mode
*C9B4 - last concept to talk about on Campaign Mode
*C9B5 - 1 = IR Comm Receiver (always Blue Moon) is active
*C9B6~C9BD? - list of choices on menu:
**$1 to $8 (Map Menu): Unit, Intel, Config, Yield, Save, Map, ? (Summon?), End Turn
**$9 to $15 (Unit Commands): Fire, Develop, Capture, Unload (air unit), Load, Linkup, Delete, Wait, ?, Movement, ?, Pave, Build
**$16 to $18 (Work Car Build): Simple Airport, Bridge, Plains
**$1A to $1C (Unit Commands): Bomb, Supply, Unload (land unit)
**$1D (Map Command): Reset
*C9BE - number of choices on Command Menu
*C9BF - first data tile holding graphics of choices on Command Menu
*C9C0 - Map Menu list choice
*C9C1 - Map Menu's on-screen X location
*C9C2 - Map Menu active frames%16
*C9C3 - columns to left of selection - 5 in Map option
*C9C4 - rows above selection - 5 in Map option
*C9C5~C9C9 - selected unit's Type, Fuel, Coordinates, Ammo in that order
*C9CA - Build/Call flag (0: Build; 1: Call)
*C9CB - Unit #
*C9CC - Unit Type

*C9D0 - inverse flag for Resupplying animation
*C9D1 - unit type of potential parent unit
*C9D2 - unit # for potential parent unit
*C9D3 - highlighted Loaded unit for Transport-related commanding
*C9D4 - sprite # of nation's sprite for new phase card
*C9D5 - sprite # of new phase card "DAYS"
*C9D6 - sprite # of new phase card Day # 10s digit
*C9D7 - sprite # of new phase card Day # 1s digit
*C9D8 - selected unit
*C9D9~C9DA - original location of primary selected unit
*C9DB - terrain type of target tile
*C9DC - unit type of occupying unit on target tile
*C9DD - Pave Command flag for Movement establishing
*C9DE - Unloading is happening flag
*C9DF - parent unit for Transport-related commanding
*C9E0 - highlighted unit flash timer
*C9E1~C9E2 - flashing tile coordinates
*C9E3 - flashing tile unit type
*C9E4 - flashing tile terrain type
*C9E5 - tiles traversed
*C9E6 - target (defaults to -1 if no combat happens)
*C9E7 - target's Level
*C9E8~CA19 - ($C9D8) unit's army's Level values
*CA1A~CA1C - map data location pointer
*CA1D - selected map flags (?, ?, ?, ?, ?, Campaign Map open, Custom Map exists, Single Player Map cleared)
*CA1E - Map's Mode (0 = Beginner; 1 = Campaign; 2 = Standard)
*CA1F - Map #
*CA21~CA40 - map general info data
**CA23~CA24 - Byte count for Name, Gold/Money, and tile info
**CA25 - Map Checksum (1 byte)
**CA29~CA30 - (Online stuff)
**CA31~CA3C - Username?
**CA3D~CA40 - Map Online 7 Digit Code in Compact Bytes
*CA41~CA48 - map name
*CA49~CA4A - map starting Gold / 1000G for each side
*CA4B~CA4C - map starting Materials / 10M for each side
*CA4D~CA4E - map size
*CA4F - Custom Map #

*CA51 - timer for flashing between default terrain/unit and selected terrain/unit type for cursor's tile on Design Maps (defaults to latter for frames 0 to 9, changes to former for frames 10 to 19, resets to 0 on frame 20)
*CA52 - Arrangement Mode for Design Maps (0: Terrain; 1: Unit)
*CA53~CA54 - first fill tile coordinates for Design Maps
*CA55 - first fill tile set flag for Design Maps
*CA56 - first Fill tile flash timer for Design Maps (default for frames 0 to 9, selected terrain for frames 10 to 19, Null tile for frames 20 to 29, resets to 0 on frame 30)
*CA57 - terrain group selection for Design Maps
*CA58 - unit group selection for Design Maps
*CA59~CA5D - terrain group item number holders in Design Maps (Red Star properties, White Moon properties, Neutral properties, land tiles, water tiles)
*CA5E~CA63 - unit group item number holders in Design Maps (Red/Land, Red/Air, Red/Sea, White/Land, White/Air, White/Sea)
*CA65 - selected terrain's ID in Design Maps
*CA66 - selected unit type's ID in Design Maps
*CA67 - bit 0 has continued tile editing flag in Design Maps
*CA68 - Map # of save to check in Design Maps
*CA69 - Flag for finishing return transition on Design Maps

*CA91 - controls considered active (A/B/Z/S just pressed, D-Pad direction held for at least 20 frames); uses buffer for when camera is active
*CA92 - timer for showing Property Strength window if need be (window activates after 30 frames)
*CA93 - Property Strength window show flag
*CA94 - Victorious army: 1 = Red Star, 2 = White Moon
*CA95 - Victory type: 1 = HQ Capture, 2 = Rout/Condition, 3 = other player Yielded, 4 = Held out to time limit
*CA96 - Quick Save flag

*CA98 - flags for each country having built any units
*CA99 - unit scroll current ID #
*CA9A - sprite number for unit's HP and Fuel table, default of -1
*CA9B~CA9E - sprite numbers for digits of given unit's HP and Fuel
*CA9F - given unit's HP
*CAA0 - given unit's Fuel
*CAA1~CAA4 - used palettes for given tile graphics

*CAAC~CAAD - pseudo RNG number; process affecting it multiplies old number by 5 and then adds 1 with end result being modulo 65536, and uses end result / 256 for A

*CAD1 - Highlighted Custom Map # for Save, Upload Destination, Post, or Delete Type 2

*CBC9~CBCB (text) - X, X Offset, Y

*CC14~CC17 - Custom Map Online 7 Digit Code compacted into 4 bytes via digits
*CC19-CC1F - Custom Map Online 7 Digit Code in ASCII characters

*CC2F~CC36 - characters for name on naming screen (limit of 6 characters for CO Name, 8 characters for Map Name)
*CC38~CC39 - selected character coordinates on naming screen
*CC3A - length of name on naming screen
*CC3B - selected character on naming screen
*CC3C - sprite number of pointing down arrow on naming screen
*CC3D - language mode on naming screen
*CC3E - flag for ending naming screen procedure
*CC3F - never used; naming screen procedure blanks this value
*CC40 - Confirm Decision highlighted flag on naming screen
*CC41 - timer for next character flash change on naming screen (flash happens every 10 frames while timer resets)
*CC42 - next character flashing mode on naming screen
*CC43 - given subject to name on naming screen (0 = CO Name, 1 = Active Map, 2 = Design Map)

*CC45 - default character for number text
*CC46~CC4A - last stored 5 digit number text

*CC50~CC51 - number of bytes handled within rectangular area to handle
*CC52~CC53 - starting coordinates of rectangular area to handle (usuaully set to BC)
*CC54~CC55 - XY offset for progress in rectangular area to handle
*CC56~CC57 - size of rectangular area to handle (usually set to DE)
*CC58~CC59 - tiles placement pointer of rectangular area to handle
*CC5A~CC5B - palettes placement pointer of rectangular area to handle
*CC5C - location of first tile in group to use for rectangular area to handle
*CC5D - default value to set all values in rectangular area to
*CC5E - next value to set within rectangular area, with given default value that gets incremented per portion
*CC5F~CC60 - never used
*CC61 - ROM Block of tiles placement of rectangular area
*CC62 - ROM Block of palettes placement of rectangular area
*CC63 - palette number modifier for given tile in rectangular area
*CC64 - Horizontal Flip Flag for rectangular area
*CC65~CC6D - map name to show on Intel bottom half screen

*CC6E - File Menu Parent
*CC6F - Container Box Sprite # on File Menu
*CC70 - Bullet Pointing Right Sprite # on File Menu

*CC73 - OK/NO choice for overwriting Save with New Game

*CC76 - Mode Progress Flags

Medals Menu:
*CC77 - 2nd half display toggle
*CC78~CC79 - Bullet Pointer Coordinates
*CC7A - Highlighted Medal
*CC7B - Bullet Pointer Sprite # (should always be 0)
*CC7C - Pointing Up Arrow Sprite # (should always be 1)
*CC7D - Pointing Down Arrow Sprite # (should always be 2)

*CC81 - File Menu Mode Choice
*CC82 - File Menu File Choice Nonexistence Flag
*CC83 - File #
*CC84~CC86 - Save Soldiers Sprite #s
*CC87 - active song
*CC88 - Map Checksum
*CC89~CC90 - Map name
*CC92 - Map #
*CC93 - Current phase #
*CC94 - Mode Progress Flags
*CC95 - Number of maps cleared in Mode
*CC96 - Number of maps total in Mode
*CC97~CC99 - Medals Obtained base flags
*CC9A - SP Quick Save status flag
*CC9B - Initial File #
*CC9C - Top Menu Pointing Right Bullet Sprite #
*CC9D - sprite # of sprite needing to move right to indicate selection
*CC9E~CC9F - updating coordinates of sprite needing to move right to indicate selection
*CCA4 - menu shifting BG stage
*CCA5 - menu shifting BG current stage frame count (designates to update menu BG stage after frame 4)
*CCA8 - base of menu shifting BG graphics
*CCAB - Value A for rectangular area
*CCAC - Value B for rectangular area
*CCAD - Value C for rectangular area
*CCAE - Value X Offset for rectangular area
*CCAF - Value Y Offset for rectangular area
*CCB0 - Value D for rectangular area
*CCB1 - Value E for rectangular area
*CCB2 - Value H for rectangular area
*CCB3~CCB8 - rectangular area stats: B, C, X, Y, D, E
*CCBA~CCC1 - rectangular area stats: L, H, B, C, X, Y, D, E
*CCC5~CCCD - Map Name of given choice on map selection on Standard Mode
*CCCE - Y Coordinate of text for given choice on map selection on Standard Mode
*CCCF - number of on-screen choices printed on map selection on Standard Mode
*CCD0 - Sprite # of Pointing Right Bullet sprite for map choice on Standard Mode
*CCD1~CCD3 - all unused
*CCD4 - highlighted on-screen choice on map choice on Standard Mode
*CCD5 - first on-screen choice of map choice on Standard Mode
*CCD6 - last on-screen choice of map choice on Standard Mode
*CCD7 - map choices to skip for map choice on Standard Mode
*CCD8 - number of map choices available on Standard Mode
*CCD9 - flag to skip 30 maps for map choice on Standard Mode
*CCDA - Standard Mode progress
*CCDB - Standard Mode map sets unlocked flags
*CCDC - Timer for some stuff about Anime Demo that gets unused
*CCDD~CCEC - selected unit's stats (Type, Coordinates, Status (End Turn, ?, AI: Parent Loading Capped, AI: Parent Loading Valid, ?, Supplied, Reserve, Loaded), HP, Load Count, Loading Unit's #, Fuel, Ammo 1, Ammo 2, EXP (2 bytes; maxes at 400), ?, ?, ?, ?)
**PALBal change: BIT 3 for Status is Newly Deployed Flag
*CCED~CCFA - selected unit's Primary Weapon stats (Name (9 bytes), ID, Current Ammo, Minimum Range, Maximum Range, Maximum Ammo)
*CCFB~CD08 - selected unit's Secondary Weapon stats (Name (9 bytes), ID, Current Ammo, Minimum Range, Maximum Range, Maximum Ammo)
*CD09 - Red Star unit headcount
*CD0A - White Moon unit headcount
*CD0B - buyable Unit Type count for property
*CD0C~CD1A - buyable Unit Types for property
*CD28 - Primary Weapon name data
*CD33 - Loaded unit count
*CD34~CD37 - Loaded units' IDs
*CD3A - number of units that can supply the unit
*CD3B~CD40 - units that can supply the unit in order from left to right, then top to bottom
*CD41 - Unit #
*CD42 - Unit Type
*CD43 - Movement Cost for Null tile
*CD44~CD76 - selected unit's Movement Costs
*CD77 - default selected unit type for Unit Information Screen, -1 if there is none
*CD78 - given side for Unit Information Screen
*CD79 - $10:$6A09 procedure trigger for advancing game state by 1 frame for each row of graphics

WRAM Bank 1:
*D000~DD7F - map data arrange from west to east, then north to south (largest map size is theoretically 64x54), bit 6 = any units Loaded, bit 7 = End Turn
*DD80 - property count
*DD81~DEAC - each property's stats (3 bytes per property: Strength, Coordinates)

WRAM Bank 2:
*D000~DD7F - map occupying unit types, bit 7 holds viable movement
*DD80~DD8C - viable capture flags
*DD81~DDB4 - number of units of each type the AI has
*DDB5~DDE8 - number of units of each type the AI desires
*DDE9~DDEC - number of AI units in each group (Helicopters, Planes, Land, Ships) (BUGGED: will not hold any units of the final type of each group; ?: Subs also not held)
*DDED - number of Unit Types covered
*DDEE~? - Unit Type and Demand Count
*DE57~DE8A - number of units of each type Fielded
*DE8B~DE8F - holds number of units in each group (Land, non-Fighter Air, Fighter, Ship, Submarine) fielded (BUGGED: will not hold any units of the final type of each group)
*DE90~DE93 - holds list of given units--can be infantry, Work Car, or Bomber
*DE9A~DE9B - first River tile along the way
*DE9C~DE9D - coordinates of Harbor closest to player HQ
*DE9E~DE9F - coordinates of Beach or Harbor closest to enemy HQ
*DEA0 - enemy HQ reachable by: Land, Air, Sea

WRAM Bank 3:
*D000~D63F - unit stats
*D640~D95F - unit stats placeholder table
*D960 - currently checked concept for Campaign Mode concepts
*D961 - flag for subsequent concept for Campaign Mode concepts
*D962 - total number of lines for Campaign Mode concepts
*D963 - lines to skip for printing text for Campaign Mode concepts
*D964 - number of handled lines of text for printing for Campaign Mode concepts
*D965~D975 - text of current line for Campaign Mode concepts
*D976 - number of on-screen lines of text for Campaign Mode concepts (always set to 10)
*D977 - Pointing Up Mini Arrow sprite # for Campaign Mode concepts
*D978 - Pointing Down Mini Arrow sprite # for Campaign Mode concepts
*D979 - first unit choice on Unit Information Screen's unit selection
*D97A - highlighted shown unit choice on Unit Information Screen's unit selection
*D97B - sprite # of Pointing Right Mini-Arrow on Unit Information Screen's unit selection
*D97C - highlighted stat choice on Unit Information Screen
*D97D - sprite # of Pointing Right Mini-Arrow on Unit Information Screen
*D97E - sprite # of Pointing Right Mini-Arrow scrolling ability on Unit Information Screen
*D97F - sprite # of Pointing Left Mini-Arrow scrolling ability on Unit Information Screen
*D980~D9B1 - unit types that can be carried
*D9B2 - unit type # to check for potential carrying on Unit Information Screen's Transport submenu
*D9B3 - entries for Unit Information Screen's Transport and Supply/Repair submenus; include header lines and separator space for latter
*D9B4 - printed lines on Unit Information Screen's Transport and Supply/Repair submenus
*D9B5 - finished cycles in given unused procedures
*D9B6 - first shown entry
*D9B7~D9B8 - base coordinates of lines to print on Unit Information Screen's Transport and Supply/Repair submenus
*D9B9 - variable used for Unit Information Screen's submenus
*D9BA - chosen unit type on Unit Information Screen
*D9BB - chosen unit family on Unit Information Screen
*D9BC - sprite # of Pointing Up Mini-Arrow on Unit Information Screen's unit selection
*D9BD - sprite # of Pointing Down Mini-Arrow on Unit Information Screen's unit selection
*D9BE - completed number of cycles for unit name inputs on Unit Information Screen's unit selection
*D9BF - chosen weapon of unit
*D9C0 - Chosen Weapon's Type
*D9C1 - Primary Weapon Type
*D9C2 - Secondary Weapon Type
*D9C3~D9C4 - Primary's Ranges
*D9C5~D9C6 - Secondary's Ranges
*D9C7 - Transport Capacity
*D9C8 - Promoted Unit Type
*D9CB - number of Terrain Types to skip on Unit Information Screen's Movement submenu
*D9C9 - sprite # of Pointing Right Mini-Arrow on Unit Information Screen's Movement submenu
*D9CA - basically unused
*D9CB - number of terrain types skipped on Unit Information Screen's Movement submenu (either 0 or 3)
*D9CC~D9CD - selection coordinates on Unit Information Screen's Movement submenu
*D9CE - terrain's position in right-to-left then top-to-bottom on Unit Information Screen's Movement submenu
*D9CF - terrain's position in top-to-bottom then right-to-left on Unit Information Screen's Movement submenu
*D9D0 - basically unused
*D9D1 - completed cycles for printing information related to terrain on Unit Information Screen's Movement submenu
*D9D2 - Movement Type
*D9D3~D9D6 - graphics detail for given terrain on Unit Information Screen's Movement submenu (in order: base X position, base Y position, stored tile, terrain ID)
*D9D7 - related Movement Cost
*D9D8~DA09 - table of entries' unit/terrain type #, set to -1 to -3 instead for other
*DA0A~DA3B - table of entry types on Unit Information Screen's Movement submenu (-5 for Unit, -4 for Terrain, -3 for blank, -2 for "Supply Possible", -1 for "Repair Possible")
*DA3C~DA3D - accumulator for arranged entries on Unit Information Screen's Movement submenu
*DA3E - entry type on Unit Information Screen's Movement submenu
*DA3F - 
*DA40 - number of lines to skip
*DA41 - number of lines completed
*DA42 - number of lines in text
*DA43 - number of on-screen lines
*DA44~DA55 - characters in current line
*DA56 - likely intended to set up a preemptive Break
*DA57 - timer for swapping between which form to show when promoting a unit
*DA58 - which form to show when promoting a unit (0 = unpromoted, 1 = promoted)
*DA59 - number of frames that have passed for showing promotion when promoting a unit
*DA5A~DB53 - unit stats organized as follows: Type, HP, Fuel, Level, #
*DB54~DC4D - secondary list unit stats
*DC4E~DC52 - placeholder unit stats
*DC53 - sprite # for Pointing Right Bullet on Unit List
*DC54 (Unit List) - sprite # for Pointing Up Mini-Arrow
*DC55 (Unit List) - sprite # for Pointing Down Mini-Arrow
*DC56 (Unit List) - sprite # for Pointing Right Bullet for organize options on Unit List
*DC57 (Unit List) - sprite # for Pointing Right Bullet for Management on Unit List
*DC58 - highlighted listed unit # on Unit List
*DC59 - highlighted option on Unit List's Organize menu
*DC5A - highlighted option on Unit List's Management menu
*DC5B - first listed unit's # on Unit List
*DC5C~DC5F - memory of $DC58~$DC5B for Red Star
*DC60~DC63 - memory of $DC58~$DC5B for White Moon
*DC64 - highlited unit's # on Unit List
*DC65 - completed cycles for process on Unit List
*DC66 - active player's unit headcount
*DC67 - unit # for unit to print stats
*DC68~DC6C - currently printing unit stats organized as follows: Type, HP, Fuel, Level, #
*DC6D - Y coordinate of rows with unit's information
*DC6E - unused
*DC6F - unused
*DC70 - number of units already checked for current sorting portion
*DC71 - number of units already sorted for secondary list
*DC72 - unused
*DC73 - stat to organize by with Unit List's Organize menu
*DC74 - first unit for switch during sorting within Unit List
*DC75 - second unit for switch during sorting within Unit List
*DC76 - unused
*DC77 - number of units to check for given cycle during stat sorting within Unit List
*DC78 - number of units checked for given cycle during stat sorting within Unit List
*DC79 - unused counter for mini-cycles during stat sorting within Unit List
*DC7A - Deploy flag for Unit List's Management menu
*DC7B - Badge flag for Unit List's Management menu
*DC7C - currently printing unit's Status
*DC7D - Delete command confirmation
*DC7E - number of options on Unit List's Management menu
*DC7F - Promotion Unit Type for unit on Unit List's Management menu

WRAM Bank 4:
*D000~D27F - sprite information separated into 16 bytes per sprite:
**Dxx0 - bit 0 determines if sprite should be deactivated at the moment, bit 1 determines if update timer needs to pause
**Dxx1 - subtract 16 to get Y coordinate of given base pixel
**Dxx2 - subtract 8 to get X coordinate of given base pixel
**Dxx3 - Attributes/Flags
**Dxx4 - base Character Tile # / 2; bit 7 determines VRAM Bank
**Dxx5 - ROM Block of sprite
**Dxx6~Dxx7 - pointer to given sprite stats modification table (number of cycles is listed; for each cycle, numbers are: Y modification, X modification, Charater, Attributes)
**Dxx8~Dxx9 - basic pointer for list of pointers to sprite stats modification tables
**DxxA - current sprite in given list indicated by Dxx8
**DxxB - timer for changing sprites (never goes down if already set to 255)
*D280~D2A7 - byte gets set to $20 when respective sprite is active
*D2A8 - defaults to 1, unknown use
*D2A9 - defaults to -1, unknown use
*D2AA~D2D1 - set to previous sprite's number, or 41 in the case of the first sprite (used to handle sprite clear-up)
*D2D2 - defaults to 41, generally updates to 1 less than number of active sprites
*D2D3 - defaults to -1
*D2D4~D2FB - set to respective sprite's regular number, last active sprite set to 40 (actually used to handle sprite clear-up)
*D2FD - defaults to 40, generally set to number of sprites cleared up
*D2FE~D30E - backdrop graphics data (in order: base tiles pointer, tile placement pointer, palettes placement pointer, 3 palette sets pointers, amount of graphics, ROM Block, size)
*D30F~D317 - in order: sprite graphics base pointer, sprite palettes pointer, sprite base palettes pointer, sprite graphics tile amounts, sprite graphics ROM Block
*D318~D31A - sprite stats modification table pointer for graphics likely indicated by WRA4($D30F)
*D33A - BG Palette Set alternative flag for property being taken
*D33B - timer for changing BG Palette Sets for property being taken
*D340 - Red Star helicopter check for battle screen
*D341 - White Moon helicopter check for battle screen
*D342 - never used
*D343 - Helicopter HP portion #'s animation to update along with 5 later
*D344~D353 - Red Star's terrain's used palette duo values
*D354~D363 ~ White Moon's terrain's used palette duo values
*D364 - Flag for 2nd color of each palette of Red Star's terrain used palette duo set to RGB 27,28,29
*D365 - Flag for 2nd color of each palette of White Moon's terrain used palette duo set to RGB 27,28,29
*D366 - Flag for switching 2nd color of each palette of Red Star's terrain used palette duo
*D377 - Flag for switching 2nd color of each palette of Red Star's terrain used palette duo
*D368 - 2 * country of terrain's owner for property (0 = Red Star, 2 = White Moon, 4 = Neutral)
*D369 - same as above for White Moon's side
*D36A - Red Star attacked by anything other than potential anti-air flag
*D36B - White Moon attacked by anything other than potential anti-air flag
*D36C~D36D - pointer to unit's in-battle graphics
*D36E~D36F - size of unit's in-battle graphics
*D370~D371 - total area of unit's in-battle graphics
*D377~D37C - Red Star unit's stats: Unit Type, Old HP, New HP, Terrain, Used Weapon, Focus
*D37D~D382 - White Moon unit's stats: Unit Type, Old HP, New HP, Terrain, Used Weapon, Focus
*D383 - second attacking side (0 = Red Star, 1 = White Moon, -1 = neither due to simultaneous attack or inability)
*D384~D38D - Red Star's active HP portions on battle screen (1 = alive, 0 = dead, -1 = nonexistant)
*D38E~D397 - White Moon's active HP portions on battle screen
*D398~D3A1 - Red Star's active HP portions' helicopter animation flags on battle screen (1 = Primary, 0 = Secondary)
*D3A2~D3AB - White Moon's active HP portions' helicopter animation flags on battle screen
*D3AC~DB2B - advanced sprite info; first 20 bytes of every 32 bytes holds: H, H Float, L, L Float, X Increment, X Increment Float, Y Increment, Y Increment Float, Sprite #, sprite wait/non-movement timer (2 bytes), sprite basic existence timer (2 bytes), ending instruction (3 bytes with 3rd byte being instruction's ROM Block; if blank, sprite will despawn instead), ?, ?, flag determining if sprite should be hidden during basic existence, designated sound upon sprite activation
*DB2C - number of advanced sprites active
*DB2D - number of advanced sprites already checked for current frame
*DB2E~DB2F - HL storage for advanced sprite being handled
*DB30 - offense unit's altitude aim (0 for same, 1 for Surface to Air, 2 for Air to Surface)
*DB31~DB34 - pixel/frame shift amounts for attack round sprite (Red Star)
*DB35~DB36 - activation timer for attack round sprite (Red Star)
*DB37~DB38 - ending instruction timer for attack round sprite (Red Star)
*DB39~DB3B - ending instruction procedure for attack round sprite (Red Star)
*DB3C~DB3D - pointer for attack round sprite (Red Star)
*DB3E~DB41 - pixel/frame shift amounts for attack round sprite (White Moon)
*DB42~DB43 - activation timer for attack round sprite (White Moon)
*DB44~DB45 - ending instruction timer for attack round sprite (White Moon)
*DB46~DB48 - ending instruction procedure for attack round sprite (White Moon)
*DB49~DB4A - pointer for attack round sprite (White Moon)
*DB4B~DB53 - handled map's name
*DC52 - VS Mode Choice (0 = Man; 1 = IR Comm)
*DB54 - on-screen selection on map list
*DB55 - sprite number for bullet pointing to selection on map list
*DB56 - Map # of first on-screen choice Map on Map Selection screen
*DB57 - Map # of handled Map on Map Selection screen
*DB58 - number of Maps typed out for graphics on Map Selection screen
*DB59 - first typing row with handled Map's info on Map Selection screen
*DB5A~DB62 - Map's name
*DB5A~DB6A - Signal status message for online play
*DB95~DBB8 - table ordering by RNG for display tiles of given text portion on "BEGIN WAR"/Victory/Defeat announcement screen
*DBB9 - cycles for given procedure with given text portion on "BEGIN WAR"/Victory/Defeat announcement screen
*DBBA - 1 less than total number of display tiles on "BEGIN WAR"/Victory/Defeat announcement screen
*DBBB~DBBC - size of given text portion on "BEGIN WAR"/Victory/Defeat announcement screen
*DBBD~DBBE - coordinates of given tile on given text portion on "BEGIN WAR"/Victory/Defeat announcement screen
*DBBF~DBC0 - base coordinates of given text portion on "BEGIN WAR"/Victory/Defeat announcement screen
*DBC1 - unused
*DBC2 - current display tile to handle on given text portion on "BEGIN WAR"/Victory/Defeat announcement screen
*DBC3 - cycles for outputting tiles of given text portion on "BEGIN WAR"/Victory/Defeat announcement screen
*DBC4 - displayed army on Victory/Defeat announcement screen
*DBC5 - whether to display Victory or Defeat (0 = Victory, 1 = Defeat)
*DBC6 - default data tile of given text portion on "BEGIN WAR"/Victory/Defeat announcement screen
*DBC7 - palette for text on "BEGIN WAR"/Victory/Defeat announcement screen (0 for light brown for "BEGIN WAR", 1 for Red Star, 2 for White Moon)
*DBC8 - Attacker's Unit ID
*DBC9 - Defender's Unit ID
*DBCA~DBDE - Attacker stats (Unit Type, Old HP, New HP, Terrain, Used Weapon, Focus, Coordinates (2 bytes), Unit Family, Used HP, ATK, DEF, Cover value, Level value, Flank value (shown as negative in-game), Support value (invisible in-game), Total ATK (2 bytes), Total DEF (2 bytes), Weapon choice)
*DBDF~DBF3 - Defender stats (Unit Type, Old HP, New HP, Terrain, Used Weapon, Focus, Coordinates (2 bytes), Unit Family, Used HP, ATK, DEF, Cover value, Level value, Flank value (shown as negative in-game), Support value (invisible in-game), Total ATK (2 bytes), Total DEF (2 bytes), Weapon choice)
*DBF4~DBF5 - attacking unit's Coordinates
*DBF6 - distance between attacking and defending units
*DBF7 - number of valid targets
*DBF8~DC29 - Valid targets
*DC2B - Highlighted Custom Map # on Map Editor Main Menu
*DC2C - Pointing Down Bullet for Map Edit Options
*DC2D~DC2E - Pointing Down Bullet coordinates
*DC2F - Flag to shift Pointing Down Bullet up 8 tiles (probably unused)
*DC30 - 2nd Highlighted Custom Map # on Map Editor Main Menu
*DC31 - Pointing Down Bullet for Map Edit Copy
*DC32~DC33 - Pointing Down Bullet coordinates
*DC34 - Flag to shift Pointing Down Bullet up 8 tiles (probably unused)
*DC35 - (Unused)
*DC36 - Map Editor Primary Option #
*DC37 - Pointing Right Mini Arrow for Map Edit Options
*DC38~DC39 - Pointing Right Mini Arrow coordinates
*DC3A - Flag to shift Pointing Right Mini Arrow up 1 tile (seems to be unused)
*DC3B~DC42 - Highlighted Custom Map's Name
*DC4E - Map Edit Delete/Overwrite Confirm Prompt Choice (0: OK; 1: NO)
*DC4F - Map Edit Quick Save Open Choice (0: OK; 1: NO)
*DC50 - Map Edit Quick Open Type (1: Play for example)
*DC52 - VS Method choice (0 = Man, 1 = IR Comm)
*DC53 - Pointing Right Bullet on VS Method Selection
*DC54 (IR Comm VS Select) - Country Choice
*DC55 (IR Comm VS Select) - Pointing Right Bullet Sprite #
*DC56 (IR Comm Send/Get Select) - Send/Get Choice (0 = Send, 1 = Get)
*DC57 (IR Comm Send/Get Select) - Pointing Right Bullet Sprite #
*DC5A (VS Map Type Select) - Highlighted Type Choice
*DC5B (VS Map Type Select) - Pointing Right Bullet Sprite #
*DC5C - Old Player Rank
*DC5D - New Player Rank
*DC5E~DC64 - Player Name
*DC65 - New Player Rank Display Toggle Flag
*DC66 - New Player Rank Display Toggle Timer
*DC67 - Newly Obtained Medal #
*DC68 - OK/NO Choice on Interrupt Save
*DC69 - OK/NO Choice (1: OK; 0: NO; -1: cancellation)
*DC6A - Yielding AI Army
*DC6C - default tile starting location for border graphics
*DC6D - palette for table to use
*DC6E - number of tables of covered graphics in use
*DC6F~DC70 - coordinates of next available starting point for a later table of covered graphics
*DC71~DC78 - locations for given tables of covered graphics
*DC79~? - up to 4 tables of covered graphics (for each cycle: base coordinates, size dimensions, Tile/Color alteration)

WRAM Bank 5:
*D000~DD7F - movement requirements
*DD80 - total distance (+ 1)
*DD81~? - every 2 bytes holds coordinates for each tile along the path in reverse order from start to finish
*DE00~DEFF - tiles to check for Pave movement generation process

WRAM Bank 6:
*D000~DD7F - enemy ZOC/occupation flags

WRAM Bank 7:
*D000~DD7F - Work Car Paving: Materials Cost totals; AI: distance values from HQ
*DE00~DFFF - tiles to check for $0850 process
*D000~DFFF (IR Communication) - temporary map data
**D000~D001 - Camera Location
**D002~D003 - Cursor Location
**D004 - Current Phase Number
**D005~D00E - resources
**D00F~D3F6 ~ saved unit stats (Unit Type, Coordinates (2 byte), Status, HP/Load Count (HP uses upper Nibble), Parent Transport's #, Fuel, Ammo 1/2, EXP%256, EXP/256)
**DD80~DEAC ~ property info

WRAM Banks:
*1 - map: terrain; DD80 holds property count; DD81 to DEAC holds each property stats
*2 - map: occupying unit types with bit 7 holding viable moement
*3 - unit: stats
*4 - 
*5 - map: Movement requirements
*6 - map: markings (bit 0: enemy ZoC; bit 1: enemy occupation)
*7 - 

== Battle stats ==

* DBC8 - Attacker's Unit ID
* DBC9 - Defender's Unit ID

Attacker's stats
* DBCA - Unit Type
* DBCB - Old HP
* DBCC - New HP
* DBCD - Terrain
* DBCE - Used Weapon
* DBCF - Focus
* DBD0~DBD1 - Coordinates
* DBD2 - Unit Family
* DBD3 - New HP
* DBD4 - ATK
* DBD5 - DEF
* DBD6 - Cover value
* DBD7 - Level value
* DBD8 - Flank value (shown as negative in-game)
* DBD9 - Support value (invisible in-game)
* DBDA~DBDB - Total ATK (2 bytes)
* DBDC~DBDD - Total DEF (2 bytes)
* DBDE - Weapon choice

Defender's stats
* DBDF - Unit Type
* DBE0 - Old HP
* DBE1 - New HP
* DBE2 - Terrain
* DBE3 - Used Weapon
* DBE4 - Focus
* DBE5~DBE6 - Coordinates
* DBE7 - Unit Family
* DBE8 - New HP
* DBE9 - ATK
* DBEA - DEF
* DBEB - Cover value
* DBEC - Level value
* DBED - Flank value (shown as negative in-game)
* DBEE - Support value (invisible in-game)
* DBEF~DBF0 - Total ATK (2 bytes)
* DBF1~DBF2 - Total DEF (2 bytes)
* DBF3 - Weapon choice

Other
* DBF4~DBF5 - attacking unit's Coordinates
* DBF6 - distance between attacking and defending units

== Other stuff ==

* FF42 - SCY
* FF43 - SCX

* FF4F - active VRAM Bank (8000-9FFF)

* FF70 - active WRAM Bank (D000-DFFF)

* FF80 - intended active ROM Bank (4000-7FFF)
* FF81 - intended active SRAM Bank (A000-BFFF)
* FF82 - intended active WRAM Bank (D000-DFFF)
* FF83 - intended active VRAM BAnk (8000-9FFF)
* FF84~FF8D - generally procedure:Official Sprite table setup on OAM

* FF90 - active controls (ABZSRLUD)
* FF91 - just pressed controls (ABZSRLUD)
* FF92 - controls considered active (A/B/Z/S just pressed, D-Pad direction held for at least 20 frames) (can be used for $CA91)
* FF93 - frame countdown before D-Pad holding takes effect (starts at 20)
* FF94 - button hold default cooldown (defaults to 4 frames, but often may be 2)
* FF95 - intended SCX
* FF96 - intended SCY
* FF97 - intended WX
* FF98 - intended WY
* FF99~FF9A (AI Target Check) - List Pointer
* FF9B (AI Target Check) - Priority (lowest wins)
* FF9C (AI Target Check) - Best Damage
* FF9D~FF9E (AI Target Check) - Potential Target's Coordinates
* FF9F (AI Target Check) - Relative Coordinates Space

* FFA1 - number of tiles already checked for $0850 process
* FFA2 - total number of tiles checked for $0850 process
* FFA3~FFA4 - initial process for starting tile of $0850 process
* FFA5~FFA6 - process for currently being checked tile for $0850 process
* FFA7~FFA8 - process for currently being checked adjacent tile for $0850 process; should have conditional result of 0 to do $FFA9 stuff
* FFA9~FFAA - process for currently being added adjacent tile for $0850 process

* FFAC - bit flags: Left, Right, Up, Down, N/A, N/A, All tile graphic updates done, Camera wants to move
* FFAD~FFAE - coordinates of first tile to establish graphics for
* FFAF - cycles left for establishing tile graphics

* FFB1 - water graphics check toggle
* FFB2 - water graphics timer in frames
* FFB3 - Number of Viable Coordinates covered
* FFB4 - Number of Viable Coordinates so far
* FFB5 - Alloted Movement
* FFB6 - "Minimum" Movement Requirement
* FFB7 - number of sprites active
* FFB8 - number of bytes starting at WRA4($D280) before a result of 0, to a maximum of 40 bytes
* FFB9 - sprite number, primarily based on WRA4($D2D2)
* FFBA - initial A for given procedure
* FFBB - remaining sprite portions
* FFBC - old remaining sprite portions
* FFBD - 4 times the number of finished loops for setting up sprite data
* FFBE~FFC2 - holds WRA4($Dxx0~$Dxx4)
* FFC3 - intended exact Y coordinate of sprite
* FFC4 - intended exact X coordinate of sprite
* FFC5 - intended exact character tile of sprite
* FFC6 - intended exact attributes of sprite
* FFC7 - number of cycles for establishing each sprite with procedure $30CA

* FFC8 - number of bytes used for already inputted text for $C300 table
* FFC9 - first byte within $C300 table of unchecked text to place
* FFCA - remaining portions of text to place
* FFCB - intended VRAM bank of text being inputted for $C300 table (inversed in $C300 table for convenience)
* FFCC - Substitute WX
* FFCD - Half-frame count, using even numbers in V-Blank Period


{{Internal Data|game=Game Boy Wars 3}}

Music stuff
#00: 03 90 56
#01: 07 9A 56 <-- Title theme
#02: 03 A3 56 <-- Menu theme
#03: 03 AC 56
#04: 03 B5 56 <-- Red Star Beginner/Winning
#05: 03 BE 56 <-- Red Star Beginner/Losing
#06: 03 C7 56
#07: 06 D0 56
#08: 3E D9 56
#09: 04 E2 56
#10: 04 EB 56
#11: 3F F4 56
#12: 05 FD 56
#13: 05 06 57
#14: 3F 0F 57
#15: 05 18 57 <-- Red Star Standard/Neutral
#16: 06 21 57 <-- Red Star Standard/Winning
#17: 04 2A 57 <-- Red Star Standard/Losing
#18: 06 33 57 <-- White Moon Standard/Neutral
#19: 07 3C 57 <-- White Moon Standard/Winning
#20: 07 45 57 <-- White Moon Standard/Losing
#21: 07 4E 57 <-- Campaign map
#22: 04 57 57 <-- Victory
#23: 3E 60 57
#24: 3E 69 57
#25: 3E 72 57
#26: 3E 7B 57
#27: 3E 84 57
#28: 3E 8D 57
#29: 06 96 57
#30: 06 9F 57
#31: 07 A8 57 <-- Map Editor
#32: 03 91 56
#33: 3F B1 57 <-- Red Star attack
#34: 3F BA 57 <-- White Moon attack
#35: 3F C3 57 <-- Unloading jingle
#36: 3F CC 57 <-- Loading jingle
#37: 3F D5 57 <-- Resupply jingle
#38: 3F DE 57 <-- Linkup jingle
#39: 3F E7 57 <-- Summon jingle
#40: 3F F0 57 <-- Work Car jingle
#41: 3F F9 57
#42: 03 91 56
#43: 3F 02 58 <-- Capture jingle
#44: 03 91 56

 ROM3:5691 01 0B 58 00 00 00 00 00 00
 ROM3:569A 0F A2 74 BA 72 96 76 B2 78 <-- Title theme
 ROM3:56A3 0F 06 59 1A 58 E5 59 AC 5A <-- Menu theme
 ROM3:56AC 0F 9B 5C B6 5A CC 5E 82 61
 ROM3:56B5 0F CB 64 82 62 18 67 EC 69 <-- Red Star Beginner/Winning
 ROM3:56BE 0F 1D 6E BC 6B 05 70 C6 71 <-- Red Star Beginner/Losing
 ROM3:56C7 0F C5 75 3C 73 2E 78 35 7A
 ROM3:56D0 0F 01 74 58 71 9B 76 11 7A
 ROM3:56D9 0F F8 59 0B 58 DF 5B 65 5D
 ROM3:56E2 0F AD 5B 0B 58 3D 60 0A 64
 ROM3:56EB 0F F7 69 FD 66 22 6D D5 6F
 ROM3:56F4 0F A0 5A 0B 58 3B 5D 83 5F
 ROM3:56FD 0F 22 5B 0B 58 2A 5E 32 60
 ROM3:5706 0F 79 65 18 62 46 69 B0 6C
 ROM3:570F 0F CE 63 C2 60 55 67 49 6B
 ROM3:5718 0F C3 72 7C 6E 35 77 74 7B <-- Red Star Standard/Neutral
 ROM3:5721 0F 2E 5E 79 5B BC 60 F7 62 <-- Red Star Standard/Winning
 ROM3:572A 0F 89 74 3B 72 A3 76 49 78
 ROM3:5733 0F 3A 67 55 65 18 69 37 6C <-- White Moon Standard/Neutral
 ROM3:573C 0F 90 5C 0B 58 12 60 82 63
 ROM3:5745 0F C0 67 E4 65 B5 69 5D 6C
 ROM3:574E 0F 91 7B A0 79 A5 7D 0A 7F <-- Campaign Map
 ROM3:5757 0F EE 7A DC 79 00 7C E1 7C <-- Victory
 ROM3:5760 0F E2 5F EF 5E C8 60 B0 61
 ROM3:5769 0F 28 64 80 62 AF 65 22 67
 ROM3:5772 0F 95 69 7D 68 86 6A C1 6B
 ROM3:577B 0F DC 6D C1 6C F3 6E 0E 70
 ROM3:5784 0F A8 71 19 71 3A 72 B3 72
 ROM3:578D 0F CB 72 BD 72 A9 73 07 75
 ROM3:5796 0F 7F 6E 65 6D 82 6F 4E 71
 ROM3:579F 0F 1B 59 0B 58 F2 59 6F 5B
 ROM3:57A8 0F E9 6E 76 6D 80 70 E8 71 <-- Map Editor
 ROM3:57B1 0F C6 6D FE 6C 36 6E B5 6E <-- Red Star attack
 ROM3:57BA 0F 63 6F F3 6E 71 6F E4 6F <-- White Moon attack
 ROM3:57C3 0F 71 70 17 70 D3 70 30 71 <-- Unloading jingle
 ROM3:57CC 0F C5 71 6E 71 1B 72 AA 72 <-- Loading jingle
 ROM3:57D5 0F 5B 73 E6 72 8B 73 BD 73 <-- Resupply jingle
 ROM3:57DE 0F 3F 74 C7 73 BA 74 0D 75 <-- Linkup jingle
 ROM3:57E7 0F 54 76 65 75 90 76 CC 76 <-- Summon jingle
 ROM3:57F0 0F 07 77 D6 76 37 77 8A 77 <-- Work Car jingle
 ROM3:57F9 0F EA 78 AD 77 2A 7A 46 7B
 ROM3:5802 0F 3C 7C EE 7B 93 7C 22 7D <-- Capture jingle
 
 
580F is when things start being different. (580B is after the pointers.)



Map tile graphics handling (this is for Project Show HP):
*0B:444D (basic unit/tile graphics) - used by:
-0B:42CE (establishing all on-view tiles' terrain graphics)
-0B:43D1 (establishing BC's entire graphics)
-0B:4D0B (planned terrain flash portion with Work Car)
-0F:44A8 (selected terrain/unit flash portion for placement in Design Maps)
-0F:44CE (default terrain/unit flash portion for placement in Design Maps)
-0F:4B6F (selected Fill terrain for 1st Fill tile in Design Maps)
-0F:4B7F (Null for 1st Fill tile in Design Maps)
-0F:4B8D (default Fill terrain/unit for 1st Fill tile in Design Maps)



Game Boy Wars 3 ROM

{{rommap|game=Game Boy Wars 3}}

== Block 1 (000000-004000) ==
* 0150-0165 ~ ROM($C4A3):(HL ~ HL+BC-1) = ROM($C4A3):(DE ~ DE+BC-1)
* 0166-01D9 ~ Updates top half of helicopter's current HP portion graphics (A is Unit Type, B is Side)
* 01DA-01F7 ~ Changes Red Star HP portion's graphics change flag, A = first tile of set of graphics to use (A = HP Portion #)
* 01F8-0215 ~ Changes White Moon HP portion's graphics change flag, A = first tile of set of graphics to use (A = HP Portion #)
* 0216-027F ~ Updates current HP portion graphics of each side for helicopters, queueing through the first 5 in each cycle and adding the 5th one after for the procedure
* 0280-0289 ~ CALL B:(HL)
* 028A-0290 ~ Restores original ROM Block; likely an extension of $0280 handling the RETURN portion
* 02E2-02EF ~ ($FF84) 10 byte holds procedure for $02F0
* 02F0-02F9 ~ Official Sprite table setup on OAM
* 0335-0343 ~ ($C002) 3 byte holds: $C3, HL reverse
* 0344-0349 ~ ($C002) holds $D9 (the LCD Stat Interrupt, it does nothing!)
* 034A-0358 ~ ($C005) 3 byte holds: $C3, HL reverse
* 0359-035F ~ ($C005) 3 byte holds: $C3, $BB, $03
* 0360-036E ~ ($C008) 3 byte holds: $C3, HL reverse
* 036F-0375 ~ ($C008) 3 byte holds: $C3, $EC, $03
* 0376-0384 ~ ($C00B) 3 byte holds: $C3, HL reverse
* 0385-038A ~ ($C00B) holds $D9
* 03AC-03B4 ~ V-Blank Interrupt procedure simply set to constantly helicopter graphics update on Battle Screen
* 03B5-03BA ~ V-Blank Interrupt procedure simply set to set up text and graphics stats for standard zoom map
* 03EC-0439 ~ V-Blank Interrupt procedure: sets up text and graphics stats for standard zoom map
* 043A-0487 ~ V-Blank Interrupt procedure: constant helicopter graphics update on Battle Screen
* 04D2-04E4 ~ bit 7,($C00F) active: Halt/NOP process until ($FF8E) is changed (forces Halt/NOP until frame advance)
* 04E5-04F2 ~ If ($C00F) bit 7 is off, set 7,($C00F); ($FF40) = new ($C00F)
* 04F3-0513 ~ Shuts off LCD Display if necessary
* 052A-0533 ~ ($FF0F) = 0, set 0,($FFFF) (V-Blank On)
* 0534-053A ~ res 0,($FFFF) (V-Blank Off)
* 0551-055A ~ ($FF0F) = 0; set 1,($FFFF) (LCD STAT On)
* 055B-0564 ~ ($FF0F) = 0; res 1,($FFFF) (LCD STAT Off)
* 0565-056E ~ ($FF0F) = 0, set 2,($FFFF) (Timer On)
* 056F-0578 ~ ($FF0F) = 0, res 2,($FFFF) (Timer Off)
* 0579-0582 ~ ($FF0F) = 0, set 4,($FFFF) (Joypad On)
* 0583-058C ~ ($FF0F) = 0, res 4,($FFFF) (Joypad Off)
* 058D-0592 ~ load [$FF81] and [$4000] with A
* 0593-059A ~ [$0000] = 10
* 059B-05A1 ~ [$0000] = 0
* 05A2-05AB ~ Handles button presses and everything
* 05AC-05E7 ~ Establishes current direct and newly pressed controls, also sets up Soft Reset method
* 05E8-05EA ~ Jumps to setting up title screen as a result of the Soft Reset method
* 05EB-0617 ~ Establishes considered active controls
* 0618-062E ~ Resets Palettes to absolute default Palettes
* 062F-06AE ~ Absolute default Palettes
* 06AF-06BB ~ ($C4E0) 8 byte set to 00 00 00 69 FF 7F 40 72
* 06BC-06D8 ~ ($C4E0 + A * 8) to ($C4E0 + A * 8 + B * 8 - 1) hold (HL) to (HL + B * 8 - 1)
* 06D9-06F1 ~ ($C4E0 + A * 8) to ($C4E0 + A * 8 + B * 8 - 1) hold C:(HL) to C:(HL + B * 8 - 1)
* 06F2-071A ~ both BG and Sprite Palette tables are updated
* 06F9-071A ~ BG Palette tables are updated
* 06FE-071A ~ Sprite Palette tables are updated
* 0703-071A ~ Given Palette tables based on bits in B and C are updated
* 071B-0788 ~ If bit 7,($C560) is active: Palette tables are updated based on bit 6,($C560) for BG and bit 5,($C560) for Sprites; or given Palette tables based on bits in ($C561) 2 byte if ($C560) doesn't have bits 5 and 6 active
* 0789-07B3 ~ Info in $C4E0 table determined by A placed in respective Palette table
* 07B4-07E9 ~ Shifts palettes closer to all white over the span of 8 frames
* 07EA-081C ~ Shifts BG palettes closer to all white over the span of 8 frames
* 081D-084F ~ Shifts palettes closer to new colors from all white over the span of 8 frames
* 0850-08BA ~ instruction $FFA3 done before cycling through each tile with instruction $FFA5 and in turn cycling through each relative tile with instruction $FFA7, on the condition A=0 that $FFA9 instruction would be done after; repeating cycles until all associated tiles are handled
* 08BB-08BE ~ HL = [HL] 2 byte, jump to new HL
* 08C0-08C4 ~ [HL] 2 byte = DE (pointer storage)
* 08C5-08D6 ~ ($DE00 + ($FFA2) * 2) 2 byte = BC, ($FFA2) += 1
* 08D7-08E5 ~ HL = $D000 + B + C * 64
* 08E6-08F4 ~ HL = A * 256 + B + C * 64
* 08F5-090A ~ cp WRA5($D000 + B + C * 64), -1
* 090B-0926 ~ A = WRA3[$D000 + A * 16 + C]
* 0927-0941 ~ DE = WRA3[$D000 + A * 16 + C]
* 0942-095D ~ WRA3[$D000 + A * 16 + C] = B
* 095E-0979 ~ BC = WRA3[$D000 + A * 16 + 1]
* 097A-0984 ~ HL = $D000 + L * 16
* 0985-099A ~ A = AND $3F,WRA1[$D000 + B + C * 64]
* 099B-09A5 ~ A = [$18AB + HL]
* 09A6-09BC ~ A = B:(HL)
* 09BD-09CF ~ Updates BG Palettes to $0A00 table
* 0EB1-0ED3 ~ VRA0($9010~$903F) = $1:($5180~$51AF) (border graphics)
* 0ED4-0EE3 ~ HL = $9800 + (C%128 * 2 + C/128) * 16 + B
* 0EE4-0EE9 ~ HL = $9800 + B + (C + 1) * 32
* 0EEA-0EF6 ~ L = (L/32)*32 + (L+1)%32
* 0EF7-0F01 ~ HL = AND (HL + $20),$9BFF
* 0F02-0F1B ~ loads $9800~9BFF with 0
* 0F1C-0F2C ~ ldi [HL], A; bit 7,[$C00F] = 1 involves $0F2D stuff
* 0F2D-0F40 ~ repeatedly forces Enable Interrupt then Disable Interrupt during "Searching OAM-RAM" or "Transfering Data to LCD Driver", ends with Interrupt enabled and [HL] = A
* 0F41-0F4E ~ ldi A, [HL]; bit 7,[$C00F] = 1 involves $0F4F stuff
* 0F4F-0F62 ~ repeatedly forces Enable Interrupt then Disable Interrupt during "Searching OAM-RAM" or "Transfering Data to LCD Driver", ends with Interrupt enabled and A = [HL]
* 0F63-0F79 ~ [HL] holds text starting at [DE]
* 1214-124E ~ ($C902) 8 byte holds: 6/14, 8/20, 2/8, 4/13, 5/12, 110/220, 0, 0 (Normal Speed uses first value, Double Speed uses second)
* 124F-1259 ~ IR Port Data Read enabled, LED Off, Receiving IR Signal; ($C901) = -1, ($C900) = 1
* 125A-125E ~ IR Port Data Read disabled, LED Off, Receiving IR Signal; ($C901) = -1
* 125F-1267 ~ bit 1($FF00 + C) being off results in 256 - D delay cycles resulting in D = 0; otherwise, D += 1, OR ($FF00 + C),($FF00 + C)
* 1268-1270 ~ bit 1($FF00 + C) being on results in 256 - D delay cycles resulting in D = 0; otherwise, D += 1, OR ($FF00 + C),($FF00 + C)
* 1271-1280 ~ bit 1($FF00 + C) results in 1536 - D delay cycles; otherwise, OR ($FF00 + C),($FF00 + C)
* 1281-1288 ~ ($FF00 + C) = $C1 (bits 1, 6, and 7); delay cycling equivalent to D
* 1289-1290 ~ ($FF00 + C) = $C0 (bits 6 and 7); delay cycling equivalent to D
* 1291-129E ~ ($FF00 + C) = $C0 (bits 6 and 7); E set to 5 then D and E used together for delay cycling before both A and E end up at 0
* 134F-1356 ~ ($FF56) = A, ($C901) = -1
* 1423-1428 ~ A and ($C901) set to 16
* 1429-1431 ~ A and ($C901) set to OR ($C901),4
* 1432-143A ~ A and ($C901) set to OR ($C901),32
* 152F-152F ~ Nothing but RET; likely intended to pass by 16 clock cycles
* 1530-1534 ~ JR Z,+0, then JR NZ,+0; likely intended to pass by 36 clock cycles
* 1535-156C ~ Establishes current player controls for IR system
* 15DD-15F7 ~ HL = $9800 + C%16 * 64 + B%16 * 2 + C%2
* 15F8-1606 ~ HL = $D000 + B + C * 64
* 1607-1613 ~ HL = $1C6C + A * 8
* 1614-165D ~ Active map data set up in WRAM banks 1 and 2
* 165E-16B5 ~ Map data set up in WRAM banks 1 and 2
* 16B6-16ED ~ Basic map tile updates depending on state of ($FFAC)
* 16EE-171A ~ Establishes graphics of tiles starting at ($FFAD) coordinates downward, right version; A = remaining cycles at end of V-Blank period if any
* 171B-174C ~ Establishes graphics of tiles starting at ($FFAD) coordinates downward, left version; A = remaining cycles at end of V-Blank period if any
* 174D-1779 ~ Establishes graphics of tiles starting at ($FFAD) coordinates to right; A = remaining cycles at end of V-Blank period if any
* 177A-17D4 ~ Establishes tile's graphics (BC is base coordinates)
* 17D5-183C ~ Establishes tile's unit/terrain graphics (A is unit/terrain, BC is base coordinates)
* 183D-1898 ~ Establishes tile's unit/terrain graphics except for bottom right portion which is readied with HL (A unit/terrain, BC is base coordinates)
* 1899-18AA ~ LCD Stat Interrupt procedure: Sets BG & Window Tile Data portion to ($8000~$8FFF)
* 18AB-18D5 ~ terrain base IDs
* 1C6C-1E0B ~ terrain graphic blocks stuff
* 1E0C-2163 ~ unit graphic blocks stuff
* 2164-2169 ~ empties $FFB1 and $FFB2
* 216A-21AC ~ water graphics update check process
* 21AD-21CA ~ which water tile to update based on the water tile graphics update timer (0 means no update)
* 21CB-21E8 ~ pointers for which water tile's graphics to update in VRA0
* 21E9-2272 ~ updates involved water tile's graphics in VRA0
* 2273-2632 ~ water tile update graphics
* 2633-268A ~ AI management master control
* 268B-2691 ~ CALL (B):HL
* 2692-26B6 ~ AI general procedure pointers, ending with 00 for end marker
* 26B7-26CA ~ A = (($C025) 2 byte reverse), ($C025) 2 byte reverse incremented
* 26CB-26FE ~ LCD Stat Interrupt procedure: Shifts SCX if advancing to next row of zoomed out map tiles
* 26FF-2755 ~ V-Blank Interrupt procedure: sets up graphics stats for zoomed out map
* 2756-2787 ~ Zoomed out map tile updates depending on state of ($FFAC)
* 2788-27B9 ~ Establishes graphics of zoomed out map tiles starting at ($FFAD) coordinates downward, left version; A = remaining cycles at end of V-Blank period if any
* 27BA-27E6 ~ Establishes graphics of zoomed out map tiles starting at ($FFAD) coordinates downward, right version; A = remaining cycles at end of V-Blank period if any
* 27E7-2813 ~ Establishes graphics of zoomed out map tiles starting at ($FFAD) coordinates to right; A = remaining cycles at end of V-Blank period if any
* 2814-2839 ~ Establishes zoomed out map tile's graphics
* 283A-2857 ~ HL = $D000 + B + C%64 * 64 + C/64 * 16, with B and C in the formula each set to 50 if exceeding 239--BC is popped after process is done
* 2858-286D ~ HL = $9800 + B%32 + C%32 * 32
* 286E-289F ~ terrain tile graphics pallete numbers (0: ?; 1: brown/yellow; 2: white/grey; 3: green; 4: red; 5: blue)
* 28A0-28D8 ~ [$CA21~$CA4E] holds [3 Byte Pointer~3 Byte Pointer+45], each byte of [$CA41~$CA48] that would be 0 becomes 32 ($CA1A holds 3 Byte Pointer)
* 28D9-28FC ~ B = B + [$28FD + C%1 * 16 + E * 2], C = C + [$28FE + C%1 * 16 + E * 2], sets Carry Flag by either cp B,map width or cp C,map height (BC is coordinates, E is adjacent space to check)
* 28FD-290C ~ table holding -1/-1, 0/-1, -1/0, 1/0, -1/1, 0/1, 0/0, 0/0
* 290D-291C ~ table holding 0/-1, 1/-1, -1/0, 1/0, 0/1, 1/1, 0/0, 0/0
* 291D-294A ~ A = space difference (BC and DE hold comparison coordinates)
* 294B-295F ~ A = Pseudo RNG result / 256 % (1 + D)
* 2960-297D ~ [$CAAC] (2 bytes) is multiplied by 5 and then 1 is added with end result using modulo 65536; A = end result / 256
* 297E-298E ~ A = ((A % 160) / 10) * 16 + (A % 10), add 1 if A is an even number at least 160
* 298F-2994 ~ A = A or (256 - A) (whichever one is no more than 128)
* 2995-29AC ~ HL = A * B
* 29AD-29BB ~ HL *= 100
* 29BC-29C2 ~ HL += A
* 29C3-29C9 ~ HL -= DE
* 29CA-29D7 ~ Carry Flag active if DE < HL, A = 0 if DE = HL
* 29D8-2A1C ~ HL *= DE (Signed), BC is Carry Byte
* 2A1D-2A20 ~ HL = 0
* 2A21-2A6F ~ DE / BC: DE holds rounded down answer, BC holds remainder
* 2A70-2A78 ~ [HL] -= 1, BC *= -1
* 2A79-2A81 ~ [HL] -= 1, DE *= -1
* 2B38-2B8A ~ VRA0[$9800] 1024 byte string holds dialogue (BC is starting coordinates, HL is dialogue pointer)
* 2D7C-2DD6 ~ Resets all Sprite-related data
* 2DE8-2E1E ~ A = number of already active sprites; $Dxx5~$DxxB prepared (B is ROM Block of Sprite, C is base Character Tile # / 2 with bit 7 determining VRAM Bank; and DE is pointer to sprite stats modification tables pointers)
* 2E1F-2E66 ~ Handles clear-up of sprite
* 2E67-2E86 ~ Handles clear-up of all sprites and entire ($C400) table, sets ($C00E) to 1
* 2E87-2E99 ~ WRA4($D000 + A * 16 + B) = C
* 2E9A-2EAD ~ A = WRA4[$D000 + A * 16 + B]
* 2EAE-2EC8 ~ WRA4($D001 + A * 16) = C; WRA4($D002 + A * 16) = B
* 2EC9-2EE7 ~ WRA4($D003 + A * 16) has Palette bits modified according to B
* 2EE8-2F10 ~ WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
* 2F11-2F2A ~ set 1,WRA4[$D000 + A * 16]
* 2F2B-2F44 ~ res 1,WRA4[$D000 + A * 16]
* 2F45-2F5E ~ res 0,WRA4($D000 + A * 16)
* 2F5F-2F78 ~ set 0,WRA4($D000 + A * 16)
* 2F79-2F9E ~ res 0,WRA4($Dxx0) for every active sprite
* 2F9F-2FC4 ~ set 0,WRA4($Dxx0) for every active sprite
* 2FC5-2FEA ~ A = number of already active sprites, also establishes later clear-up stats for sprite and prepares sprite's general stats table with cleansing
* 2FEB-2FFF ~ A = number of bytes starting at ($D280) before a result of 0, to a maximum of 40 bytes
* 3000-3047 ~ Updates later clear-up stats for sprite, also sets ($D280 + ($FFB8)) to initial A
* 3048-3055 ~ HL = $D000 + A * 16 + B
* 3056-30C9 ~ Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
* 30CA-3149 ~ Establishes sprite's portions in $C400 table
* 314A-316F ~ [$D006 + [$FFB9] * 16] 2 byte and respective graphics timer bytes updated based on if [$D00B + [$FFB9] * 16] is 0
* 3177-31B9 ~ [$D006 + A * 16] 2 byte reverse holds pointer for used sprite stats modification table, [$DxxA] and [$DxxB] updated accordingly
* 31BA-31C9 ~ A = [DE + A * 3 + 2], BC = [DE + A * 3] 2 byte reverse
* 31CA-31E1 ~ Load [$C300 + [$FFC8] + 0~4] with 2, E, modded D, Hex ASCII of A; increment [$FFCA], B = 0, HL = $FFCA, A = [HL+1] (D is modded to be D%128 if [$FFCB] = 1)
* 31E2-31F4 ~ (HL) 2 byte = Hexadecimal ASCII of A
* 31F5-3236 ~ [$C300 + [$FFC8]] holds # of digit bytes, then designated HL (reversed), then number text (A is the number, BC is coordinates, D is the number of digits)
* 3237-3243 ~ Version of $31F5 that doesn't blank surplus digits
* 3244-3250 ~ Version of $31F5 that uses Underscores for surplus digits
* 3251-32A2 ~ [$C300 + [$FFC8]] holds # of digit bytes, then designated HL (reversed), then number text (HL is the number, BC is coordinates, D is the number of digits)
* 3258-32A2 ~ Version of $3251 that sets surplus digits to 0 instead of using blanks
* 32A3-3314 ~ [$C300 + [$FFC8]] holds # of digit bytes, then designated HL (reversed), then number text (HL 3 byte reverse holds the number, BC is coordinates, D is the number of digits)
* 3315-3333 ~ (DE) = 48 + HL / (BC * -1) if HL / (BC * -1) is at least 1, ($CC45) otherwise; ($CC45) changed to 48 if former happens; HL holds remainder
* 3317-3333 ~ (DE) = A + 1 + HL / (BC * -1) if HL / (BC * -1) is at least 1, ($CC45) otherwise; ($CC45) changed to 48 if former happens; HL holds remainder
* 3334-3352 ~ (DE) = 48 + HL / 100 with ($CC45) set to 48, or ($CC45) with that unchanged if result would be 48 already; HL holds remainder
* 3353-336D ~ [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
* 336E-338A ~ [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary (coordinates not set version)
* 34CE-34D7 ~ Empty $FFC8 to $FFCB
* 34D8-34EC ~ when [$FFC8] != [$FFC9] - 1 (loops until that's the case), A -> [$C300 + [$FFC8]] and [$FFC8] += 1
* 34ED-350E ~ [$C300 + [$FFC8]] 3 byte holds: 1, B + C%8 * 32, 152 or 24 + C / 8, A; [$FFCA] incremented (152 or 24 + C / 8 is 24 + C / 8 if [$FFCB] != 0)
* 350F-352D ~ load [$C300 + [$FFC8] + 0~(2+B)] with B, E, modded D, [HL]...[HL+B-1]; increment [$FFC8] for each byte, increment [$FFCA], B = 0, HL = $FFCA, A = [HL+B-1] (D is modded to be D - 128 if [$FFCB] = 1 and D > 128)
* 352E-3536 ~ Loops without doing anything until ($FFC8) = ($FFC9)
* 3537-357A ~ Establishes all unchecked text into appropriate VRAM bank; bit 7,($C00F) being inactive or LY => 142 stops after only one text portion and leaves it considered unchecked
* 357B-35FD ~ Sets up BG graphics tile placements and palette placements based on data in $CC50 bytes group, with VRA1 unconditionally active but no change to the active ROM Bank
* 35FE-36C3 ~ Sets up BG graphics tile placements and attribute placements based on data in $CC50 bytes group, with Attribute having Palette shifted by +3 and VRA1 unconditionally active
* 36C4-377B ~ Sets up BG graphics tile placements and palette placements based on data in $CC50 bytes group
* 377C-37B2 ~ STAT Interrupt Procedure: alternates WX value between 7 and -1, with 7 used on half frames with the V-Blank period
* 37B3-37C1 ~ Substitute WX set to -1 on even half-frames, or 7 on odd ones
* 37C2-37E8 ~ Text Character A with Palette/Attributes D place at graphics coordinates BC
* 3815-3842 ~ Changes ($C102) to no song as necessary
* 3816-3842 ~ Changes ($C102) to designated song as necessary (A = designated song)
* 3843-385D ~ seems to provide a mute sound
* 3844-385D ~ seems to load up sound (A = sound number)
* 3878-3891 ~ A = 1 if ($C105) is active, 0 otherwise
* 38D4-392F ~ 2 byte tables with the following: 80A0, 80A2, 80A4, 80A6, 80A8, 80AA, 01A0, 01B0, 02A0, 06A0, 06B0, 02B0, 03A0, 03B0, 06A0, 06B0, 04A0, 04B0, 05A0, 06A0, 06B0, 05B0, 05B0, 05B0, 05B0, 05B0, 06A0, 06A0, 06A0, 06A0, 06A0, 06B0, 06B0, 06B0, 06B0, 06B0, 07A0, 07B0, 08A0, 08B0, 09A0, 09B0, 0AA0, 0AB0, 0BA0, 0BB0
* 3930-3963 ~ A set to flag for SRA0($A000~A006) values not matching $47,$42,$57,$33,$00,$09,$14
* 3964-3987 ~ SRA0($A000~A006) holds values $47,$42,$57,$33,$00,$09,$14
* 3988-39C6 ~ Full save erasure
* 39C7-39DA ~ BC holds sum of all values of HL to HL+DE-1
* 39DB-3A8E ~ VRA0 rectangle BC, size DE set to H + Prior Tiles (L is horizontal flip flag)
* 3A8F-3A92 ~ JP [HL + 2A]
* 3A93-3A9D ~ HL = [HL + 2A]
* 3A9E-3AC6 ~ HL = [HL + 2 * (# of 0s right of rightmost 1 bit in A)]
* 3AC7-3AD0 ~ A = [HL + (A/8)] AND 2^(A%8)
* 3AD1-3ADB ~ [HL + (A/8)] = [HL + (A/8)] OR 2^(A%8)
* 3ADC-3AE8 ~ [HL + A/8] = AND CPL 2^(A%8),[HL + A/8]
* 3AE9-3B05 ~ HL += (A / 8): C holds 2^Remainder, HL holds rounded down answer
* 3B50-3B58 ~ ldi [HL],[DE]; inc DE, dec BC, repeat if BC != 0
* 3B59-3B78 ~ a version of $3B50 stuff that repeatedly forces Enable Interrupt then Disable Interrupt during "Searching OAM-RAM" or "Transfering Data to LCD Driver", ending with Interrupt enabled (bit 7,[$C00F] being 0 actually simplifies this to the $3B50 stuff)
* 3B79-3B83 ~ [HL], [HL+1]...[HL+BC-1] = A
* 3B84-3BA4 ~ a version of $3B79 stuff that repeatedly forces Enable Interrupt then Disable Interrupt during "Searching OAM-RAM" or "Transfering Data to LCD Driver", ending with Interrupt enabled (bit 7,[$C00F] being 0 actually simplifies this to the $3B79 stuff)
* 3BA5-3BAE ~ ldi [HL],E, ldi [HL],D, dec BC, repeat until BC = 0
* 3BAF-3BBA ~ Advances game state by frame count determined directly by A before any further functions
* 3BBB-3BF0 ~ Establishes table graphics for absolute erasure prompt

== Block 2 (004000-008000) ==

* 4000-401B ~ Graphics holding: VRA0($9000) to VRA0($97FF) then VRA0($8800) to VRA0($8FFF) holds basic text
* 401C-40CD ~ Graphics holding: VRA0($8000) to VRA0($852F) holds in order: blank space, all Hiragana, Dash, LV symbol; VRA0($8800) to VRA0($880F) holds blank space; VRA0($88B0) to VRA0($8B7F) holds in order: English alphabet, then miscellaneous text graphics; VRA0($8540) to VRA0($857F) holds in order: Left/Right symbols, Question Mark, Period; VRA0($9000) to VRA0($95FF) holds terrain map graphics; VRA1($9000) to VRA1($97FF) then VRA1($8800) to VRA1($859F) holds unit map graphics
* 40CE-40FB ~ Graphics holding: $401C stuff, then VRA0($9000) to VRA0($951F) holds Blank space, then all Katakana, then Dash
* 40FC-4117 ~ Graphics holding: VRA0($8600) to VRA0($87FF) holds Hiragana up to "ma", then VRA0($8D00) to ($8FFF) holds rest of Hiragana
* 4118-5117 ~ basic text graphics
* 5120-524F ~ various mini-graphics
* 5250-525F ~ Level box graphics
* 5278-57F7 ~ terrain map graphics
* 5898-6637 ~ unit map graphics
* 6648-66E7 ~ terrain zoomed-out map graphics

== Block 3 (008000-00C000) ==

* 4000-4015 ~ HL holds pointer to unit type's positions table on Battle Screen (A = Unit Type, B = Side)
* 4016-407D ~ pointers to tables for unit type positions on Battle Screen
* 407E-4A11 ~ tables for positions, sorted with first 4 bytes for Null and then every 48 bytes for a unit type

== Block 4 (00C000-010000) ==

== Block 5 (010000-014000) ==

* 4000-580E is same as in Block 4 due to this block being in the music business

== Block 6 (014000-018000) ==

* 4000-580E is same as in Block 4 due to this block being in the music business

== Block 7 (018000-01C000) ==

* 4000-580E is same as in Block 4 due to this block being in the music business

== Block 8 (01C000-020000) ==

* 4000-580E is same as in Block 4 due to this block being in the music business

== Block 9 (020000-024000) ==

== Block 10 (024000-028000) ==

* 4000-47E6 is same as in Block 9 due to this block being in the sound business

== Block 11 (028000-02C000) ==

== Block 12 (02C000-030000) ==

* 4000-403D ~ Sets up graphics holding and palettes for the map where gameplay takes place
* 403E-4056 ~ Establishes unit/terrain color palette tables in ($C4E0) table
* 4057-4077 ~ Establishes potential cursor sprite graphic palettes
* 4078-4087 ~ Palettes: mostly red with white, mostly slightly greenish blue with white
* 4088-40E2 ~ Establishes stats for a new start on a map
* 40E3-40ED ~ Reserve Units' stats established in unit list if playing on Campaign
* 40EE-411A ~ Reestablishes interrupt save data (A is the given file)
* 411B-415E ~ establishes starting Gold and Materials
* 415F-416C ~ used Gold bytes carry starting Gold (DE = Starting Gold value, gets multiplied by 1000)
* 416D-4177 ~ used Materials bytes carry starting Materials (DE = Starting Materials value, gets multiplied by 10)
* 4178-41BD ~ sets base counts of each property type, as well as each HQ's coordinates
* 41BE-41DA ~ Increments count of given property type, establishes HQ coordinates if feasible
* 41DB-41E6 ~ Increments ($C64A + A)
* 41E7-41F2 ~ Decrements ($C64A + A)
* 41F3-4276 ~ WRAM Bank 1 updated with any End and/or Transporting units in mind, headcounts also set up
* 4277-4281 ~ Increment ($CD09) for Red Star unit, ($CD0A) for White Moon unit
* 4282-4289 ~ Empties $FFAC, $FFB1, and $FFB2
* 428A-42B7 ~ Establishes all on-screen tiles' entire graphics, ($FF95) 2 byte holds screen shift coordinates
* 42B8-42CD ~ ($FF95) = X shift % 16 * 16, ($FF96) = Y shift % 16 * 16; Button update
* 42CE-4309 ~ Establishes all on-screen tiles' terrain graphics, ($FF95) 2 byte holds screen shift coordinates
* 430A-435D ~ Initial loading animation of map for gameplay
* 435E-4369 ~ Sets ($FF99) and ($FF9A) default of 0, prepares BC tile graphics, sets the stage for $0850 process
* 436A-437B ~ ($FF99) = ($D000 + B + C * 64)
* 437C-43A0 ~ If ($D000 + B + C * 64) = -1 and coordinates are in view, A = 0, H = 0, and D = ($FF99) + 1; otherwise, A = 1, H = 1, and D isn't set
* 43A1-43D0 ~ Prepares tiles graphics; ($FF9A) defaulted to D with required change playing out 4 frame loading before tile graphics preparation
* 43D1-444C ~ Establishes tile BC's entire graphics
* 444D-44C5 ~ Establishes terrain/unit tile graphics (A is terrain/unit, BC is tile's coordinates)
* 44C6-44F4 ~ A = 0 if coordinates are in view; 1 if not
* 44F5-4523 ~ A = 1 if tile is outside full view, 0 otherwise
* 4524-4550 ~ Empties map data stored on WRAM Banks 1 and 2
* 4551-455C ~ set 7,($FFAC); ($FFAD) 3 byte holds in order: B - (C%2), C, 10 + (C%2)
* 455D-4570 ~ set 7,($FFAC); ($FFAD) 3 byte holds in order: B, C, 9
* 4571-45C0 ~ Handles new View area coordinates and scroll
* 45C1-45D8 ~ establishes cursor's overall coordinates and then cursor's sprite graphics location center
* 45D9-45FE ~ if BC is not north or west of view, establishes cursor's within view and overall coordinates, and then cursor's sprite graphics location center
* 45FF-4620 ~ WRA4($D001 + ($C98D) * 16) 2 byte reverse effectively points to center of cursor's tile
* 4621-4633 ~ Sets up Cursor tiles in VRA0 tiles 96~122
* 4634-464C ~ Basic Cursor Sprite stats set up
* 464D-4653 ~ Handles clear-up of Cursor Sprite
* 4654-467F ~ Updates Cursor Sprite based on if building on tile is possible
* 4680-468B ~ Updates Cursor Sprite to Normal Cursor
* 468C-4697 ~ Updates Cursor Sprite to Arrowed Cursor
* 4698-46A3 ~ Updates Cursor Sprite to Missile Aiming Cursor Valid
* 46A4-46AF ~ Updates Cursor Sprite to Missile Aiming Cursor Invalid
* 46B0-46BB ~ Updates Cursor Sprite to Surrounding Area Cursor
* 46BC-46C4 ~ Cursor Sprite Palette White/Teal
* 46C5-46CD ~ Cursor Sprite Palette Aqua/Dark Blue
* 46CE-46D6 ~ Cursor Sprite Palette Orange/Dark Red
* 46D7-46F8 ~ Establishes Big Cursor basic sprite info
* 46F9-46FF ~ res 0,WRA4[$D000 + ($C98D) * 16]
* 4700-4706 ~ set 0,WRA4[D000 + [C98D] * 16]
* 4707-4713 ~ A = [18AB + A] (used to determine property's base value or such)
* 4714-4729 ~ A = Terrain Type of tile (non-ownsership)
* 472A-473F ~ A = Unit Type of occupying unit with bit 7 holding viable movement
* 4740-4757 ~ Terrain tile updated with A
* 4758-476F ~ Unit tile updated with A (generally Unit Type)
* 4770-4775 ~ A = Terrain ID
* 4776-4791 ~ Terrain on tile BC updated with A
* 4792-4797 ~ A = Unit Type of occupying unit
* 4798-479B ~ Unit tile updated with A (generally Unit Type)
* 479C-47BE ~ if A = set 7,($D000 + B + C * 64) WRAM Bank #2; otherwise, set (5 + A),($D000 + B + C * 64) WRAM Bank 1
* 47BF-47E0 ~ if A = 0, res 7,WRA2[$D000 + B + C * 64]; otherwise, WRA1[$D000 + B + C * 64] = AND WRA1[$D000 + B + C * 64],rrca(rrca(NOT a)))
* 47E1-47F9 ~ Tile on WRAM Bank #1 has Loaded and End Turn Flags cleared, Viable Movement Flag cleared from WRAM Bank #2 equivalent (BC holds coordinates)
* 47F9-480D ~ set 7,[$D000 + B + C * 64]
* 480E-4821 ~ res 7,[$D000 + B + C * 64]
* 4822-485F ~ Window scrolls up 4 pixels per frame from Y = 152 to Y = A (A must be a multiple of 4 to avoid an infinite loop error)
* 4860-4870 ~ Shuts off Window Display, LCD STAT Interrupt, and LYC=LY Coincidence Interrupt
* 4871-489B ~ A = 0 if Develop is viable; 1 otherwise
* 489C-4940 ~ Develop process fully handled; A = -1 instead if insufficient "ammo" (BUG: EXP management is not part of this process; results in AI not getting EXP from doing this)
* 4941-4961 ~ A = 0 if Build is viable; 1 otherwise
* 4962-498E ~ Establishes viable Simple Airport building data with $C948 (number) and $C949 7 byte (relative locations); A holds the former
* 498F-499E ~ $C949 bytes hold given viable Simple Airport locations with $C948 incremented by number of those
* 499F-49B3 ~ If Simple Airport can be built at location, ($C949 + ($C948)) = E and $C948 is incremented; otherwise, Zero Flag on
* 49B4-49E2 ~ Establishes viable Plains building data with $C948 (number) and $C949 7 byte (relative locations); A holds the former
* 49E3-49F2 ~ $C949 bytes hold given viable Plains locations with $C948 incremented by number of those
* 49F3-4A07 ~ If Plains can be built at location, ($C949 + ($C948)) = E and $C948 is incremented; otherwise, Zero Flag on
* 4A08-4A4A ~ Establishes viable Bridge building data with $C948 (number) and $C949 6 byte (relative locations); A holds the former
* 4A4B-4A57 ~ Work Car's Materials cost for Simple Airport
* 4A58-4A63 ~ Work Car's Materials cost for Plains
* 4A64-4A7B ~ Work Car's base Materials cost for Plains, Moor, or Forest
* 4A7C-4ADF ~ Build command as a whole; A = -1 for B Button press
* 4AE0-4B5E ~ Controls for Simple Airport chosen on Work Car's Build command; ends immediately instead with A = -1 if already at 100 properties; ends with A = -1 for B Button press, or 0 for A button press with sufficient Materials, latter also handles Simple Airport building
* 4B5F-4B6B ~ A = active player's Simple Airport ID #
* 4B6C-4BBB ~ Controls for Plains chosen on Work Car's Build command; ends with A = -1 for B Button press, or 0 for A button press with success (A Button press with insufficient Materials oddly just has invalidity warning)
* 4BBC-4BF1 ~ Controls for Bridge chosen on Work Car's Build command; ends with A = -1 for B Button press, or 0 for A button press with success (A Button press with insufficient Materials oddly just has invalidity warning)
* 4BF2-4C17 ~ Build Bridge process
* 4C18-4CD3 ~ Controls for Work Car's Build command tile selection; ends with A = -1 for B Button ending, A = 0 for A Button ending
* 4CD4-4CF2 ~ BC = coordinates of placement, E = relative location number if not direct location
* 4CF3-4D0A ~ Work Car build check flashing
* 4D0B-4D1E ~ Establishes planned terrain graphics for cursor location, resets Work Car build check flash timer
* 4D1F-4D2B ~ Establishes default graphics of cursor location
* 4D2C-4D39 ~ EXP incremented by HP
* 4D3A-4D60 ~ A = inverse of Linkup Command viability at coordinates BC
* 4D61-4DBF ~ A = number of Linkup compatible units (A is primary unit's type, BC is primary coordinates)
* 4DC0-4DE1 ~ A = Unit Type and L = Unit # if coordinates BC is primarily occupied by a unit other than the primary selected one; otherwise, A = -1
* 4DE2-4DF1 ~ Compare (Current HP + ($CCE1)), 20
* 4DF2-4EC7 ~ Linkup Command as a whole; A = -1 for B Button press, or 0 for success with A Button press
* 4EC8-4F4D ~ Controls for Linkup Command unit selection; ends with A = -1 for B Button press, or selected partner's unit # for A Button press
* 4F4E-4F81 ~ Establishes Linkup highlighted partner unit stats holder graphics
* 4F82-4FA5 ~ Clears Command Menu data, prepares blank space command (A is first data tile of Commands)
* 4FA6-4FBD ~ ($C9B6 + menu choice number) = A, ($C9BE) is incremented
* 4FBE-4FBF ~ infinite loop caused by more than 9 menu choices
* 4FC0-5051 ~ Controls for Command Menu, ending with A = Map Menu choice if selected, or 0 if backspaced with B button
* 5052-5085 ~ Establishes menu choice graphics on display
* 5086-5089 ~ Restores last table of covered graphics
* 508A-50B3 ~ Sets up listed menu choice E/8's display graphics at HL
* 50B4-50CF ~ Highlighted menu choice flashes blank for 8 frames every 16 frames
* 50D0-50F0 ~ Sets up highlighted menu choice's display graphics at its original location
* 50F1-5107 ~ Sets up blank menu choice's display graphics at location of highlighted menu choice
* 5108-515E ~ Places Day Number Window
* 515F-5163 ~ Restores last table of covered graphics
* 5164-518B ~ Stores menu choices' graphics within data tiles starting at VRA0($8C00)
* 518C-519E ~ DE = $4E88 + A * 128
* 519F-51B4 ~ H = 128 + (A/32 + (A%32) * 8 + ($C9BF)) / 16; L = ((A/32 + (A%32) * 8 + ($C9BF)) * 16)%256
* 51B5-51CC ~ Handles Popup Message as a whole including momentary cursor disabling (A is Popup Message #)
* 51CD-5270 ~ Handles Popup Message graphics (A is Popup Message #)
* 5271-52BB ~ Popup Message modifier pointers (per 3 bytes: first 2 bytes is modification amount in reverse byte, 3rd byte is text width)
* 52BC-5365 ~ Zoomed out map view controls, ending with A = -1 for B Button, or 0 for A Button; latter has BC as view selection center tile
* 5366-538E ~ Establishes all on-screen tiles' terrain graphics for zoomed out map
* 538F-539F ~ Establishes coordinates of upper-left corner tile in zoomed out map view within ($C9C3) 2 byte
* 53A0-53B8 ~ LCD Stat and V-Blank Interrupt procedures changed for zoomed out map view
* 53B9-53C9 ~ V-Blank Interrupt procedure changed for standard zoom map; LCD Stat Interrupt rendered unavailable
* 53CA-5405 ~ Zoomed out map view coordinates update
* 5406-5430 ~ If view moves any further right, ($FFAC) 4 byte holds: OR ($FFAC),$82; new rightmost column; topmost row; 18
* 5431-5453 ~ If view moves any further left, ($FFAC) 4 byte holds: OR ($FFAC),$81; new leftmost column; topmost row; 18
* 5454-547C ~ If view moves any further down, ($FFAC) 4 byte holds: OR ($FFAC),$88; leftmost column; new bottommost row; 20 + HEX modifier
* 547D-549D ~ If view moves any further up, ($FFAC) 4 byte holds: OR ($FFAC),$84; leftmost column; new topmost row; 20 + HEX modifier
* 549E-54B5 ~ ($FFAC) 4 byte holds: OR ($FFAC),$80, B - (C%2), C, 20 + (C%2)
* 54A7-54B5 ~ ($FFAC) 4 byte holds: OR ($FFAC),$80, B, C, A
* 54B6-54DF ~ Establishes Movement for Movement/Pave Commands
* 54E0-5538 ~ WRAM Bank #2 has set 7 done to viable movement tiles, WRAM Bank #5 map has Movement requirements, WRAM Bank #6 map has enemy occupied (bit 1) and ZOC tiles (bit 0) marked
* 5539-555E ~ A = min(Movement Power, Fuel), [CD43] stuff (Movement Costs) is set up
* 555F-55F3 ~ Base WRAM Bank holds Movement requirements, WRAM Bank #2 has set 7 done to viable movement tiles
* 55F4-5623 ~ A = 0 if movement needs updating, 1 otherwise; D = Movement Requirement just in case
* 5624-566A ~ E = used Movement Cost
* 566B-569A ~ res 7 on every tile in WRAM Bank #2
* 569B-5708 ~ ($FFB5) has movement capacity, WRA5($DD81) has coordinates for path starting from destination BC, A has travel distance
* 5709-573B ~ Handles selected unit's fuel reduction (NOTICE: mixed number Movement Power requirement is truncated)
* 573C-57AD ~ WRAM Bank #6 map has enemy occupied (bit 1) and ZOC tiles (bit 0) marked (A is enemy's side)
* 57AE-57C1 ~ Zero Flag triggered by Enemy ZOC flag inactive on map tile indicated by HL
* 57C2-57D5 ~ Zero Flag triggered by Enemy Occupation flag inactive on map tile indicated by HL
* 57D6-5906 ~ Controls for Build Unit process (A is Property type)
* 5907-59BC ~ Mercenary Unit purchase window management ending with A = Unit Type Choice
* 59BD-5A0C ~ A = property number value if controlled by active player and within 3 spaces of their Capital; otherwise, A = 0 (BC holds current coordinates)
* 5A0D-5A56 ~ Establishes non-variable text of Build/Call Unit window
* 5A57-5A9C ~ Text: non-variable stuff for Build/Call unit window
* 5A9D-5BC2 ~ Handles variable text of Build/Call Unit window, sets ($C942) 2 byte to Gold Cost / 100G and ($C944) 2 byte to Materials Cost (A is highlighted unit on Build/Call)
* 5BC3-5C16 ~ Handles weapon line at coordinates BC for Build/Call Unit window
* 5C17-5C1E ~ text: 7 blanks
* 5C1F-5C67 ~ A = 1 if not enough Gold, 2 if not enough Materials, 3 if 50 units are available, or 0 if none of the above
* 5C68-5C88 ~ Handles deployment expenditures
* 5C89-5CAF ~ Establishes unit type A's graphics on Build/Call Unit window
* 5CB0-5CC2 ~ A = 1 if direct Unloading can happen, 0 otherwise
* 5CC3-5CCE ~ ($C9D3) emptied, ($CD33) holds number of units Loaded for selected unit, ($CD34) 7? bytes holds units directly Loaded
* 5CCF-5D6B ~ Controls for Loaded Unit selection; ends with A = selected Loaded unit for A Button pressed, -1 for B Button pressed
* 5D6C-5D83 ~ Establishes highlighted loaded unit's stats on stats window, and also holds highlighted loaded unit's stats
* 5D84-5DC6 ~ A = 0 if Loading is happening, 1 otherwise
* 5DC7-5E1D ~ Handles Loading being done
* 5E1E-5E61 ~ Transporting increases the carrier's EXP and changes the cargo's coordinates to the carrier's new coordinates
* 5E62-5E86 ~ Handles unit selection on tile BC
* 5E87-5ED3 ~ Controls for selected unit's stats showing before handling unit commanding; ends with A holding just pressed controls
* 5ED4-5EDE ~ Empties ($C9DD), ($C9DE), and ($C9E5)
* 5EDF-5F09 ~ Before-Movement Command establishing
* 5F0A-5F43 ~ Master control of unit movement
* 5F44-600B ~ Controls for Movement portion of commanding; A = 0 for full confirmation, or -1 for cancellation
* 600C-601D ~ Pointers for controls for movement
* 601E-6095 ~ After-movement Command establishing
* 6096-60A1 ~ Establishes Movement command if unit hasn't already moved; Zero Flag off instead if unit has moved
* 60A2-60BF ~ Establishes Pave command if Pave is valid; Zero Flag off instead if Pave is invalid
* 60C0-60D5 ~ Establishes Supply command if Supply is valid; Zero Flag off instead if Supply is invalid
* 60D6-60F6 ~ Establishes Unload command if direct Loading can happen; Zero Flag off if it can't
* 60F7-610D ~ Establishes Fire command if valid targets exist; Zero Flag off instead if no valid targets
* 610E-6127 ~ Establishes Capture command if Capture is valid; Zero Flag off instead if Capture is invalid
* 6128-6141 ~ Establishes Develop command if Develop is valid; Zero Flag off instead if Develop is invalid
* 6142-615B ~ Establishes Linkup command if Linkup is valid; Zero Flag off instead if Linkup is invalid
* 615C-6175 ~ Establishes Build command if Build is valid; Zero Flag off instead if Build is invalid
* 6176-6193 ~ Establishes Bomb command if Bomb is valid; Zero Flag off instead if Bomb is invalid
* 6194-61AD ~ Establishes Load command if Load is valid; Zero Flag off instead if Load is invalid
* 61AE-61CC ~ Establishes Delete command if Delete is valid; Zero Flag off instead if Delete is invalid
* 61CD-61D9 ~ Establishes Wait command if Wait is valid; Zero Flag off instead if Wait is invalid
* 61DA-6282 ~ Handles after-movement unit commands management; A = 0 for confirmation, -1 for cancellation; Pave forces confirmation
* 6283-63CE ~ Executes Unit Command A; ends with A = 0 for Confirmation, or -1 for Cancellation
** 62C5-62C8 ~ Executes Unload Command, ends with 0 for Confirmation or -1 for Cancellation
** 62C9-62E0 ~ Executes Movement Command, ends with 0 for Confirmation or -1 for Cancellation
** 62E1-62E7 ~ Executes Pave Command, ends with 0 for Confirmation or -1 for Cancellation
** 62E8-62EE ~ Executes Supply Command, ends with 0 unconditionally
** 62EF-6311 ~ Executes Fire Command, ends with 0 for Confirmation or -1 for Cancellation
** 6312-631A ~ Executes Load Command, ends with 0 unconditionally
** 631B-6335 ~ Executes Linkup Command, ends with 0 for Confirmation or -1 for Cancellation
** 6336-6349 ~ Executes Develop Command, ends with 0 for Confirmation or -1 for Cancellation
** 634A-635B ~ Executes Build Command, ends with 0 for Confirmation or -1 for Cancellation
** 635C-6363 ~ Executes Capture Command, ends with 0 unconditionally
** 6364-63B6 ~ Executes Bomb Command, ends with 0 for Confirmation or -1 for Cancellation
** 63B7-63C4 ~ Executes Wait Command, ends with 0 unconditionally
** 63C5-63C9 ~ Executes Delete Command, ends with 0 unconditionally
* 63CF-6436 ~ Unload command as a whole; ends with A = 0 for confirmation, or -1 for full cancellation
* 6437-644D ~ Establishes Unloading unit's base commands if Unloading unit hasn't moved yet
* 644E-6473 ~ A = inverse flag for valid movement onto tile BC
* 6474-648B ~ A = 0 if capture valid, 1 if not
* 648C-6523 ~ Capture process fully handled
* 6524-654F ~ The Smite Tool's process fully handled
* 6550-655A ~ Standby Popup message and sound
* 655B-6566 ~ Graphics transition to Window scrolling up to cover bottom 2.5 on-screen map tiles
* 6567-656D ~ Restores cursor and shuts off window
* 656E-66BE ~ Establishes all text of selected unit's stats window
* 66BF-66F1 ~ Sets "Transport/End Turn" icon of selected unit's stats window
* 66F2-670A ~ Text including coordinates: selected unit's stats window separator, 4 blanks
* 670B-670F ~ Text characters for Levels
* 6710-671F ~ Palettes for selected unit's stats window
* 6720-6731 ~ Sets Attribute Text from HL at coordinates 1 left of BC
* 6732-6735 ~ Palette Text defaults to last one for 3 characters
* 6736-6739 ~ Palette Text defaults to first one for 3 characters
* 673A-67AB ~ Handles text of given weapon's line on selected unit's stats window
* 67AC-67BB ~ Text: 15 character blank
* 67BC-67CA ~ Sets Attribute Text from HL at coordinates BC
* 67CB-67D6 ~ Palette Text defaults to last one for 11 characters
* 67D7-67E2 ~ Palette Text defaults to first one for 11 characters
* 67E3-67FA ~ ($C9E0) 5 byte holds in order: 0, Coordinates, Unit Type, Terrain Type (non-ownership)
* 67FB-6814 ~ Establishes tile ($C9E1)'s entire graphics
* 6815-683A ~ Flashing tile's graphics updated every 15 calls
* 683B-6868 ~ Establishes selected unit's tile's entire graphics, also sets up Unit Type (WRA2) and Transport/End Turn Flags (WRA1) for tile
* 6869-6873 ~ Unit hidden from view of BC coordinates, allowing view of terrain tile
* 6874-6892 ~ Updates any parent unit's stats as necessary, also does finishing tile graphics updating (A is would-be child unit #)
* 6893-689B ~ Sets up tile's graphics with Unit A
* 689B-68F3 ~ Updates tile graphics of unit A's location
* 68F4-693C ~ Updates the graphics of tiles BC and the original starting tile
* 693D-6968 ~ ($C9E8) to ($CA19) holds army's Level values
* 6969-6976 ~ A = Unit #, discounting country
* 6977-69E5 ~ Show any Level Ups resulting from given action
* 69E6-6A22 ~ Reestablishes map graphics
* 6A23-6A85 ~ Map Battle Startup
* 6A86-6B05 ~ Palettes for fully black screen
* 6B06-6B25 ~ Establishes first turn cursor default coordinates and view stats for active player
* 6B26-6CBA ~ Core Gameplay master control
* 6CBB-6CCC ~ Core Gameplay Button instruction pointers
* 6CCD-6CFC ~ Shift view to active player's HQ, or inactive player's HQ if already highlighting the former
* 6CFD-6D17 ~ ($C686) holds Mode music basis
* 6D18-6D1D ~ ($C685) = $3D
* 6D1E-6D5C ~ Victory condition check results in ($CA94) and ($CA95) being set based on victory condition managed
* 6D5D-6D68 ~ Zero Flag on if IR Communication Receiver's turn
* 6D69-6D99 ~ Rout check results in ($CA94) and ($CA95) being set if Rout has happened, or A = 0 if it hasn't
* 6D9A-6DFB ~ A = Map Over Flag; if Day limit exceeded, (CA94) = 1 for White Moon, 2 for Red Star; and ($CA95) = 4
* 6DFC-6E17 ~ A = 1 if map condition for Beginner map is fulfilled, 0 if not
* 6E18-6E37 ~ Pointers for Beginner Map victory conditions
* 6E38-6E6D ~ Beginner Map victory conditions affect Zero Flag
* 6E6E-6ED5 ~ For outside Beginner Mode, given victory type's movie plays out; Day Limit is treated as Yield, most likely explained as morale crash
* 6ED6-6F1D ~ Handles Victory/Defeat screen at end of gameplay session
* 6F1E-6F64 ~ Message about game being ended for IR Communication
* 6F65-6F94 ~ Text including Coordinates: Ended game for IR Communication
* 6F95-6FC9 ~ Handles either unit selection or unit building if that happens on highlighted tile, ending with A = 1 for either; for neither, end with A = 0
* 6FCA-702B ~ Controls holding Start on gameplay map screen
* 702C-706D ~ Briefing Review Screen as a whole
* 706E-7084 ~ Ability to view only terrain by holding Start+Up/Down
* 7085-70CD ~ A holds number of unmoved unit to cycle to, -1 if no units are available (Previous Unit edition)
* 70CE-7116 ~ A holds number of unmoved unit to cycle to, -1 if no units are available (Next Unit edition)
* 7117-7152 ~ A = Next unit's ID #, -1 if no update; ($CA99) updated to next unit's ID #
* 7153-717C ~ ($CA99) has B added to it and modified as necessary to stay within the active player's unit list
* 717D-7205 ~ Establishes Command Menu options
* 7206-7211 ~ Zero Flag set by IR Comm Mode and IR Comm Receiver active
* 7212-7225 ~ Zero Flag set by IR Comm Mode and White Moon active (NOTE: IR Comm Receiver is ALWAYS White Moon)
* 7226-7276 ~ Map Primary Menu master control; ends with 0 for no map graphics restoration needed, 1 for map graphics restoration needed, 2 for map closure, or 3 for Redo OK
* 7277-727E ~ Unit Menu: A = 0 for Deploy Success, 1 otherwise
* 727F-7283 ~ Intel Menu: A = 1
* 7284-7288 ~ Configuration Menu: A = 1
* 7289-7293 ~ Yield Menu: A = Inverse Confirm
* 7294-729E ~ Suspend Menu: A = Inverse Confirm
* 729F-72A6 ~ Save Menu: A = Continue Choice (1 = OK, 2 = NO)
* 72A7-72AB ~ 
* 72AC-72AF ~ End Turn Menu: A = IR Comm partner flag
* 72B0-72B5 ~ Receipt Menu: A = 1
* 72B6-72BA ~ Map Menu: A = 1
* 72BB-72C6 ~ Redo Menu: A = 3 for OK, 0 for NO
* 72C7-7309 ~ Handles Unit Menu Command; A = 0 for Deploy success, or -1 for any other method of ending usage
* 730A-7317 ~ Handles Intel Menu Command
* 7318-7322 ~ Handles Configuration Menu Command
* 7323-733D ~ Handles Yield confirmation screen
* 733E-7358 ~ Handles Suspend confirmation screen
* 7359-737C ~ Handles Save Menu Command; Ends with A = Continue Choice
* 737D-7407 ~ Handles Redo Menu Command; Ends with A = Choice
* 7408-741A ~ Establishes Window Tile 8,2+($C021)%2 with character A

* 743C-7461 ~ End Phase stuff, ending with A = IR Comm partner flag
* 7462-746C ~ Receipt stuff for IR Comm play
* 746D-7485 ~ Resets End Turn flags, increments phase number, sets alert for start of phase stuff
* 7486-74F9 ~ 
* 74FA-7509 ~ General map view graphics update (pretty much happens at the start of given button check loops)
* 750A-7524 ~ Establishes ($CA91) with buttons considered active with camera movement buffer
* 7525-7563 ~ If view will shift right: ($FFAC) 4 byte holds: OR ($FFAC),$82, ($C98B) + 10, ($C98C), 9; if not, general increase to X coordinate within view
* 7564-759B ~ If view will shift left: ($FFAC) 4 byte holds: OR ($FFAC),$81, ($C98B) - 1, ($C98C), 9; if not, general decrease to X coordinate within view
* 759C-75DA ~ If view will shift down: ($FFAC) 4 byte holds: OR ($FFAC),$88, ($C98B) - (($C98C)%2), ($C98C) + 9, 10 + (($C98C)%2); if not, general increase to Y coordinate within view
* 75DB-7612 ~ If view will shift up: ($FFAC) 4 byte holds: OR ($FFAC),$84, ($C98B) - (($C98C)%2), ($C98C) - 1, 10 + (($C98C)%2); if not, general decrease to Y coordinate within view
* 7613-762A ~ Handles Map Menu Command
* 762B-763C ~ ($CA9A) to ($CA9E) set to -1
* 763D-7644 ~ Sets up next table of covered graphics within late WRA4 Bank (BC is starting location relative to scroll, DE is size)
* 7645-7649 ~ Restores last table of covered graphics
* 764A-765C ~ B = (($FF95)/8 + B) % 32; C = (($FF96)/8 + C) % 32
* 765D-766B ~ Establishes faction color palettes in ($C4E0) table (A is number of palettes skipped in table)
* 766C-76A0 ~ (HL ~ HL+63) holds unit map graphics (Unit #)
* 7675-76A0 ~ (HL ~ HL+63) holds unit's map graphics
* 7677-76A0 ~ (HL ~ HL+63) holds terrain's map graphics
* 76A1-76A9 ~ (HL ~ HL+15) = 01:($5268+A*16 ~ $5268+A*16+15) (Terrain tile graphics)
* 76AA-76B2 ~ (HL ~ HL+15) = 01:($5898+A*16 ~ $5898+A*16+15) (Unit tile graphics)
* 76B3-76C8 ~ (HL ~ HL+15) = 01:(DE+A*16 ~ DE+A*16+15)
* 76C9-7702 ~ Establishes unit graphics at HL (A is tile location on character base, B is palette's VRAM bank, C is first palette + 3, D is unit type)
* 76CF-7702 ~ Establishes terrain graphics at HL (A is tile location on character base, B is palette's VRAM bank, C is first palette + 3, D is terrain type)
* 7703-772D ~ Sets HL to next used tile's location (A is already used tiles)
* 772E-775E ~ $CAA1 4 byte holds palettes for tile (B is VRAM Bank, C is first palette + 3, D is terrain/unit type)
* 775F-7762 ~ ? (Unused stuff)
* 7763-77C1 ~ Establishes selected unit stats holder graphics
* 77C2-77DC ~ Handles clear-up of all selected unit info sprites
* 77DD-77FB ~ Sets up selected unit stats holder sprites on right side
* 77FC-781A ~ Sets up selected unit stats holder sprites on left side
* 781B-786B ~ sprite stat modification table for selected unit stats holder
* 786C-786F ~ pointer for just above
* 7870-7888 ~ Given stat's Digit Sprites have coordinates set to B,C and B+8,C
* 7889-789F ~ Establishes base sprite stats for digit, (HL) loaded with sprite number, HL incremented
* 78A0-78B3 ~ pointers to sprite stat modification table pointers for digits
* 78B4-78E5 ~ sprite stat modification tables for digits
* 78E6-7903 ~ pointers to sprite stat modification tables for digits
* 7904-790C ~ Handles clear-up of (HL) and (HL+1)
* 790D-791B ~ Sprites indicated by HL and HL+1 have coordinates set to B,C and B+8,C
* 791C-7929 ~ Sprites indicated by HL and HL+1 have Palette changed to A
* 792A-7971 ~ VRA0($9800 + B + C * 32) holds used digits (3 digit number)
* 7972-79C2 ~ VRA0($9800 + B + C * 32) holds used digits (max of 5 digits)
* 79C3-7A33 ~ VRA0($9800 + B + C * 32) holds active player's Current Gold in text
* 7A34-7A52 ~ (DE) holds ($CC45) if HL < NEG BC, or 129 + trunc(HL / BC) if not; DE incremented
* 7A53-7A8C ~ Sets up box showing active player's current Gold and Materials
* 7A8D-7A97 ~ Text: Gold/Material icons for showing current Gold/Materials available
* 7A98-7A9C ~ Restores last table of covered graphics
* 7A9D-7AB4 ~ Window tiles in starting area covering 20 by A cleared for both VRAM Banks
* 7AB5-7ACA ~ Window tiles in starting area covering 20 by D cleared for active VRAM Bank
* 7ACB-7B00 ~ Establishes view area based on coordinates BC, then cursor's within view and overall coordinates, and finally cursor's sprite grapics location center
* 7B01-7B42 ~ Handles map graphics shift to coordinates BC
* 7B43-7B53 ~ A = 0 if current coordinates is equal to coordinates stored in BC, -1 otherwise
* 7B54-7B6E ~ Handles momentary map graphics shift
* 7B6F-7B97 ~ adds DE to used Gold bytes, caps at 99999. Narrowly avoids a capping bug: 2 Capitals and 98 Cities provide 30200G Income total at max property strength. Otherwise, the byte allowing funds past 65535G is not forced to be 1, allowing an Income value exceeding 31071G to break the cap badly.
* 7B98-7BAF ~ reduces Current Gold if possible, Sets Carry Flag if not possible
* 7BB0-7BCC ~ Carry Flag toggle by not having enough Gold
* 7BCD-7BDB ~ HL = first used available Gold byte
* 7BDC-7BEB ~ HL = available Materials
* 7BEC-7C12 ~ adds DE to used Materials bytes, caps at 999
* 7C13-7C2E ~ reduces Current Materials by cost (DE is cost)
* 7C2F-7C89 ~ establishes all income values
* 7C8A-7C97 ~ property type search data
* 7C98-7CCD ~ ($CAA6) 2 byte reverse = income spanning all 100 properties on the map
* 7CCE-7CF6 ~ if Terrain Type is a valid property type, ($CAA6) 2 byte reverse += ($CAA5)
* 7CF7-7D23 ~ A = 0 for active player's property, 1 for opposing player's property, 2 for neutral property, or 3 for non-property terrain (A = terrain value)
* 7D24-7D32 ~ Zero Flag set by either A = 0, or A and ($C633) are both either odd or even
* 7D33-7D53 ~ A = 0 for viable capture, 1 otherwise
* 7D54-7D6C ~ A = 0 for Plains, Forest, or Moor, 1 otherwise
* 7D6D-7D82 ~ A = 1 for anything other than a Ruined property, 0 for any Ruined property

PALBal:
* 7D83-7D89 ~ HL = A * 8

* 7E00-7E0A ~ Ends Turn of all units Loaded on Selected Unit, including stack-Loaded units
* 7E0B-7E12 ~ Auto-End Turn implementation
* 7E13-7E1A ~ Clearing $C999 during Bomb Command due to shared purpose with Auto-End Turn feature
* 7E1B-7E23 ~ Clearing $C999 during map startup to avoid start of map pseudo-randomness with Auto-End Turn feature
* 7E24-7E2B ~ Clearing $C999 during End Phase to clear all flags

* 7F9B-7F9F ~ Stores High RAM Camera Bytes in A, B, C, and D; version for 3 byte instruction
* 7FA0-7FA9 ~ Standard Frame update; used as compression for providing room for other instructions in HP Display feature
* 7FAA-7FB4 ~ Camera Shift management with HP Display feature
* 7FB5-7FC2 ~ Auto-establishes warning Palette when loading map graphics
* 7FC3-7FE2 ~ General map view graphics update with HP Display feature involved
* 7FE3-7FE7 ~ Map Shift graphics update per column/row with HP Display feature in mind
* 7FE8-7FEF ~ Establishes Tile BC's graphics with HP Display feature's priority management; version for 3 byte instruction
* 7FF0-7FF7 ~ Reestablishes map graphics with HP Display feature
* 7FF8-7FFF ~ Establishes Tile BC's graphics with HP Display feature using primary occupying unit

== Block 13 (030000-034000) ==

* 4000-400B ~ A = 1 if any valid targets exist, 0 otherwise; WRAM Bank 4 ($DBF8) holds any valid targets' IDs
* 400C-406F ~ A holds number of valid targets, ($DBF8) holds valid targets' IDs
* 4070-40C0 ~ A = 0 if unit exists, isn't Loaded or in Reserve, and can be attacked, -1 otherwise
* 40C1-412D ~ A = used weapon's ID, D = secondary weapon check, and E = used weapon's used ATK (added check of ammo) (A is defending unit's Unit Type, B is distance)
* 412E-418E ~ A = used Weapon's ID, D = secondary weapon check, E = used Weapon's used ATK
* 418F-41C0 ~ Fire Command as a whole, including any results if confirmed; ends with A = 0 for confirmation, or -1 for cancellation (BC is attacking unit's coordinates)
* 41C1-42E1 ~ Controls for Fire Command, ending with A = selected target for A Button press, or -1 for B Button press
* 42E2-430E ~ A = used weapon's ID (set to 0 if no ammo), D = secondary weapon check, and E = used weapon's used ATK; if no ammo, Ammo Popup message happens instead
* 430F-4353 ~ Cursor placed on selected unit for selection
* 4354-43A7 ~ Sets up sprite stats for cursor and selected enemy's stats holder
* 43A8-43CE ~ A = 0 if Anti-City weapon is available, 1 otherwise
* 43CF-4487 ~ Fully handles invoked combat (BC is attacker's coordinates, D is attacker's unit #, E is defender's unit #)
* 4488-4555 ~ Attack Summary showcase for combat if Battle Animations is Off
* 4556-4570 ~ Sets characters at Scroll 6~13,7~10 to $80 (unused)
* 4571-4579 ~ Text: all $80 until Break (unused anyway)
* 457A-459A ~ Establishes Attack Summary HP text
* 459B-45EA ~ Iris out on coordinate BC's upper-left quarter
* 45EB-461C ~ Blanks row of map quarter-tiles determined by A
* 461D-464E ~ Blanks column of map quarter-tiles determined by A
* 464F-47A6 ~ Establishes battle stats including damage calculations (D is attacking unit, E is defending unit)
* 47A7-47FF ~ Establishes ATK and DEF stats as well as weapon choices for both attacker and defender
* 4800-4849 ~ ($DBCF) = attacker's Focus value, ($DBE4) = defender's Focus Value
* 484A-4860 ~ A = 10 * trunc(A/10), 1 if result is 0 otherwise; meant to establish Focus value
* 4861-486C ~ A = Terrain's Cover value
* 486D-4883 ~ Cover values (Null, HQ, City, Ruined City, Factory, Ruined Factory, Airport, Ruined Airport, Simple Airport, Harbor, Ruined Harbor, Communication Tower, Plains, Road, Bridge, ?, Mountain, Forest, Moor, Desert, River, Sea, Beach) (guesses)
* 4884-4905 ~ A = Flanked penalty (A is unit #)
* 4906-4911 ~ each 2 bytes is the positions adjacent to the one involved
* 4912-4918 ~ Flanked penalty values
* 4919-4990 ~ A and ($C944) = Support boost
* 4991-499C ~ digs up used Level value
* 499D-49A1 ~ Level values (Ranks D to A then S)
* 49A2-49CB ~ HL = Attack mutiplier with L using the float portion (A, B, and C use Support, Level, and Flank values respectively)
* 49CC-49FB ~ HL = Defense multiplier with L using the float portion (A, B, and C use Cover, Level, and Flank values respectively and get halved and truncated in the process)
* 49FC-4A20 ~ HL = Stat * HP * Multiplier; Float error results in slight decrease if the intended multiplier doesn't divide by 0.25 into a whole number
* 4A21-4A25 ~ HL = 2 * Stat * HP * Multiplier; Float error results in slight decrease if the intended multiplier doesn't divide by 0.25 into a whole number
* 4A26-4A97 ~ calculates new HP for attacker's unit, rounds up, range from 0 to old HP
* 4A98-4B09 ~ calculates new HP for defender's unit, rounds up, range from 0 to old HP
** Total ATK is calculated with 49FC, multiplier uses 49A2 and Stat is ATK
** Total DEF is calculated with 4A21, multiplier uses 49CC and Stat is DEF
** New HP is (Total DEF - Total ATK) / (2 * DEF)
** Default to 0 and end procedure immediately if result is negative, round up, and then default to Old HP if result exceeds it
** Effective damage formula is as follows: ATK * Attacker's HP * (100 + ATK boosts) / (200 * DEF) - DEF boosts * Defender's HP / 200. Truncation is only done after full damage is calculated.
* 4B0A-4B66 ~ calculates New HP values for both sides using attack order
** 4B18-4B34 ~ Attacker's Focus 10s digit exceeds Defender's
** 4B35-4B51 ~ Defender's Focus 10s digit exceeds Attacker's
** 4B52-4B65 ~ Focus 10s digit is equal for both sides; old HP is used for both players
* 4B67-4BBF ~ hardcodes ammo reductions and participation EXP
* 4BC0-4BD4 ~ hardcodes attacker's Ammo reduction and participation EXP
* 4BD5-4BE9 ~ hardcodes defender's Ammo reduction and participation EXP
* 4BEA-4BFB ~ hardcodes the Ammo reduction from battle
* 4BFC-4C26 ~ hardcodes participation EXP. 2 EXP for (counter)attacking, 1 EXP for defending against an attack.
* 4C27-4C6F ~ hardcodes damage-related EXP for both sides. Formula is (Damage Done + Kill Coefficient) * Underdog Coefficient. Kill Coefficient is 1 if the opposing unit is defeated, 0 otherwise; Underdog Coefficient is 2 if the opposing unit is defeated AND the victorious unit has lower ATK, 1 otherwise.
* 4C70-4D23 ~ Battle forecast controls
* 4D24-4D50 ~ Establishes both sides' attack order text for battle forecast
* 4D51-4D5C ~ Establishes given side's attack order text for battle forecast
* 4D5D-4D9E ~ Establishes given side's numbers text for battle forecast
* 4D9F-4DB2 ~ basic battle forecast text pointers
* 4DB2-4E09 ~ basic battle forecast text, sets up Coordinates first
* 4E0A-4E11 ~ attack order text pointers (invalid, same time, first, second)
* 4E12-4E25 ~ attack order text (first, second, same time, invalid)
* 4E27-4E52 ~ A = Attacker's HP loss * 16 + Defender's HP loss
* 4E53-4E65 ~ VRA1($8000 ~ $824F) = ($53C6 ~ $5615)
* 4E66-4E84 ~ Establishes explosions' sprite palettes
* 4E85-4ECA ~ Handles unit loss animation where needed for each unit starting with attacker
* 4ECB-4F39 ~ Unit loss animation and handling (A is unit #)
* 4F3A-5028 ~ Controls for Bomb command, end with A = 0 for full confirmation, or -1 for cancellation (A = Unit # of unit wanting to do bombing) (NOTICE: Anti-Ship Missile's range is hard-coded with this process. Twice.)
** 4F87-4FC0 ~ Anti-City Missile Fire Valid Flag updated as well as graphics
* 5029-504E ~ Surrounding area cursor for Anti-City weapon firing confirmation, A = 0 for A Button press, -1 for B Button press
* 504F-508A ~ Anti-City weapon's full effect on tile BC and its surrounding tiles and their involved units, primary weapon ammo decremented, A = total HP damage by bombing
* 508B-5105 ~ Anti-City weapon's full effect on tile BC and its involved unit
* 5106-512D ~ A = HP damage done by Anti-City weapon
* 512E-5137 ~ Table: HP damage values to unit by Anti-City weapon
* 5138-5146 ~ Anti-City weapon's terrain attack procedure
* 5147-5162 ~ Anti-City weapon's effect on HQ or Communication Tower
* 5163-519D ~ Anti-City weapon's effect on non-ruined property
* 519E-51BD ~ Anti-City weapon's effect on Simple Airport
* 51BE-51C1 ~ Anti-City weapon's effect on Forest
* 51C2-51EE ~ Anti-City weapon's effect on Bridge
* 51EF-51F0 ~ Anti-City weapon's effect on Plains/Road (start)
* 51F1-51FB ~ Anti-City weapon's terrain change for given terrain including Plains/Road
* 51FC-521E ~ A = -15 for Bomber, -25 for Mercenary Missile Frigate or Submarine+, 0 otherwise
* 521F-522A ~ designated ruined properties for bombing
* 522B-5258 ~ pointers for instructions for each terrain type for Anti-City weapon
* 5259-5272 ~ Sets up explosion sprite (DE is pointer to sprite stats modification tables pointers)
* 5273-52A5 ~ Defaults sprite A graphic coordinates to center of tile BC
* 53C6-5615 ~ graphics for explosions
* 5626-567B ~ sets all base properties' Strength and coordinates within WRAM Bank 1
* 567C-5696 ~ Sets property's stats (A = Property type, BC = coordinates, E = number of prior properties)
* 5697-56D4 ~ Establishes new property using first WRA1($DD81) slot (BC holds coordinates of new property)
* 56D5-5704 ~ Establishes general changes of removal of property at BC
* 5705-571A ~ A = Total property count
* 571B-57F9 ~ Opens Property Strength showing of highlighted property ending with A = 0; simply ends with A = -1 if there is none
* 57FA-57FB ~ would-be coordinates for just below
* 57FC-580D ~ basic meter graphics bytes
* 580E-5827 ~ Property Strength Meter graphics established (A is fill amount)
* 5828-5835 ~ sets meter graphics in (HL) 128 byte
* 5836-5876 ~ Meter graphics established (A is fill value, B is max value, C is first used potential character, HL is meter starting location)
* 5877-5882 ~ Meter graphics modification values
* 5883-5886 ~ A = Property's Strength for matching property, -1 if there is none
* 5887-58A2 ~ If property exists, WRA1($DD81 + Property # * 3) = A
* 58A3-58AE ~ A = max Property Strength
* 58AF-58B9 ~ A = initial Property Strength
* 58BA-58C0 ~ Compares Current Property Strength to max Property Strength
* 58C1-58D0 ~ compares A to max Property Strength
* 58D1-58F1 ~ adds A to Property Strength while staying within range
* 58F2-592A ~ Show Property Strength update for given task on Property (A is increase amount)
* 592B-5959 ~ A = Property's Strength for matching property, -1 if there is none
* 595A-5983 ~ A = matching Property, -1 if there is none (seems to be unused)
* 5984-599B ~ property Strength data (listed in pairs for each property type, with initial Strength first, and max Strength second)
* 599C-59B3 ~ property Name pointers
* 59B4-59FA ~ property Names
* 59FB-5B2A ~ property meter graphics
* 5B43-5B5A ~ ($C548) to ($C547 + B * 8) hold (HL) to (HL + B * 8 - 1); Sprite Palette tables updated with frame advance as well as water tile graphics update paused
* 5B5B-5B6B ~ Tile Pop Out sprite plays out
* 5B6C-5B74 ~ Tile Iris In sprite plays out
* 5B75-5B85 ~ Factory Gate Close sprite plays out
* 5B86-5B8E ~ Factory Gate Open sprite plays out
* 5B8F-5B9F ~ Tile Iris Out sprite plays out
* 5BA0-5BA8 ~ Tile Pop In sprite plays out
* 5BA9-5BC7 ~ Unit deployment sprite graphics setup
* 5BC8-5BE5 ~ Sets up unit deployment sprite's animation first half with DE indicating location of used modification tables
* 5BE6-5BFE ~ Has unit deployment sprite's animation second half play out with DE indicating location of used modification tables
* 5BFF-5C13 ~ Sprite ($C9A9) plays out up to its last portion
* 5C14-5C23 ~ Force advances the game by A frames
* 5C24-5C68 ~ Linkup Star sprite animation plays out
* 5C69-5C89 ~ Sets up Linkup Star sprite
* 5C8A-5C9A ~ DE = $612D + A * 64
* 5C9B-5CC7 ~ Sets up Linkup command data of which unit is receiving, which is giving, and how much HP is being transferred
* 5CC8-5CFD ~ Sets up Direction # of Linkup Star
* 5CFE-5D31 ~ Handles Star sprite's movement by sqrt(4~5) pixels in overall direction per 3 frames for 27 frames
* 5D32-5D3D ~ table of pixels/3 frames for Star to move in each direction, sorted by relative coordinates
* 5D3E-5D93 ~ HP Change popup bubble sprite animation (A is HP increase amount)
* 5D94-5DAA ~ DE holds pointer to HP change bubble sprite stats modification table pointers (A is HP increase amount)
* 5DBB-5DFE ~ Handles ($C9A9) sprite shaking for 17 frames
* 5DFF-5E0A ~ A holds Y decrease involved for given frame of shaking for involved sprite
* 5E16-5E70 ~ "YIKES!" Sprite animation
* 5E71-5ECB ~ "Level Up!" Sprite animation
* 5ECC-5F06 ~ Defaults coordinates of popup bubble (A is used popup bubble)
* 66BB-66FD ~ Action Animation cutscenes play out where applicable (A is 4 for Fire/Linkup/Wait, or the number of the given process otherwise)
* 66FE-6710 ~ A is intended process, ($C4A0) bytes set
* 6711-6732 ~ Iris out on cursor coordinates and then play intended portion determined by A
* 6747-678E ~ A = inverse of winning property on ($C991); ($C4A1) holds backdrop of terrain; ($C4A2) holds ownership
* 679E-67A3 ~ A = 2; ($C4A1) holds backdrop of terrain; ($C4A2) holds ownership
* 67A4-67C2 ~ ($C4A1) = Unit Type of first supplier, ($C4A2) = Unit Type of given unit (no side for both), A = 3
* 67C3-67F3 ~ ($C4A1) = Unit Type of given unit, ($C4A2) = Unit Type of Loading unit for not Aircraft Carrier (no side for both), A = 7 for Aircraft Carrier Loading, 4 for non-Aircraft Carrier Loading
* 67F4-6803 ~ A = 6 for Aircraft Carrier, 5 for other; ($C4A1) = Unloading unit's type; ($C4A2) = Carrying unit's type (no side)
* 6804-6837 ~ ($C9B0) = Unit Type of given unit, ($C9B1) = Unit Type of Loading unit for not Aircraft Carrier (no side for both), A = 6 for Aircraft Carrier Loading, 5 for non-Aircraft Carrier Loading, ($C9AF) = 6 if Loading unit is Aircraft Carrier
* 6838-683F ~ A = 2, ($C4A1) = 6
* 6840-684D ~ A = 2, ($C4A1) = 5, ($C4A2) = ($C4A0)
* 684E-685B ~ A = 2, ($C4A1) = 9, ($C4A2) = ($C4A0)
* 685C-6863 ~ A = 2, ($C4A1) = 7
* 6864-6866 ~ A = 8
* 6867-6905 ~ Campaign Mode concepts discussion handling as a whole
* 6906-690D ~ Pointers to News from Command condition check procedures
* 690E-6927 ~ Repeats "News from Command" popup 3 times
* 6928-6933 ~ A = 0 if any units are in reserve, 1 otherwise
* 6934-694D ~ A = 0 if any units can promote, 1 otherwise
* 694E-6965 ~ A = 0 if any Communication Towers are on the map, 1 otherwise
* 6966-6982 ~ A = 0 for any units in Reserve and any Badges available, 1 otherwise
* 6983-699D ~ ($C9B5) set to active player's side, ($C630) set to 1 (seems to be unused)
* 6A62-6A7B ~ ($C61E) = 0, ($C61F) = 208, ($C620) = 0, ($C621) = 16, ($C61E) = 7
* 6A7C-6AAF ~ WRA7 as a whole holds temporary map data (Receive SRAM $0D data)
* 6AB0-6AFF ~ Send temporary map data to IR Comm Receiver as SRAM $0D data
* 6B44-6B76 ~ A = 1 if unit is already supplied or resupply/repairing isn't happening; 0 otherwise
* 6B77-6BD9 ~ Supply command as a whole, property takes priority over unit for resupply source
* 6BDA-6C1A ~ A = 0 if (full) resupplying is valid, 1 if not (A is Unit #)
* 6C1B-6C5B ~ A = 0 if (full) repairing is valid, 1 if not (A is Unit #)
* 6C5C-6CBF ~ A = 0 if supplying can happen, 1 otherwise; ($CD3A) to ($CD40) set up if unit not Loaded (A is Unit #)
* 6CC0-6D06 ~ A = 0 if (full) repairing can be done for Loaded Air unit, 1 otherwise (A is Unit #)
* 6D07-6D39 ~ A = 0 if (full) resupplying can be spent on, 1 if not
* 6D3A-6DA2 ~ A = Materials Cost, DE = Gold Cost (resupplying for both) (BUG: $6D5F 3 byte should be FA 04 CD to use secondary weapon's pricing, not primary weapon's pricing)
* 6DA3-6DD5 ~ A = 0 if (full) repairing can be spent on, 1 if not
* 6DD6-6E2A ~ A = Materials Cost, DE = Gold Cost (repairs for both)
* 6E2B-6E57 ~ A = HP repair amount; Property's Strength / 10 is rounded up
* 6E58-6EB6 ~ Handles property resupply and repair of unit A
* 6EB7-6F56 ~ Handles resupply and repairs by unit of unit A
* 6F57-6F6F ~ Gold and Materials both reduced by respective costs
* 6F70-6F7C ~ Empties ($C949) to ($C988)
* 6F7D-6F99 ~ If unit type A can be carried by Aircraft Carrier, ($C949) 2 byte holds Aircraft Carriers
* 6F9A-6FEA ~ ($C949) 3 byte holds viable repair points for unit type A
* 6FEB-7021 ~ ($C949) et al stores units capable of resupplying unit type represented by A
* 7022-7077 ~ ($C949) holds viable resupplying property types for unit type A
* 7078-70CC ~ A = inverse of ability to Pave starting or adjacent tile
* 70CD-70E5 ~ A = 1 if Plains, 2 if Forest or Moor, 0 otherwise
* 70E6-7142 ~ Establishes Movement for Pave Command
* 7143-7217 ~ Establishes Movement tile data for Pave Command (BC is starting tile)
* 7218-7220 ~ HL = $DE00 + A * 2
* 7221-725E ~ A = 0 if tile BC can be traversed without problem, 1 otherwise
* 725F-72B3 ~ Pave Command playing out upon confirmation
* 72B4-72DD ~ Phase end cursor defaulting with accommodating sounds, ($CA97) defaulted to 1
* 72DE-73A4 ~ Handles start of phase Fuel Check as a whole

* 7430-745D ~ handles Income increases
* 745E-74F2 ~ New phase card animation
* 74F3-7502 ~ Subtracts 4 from Sprite A's X Coordinate
* 7503-7572 ~ Start of phase resupply/repair
* 7573-75E2 ~ Establishes all sprites for new phase card
* 75E3-7600 ~ Establishes new phase card's Day Digit sprite, with A being Sprite # (A%16 is digit value)
* 7623-7668 ~ Establishes start of phase card graphics data

* 7B89-7BF1 ~ Controls for Reserve Unit Summoning; ends with A = 0 for success with A Button press, or -1 for B Button press (A = Unit #)
* 7BF2-7C1F ~ Updates Cursor Sprite as necessary based on cursor coordinates' location
* 7C20-7C69 ~ Unit summoning by Summon or from Reserve
* 7C6A-7C83 ~ A = inverse of deployment validity on coordinates BC with given unit
* 7C84-7CB3 ~ A = Repair property base ID, with Factory taking precedence for the Work Car and Supply Truck
* 7CB4-7D0B ~ Controls for Summon Map Menu Command; A = -1 for B Button press, or 0 for A Button press with success allowed by ANY valid movement tile--Hello, Mercenary Missile Frigate on a map without a Harbor (A is Unit #)
* 7D0C-7D39 ~ A = 1 if occupied; -1 if movement impossible; or 0 if neither (BC holds coordinates)
* 7D3A-7D67 ~ Updates Cursor Sprite as necessary based on cursor coordinates' location

PALBal:
* 7D68-7D6D ~ Attacker's Cover value set to 30
* 7D6E-7D73 ~ Defender's Cover value set to 30
* 7D74-7D79 ~ Attacker's Flank value cut in half (A is Attacker's Flank value)
* 7D7A-7D82 ~ Defender's Support value cut in half (A is Defender's Support value)
* 7D83-7D9F ~ Bomb weapon friendly fire check (1st byte used to set E to A; A is Damage Done, D is target unit's ID #)
* 7DA0-7DA7 ~ Kill EXP Bonus of 32 (A is target unit's HP used to check for death flag; L is EXP so far)
* 7DA8-7DAF ~ Spaghetti Code for above
* 7DB0-7DE4 ~ Pave Command EXP
* 7DE5-7DEA ~ HL = A * 4
* 7DEB-7E19 ~ Range Fire penalty calculation
* 7E1A-7E23 ~ DE = min(A,30); effectively used to cap Property healing benefit to avoid graphical glitch
* 7E24-7E2B ~ Attacker Focus bonus of 15 (E is Attacker Focus)
* 7E2C-7E48 ~ E = Attacker's ATK x (40 + Level boost) / 40
* 7E49-7E65 ~ E = Defender's ATK x (40 + Level boost) / 40

* 7F00-7F0B ~ Resets Reserve Check Done Flag for Auto-End Turn feature; used by Summon/Reserve procedure

* 7F80-7FD4 ~ Terrain Text

== Block 14 (034000-038000) ==

* 4000-4032 ~ AI general procedure: Attempt to have any range fire units move and attack
* 4033-4096 ~ AI's attempt to attack where possible (for some reason, the attacker being carried at the start would skip attacking)
* 4097-40C5 ~ AI general procedure: Attempt to have any direct fire units move and attack
* 40C6-4105 ~ AI Direct Attack Decision management
* 40F8-4105 ~ Movement to Coordinates at ($CCDE) (likely unused)
* 4106-41A5 ~ A = 1 if no valid targets; 2 if any valid targets, with ($C5E7) holding highest priority unit type target and ($C5E8) holding "best" tile to attack from (indirects)
* 41A6-41BA ~ A = -1 if no bytes from initial HL to the first byte set to 0 has initial A; otherwise, A = number of bytes before the first byte set to initial A starting at initial HL
* 41BB-428E ~ Priority establishment (priority of air units if Air ATK is around) with A = 2 for any valid targets, 1 otherwise
* 41C2-428E ~ Priority establishment (surface units) with A = 2 for any valid targets, 1 otherwise
* 41CC-428E ~ Priority establishment (air units) with A = 2 for any valid targets, 1 otherwise
* 428F-42EB ~ A = relative space for attacker dealing most HP damage to defender, -1 if no damage will happen
* 42EC-4310 ~ surface targets for direct fire unit
* 4311-4320 ~ air targets for direct fire unit
* 4321-43B6 ~ AI's attempt to move closer to the opponent's HQ
* 43B7-4406 ~ BC holds coordinates of closest enemy unit on same land mass as selected unit
* 4407-4425 ~ Handles full movement and action of AI unit based on provided information
* 4426-4433 ~ Pointers to procedures of AI unit actions
* 4434-446A ~ Movement animation and stat changes of (AI) unit
* 446B-449E ~ Selected (AI) unit's movement done updates
* 449F-44A4 ~ Sound #18 played and nothing else (AI unit won't do anything)
* 44A5-44A9 ~ AI's Capture process fully handled
* 44AA-44B5 ~ AI's Develop process fully handled (BUG: no EXP established)
* 44B6-44B9 ~ AI's combat invocation
* 44BA-44C5 ~ AI's Bridge Building process fully handled
* 44C6-44E0 ~ AI's Bomb process fully handled
* 44E2-44ED ~ AI's Loading process fully handled
* 44EE-450F ~ AI's combat invocation from "best" tile BC
* 4510-4545 ~ Coordinates update committal
* 4546-4586 ~ Unit shifting update with viable movement momentarily established
* 4587-45BD ~ Unit shifting update, silence version
* 45BE-462E ~ Animation shows movement of active (AI) unit (BUG: Zone of Control isn't considered blocked off in animation.)
* 462F-463F ~ Movement to coordinates BC shown ending with "Standby" popup message
* 4640-4647 ~ Movement to unit's coordinates shown ending with "Standby" popup message
* 4648-4653 ~ Resupply selected unit and gathers their stats
* 4654-4664 ~ Selected (AI) unit Captures property at BC
* 4665-4675 ~ Selected (AI) unit Develops property at BC
* 4676-4689 ~ Handles movement toward transport to move onto
* 468B-469B ~ Selected (AI) unit Bombs at BC
* 469F-46B5 ~ Bridge Building by AI at BC
* 46B6-471C ~ A = Attacker's HP loss * 16 + Defender's HP loss (BC is destination; starting position comes from ($C6D9))
* 471D-4748 ~ AI's combat invocation
* 4749-47AF ~ A holds target that will take the highest "efficient" damage; -1 if there are no targets that will deal excess counterdamage or take no damage
* 47B0-47D0 ~ A = inverse of attacker takes less/equal damage or KOs defender
* 47D1-481E ~ $C5F4 holds flags of potential valid targets for given unit
* 481F-489D ~ Various: ($C602) both weapon flags; ($C603) primary flags; ($C604) secondary flags if secondary is ranged; ($C606) primary weapon Range; ($C607) secondary weapon Range
* 489E-48C5 ~ A = Flags (Range Fire, Direct Fire, ?, Sub ATK, Ship ATK, Air ATK, Lite ATK, Armor ATK), H = Max Range, L = Min Range
* 48C6-48E4 ~ A = Viable targets flags
* 48E5-492D ~ ($C5FB) has flags set for valid targets from viable movement points
* 492E-4964 ~ ($C5FB) has flags set for valid targets from space BC
* 4965-496F ~ bit (A - ($C9A3)), ($C5FB)
* 4970-497A ~ set (A - ($C9A3)), ($C5FB)
* 497B-499C ~ A = space difference if within range, -1 if not
* 499D-4A06 ~ BC holds coordinates of highest Cover value tile valid for attack with repair validity treated as +100 Cover
* 4A07-4A34 ~ A = Unit's Cover value + 100 * repair validity
* 4A35-4A3B ~ HL = (2A + $4A43) (used for range unit types' target priority)
* 4A3C-4A42 ~ HL = (2A + $4AF9)
* 4A43-4AAA ~ range unit types' target priority list pointers
* 4AAB ~ blank list
* 4AAB-4ABC ~ armor targets for range unit
* 4ABD-4ADF ~ land targets for range unit
* 4AE0-4AEF ~ air targets for range unit
* 4AF0-4AF8 ~ sea targets for range unit
* 4AF9-4B60 ~ unit types' list pointers for unknown purpose
* 4B62-4B6E ~ 1st unknown purpose list with entries, involves Lite Land units, would be used by the infantry
* 4B70-4B8F ~ 2nd unknown purpose list with entries, involves vulnerable non-sea units, would be used by the Anti-Air Tanks
* 4B91-4BE0 ~ ($DD80) WRAM Bank #2 tables viable captures
* 4BE1-4BE4 ~ Shuts off Viable Capture Flags for any properties within 3 spaces of BC
* 4BE5-4C2E ~ Shuts off Viable Capture Flags for any properties within 3 spaces of BC
* 4C2F-4C4E ~ A = Inverse of Viable Capture flag active
* 4C4F-4CC9 ~ BC holds coordinates of lowest Property Strength of viable capture property in movement range--tiebreaker of Movement requirement, then N/W location
* 4CCA-4D39 ~ BC = coordinates of closest allowed capture property on land mass--tiebreaker of location
* 4D3A-4D98 ~ BC holds coordinates of lowest Property Strength of viable development property in movement range--tiebreaker of Movement requirement, then N/W location
* 4D99-4E27 ~ BC = coordinates of "closest" allowed capture property that is reachable--tiebreaker of location (BUG: rounds down by every 16 spaces)
* 4E28-4E4E ~ A = Work Car's Materials cost for Develop command
* 4E4F-4E52 ~ CALL 4E94
* 4E53-4E93 ~ AI general procedure: build units
* 4E94-4EE3 ~ Sets up AI build possibilities and demand
* 4EE4-4EF1 ~ List of values for certain units indicated by table at HL handled with $4EF2 stuff as many times as necessary
* 4EF2-4F14 ~ Given allowed unit marked by A has respective $DDB5 address set to demanded unit count, $DDED incremented with its respective $DDEE 2 byte address holding Unit Type and Demanded Count
* 4F15-4F1E ~ A = A/2; B = max(4,A/2)
* 4F1F-4F46 ~ Grunt: 5 for 70+ Properties, min(4,trunc(Properties/8)+1) otherwise; Bazooka: half of Grunt's value rounded down
* 4F47-4F57 ~ A = map's total property count
* 4F58-4F6F ~ Transport Helicopter: ($DEA1)/2 to a minimum of 4; Transport Plane: same
* 4F70-4F9E ~ Reachable by sea: Lander: 4; reachable by land and sea: APC/IFV: Grunt's Value / 2
* 4F9F-4FB4 ~ If enemy HQ is reachable by land: APC: 2; IFV: 3
* 4FB5-4FBD ~ Work Car: 3
* 4FBE-507C ~ Air unit build demand counts discounting transports
* 507D-5125 ~ Sea unit build demand counts discounting Lander
* 5126-5185 ~ Land unit build demand counts discounting transports
* 5186-51B7 ~ Check for building: Work Car, Grunt, Bazooka, APC, Lander, Transport Helicopter, Transport Plane
* 51B8-51F1 ~ 3 attempts by the AI to build each type of combat land vehicle, with anti-air units given top priority if at least 2 air units are fielded against the AI
* 51F2-51FB ~ Build priority order for combat land vehicles other than APC
* 51FC~5205 ~ Build priority order for combat land vehicles other than APC with anti-air units given top priority
* 5206-5207 ~ Build Supply Truck (unused)
* 5208-5239 ~ AI attempts to build air units
* 523A-524D ~ Build prioirty orders for combat air units
* 524E-527F ~ AI attempts to build sea units
* 5280-528D ~ Build priority orders for combat sea units
* 528E-52C3 ~ WRAM Bank #2 ($DD81) to ($DDB4) holds available units of each type for active player
* 52C4-5335 ~ WRA2($DE57) to ($DE8F) established with Fielded unit counts; ($DE8B) holds Land, non-Fighter Air, Fighter, Ship, Subs (BUGGED: will not count the last intended unit type of ANY group for the ($DE8B) stuff)
* 5336-535E ~ ($DDE9) 4 byte holds counts of: AI Helicopters, AI Planes, AI Ships, AI Land units (BUGGED: will not count the last intended unit type of ANY group; ?: Subs not included)
* 535F-5373 ~ Number of given units Fielded (EXECUTION BUGGED: calling portions will not count the last intended unit type in the group)
* 5374-5388 ~ Number of given AI units (EXECUTION BUGGED: calling portions will not count the last intended unit type in the group)
* 5389-53B8 ~ A = inverse of unit purchase desire
* 53B9-53D4 ~ Attempts to build AI unit type A until done
* 53D5-53EE ~ Attempts to build AI unit type A once
* 53EF-5450 ~ BC holds coordinates of first available property, HQ taking priority as necessary
* 5451-5481 ~ A = Property type for deploying unit, -1 if invalid
* 5482-54A7 ~ A = inverse of deployment on property type B validity
* 54A8-54EF ~ AI unit type A's building handled at coordinates BC
* 54F0-550B ~ AI's unit count for type incremented
* 550C-55C7 ~ tables for AI's desired unit counts (first number is unit type, second is desired count)
* 55C8-55F1 ~ AI general procedure: repair and resupply units as deemed necessary and feasible
* 55F2-5629 ~ A = 1 for Aircraft Carrier healing validity/necessity, useless results otherwise
* 562A-569D ~ Manage Unit A repair; A set to 1 on necessity and possibility
* 569E-571F ~ Manage Unit A resupply
* 5720-573B ~ A = 1 if repairs valid and unit's HP < 7; 0 otherwise
* 573C-5749 ~ A = 1 if HP < 4, 0 otherwise
* 574A-578C ~ A = 1 if Fuel < Movement Power * 2, or if Materials or both weapons are dry; 0 otherwise
* 578D-5841 ~ A = 0 if tile is reachable within 1 Day, BC holds coordinates of nearest viable repair property
* 5842-588E ~ BC = 65535 if active unit is non-Lander transport and there are no Aircraft Carriers to load onto; otherwise, BC holds coordinates of first available Aircraft Carrier
* 588F-58A1 ~ A = 0 if property can't repair, Terrain Type if it can
* 58A2-58F1 ~ SRAD($A000) table holds total Movement requirements from destination % 16 * 16, SRAD($B000) table holds same / 16 (BC is destination)
* 58F2-590E ~ HL = $A000 + B + C * 64, ($FF99) and ($FF9A) emptied, ($DE00 + ($FFA2) * 2) 2 byte = BC, ($FFA2) += 1
* 590F-5927 ~ ($FF99) = ($A000 + B + C * 64), ($FF9A) = ($B000 + B + C * 64)
* 5928-593C ~ HL = $A000 + B + C * 64, ($A000 + B + C * 64) = E, ($B000 + B + C * 64) = D
* 593D-599A ~ A = 1 if terrain impassable or ($FF99) 2 byte + Movement Cost => ($B000 + B + C * 64) * 256 + ($A000 + B + C * 64); 0 otherwise
* 599B-59D3 ~ Surrounding tiles of BC set up to be treated as invalid stopping points
* 59D4-5A85 ~ BC holds either first River along the way, or -1; $A000 table has Movement requirements established
* 5A86-5AC1 ~ ($DE9C) 4 byte holds default landing points, ($DEA0) bit 2 holds enemy HQ reachable by sea flag
* 5AC2-5B19 ~ BC holds coordinates of Harbor closest to active player's HQ
* 5B1A-5B89 ~ BC holds coordinates of traversible tile on enemy HQ's land mass closest to enemy HQ
* 5B8A-5BB4 ~ Movement data set up based on Unit A
* 5BB5-5C41 ~ BC = coordinates of destination tile determined by pathfinding for unit to general destination
* 5C42-5CBB ~ ($C60C) = Number of sets of land with properties, SRAC $A000 table establishes sets of land with properties
* 5CBC-5CBF ~ ($DE00 + ($FFA2) * 2) 2 byte = BC, ($FFA2) += 1
* 5CC0-5D05 ~ A = 1 if terrain is Sea or tile is already marked on $A000 table; 0 otherwise; for unmarked land, tile marked with ($FF99), ($FF9A) incremented by property
* 5D06-5D2A ~ Marks all tiles of land mass on $A000 table to -1 (A is land mass)
* 5D2B-5D55 ~ A = 1 if BC location not on same land mass as DE location; 0 otherwise
* 5D56-5D9B ~ A = weapons flags (MSB to LSB: Range Fire, Direct Fire, ?, Sub ATK, Ship ATK, Air ATK, Lite ATK, Armor ATK) set by any available weapons with Direct Fire
* 5D9C-5DB4 ~ BC holds inactive player's HQ coordinates
* 5DA5-5DB4 ~ BC holds active player's HQ coordinates
* 5DB5-5DE6 ~ A = 0 if ending Movement command on tile is valid, 1 otherwise
* 5DE7-5E27 ~ ($C60F) to ($C612) holds: unit x/y coordinate - Movement Power, then unit x/y coordinate + Movement Power, all 4 bytes minimize/maximize to stay within the map
* 5E28-5E6A ~ Handles movement onto transport including Loading animation if transport is directly available to move onto and unit isn't already being carried, with A = 1; otherwise, A = 0
* 5E6B-5E74 ~ Unit A's Transport Capacity
* 5E75-5EC5 ~ Zero Flag set by any terrain other than Mountain or water for non-sea, or by Harbor for sea
* 5EC6-5EEE ~ Parent Loading Valid flag established for Unit A (unused)
* 5EEF-5F0B ~ Unfinished instruction involving accessing enemy HQ by land
* 5F0C-5F3D ~ AI general procedure: Air transport movement
* 5F3E-5F73 ~ Active Unit movement toward inactive player's HQ if reachable and any transport concerns are covered
* 5F74-5FDA ~ Unit Status: bit 4 active if within 5 spaces of HQ, on non-Mountain/water for non-sea, Harbor for Sea, and isn't at Transport Capacity; bit 5 active if within 5 spaces of HQ, on non-Mountain/water for non-sea, Harbor for Sea, and is Transporting at Capacity
* 5FDB-5FEB ~ or b, (res 4/5, Unit's Status)
* 5FEC-5FEF ~ BC hold active player's HQ ($5DA5 stuff)
* 5FF0-6004 ~ Unit A movement toward inactive player's HQ if reachable
* 6005-602C ~ AI general procedure: Lander movement
* 602D-6062 ~ Active Unit movement toward Beach/Harbor nearest inactive player's HQ if reachable and any transport concerns are covered
* 6063-60C5 ~ Unit Status: bit 4 active if within 5 spaces of HQ, on non-Mountain/water for non-sea, Harbor for Sea, and isn't at Transport Capacity; bit 5 active if within 5 spaces of HQ, on non-Mountain/water for non-sea, Harbor for Sea, and is Transporting at Capacity
* 60C6-60D6 ~ or b, (res 4/5, Unit's Status)
* 60D7-60DF ~ BC set to Harbor nearest enemy HQ
* 60E0-60F9 ~ Movement toward Beach/Harbor nearest enemy HQ if possible
* 60FA-6182 ~ Unit marked by ($C5EB) aims for closest available transport
* 6183-6234 ~ AI general procedure: Bridge building efforts
* 6235-623B ~ AI general procedure: Captures by foot soldiers
* 623C-623F ~ Foot soldier list
* 6240-62AC ~ Foot soldier procedure: Capture and "efficient" combat where possible, Capture takes priority
* 62AD-62B3 ~ AI general procedure: Development by Work Cars
* 62B4-62B5 ~ Work Car "list"
* 62B6-6324 ~ Work Car procedure: Development and "efficient" combat where possible, Develop takes priority
* 6325~632B ~ AI general procedure: Bombing by Bombers
* 632C-632D ~ Bomber "list"
* 632E-638E ~ Bomber procedure: Bomb where possible
* 638F-63E4 ~ BC = Destination within movement range for Bombing based on enemy property count; tiebreaker S/E
* 63E5-6442 ~ BC = Destination overall for Bombing based on enemy property count; tiebreaker S/E
* 6443-6471 ~ A = number of enemy properties at location and surrounding tiles
* 6472-64AE ~ Units within list indicated by HL given instructions to manage movement procedures
* 64AF-64BC ~ A unchanged if there is a match with any entry in WRA2($DE90) list, A = 0 otherwise
* 64BD-64C3 ~ CALL ($64C4 + 2A)
* 64C4-652B ~ Unit Type specific procedure pointers
* 652C ~ Dummy RET instruction for most unit types
* 652D-6562 ~ A = Unit Type if unit can move, 0 otherwise
* 6563-656C ~ ($C9D8) set to A; ($CCDD) to ($CD08) hold stuff based on A; ($C9D9) 2 byte holds unit's coordinates; ($C613) = 1; Empties: ($C9DD), ($C9DE), ($C9E5), and ($C5EC); set ($C5ED) to ($C5F1) to -1; handles WRA5 and WRA6 movement checking
* 656D-6573 ~ ($C9D8) set to A; ($CCDD) to ($CD08) hold stuff based on A; ($C9D9) 2 byte holds unit's coordinates; Empties: ($C613), ($C9DD), ($C9DE), ($C9E5), and ($C5EC); set ($C5ED) to ($C5F1) to -1
* 6574-65A8 ~ ($CCDD) to ($CD08) hold stuff based on unit in ($C9D8); ($C9D9) 2 byte holds unit's coordinates; Empties: ($C613), ($C9DD), ($C9DE), ($C9E5), and ($C5EC); set ($C5ED) to ($C5F1) to -1
* 65A9-65BD ~ WRAM Bank #5 map has Movement requirements, WRAM Bank #6 map has enemy occupied (bit 1) and ZOC tiles (bit 0) marked, ($C613) = 1
* 65BE-65DB ~ Shifts map to selected unit
* 65DC-660F ~ Unloading stat changes handled as necessary
* 6610-6617 ~ Initializes ($C99F) as 0, also sets AI check bytes
* 6618-664F ~ establishes player and AI control in [$C631] and [$C632]
* 6650-6678 ~ ($C60C) = # of sets w/ properties, $A000 table has sets w/ properties, ($CA90) = winning state, ($C99C) = 0, ($C99F) = 1, ($DEA1) WRAM Bank #2 = 4
* 6679-66A8 ~ Sprite portion update at start, ($DD80) WRAM Bank #2 tables viable captures, WRAM Bank #2 ($DEA0) involves reaching enemy HQ, ($C9DE) and ($C9DD) are emptied, ($C99E) holds active player, ($C9A2) holds 0 or 50, ($C9A3) holds other, ($C9A4) holds 0 or 11
* 66A9-66B0 ~ tables for basic player notes (per 4 bytes: active player, active player's first unit, inactive player's first unit, property terrain starting ID)
* 66B1-670D ~ ($C9A0) = winning state
* 670E-671E ~ HL = total HP * Gold Cost / 1000G of the given side's active units (B = first unit #)
* 671F-6757 ~ DE = HP * Gold Cost / 1000G if unit exists and isn't in Reserve; DE = 0 otherwise (A is the Unit #)
* 6758-6775 ~ A = 0 for Neutral, 1 for active player winning, 2 for active player losing
* 6776-6793 ~ sets current phase music
* 6794-67AC ~ A = (A - 1) * 6 + 3 + (Active player) * 3 + Winning progress state
* 67AD-67E5 ~ A = status set by: bit 5,($C685) active; ($C99C) = 0; Day # > 10; inactive player has more than twice as many units as the active player and inactive player has at least 11 units; Materials < 30; active player is losing in unit Gold totals (AI Yield conditions)
* 67E6-680C ~ A = insufficient units Yield condition: opponent's unit count is both at least 10 and over twice as many as active player
* 680D-6829 ~ A = insufficient Materials Yield condition: Materials is below 30
* 682A-686F ~ AI Yield Attempt ending with A = Acceptance
* 6870-68C1 ~ WRA2($DE9A) holds: first River along the way coordinates, Lander start coordinates, Lander end coordinates, flags for opponent's HQ reachable

== Block 15 (038000-03C000) ==

Empty (all FFs) in vanllia

PALBal and stuff:
* 4000-403B ~ Auto-End Turn feature procedure as a whole, calling $403C after checks for Victory-based exceptions
* 403C-405A ~ Auto-End Turn feature procedure handling
* 405B-40CD ~ Units In Reserve Check for Auto-End Turn feature
* 40CE-4103 ~ All Units Moved/In Reserve Check for all properties for Auto-End Turn feature
* 4104-413B ~ Deployment Availability Check for all properties for Auto-End Turn feature
* 413C-41C2 ~ Deployment Availability Check for Auto-End Turn feature (A is terrain; modify 817F, 8181, 8183, 8185, 8190, 8992, 8194, and 8196 accordingly with air and sea unit costs)
* 41C3-41D4 ~ A = 1 if (HL-1) clears BC, 0 otherwise; used for Gold/Materials Check on Auto-End Turn feature

* 5000-5019 ~ Establishes EXP Meter Graphics basics
* 501A-5039 ~ EXP Meter Graphics (C is Surplus EXP)
* 503A-5077 ~ EXP Meter Graphics based on Level (E is Level)

* 5F89-5FD1 ~ Attacker EXP multiplied based on Defender's stats involvement
* 5FD2-5FFF ~ Defender EXP multiplied based on Attacker's relative Level
* 6000-6006 ~ Changes Status Flags for unit in Reserve with Newly Deployed Status in mind
* 6007-6020 ~ Newly Deployed Unit flagged as such (used for reducing spawn camping EXP VS newly deployed units, as well as preventing initial EXP gain)
* 6021-604E ~ Selected Unit's EXP increased by HL, complete with Level Up alert
* 604F-6058 ~ A set to Selected Unit's HP
* 6059-60FA ~ Start of Phase EXP provision for units on resupplying properties

* 6FAC-6FCC ~ Tile BC's HP Display feature priority management necessity check
* 6FCD-6FFF ~ Map Shift graphics update per column/row with HP Display feature in mind
* 7000-703B ~ HP Display placement on map graphics basic procedure (A is HP, BC is Coordinates)
* 7007-703B ~ No HP Bounds Check version of 7000 (A is HP, BC is Coordinates)
* 703C-7071 ~ Primary Occupying Unit HP Display at coordinates HP
* 7072-70A8 ~ Display all on-screen units' HP
* 70A9~70D4 ~ Reloading map graphics with HP Display feature in mind
* 70D5-70F9 ~ Priority management for HP Display feature (Selected Unit's stats used, BC is Coordinates of tile to check)
* 70FA-7123 ~ Secondary Priority management for HP Display feature (A is HP, BC is coordinates of tile to check, E is involved unit)
* 7124~713A ~ Camera shifting checks with HP Display feature in mind (BC and DE are used to determine progress in graphics loading)
* 713B-7146 ~ Stores High RAM Camera Bytes in A, B, C, and D
* 7147-7153 ~ Sets HP Number Palette (A is HP, used for Critical HP Check)
* 7154-7173 ~ HP Update with HP Display feature in mind
* 7174~7183 ~ Sets selected unit's stats during End Phase handling; likely used to avoid a graphical glitch
* 7184-7195 ~ Determines graphics placement with HP Display feature based on whether HP is between 0 to 10 (A is HP, BC is Coordinates)
* 7196-71C6 ~ After combat handling of HP Display feature
* 71C7-71DA ~ DE set to Unit E's Coordinates (A is Selected Unit, E is Checked Unit)
* 71DB-71E4 ~ Prevents defaulted selected unit when loading the map

* 7F2F-7FB1 ~ Sea unit Fuel Upkeep management
* 7FB2-7FC1 ~ Fuel reduction now rounds up instead of truncating (note to self: fix above 15 Movement Fuel reduction)
* 7FC2-7FFF ~ Procedures for Low Fuel Highlighting based on being at or below 20 Fuel or 37.5%

== Block 16 (03C000-040000) ==

* 4000-403C ~ Starts up Design Maps session, providing zoomed out map preview that can be cancelled if necessary
* 403D-404D ~ Plays out Map Editor Quick Save
* 404E-405E ~ Plays out Map Editor Play option Map Choice, ending with A = -1 for backing out of Preview, or 0 for done (A is Map Choice)
* 405F-4068 ~ Map Editor Quick Save check, ending with A = 1 for no Quick Save, 0 for opening Quick Save, or A = -1 for B Button press
* 4069-4072 ~ VS Quick Save check, ending with A = 1 for no Quick Save, 0 for opening Quick Save, or A = -1 for B Button press
* 4073-407F ~ Reestablishes VS Quick Save data
* 4080-40B3 ~ Map Editor/VS Quick Save check, ending with A = 1 for no Quick Save, 0 for opening Quick Save, or A = -1 for B Button press (A is File, B is Mode)
* 40B4-40EA ~ Defaults Terrain and Unit selections as well as cursor coordinates in Design Maps
* 40EB-4132 ~ Establishes stats of new custom map
* 4133-416C ~ Sets up default name of Custom Map
* 416D-416F ~ Text "MAP"
* 4170-427F ~ Controls for Design Maps session as a whole
* 4280-428F ~ Pointers for submenus on Design Maps
* 4290-42D4 ~ A = 0 if tile edit update works, -1 if not
* 42D5-4340 ~ A = 0 for terrain modification being valid, -1 for invalid
* 4341-4359 ~ A = -1 if terrain is HQ and HQ exists; 0 otherwise
* 435A-43E5 ~ A = 0 if unit is to be added or Delete is to be handled, -1 if not
* 43E6-43FF ~ A = -1 if no occupant, 0 otherwise; decrements from occupant's side if there is one
* 4400-4463 ~ Handles Limit Warning of the map editor (too many Properties)
* 4404-4463 ~ Handles Limit Warning of the map editor (too many Units)
* 4464-448F ~ Text including coordinates for Limit warnings
* 4490-44A7 ~ Handles timer for flashing selected tile's graphics between selected terrain/unit and default graphics to place every 10 frames
* 44A8-44CD ~ Establishes terrain/unit tile graphics at cursor's coordinates based on selected terrain/unit
* 44CE-44ED ~ Establishes graphics of tile where cursor is placed, ($CA51) emptied
* 44EE-4572 ~ Design Maps main menu controls; A = committed choice, -1 if cancelled
* 4573-4585 ~ Moves pointer arrow for choice change on main menu of Design Maps
* 4586-4599 ~ Sets up character D for pointer location of active choice on main menu of Design Maps
* 459A-45A9 ~ potential coordinates of pointer locations of active choice on main menu of Design Maps
* 45AA-45BC ~ Sets up text for potential choices on main menu of Design Maps
* 45BD-45CC ~ Text pointers for potential choices on main menu of Design Maps
* 45CD-460E ~ Text including coordinates for potential choices on main menu of Design Maps
* 460F-4660 ~ Controls for Mode submenu in Design Maps; ends with A = 0 when closed
* 4661-46FE ~ Controls for Size submenu in Design Maps; ends with A = 0 when closed
* 46FF-4743 ~ Controls for Gold submenu of Design Maps; ends with A = 0 when closed
* 4744-4788 ~ Controls for Parts submenu of Design Maps; ends with A = 0 when closed
* 4789-47B2 ~ Controls for Name submenu of Design Maps; ends with A = -2 when closed
* 47B3-47C4 ~ Controls for Save submenu of Design Maps; ends with A = 0 when closed
* 47C5-47ED ~ Save confirmation attempt stuff; ends with A = 0 if Save is successful, -1 if not due to missing HQs
* 47EE-4836 ~ Handles Save Without HQs warning
* 4837-4865 ~ Text including coordinates for Save Without HQs warning
* 4866-4878 ~ Controls for End submenu as a whole in Design Maps; A = -1 for No or Successful Save (will quit), 0 otherwise, when closed
* 4879-48C6 ~ Controls for Confirm Selection; result is A = 0 for confirmation, -1 otherwise
* 48C7-4953 ~ Controls for End submenu in Design Maps; ends with A = 0 for No or Successful Save, -1 otherwise
* 4954-4985 ~ Text including coordinates for End Menu option
* 4986-49EC ~ Controls for Fill submenu as a whole in Design Maps; A = 0~7 when closed
* 49ED-4A06 ~ Text including coordinates for Fill can't be used with units/buildings warning
* 4A07-4AE6 ~ Controls for Fill submenu in Design Maps; A = 0 for B Button end, preserved active WRAM Bank number for A Button end
* 4AE7-4B07 ~ Establishes text for Fill command on Design Maps
* 4B08-4B38 ~ Text including coordinates for Fill command on Design Maps
* 4B39-4B6E ~ Starting Fill Tile flashing is handled
* 4B6F-4B7E ~ Establishes selected terrain tile graphics on first Fill tile coordinates
* 4B7F-4B8C ~ Establishes Null tile graphics on first Fill tile coordinates
* 4B8D-4BB3 ~ Establishes default terrain/unit tile graphics on first Fill tile coordinates, resets first Fill tile flashing timer
* 4BB4-4C39 ~ Controls for value manipulation in submenu in Design Maps; ends with A = 0 if closed with A button, A = -1 if closed with B button
* 4C3A-4CD4 ~ Sets up text on submenu Mode, Size, Gold, Parts, or Confirm on Design Maps; 1s digit for both choices on Gold and Parts is not forgotten
* 4CD5-4D64 ~ Text including coordinates for submenus Mode, Size, Gold, Parts, and Confirm, all within Design Maps
* 4D65-4DBF ~ Updates number text of given choice on submenu in Design Maps; Gold and Parts both have 1s digit unaffected without condition
* 4DC0-4DC3 ~ Default X coordinate of given choice's value within submenu of Design Maps
* 4DC4-4DCE ~ Placeholder text for Gold and Parts settings
* 4DCF-4DE1 ~ Updates right pointing arrow location for choice within submenu of Design Maps
* 4DE2-4DF9 ~ Sets up character D at pointer location of given choice for submenu of Design Maps
* 4DFA-4E03 ~ Pointing Right Arrow X coordinate for submenu in Design Maps
* 4E04-4EB7 ~ Controls for Terrain Selection in Design Maps; also indirectly handles controls for Unit Selection in Design Maps
* 4EB8-4ECC ~ A = item number in Terrain Group; B = number of Terrain Types in group; HL = Terrain Group item number holder
* 4ECD-4EE9 ~ Establishes terrain selection's basic text and selected terrain types graphics
* 4EEA-4EF0 ~ Text including coordinates for "Terrain / "
* 4EF1-4F32 ~ Updates given terrain group's graphics on terrain group selection (A is terrain group)
* 4F33-4F51 ~ Establishes base coordinates for cursor based on selected terrain group
* 4F52-4F67 ~ Terrain type text established with terrain group selection
* 4F68-4F8F ~ ($C011~$C01A) holds terrain type text (A is terrain type)
* 4F90-4FBD ~ Pointers for text for terrain types
* 4FBE-502A ~ Text for terrain types
* 502B-50D6 ~ Controls for Unit Selection in Design Maps
* 50D7-50EB ~ A = item number in Unit Group; B = number of Unit Types in group; HL = Unit Group item number holder
* 50EC-516D ~ Establishes unit selection's basic text, selected unit types graphics, and show of the current tile's terrain
* 516E-517D ~ Text including coordinates for "Unit / " and vertical separators on Unit Group Selection
* 517E-51C9 ~ Establishes graphics for selected unit within unit group A at designated coordinates on unit group selection
* 51CA-51D0 ~ Designated X coordinates for each unit group
* 51D1-51F1 ~ Establishes base coordinates for cursor based on selected unit group
* 51F2-520C ~ Sets up unit type's name or "UNIT DELETE" on unit selection menu
* 520D-5217 ~ Text "UNIT DELETE"
* 5218-5225 ~ HL = $8C00 + 4 * SWAP A
* 5226-526D ~ Stores Selected Terrain ID and Selected Unit ID
* 526E-5277 ~ pointers for Terrain Groups
* 5278-5298 ~ information tables for Terrain Groups
* 5299-52A6 ~ pointers for Unit Groups
* 52A7-52D9 ~ information tables for Unit Groups
* 52DA-5332 ~ Rectangle BC to DE is filled with given terrain determined by A, units within erased with appropriate headcount decrements

Translation:
* 5333-5360 ~ Pointers for terrain names in English
* 5361-540F ~ Terrain names in English

Map Editor Update:
* 7FA6-7FC9 ~ information tables for Terrain Groups updated edition
* 7FCA-7FFF ~ information tables for Unit Groups updated edition

== Block 17 (040000-044000) ==

* 4000-401F ~ Startup advertisement screens; starts with setting up non-GBC infinite loop
* 4020-4075 ~ Establishes Hudson Logo palette colors
* 4076-4090 ~ Would set up Hudson Logo on non-CGB Mode (no sign of being used)
* 4091-40A9 ~ Establishes Hudson Logo graphics
* 40AA-40BA ~ NOP 5250 * BC times
* 40BB-40F3 ~ Non-GBC infinite loop
* 40F4-4118 ~ Prints GBC-only disclaimer
* 4119-4122 ~ GBC-only disclaimer text pointers
* 4123-4174 ~ GBC-only disclaimer text
* 4175-4914 ~ Hudson logo graphics
* 4915-4B54 ~ Hudson logo graphics tile placements
* 4B55-4B6D ~ Palettes put in ($C567~$C5E6) while ($C4E0~C55F) ends up with all White
* 4B6E-4B8A ~ ($C520) sprite set grabs first color of each palette from ($C5A7) sprite set
* 4B8B-4B9D ~ Updates all Palette tables to be closer to new colors, decrements ($C564), empties ($C563) if ($C564) becomes empty
* 4B9E-4BB0 ~ Updates BG Palette tables to be closer to new colors, decrements ($C564), empties ($C563) if ($C564) becomes empty
* 4BB1-4BDC ~ BG Palettes have each RGB portion of each color shifted up to 4 points to new color indicated by ($C567) table
* 4BBB-4BDC ~ All Palettes have each RGB portion of each color shifted up to 4 points to new color indicated by ($C567) table
* 4BDD-4C3E ~ A holds 2nd byte of new Palette, C holds 1st byte of new Palette
* 4C3F-4C58 ~ A is shifted up to 4 points closer to L
* 4C59-4C7F ~ 16x3 Text Window base established at Coordinates BC
* 4C80-4D1F ~ 16x3 Text Window base tiles
* 4D20-4DBF ~ 16x3 Text Window base attributes
* 4DC0-4DF2 ~ Title Screen/Attract Mode master control
* 4DF3-4DF7 ~ Title screen controls
* 4DF8-4E8A ~ Establishes title screen BG graphics as a whole
* 4E8B-4ECB ~ "Anime Demo" title display stuff (unused)
* 4ECC-4ED3 ~ Text including Coordinates: "ANIME DEMO"
* 4ED4-4EFB ~ Attraction Mode stuff
* 4EFC-4FBA ~ Manual Absolute Erasure master control
* 4FBB-4FC2 ~ Manual Absolute Erasure Palette Colors
* 4FC3-4FFA ~ Text for Manual Absolute Erasure Prompt
* 4FFB-5054 ~ Absolute Erasure Prompt player controls
* 5055-505A ~ "OK/NO" Text for Absolute Erasure
* 505B-507F ~ Absolute Erasure "OK/NO" Palette set based on Choice A
* 5080-51E7 ~ GBW3 title screen palette locations
* 51E8-6867 ~ GBW3 title screen graphic tiles
* 6868-68A7 ~ GBW3 title screen palettes
* 68A8-68CD ~ WRA4($DC6C) : 170, 0, 0, 121, 220 (Sets up basic covered graphics values)
* 68CE-68E3 ~ WRA4($DC6C) = A
* 68E4-68F9 ~ WRA4($DC6D) = A
* 68FA-6900 ~ Sets up table of covered graphics within late WRA4 Bank, as well as defaulted table of graphics (BC is starting location, DE is size)
* 6901-6907 ~ Sets up table of covered graphics within late WRA4 Bank, as well as defaulted table of graphics, frame update per row version (BC is starting location, DE is size)
* 6908-690B ~ Restores last table of covered graphics
* 690C-698D ~ Sets up next table of covered graphics within late WRA4 Bank (BC is starting location, DE is size)
* 698E-6A08 ~ Restores last table of covered graphics
* 6A09-6A58 ~ Tile placement and coloring handled for [$9800 + B + C * 32] table size indicated by DE using [$DC6C] and [$DC6D] as the base
* 6A0F-6A58 ~ Tile placement and coloring handled for [$9800 + B + C * 32] table size indicated by DE using [$DC6C] and [$DC6D] as the base; each row advances the game state by 1 frame
* 6A59-6A7F ~ Tile placement and coloring handled for [HL] to [HL + D - 1] as top row using [$DC6C] and [$DC6D] as the base
* 6A80-6AA7 ~ Tile placement and coloring handled for [HL] to [HL + D - 1] as a middle row using [$DC6C] and [$DC6D] as the base
* 6AA8-6ACE ~ Tile placement and coloring handled for [HL] to [HL + D - 1] as bottom row using [$DC6C] and [$DC6D] as the base
* 6ACF-6AF3 ~ Tile placement and colors established with A and OR B,($DC6D) within respective VRAM banks for HL address, HL effectively incremented within same row for 32x32
* 6AF4-6AFC ~ ($CD79) being active advances game state to frame
* 6AFD-6B44 ~ VRA0 rectangle B+1,C+1, size D-1,E-1, set to A, and VRA1 same rectangle set to default palette

== Block 18 (044000-048000) ==

* 4000-4017 ~ "GB Mobile System" startup screen display
* 4018-404F ~ Establishes "GB Mobile System" startup screen graphics stats
* 4050-4066 ~ ($9800~$9A3F) (1st 20 of every 32 bytes) holds (DE ~ (DE + $0167))
* 4067-41CE ~ "GB Mobile System" startup screen graphics tile placements
* 41CF-4336 ~ "GB Mobile System" startup screen pallete locations
* 4337-48A6 ~ "GB Mobile System" startup screen graphic tiles
* 48A7-48AE ~ all blue (Mobile System GB Palette)
* 48AF-490B ~ Beginner Mode Map Results management, ends with A = flag for Beginner Mode cleared
* 490C-49DA ~ Campaign Mode Map Results management, ends with A = flag for Ending obtained
* 49DB-49F9 ~ A = destination Map value
* 49FA-4A11 ~ A = 0 if Fast Clear Day limit is cleared, 1 otherwise
* 4A12-4A43 ~ checks if Master Wars Medal and Super Prize should be given out ([$C68F] 6 bytes holds cleared Campaign maps, [$C784] 45 bytes number of clears for each Campaign map in each byte--the Super Prize won't be rewarded if the total is 55 or more)
* 4A44-4A58 ~ checks which Ending Medal if any should be given out
* 4A59-4B27 ~ checks if the following Medals should be given out: Gold/Silver Car, Gold/Silver Tank, Gold/Silver Plane, Gold/Silver Ship, Gold/Silver Flag, Gold/Silver Craft, Reaper ([$C770] 2 byte is destroyed Lite Land, [$C772] 2 byte is destroyed Armor, [$C774] 2 byte is destroyed Air, [$C776] 2 byte is destroyed Ship, [$C778] 2 byte is captured properties, [$C77A] 2 byte is developed properties, and [$C77C] is declined Yields)
* 4B28-4B40 ~ checks if All Unit Medal should be given out ([$C77D] 7 byte holds procured unit flags)

* 4BC4-4BD2 ~ if [CA94] = 2, A = [C632]; otherwise, A = [C631]
* 4BD3-4BD9 ~ just obtained Medal flag set at [C62B] (A is just obtained Medal)
* 4BDA-4C1C ~ New Medals checks
* 4C1D-4C35 ~ Player Rank updating (A is new minimum Player Rank)
* 4C36-4C4C ~ Hard Save Prompt master control
* 4C4D-4C5A ~ floors Player Rank at A, A is set to -1 if no changes are needed
* 4C5B-4D18 ~ A set to Player Rank minimum set based on cleared Campaign map with Maps 44 and 45 also using Campaign Maps cleared count; or -1 if not a promotion map
* 4D19-4D34 ~ Increment count of destroyed units of given family of involved unit's type on Red Star's phase (A = Unit Type)
* 4D35-4D3E ~ used for given family destroyed enemies
* 4D3F-4D59 ~ All Unit Medal progress flag for unit Set as necessary (A is Unit Type)
* 4D5A-4D66 ~ Capture count incremented (Flag Medal)
* 4D67-4D73 ~ Terrain change count incremented (Craft Medal)
* 4D74-4D7A ~ Denied Yield count incremented (Reaper Medal)
* 4D7B-4D89 ~ Work Car command usage check shut off due to map transition
* 4D8A-4D9E ~ set 6,(C783), intended to signify Work Car command usage for the map
* 4D9F-4DA7 ~ Map Summon check flag shut off due to map transition
* 4DA8-4DB0 ~ Map Summon check flag turned on
* 4DB1-4DB9 ~ Map Summon check flag checked
* 4DBA-4DC5 ~ Increment (HL) (Campaign only)
* 4DC6-4DDE ~ Increment (HL) 2 byte (Campaign only)
* 4DDF-4DEC ~ Carry Flag active if [DE] 2 byte < HL, A = 0 if [DE] 2 byte = HL
* 4DED-4E05 ~ Standard Map A's Day Record updated (B is finishing Day Count)
* 4E06-4E18 ~ A grabs Standard Map A's Day Record
* 4E19-4E87 ~ Establishes given starting stats for given Beginner Maps

PALBal and such:
* 7700-771A ~ Procedure for opening slow clear map on Fast Clear where valid

== Block 19 (048000-04C000) ==

* 4000-401F ~ RAM addresses $D000~$D63F set to 0
* 4020-4028 ~ HL = Unit Type's stats starting location (A is Unit Type)
* 4029-4036 ~ HL = Unit's stats starting location (A is Unit #)
* 4037-4042 ~ A = Unit Type's used stat (A is Unit Type, C is used stat)
* 4043-404E ~ DE = Unit Type's used stat (2 bytes) (A is Unit Type, C is used stat)
* 404F-4065 ~ RAM addresses $CD28~$CD31 set to hold Unit Type's name
* 4066-4082 ~ A = Unit's used stat (A is Unit #, C is used stat)
* 4083-40A0 ~ DE = Unit's used stat (2 bytes) (A is Unit #, C is used stat)
* 40A1-40BC ~ B -> Unit's used stat (A is Unit #, C is used stat)
* 40BD-40DA ~ DE -> Unit's used stat (2 bytes) (A is Unit #, C is used stat)
* 40DB-40F4 ~ Adding the unit's EXP in, checking for 400 EXP cap (A is Unit #, HL is gained EXP)
* 40F5-4105 ~ A = Unit's Level - 1 (A is Unit #)
* 4106-412A ~ RAM addresses $CCDD~$CCED set to hold selected Unit's stats
* 412B-414D ~ selected Unit's stats moved from $CCDD~$CCED to $D000 list
* 414E-4188 ~ A = Unit # of primary unit on coordinates held by BC, -1 if there is none
* 4189-41E2 ~ changes coordinates of any Loaded units (A is Loading unit, BC is Loading unit's new coordinates); recursion accounts for stack-loading
* 41E3-41F6 ~ 42F6 stuff, then 41F7 stuff if A != -1 from 42F6 stuff (A is Unit Type, B and C are coordinates)
* 41F7-4240 ~ establishes new unit's stats in HL string, increments side's current unit count (A and D are Unit Type, B and C are coordinates)
* 4241-425B ~ increments side's Built Units by 1 to cap of 65,535 (A's Odd/Even bit determines side)
* 425C-42B1 ~ handles unit defeat including Loaded units (A is Unit #); Loaded status check done to avoid redundancy with primary unit
* 42B2-42F5 ~ decrements side's current unit count, erases defeated unit's stats, increments side's lost unit count to cap of 65,535 (A is Unit #)
* 42F6-4328 ~ A = side's current unit count, or -1 instead if it's already 50 (A is the given side); HL is set to ($D000 + $320 * side + $32 * units)
* 4329-4350 ~ A != 0 && Z Flag Set: Loading Valid (A is 1st Unit's #, B is 2nd Unit's #)
* 4351-43B8 ~ A = prevent Supply flag (A is receiving unit, B is giving unit)
* 43B9-43F3 ~ $CD33 holds number of units Loaded, $CD34-$CD37 holds ID #s of units Loaded (A is primary Unit #)
* 43F4-4435 ~ list of buyable units for property using 12:4436 (A is terrain type byte)
* 4436-4457 ~ $CD0B holds available Unit Type count, $CD0C, etc. holds Unit Type choices for property (B is starting Unit Type, C is number of Unit Types to check)
* 4458-446F ~ Mercenary Unit equivalent of 12:4436
* 4470-447C ~ if unit is buyable, A = 0; else, A = 2 (A is Unit Type)
* 447D-448C ~ if unit is allowed by given unused lists, A = 0; else, A = 2
* 448D-4497 ~ $4986 stuff, if unit is allowed, A sets corresponding bit; else, A = 0
* 4498-44B7 ~ if Unit is at S-Rank, A = promoted Unit Type # * 2 + country bit; else, A = 0 (A is Unit #)
* 44B8-44BF ~ promoted Unit Type #
* 44C0-4509 ~ confirmed promotion procedure
* 450A-4584 ~ establishes which surrounding units can supply the selected unit using $CD3A-$CD40
* 4585-4596 ~ Unit's End Turn bit set
* 4597-45DF ~ all Units for the given side have their End Turn bit reset and bit 7 for occupied terrain tiles reset as well (A is the given side)
* 45E0-4617 ~ resets Supply Flag for all units on the given side (A is the given side)
* 4618-4655 ~ A = number of units supplied (A is the given side)
* 4656-46C7 ~ A = 0 if terrain is viable for resupply, -1 if not (A is Unit #, B is Unit Type)
* 46C8-46DF ~ A = 0 if terrain is viable for repairs, -1 if not (A is Unit #, B is Unit Type)
* 46E0-4740 ~ A = 0 if terrain is viable for repairs, -1 if not (A is Unit Type, B is terrain type)
* 4741-4757 ~ Unit's 8th stat = Unit Type's Fuel
* 4758-477C ~ Unit's 9th and 10th stats = Unit Type's Ammo (each weapon)
* 477D-479E ~ recover HP (B = HP recovery amount)
* 479F-47AC ~ A = used Movement Cost
* 47AD-47CD ~ [CD44-CD76] holds selected unit's Movement Costs (A is Movement Type)
* 47CE-4800 ~ [C6A8-C77F] holds units' Types and EXP values; every 4 bytes is set to 255
* 4801-4836 ~ reserved units' stats established
* 4837-4854 ~ [CD28-CD2F] holds weapon's name (A is Unit Type, C is 14 or 16)
* 4855-4861 ~ A = weapon's used stat value (A is Weapon ID, C is used stat); HL is also set to [$5256 + 2A] + 1
* 4862-48FB ~ CCED to CD08 hold both weapons' stats (for each weapon: Name (9 characters), Weapon ID, Current Ammo, Min Range, Max Range, Max Ammo) (A is Unit #)
* 48FC-490A ~ A = used Weapon ATK (A is Unit Type, B is Weapon ID)
* 490B-4925 ~ empties $D640 to $D95F
* 4926-4949 ~ put unit's stats in [$D640 + B * 16] to [$D64F + B * 16] (A is Unit #)
* 494A-4957 ~ HL = $D640 + A * 16
* 4958-497E ~ put given army's stats in $D640 to $D95F
* 497F-4985 ~ buyable units
* 4986-49A5 ~ pointers for unused allowed unit lists
* 49A5-4A0E ~ unused allowed unit lists 
** List 1 - Grunt and Buggy
** List 2 - List 1 plus Convoy, Humvee, and APC
** List 3 - List 2 plus Bazooka, Supply Truck, Artillery, and Hunter Tank
** List 4 - List 3 plus Rocket Launcher, IFV, and MB Tank
** List 5 - List 4 plus Anti-Air Tank and Transport Helicopter
** List 6 - List 5 plus Work Car
** List 7 - List 6 plus Anti-Air Missile Launcher and Gunship
** List 8 - List 7 plus Lite Fighter
** List 9 - List 8 plus Lite Attacker and Transport Plane
** List 10 - List 9 plus Fighter, Attacker, and Bomber
** List 11 - List 10 plus Supply Plane
** List 12 - List 11 plus Small Aircraft Carrier and Lander
** List 13 - List 12 plus Aegis Warship and Large Aircraft Carrier
** List 14 - List 13 plus Ship Buster and Submarine
** List 15 - List 14 plus Tanker
* 4A0F-4A42 ~ promoted Unit Type #
* 4A43-4AAC ~ Unit Type stat pointers
* 4AAD-5255 ~ Unit Type stats
** 0-9 ~ name characters
** A ~ Max HP
** B ~ Max Fuel
** C ~ Movement Power
** D ~ Transport Capacity
** E ~ ?
*** 1 ~ Work Car, Supply Truck, Convoy, Rocket Launcher, IFV, Hunter Tank, MB Tank
*** 2 ~ AA Tank, Artillery
*** 3 - infantry, APC, AA Missile Launcher, Transport Helicopter, Lander, Tanker
*** 4 - Humvee, Gunship, Ship Buster, Transport Helicopter+
*** 5 - Buggy, Humvee+, Lite Attacker, Transport Plane, Supply Plane, Gunship+, Submarine
*** 6 - Buggy+, Lite Fighter, Attacker, Small Aircraft Carrier, Submarine+
*** 7 - Fighter, Lite Bomber, Bomber, Large Aircraft Carrier
*** 8 - Interceptor, Mercenary Bomber, Aegis Warship
*** 9 - Mercenary Ship
** F ~ Fuel Upkeep
** 10, 11 ~ Gold Cost / 100G
** 12, 13 ~ Materials Cost
** 14 ~ Primary Weapon Type
** 15 ~ Primary Weapon Ammo
** 16 ~ Secondary Weapon Type
** 17 ~ Secondary Weapon Ammo
** 18 ~ Unit Family
** 19 ~ Movement Type
** 1A ~ Carrying Type
** 1B, 1C, 1D ~ Carried Type
** 1E-22 ~ DEF values
** 23 ~ Base Focus
** 24 ~ Focus Loss
* 5256-5297 ~ Weapon stat pointers (pointers)
* 5298-54A7 ~ Weapon stats
** 0~7 ~ name characters
** 8 ~ Minimum Range
** 9 ~ Maximum Range
** A-E ~ ATK (Armor, Lite Land, Air, Ship, Sub)
** F ~ Cost per shot
* 54A8-54C5 ~ Movement Cost pointers
* 54C6-561E ~ Movement Costs

PALBal and stuff:
* 6000-6048 ~ Ends Turn of all units Loaded on Unit A, including stack-Loaded units
* 6049-6062 ~ Resets Auto-End Turn flags as a result of Unit A being in Reserve; used in handling of a destroyed unit

== Block 20 (04C000-050000) ==

* 4000-402E ~ Empties $C630~$C633, $C67E~$C87D, $C8B3~$C8BA, and $C9B5; then sets $C685 to 61 and $C686 to 1
* 402F-403A ~ [$C631] = 1
* 4031-403A ~ [($C631 + A)] = 1
* 403B-4045 ~ ($CA73 ~ $CA90) emptied
* 4046-40A2 ~ $CA73 to $CA90 holds online-related information for Custom Map A
* 40A3-40CF ~ Carry Flag set by HL 8 byte not being empty
* 40D0-40ED ~ SCF for ($CA73~$CA7A) byte not being empty or valid Map Online 7 Digit Code; otherwise, A = 0
* 40EE-40FA ~ $CA89 first 3 ASCIIs being 0 results in SCF; otherwise, A = 0
* 40FB-415C ~ Empties WRA4($DC2A~$DC50)

* 4338-449F ~ Initializes graphics for Map Editor Quick Menu
* 44A0-44E6 ~ Map Editor Main Menu Pointing Down Bullet coordinates established
* 44E7-452D ~ Map Editor Main Menu 2nd Pointing Down Bullet coordinates established
* 452E-4558 ~ A set to Palette: Blue if Custom Map D exists, Red otherwise
* 4559-4562 ~ HL = $BA8A + A * 18
* 4563-4580 ~ Carry Flag set if Online Partner Map A doesn't exist; otherwise, A = 0
* 4581-459C ~ Blanks Description Text Box on Map Edit Menu
* 459D-45AD ~ Text for blanking line on Description Text Box on Map Edit Menu
* 45AE-45F7 ~ For existing Map Online 7 Digit Code, print last 4 digits at 8,14 and set A = 0 and ($CC20) = 0; otherwise, SCF
* 45F8-4662 ~ Online Map Description Text management including Code #
* 4663-4708 ~ Standard Custom Map Description Text management (A is Map #)
* 4709-4710 ~ Text "User Map"
* 4711-4716 ~ Text "My Map"
* 4717-4728 ~ Custom Map Description Text management as a whole
* 4729-4748 ~ Manages Palettes of file row for Map Editor File selection (BC is base coordinates, D is Map # of 1st Map on Row)
* 4749-47B3 ~ Handles Text Window display for inability to Upload/Send map (A is 0 for Upload, non-0 for Send)
* 47B4-47E2 ~ Text for inability to upload/download map
* 47E3-49F0 ~ Map Editor Quick Menu master control, ends with A = Highlighted Map #, or B = -1 for B Button press (A is Quick Menu Type)
* 49F1-4AC2 ~ Establishes Map Editor Main Menu graphics
* 4AC3-4B09 ~ Sets up coordinates of Pointing Right Mini Arrow on Map Editor Main Menu
* 4B0A-4B3C ~ Establishes description text of current highlighted option on Map Editor Main Menu
* 4B3D-4B48 ~ Pointers to description text of options on Map Editor Main Menu
* 4B49-4B85 ~ Establishes Map Choice prompt text for Map Editor primary choice
* 4B86-4D25 ~ Map Editor master control
* 4D26-4E5F ~ Map Copy Destination Choosing master control
* 4E60-4E9A ~ Map Editor Primary Choice sub-selection prompt display graphics setup

* 4FBA-51AB ~ Map Editor Map Choosing master control
* 51AC-51BC ~ Updates Palettes of files for Map Editor File selection
* 51BD-51C9 ~ Zero flag triggered by custom map nonexistance, map basic logistics established just in case
* 51CA-52F3 ~ Map Editor Quick Meny Copy master control
* 52F4-5300 ~ Copies 1st higlighted Custom Map's full data onto 2nd one's
* 5301-53AD ~ Map Editor Delete/Overwrite Confirmation master control, ending with A = 0 for OK, or 1 otherwise (A is 0 for Delete, non-0 for Overwrite)
* 53AE-53D6 ~ Establishes "OK/NO" graphics at coordinates BC with "OK" highlighted
* 53D7-53FF ~ Establishes "OK/NO" graphics at coordinates BC with "NO" highlighted
* 5400-54BF ~ Establishes graphics for Map Editor Save Open Prompt
* 54C0-5540 ~ Map Editor Save Open Prompt master control; ends with A = confirmation inverse flag for A Button press, or -1 for B Button press
* 58DC-58F3 ~ A = SRA0($A007 + A)
* 58F4-5916 ~ A = bit 0,SRA0($A007) OR bit 0,SRA0($A008) OR bit 0,SRA0($A009)
* 5917-5937 ~ A = Bit Weight for Active Game Mode (A is File, B is Mode)
* 5938-5961 ~ Clears Bit Weight for Save of Mode (A is File, B is Mode)
* 5962-597B ~ A = Value of Byte in File A indicated by C
* 597C-599D ~ HL set to hold Player's Name of File A
* 599E-59AF ~ ($C67E ~ $C684) = (HL ~ HL+6)
* 59B0-59C3 ~ A set to Player's Rank of File A
* 59C4-59C7 ~ Reads Configuration flags to A
* 59C8-59CB ~ Writes Configuration flags from A
* 59CC-59FC ~ Writes CO Name, Configuration flags, and Selected Mode onto Save File A
* 59FD-5A23 ~ Reads Medals Obtained from File A
* 5A24-5A88 ~ Reads Save A for Mode B Save info to get important data for text
* 5A89-5AA1 ~ Sets up Map Name and Map #
* 5AA2-5ABA ~ ($CC93) holds Current Phase # of Saved file, or -1 if none
* 5ABB-5ADA ~ ($CC95) = Number of maps cleared in Beginner; set 0,($CC94) if Beginner is finished
* 5ADB-5AFB ~ Campaign Progress flags and count established
* 5AFC-5B1C ~ Standard Progress flags and count established
* 5B1D-5B2C ~ A = number of bits active in (HL) for original A bits (number of maps cleared in the mode
* 5B2D-5B37 ~ HL = $38E0 + A * 10 + Active Game Mode * 2
* 5B38-5B47 ~ HL = $38E0 + B * 10 + C * 2
* 5B48-5B5C ~ SRAM Bank set according to file, HL = DE + $A000/$B000
* 5B5D-5B67 ~ If A < 3, ($A00D) and ($CC9B) are set to A
* 5B68-5B8D ~ New File setup in Save File A
* 5B8E-5BAC ~ Saves all Quick Save data onto File A
* 5BAD-5BBA ~ Updates Save Data of Save File A, including Map Data unconditional
* 5BBB-5BCF ~ Fully Copies Save File A to Save File B as needed
* 5BD0-5C14 ~ Copies Save File A to Save File B (C is Mode)
* 5C15-5C60 ~ Writes Save Data of Save File A
* 5C61-5C7A ~ ($AA97) to ($AA9E) holds Cleared Standard map flags
* 5C7B-5CA2 ~ Load Save File A's data onto Current Save File data

* 5CE4-5CFD ~ Load Interrupt Save's data; A = Active Game Mode
* 5CFE-5D36 ~ Hardwrites saved Custom Map data
* 5D37-5D53 ~ Custom Map A data set up in WRAM Banks 1 and 2
* 5DCC-5E1D ~ [$CA1A] = 7 + A/2, [$CA1B] = 0, [$CA1C] = 160 + A%2 * 16, [$CA1D] = 2 * ([$A00F + (A/8)] AND 2^(A%8)), [$CA21~CA4E] = [$A000~$A02D] or [$B000~$B02D]
* 5E1E-5E3E ~ Copy Custom Map B's full data onto Custom Map C's full data
* 5E3F-5E54 ~ res A,SRA0($A00F)
* 5E55-5E82 ~ WRA(B)($D000~DFFF) holds Custom Map A's full data
* 5E83-5EC1 ~ Saves Custom Map A's full data with WRA(B)($D000~DFFF), also updates used custom maps flags accordingly
* 5EC2-5F62 ~ SRAM half-block based on File indicated by A holds temporary map data
* 5F62~5FA6 ~ HL 1000 byte holds unit stats (HP and Load Count together, Ammo Counts together, unused stats not stored)
* 5FA7-5FBE ~ HL 301 byte holds current property info
* 5FBF-5FFC ~ HL holds map information in first 46 bytes, and then compacts map terrain data into bytes equal to the map's total tiles
* 5FFD-6038 ~ HL holds coordinates and then Unit Type of each unit in 3 times as many bytes as units
* 6039-6071 ~ DE's 3rd and 4th bytes holds number of relevant bytes in reverse; and then the 5th byte holds the sum of all values of the relevant bytes, quantity modulo 256, for checksum
* 6072-60F7 ~ Saved data for active map reestablished
* 6090-60F7 ~ More local parts of save data reestablished
* 60F8-6144 ~ Reestablishes units' stats for save loading
* 6145-6160 ~ Reestablishes properties' stats for save loading
* 6161-6164 ~ Active map data set up in WRAM banks 1 and 2 ($1614 stuff, really)
* 61D1-61EE ~ SRA0($A27E + A * $0200) 2 byte holds sum of all values of SRA0($A080 + A * $0200 to $A27D + A * $0200)
* 61EF-61FB ~ HL = $A080 + A * $0200, BC holds sum of all values of $A080 + A * $0200 to $A27D + A * $0200
* 621B-612E ~ RAM portion indicated by HL ends with RAM checksum

PALBal and stuff:
* 7F98-7FE3 ~ Campaign/Standard Badge Reward management; includes official Saving portion
* 7FE4-7FFF ~ Increments Badge Count by A unless Interrupt Save is around

== Block 21 (050000-054000) ==

* 4000-4015 ~ VRA0 rectangle BC, size 2x2 holds 143 + (A * 4)%256 ~ 146 + (A * 4)%256
* 4016-4028 ~ Establishes graphics for both sides' Old HP values on battle screen
* 4029-4075 ~ Bullet Animation Instruction (A is Altitude Aim, B is Side)
* 4076-40C3 ~ Bullet Animation Instruction for same altitude units (A is Weapon #, B is Side)
* 40C4-4192 ~ Animation instruction: full bullet behavior established
* 4193-41CE ~ Establishes full bullet behavior animation including launch smoke (HL is starting coordinates of bullet)
* 41CF-4200 ~ Bullet Animation Instruction set up for given bullet, DE set to pointer to sprite stats modification table pointer for weapon's ammo and direction for first part, $C4DE set to 1 on bullet's latter half timer
* 4201-4244 ~ Establishes full animation of given bullet (BC is starting coordinates of bullet)

* 4980-4999 ~ Interrupt Save screen full management; A = Open Interrupt Save
* 499A-4A4F ~ Top Menu master control; ends with A = Choice, or -1 for B Button press
* 4A50-4AA4 ~ New Game Menu master control; ends with A = File Choice, or -1 for B Button Press
* 4AA5-4B0C ~ New File Overwrite Confirmation prompt management, ending with A = Confirmation
* 4B0D-4B38 ~ Continue Menu master control; ends with B = Mode Choice, and A = File Choice, or -1 for B Button Press
* 4B39-4B4F ~ File Menu managed under Save
* 4B50-4B91 ~ Manages display of text window with "(A) was erased." (A is Save File # for 0~5; Message Box for 6; or Custom Map (# + 7) for 7~16)
* 4B92-4BB3 ~ Text pointers for inserting what was erased
* 4BB4-4C65 ~ Text for inserting what was erased
* 4C66-4C6F ~ Text "...was erased."

* 4C92-4C95 ~ Shuts off LCD Display if necessary
* 4C96-4E28 ~ Sets up naming screen graphics
* 4E29-4E3A ~ text "CO Name", "Map Name"
* 4E3B-4E4B ~ A = number of characters in name
* 4E4C-4E8C ~ Naming Screen procedure as a whole
* 4E8D-4EFF ~ Hiragana selection graphics established on naming screen
* 4F00-4F72 ~ Katakana selection graphics established on naming screen
* 4F73-4FE5 ~ English selection graphics established on naming screen
* 4FE6-512A ~ Controls for Naming Screen
* 512B-5150 ~ Check to make sure to land on a new character moving right on the naming screen
* 5151-5169 ~ Check to make sure to land on a new character moving left on the naming screen
* 516A-517A ~ Sets cursor on Confirm button on naming screen
* 517B-5194 ~ Switches mode on naming screen in order: Hiragana to Katakana to English to Hiragana; also places cursor on the very first character
* 5195-51AD ~ Sets up current language mode's graphics on naming screen
* 51AE-51DD ~ A and ($CC3B) hold selected Hiragana/Katakana/English character
* 51DE-5229 ~ Naming screen inputted command results (A = 2 for Map Name, 0 for CO Name)
* 522A-5244 ~ Placeholder info for naming
* 5245-531E ~ Customized name graphics established
* 531F-5354 ~ Adds character where viable during naming
* 5355-5374 ~ Handles character backspace on naming screen
* 5375-53EE ~ Sets up new default location of Pointing Down Mini-Arrow on naming screen (modification would be X=$FC,Y=$FB)
* 53EF-546C ~ Controls for Confirmation table
* 546D-54AC ~ Loads Confirmation table
* 54AD-54D7 ~ Establishes "OK/NO" graphics with "OK" highlighted
* 54D8-5502 ~ Establishes "OK/NO" graphics with "NO" highlighted
* 5503-5524 ~ Sets up empty character underscore for flashing on naming screen
* 5525-5540 ~ Blanks character at BC text coordinates
* 5541-55A9 ~ Next available character's flashing on naming screen handled
* 55AA-56ED ~ Character selection tables for naming screen
* 56EE-56F7 ~ Text "Is this okay?"
* 56F8-5967 ~ Graphics tiles for Naming screen
* 5968-59A7 ~ Palettes for Naming Screen
* 59A8-59F0 ~ Establishes New Game Override prompt window graphics
* 59F1-5A04 ~ Text "..'s Data delete. New Start."
* 5A05-5A2F ~ "OK/NO" graphic placed at 13,4 with "OK" highlighted
* 5A30-5A5A ~ "OK/NO" graphic placed at 13,4 with "NO" highlighted
* 5A5B-5B12 ~ Medals Menu master control
* 5B13-5B41 ~ Would display text "Medal" (Unused)
* 5B42-5B47 ~ Text "Medal"
* 5B48-5B4B ~ Handles clear-up of all sprite portions and entire ($C400) table, sets ($C00E) to 1 (Unused)
* 5B4C-5B6C ~ Sets up Medals Screen STAT Interrupt
* 5B6D-5B78 ~ Resets STAT Interrupt
* 5B79-5B84 ~ BC holds Medal (A - 1)'s coordinates
* 5B85-5BB7 ~ Established all Medals' graphics; unobtained Medals are treated as Medal #0 (non-existent)
* 5BB8-5BE9 ~ Coordinates of each Medal
* 5BEA-5BFD ~ Establishes Medals Menu Basics
* 5BFE-5CAC ~ Establishes Medals screen basic graphics
* 5CAD-5CEA ~ Transition to 2nd half of Medals Menu
* 5CEB-5D2F ~ Transition to 1st half of Medals Menu
* 5D30-5D6C ~ Establishes Player Rank Graphics basics
* 5D6D-5D8B ~ Readies Player Rank Stars placement
* 5D8C-5DAA ~ Readies Player Rank Kanji placement
* 5DAB-5DDF ~ Establishes Player Rank Stars placements (A is Player Rank, BC is base coordinates, DE is size)
* 5DE0-5E14 ~ Unused version of $14:5DAB (don't know what this is intended to do)
* 5E15-5E3E ~ Establishes Player Rank Kanji placements (A is Player Rank, BC is base coordinates, DE is size)
* 5E3F-5E5D ~ Readies Medal placement
* 5E5E-5E87 ~ Establishes Medal placement (A is Medal, BC is base coordinates, DE is size)
* 5E88-5ECC ~ Establishes Bullet Pointer location on Medals Menu
* 5ECD-5F1A ~ Establishes Medals Menu sprites
* 5F1B-5F28 ~ B = A / B, A holds remainder
* 5F29-5F79 ~ Establishes highlighted Medal's description
* 5F7A-5F8C ~ Sets up Medal Name (A is Medal #, BC is Coordinates)
* 5F8D-5FBC ~ Medal descriptions pointers
* 5FBD-5FEC ~ Medal names pointers
* 5FED-6148 ~ Medal names
* 6149-6322 ~ Medal descriptions
* 6323-6330 ~ Unobtained Medal description
* 6331-6560 ~ Graphics tiles (Would be for File Menu)
* 6561-65A0 ~ Promotion Message palettes
* 65A1-6AF0 ~ File Menu Graphics Tiles
* 6AF1-6B30 ~ Palettes for Unknown purpose
* 6B31-6D00 ~ Graphics Tiles for Medals
* 6D01-6D40 ~ Medals Colors Palettes
* 6D41-6D88 ~ Player Rank Stars Tile Arrangement
* 6D89-6DD0 ~ Player Rank Stars Palette Arrangement
* 6DD1-7250 ~ Player Rank Stars Graphics Tiles
* 7251-7290 ~ Player Rank Graphics Colors Palettes
* 7291-7338 ~ Player Rank Kanji Tile Arrangement
* 7339-73E0 ~ Player Rank Kanji Palette Arrangement
* 73E1-7770 ~ Player Rank Kanji Graphics Tiles
* 7771-77A0 ~ Player Rank Blank Graphics Tiles
* 77A1-77E0 ~ Palettes for unknown purpose
* 77E1-7876 ~ Medals Tile Arrangement
* 7877-790C ~ Medals Palette Arrangement
* 790D-7E9C ~ Medals Graphics Tiles

== Block 22 (054000-058000) ==

* 4000-4007 ~ Blanks Configuration menu flags
* 4008-4115 ~ Establishes graphics of Configuration menu
* 4116-412A ~ Sets up location of pointing right bullet on Configuration screen
* 412B-41BE ~ Controls for Configuration menu
* 41BF-41F5 ~ Attempts to Toggle On Temporary Configuration Flag based on highlighted Configuration option
* 41F6-422C ~ Attempts to Toggle Off Temporary Configuration Flag based on highlighted Configuration option
* 422D-4233 ~ A holds isolated temporary Configuration flag determined by initial A
* 4234-42EC ~ Establishes all "ON/OFF" graphics display on Configuration
* 42ED-42F8 ~ Sets up separating Slash for "ON/OFF" portion of given choice on Configuration (A is Attributes flags, C is Y coordinates)
* 42F9-4304 ~ Sets up "ON" portion of given choice on Configuration (A is Attribute flags, C is Y coordinates)
* 4305-4310 ~ Sets up "OFF" portion of given choice on Configuration (A is Attribute flags, C is Y coordinates)
* 4311-43C2 ~ Explanation on Configuration menu
* 43C3-43DC ~ Establishes Explanation text of highlighted choice on Configuration menu
* 43DD-4404 ~ Text including coordinates: Configuration menu options
* 4405-44F8 ~ Text: Configuration Explanations
* 44F9-4502 ~ Pointers to Text for Configuration Explanations

* 54BB-5585 ~ Establishes Top Menu's graphics as a whole
* 5586~559D ~ Establishes highlighted choice's modifications to Pointing Right Bullet graphics on Top Menu
* 559E-55A1 ~ Handles clear-up of all sprite portions and entire ($C400) table, sets ($C00E) to 1
* 55A2-55D1 ~ Establishes text in description for highlighted choice on Top Menu

* 5CD0-5D1D ~ Sprite A moves right 10 pixels per frame, ending once the X coordinate exceeds 207 (clearly off-screen)
* 5D1E-5D6E ~ Sprite A moves down 10 pixels per frame, ending once the Y coordinate exceeds 183 (clearly off-screen)
* 5D6F-5D6B ~ Establishes graphics for Save confirmation screen
* 5D6C-5DC1 ~ Text including coordinates: "Save?"
* 5DC2-5E37 ~ Controls for Save confirmation screen; ends with A = 1 for "OK", 0 for "NO", or -1 for cancellation
* 5E38-5EB9 ~ Text Transition to indicate success with file saving
* 5EBA-5EBE ~ 0s to blank the "OK/NO" graphic
* 5EBF-5EC9 ~ Text including coordinates "Saved."
* 5ECA-5EDD ~ Updates Save Data of VS Mode Manual Save File
* 5EDE-5F62 ~ VS Save Prompt master control, ending with A = Save Choice
* 5F63-5FC2 ~ Interrupt Save info text establishment
* 5FC3-5FC8 ~ Interrupt Save Mode text pointers
* 5FC9-5FE4 ~ Text for Interrupt Save Modes
* 5FE5-6057 ~ Establishes Interrupt Save screen graphics
* 6058-6095 ~ Text including coordinates for Interrupt Save
* 6096-60FB ~ Interrupt Save master control; ends with A = Confirmation for opening Interrupt Save
* 60FC-611E ~ Establishes Old Player Rank graphics
* 611F-6141 ~ Establishes New Player Rank graphics
* 6142-6158 ~ Establishes New Player Rank text
* 6159-6172 ~ Player Rank text pointers
* 6173-61C6 ~ Player Rank text
* 61C7-6294 ~ Establishes Player Rank Promotion basic graphics
* 6295-62C3 ~ Text for Player Promotion message
* 62C4-62ED ~ Window Shift according to B,C for DE frames
* 62EE-6343 ~ Switch between Player Ranks displays for DE frames
* 6344-6390 ~ Player Rank Promotion management
* 6391-63B0 ~ Stationary menu update for DE frames
* 63B1-6423 ~ Switch between new Medal display for DE frames
* 6424-64C0 ~ New Medal Obtained Screen management
* 64C1-64C4 ~ Text including coordinates Ownership particle
* 64C5-64D0 ~ Text including coordinates "..was awarded."
* 64D1-64F5 ~ Clears various addresses to prepare the game
* 662E-6636 ~ Text: "Save?"
* 6637-6663 ~ Sets up "OK/NO" with "OK" highlighted at BC
* 6664-6690 ~ Sets up "OK/NO" with "NO" highlighted at BC
* 6691-6752 ~ VRA1:(($8F30 + A * 16)~($8FFF + A * 16)) holds mode menu tile graphics basics; mode menu graphics basics established accordingly
* 6753-6790 ~ Establishes battle screen's border graphics basic information
* 6791-67FC ~ Updates menu shifting diagonally down-right BG graphics (A is modification of where menu BG graphics had been stored)
* 67FD-6883 ~ (VRA0:$9800 X~D,Y~E) = H + Prior Tiles, (VRA1:$9800 X~D,Y~E) = A
* 6884-6887 ~ (HL) = A, increment HL
* 6888-6900 ~ VRA0 rectangle BC, size DC holds H + Prior tiles (oddity: A is set to a byte that never gets used that is supposed to establish base Attributes--never needed, of course)
* 6901-69BD ~ Rectangle BC, size DE has VRA1 tiles hold A and VRA0 hold H + Prior Tiles (L is Side)
* 69BE-6A69 ~ VRA0 rectangle BC, size DE set to H + Prior Tiles (L is horizontal flip flag)
* 6A6A-6AD2 ~ Empties rectangle BC, size DE in current VRAM bank
* 6AD3-6B40 ~ Sets current VRAM Bank map tiles in rectangle BC, size DE, to A
* 6B41-6BB9 ~ Sets last bit in each byte in rectangle BC, size DE (done to ready sprite hiding)

* 712C-7136 ~ Empties ($CCD4), ($CCD5), and ($CCD9)
* 7137-7157 ~ Standard Mode Map Selection including Map Preview and Map Intel; A = 0 for full confirmation of choice, or -1 for full cancellation
* 7158-728D ~ Establishes graphics of Standard Mode Map Selection
* 728E-72C2 ~ Graphics changes for pressing Up on Standard Mode Map Selection
* 72C3-72FB ~ Graphics changes for pressing Down on Standard Mode Map Selection
* 72FC-7311 ~ If A is anywhere from 15 to 29, Set Carry Flag; otherwise, Set Zero Flag
* 7312-7358 ~ ($CCDB) = 2^(Standard maps available/15 - 1) - 1
* 7359-735C ~ Map sets unlocked flags established
* 735D-736D ~ Carry Flag Set by White Moon side maps unlocked
* 736E-73AC ~ Shifts options to White Moon side on Standard Mode Map Selection; if highlighting any Map from #16 to #30 when the 2nd half of White Moon's maps is locked, will shift 15 entries instead of 30
* 73AD-73C2 ~ If White Moon side maps are unlocked, prints on-screen White Moon side map choices (unused)
* 73C3-73FA ~ A = Last available Standard map
* 73FB-7412 ~ Carry Flag set by map being unlocked
* 7413-7496 ~ Controls for Standard Mode Map Selection; end with A = 0 for A Button press on unlocked map, or -1 for B Button press
* 7497-74A9 ~ Switches ($CCD9)
* 74AA-74F3 ~ Sets up ($CCD7) and ($CCD8) based on ($CCD9) switch
* 74F4-7508 ~ Establishes location of bullet pointing highlighted option on map choice of Standard Mode
* 7509-755B ~ Prints text for on-screen choices on map selection on Standard Mode
* 755C-75A8 ~ 5,Y holds Clear Icon if map is cleared
* 75A9-75DE ~ 6,Y holds Player's Country icon for Map, darkened for second half of maps for given country
* 75DF-75F3 ~ 3,Y holds Map # text
* 75F4-761D ~ 8,Y holds Map Name
* 761E-7643 ~ 12,Y+1 holds Map Dimensions
* 7644-7645 ~ Text: Multiplication symbol
* 7646-76B6 ~ 7,Y+1 holds Map's Day Record
* 76B7-76B9 ~ Text: Blanking
* 76BA-76C0 ~ A holds Map # of highlighted choice for map selection on Standard Mode
* 76C1-76E1 ~ A holds Map # based on Effective A for map selection on Standard Mode

Translation:

* 7982-7A54 ~ Text for Player Rank related stuff

== Block 23 (058000-05C000) ==

* 4000-400D ~ Empties ($C4A7~$C4AA)
* 406B-41B0 ~ Various basic statistics for Battle Screen setup
* 41B1-426B ~ Sets each side's default blanks and graphics attributes
* 426C-4324 ~ Establishes general terrain graphics for boths sides on the battle screen
* 4325-4400 ~ Battle Screen animation as a whole
* 4401-447A ~ Establishes animation of all 10 bullets, including inflicted HP removal of first attacking player, or each player for simultaneous attack
* 447B-4498 ~ Changes Red Star HP portion's graphics change flag, A = first tile of set of graphics to use (A = HP Portion #)
* 4499-44B6 ~ Changes White Moon HP portion's graphics change flag, A = first tile of set of graphics to use (A = HP Portion #)
* 451A-454A ~ For helicopter unit, BC holds total area of graphics, DE holds pointer to given helicopter's secondary graphics, A = 0; if not helicopter unit, Carry Flag is Set instead
* 454B-460E ~ Establishes side's unit's in-battle graphics tile information, including helicopter updating (A is side, B is Unit Type)
* 460F-47A9 ~ Establishes side's units' placements on Battle Screen (A is Unit Type, B is Side)
* 47AA-47DC ~ First color in given side's BG Palette changed according to given side's terrain
* 4845-496A ~ If unit portion needs to be removed due to HP reduction, unit portion gets removed, and A is set to 0; otherwise, A is set to 1
* 496B-498B ~ Carry Flag set by unit portion's continued survival
* 498C-49C7 ~ Establishes animation of all 10 bullets, including HP removal (A is Unit Type, B is Side)
* 49C8-4A1B ~ A = 0 for same altitude target, 1 for Surface VS Air, or 2 for Air VS Surface (A is side of currently attacking unit)
* 4A1C-4A31 ~ $C4AD holds B, HL holds ($4A48 + A * 2) 2 byte reverse

== Block 24 (05C000-060000) ==

* 4000-4062 ~ Clear all sprites in $C300 table, empties ($C4C8~$C4DB), WRA4($DB2C), WRA4($DB2E) 2 byte, and WRA4($D3AC~$DB2B)
* 4063-40DE ~ WRA4($D3AC + A * 32) 20 byte holds: H, ?, L, ?, ($C4CC) 4 byte, number of already active sprites, ($C4D1) 11 byte; A and ($C4D0) both hold number of already active sprites; WRA4($DB2C) incremented; $Dxx5~$DxxB prepared with sprite info
* 40DF-4114 ~ Handles all sprite advanced behavior for the frame with sprites needing to spawn first
* 4115-4145 ~ Intended Scroll set to 0, -3~0 for quake effect; 2 RNG Seeds used
* 4146-417B ~ Handles all sprite advanced behavior (normal non-moving behavior during timer 1) for the current frame
* 417C-418B ~ Zero Flag On if no valid sprite advanced behavior data
* 418C-41CC ~ Sprite location updated during advanced behavior
* 41CD-41DE ~ Decrement ($C4D3) 2 byte, HL = new ($C4D3)
* 41DF-42B0 ~ Sprite advanced behavior: behaves normally without moving during timer 1, standard behavior possibly moving from starting location or nonexistant after timer 1, then despawns or follows specific instruction after timer 2
* 42B1-43D2 ~ Sprite advanced behavior: may exist with standard behavior possibly moving from starting location after timer 1, then despawns or follows specific instruction after timer 2
* 43D3-4423 ~ HL 20 byte placed in ($C4C8) 20 byte
* 4424-4474 ~ ($C4C8) 20 byte placed in HL 20 byte
* 4475-4486 ~ HL = $D3AC + A * 32
* 4487-44A0 ~ Establishes battle screen terrain A graphics' basic tiles in HL
* 44A1-44CA ~ Establishes Battle Screen HP values graphics basic information
* 44CB-4539 ~ Second color of each palette of Red Star's Terrain set to RGB 27,28,29 for the 2nd and 3rd of every 4 procedure calls in sucession if Red Star is under attack by anything other than potential anti-air
* 453A-45A8 ~ Second color of each palette of White Moon's Terrain set to RGB 27,28,29 for the 2nd and 3rd of every 4 procedure calls in sucession if White Moon is under attack by anything other than potential anti-air
* 45A9-45AF ~ Second color of each palette of each country's Terrain set to RGB 27,28,29 for the 2nd and 3rd of every 4 procedure calls in sucession for each country under attack by anything other than potential anti-air
* 45B0-463F ~ Sets up basic terrain graphics at rectangle BC, size 9x3, on battle screen on given side; also sets up $D344 palettes for left side or $D354 palettes for right side (A is terrain, D is first tile within graphics tiles group, E is Palette value modification, and H is side)
* 4640-4754 ~ Sets up BG graphics tile placements and palette placements based on data in $CC50 bytes group; Horizontal Flip is determined by $CC64
* 4755-4767 ~ ($C4E0 + D * 8) to ($C4EF + D * 8) hold $17:(HL + A * 8) to $17:(HL + A * 8 + 15)
* 4768-477D ~ Sprite's activation timer set to current given attack bullet sprite's Pseudo RNG Seed Value 0~60
* 477E-479C ~ DE holds pointer to sprite stats modification table pointer for weapon's ammo and direction for first part for given side A
* 479D-47CA ~ DE holds pointer to sprite stats modification table pointer for weapon's ammo and direction (A is Weapon ID, BC is bytes skipped based on active part)
* 731B-7345 ~ Establishes 14 underscore characters at coordinates BC
* 7346-7351 ~ HL is starting address of unit A on Unit list
* 7352-735D ~ HL is starting address of unit A on secondary list on Unit List
* 735E-73A2 ~ Empties unit information row A on Unit List
* 73A3-73D3 ~ Toggle Unit List screen's Pointing Up/Down Mini-Arrows

== Block 25 (060000-064000) ==

* 4000-402D ~ Red Star Bullet Animation Instruction: Right 4 pixels/frame for 5 frames, despawns for 1 full second, then respawns effectively 12 pixels left of landing location, attack bullet shifts right 4 pixels/frame for 3 frames before managing 19 frame finishing explosion stuff
* 402E-405B ~ White Moon Bullet Animation Instruction: Left 4 pixels/frame for 5 frames, despawns for 1 full second, then respawns effectively 12 pixels right of landing location, attack bullet shifts left 4 pixels/frame for 3 frames before managing 19 frame finishing explosion stuff
* 405C-408F ~ Red Star Bullet Animation Instruction: Right 3 pixels/frame, Up 3 pixels/frame for 8 frames, despawns for 1 full second, then respawns effectively 8 pixels left, 16 pixels down of landing location, attack bullet shifts right 3 pixels/frame, up 3 pixels/frame for 5 frames before managing 19 frame finishing explosion stuff
* 4090-40C3 ~ Red Star Bullet Animation Instruction: Right 3 pixels/frame, Up 3 pixels/frame for 2 frames, despawns for 1 full second, then respawns effectively 12 pixels left, 23 pixels up of landing location, attack bullet shifts right 3 pixels/frame, down 3 pixels/frame for 6 frames before managing 19 frame finishing explosion stuff
* 40C4-40F7 ~ White Moon Bullet Animation Instruction: Left 3 pixels/frame, Up 3 pixels/frame for 2 frames, despawns for 1 full second, then respawns effectively 12 pixels right, 23 pixels up of landing location, attack bullet shifts left 3 pixels/frame, down 3 pixels/frame for 6 frames before managing 19 frame finishing explosion stuff
* 40F8-412B ~ Red Star Bullet Animation Instruction: Right 3 pixels/frame, Up 3 pixels/frame for 5 frames, despawns for 1 full second, then respawns effectively 12 pixels left of landing location, attack bullet shifts right 4 pixels/frame for 5 frames before managing 19 frame finishing Anti-Ship explosion stuff
* 412C-415F ~ White Moon Bullet Animation Instruction: Left 3 pixels/frame, Up 3 pixels/frame for 5 frames, despawns for 1 full second, then respawns effectively 12 pixels right of landing location, attack bullet shifts left 4 pixels/frame for 5 frames before managing 19 frame finishing Anti-Ship explosion stuff
* 4160-4193 ~ Red Star Bullet Animation Instruction: Right 3 pixels/frame, Down 3 pixels/frame for 7 frames, despawns for 1 full second, then respawns effectively 12 pixels left, 8 pixels down of landing location, attack bullet shifts right 3 pixels/frame, down 3 pixels/frame for 5 frames before managing 19 frame finishing explosion stuff
* 4194-41C7 ~ White Moon Bullet Animation Instruction: Left 3 pixels/frame, Up 3 pixels/frame for 3 frames, despawns for 1 full second, then respawns effectively 8 pixels right, 16 pixels up of landing location, attack bullet shifts left 3 pixels/frame, up 3 pixels/frame for 5 frames before managing 19 frame finishing explosion stuff
* 41C8-41FB ~ White Moon Bullet Animation Instruction: Left 3 pixels/frame, Down 3 pixels/frame for 7 frames, despawns for 1 full second, then respawns effectively 12 pixels right, 8 pixels up of landing location, attack bullet shifts left 3 pixels/frame, down 3 pixels/frame for 5 frames before managing 19 frame finishing explosion stuff
* 41FC-4875 ~ Hit Sound # tables for weapon types, using each unit type (typos result in Humvee+ being treated as Armor Family for the cannon weapons)
* 4876-48A3 ~ A = Sound # for hit, value of 111~120 for Red Star attack, or 37~46 for White Moon attack (A = Weapon #, B = Unit Type)
* 48A4-48CE ~ Sets up flags related to weapons other than potential anti-air (A is attacker's weapon)
* 48CF-48FA ~ Sets up Hit Sound and Quake Effect of given bullet
* 48FB-4927 ~ Sets up sound #30~36 for Red Star weapon, or #104~110 for White Moon weapon
* 4828-4848 ~ Sound numbers for weapon bullet sprites, adds 74 for White Moon
* 4949-4971 ~ Establishes bullet and explosion graphics' basic tiles
* 4972-4981 ~ Establishes bullet and explosion graphics' palettes
* 4982-49CE ~ Bullet Animation Instruction (A is Altitude Aim, B is Side) (unused)
* 49CF-4A1C ~ Bullet Animation Instruction for same altitude units (A is Weapon #, B is Side) (unused)
* 4A1D-4A49 ~ Establishes graphics of divider on Battle Screen
* 4A4A-4A5F ~ Loads current seed of ($C4BD) set with Psuedo RNG value 0~60
* 4A60-4A6C ~ ($C4BD) seeds set with predetermined values in $4A6D table (unused)
* 4A6D-4A76 ~ predetermined values: 0, 4, 8, 16, 32, 53, 70, 87, 104, 121 (unused)
* 4A77-4AA9 ~ Bullet launch sprite meant to be established (unused, and for good reason too)
* 4AAA-4ABD ~ A = 1 for Air, 2 for Sea, 0 otherwise
* 4ABE-4ADC ~ A = 0 for Land, 1 for Air, 2 for Ship, or 3 for Submarine
* 4ADD-4AF1 ~ A = 0 for land unit, jet, or helicopter; 1 for big plane or sea unit
* 4AF2-4B21 ~ Animation Instruction: Red Star's attack bullet moves right 4 pixels/frame for 2 frames, ending instruction of $18:$4B22 (right below)
* 4B22-4B85 ~ Animation instruction: Resets $C4DE to 1, Wait 60 frames before respawning Red Star's attack bullet effectively 12 pixels left of landing location, attack bullet shifts right 4 pixels/frame for 3 frames before managing finishing explosion stuff
* 4B86-4BB5 ~ Animation Instruction: White Moon's attack bullet moves left 4 pixels/frame for 2 frames, ending instruction of $18:$4BB6 (right below)
* 4BB6-4C19 ~ Animation instruction: Resets $C4DE to 1, Wait 60 frames before respawning White Moon's attack bullet effectively 12 pixels right of landing location, attack bullet shifts left 4 pixels/frame for 3 frames before managing finishing explosion stuff
* 4C1A-4C4F ~ Animation instruction: Red Star's attack bullet moves right 3 pixels/frame, up 3 pixels/frame for 5 frames, ending instruction of $18:$4C50 (right below)
* 4C50-4CB5 ~ Animation instruction: Resets $C4DE to 1, Wait 60 frames before respawning Red Star's attack bullet effectively 8 pixels left and 16 pixels down of landing location, attack bullet shifts same rate as in calling instruction for 5 frames before managing finishing explosion stuff
* 4CB6-4CEB ~ Animation instruction: Red Star's attack bullet moves right 3 pixels/frame, up 3 pixels/frame for 10 frames, ending instruction of $18:$4CEC (right below)
* 4CEC-4D4B ~ Animation instruction: Resets $C4DE to 1, Wait 60 frames before respawning Red Star's attack bullet effectively 12 pixels left and 23 pixels up of landing location as second part version, attack bullet shifts right/left unchanged, down 3 pixels/frame for 6 frames before managing finishing explosion stuff
* 4D4C-4D81 ~ Animation Instruction: Red Star's attack bullet moves right 3 pixels/frame, up 3 pixel/frame for 5 frames, ending instruction of $18:$4D82 (right below)
* 4D82-4DE5 ~ Animation Instruction: Resets $C4DE to 1, Wait 60 frames before respawning Red Star's attack bullet effectively 12 pixels left of landing location, attack bullet shifts right 4 pixels/frame for 5 frames before managing finishing Anti-Ship explosion stuff
* 4DE6-4E1B ~ Animation instruction: White Moon's attack bullet moves left 3 pixels/frame, up 3 pixels/frame for 10 frames, ending instruction of $18:$4E1C (right below)
* 4E1C-4E7B ~ Animation Instruction: Resets $C4DE to 1, Wait 60 frames before respawning White Moon's attack bullet effectively 12 pixels right and 23 pixels up of landing location, attack bullet shifts right/left unchanged, down 3 pixels/frame for 6 frames before managing finishing explosion stuff
* 4E7C-4EB1 ~ Animation Instruction: White Moon's attack bullet moves left 3 pixels/frame, up 3 pixel/frame for 5 frames, ending instruction of $18:$4EB2 (right below)
* 4EB2-4F15 ~ Animation Instruction: Resets $C4DE to 1, Wait 60 frames before respawning White Moon's attack bullet effectively 12 pixels right of landing location, attack bullet shifts left 4 pixels/frame for 5 frames before managing finishing Anti-Ship explosion stuff
* 4F16-4F53 ~ Sets up attack bullet's centralizing Y position
* 4F54-4F69 ~ Sets up gravity-arcing attack bullet's centralizing Y position starting from 23 pixels above
* 4F6A-4F8A ~ bullet location Y pixel coordinate relative respawn tables
* 4F8B-4894 ~ bullet location X pixel coordinate relative respawn table
* 4F95-4FAC ~ Sets up attack bullet's centralizing X position from Red Star to White Moon
* 4FAD-4FC4 ~ Sets up attack bullet's centralizing X position from White Moon to Red Star
* 4FC5-4FF8 ~ Animation Instruction: White Moon's attack bullet moves left 3 pixels/frame, up 3 pixel/frame for 5 frames, ending instruction of $18:$4FF9 (right below)
* 4FF9-505E ~ Animation Instruction: Resets $C4DE to 1, Wait 60 frames before respawning White Moon's attack bullet effectively 8 pixels right and 16 pixels down of landing location, attack bullet shifts same rate as in calling instruction for 5 frames before managing finishing explosion stuff
* 505F-5092 ~ Animation Instruction: Red Star's attack bullet moves right 3 pixels/frame, down 3 pixels/frame for 7 frames, ending instruction of $18:$5093 (right below)
* 5093-50F0 ~ Animation Instruction: Resets $C4DE to 1, Wait 60 frames before respawning Red Star's attack bullet effectively 12 pixels left, 8 pixels up of landing location as second part version, attack bullet shifts right/left unchanged, up/down unchanged for 5 frames before managing finishing explosion stuff
* 50F1-5124 ~ Animation Instruction: White Moon's attack bullet moves left 3 pixels/frame, down 3 pixels/frame for 7 frames, ending instruction of $18:$5125 (right below)
* 5125-5182 ~ Animation Instruction: Resets $C4DE to 1, Wait 60 frames before respawning White Moon's attack bullet effectively 12 pixels right, 8 pixels up of landing location as second part version, attack bullet shifts right/left unchanged, up/down unchanged for 5 frames before managing finishing explosion stuff
* 5183-5198 ~ Prepares for setting up Blunted Explosion sprite, also sets Timer 2 to 19 frames
* 5199-51A8 ~ Sets up Unit Explosion Horizontal Flip sprite
* 51A9-51B8 ~ Sets up Unit Explosion sprite
* 51B9-51C8 ~ Sets up Anti-Ship Missile Explosion sprite
* 51C9-51D8 ~ Sets up Red Star VS White Moon Surface-To-Air Explosion sprite
* 51D9-51E2 ~ Sets up Blunted Explosion sprite, basic existence timer of 19 frames
* 51E3-5264 ~ Animation instruction: finishing explosion going right sprite, remove unit portion as necessary, lasts 19 frames and sets up Hit Sound and Quake Effect
* 5265-52E6 ~ Animation instruction: finishing explosion going left sprite, remove unit portion as necessary, lasts 19 frames and sets up Hit Sound and Quake Effect
* 52E7-535E ~ Animation instruction: finishing explosion by Anti-Ship Missile sprite, remove unit portion as necessary, lasts 19 frames and sets up Hit Sound and Quake Effect
* 535F-53D6 ~ Animation instruction: finishing explosion by (Red Star) Surface-To-Air sprite, remove unit portion as necessary, lasts 19 frames and sets up Hit Sound and Quake Effect
* 53D7-53DE ~ Blanks $C615 and $C618

* 5444-5447 ~ IR Port Data Read disabled, LED Off, Receiving IR Signal; ($C901) = -1

* 56D4-5721 ~ Inserts text of online communication status at 1,1 (L is which message to use if H is 0; if H isn't 0, HL is coordinates of message in ROM Block B)

* 5778-5809 ~ Inserts text of online communication button check message at 14,1 (L is which message to use if H is 0; if H isn't 0, HL is coordinates of message in ROM Block B)

* 5890-58B7 ~ 20 max value meter graphics established at Coordinates 10,16 (A is the current fill value)

* 58D4-58E2 ~ Disables Interrupt, makes sure that IR Port Data Read is enabled; if it needs to, ($C900) 10 byte holds 1, -1, 6/14, 8/20, 2/8, 4/13, 5/12, 110/220, 0, 0 (Normal Speed uses first value, Double Speed uses second)
* 58E3-58E7 ~ IR Port Data Read disabled, LED Off, Receiving IR Signal; ($C901) = -1

* 5BC8-5BF0 ~ Clears WRA4($DC52~DC5A) Even Inclusive Addresses and WRA4($DC2B)
* 5BF1-5BF4 ~ VS Mode management as a whole ($18:$5BF4 is actually a simple RET not used here)

* 5BFA-5C07 ~ VS Mode Method Selection outline

* 5C63-5C6F ~ VS Mode Method Selection outline backup
* 5C70-5C90 ~ VS Mode Man Selected outline
* 5C91-5C9F ~ VS Mode IR Comm Country Selection outline backup
* 5CA0-5CCA ~ VS Mode IR Comm selected outline (WARNING: $18:$5CB2 should be $0F instead of $0B; DO NOT OPEN ANY INTERRUPT SAVE THIS WAY!)
* 5CCB-5CD9 ~ VS Mode IR Comm Country Selection outline
* 5CDA-5D0F ~ VS Mode Map Type Selection outline for primary Game Boy
* 5D10-5D25 ~ VS Mode Standard Map Play for primary Game Boy
* 5D3B-5D65 ~ VS Mode Edit Map Play for primary Game Boy
* 5D66-5D7B ~ Online Play for Receiving/White Moon Player
* 5D7C-5E5A ~ Establishes VS Method selection screen graphics
* 5E5B-5E64 ~ Text "Battle Method"
* 5E65-5F0A ~ VS Method Selection master control, ending with A = 0 for MAN, 1 for IR COMM, or -1 for Back
* 5F0B-5F1F ~ Establishes graphics coordinates of Pointing Right Bullet on VS Method selection
* 5F20-5F34 ~ Establishes graphics coordinates of Pointing Right Bullet on IR Comm Country selection
* 5F35-6030 ~ Establishes graphics as a whole of IR Comm Country selection
* 6031-6043 ~ Text including Coordinates of each Country
* 6044-6074 ~ Choice description text setup for IR Comm VS Mode
* 6075-609C ~ Text "Battle as Red Star. Please avoid same."
* 609D-60C5 ~ Text "Battle as White Moon. Please avoid same."
* 60C6-614F ~ IR Comm Country Selection master control; ends with A = Country Choice for A Button Press, or -1 for Back
* 6150-6259 ~ Initializes graphics of IR Comm Send/Get Choice screen
* 625A-62A3 ~ Manages graphics involving highlighted choice on IR Comm Send/Get Choice screen
* 62A4-632E ~ IR Comm Send/Get Selection master control; ends with A = 0 for Send, 1 for Get, or -1 for Back
* 632F-6342 ~ Text including Coordinates for Send/Get
* 6343-6388 ~ Text of descriptions for Send and Get options
* 6389-639D ~ Establishes graphic coordinates of Pointing Right Bullet on VS Map Type Select
* 639E-64D2 ~ Establishes graphics of VS Map Type Select as a whole
* 64D3-6503 ~ Print description of highlighted choice on VS Map Type Selection
* 6504-6546 ~ Text for description of highlighted choices on VS Map Type Selection
* 6547-65CB ~ VS Map Type Select master control, ending with A = 0 for Standard Mode, 1 for Edit, or -1 for Back
* 65CC-65D7 ~ Text including Coordinates: "STANDARD MODE"
* 65D8-65DF ~ Text including Coordinates: "EDIT"
* 65E0-6619 ~ Blanks all Unit List memory bytes
* 661A-6663 ~ Grabs active player's stored memory for Unit List
* 6664-66AD ~ Stores information of Unit List into active player's stored memory
* 66AE-6793 ~ Establishes Unit List graphics as a whole
* 6794-6797 ~ Establishes basic stats for units on Unit list
* 6798-6872 ~ Establishes information graphics on Unit List
* 6873-68D7 ~ Establishes stat icons for units on Unit List
* 68D8-68EA ~ A is set to highlighted unit on Unit List
* 68EB-6913 ~ Reserve flag for currently printing stats unit established
* 6914-693C ~ "Transport" flag for currently printing stats unit established
* 693D-6965 ~ "End Turn" flag for currently printing stats unit established
* 6966-698E ~ "End Turn + Transport" flag for currently printing stats unit established
* 698F-69AF ~ A = Unit A's Load Count
* 69B0-6A1A ~ Establishes currently printing stats unit's status graphic
* 6A1B-6A83 ~ Establishes printing information foundation on Unit List
* 6A84-6C1D ~ Prints listed units' stats on Unit List
* 6C1E-6C38 ~ Highlighted unit's type name text set up at coordinates BC
* 6C39-6C4B ~ Unit type A's name printed at coordinates BC
* 6C4C-6C6B ~ Badge count printed in place of unit count for Unit List
* 6C6C-6C71 ~ Text for Badge count placeholder
* 6C72-6C83 ~ Establishes unit count text in Unit List
* 6C84-6C90 ~ A = Highlighted unit's #
* 6C91-6C9D ~ A = Highlighted unit's Type
* 6C9E-6CB7 ~ Carry Flag set by highlighted unit not in Reserve
* 6CB8-6EE1 ~ Controls for Unit List; A = Selected Unit for Deploy or mere selection, or -1 for cancellation or all deletion
* 6EE2-6EEC ~ $DC7F set to possible Promotion Unit Type of highlighted unit on Unit List
* 6EED-6FC2 ~ Establishes graphics for Unit List's Management menu
* 6FC3-6FD9 ~ Reestablishes basic information graphics on Unit List
* 6FDA-7004 ~ "OK/NO" with "NO" highlighted set starting at 8,11
* 7005-702F ~ "OK/NO" with "OK" highlighted set starting at 8,11
* 7030-70CC ~ Controls for Delete confirmation on Unit List, ending with A = 0 for OK, or -1 for NO
* 70CD-70D8 ~ Text including coordinates "Dispose?"
* 70D9-70ED ~ Highlighted unit's map graphics set up at VRA1($8980)
* 70EE-7115 ~ Highlighted unit's promoted form map graphics set up at VRA1($89C0)
* 7116-7152 ~ Establishes unit graphics state for unit promotion, with A = 0 using the non-promoted unit state and any other result using the promoted unit state
* 7153-7342 ~ Action of command issued on Unit List's Management menu; Deploy sets $DC7A, Badge sets $DC7B, and Delete (confirm) or Promote sets Carry Flag
* 7343-734D ~ Text for unit promotion event
* 734E-73DE ~ Controls for Unit List's Management menu; ends with backing out for Cancel, Delete (confirm), or Promote; or $DC7A set to 1 for Deploy
* 73DF-7445 ~ Establishes Unit List's Organize menu graphics as a whole
* 7446-745A ~ Establishes Pointing Right Bullet sprite's location on Unit List
* 745B-746F ~ Establishes Pointing Right Bullet sprite's location on Unit List's Organize menu
* 7470-7493 ~ Establishes Pointing Right Bullet sprite's location on Unit List's Management menu, as well as Unit/Badge Count text
* 7494-74FC ~ Added entries on Unit List's secondary list are land units (unused)
* 74FD-7565 ~ Added entries on Unit List's secondary list are air units (unused)
* 7566-7569 ~ Sorts the Unit List by Type, with earliest at top to latest at bottom
* 756A-7570 ~ Sorts the Unit List with units in Reserve, then units not in Reserve
* 7571-7577 ~ Sorts the Unit List with units not yet moved, then units already moved
* 7578-757B ~ Sorts the Unit List by Level, with highest at top to lowest at bottom
* 757C-7592 ~ Sorts the Unit List by Type, with earliest at top to latest at bottom
* 7593-75A9 ~ Sorts the Unit List by Level, with highest at top to lowest at bottom
* 75AA-75AD ~ Sorts the Unit List by Fuel, with lowest at top to highest at bottom
* 75AE-75C4 ~ Sorts the Unit List by Fuel, with lowest at top to highest at bottom
* 75C5-75C8 ~ Sorts the Unit List by HP, with lowest at top to highest at bottom
* 75C9-75DF ~ Sorts the Unit List by HP, with lowest at top to highest at bottom
* 75E0-762F ~ Stats of Units A and B switch places on Unit List
* 7630-7661 ~ A = Unit A's value with stat B
* 7662-76D9 ~ Sorts the Unit List by given stat, with lowest at top to highest at bottom
* 76DA-7751 ~ Sorts the Unit List by given stat, with highest at top to lowest at bottom
* 7752-77BA ~ Added entries on Unit List's secondary list are sea units (unused)
* 77BB-782C ~ Added entries on Unit List's secondary list are units not in Reserve
* 782D-789C ~ Added entries on Unit List's secondary list are units in Reserve
* 789D-790E ~ Added entries on Unit List's secondary list are units not yet moved
* 790F-797E ~ Added entries on Unit List's secondary list are units already moved
* 797F-79E6 ~ Handles unit sorting on Unit List
* 79E7-7A73 ~ Controls for Unit List's Organize menu
* 7A74-7AAD ~ Text including Coordinates for Unit Sorting options
* 7AAE-7AB7 ~ Text of ASCII characters for Unit Levels
* 7AB8-7E77 ~ Graphics tiles for Unit Sorting screen
* 7E78-7EB7 ~ Palettes of Unit Sorting screen
* 7EB8-7F01 ~ Text decryption for things like unit names
* 7F02-7F41 ~ Establishes basic stats for units on Unit list
* 7F42-7F5B ~ HL 5 byte loaded with A, unit's HP, unit's Fuel, unit's Level, and unit's #; HL incremented by 5
* 7F5C-7F61 ~ Text including coordinates: "/50" for unit count on Unit list screen
* 7F62-7F98 ~ Updates country's unit stats according to reordering, including Loading Unit #s
* 7F99-7FD5 ~ All units' Loading Unit #s updated as necessary for Unit List
* 7FD6-7FE3 ~ A = Unit A's #
* 7FE4-7FFB ~ A = # of current entries in Unit List before initial A matches a unit's #

== Block 26 (064000-068000) ==

* 4F0E-4F22 ~ Carry Flag Set if the 5th, 6th, 13th, 14th, 21st, and 22nd bits of HL are active; otherwise, A = 0
* 5D42-5D70 ~ ($DA44) 4 byte holds 4 digits of HL in raw numbers
* 5D71-5D8E ~ Carry Flag Set for HL outside 1900~2005 range

== Block 27 (068000-06C000) ==

* 405B-4184 ~ Handles backdrop graphics as a whole (A is Backdrop number, B is used palette set)
* 4185-42AE ~ Handles backdrop graphics as a whole (A is Backdrop number, B is used palette set) (difference not clear)
* 42AF-43D6 ~ Handles backdrop graphics as a whole (A is Backdrop number, B is used palette set) (starting Y of main attraction not set to 4)
* 43D7-4436 ~ Sprite Group A's graphic base tiles placed in HL in as many bytes as needed, Sprite Group A's palettes also established
* 4437-44C5 ~ Likely meant to established Gunship-related sprite graphics; seems to be unused, and for the better by the looks of things with the coding
* 44C6-44EA ~ Given backdrop's graphics data pointer table established within WRA4($D2FE) 17 byte (A is backdrop number)
* 44EB-450F ~ WRA4:($D30F) 9 byte = ($6875 + A * 9) 9 byte
* 4510-4540 ~ B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
* 4541-4561 ~ Plays out intended process indicated by A
* 457A-45A4 ~ B holds unit A sprite's ROM block, DE holds location of first list of pointers to sprite stats modification tables for unit A sprite, WRA4($D33C) set to unit A sprite's first pointer number, unit A sprite's group graphics tiles established starting at ($8000)
* 45D0-468B ~ Capture successful animation plays out for up to 8 seconds
* 468C-4699 ~ A = 65 for Harbor, 105 for City, 100 for Airports, 90 for anything else
* 469A-46B0 ~ H holds $A8 for Harbor, $B0 for anything else; L holds $70 for HQ, $68 for anything else
* 46B1-46C7 ~ H holds $48 for City or Airports, $60 for Harbor, or $58 for anything else; L holds $70 for HQ, $68 for anything else (based on ($C4A1))
* 46C8-46D0 ~ timers per property for capturing infantry first part animation
* 46D1-46E2 ~ base coordinates per property for capturing infantry first part animation start
* 46E3-46F4 ~ base coordinates per property for capturing infantry second part animation start
* 46F5-47B4 ~ Capture non-successful animation plays out for up to 9 seconds
* 47B5-486E ~ Capture animation unconditional portion plays out for 210 frames; if A, B, or Start is pressed, procedure is ended prematurely with Carry Flag set and ending sound not used
* 486F-493C ~ Work Car action animation plays out for up to 4 seconds (also, convenient typo prevents graphics bug with worker sprite's existence)
* 5042-5062 ~ A = 0 for land unit or invalid; 1 for STOL plane; 2 for sea unit; or 3 for VTOL air unit
* 5111-5133 ~ A = 1 for Transport Plane, 2 for Lander, 0 for otherwise
* 5134-517A ~ Sets up backdrop for involved transport-related scene; also sets up unit sprite hiding for portion involving the transport for Lander/Transport Plane
* 58F3-5912 ~ Sets up backdrop for Aircraft Carrier; also defaults SCX to 244 for STOL Unloading
* 5AD5-5AEB ~ A = 0 for vertical takeoff air unit, 1 otherwise
* 5B78-5BB9 ~ Helicopter/Lite Attacker landing process animation set up--lasts a total of 333 frames (53 from the initial instruction, then an additional 280 from the subprocedures)
* 5BBA-5BFB ~ Animation instruction: shifting set to down 0.5 pixels/frame for 50 frames, also changes animation stage default for helicopter
* 5BFC-5C25 ~ Animation instruction: shifting set to down 0.25 pixels/frame for 48 frames
* 5C26-5C76 ~ Animation instruction: shifting ended, animation deceleration for 152 frames
* 5C77-5C98 ~ Animation instruction: sprite clear-up after 30 frames
* 5C99-5CD7 ~ STOL jet plane landing process animation set up--lasts a total of 230 frames (20 from the initial instruction, then an additional 210 from the subprocedures)
* 5CD8-5D02 ~ Animation instruction: shifting set to left 0 pixel/frame, down 0.140625 pixels/frame for 80 frames
* 5D03-5D2E ~ Animation instruction: shifting set to left 1 pixel/frame, down 0 pixels/frame for 40 frames
* 5D2F-5D53 ~ Animation instruction: shifting set to left 0.5 pixels/frame for 30 frames
* 5D54-5D79 ~ Animation instruction: shifting set to left 0.25 pixels/frame for 30 frames
* 5D7A-5D9B ~ Animation instruction: sprite clear-up after 30 frames, shifting also ended
* 5DE8-5E80 ~ Loading on Aircraft Carrier animation plays out for up to 4 seconds for VTOL air unit, or 5 seconds for STOL air unit
* 5E81-5E95 ~ A = 0 for land unit supplier, 1 for air unit supplier, 2 for sea unit supplier
* 6089-60A3 ~ Plays out successful Headquarters capture process (A is defeated army)
* 60A4-6262 ~ Rout movie plays out for up to 14 seconds (A is winning army)
* 6263-637F ~ Yield movie plays out for up to 3.5 seconds (A is defeated army)

* 6A2B-6FBA ~ Graphics sorting for Backdrop Land Summon (20x10 placement tables, 45 tiles, 1 Palette Set)
* 6FBB-6FC3 ~ Empties all graphics to prepare graphical scene

* 76E2-76F0 ~ A = 2 if already halfway through Standard, 0 otherwise
* 76F1-76FF ~ A = 8 if already completed Standard

* 77D2-7815 ~ Window Shift for Standard Complete, ending with Carry Flag set if not hitting natural timeout (BC is per frame shift, DE is timer)

== Block 28 (06C000-070000) ==

Graphics sorted as follows for each backdrop:
*First part: table of tile placements
*Second part: table of palette placements
*Third part: graphic tiles
*Fourth part: Palette Sets--3 unless otherwise noted

Backdrops:
* 4000-47AF ~ Headquarters (20x10 placement tables, 86 tiles)
* 47B0-4FAF ~ City (20x10 placement tables, 91 tiles)
* 4FB0-54DF ~ Factory (20x10 placement tables, 46 tiles)
* 54E0-5DCF ~ Harbor (20x10 placement tables, 98 tiles)
* 5D50-64BF ~ Airport (20x10 placement tables, 82 tiles)
* 64C0-6CAF ~ Simple Airport (20x10 placement tables, 90 tiles)
* 6CB0-733F ~ Communication Tower (20x10 placement tables, 68 tiles)
* 7340-781F ~ Bridge (20x10 placement tables, 49 tiles, 1 Palette Set)
* 7820-7BAF ~ Road (20x10 placement tables, 28 tiles, 1 Palette Set)

== Block 29 (070000-074000) ==

Graphics sorted as follows for each backdrop:
*First part: table of tile placements
*Second part: table of palette placements
*Third part: graphic tiles
*Fourth part: Palette Sets--3 unless otherwise noted

Backdrops:
* 4000-44CF ~ Plains (20x10 placement tables, 48 tiles)
* 44D0-496F ~ Skies (32x10 placement tables, 30 tiles)
* 4970-4F5F ~ Open Seas (32x10 placement tables, 51 tiles)
* 4F60-556F ~ Transport Plane (20x10 placement tables, 64 tiles)
* 5570-5BAF ~ Lander (20x10 placement tables, 67 tiles)
* 5BB0-67EF ~ Aircraft Carrier Zoomed Out (32x10 placement tables, 148 tiles)
* 67F0-6D1F ~ Aircraft Carrier Zoomed In (20x10 placement tables, 50 tiles)
* 6D20-745F ~ Communication Tower (Summon) (32x10 placement tables, 68 tiles)
* 763B-7E0A ~ Supply Truck (20x10 placement tables, 92 tiles)

== Block 30 (074000-078000) ==

== Block 31 (078000-07C000) ==

== Block 32 (07C000-080000) ==

== Block 33 (080000-084000) ==

== Block 34 (084000-088000) ==

== Block 35 (088000-08C000) ==

* 620D-6219 ~ Frame update affecting sprites and base menu BG graphics
* 621A-6246 ~ ($9800 + B + C * 32 ~ $980F + B + C * 32) set to 107 for VRA0 and 8 for VRA1
* 6247-626C ~ Basic setup for table rectangle BC, size DE including defaulted palette for interior's tiles

== Block 36 (08C000-090000) ==

* 4000-4042 ~ Plays out Beginner/Campaign Ending (A is Ending # with 5 being used for Graduation)
* 4043-4135 ~ Establishes given ending's summary screen picture graphics
* 4136-4141 ~ pointers for tables of information for Endings' individual screens
* 4142-417D ~ table of information for each Ending's individual screen in order S, A, B, C, D, Graduation; bytes in order: ROM Block with screen's information, graphics location pointer (2 bytes), palette location pointer (2 bytes), VRA0 information location pointer (2 bytes), VRA1 information location pointer (2 bytes), song # of ending
* 417E-4216 ~ Readies text portion for given ending's summary screen
* 4217-42BD ~ Controls for text typing on given ending's summary screen; A = 0 for Exit; 2 for starting next 6 lines; or 1 otherwise
* 42BE-42CC ~ Check if respective obtained ending flag is active
* 42D5-42E7 ~ Wait until Start or A is pressed to blank the given ending's summary screen Pointing Down Mini-Arrow
* 42E8-4302 ~ Wait A Frames or until Start or A is pressed to blank the Blinking Computer Typing Icon
* 4303-4315 ~ Wait until Start or A is pressed to blank the Blinking Computer Typing Icon

* 4773-48A4 ~ "oshimai" screen animation stuff
* 48A5-48F4 ~ Computer Typing with message "LET'S PLAY NEXT 15 AREA"
* 48AC-48F4 ~ Computer Typing of Game Intro
* 48B1-48F4 ~ Computer Typing of involved ending
* 48F5-498D ~ Establishes Computer Typing graphics and important information
* 498E-4A48 ~ Computer Typing character management; ends with A = 0 for ending, 2 for next set of lines, or 1 for neither
* 4A49-4A6D ~ Sets up Computer Typing Blinker location

* 4C59-4FC6 ~ Staff Roll text

== Block 37 (090000-094000) ==



== Block 38 (094000-098000) ==

* 4000-4059 ~ Campaign Mode slow clear dialogue pointers
* 405A-40B3 ~ Campaign Mode briefing pointers
* 40B4-40B5 ~ Campaign Mode defeat dialogue pointer
* 40B6-410F ~ Campaign Mode fast clear dialogue pointers
* 4110-42BD ~ Controls for Linkup Screen; A = Buttons active upon exiting Linkup
* 42BE-43B2 ~ Prints variable stuff for Unit # A for Linkup stuff
* 43B3-43BC ~ Text: unit Levels
* 43BD-4474 ~ Prints button help and stat icons on Linkup screen
* 4475-448B ~ Prints highlighted HP values of units on Linkup screen
* 448C-4498 ~ digs up destination value (A is just cleared map, B is whether or not the map has been cleared fast)
* 4499-44F2 ~ post-clear destinations table for Campaign, any value above $7F leads to an ending and its respective Medal instead (tabled in twos for each map, with Slow Clear destination listed first and Fast Clear destination listed second)

* 44FD-4701 ~ Campaign Map Indirect View master control
* 4505-4701 ~ Campaign Map Selection Mode master control, ends with A = Campaign Map # after A Button press, or -1 after B Button press
* 4702-471D ~ Establishes Campaign Map Palettes
* 471E-4763 ~ Establishes Campaign Zone's individual graphics
* 4764-476D ~ Campaign Zone's individual graphics pointers, used with Bank $24
* 476E-4790 ~ Establishes Highlighted Map Cursor sprite location for Campaign Map
* 4791-47A2 ~ Highlighted Map Cursor location coordinates sets (2 bytes per set) 
* 47A3-47BB ~ A = selected Campaign Map #
* 47BC-4818 ~ Establishes Selected Campaign Map's text info
* 4819-488D ~ Establishes Campaign Maps palettes for given status
* 488E-489F ~ Individual Campaign map graphics coordinates sets (2 bytes per set, Y before X out of programming necessity)
* 48A0-48AC ~ Text "Win Count"
* 48AD-48F8 ~ Briefing Review screen handling with A set to -1 for pressing B at any point, or 0 for pressing continuation button (A is given map, or 16 for Standard; B is given Mode with Standard treated as Beginner)
* 48BC-48F8 ~ Briefing/Closure text handling with A set to -1 for pressing B at any point, or 0 for pressing continuation button (A is given map, or 16 for Standard; B is given Mode with Standard treated as Beginner)
* 48F9-491E ~ ($C61B) set to 10 for Briefing, or 8 for Clear; for Campaign Clear, A = Destination value; Carry Set for not Ending
* 491F-4962 ~ Sets up map's name text within box for that
* 4963-4AC1 ~ Sets up Briefing/Closure screen graphics
* 4AC2-4B82 ~ A = 1 for continued typing on current text portion, 2 for start of next text portion, 0 otherwise; ($C61B) set to -1 for pressing B, or 0 for pressing A at the end of the entire text or Start at any point
* 4B83-4BA0 ~ Waits for further input as a result of typing for current text screen finished
* 4BA1-4BA8 ~ pointers for given Mode text pointers
* 4BA9-4BC8 ~ Beginner Mode briefing pointers
* 4BC9-4BCA ~ Standard Mode briefing pointer
* 4BCB-5BE8 ~ Beginner Mode briefing dialogue
* 5BE9-5C14 ~ Standard Mode briefing dialogue

* 5DA5-5DD8 ~ Controls for Unit Information Screen as a whole including unit selection list (A is Unit Type, B is Side; A is -1 if no Unit Type)
* 5DD9-5E00 ~ Empties within WRA3: $D979, $D97A, $D97C, $DA40, and $D9CA~$D9CD
* 5E01-5E07 ~ Establishes double-dash text at coordinates BC
* 5E08-5E1D ~ Sets up text for unit name at location BC (A is Unit Type, no side)
* 5E1E-5E3E ~ Sets up Unit Family text at coordinates BC
* 5E3F-5E48 ~ Pointers for text of Unit Family names
* 5E49-5E7A ~ Text: Unit Family names
* 5E7B-5E99 ~ Max Fuel line handled at coordinates BC
* 5E9A-5ED7 ~ Weapon's name and range established for weapon stats screen (BC is coordinates for name)
* 5ED8-5EFC ~ Weapon's name placed at coordinates BC (unused)
* 5EFD-5F0F ~ Base Focus value placed at coordinates BC
* 5F10-5F22 ~ Focus Loss value placed at coordinates BC
* 5F23-5F35 ~ Movement Power value placed at coordinates BC
* 5F36-5F60 ~ Establishes Up/Down scrolling pointer sprites of submenu
* 5F61-5F8B ~ Establishes Up/Down scrolling pointer sprites of submenu (5th row divider version)
* 5F8C-5FB6 ~ Establishes Up/Down scrolling pointer sprites of submenu (6th row divider version)
* 5FB7-5FBF ~ Button update, next frame, sprite update, A = controls considered active
* 5FC0-5FCA ~ Basic setup for table rectangle 0~19,0~17 including defaulted palette for interior's tiles
* 5FCB-600D ~ Sets up Border Separator graphics on Row C
* 600E-60D7 ~ Sets up default graphics information for submenu, including Border Separator defaulting on the 4th row
* 60D8-60F8 ~ Text: terse how-to about Unit Information Screen
* 60F9-611C ~ Updates scroll arrow sprites for Unit Information Screen's unit selection
* 611D-6123 ~ Enable Pointing Up Mini-Arrow sprite of Unit Information Screen's unit selection
* 6124-612A ~ Enable Pointing Down Mini-Arrow sprite of Unit Information Screen's unit selection
* 612B-6131 ~ Disable Pointing Up Mini-Arrow sprite of Unit Information Screen's unit selection
* 6132-6138 ~ Disable Pointing Down Mini-Arrow sprite of Unit Information Screen's unit selection
* 6139-6163 ~ Sets up list of unit names to show on Unit Information Screen's unit selection
* 6164-6199 ~ Establishes general graphics of Unit Information Screen's unit selection
* 619A-61AE ~ Establishes location of highlighted choice pointer sprite on Unit Information Screen's unit selection
* 61AF-61B8 ~ A = Unit type choice on Unit Information Screen's unit selection
* 61B9-621B ~ Controls for Unit Information Screen's unit selection; A = -1 for B Button press, Unit Type choice for A Button Press
* 621C-6237 ~ Procedure for pressing Up on Unit Information Screen's unit selection: choice shifted up 1 entry
* 6238-6254 ~ Procedure for pressing Down on Unit Information Screen's unit selection: choice shifted down 1 entry
* 6255-626F ~ Procedure for pressing Left on Unit Information Screen's unit selection: screen/choice scrolled up 13 entries (QUIRK: will not play sound if original first choice came before APC+)
* 6270-6294 ~ Procedure for pressing Right on Unit Information Screen's unit selection: screen/choice scrolled down 13 entries (QUIRK: will not play sound if original first choice came after Hunter Tank+)
* 6295-62B0 ~ Scroll up one entry on Unit Information Screen's unit selection handled where viable
* 62B1-62D5 ~ Scroll down one entry on Unit Information Screen's unit selection handled where viable
* 62D6-6348 ~ Text established for non-variable text other than "Max Fuel /" on Unit Information Screen
* 6349-6389 ~ Text: Unit Information stat name text; "Transport", "Promote", and "Supply and Repair" are accommodated with their own coordinates
* 638A-63FE ~ Establishes Primary Weapon's Range value as a whole at coordinates BC
* 63FF-6473 ~ Establishes Secondary Weapon's Range value as a whole at coordinates BC
* 6474-648E ~ Primary Weapon Ammo (right after Backslash) established at coordinates BC
* 648F-64B7 ~ Establishes available Primary Weapon's basic stats text
* 64B8-64D2 ~ Secondary Weapon Ammo (right after Backslash) established at coordinates BC
* 64D3-64FB ~ Establishes available Secondary Weapon's basic stats text
* 64FC-6502 ~ Text: symbol placeholders: dash, slash, double-dash
* 6503-66BE ~ Text established: Unit Type, Unit Family, Movement Power value, Max Fuel line, Weapon lines, Base Focus value, Transport ability, Promotion ability; also toggles Left/Right scrolling mini-arrows
* 66BF-66E1 ~ Left/Right scrolling mini-arrows on Unit Information Screen toggled depending on if viewing Grunt, Submarine+, or other
* 66E2-66E8 ~ Disable Pointing Left Mini-Arrow sprite of Unit Information Screen
* 66E9-66EF ~ Enable Pointing Left Mini-Arrow sprite of Unit Information Screen
* 66F0-66F6 ~ Disable Pointing Right Mini-Arrow sprite of Unit Information Screen
* 66F7-66FD ~ Enable Pointing Right Mini-Arrow sprite of Unit Information Screen
* 66FE-6706 ~ Defaulting text for lack of availability involved on Unit Information Screen
* 6707-671C ~ Establishes location of highlighted stat choice pointer sprite on Unit Information Screen
* 671D-6726 ~ List of Y coordinates for highlighted stat choice pointer sprite on Unit Information Screen
* 6727-6735 ~ A += Side involved in Unit Information Screen
* 6736-6745 ~ A += 11 * Side involved in Unit Information Screen
* 6746-675C ~ A += 11 for White Moon property
* 675D-6796 ~ Unit Type A's graphics set up on Unit Information Screen (BC is display coordinates)
* 6797-6805 ~ Establishes default graphics of Unit Information Screen
* 6806-6830 ~ Readies choices for return to unit selection on Unit Information Screen
* 6831-68A0 ~ Controls for Unit Information Screen as a whole other than unit selection (A is default Unit Type)
* 68A1-697F ~ Handles chosen stat's submenu on Unit Information Screen
* 6980-6990 ~ Procedure for pressing Up on Unit Information Screen: stat choice shifted up 1 entry, can rotate
* 6991-69A0 ~ Procedure for pressing Down on Unit Information Screen: stat choice shifted down 1 entry, can rotate
* 69A1-69C3 ~ Procedure for pressing Right on Unit Information Screen: shifts to screen for next unit type, doesn't rotate
* 69C4-69E6 ~ Procedure for pressing Left on Unit Information Screen: shifts to screen for previous unit type, doesn't rotate
* 69E7-6A1E ~ Toggles Up/Down scrolling arrows based on scroll amount for description on Unit Information Screen's submenu
* 6A1F-6ACF ~ Establishes graphics of Unit Information Screen's Basics submenu
* 6AD0-6AEB ~ Text including coordinates: "Gold/Materials Costs"
* 6AEC-6B1E ~ Controls for Unit Information Screen's Basics submenu
* 6B1F-6B3D ~ Procedure for pressing Up on Unit Information Screen's Basics submenu: unit description scroll up 1 line if viable
* 6B3E-6B7C ~ Procedure for pressing Down on Unit Information Screen's Basics submenu: unit description scroll down 1 line if viable
* 6B7D-6C82 ~ Terrain map graphics set up VRA1($9000~967F)
* 6C83-6CA0 ~ Sets graphics detail for terrain type A on Unit Information Screen's Movement submenu
* 6CA1-6D29 ~ Prints terrain's Movement Cost rounded to nearest 1/10
* 6D2A-6D2D ~ Text: triple dashes
* 6D2E-6D7C ~ Prints all terrain graphics and Movement Costs on Unit Information Screen's Movement submenu
* 6D7D-6D7E ~ Text: decimal point
* 6D7F-6D8E ~ Movement Cost 10ths digit values
* 6D8F-6DC2 ~ pointers to graphics detail for each terrain on Unit Information Screen's Movement submenu
* 6DC3-6E2A ~ graphics detail for terrain on Unit Information Screen's Movement submenu (in order for each terrain: base X position, base Y position, stored tile, terrain ID)
* 6E2B-6E4C ~ Establishes location of highlighted terrain choice pointer sprite on Unit Information Screen's Movement submenu
* 6E4D-6E63 ~ Toggles Up/Down scrolling arrows based on scroll location of Unit Information Screen's Movement submenu
* 6E64-6F33 ~ Establishes graphics of Unit Information Screen's Movement submenu
* 6F34-6F39 ~ Text: "Movement Loss"
* 6F3A-6F63 ~ Sets up right-to-left then top-to-bottom choice # on Unit Information Screen's Movement submenu
* 6F64-6F82 ~ Sets up top-to-bottom then right-to-left choice # on Unit Information Screen's Movement submenu
* 6F83-6FD5 ~ Controls for Unit Information Screen's Movement submenu
* 6FD6-6FE8 ~ Procedure for pressing A on Unit Information Screen's Movement submenu: selected terrain's Terrain Information Screen
* 6FE9-7011 ~ Procedure for pressing Up on Unit Information Screen's Movement submenu: terrain choice shifted up 1 entry (QUIRK: no sound if shifting scroll up)
* 7012-703A ~ Procedure for pressing Down on Unit Information Screen's Movement submenu: terrain choice shifted down 1 entry (QUIRK: no sound if shifting scroll down)
* 703B-704D ~ Procedure for pressing Left on Unit Information Screen's Movement submenu: terrain choice shifted left 1 entry
* 704E-7060 ~ Procedure for pressing Right on Unit Information Screen's Movement submenu: terrain choice shifted right 1 entry
* 7061-7138 ~ Establishes Terrain Information Screen's graphics
* 7139-7141 ~ Text: "DEF Effect"
* 7142-7158 ~ Basic Terrain Information Screen for Terrain A
* 7159-716E ~ Sets up baseline information for terrain A on Terrain Information Screen
* 716F-71F8 ~ Tables for terrain's positionings and allegiances (3 bytes per terrain; in order: right-to-left then top-to-bottom choice # on Unit Information Screen's Movement submenu; top-to-bottom then right-to-left choice # on Unit Information Screen's Movement submenu; allegiance)
* 71F9-722B ~ Controls for Terrain Information Screen
* 722C-724A ~ Procedure for pressing Up on Terrain Information Screen: terrain description scroll up 1 line if viable
* 724B-7289 ~ Procedure for pressing Down on Terrain Information Screen: terrain description scroll down 1 line if viable
* 728A-731C ~ Establishes graphics of Unit Information Screen's Fuel submenu
* 731D-733A ~ Text: "Fuel Upkeep", "Max Fuel"
* 733B-736D ~ Controls for Unit Information Screen's Fuel submenu
* 736E-7389 ~ Procedure for pressing Up on Unit Information Screen's Fuel submenu: fuel discussion scroll up 1 line if viable
* 738A-73C5 ~ Procedure for pressing Down on Unit Information Screen's Fuel submenu: fuel discussion scroll down 1 line if viable
* 73C6-74EF ~ Establishes graphics of Unit Information Screen's Weapon submenu
* 74F0-74F7 ~ Text: "Supply Cost"
* 74F8-7508 ~ Text including coordinates for "Range" and "ATK Power"
* 7509-752C ~ Controls for Unit Information Screen's Weapon submenu (A = chosen weapon)
* 752D-758B ~ Establishes graphics of Unit Information Screen's Focus submenu
* 758C-7599 ~ Text: "(Lost) Focus"
* 759A-75CC ~ Controls for Unit Information Screen's Focus submenu
* 75CD-75E8 ~ Procedure for pressing Up on Unit Information Screen's Focus submenu: Focus discussion scroll up 1 line if viable
* 75E9-7624 ~ Procedure for pressing Down on Unit Information Screen's Focus submenu: Focus discussion scroll down 1 line if viable
* 7625-766F ~ Establishes which unit types can be carried
* 7670-7701 ~ Prints on-screen lines of unit types that can be carried on Unit Information Screen's Transport submenu
* 7702-7726 ~ Toggles Up/Down scrolling arrows based on scroll amount for list on Unit Information Screen's Transport submenu
* 7727-7782 ~ Establishes graphics of Unit Information Screen's Transport submenu
* 7783-779D ~ Text: "Unit limit"/"Can load"
* 779E-77D0 ~ Controls for Unit Information Screen's Transport submenu
* 77D1-77EC ~ Procedure for pressing Up on Unit Information Screen's Transport submenu: Transport list scroll up 1 entry line if viable
* 77ED-781B ~ Procedure for pressing Down on Unit Information Screen's Transport submenu: Transport list scroll down 1 entry line if viable (QUIRK: sound will not play if shifting to end of list)
* 781C-7874 ~ Establishes graphics of Unit Information Screen's Promotion submenu
* 7875-7878 ~ Text: "Promote"
* 7879-78BE ~ Controls for Unit Information Screen's Promotion submenu; A button press simply changes selected unit type to promoted unit type
* 78BF-78DA ~ Procedure for pressing Up on Unit Information Screen's Promotion submenu: Promotion discussion scroll up 1 line if viable
* 78DB-7916 ~ Procedure for pressing Down on Unit Information Screen's Promotion submenu: Promotion discussion scroll down 1 line if viable
* 7917-79F7 ~ Establishes graphics of Unit Information Screen's Defense Power submenu
* 79F8-7A18 ~ Controls for Unit Information Screen's Defense Power submenu
* 7A19-7A28 ~ Empties ($D980~$D9B1) (unused)
* 7A29-7A81 ~ Establishes unit entry on Unit Information Screen's Supply/Repair submenu (A is Unit Type, no side)
* 7A82-7AE8 ~ Establishes terrain entry on Unit Information Screen's Supply/Repair submenu (A is Terrain Type, no side)
* 7AE9-7B57 ~ Prints Unit Portraits, probably intended for Unit Information Screen's Supply/Repair screen (unused)
* 7B58-7BC2 ~ Prints Terrain Portraits, probably intended for Unit Information Screen's Supply/Repair screen (unused)
* 7BC3-7C10 ~ Gathers information from ($C949) bytes to handle entries table for Unit Information Screen's Supply/Repair submenu
* 7C11-7DB3 ~ Prints entry lines of Unit Information Screen's Supply/Repair submenu
* 7DB4-7DD8 ~ Toggles Up/Down scrolling arrows based on scroll amount for list on Unit Information Screen's Supply/Repair submenu
* 7DD9-7F4C ~ Establishes graphics of Unit Information Screen's Supply/Repair submenu
* 7F4D-7F79 ~ Text: "Supply", "Repair", Blank
* 7F7A-7FAC ~ Controls for Unit Information Screen's Supply/Repair submenu
* 7FAD-7FC4 ~ Procedure for pressing Up on Unit Information Screen's Supply/Repair submenu: Supply/Repair list scroll up 1 entry line if viable
* 7FC5-7FF0 ~ Procedure for pressing Down on Unit Information Screen's Supply/Repair submenu: Supply/Repair list scroll down 1 entry line if viable

Translation:
* 7FF1-7FFC ~ "No/Yes" English text

== Block 39 (098000-09C000) ==

* 549A-54C7 ~ Clears WRA7($CBDF~CBE6) and WRA7 ($CC25~CC26)

* 5CCB-5D1B ~ Translates Map Online 7 Digit Code into ASCII from Compact Bytes

* 6A26-6A41 ~ Establishes Computer Typing Font characters graphics tiles
* 6A42-7131 ~ Computer Typing Font characters graphics tiles
* 7132-7171 ~ Computer Typing Font characters palettes

== Block 40 (09C000-0A0000) ==

* 4000-4046 ~ BG palettes changed to Palette Set A
* 4047-4085 ~ Carry Flag set by A, B, or Start being pressed during timer determined by DE; gradual scroll determined by BC
* 4086-40AF ~ Handles all sprite advanced behavior for frames equivalent to DE, with sprites needing to spawn first; also shifts SCY by B and SCY by C each frame
* 40B0-40D3 ~ Handles advanced sprite behavior (normal non-moving behavior during timer 1) and any quake effect on Battle Screen for frames equivalent to DE
* 40D4-40E5 ~ LCD Display shut off, empties graphics

* 438F-43B7 ~ Animation instruction: Soldier Victory Pose (facing left); resets itself every 60 frames to prevent sprite disappearance
* 43B8-43DB ~ Animation instruction: gradually move left 1 pixel/frame, reset itself every 120 frames
* 43DC-4416 ~ A = -1 if A or Start is pressed before the timer indicated by DE runs out, 0 otherwise; Intended Scroll incremented by B,C every frame, sprites also continually updated
* 4417-4464 ~ Title screen controls

* 5267-5294 ~ A = 0, Carry Flag Set by pressing A, B, or Start within timer DE
* 5295-52DE ~ Arranges order of display tiles to handle for given text portion on "BEGIN WAR"/Victory/Defeat announcement screen
* 52DE-531E ~ Attempts to handle given text portion on "BEGIN WAR"/Victory/Defeat announcement screen, 1 frame advancing per tile; if A, B, or Start is pressed, preemptive ending with Carry Flag Set; if completed, ending is A = 0
* 531F-5350 ~ Unused procedure: A = (first) value within WRA4($DB95) that has initial A
* 5351-53AC ~ Handles display tile A of given text portion on "BEGIN WAR"/Victory/Defeat announcement screen
* 53AD-53FE ~ Establishes basic graphics data for "BEGIN WAR" and Victory/Defeat screens
* 53FF-5450 ~ Establishes basic graphics data for "BEGIN WAR" and Victory/Defeat screens
* 5451-54A0 ~ Establishes basic data for country name's line on Victory/Defeat screen
* 54A1-54E6 ~ Establishes basic data for "VICTORY"/"DEFEAT line on Victory/Defeat screen
* 54E7-5565 ~ Victory/Defeat screen plays out for about 2.5 seconds (A is country to list, B is Victory/Defeat choice)
* 5566-55C2 ~ "BEGIN WAR" screen plays out for about 3 seconds
* 5F13-61E9 ~ Establishes Intel bottom half screen graphics
* 61EA-61F1 ~ Sets up Intel top half
* 61F2-627F ~ VRA1($9230) to VRA1($95EF) holds non-ruined property map graphics
* 6280-62AA ~ Coordinates BC for 8 spaces holds tile $22 from VRA1
* 62AB-631C ~ Controls for Map Intel screen; ends with A = 0 for A Button press, or -1 for B Button press
* 631D-6596 ~ Establishes Intel top half screen graphics
* 6597-659F ~ Sets up Intel bottom half

* 6AE6-6B19 ~ Establish VS Mode Description Text
* 6B1A-6B30 ~ Text: "Hand around GB."
* 6B31-6B45 ~ Text: "Use IR Comm."
* 6B46-6B94 ~ Establishes File Menu graphics and stats
* 6B95-6B9C ~ Defaults Mode Choice to Beginner
* 6B9D-6BC7 ~ Reestablishes File Menu graphics (A is File Menu Parent)
* 6BC8-6CD6 ~ Screen Transition White-Out
* 6BD7-6BFF ~ Carry Flag Set unless choosing empty file on Continue
* 6C00-6C2D ~ Establishes Query Text on File Menu
* 6C2E-6C41 ~ Text including coordinates: "Save Where?"
* 6C42-6C55 ~ Text including coordinates: "Play Beginner?"
* 6C56-6C69 ~ Text including coordinates: "Play Campaign?"
* 6C6A-6C7D ~ Text including coordinates: "Play Standard?"
* 6C7E-6CA7 ~ File Menu Window involving "Saved" text
* 6CA8-6CB1 ~ Text including coordinates: "Saved"
* 6CB2-6CE2 ~ File Menu Save done player interaction management
* 6CE3-6D03 ~ Reads Chosen Save for Chosen Mode Save info to get important data for text
* 6D04-6EB9 ~ File Menu master control; ends with A = File Choice, or -1 for B Button press, B = Mode Choice
* 6EBA-6ECB ~ File Menu Button instruction pointers
* 6ECC-6EDA ~ Set Carry Flag for nonexistent file; A = 0 otherwise
* 6EDB-6EE9 ~ Set Carry Flag for New Game or Save; A = 0 otherwise
* 6EEA-6F58 ~ File Menu used file raw graphics established
* 6F59-6FA5 ~ File Menu sprite deactivation for nonexistent file
* 6FA6-6FDD ~ File A graphics set up for File Menu
* 6FDE-7059 ~ Establishes information of selected File on File Menu
* 705A-7090 ~ Establishes Bullet Pointing Right position based on choice in File Menu
* 7091-70D5 ~ File Menu Separator for used File
* 70D6-711A ~ File Menu Separator for unused File
* 711B-7310 ~ File Menu basic graphics established
* 7311-739D ~ Establishes Beginner Mode Save Info graphics
* 739E-7430 ~ Establishes Campaign Mode Save Info graphics
* 7431-74E7 ~ Establishes Standard Mode Save Info graphics
* 74E8-7514 ~ Establishes player option sprites of File Menu
* 7515-7518 ~ Handles clear-up of all sprite portions and entire ($C400) table, sets ($C00E) to 1
* 7519-753B ~ Establishes File Choices graphics on File Menu
* 753C-7560 ~ Handles Bullet Pointing Right visibility on File Menu
* 7561-7576 ~ File Menu Bullet Pointing Right default position
* 7577-7956 ~ File Menu graphics tiles
* 7587-75B6 ~ Border Separator graphics tiles
* 7957-7996 ~ File Menu Palette
* 7997-79DE ~ Establishes graphics for Yield confirmation screen
* 79DF-79EA ~ Text including coordinates: "Capitulate?"
* 79EB-7A62 ~ Controls for Yield confirmation screen; ends with A = 1 for "OK", 0 for "NO", or -1 for cancellation
* 7A63-7AA7 ~ Establishes Border Separator of Results Screen Table
* 7AA8-7C5E ~ Establishes Results Screen graphics as a whole
* 7C5F-7C69 ~ Text including Coordinates: "Finishing Turn"
* 7C6A-7C83 ~ Text for statistics on Results Screen
* 7C84-7CB6 ~ Results Screen management
* 7CB7-7D18 ~ AI Yield Request Prompt Text Setup
* 7D19-7D26 ~ Text including coordinates "Red Star"
* 7D27-7D34 ~ Text including coordinates "White Moon"
* 7D35-7D5B ~ Text "..is yielding. End the Battle?"
* 7D5C-7DC1 ~ AI Yield Response Text Setup
* 7DC2-7DEE ~ Text for AI Yield Accepted
* 7DEF-7E2E ~ Text for AI Yield Declined
* 7E2F-7E5E ~ Text for both countries with ownership and subject particles
' 7E5F-7F16 ~ AI Yield Request master control, ends with A = Choice (A is yielding AI side)
* 7F17-7F5F ~ Continue Game Prompt Text Setup
* 7F60-7F6D ~ Text "Continue Game?"
* 7F6E-7FD5 ~ Continue Game Prompt Master Control, ending with A = Decision

== Block 41 (0A0000-0A4000) ==

* 4000-4023 ~ [$CA1A] 3 bytes holds Beginner Map pointer, [$CA1D] bit 0 is set if map is already cleared, [$CA1E] is 0, [$CA1F] holds A, [$CA21~$CA4E] holds first 46 bytes of map with [$CA41~$CA48] holding maps name (A is Beginner Map #, [$C68D] holds cleared Beginner Mode maps)
* 4024-4059 ~ [$CA1A] 3 bytes holds Campaign Map pointer, [$CA1D] bit 0 is set if map is already cleared, [$CA1D] bit 2 is set if [$C69D + (A/8)] AND 2^(A%8) = 1, [$CA1E] is 1, [$CA1F] holds A, [$CA21~$CA4E] holds first 46 bytes of map with [$CA41~$CA48] holding maps name (A is Campaign Map #, [$C68F] holds cleared Campaign Mode maps)
* 405A-407D ~ [$CA1A] 3 bytes holds Standard Map pointer, [$CA1D] bit 0 is set if map is already cleared, [$CA1E] is 2, [$CA1F] holds A, [$CA21~$CA4E] holds first 46 bytes of map with [$CA41~$CA48] holding maps name (A is Standard Map #, [$C695] holds cleared Standard Mode maps)
* 407E-409C ~ empties [$CA1A] to [$CA4F], then sets [$CA1A] 3 bytes to [HL + A * 3] 3 bytes, [$CA1E] to B, and [$CA1F] to A
* 409D-40AD ~ empties [$CA1A] to [$CA4F]
* 40AE-40C0 ~ Establishes map basic logistics including map number and game mode, also triggers custom map exists flag if given custom map is used
* 40C1-40D6 ~ Map preview, ending with A = -1 for B Button, or 0 for A Button; latter has BC as view selection center tile
* 40D7-40ED ~ If playing on Standard past Map #30, establishes starting view around White Moon's HQ
* 40EE-4134 ~ A = Standard Mode unlock status number ([$C695] 8 byte is cleared Standard Mode maps flags)
* 4135-4148 ~ A = 1 if all Beginner Mode maps are cleared, 0 if not ([$C68D] 2 byte is cleared Beginner Mode maps flags)
* 4149-4156 ~ if HL bits B~C are all active, A = 1 (followed by AND A to handle flags); otherwise, end early with Zero Flag active
* 4157-415F ~ A = Campaign Map Day limit (A = Campaign Map #)
* 4160-4169 ~ A = Campaign Map fast Day limit (A = Campaign Map #)
* 416A-41C3 ~ Campaign Mode map Day limits; each map is tabled for 2 bytes with hard limit then fast clear limit
* 41C4-41CB ~ Beginner Mode map's Day limit (A is Beginner Map #)
* 41CC-41DB ~ Beginner Mode map Day limits
* 41DC-428F ~ Standard Mode map pointers
* 4290-4292 ~ Demo 02 Map pointer
* 4293-42C2 ~ Beginner Mode map pointers
* 42C3-4349 ~ Campaign Mode map pointers

== Block 42 (0A4000-0A8000) ==

Map data

== Block 43 (0A8000-0AC000) ==

Map data

== Block 44 (0AC000-0B0000) ==

Map data

== Block 45 (0B0000-0B4000) ==

Map data (ends Standard, covers Beginner)

== Block 46 (0B4000-0B8000) ==

Map data (campaign)

== Block 47 (0B8000-0BC000) ==

Map data

== Block 48 (0BC000-0C0000) ==

Map data

== Block 49 (0C0000-0C4000) ==

== Block 50 (0C4000-0C8000) ==

* 4067-4112 ~ BG Palettes alternate every 10 frames ending with the determined player's Palettes at the end of the timer determined by DE; if A, B, or Start is pressed, Carry Flag is Set and process is ended prematurely (A is flag for using ($C4A0) instead of ($C4A2))
* 4113-41BE ~ BG Palettes alternate every 4 frames ending with the determined player's Palettes at the end of the timer determined by DE; if A, B, or Start is pressed, Carry Flag is Set and process is ended prematurely (A is flag for using ($C4A0) instead of ($C4A2) at the end)
* 41BF-41E9 ~ BC = Starting coordinates of bullet for current attack portion on Battle Screen
* 41EA-4251 ~ pointers to tables for starting coordinates for attack portions on Battle Screen
* 4252-4A49 ~ tables for starting coordinates for attack portions on Battle Screen, 40 bytes per unit representing positions

* 50FA-5112 ~ Clears WRA4($DB54~DB56)
* 5113-513A ~ Beginner Mode Map Selection as a whole; ends with A = 0 if starting a map is fully confirmed, or -1 if backed out of the selection entirely
* 513B-514F ~ Sets up location of selection bullet sprite on map list
* 5150-5233 ~ Readies Beginner Mode map selection graphics
* 5234-5244 ~ Sets up Map # text of selected Map on Map Selection screen
* 5245-5291 ~ Sets up Cleared icon where necessary for handled map on Map Selection screen
* 5292-52BB ~ Sets up handle map's name on Map Selection screen
* 52BC-52E1 ~ Sets up handled map's dimensions text on Map Selection screen
* 52E2-52E3 ~ Text "x" (multiplier for map's dimensions text)
* 52E2-52FF ~ Sets up handled map's text as a whole on Map Selection screen, readies text pointer for next handled map as necessary
* 5300-532E ~ Prints full text for all 4 shown map choices on Map Selection screen
* 532F-533F ~ Reprints full text for all 4 shown map choices on Map Selection screen for pressing Up with top shown choice
* 5340-534F ~ Reprints full text for all 4 shown map choices on Map Selection screen for pressing Down with bottom shown choice
* 5350-5362 ~ Maneuvers graphics on Map Selection screen based on pressing Up
* 5363-5376 ~ Maneuvers graphics on Map Selection screen based on pressing Down
* 5377-5394 ~ A = Selected Map # on Beginner Map Selection Screen
* 5395-53B5 ~ Unused process of keeping the player from accessing the final Beginner Mode map until the others have been cleared (Fascinating...)
* 53B6-542E ~ Controls for Beginner Mode Map Selection Screen; ends with A = Selected Map # if A was pressed, or -1 if B was pressed
* 5675-569D ~ All Zeros for Map Online 7 Digit Code results in SCF; otherwise, A = 0 (HL is location of Online 7 Digit Code in ASCII)
* 7551-7627 ~ Establishes default graphics of Campaign Mode concept description screen
* 7628-769D ~ Controls for Campaign Mode concept description screen; ends with A = 0 for A/Start Button press, or -1 for successful B Button press (A is concept, B is scroll-back ability flag)
* 769E-76BB ~ Scrolls up where viable on Campaign Mode concept description screen
* 76BC-76F9 ~ Scrolls down where viable on Campaign Mode concept description screen
* 76FA-77BC ~ Establishes default graphics of Campaign Mode concept postscript screen
* 77BD-7822 ~ Controls for Campaign Mode concept postscript screen; ends with A = 0 for A/Start Button press, or -1 for B Button press
* 7823-7840 ~ Scrolls up where viable on Campaign Mode concept postscript screen
* 7841-787E ~ Scrolls down where viable on Campaign Mode concept postscript screen
* 787F-78B6 ~ Toggle scrolling Mini-Arrows on Campaign Mode concept description screen
* 78B7-78BD ~ Enables Pointing Up Mini-Arrow
* 78BE-78C4 ~ Enables Pointing Down Mini-Arrow
* 78C5-78CB ~ Disables Pointing Up Mini-Arrow
* 78CC-78D2 ~ Disables Pointing Down Mini-Arrow
* 78D3-78E6 ~ $D962 is set to number of text lines for text at HL
* 78E7-78F0 ~ HL set to first ROM address after next newline
* 78F1-7906 ~ HL set to ROM address of text line indicated by $D963
* 7907-7917 ~ HL holds pointer for text describing Campaign Mode concept to talk about
* 7918-79B9 ~ Prints text starting at given line of choice up to 10 lines
* 7E9A-7EE1 ~ Establishes graphics for Suspend confirmation screen
* 7EE2-7EED ~ Text including coordinates: "Suspend?"
* 7EEE-7F65 ~ Controls for Suspend confirmation screen; ends with A = 1 for "OK", 0 for "NO", or -1 for cancellation

== Block 51 (0C8000-0CC000) ==

* 577D-5818 ~ Prints text at HL into display coordinates BC
* 5819-582E ~ Manages skip of lines of dialogue to skip
* 582F-5838 ~ HL set to address of byte right after the first byte holding 1 after initial HL
* 5839-5846 ~ HL holds pointer to unit type A's description
* 5847-5854 ~ HL holds pointer to terrain type A's description
* 5855-5868 ~ Establishes number of lines starting at HL
* 5869-5875 ~ Unit Type A's description printed at 1,6 with accommodating line skips as necessary
* 5876-5682 ~ Terrain Type A's description printed at 1,4 with accommodating line skips as necessary
* 5883-588F ~ Fuel Discussion printed at 1,5 with accommodating line skips as necessary
* 5890-589C ~ Focus Discussion printed at 1,5 with accommodating line skips as necessary
* 589D-58A9 ~ Promotion Discussion printed at 1,6 with accommodating line skips as necessary
* 58AA-5911 ~ Unit description pointers
* 5912-593A ~ Terrain description pointers
* 593C-6FE2 ~ Unit descriptions
* 6FE3-7B6A ~ Terrain descriptions
* 7B6B-7C92 ~ Fuel discussion
* 7C93-7D21 ~ Focus discussion
* 7D22-7DFA ~ Promotion discussion

== Block 52 (0CC000-0D0000) ==

Dialogue stuff

== Block 53 (0D0000-0D4000) ==

Empty (all FFs)

== Block 54 (0D4000-0D8000) ==

Empty (all FFs)

== Block 55 (0D8000-0DC000) ==

Empty (all FFs)

== Block 56 (0DC000-0E0000) ==

Empty (all FFs)

== Block 57 (0E0000-0E4000) ==

Empty (all FFs)

== Block 58 (0E4000-0E8000) ==

Empty (all FFs)

== Block 59 (0E8000-0EC000) ==

Empty (all FFs)

== Block 60 (0EC000-0F0000) ==

Empty (all FFs)

== Block 61 (0F0000-0F4000) ==

Empty (all FFs)

== Block 62 (0F4000-0F8000) ==

Empty (all FFs)

== Block 63 (0F8000-0FC000) ==

* 4000-580E is same as in Block 4 due to this block being in the music business

== Block 64 (0FC000-100000) ==

* 4000-580E is same as in Block 4 due to this block being in the music business

{{Internal Data|game=Game Boy Wars 3}}

==Graphics==

Basic graphics:
* 00:1AA4-1C53 ~ basic cursors graphics?
* 01:4118-5117 ~ basic text graphics
* 01:5120-524F ~ various mini-graphics
* 01:5250-525F ~ Level box graphics
* 01:5268-57F7 ~ terrain map graphics
* 01:5898-6637 ~ unit map graphics
* 01:6638-66E7 ~ terrain zoomed-out map graphics
* 0C:53C6-5615 ~ ?
* 0C:59FB-5B2A ~ property strength meter graphics
* 0C:603F-610E ~ ?
* 0C:612D-636C ~ HP transfer star graphics
* 0C:6435-64F4 ~ HP repair/lost text bubble graphics
* 0C:6573-66B2 ~ misc. unit text bubble graphics (explosion, "!", music note, "LV Up")
* 0C:76F1-7B20 ~ new Day box text/icon graphics
* 0C:7B49-7B88 ~ new Day box border graphics
* 10:4175-4915 ~ Hudson logo graphics
* 10:51E8-6867 ~ GBW3 title screen graphics
* 11:4337-48A6 ~ ?
* 11:4E88-5E07 ~ command graphics
* 11:5E10-76AF ~ notification graphics
* 13:57CC-585B ~ 
* 14:56F8-5967 ~
* 14:6331-6560 ~ file select miscellaneous graphics
* 14:65A1-67B0 ~ "Commander" screen highlight graphics
* 14:67B1-6AF0 ~ 
* 14:6B31-6D00 ~ "Medals" screen highlight graphics
* 14:6DD1-7250 ~ 
* 14:790D-7DDC ~ Medals base graphics
* 15:4503-4892 ~ 
* 15:4A6B-547A ~ 
* 15:5640-5C8F ~ main menu selection graphics
* 15:6BBA-6C89 ~ main menu border/animated BG/"OK/NO" graphics
* 15:7024-7103 ~ 
* 15:76E2-7941 ~ 

* 27:7577-7956 ~ 

Palettes:
* 00:062F-06AE ~
* 00:0A00-0A3F ~ 
* 00:1C54-1C6B ~ 
* 01:5118-511F ~ default White/Blue Palette
* 01:5260-5267 ~ 
* 01:5868-5897 ~ unit/terrain map Palettes
* 01:6958-6987 ~ terrain Map Menu Palettes
* 0B:4078-4087 ~ 
* 0B:6710-6717 ~ 
* 0B:6A86-6B05 ~ all black Palettes
* 0C:5616-5625 ~ 
* 0C:5B2B-5B42 ~ property meter Palettes
* 0C:7B31-7B48 ~ 
* 10:4FBB-4FC2 ~ Data deletion Magenta Palette
* 10:6868-68A7 ~ GBW3 title screen Palettes
* 11:48A7-48AE ~ all blue (Mobile System GB Palette)
* 13:585C-589B ~ 
* 13:589C-58DB ~ 
* 14:5968-59A7 ~ 
* 14:6561-65A0 ~ 
* 14:6D01-6D40 ~ 
* 14:7251-7290 ~ 
* 15:4893-48D2 ~ 
* 15:547B-54BA ~ 
* 15:5C90-5CCF ~ 
* 15:6C8A-6CC9 ~ 
* 15:7104-7123 ~ 
* 15:7942-7981 ~ 

* 19:78EC-792B ~ 
* 19:7924-792B ~ ? (pure Magenta Palette)

* 27:7957-7996 ~ 



{{TBL|game=Game Boy Wars 3}}
==Mission Briefing==
<pre>
10 = ・
11~14 = direction arrows (Left, Right, Down, Up)
15 = Musical Note
16 = Circle
17 = ～
18 = Heart
19 = X (multiplication symbol)
1A = mini-X (multiplication symbol)
1B =　「
1C = ｜
1D = 」
1E = \
20 = Space
21 = ！
22 = "
23 = ＃
24 = ＄
25 = ％
26 = ＆
27 = '
28 = （
29 = ）
2A = ＊
2B = ＋
2C = 、
2D = ー
2E = 。
2F = /
30~39 = numbers 0~9
3A = :
3B = ;
3C = <
3D = =
3E = >
3F = ?
40 = @
41~5A = English capital letters A~Z
5B = [
5C = ￥
5D = ]
5E = ^
5F = _


60 = Hiragana WO
61~65 = No consonant Hiragana
66~6A = K Hiragana
6B~6F = S Hiragana
70~74 = T Hiragana
75~79 = N Hiragana
7A~7E = H Hiragana
7F~83 = M Hiragana
84~86 = Y Hiragana
87~8B = R Hiragana
8C = Hiragana WA
8D = Hiragana 'N
8E~92 = G Hiragana
93~97 = Z Hiragana
98~9C = D Hiragana
9D~A1 = B Hiragana
A2~A6 = P Hiragana
A7~AB = small no consonant Hiragana
AC~AE = small Y Hiragana
AF = small TSU Hiragana

B0 = Katakana WO
B1~B5 = No consonant Katakana
B6~BA = K Katakana
BB~BF = S Katakana
C0~C4 = T Katakana
C5~C9 = N Katakana
CA~CE = H Katakana
CF~D3 = M Katakana
D4~D6 = Y Katakana
D7~DB = R Katakana
DC = Katakana WA
DD = Katakana 'N
DE~E2 = G Katakana
E3~E7 = Z Katakana
E8~EC = D Katakana
ED~F1 = B Katakana
F2~F6 = P Katakana
F7~FB = small no consonant Katakana
FC~FE = small Y Katakana
FF = small Katakana TSU
</pre>
{{Internal Data|game=Game Boy Wars 3}}





Mantidactle talk:

== GBC game datamining ==

Just to clarify, what programs do you use? Hopefully they're friendly enough to Windows 10. I'm wanting to better datamine [[Game Boy Wars 3]] and maybe [[Kakurenbo Battle Monster Tactics]]. [[User:MKnightDH|MKnightDH]] ([[User talk:MKnightDH|talk]]) 16:11, 21 July 2017 (EDT)
:I mainly use [http://bgb.bircd.org/ BGB] in debugger mode for the Game Boy. I save the whole asm, bank by bank, then use BGB breakpoints and RAM watch to understand the gb z80 code. BGB also supports SYM files which may make your work easier. And I use [https://github.com/rednex/rgbds RGBDS] (with [https://cygwin.com/install.html Cygwin] on Windows) to rebuild the ROM if I'm doing an extensive ROM hack. --[[User:Mantidactyle|Mantidactyle]] ([[User talk:Mantidactyle|talk]]) 08:27, 22 July 2017 (EDT)
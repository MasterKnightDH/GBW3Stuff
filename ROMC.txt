 ROMC:4000 CD 0C 40         call 400C           // A holds number of valid targets, ($DBF8) holds valid targets' IDs
 ROMC:4003 A7               and  a
 ROMC:4004 20 04            jr   nz,400A
 ROMC:4006 3E 01            ld   a,01
 ROMC:4008 18 01            jr   400B
 ROMC:400A AF               xor  a
 ROMC:400B C9               ret                 // A = 1 if any valid targets exist, 0 otherwise; WRAM Bank 4 ($DBF8) holds any valid targets' IDs
 ROMC:400C C5               push bc
 ROMC:400D D5               push de
 ROMC:400E E5               push hl
 ROMC:400F 5F               ld   e,a
 ROMC:4010 F0 82            ld   a,(ff00+82)
 ROMC:4012 F5               push af
 ROMC:4013 3E 04            ld   a,04
 ROMC:4015 E0 82            ld   (ff00+82),a
 ROMC:4017 E0 70            ld   (ff00+70),a
 ROMC:4019 7B               ld   a,e
 ROMC:401A EA C8 DB         ld   (DBC8),a       // ($DBC8) = Unit #
 ROMC:401D EF 12 62 48                          // Establishes Unit's weapons' stats in ($CCED) to ($CD08)
 ROMC:4021 78               ld   a,b
 ROMC:4022 EA F4 DB         ld   (DBF4),a
 ROMC:4025 79               ld   a,c
 ROMC:4026 EA F5 DB         ld   (DBF5),a       // ($DBF4) 2 byte holds coordinates
 ROMC:4029 AF               xor  a
 ROMC:402A EA F7 DB         ld   (DBF7),a
 ROMC:402D EA C9 DB         ld   (DBC9),a
 ROMC:4030 1E 32            ld   e,32
 ROMC:4032 FA DD CC         ld   a,(CCDD)
 ROMC:4035 E6 01            and  a,01
 ROMC:4037 20 05            jr   nz,403E        // Next 2 lines are done for Red Star's targeting
 ROMC:4039 3E 32            ld   a,32
 ROMC:403B EA C9 DB         ld   (DBC9),a       // ($DBC9) = Unit # of first enemy unit
 ROMC:403E D5               push de             // Loop begins here
 ROMC:403F CD 70 40         call 4070           // A = 0 if unit exists, isn't Loaded or in Reserve, and can be attacked; -1 otherwise
 ROMC:4042 FE FF            cp   a,FF
 ROMC:4044 28 11            jr   z,4057         // End cycle if unit can't be attacked from location
 ROMC:4046 FA F7 DB         ld   a,(DBF7)
 ROMC:4049 21 F8 DB         ld   hl,DBF8
 ROMC:404C CD BC 29         call 29BC           // HL = $DBF8 + ($DBF7)
 ROMC:404F FA C9 DB         ld   a,(DBC9)
 ROMC:4052 77               ld   (hl),a
 ROMC:4053 21 F7 DB         ld   hl,DBF7
 ROMC:4056 34               inc  (hl)           // ($DBF8) holds list of valid targets
 ROMC:4057 D1               pop  de
 ROMC:4058 FA C9 DB         ld   a,(DBC9)
 ROMC:405B 3C               inc  a
 ROMC:405C EA C9 DB         ld   (DBC9),a
 ROMC:405F 1D               dec  e
 ROMC:4060 20 DC            jr   nz,403E        // Loops for all 50 enemy units
 ROMC:4062 FA F7 DB         ld   a,(DBF7)
 ROMC:4065 47               ld   b,a
 ROMC:4066 F1               pop  af
 ROMC:4067 E0 82            ld   (ff00+82),a
 ROMC:4069 E0 70            ld   (ff00+70),a
 ROMC:406B 78               ld   a,b
 ROMC:406C E1               pop  hl
 ROMC:406D D1               pop  de
 ROMC:406E C1               pop  bc
 ROMC:406F C9               ret                 // A holds number of valid targets, ($DBF8) holds valid targets' IDs
 ROMC:4070 C5               push bc
 ROMC:4071 D5               push de
 ROMC:4072 E5               push hl
 ROMC:4073 FA C9 DB         ld   a,(DBC9)
 ROMC:4076 0E 00            ld   c,00
 ROMC:4078 EF 12 66 40
 ROMC:407C A7               and  a
 ROMC:407D CA BB 40         jp   z,40BB         // End with A = -1 if unit doesn't exist
 ROMC:4080 EA 41 C9         ld   (C941),a       // ($C941) is Unit Type
 ROMC:4083 FA C9 DB         ld   a,(DBC9)
 ROMC:4086 0E 03            ld   c,03
 ROMC:4088 EF 12 66 40
 ROMC:408C CB 47            bit  0,a
 ROMC:408E 20 2B            jr   nz,40BB
 ROMC:4090 CB 4F            bit  1,a
 ROMC:4092 20 27            jr   nz,40BB        // End with A = -1 if unit is Loaded or in Reserve
 ROMC:4094 FA C9 DB         ld   a,(DBC9)
 ROMC:4097 0E 01            ld   c,01
 ROMC:4099 EF 12 83 40
 ROMC:409D 43               ld   b,e
 ROMC:409E 4A               ld   c,d            // BC = Coordinates
 ROMC:409F FA F4 DB         ld   a,(DBF4)
 ROMC:40A2 57               ld   d,a
 ROMC:40A3 FA F5 DB         ld   a,(DBF5)
 ROMC:40A6 5F               ld   e,a
 ROMC:40A7 EF 0B 1D 29                          // Minimum distance between unit and ($DBF4) location
 ROMC:40AB EA F6 DB         ld   (DBF6),a
 ROMC:40AE 47               ld   b,a
 ROMC:40AF FA 41 C9         ld   a,(C941)
 ROMC:40B2 CD 2E 41         call 412E           // A = used Weapon's ID, D = secondary weapon check, E = used Weapon's used ATK
 ROMC:40B5 A7               and  a
 ROMC:40B6 28 03            jr   z,40BB         // End with A = -1 if no weapon used
 ROMC:40B8 AF               xor  a
 ROMC:40B9 18 02            jr   40BD
 ROMC:40BB 3E FF            ld   a,FF
 ROMC:40BD E1               pop  hl
 ROMC:40BE D1               pop  de
 ROMC:40BF C1               pop  bc
 ROMC:40C0 C9               ret                 // A = 0 if unit exists, isn't Loaded or in Reserve, and can be attacked, -1 otherwise
 ROMC:40C1 C5               push bc
 ROMC:40C2 E5               push hl
 ROMC:40C3 57               ld   d,a
 ROMC:40C4 78               ld   a,b
 ROMC:40C5 EA 42 C9         ld   (C942),a
 ROMC:40C8 1E 00            ld   e,00
 ROMC:40CA FA F7 CC         ld   a,(CCF7)
 ROMC:40CD A7               and  a
 ROMC:40CE 28 1E            jr   z,40EE         // Primary Weapon skip if out of ammo
 ROMC:40D0 21 42 C9         ld   hl,C942
 ROMC:40D3 FA F9 CC         ld   a,(CCF9)
 ROMC:40D6 BE               cp   (hl)
 ROMC:40D7 38 15            jr   c,40EE         // Primary Weapon skip if too far
 ROMC:40D9 FA F8 CC         ld   a,(CCF8)
 ROMC:40DC 47               ld   b,a
 ROMC:40DD 7E               ld   a,(hl)
 ROMC:40DE B8               cp   b
 ROMC:40DF 38 0D            jr   c,40EE         // Primary Weapon skip if too close
 ROMC:40E1 FA F6 CC         ld   a,(CCF6)
 ROMC:40E4 47               ld   b,a
 ROMC:40E5 7A               ld   a,d
 ROMC:40E6 EF 12 FC 48               
 ROMC:40EA A7               and  a
 ROMC:40EB 28 01            jr   z,40EE         // Primary Weapon skip if no ATK against target
 ROMC:40ED 5F               ld   e,a
 ROMC:40EE FA 05 CD         ld   a,(CD05)       // Jump to here with any Primary Weapon Skip
 ROMC:40F1 A7               and  a
 ROMC:40F2 28 25            jr   z,4119
 ROMC:40F4 21 42 C9         ld   hl,C942
 ROMC:40F7 FA 07 CD         ld   a,(CD07)
 ROMC:40FA BE               cp   (hl)
 ROMC:40FB 38 1C            jr   c,4119
 ROMC:40FD FA 06 CD         ld   a,(CD06)
 ROMC:4100 47               ld   b,a
 ROMC:4101 7E               ld   a,(hl)
 ROMC:4102 B8               cp   b
 ROMC:4103 38 14            jr   c,4119
 ROMC:4105 FA 04 CD         ld   a,(CD04)
 ROMC:4108 47               ld   b,a
 ROMC:4109 7A               ld   a,d
 ROMC:410A EF 12 FC 48
 ROMC:410E A7               and  a
 ROMC:410F 28 08            jr   z,4119
 ROMC:4111 BB               cp   e              // Compare Secondary Weapon used ATK to Primary Weapon used ATK if former isn't 0
 ROMC:4112 38 0B            jr   c,411F
 ROMC:4114 28 09            jr   z,411F         // End with A = Primary Weapon's ID and D = 0 if Primary Weapon is at least equal and non-zero
 ROMC:4116 5F               ld   e,a
 ROMC:4117 18 0D            jr   4126
 ROMC:4119 16 00            ld   d,00
 ROMC:411B 7B               ld   a,e
 ROMC:411C A7               and  a
 ROMC:411D 28 0C            jr   z,412B
 ROMC:411F 16 00            ld   d,00
 ROMC:4121 FA F6 CC         ld   a,(CCF6)
 ROMC:4124 18 05            jr   412B
 ROMC:4126 16 01            ld   d,01
 ROMC:4128 FA 04 CD         ld   a,(CD04)
 ROMC:412B E1               pop  hl
 ROMC:412C C1               pop  bc
 ROMC:412D C9               ret                 // A = used weapon's ID, D = secondary weapon check, and E = used weapon's used ATK (added check of ammo) (A is defending unit's Unit Type, B is distance)
 ROMC:412E C5               push bc
 ROMC:412F E5               push hl
 ROMC:4130 57               ld   d,a
 ROMC:4131 78               ld   a,b
 ROMC:4132 EA 42 C9         ld   (C942),a
 ROMC:4135 1E 00            ld   e,00
 ROMC:4137 21 42 C9         ld   hl,C942
 ROMC:413A FA F9 CC         ld   a,(CCF9)
 ROMC:413D BE               cp   (hl)
 ROMC:413E 38 15            jr   c,4155         // Weapon skipped if too close
 ROMC:4140 FA F8 CC         ld   a,(CCF8)
 ROMC:4143 47               ld   b,a
 ROMC:4144 7E               ld   a,(hl)
 ROMC:4145 B8               cp   b
 ROMC:4146 38 0D            jr   c,4155         // Weapon skipped if too far
 ROMC:4148 FA F6 CC         ld   a,(CCF6)
 ROMC:414B 47               ld   b,a
 ROMC:414C 7A               ld   a,d
 ROMC:414D EF 12 FC 48                          // A = Primary Weapon's used ATK
 ROMC:4151 A7               and  a
 ROMC:4152 28 01            jr   z,4155         // Weapon skipped if not viable
 ROMC:4154 5F               ld   e,a            // E = Primary Weapon's used ATK
 ROMC:4155 21 42 C9         ld   hl,C942        // Meet back here if primary weapon skipped
 ROMC:4158 FA 07 CD         ld   a,(CD07)
 ROMC:415B BE               cp   (hl)
 ROMC:415C 38 1C            jr   c,417A
 ROMC:415E FA 06 CD         ld   a,(CD06)
 ROMC:4161 47               ld   b,a
 ROMC:4162 7E               ld   a,(hl)
 ROMC:4163 B8               cp   b
 ROMC:4164 38 14            jr   c,417A
 ROMC:4166 FA 04 CD         ld   a,(CD04)
 ROMC:4169 47               ld   b,a
 ROMC:416A 7A               ld   a,d
 ROMC:416B EF 12 FC 48                          // A = Secondary Weapon's used ATK
 ROMC:416F A7               and  a
 ROMC:4170 28 08            jr   z,417A
 ROMC:4172 BB               cp   e
 ROMC:4173 38 0B            jr   c,4180
 ROMC:4175 28 09            jr   z,4180         // End with D = 0 and A = ($CCF6) unless Primary Weapon's used ATK is lower or wasn't set
 ROMC:4177 5F               ld   e,a
 ROMC:4178 18 0D            jr   4187           // End with A = ($CD04), D = 1, and E = Secondary Weapon's used ATK
 ROMC:417A 16 00            ld   d,00
 ROMC:417C 7B               ld   a,e            // A = Primay Weapon's used ATK if set, 0 otherwise
 ROMC:417D A7               and  a
 ROMC:417E 28 0C            jr   z,418C         // End result of neither weapon being set is A = 0, D = 0, and E = 0
 ROMC:4180 16 00            ld   d,00
 ROMC:4182 FA F6 CC         ld   a,(CCF6)
 ROMC:4185 18 05            jr   418C
 ROMC:4187 16 01            ld   d,01
 ROMC:4189 FA 04 CD         ld   a,(CD04)
 ROMC:418C E1               pop  hl
 ROMC:418D C1               pop  bc
 ROMC:418E C9               ret                 // A = used Weapon's ID, D = secondary weapon check, E = used Weapon's used ATK
 ROMC:418F C5               push bc
 ROMC:4190 D5               push de
 ROMC:4191 E5               push hl
 ROMC:4192 CD C1 41         call 41C1           // Controls for Fire Command, ending with A = selected target for A Button press, or -1 for B Button press
 ROMC:4195 FE FF            cp   a,FF
 ROMC:4197 28 19            jr   z,41B2         // Ends with shift to coordinates BC and A = -1 for B Button press
 ROMC:4199 F5               push af
 ROMC:419A EF 0B F4 68                          // Updates the graphics of tiles BC and the original starting tile
 ROMC:419E F1               pop  af
 ROMC:419F 5F               ld   e,a            // E = Selected target
 ROMC:41A0 FA D8 C9         ld   a,(C9D8)
 ROMC:41A3 57               ld   d,a
 ROMC:41A4 CD CF 43         call 43CF           // Fully handles invoked combat (BC is attacker's coordinates, D is attacker's unit #, E is defender's unit #)
 ROMC:41A7 EF 0B 01 7B                          // Handles map graphics shift to coordinates BC
 ROMC:41AB EF 0B D9 45                          // If BC is not north or west of view, establishes cursor's within view and overall coordinates, and then cursor's sprite graphics location center
 ROMC:41AF AF               xor  a
 ROMC:41B0 18 0B            jr   41BD
 ROMC:41B2 EF 0B 01 7B                          // Handles map graphics shift to coordinates BC
 ROMC:41B6 3E 0C            ld   a,0C
 ROMC:41B8 CD 44 38         call 3844
 ROMC:41BB 3E FF            ld   a,FF
 ROMC:41BD E1               pop  hl
 ROMC:41BE D1               pop  de
 ROMC:41BF C1               pop  bc
 ROMC:41C0 C9               ret                 // Fire Command as a whole, including any results if confirmed; ends with A = 0 for confirmation, or -1 for cancellation (BC is attacking unit's coordinates)
 ROMC:41C1 C5               push bc
 ROMC:41C2 F0 82            ld   a,(ff00+82)
 ROMC:41C4 F5               push af
 ROMC:41C5 3E 04            ld   a,04
 ROMC:41C7 E0 82            ld   (ff00+82),a
 ROMC:41C9 E0 70            ld   (ff00+70),a
 ROMC:41CB AF               xor  a
 ROMC:41CC EA 40 C9         ld   (C940),a
 ROMC:41CF CD 0F 43         call 430F           // Cursor placed on selected unit for selection
 ROMC:41D2 EF 0B F9 46                          // res 0,WRA4[$D000 + ($C98D) * 16]
 ROMC:41D6 EF 0B FA 74                          // General map view graphics update
 ROMC:41DA EF 0B 15 68                          // Flashing tile's graphics updated every 15 frames
 ROMC:41DE FA 91 CA         ld   a,(CA91)
 ROMC:41E1 CB 47            bit  0,a            // A (Confirm target; ends with selected target)
 ROMC:41E3 C2 9C 42         jp   nz,429C
 ROMC:41E6 CB 4F            bit  1,a            // B (Cancel; ends with A = -1)
 ROMC:41E8 C2 C3 42         jp   nz,42C3
 ROMC:41EB CB 6F            bit  5,a            // Left
 ROMC:41ED 20 16            jr   nz,4205
 ROMC:41EF CB 77            bit  6,a            // Up
 ROMC:41F1 20 12            jr   nz,4205
 ROMC:41F3 CB 67            bit  4,a            // Right
 ROMC:41F5 20 1C            jr   nz,4213
 ROMC:41F7 CB 7F            bit  7,a            // Down
 ROMC:41F9 20 18            jr   nz,4213
 ROMC:41FB CB 57            bit  2,a            // Select (Unit Information)
 ROMC:41FD 20 35            jr   nz,4234
 ROMC:41FF CB 5F            bit  3,a            // Start (Battle Forecast)
 ROMC:4201 20 57            jr   nz,425A
 ROMC:4203 18 D1            jr   41D6           // Jumped from no press
 ROMC:4205 FA 40 C9         ld   a,(C940)       // Left/Up was pressed
 ROMC:4208 3D               dec  a
 ROMC:4209 FE FF            cp   a,FF
 ROMC:420B 20 12            jr   nz,421F
 ROMC:420D FA F7 DB         ld   a,(DBF7)
 ROMC:4210 3D               dec  a              // A = Last valid target if cycling from first
 ROMC:4211 18 0C            jr   421F
 ROMC:4213 FA F7 DB         ld   a,(DBF7)       // Right/Down was pressed
 ROMC:4216 47               ld   b,a
 ROMC:4217 FA 40 C9         ld   a,(C940)
 ROMC:421A 3C               inc  a
 ROMC:421B B8               cp   b
 ROMC:421C 20 01            jr   nz,421F
 ROMC:421E AF               xor  a              // A = First valid target if cycling from last
 ROMC:421F EA 40 C9         ld   (C940),a       // ($C940) = Current valid target #
 ROMC:4222 EF 0B C2 77                          // Handles clear-up of all selected unit info sprites
 ROMC:4226 EF 0B FB 67                          // Establishes tile ($C9E1)'s entire graphics
 ROMC:422A CD 0F 43         call 430F           // Cursor placed on selected unit for selection
 ROMC:422D 3E 09            ld   a,09
 ROMC:422F CD 44 38         call 3844
 ROMC:4232 18 A2            jr   41D6           // Jumps from D-Pad direction
 ROMC:4234 CD 64 21         call 2164           // Empties $FFB1 and $FFB2 (Select was pressed)
 ROMC:4237 EF 0B FB 67                          // Establishes tile ($C9E1)'s entire graphics
 ROMC:423B CD 9F 2F         call 2F9F           // set 0,WRA4($Dxx0) for every active sprite
 ROMC:423E CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMC:4241 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMC:4244 FA 41 C9         ld   a,(C941)
 ROMC:4247 0E 00            ld   c,00
 ROMC:4249 EF 12 66 40                          
 ROMC:424D 4F               ld   c,a
 ROMC:424E E6 01            and  a,01
 ROMC:4250 47               ld   b,a
 ROMC:4251 79               ld   a,c
 ROMC:4252 CB 3F            srl  a              // A = Unit Type, B = unit's side
 ROMC:4254 EF 25 A5 5D                          // Controls for Unit Information Screen as a whole including unit selection list (A is Unit Type, B is Side)
 ROMC:4258 18 32            jr   428C           // Jumps from Select portion
 ROMC:425A CD E2 42         call 42E2           // A = used weapon's ID (set to 0 if no ammo), D = secondary weapon check, and E = used weapon's used ATK; if no ammo, Ammo Popup message happens instead
 ROMC:425D A7               and  a
 ROMC:425E CA D6 41         jp   z,41D6         // Preemptively jumps from Start if no ammo left
 ROMC:4261 CD 64 21         call 2164           // Empties $FFB1 and $FFB2
 ROMC:4264 EF 0B FB 67                          // Establishes tile ($C9E1)'s entire graphics
 ROMC:4268 3E 0A            ld   a,0A
 ROMC:426A CD 44 38         call 3844
 ROMC:426D FA DE CC         ld   a,(CCDE)
 ROMC:4270 47               ld   b,a
 ROMC:4271 FA DF CC         ld   a,(CCDF)
 ROMC:4274 4F               ld   c,a            // BC = Coordinates
 ROMC:4275 FA D8 C9         ld   a,(C9D8)
 ROMC:4278 57               ld   d,a
 ROMC:4279 FA 41 C9         ld   a,(C941)
 ROMC:427C 5F               ld   e,a
 ROMC:427D CD 4F 46         call 464F           // Establishes battle stats including damage calculations
 ROMC:4280 CD 9F 2F         call 2F9F           // set 0,WRA4($Dxx0) for every active sprite
 ROMC:4283 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMC:4286 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMC:4289 CD 70 4C         call 4C70           // Battle forecast controls
 ROMC:428C EF 0B E6 69                          // Reestablishes map graphics (meets back here from Select)
 ROMC:4290 CD 0F 43         call 430F           // Cursor placed on selected unit for selection
 ROMC:4293 CD 79 2F         call 2F79           // res 0,WRA4($Dxx0) for every active sprite
 ROMC:4296 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMC:4299 C3 D6 41         jp   41D6           // Jumps from Start or Select
 ROMC:429C FA DD CC         ld   a,(CCDD)       // A was pressed
 ROMC:429F EF 0B 24 7D                          // Zero Flag set by either A = 0, or A and ($C633) are both either odd or even
 ROMC:42A3 20 16            jr   nz,42BB        // Branches with different side unit
 ROMC:42A5 CD E2 42         call 42E2           // A = used weapon's ID (set to 0 if no ammo), D = secondary weapon check, and E = used weapon's used ATK; if no ammo, Ammo Popup message happens instead
 ROMC:42A8 A7               and  a
 ROMC:42A9 CA D6 41         jp   z,41D6         // Back to waiting for button input if no ammo
 ROMC:42AC 3E 0A            ld   a,0A
 ROMC:42AE CD 44 38         call 3844
 ROMC:42B1 EF 0B C2 77                          // Handles clear-up of all selected unit info sprites
 ROMC:42B5 EF 0B FB 67                          // Establishes tile ($C9E1)'s entire graphics
 ROMC:42B9 18 15            jr   42D0
 ROMC:42BB 3E 03            ld   a,03
 ROMC:42BD CD 44 38         call 3844
 ROMC:42C0 C3 D6 41         jp   41D6           // Jumps from illegal command due to trying to Fire with an enemy unit
 ROMC:42C3 EF 0B C2 77                          // Handles clear-up of all selected unit info sprites (B was pressed)
 ROMC:42C7 3E FF            ld   a,FF
 ROMC:42C9 EA 41 C9         ld   (C941),a
 ROMC:42CC EF 0B FB 67                          // Establishes tile ($C9E1)'s entire graphics
 ROMC:42D0 EF 0B C2 77                          // Handles clear-up of all selected unit info sprites
 ROMC:42D4 EF 0B BC 46                          // Cursor Sprite Palette White/Teal
 ROMC:42D8 F1               pop  af
 ROMC:42D9 E0 82            ld   (ff00+82),a
 ROMC:42DB E0 70            ld   (ff00+70),a
 ROMC:42DD C1               pop  bc
 ROMC:42DE FA 41 C9         ld   a,(C941)
 ROMC:42E1 C9               ret                 // Controls for Fire Command, ending with A = selected target for A Button press, or -1 for B Button press
 ROMC:42E2 FA D8 C9         ld   a,(C9D8)
 ROMC:42E5 EF 12 62 48                          // Establishes Unit's weapons' stats in ($CCED) to ($CD08)
 ROMC:42E9 FA F6 DB         ld   a,(DBF6)
 ROMC:42EC 47               ld   b,a            // B = distance
 ROMC:42ED FA 41 C9         ld   a,(C941)
 ROMC:42F0 0E 00            ld   c,00
 ROMC:42F2 EF 12 66 40                          // A = Unit Type of enemy
 ROMC:42F6 CD C1 40         call 40C1           // A = used weapon's ID, D = secondary weapon check, and E = used weapon's used ATK (added check of ammo)
 ROMC:42F9 A7               and  a
 ROMC:42FA C0               ret  nz             // Return if any weapon is used
 ROMC:42FB EF 0B FB 67                          // Establishes tile ($C9E1)'s entire graphics
 ROMC:42FF 3E 03            ld   a,03
 ROMC:4301 CD 44 38         call 3844
 ROMC:4304 3E 16            ld   a,16           // Ammo Exhausted
 ROMC:4306 EF 0B B5 51                          // Handles Popup Message as a whole including momentary cursor disabling (A is Popup Message #)
 ROMC:430A CD 0F 43         call 430F           // Cursor placed on selected unit for selection
 ROMC:430D AF               xor  a
 ROMC:430E C9               ret                 // A = used weapon's ID (set to 0 if no ammo), D = secondary weapon check, and E = used weapon's used ATK; if no ammo, Ammo Popup message happens instead
 ROMC:430F FA 40 C9         ld   a,(C940)
 ROMC:4312 21 F8 DB         ld   hl,DBF8
 ROMC:4315 CD BC 29         call 29BC           // HL += A
 ROMC:4318 7E               ld   a,(hl)         // A = Defending unit's unit #
 ROMC:4319 EA 41 C9         ld   (C941),a
 ROMC:431C FA 41 C9         ld   a,(C941)
 ROMC:431F 0E 01            ld   c,01
 ROMC:4321 EF 12 83 40                          
 ROMC:4325 43               ld   b,e
 ROMC:4326 4A               ld   c,d            // BC = Defending unit's Coordinates
 ROMC:4327 EF 0B F5 44                          // A = 1 if tile is outside full view, 0 otherwise
 ROMC:432B A7               and  a
 ROMC:432C 20 0B            jr   nz,4339
 ROMC:432E C5               push bc
 ROMC:432F EF 0B D9 45                          // If BC is not north or west of view, establishes cursor's within view and overall coordinates, and then cursor's sprite graphics location center
 ROMC:4333 CD 54 43         call 4354           // Sets up sprite stats for cursor and selected enemy's stats holder
 ROMC:4336 C1               pop  bc
 ROMC:4337 18 0B            jr   4344
 ROMC:4339 C5               push bc             // Meet back here from skip done by enemy tile outside full view
 ROMC:433A EF 0B 01 7B                          // Handles map graphics shift to coordinates BC
 ROMC:433E CD 54 43         call 4354           // Sets up sprite stats for cursor and selected enemy's stats holder
 ROMC:4341 C1               pop  bc
 ROMC:4342 18 00            jr   4344
 ROMC:4344 C5               push bc
 ROMC:4345 FA 41 C9         ld   a,(C941)
 ROMC:4348 0E 00            ld   c,00
 ROMC:434A EF 12 66 40                          // A = Unit Type
 ROMC:434E C1               pop  bc
 ROMC:434F EF 0B E3 67                          // ($C9E0) 5 byte holds in order: 0, Coordinates, Unit Type, Terrain Type (non-ownership)
 ROMC:4353 C9               ret                 // Cursor placed on selected unit for selection
 ROMC:4354 C5               push bc
 ROMC:4355 D5               push de
 ROMC:4356 FA 41 C9         ld   a,(C941)
 ROMC:4359 0E 04            ld   c,04
 ROMC:435B EF 12 66 40                          
 ROMC:435F EA 9F CA         ld   (CA9F),a       // ($CA9F) = enemy unit's HP
 ROMC:4362 FA 41 C9         ld   a,(C941)
 ROMC:4365 0E 07            ld   c,07
 ROMC:4367 EF 12 66 40                          
 ROMC:436B EA A0 CA         ld   (CAA0),a       // ($CAA0) = enemy unit's Fuel
 ROMC:436E EF 0B 63 77                          // Establishes selected unit stats holder graphics
 ROMC:4372 FA DE CC         ld   a,(CCDE)
 ROMC:4375 47               ld   b,a
 ROMC:4376 FA DF CC         ld   a,(CCDF)
 ROMC:4379 4F               ld   c,a            // BC = unit's coordinates
 ROMC:437A FA D8 C9         ld   a,(C9D8)
 ROMC:437D 57               ld   d,a            // D = selected unit
 ROMC:437E FA 41 C9         ld   a,(C941)
 ROMC:4381 5F               ld   e,a            // E = enemy unit
 ROMC:4382 CD 27 4E         call 4E27           // A = Attacker's HP loss * 16 + Defender's HP loss
 ROMC:4385 FA CF DB         ld   a,(DBCF)
 ROMC:4388 47               ld   b,a            // B = Attacker's Focus
 ROMC:4389 FA E4 DB         ld   a,(DBE4)
 ROMC:438C B8               cp   b              // Flags set: Defender winning is positive
 ROMC:438D 28 0E            jr   z,439D
 ROMC:438F 38 06            jr   c,4397
 ROMC:4391 EF 0B CE 46                          // Cursor Sprite Palette Orange/Dark Red (ambush)
 ROMC:4395 18 0A            jr   43A1           // Defender won
 ROMC:4397 EF 0B C5 46                          // Cursor Sprite Palette Aqua/Dark Blue (first strike)
 ROMC:439B 18 04            jr   43A1           // Attacker won
 ROMC:439D EF 0B BC 46                          // Cursor Sprite Palette White/Teal (same time)
 ROMC:43A1 7B               ld   a,e
 ROMC:43A2 EA 41 C9         ld   (C941),a
 ROMC:43A5 D1               pop  de
 ROMC:43A6 C1               pop  bc
 ROMC:43A7 C9               ret                 // Sets up sprite stats for cursor and selected enemy's stats holder
 ROMC:43A8 EF 12 62 48                          // Establishes Unit's weapons' stats in ($CCED) to ($CD08)
 ROMC:43AC FA F7 CC         ld   a,(CCF7)
 ROMC:43AF A7               and  a
 ROMC:43B0 28 1A            jr   z,43CC         // Ends with A = 1 if primary weapon is empty
 ROMC:43B2 FA DD CC         ld   a,(CCDD)
 ROMC:43B5 CB 3F            srl  a
 ROMC:43B7 FE 23            cp   a,23
 ROMC:43B9 28 0E            jr   z,43C9
 ROMC:43BB FE 24            cp   a,24
 ROMC:43BD 28 0A            jr   z,43C9
 ROMC:43BF FE 2D            cp   a,2D
 ROMC:43C1 28 06            jr   z,43C9
 ROMC:43C3 FE 33            cp   a,33
 ROMC:43C5 28 02            jr   z,43C9
 ROMC:43C7 18 03            jr   43CC
 ROMC:43C9 AF               xor  a
 ROMC:43CA 18 02            jr   43CE
 ROMC:43CC 3E 01            ld   a,01
 ROMC:43CE C9               ret                 // A = 0 if Anti-City weapon is available, 1 otherwise
 ROMC:43CF C5               push bc
 ROMC:43D0 F0 82            ld   a,(ff00+82)
 ROMC:43D2 F5               push af
 ROMC:43D3 3E 04            ld   a,04
 ROMC:43D5 E0 82            ld   (ff00+82),a
 ROMC:43D7 E0 70            ld   (ff00+70),a
 ROMC:43D9 7B               ld   a,e
 ROMC:43DA EA E6 C9         ld   (C9E6),a       // ($C9E6) = defender's unit #
 ROMC:43DD EF 12 F5 40                          // A = EXP / 100
 ROMC:43E1 EA E7 C9         ld   (C9E7),a       // ($C9E7) = Level
 ROMC:43E4 CD 4F 46         call 464F           // Establishes battle stats including damage calculations
 ROMC:43E7 CD 67 4B         call 4B67           // HP, Ammo, and Participation EXP updated by combat results
 ROMC:43EA CD 27 4C         call 4C27           // Damage EXP for both sides
 ROMC:43ED FA CA DB         ld   a,(DBCA)
 ROMC:43F0 CB 3F            srl  a
 ROMC:43F2 EA CA DB         ld   (DBCA),a       // Attacker's Unit Type doesn't include side now
 ROMC:43F5 FA DF DB         ld   a,(DBDF)
 ROMC:43F8 CB 3F            srl  a
 ROMC:43FA EA DF DB         ld   (DBDF),a       // Defender's Unit Type doesn't include side now
 ROMC:43FD FA C8 DB         ld   a,(DBC8)
 ROMC:4400 47               ld   b,a            // B = Attacker Unit #
 ROMC:4401 FA C9 DB         ld   a,(DBC9)       // A = Defender Unit #
 ROMC:4404 B8               cp   b
 ROMC:4405 38 1A            jr   c,4421         // Jumps if attacking player is White Moon
 ROMC:4407 11 CA DB         ld   de,DBCA
 ROMC:440A 21 77 D3         ld   hl,D377
 ROMC:440D 01 06 00         ld   bc,0006
 ROMC:4410 CD 50 3B         call 3B50           // ($D377~$D37C) holds Unit Type, Old HP, New HP, Terrain, Used Weapon, Focus of attacker Red Star
 ROMC:4413 11 DF DB         ld   de,DBDF
 ROMC:4416 21 7D D3         ld   hl,D37D
 ROMC:4419 01 06 00         ld   bc,0006
 ROMC:441C CD 50 3B         call 3B50           // ($D37D~$D382) holds Unit Type, Old HP, New HP, Terrain, Used Weapon, Focus of defender White Moon
 ROMC:441F 18 18            jr   4439
 ROMC:4421 11 CA DB         ld   de,DBCA
 ROMC:4424 21 7D D3         ld   hl,D37D
 ROMC:4427 01 06 00         ld   bc,0006
 ROMC:442A CD 50 3B         call 3B50           // ($D37D~$D382) holds Unit Type, Old HP, New HP, Terrain, Used Weapon, Focus of attacker White Moon
 ROMC:442D 11 DF DB         ld   de,DBDF
 ROMC:4430 21 77 D3         ld   hl,D377
 ROMC:4433 01 06 00         ld   bc,0006
 ROMC:4436 CD 50 3B         call 3B50           // ($D377~$D37C) holds Unit Type, Old HP, New HP, Terrain, Used Weapon, Focus of defender Red Star
 ROMC:4439 3E 04            ld   a,04           // No default Action Animation due to combat
 ROMC:443B EF 0C BB 66                          // Action Animation cutscene of Unloading play out where applicable
 ROMC:443F FA ED DB         ld   a,(DBED)       // A = Defender's Flanked value
 ROMC:4442 FE 32            cp   a,32
 ROMC:4444 20 0C            jr   nz,4452        // Skips next portion if defender's Flanked value isn't 50 (why isn't this a jr c?)
 ROMC:4446 FA E5 DB         ld   a,(DBE5)
 ROMC:4449 47               ld   b,a
 ROMC:444A FA E6 DB         ld   a,(DBE6)
 ROMC:444D 4F               ld   c,a            // BC = defender's coordinates
 ROMC:444E EF 0C 16 5E                          // "YIKES!" Sprite animation
 ROMC:4452 FA 85 C6         ld   a,(C685)
 ROMC:4455 CB 47            bit  0,a            // Battle Animation
 ROMC:4457 28 22            jr   z,447B
 ROMC:4459 EF 0B 00 47                          // set 0,WRA4($D000 + ($C98D) * 16)
 ROMC:445D CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMC:4460 FA D0 DB         ld   a,(DBD0)
 ROMC:4463 47               ld   b,a
 ROMC:4464 FA D1 DB         ld   a,(DBD1)
 ROMC:4467 4F               ld   c,a            // BC = attacker's coordinates
 ROMC:4468 CD 9B 45         call 459B           // Iris out on coordinate BC's upper-left quarter
 ROMC:446B CD 67 2E         call 2E67           // Handles clear-up of all sprite portions and entire ($C400) table, sets ($C00E) to 1
 ROMC:446E CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMC:4471 EF 16 25 43                          // Battle Screen animation as a whole
 ROMC:4475 EF 0B E6 69                          // Reestablishes map graphics
 ROMC:4479 18 03            jr   447E
 ROMC:447B CD 88 44         call 4488           // Attack Summary showcase for combat if Battle Animations is Off
 ROMC:447E CD 85 4E         call 4E85           // Handles unit loss animation where needed for each unit starting with attacker
 ROMC:4481 F1               pop  af
 ROMC:4482 E0 82            ld   (ff00+82),a
 ROMC:4484 E0 70            ld   (ff00+70),a
 ROMC:4486 C1               pop  bc
 ROMC:4487 C9               ret                 // Fully handles invoked combat (BC is attacker's coordinates, D is attacker's unit #, E is defender's unit #)
 ROMC:4488 F0 82            ld   a,(ff00+82)
 ROMC:448A F5               push af
 ROMC:448B 3E 04            ld   a,04
 ROMC:448D E0 82            ld   (ff00+82),a
 ROMC:448F E0 70            ld   (ff00+70),a
 ROMC:4491 EF 0B 00 47                          // set 0,WRA4($D000 + ($C98D) * 16)
 ROMC:4495 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMC:4498 01 06 05         ld   bc,0506
 ROMC:449B 11 06 0A         ld   de,0A06
 ROMC:449E EF 0B 3D 76                          // Sets up next table of covered graphics within late WRA4 Bank (rectangle 5~14, 6~11)
 ROMC:44A2 EF 10 09 6A                          // Tile placement and coloring handled for [$9800 + B + C * 32] table size indicated by DE using [$DC6C] and [$DC6D] as the base
 ROMC:44A6 3E 80            ld   a,80
 ROMC:44A8 EF 10 FD 6A                          // VRA0 rectangle B+1,C+1, size D-1,E-1, set to 128, and VRA1 same rectangle set to default palette
 ROMC:44AC 3E 00            ld   a,00
 ROMC:44AE E0 83            ld   (ff00+83),a
 ROMC:44B0 E0 4F            ld   (ff00+4F),a
 ROMC:44B2 21 80 8F         ld   hl,8F80
 ROMC:44B5 FA 77 D3         ld   a,(D377)
 ROMC:44B8 87               add  a              // A = Red Star's Unit Type
 ROMC:44B9 EF 0B 75 76                          // (HL ~ HL+63) holds unit map graphics
 ROMC:44BD 3E 00            ld   a,00
 ROMC:44BF E0 83            ld   (ff00+83),a
 ROMC:44C1 E0 4F            ld   (ff00+4F),a
 ROMC:44C3 21 C0 8F         ld   hl,8FC0
 ROMC:44C6 FA 7D D3         ld   a,(D37D)
 ROMC:44C9 87               add  a
 ROMC:44CA 3C               inc  a              // A = White Moon's Unit Type
 ROMC:44CB EF 0B 75 76                          // (HL ~ HL+63) holds unit map graphics
 ROMC:44CF 01 07 07         ld   bc,0707
 ROMC:44D2 EF 0B 4A 76                          // B = Scroll 7; C = Scroll 7
 ROMC:44D6 CD D4 0E         call 0ED4           // HL = $9800 + B + C * 32
 ROMC:44D9 FA 77 D3         ld   a,(D377)
 ROMC:44DC 87               add  a
 ROMC:44DD 57               ld   d,a            // D = Red Star's Unit Type
 ROMC:44DE 01 03 00         ld   bc,0003
 ROMC:44E1 3E F8            ld   a,F8
 ROMC:44E3 EF 0B C9 76                          // Establishes Red Star's unit graphics at HL (A is tile location on character base, B is palette's VRAM bank, C is first palette + 3, D is unit type)
 ROMC:44E7 01 07 0B         ld   bc,0B07
 ROMC:44EA EF 0B 4A 76                          // B = Scroll 11; C = Scroll 7
 ROMC:44EE CD D4 0E         call 0ED4           // HL = $9800 + B + C * 32
 ROMC:44F1 FA 7D D3         ld   a,(D37D)
 ROMC:44F4 87               add  a
 ROMC:44F5 3C               inc  a
 ROMC:44F6 57               ld   d,a            // D = White Moon's Unit Type
 ROMC:44F7 01 03 00         ld   bc,0003
 ROMC:44FA 3E FC            ld   a,FC
 ROMC:44FC EF 0B C9 76                          // Establishes White Moon's unit graphics at HL (A is tile location on character base, B is palette's VRAM bank, C is first palette + 3, D is unit type)
 ROMC:4500 3E 02            ld   a,02           // Loop begins here
 ROMC:4502 CD 44 38         call 3844
 ROMC:4505 CD 7A 45         call 457A           // Establishes Attack Summary HP text
 ROMC:4508 06 06            ld   b,06
 ROMC:450A CD D2 04         call 04D2           // Next frame
 ROMC:450D 05               dec  b
 ROMC:450E 20 FA            jr   nz,450A        // 6 frames per HP reduced
 ROMC:4510 0E 00            ld   c,00
 ROMC:4512 FA 79 D3         ld   a,(D379)
 ROMC:4515 47               ld   b,a            // B = Red Star's New HP
 ROMC:4516 FA 78 D3         ld   a,(D378)       // A = Red Star's Old HP
 ROMC:4519 B8               cp   b
 ROMC:451A 28 06            jr   z,4522         // Skips next portion if Red Star's unit isn't damaged further
 ROMC:451C 0E 01            ld   c,01
 ROMC:451E 3D               dec  a
 ROMC:451F EA 78 D3         ld   (D378),a       // Red Star's Old HP is updated
 ROMC:4522 FA 7F D3         ld   a,(D37F)
 ROMC:4525 47               ld   b,a            // B = White Moon's New HP
 ROMC:4526 FA 7E D3         ld   a,(D37E)       // A = White Moon's Old HP
 ROMC:4529 B8               cp   b
 ROMC:452A 28 08            jr   z,4534         // Branches if White Moon's unit isn't damaged further
 ROMC:452C 0E 01            ld   c,01
 ROMC:452E 3D               dec  a
 ROMC:452F EA 7E D3         ld   (D37E),a       // White Moon's Old HP is updated
 ROMC:4532 18 CC            jr   4500
 ROMC:4534 79               ld   a,c
 ROMC:4535 A7               and  a
 ROMC:4536 20 C8            jr   nz,4500        // Restart loop if HP needs to update further
 ROMC:4538 06 3C            ld   b,3C
 ROMC:453A C5               push bc
 ROMC:453B CD A2 05         call 05A2           // Button update, next frame
 ROMC:453E C1               pop  bc
 ROMC:453F 05               dec  b
 ROMC:4540 28 06            jr   z,4548
 ROMC:4542 F0 91            ld   a,(ff00+91)
 ROMC:4544 E6 0B            and  a,0B           // A, B, or Start
 ROMC:4546 28 F2            jr   z,453A         // Pressing A, B, or Start seems to save up to 60 frames, or 1 second. Fascinating.
 ROMC:4548 EF 0B 45 76                          // Restores last table of covered graphics
 ROMC:454C EF 0B F9 46                          // res 0,WRA4[$D000 + ($C98D) * 16]
 ROMC:4550 F1               pop  af
 ROMC:4551 E0 82            ld   (ff00+82),a
 ROMC:4553 E0 70            ld   (ff00+70),a
 ROMC:4555 C9               ret                 // Attack Summary showcase for combat if Battle Animations is Off
 ROMC:4556 01 07 06         ld   bc,0607
 ROMC:4559 1E 04            ld   e,04
 ROMC:455B C5               push bc             // Loop begins here
 ROMC:455C D5               push de
 ROMC:455D EF 0B 4A 76                          // B = Scroll 6; C = Scroll 7~10
 ROMC:4561 21 71 45         ld   hl,4571
 ROMC:4564 CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 ROMC:4567 D1               pop  de
 ROMC:4568 C1               pop  bc
 ROMC:4569 0C               inc  c
 ROMC:456A 1D               dec  e
 ROMC:456B 20 EE            jr   nz,455B
 ROMC:456D CD 2E 35         call 352E           // Text catchup
 ROMC:4570 C9               ret                 // Sets characters at Scroll 6~13,7~10 to $80 (unused)

 ROMC:4571 80 80 80 80 80 80 80 80 00

 ROMC:457A 01 0A 07         ld   bc,070A
 ROMC:457D EF 0B 4A 76                          // B = Scroll 7; C = Scroll 10
 ROMC:4581 16 02            ld   d,02
 ROMC:4583 FA 78 D3         ld   a,(D378)       // A = Red Star's Old HP
 ROMC:4586 EF 0B 2A 79                          // VRA0 BC coordinates holds Red Star's Old HP text
 ROMC:458A 01 0A 0B         ld   bc,0B0A
 ROMC:458D EF 0B 4A 76                          // B = Scroll 11; C = Scroll 10
 ROMC:4591 16 02            ld   d,02
 ROMC:4593 FA 7E D3         ld   a,(D37E)       // A = White Moon's Old HP
 ROMC:4596 EF 0B 2A 79                          // VRA0 BC coordinates holds White Moon's Old HP text
 ROMC:459A C9               ret                 // Establishes Attack Summary Old HP text
 ROMC:459B CD 64 21         call 2164           // Empties $FFB1 and $FFB2
 ROMC:459E 3E 18            ld   a,18
 ROMC:45A0 CD 44 38         call 3844
 ROMC:45A3 50               ld   d,b
 ROMC:45A4 59               ld   e,c
 ROMC:45A5 FA 8B C9         ld   a,(C98B)
 ROMC:45A8 47               ld   b,a
 ROMC:45A9 FA 8C C9         ld   a,(C98C)
 ROMC:45AC 4F               ld   c,a            // BC holds map scroll, DE holds initial BC
 ROMC:45AD 7B               ld   a,e
 ROMC:45AE 91               sub  c
 ROMC:45AF 87               add  a              // A = 2(E - C)
 ROMC:45B0 4F               ld   c,a            // C = 2(E - C)
 ROMC:45B1 7A               ld   a,d
 ROMC:45B2 90               sub  b
 ROMC:45B3 87               add  a              // A = 2(D - B)
 ROMC:45B4 CB 3B            srl  e
 ROMC:45B6 CE 00            adc  a,00           // A = 2(D - B) + E%1
 ROMC:45B8 47               ld   b,a            // B = 2(D - B) + E%1
 ROMC:45B9 16 15            ld   d,15
 ROMC:45BB 1E 15            ld   e,15           // DE = 21,21
 ROMC:45BD CD D2 04         call 04D2           // Next frame (Loop begins here)
 ROMC:45C0 79               ld   a,c
 ROMC:45C1 93               sub  e              // A = 2(E - C) - (21)
 ROMC:45C2 38 03            jr   c,45C7
 ROMC:45C4 CD EB 45         call 45EB           // Blanks row of map quarter-tiles determined by A
 ROMC:45C7 79               ld   a,c
 ROMC:45C8 83               add  e              // A = 2(E - C) + (21)
 ROMC:45C9 FE 12            cp   a,12
 ROMC:45CB 30 03            jr   nc,45D0
 ROMC:45CD CD EB 45         call 45EB           // Blanks row of map quarter-tiles determined by A
 ROMC:45D0 78               ld   a,b
 ROMC:45D1 92               sub  d              // A = 2(D - B) + E%1 - (21)
 ROMC:45D2 38 03            jr   c,45D7
 ROMC:45D4 CD 1D 46         call 461D           // Blanks column of map quarter-tiles determined by A
 ROMC:45D7 78               ld   a,b
 ROMC:45D8 82               add  d              // A = 2(D - B) + E%1 + (21)
 ROMC:45D9 FE 14            cp   a,14
 ROMC:45DB 30 03            jr   nc,45E0
 ROMC:45DD CD 1D 46         call 461D           // Blanks column of map quarter-tiles determined by A
 ROMC:45E0 15               dec  d
 ROMC:45E1 1D               dec  e
 ROMC:45E2 7B               ld   a,e
 ROMC:45E3 FE FF            cp   a,FF
 ROMC:45E5 20 D6            jr   nz,45BD
 ROMC:45E7 CD 1D 46         call 461D           // Blanks column of map quarter-tiles determined by A
 ROMC:45EA C9               ret                 // Iris out on coordinate BC's upper-left quarter
 ROMC:45EB C5               push bc
 ROMC:45EC D5               push de
 ROMC:45ED 4F               ld   c,a
 ROMC:45EE 06 00            ld   b,00
 ROMC:45F0 EF 0B 4A 76                          // B = ($FF95)/8; C = ($FF96)/8 + A%32
 ROMC:45F4 CD D4 0E         call 0ED4           // HL = $9800 + B + C * 32
 ROMC:45F7 1E 14            ld   e,14
 ROMC:45F9 3E 00            ld   a,00           // Loop begins here
 ROMC:45FB E0 83            ld   (ff00+83),a
 ROMC:45FD E0 4F            ld   (ff00+4F),a
 ROMC:45FF AF               xor  a
 ROMC:4600 CD 2D 0F         call 0F2D           // (HL) = 0 with cooldown based on bit 1,($FF41)
 ROMC:4603 3E 01            ld   a,01
 ROMC:4605 E0 83            ld   (ff00+83),a
 ROMC:4607 E0 4F            ld   (ff00+4F),a
 ROMC:4609 AF               xor  a
 ROMC:460A CD 2D 0F         call 0F2D           // (HL) = 0 with cooldown based on bit 1,($FF41)
 ROMC:460D 7D               ld   a,l
 ROMC:460E E6 E0            and  a,E0
 ROMC:4610 57               ld   d,a
 ROMC:4611 7D               ld   a,l
 ROMC:4612 3C               inc  a
 ROMC:4613 E6 1F            and  a,1F
 ROMC:4615 B2               or   d
 ROMC:4616 6F               ld   l,a
 ROMC:4617 1D               dec  e
 ROMC:4618 20 DF            jr   nz,45F9
 ROMC:461A D1               pop  de
 ROMC:461B C1               pop  bc
 ROMC:461C C9               ret                 // Blanks row of map quarter-tiles determined by A
 ROMC:461D C5               push bc
 ROMC:461E D5               push de
 ROMC:461F 47               ld   b,a
 ROMC:4620 0E 00            ld   c,00
 ROMC:4622 EF 0B 4A 76                          // B = ($FF95)/8 + A%32; C = ($FF96)/8
 ROMC:4626 CD D4 0E         call 0ED4           // HL = $9800 + B + C * 32
 ROMC:4629 1E 12            ld   e,12
 ROMC:462B D5               push de             // Loop begins here
 ROMC:462C 3E 00            ld   a,00
 ROMC:462E E0 83            ld   (ff00+83),a
 ROMC:4630 E0 4F            ld   (ff00+4F),a
 ROMC:4632 AF               xor  a
 ROMC:4633 CD 2D 0F         call 0F2D           // (HL) = 0 with cooldown based on bit 1,($FF41)
 ROMC:4636 3E 01            ld   a,01
 ROMC:4638 E0 83            ld   (ff00+83),a
 ROMC:463A E0 4F            ld   (ff00+4F),a
 ROMC:463C AF               xor  a
 ROMC:463D CD 2D 0F         call 0F2D           // (HL) = 0 with cooldown based on bit 1,($FF41)
 ROMC:4640 11 20 00         ld   de,0020
 ROMC:4643 19               add  hl,de
 ROMC:4644 7C               ld   a,h
 ROMC:4645 E6 9B            and  a,9B
 ROMC:4647 67               ld   h,a
 ROMC:4648 D1               pop  de
 ROMC:4649 1D               dec  e
 ROMC:464A 20 DF            jr   nz,462B
 ROMC:464C D1               pop  de
 ROMC:464D C1               pop  bc
 ROMC:464E C9               ret                 // Blanks column of map quarter-tiles determined by A
 ROMC:464F F0 82            ld   a,(ff00+82)
 ROMC:4651 F5               push af
 ROMC:4652 3E 04            ld   a,04
 ROMC:4654 E0 82            ld   (ff00+82),a
 ROMC:4656 E0 70            ld   (ff00+70),a
 ROMC:4658 C5               push bc
 ROMC:4659 AF               xor  a
 ROMC:465A 21 CA DB         ld   hl,DBCA
 ROMC:465D 01 15 00         ld   bc,0015
 ROMC:4660 CD 79 3B         call 3B79           // Empties WRA4($DBCA) to ($DBDE)
 ROMC:4663 AF               xor  a
 ROMC:4664 21 DF DB         ld   hl,DBDF
 ROMC:4667 01 15 00         ld   bc,0015
 ROMC:466A CD 79 3B         call 3B79           // Empties WRA4($DBDF) to ($DBF3)
 ROMC:466D C1               pop  bc
 ROMC:466E 7A               ld   a,d
 ROMC:466F EA C8 DB         ld   (DBC8),a
 ROMC:4672 7B               ld   a,e
 ROMC:4673 EA C9 DB         ld   (DBC9),a
 ROMC:4676 78               ld   a,b
 ROMC:4677 EA D0 DB         ld   (DBD0),a
 ROMC:467A 79               ld   a,c
 ROMC:467B EA D1 DB         ld   (DBD1),a
 ROMC:467E FA C9 DB         ld   a,(DBC9)
 ROMC:4681 0E 01            ld   c,01
 ROMC:4683 EF 12 83 40                          
 ROMC:4687 7B               ld   a,e
 ROMC:4688 EA E5 DB         ld   (DBE5),a
 ROMC:468B 7A               ld   a,d
 ROMC:468C EA E6 DB         ld   (DBE6),a       // ($DBE5) 2 byte holds defender coordinates
 ROMC:468F FA D0 DB         ld   a,(DBD0)
 ROMC:4692 47               ld   b,a
 ROMC:4693 FA D1 DB         ld   a,(DBD1)
 ROMC:4696 4F               ld   c,a            // BC holds attacker coordinates
 ROMC:4697 FA E5 DB         ld   a,(DBE5)
 ROMC:469A 57               ld   d,a
 ROMC:469B FA E6 DB         ld   a,(DBE6)
 ROMC:469E 5F               ld   e,a            // DE holds defender coordinates
 ROMC:469F EF 0B 1D 29                          // A = space difference between combatants
 ROMC:46A3 EA F6 DB         ld   (DBF6),a       // ($DBF6) is distance of attack
 ROMC:46A6 FA C8 DB         ld   a,(DBC8)
 ROMC:46A9 0E 00            ld   c,00
 ROMC:46AB EF 12 66 40                          
 ROMC:46AF EA CA DB         ld   (DBCA),a       // ($DBCA) = Unit Type
 ROMC:46B2 FA C8 DB         ld   a,(DBC8)
 ROMC:46B5 0E 04            ld   c,04
 ROMC:46B7 EF 12 66 40                          
 ROMC:46BB EA CB DB         ld   (DBCB),a       // ($DBCB) = Attacker's HP
 ROMC:46BE EA CC DB         ld   (DBCC),a       // ($DBCC) = Attacker's HP
 ROMC:46C1 EA D3 DB         ld   (DBD3),a       // ($DBD3) = Attacker's HP
 ROMC:46C4 FA CA DB         ld   a,(DBCA)
 ROMC:46C7 0E 18            ld   c,18
 ROMC:46C9 EF 12 37 40                          // Unit Family
 ROMC:46CD EA D2 DB         ld   (DBD2),a       // ($DBD2) = Attacker's Unit Family
 ROMC:46D0 FA D0 DB         ld   a,(DBD0)
 ROMC:46D3 47               ld   b,a
 ROMC:46D4 FA D1 DB         ld   a,(DBD1)
 ROMC:46D7 4F               ld   c,a
 ROMC:46D8 EF 0B 70 47                          // A = Terrain Type
 ROMC:46DC EA CD DB         ld   (DBCD),a
 ROMC:46DF CD 61 48         call 4861           // A = Terrain's Cover value
 ROMC:46E2 EA D6 DB         ld   (DBD6),a       // ($DBD6) = Attacker's Cover
 ROMC:46E5 FA D2 DB         ld   a,(DBD2)
 ROMC:46E8 FE 02            cp   a,02
 ROMC:46EA 20 04            jr   nz,46F0        // Jump if not Air
 ROMC:46EC AF               xor  a
 ROMC:46ED EA D6 DB         ld   (DBD6),a
 ROMC:46F0 FA C8 DB         ld   a,(DBC8)
 ROMC:46F3 CD 91 49         call 4991           // A = Level boost
 ROMC:46F6 EA D7 DB         ld   (DBD7),a       // ($DBD7) = Level
 ROMC:46F9 FA D0 DB         ld   a,(DBD0)
 ROMC:46FC 47               ld   b,a
 ROMC:46FD FA D1 DB         ld   a,(DBD1)
 ROMC:4700 4F               ld   c,a
 ROMC:4701 FA C8 DB         ld   a,(DBC8)
 ROMC:4704 CD 84 48         call 4884           // A = Flanked penalty
 ROMC:4707 EA D8 DB         ld   (DBD8),a
 ROMC:470A FA C8 DB         ld   a,(DBC8)
 ROMC:470D 57               ld   d,a
 ROMC:470E FA E5 DB         ld   a,(DBE5)
 ROMC:4711 47               ld   b,a
 ROMC:4712 FA E6 DB         ld   a,(DBE6)
 ROMC:4715 4F               ld   c,a
 ROMC:4716 FA C9 DB         ld   a,(DBC9)
 ROMC:4719 CD 19 49         call 4919           // A and ($C944) = Support boost
 ROMC:471C EA D9 DB         ld   (DBD9),a
 ROMC:471F FA C9 DB         ld   a,(DBC9)
 ROMC:4722 0E 00            ld   c,00
 ROMC:4724 EF 12 66 40                          
 ROMC:4728 EA DF DB         ld   (DBDF),a       // ($DBDF) = Unit Type
 ROMC:472B FA C9 DB         ld   a,(DBC9)
 ROMC:472E 0E 04            ld   c,04
 ROMC:4730 EF 12 66 40                          
 ROMC:4734 EA E0 DB         ld   (DBE0),a       // ($DBE0) = Current HP
 ROMC:4737 EA E1 DB         ld   (DBE1),a       // ($DBE1) = Current HP
 ROMC:473A EA E8 DB         ld   (DBE8),a       // ($DBE8) = Current HP
 ROMC:473D FA DF DB         ld   a,(DBDF)       // Defender's Unit Type
 ROMC:4740 0E 18            ld   c,18
 ROMC:4742 EF 12 37 40                          // Unit Family
 ROMC:4746 EA E7 DB         ld   (DBE7),a       // ($DBE7) = Unit Family
 ROMC:4749 FA E5 DB         ld   a,(DBE5)       // Defender's coordinates
 ROMC:474C 47               ld   b,a
 ROMC:474D FA E6 DB         ld   a,(DBE6)
 ROMC:4750 4F               ld   c,a
 ROMC:4751 EF 0B 70 47                          // A = Terrain Type
 ROMC:4755 EA E2 DB         ld   (DBE2),a
 ROMC:4758 CD 61 48         call 4861           // A = Terrain's Cover value
 ROMC:475B EA EB DB         ld   (DBEB),a
 ROMC:475E FA E7 DB         ld   a,(DBE7)
 ROMC:4761 FE 02            cp   a,02
 ROMC:4763 20 04            jr   nz,4769        // Jump if not Air
 ROMC:4765 AF               xor  a
 ROMC:4766 EA EB DB         ld   (DBEB),a
 ROMC:4769 FA C9 DB         ld   a,(DBC9)
 ROMC:476C CD 91 49         call 4991           // A = Level boost
 ROMC:476F EA EC DB         ld   (DBEC),a
 ROMC:4772 FA E5 DB         ld   a,(DBE5)       // Defender's Coordinates
 ROMC:4775 47               ld   b,a
 ROMC:4776 FA E6 DB         ld   a,(DBE6)
 ROMC:4779 4F               ld   c,a
 ROMC:477A FA C9 DB         ld   a,(DBC9)
 ROMC:477D CD 84 48         call 4884           // A = Flanked penalty
 ROMC:4780 EA ED DB         ld   (DBED),a
 ROMC:4783 FA C9 DB         ld   a,(DBC9)
 ROMC:4786 57               ld   d,a
 ROMC:4787 FA D0 DB         ld   a,(DBD0)
 ROMC:478A 47               ld   b,a
 ROMC:478B FA D1 DB         ld   a,(DBD1)
 ROMC:478E 4F               ld   c,a
 ROMC:478F FA C8 DB         ld   a,(DBC8)
 ROMC:4792 CD 19 49         call 4919           // A and ($C944) = Support boost
 ROMC:4795 EA EE DB         ld   (DBEE),a
 ROMC:4798 CD A7 47         call 47A7           // Establishes ATK and DEF stats as well as weapon choices for both attacker and defender
 ROMC:479B CD 00 48         call 4800           // ($DBCF) = attacker's Focus value, ($DBE4) = defender's Focus Value
 ROMC:479E CD 0A 4B         call 4B0A           // Damage calculations based on turn order
 ROMC:47A1 F1               pop  af
 ROMC:47A2 E0 82            ld   (ff00+82),a
 ROMC:47A4 E0 70            ld   (ff00+70),a
 ROMC:47A6 C9               ret                 // Establishes battle stats including damage calculations
 ROMC:47A7 FA C8 DB         ld   a,(DBC8)
 ROMC:47AA EF 12 62 48                          // Establishes attacker's weapons' stats in ($CCED) to ($CD08)
 ROMC:47AE FA F6 DB         ld   a,(DBF6)
 ROMC:47B1 47               ld   b,a            // B = Distance
 ROMC:47B2 FA DF DB         ld   a,(DBDF)
 ROMC:47B5 CD C1 40         call 40C1           // A = used weapon's ID, D = secondary weapon check, and E = used weapon's used ATK (added check of ammo)
 ROMC:47B8 EA CE DB         ld   (DBCE),a       // Attacker's used weapon
 ROMC:47BB 7A               ld   a,d
 ROMC:47BC EA DE DB         ld   (DBDE),a       // Attacker's weapon choice
 ROMC:47BF 7B               ld   a,e
 ROMC:47C0 EA D4 DB         ld   (DBD4),a       // Attacker's used ATK
 ROMC:47C3 FA E7 DB         ld   a,(DBE7)       // A = Defender's Unit Family
 ROMC:47C6 C6 1E            add  a,1E
 ROMC:47C8 4F               ld   c,a
 ROMC:47C9 FA CA DB         ld   a,(DBCA)
 ROMC:47CC EF 12 37 40                          // Attacker's used DEF value
 ROMC:47D0 EA D5 DB         ld   (DBD5),a
 ROMC:47D3 FA C9 DB         ld   a,(DBC9)
 ROMC:47D6 EF 12 62 48                          // Establishes Unit's weapons' stats in ($CCED) to ($CD08)
 ROMC:47DA FA F6 DB         ld   a,(DBF6)
 ROMC:47DD 47               ld   b,a            // B = Distance
 ROMC:47DE FA CA DB         ld   a,(DBCA)
 ROMC:47E1 CD C1 40         call 40C1           // A = used weapon's ID, D = secondary weapon check, and E = used weapon's used ATK (added check of ammo)
 ROMC:47E4 EA E3 DB         ld   (DBE3),a       // Defender's used weapon
 ROMC:47E7 7A               ld   a,d
 ROMC:47E8 EA F3 DB         ld   (DBF3),a       // Defender's weapon choice
 ROMC:47EB 7B               ld   a,e
 ROMC:47EC EA E9 DB         ld   (DBE9),a       // Defender's used ATK
 ROMC:47EF FA D2 DB         ld   a,(DBD2)       // A = Attacker's Unit Family
 ROMC:47F2 C6 1E            add  a,1E
 ROMC:47F4 4F               ld   c,a
 ROMC:47F5 FA DF DB         ld   a,(DBDF)
 ROMC:47F8 EF 12 37 40                          // Deefender's used DEF value
 ROMC:47FC EA EA DB         ld   (DBEA),a
 ROMC:47FF C9               ret                 // Establishes ATK and DEF stats as well as weapon choices for both attacker and defender
 ROMC:4800 D5               push de
 ROMC:4801 FA CE DB         ld   a,(DBCE)
 ROMC:4804 A7               and  a
 ROMC:4805 28 1F            jr   z,4826         // ($DBCF) = 0 if no weapon (how does this happen anyway?)
 ROMC:4807 FA CA DB         ld   a,(DBCA)
 ROMC:480A 0E 23            ld   c,23
 ROMC:480C EF 12 37 40                          // Base Focus
 ROMC:4810 5F               ld   e,a
 ROMC:4811 FA CA DB         ld   a,(DBCA)
 ROMC:4814 0E 24            ld   c,24
 ROMC:4816 EF 12 37 40                          // Focus Loss
 ROMC:481A 47               ld   b,a
 ROMC:481B FA E5 C9         ld   a,(C9E5)
 ROMC:481E CD 95 29         call 2995           // HL = ($C9E5) * Focus Loss
 ROMC:4821 7B               ld   a,e
 ROMC:4822 95               sub  l
 ROMC:4823 CD 4A 48         call 484A           // A = Focus value
 ROMC:4826 EA CF DB         ld   (DBCF),a       // ($DBCF) = Focus value
 ROMC:4829 FA F6 DB         ld   a,(DBF6)
 ROMC:482C FE 01            cp   a,01
 ROMC:482E 20 14            jr   nz,4844        // End with ($DBE4) = 0 if range attacking is happening
 ROMC:4830 FA E3 DB         ld   a,(DBE3)
 ROMC:4833 A7               and  a
 ROMC:4834 28 0E            jr   z,4844         // End with ($DBE4) = 0 if enemy doesn't have available weapon
 ROMC:4836 FA DF DB         ld   a,(DBDF)
 ROMC:4839 0E 23            ld   c,23
 ROMC:483B EF 12 37 40                          // A = Base Focus
 ROMC:483F CD 4A 48         call 484A           // A = Focus value
 ROMC:4842 18 01            jr   4845
 ROMC:4844 AF               xor  a
 ROMC:4845 EA E4 DB         ld   (DBE4),a
 ROMC:4848 D1               pop  de
 ROMC:4849 C9               ret                 // ($DBCF) = attacker's Focus value, ($DBE4) = defender's Focus Value
 ROMC:484A C5               push bc
 ROMC:484B 0E 00            ld   c,00
 ROMC:484D D6 0A            sub  a,0A           // Loop begins here
 ROMC:484F 38 08            jr   c,4859
 ROMC:4851 F5               push af
 ROMC:4852 79               ld   a,c
 ROMC:4853 C6 0A            add  a,0A
 ROMC:4855 4F               ld   c,a
 ROMC:4856 F1               pop  af
 ROMC:4857 18 F4            jr   484D
 ROMC:4859 79               ld   a,c
 ROMC:485A A7               and  a
 ROMC:485B 20 02            jr   nz,485F
 ROMC:485D 3E 01            ld   a,01
 ROMC:485F C1               pop  bc
 ROMC:4860 C9               ret                 // A = 10 * A/10, 1 if result is 0 otherwise
 ROMC:4861 EF 0B 07 47                          // A = Terrain base ID
 ROMC:4865 21 6D 48         ld   hl,486D
 ROMC:4868 CD BC 29         call 29BC
 ROMC:486B 7E               ld   a,(hl)
 ROMC:486C C9               ret                 // A = Terrain's Cover value
 
 ROMC:486D 00 46 1E 14 1E 14 0A 14 0A 14 14 14
           0A 00 00 14 32 28 1E 14 00 00 0A
 
 ROMC:4884 C5               push bc
 ROMC:4885 D5               push de
 ROMC:4886 EA 43 C9         ld   (C943),a       // Unit #
 ROMC:4889 FA F6 DB         ld   a,(DBF6)
 ROMC:488C FE 01            cp   a,01
 ROMC:488E 20 72            jr   nz,4902        // End with A = 0 if range attacking is happening
 ROMC:4890 AF               xor  a
 ROMC:4891 EA 44 C9         ld   (C944),a
 ROMC:4894 1E 00            ld   e,00
 ROMC:4896 C5               push bc             // Loop begins here
 ROMC:4897 CD D9 28         call 28D9           // BC = relative coordinates, Set Carry Flag based on relative coordinates being out of bounds
 ROMC:489A 38 41            jr   c,48DD         // End cycle if tile doesn't exist
 ROMC:489C F0 82            ld   a,(ff00+82)
 ROMC:489E F5               push af
 ROMC:489F 3E 02            ld   a,02
 ROMC:48A1 E0 82            ld   (ff00+82),a
 ROMC:48A3 E0 70            ld   (ff00+70),a
 ROMC:48A5 EF 0B F8 15                          // HL = $D000 + B + C * 64
 ROMC:48A9 7E               ld   a,(hl)
 ROMC:48AA 47               ld   b,a            // B = occupying unit type
 ROMC:48AB F1               pop  af
 ROMC:48AC E0 82            ld   (ff00+82),a
 ROMC:48AE E0 70            ld   (ff00+70),a
 ROMC:48B0 78               ld   a,b
 ROMC:48B1 A7               and  a
 ROMC:48B2 28 29            jr   z,48DD         // End cycle if no unit
 ROMC:48B4 E6 01            and  a,01
 ROMC:48B6 47               ld   b,a
 ROMC:48B7 FA 43 C9         ld   a,(C943)
 ROMC:48BA 0E 00            ld   c,00
 ROMC:48BC EF 12 66 40                          
 ROMC:48C0 E6 01            and  a,01           // A = unit's side
 ROMC:48C2 B8               cp   b
 ROMC:48C3 28 18            jr   z,48DD         // End cycle if same side
 ROMC:48C5 7B               ld   a,e
 ROMC:48C6 87               add  a
 ROMC:48C7 21 06 49         ld   hl,4906
 ROMC:48CA CD BC 29         call 29BC           // HL += A
 ROMC:48CD 2A               ldi  a,(hl)
 ROMC:48CE 46               ld   b,(hl)
 ROMC:48CF 21 44 C9         ld   hl,C944
 ROMC:48D2 CD D1 3A         call 3AD1
 ROMC:48D5 78               ld   a,b
 ROMC:48D6 CD D1 3A         call 3AD1           // Set enemy ZOC flags in ($C944)
 ROMC:48D9 7B               ld   a,e
 ROMC:48DA CD D1 3A         call 3AD1           // Set enemy location flag in ($C944)
 ROMC:48DD C1               pop  bc
 ROMC:48DE 1C               inc  e
 ROMC:48DF 7B               ld   a,e
 ROMC:48E0 FE 06            cp   a,06
 ROMC:48E2 20 B2            jr   nz,4896
 ROMC:48E4 21 44 C9         ld   hl,C944
 ROMC:48E7 1E 00            ld   e,00
 ROMC:48E9 16 00            ld   d,00
 ROMC:48EB 7B               ld   a,e            // Loop begins here
 ROMC:48EC CD C7 3A         call 3AC7           // Sets flags based on given ZOC flag
 ROMC:48EF 28 01            jr   z,48F2
 ROMC:48F1 14               inc  d
 ROMC:48F2 1C               inc  e
 ROMC:48F3 7B               ld   a,e
 ROMC:48F4 FE 06            cp   a,06
 ROMC:48F6 20 F3            jr   nz,48EB        // D = number of ZOC flags
 ROMC:48F8 7A               ld   a,d
 ROMC:48F9 21 12 49         ld   hl,4912
 ROMC:48FC CD BC 29         call 29BC           // HL += A
 ROMC:48FF 7E               ld   a,(hl)         // A = Flanked penalty
 ROMC:4900 18 01            jr   4903
 ROMC:4902 AF               xor  a
 ROMC:4903 D1               pop  de
 ROMC:4904 C1               pop  bc
 ROMC:4905 C9               ret                 // A = Flanked penalty

 ROMC:4906 01 02
 ROMC:4908 00 03               inc  bc
 ROMC:490A 00 04               inc  b
 ROMC:490C 01 05
 ROMC:490D 02 05               dec  b
 ROMC:4910 03 04               inc  b

 ROMC:4912 00               nop  
 ROMC:4913 00               nop  
 ROMC:4914 00               nop  
 ROMC:4915 00               nop  
 ROMC:4916 19               add  hl,de
 ROMC:4917 23               inc  hl
 ROMC:4918 32               ldd  (hl),a
 
 ROMC:4919 C5               push bc
 ROMC:491A D5               push de
 ROMC:491B EA 41 C9         ld   (C941),a
 ROMC:491E 7A               ld   a,d            // (D is likely the opposing unit)
 ROMC:491F EA 43 C9         ld   (C943),a
 ROMC:4922 AF               xor  a
 ROMC:4923 EA 44 C9         ld   (C944),a
 ROMC:4926 FA F6 DB         ld   a,(DBF6)
 ROMC:4929 FE 01            cp   a,01
 ROMC:492B 20 5E            jr   nz,498B        // End if attacking from range
 ROMC:492D 1E 00            ld   e,00
 ROMC:492F C5               push bc             // Loop begins here
 ROMC:4930 CD D9 28         call 28D9           // BC = relative coordinates, Set Carry Flag based on relative coordinates being out of bounds
 ROMC:4933 38 4D            jr   c,4982
 ROMC:4935 EF 12 4E 41                          // A = unit number of primary occupying unit, -1 if there is none
 ROMC:4939 FE FF            cp   a,FF
 ROMC:493B 28 45            jr   z,4982         // End cycle if no occupying unit
 ROMC:493D 47               ld   b,a            // B = unit number of primary occupying unit
 ROMC:493E FA 43 C9         ld   a,(C943)
 ROMC:4941 B8               cp   b
 ROMC:4942 28 3E            jr   z,4982         // End cycle if primary occupying unit is already the opposing unit
 ROMC:4944 78               ld   a,b
 ROMC:4945 0E 00            ld   c,00
 ROMC:4947 EF 12 66 40                          
 ROMC:494B E6 01            and  a,01           // A = unit's side
 ROMC:494D F5               push af
 ROMC:494E FA 43 C9         ld   a,(C943)
 ROMC:4951 0E 00            ld   c,00
 ROMC:4953 EF 12 66 40                          
 ROMC:4957 E6 01            and  a,01
 ROMC:4959 4F               ld   c,a            // C = ($C943) unit's side
 ROMC:495A F1               pop  af             // A = first unit's side
 ROMC:495B B9               cp   c
 ROMC:495C 20 24            jr   nz,4982        // End cycle if opposing sides
 ROMC:495E 78               ld   a,b
 ROMC:495F EF 12 62 48                          // Establishes Unit's weapons' stats in ($CCED) to ($CD08)
 ROMC:4963 D5               push de
 ROMC:4964 FA 41 C9         ld   a,(C941)
 ROMC:4967 0E 00            ld   c,00
 ROMC:4969 EF 12 66 40                          // A = enemy's Unit Type
 ROMC:496D 06 01            ld   b,01
 ROMC:496F CD C1 40         call 40C1           // A = used weapon's ID, D = secondary weapon check, and E = used weapon's used ATK (added check of ammo)
 ROMC:4972 7B               ld   a,e
 ROMC:4973 CB 3F            srl  a
 ROMC:4975 CB 3F            srl  a
 ROMC:4977 CB 3F            srl  a
 ROMC:4979 5F               ld   e,a            // E = ATK / 8
 ROMC:497A FA 44 C9         ld   a,(C944)
 ROMC:497D 83               add  e
 ROMC:497E EA 44 C9         ld   (C944),a       // ($C944) = Support boost
 ROMC:4981 D1               pop  de
 ROMC:4982 C1               pop  bc
 ROMC:4983 1C               inc  e
 ROMC:4984 7B               ld   a,e
 ROMC:4985 FE 06            cp   a,06
 ROMC:4987 20 A6            jr   nz,492F
 ROMC:4989 18 00            jr   498B
 ROMC:498B FA 44 C9         ld   a,(C944)
 ROMC:498E D1               pop  de
 ROMC:498F C1               pop  bc
 ROMC:4990 C9               ret                 // A and ($C944) = Support boost
 ROMC:4991 EF 12 F5 40                          // A = EXP / 100
 ROMC:4995 21 9D 49         ld   hl,499D
 ROMC:4998 CD BC 29         call 29BC
 ROMC:499B 7E               ld   a,(hl)
 ROMC:499C C9               ret                 // A = Level boost
 
 ROMC:499D 00 0A 14 1E 28
 
 ROMC:49A2 C5               push bc
 ROMC:49A3 D5               push de
 ROMC:49A4 21 64 00         ld   hl,0064
 ROMC:49A7 CD BC 29         call 29BC           // HL = 100 + Support
 ROMC:49AA 78               ld   a,b
 ROMC:49AB CD BC 29         call 29BC           // HL = 100 + Support + Level
 ROMC:49AE 59               ld   e,c
 ROMC:49AF 16 00            ld   d,00
 ROMC:49B1 CD C3 29         call 29C3           // HL = 100 + Support + Level - Flank
 ROMC:49B4 54               ld   d,h
 ROMC:49B5 5D               ld   e,l            // DE = 100 + Support + Level - Flank
 ROMC:49B6 01 64 00         ld   bc,0064
 ROMC:49B9 CD 21 2A         call 2A21           // DE = (100 + Support + Level - Flank) / 100, BC holds float
 ROMC:49BC D5               push de
 ROMC:49BD 51               ld   d,c
 ROMC:49BE 1E 00            ld   e,00
 ROMC:49C0 01 64 00         ld   bc,0064
 ROMC:49C3 CD 21 2A         call 2A21           // E = Float (percentage of 256 truncated to whole number)
 ROMC:49C6 6B               ld   l,e
 ROMC:49C7 D1               pop  de
 ROMC:49C8 63               ld   h,e
 ROMC:49C9 D1               pop  de
 ROMC:49CA C1               pop  bc
 ROMC:49CB C9               ret                 // H = (100 + Support + Level - Flank) / 100, L holds float
 ROMC:49CC C5               push bc
 ROMC:49CD D5               push de
 ROMC:49CE CB 3F            srl  a
 ROMC:49D0 CB 38            srl  b
 ROMC:49D2 CB 39            srl  c
 ROMC:49D4 21 64 00         ld   hl,0064
 ROMC:49D7 CD BC 29         call 29BC           // HL = 100 + Cover/2
 ROMC:49DA 78               ld   a,b
 ROMC:49DB CD BC 29         call 29BC           // HL = 100 + Cover/2 + Level/2
 ROMC:49DE 59               ld   e,c
 ROMC:49DF 16 00            ld   d,00
 ROMC:49E1 CD C3 29         call 29C3           // HL = 100 + Cover/2 + Level/2 - Flank/2
 ROMC:49E4 54               ld   d,h
 ROMC:49E5 5D               ld   e,l            // DE = 100 + Cover/2 + Level/2 - Flank/2
 ROMC:49E6 01 64 00         ld   bc,0064
 ROMC:49E9 CD 21 2A         call 2A21           // DE = (100 + Cover/2 + Level/2 - Flank/2) / 100, BC holds float
 ROMC:49EC D5               push de
 ROMC:49ED 51               ld   d,c
 ROMC:49EE 1E 00            ld   e,00
 ROMC:49F0 01 64 00         ld   bc,0064
 ROMC:49F3 CD 21 2A         call 2A21           // E = Float (percentage of 256 truncated to whole number)
 ROMC:49F6 6B               ld   l,e
 ROMC:49F7 D1               pop  de
 ROMC:49F8 63               ld   h,e
 ROMC:49F9 D1               pop  de
 ROMC:49FA C1               pop  bc
 ROMC:49FB C9               ret                 // H = (100 + Cover/2 + Level/2 - Flank/2) / 100, L holds float
 ROMC:49FC C5               push bc
 ROMC:49FD D5               push de
 ROMC:49FE CD 95 29         call 2995           // HL = HP * Stat
 ROMC:4A01 43               ld   b,e            // B = Multiplier float
 ROMC:4A02 E5               push hl
 ROMC:4A03 5A               ld   e,d
 ROMC:4A04 16 00            ld   d,00
 ROMC:4A06 C5               push bc
 ROMC:4A07 CD D8 29         call 29D8           // HL = Multiplier (trunc) * HP * Stat
 ROMC:4A0A C1               pop  bc             // B = Multiplier float
 ROMC:4A0B 54               ld   d,h
 ROMC:4A0C 5D               ld   e,l            // DE = Multiplier (trunc) * HP * Stat
 ROMC:4A0D E1               pop  hl             // HL = HP * Stat
 ROMC:4A0E 4D               ld   c,l
 ROMC:4A0F 7C               ld   a,h
 ROMC:4A10 CD 95 29         call 2995           // HL = (HP * Stat) / 256 * Multiplier float
 ROMC:4A13 19               add  hl,de
 ROMC:4A14 E5               push hl             // HL = (HP * Stat) / 256 * Multiplier float + Multiplier (trunc) * HP * Stat
 ROMC:4A15 79               ld   a,c            // A = (HP * Stat)%256
 ROMC:4A16 CD 95 29         call 2995
 ROMC:4A19 7C               ld   a,h            // A = ((HP * Stat)%256 * Multiplier float) / 256
 ROMC:4A1A E1               pop  hl
 ROMC:4A1B CD BC 29         call 29BC           // HL = (HP * Stat) / 256 * Multiplier float + Multiplier (trunc) * HP * Stat + ((HP * Stat)%256 * Multiplier float) / 256
 ROMC:4A1E D1               pop  de
 ROMC:4A1F C1               pop  bc
 ROMC:4A20 C9               ret  
 ROMC:4A21 07               rlca 
 ROMC:4A22 CD FC 49         call 49FC
 ROMC:4A25 C9               ret  
 ROMC:4A26 FA D7 DB         ld   a,(DBD7)
 ROMC:4A29 47               ld   b,a            // B = Level
 ROMC:4A2A FA D8 DB         ld   a,(DBD8)
 ROMC:4A2D 4F               ld   c,a            // C = Flank
 ROMC:4A2E FA D9 DB         ld   a,(DBD9)       // A = Support
 ROMC:4A31 CD A2 49         call 49A2           // H = (100 + Support + Level - Flank) / 100, L holds float
 ROMC:4A34 54               ld   d,h
 ROMC:4A35 5D               ld   e,l            // D = (100 + Support + Level - Flank) / 100, E holds float
 ROMC:4A36 FA D4 DB         ld   a,(DBD4)
 ROMC:4A39 47               ld   b,a
 ROMC:4A3A FA D3 DB         ld   a,(DBD3)       // A = Attacker's New HP, B = Attacker's ATK
 ROMC:4A3D CD FC 49         call 49FC           // HL = Attacker's Total ATK
 ROMC:4A40 7D               ld   a,l
 ROMC:4A41 EA DA DB         ld   (DBDA),a
 ROMC:4A44 7C               ld   a,h
 ROMC:4A45 EA DB DB         ld   (DBDB),a       // Attacker's Total ATK
 ROMC:4A48 E5               push hl             // Stores Attacker's Total ATK
 ROMC:4A49 21 64 00         ld   hl,0064
 ROMC:4A4C FA EC DB         ld   a,(DBEC)
 ROMC:4A4F 47               ld   b,a            // B = Level
 ROMC:4A50 FA ED DB         ld   a,(DBED)
 ROMC:4A53 4F               ld   c,a            // C = Flank
 ROMC:4A54 FA EB DB         ld   a,(DBEB)       // A = Cover
 ROMC:4A57 CD CC 49         call 49CC           // H = (100 + Cover/2 + Level/2 - Flank/2) / 100, L holds float
 ROMC:4A5A 54               ld   d,h
 ROMC:4A5B 5D               ld   e,l            // D = (100 + Cover/2 + Level/2 - Flank/2) / 100, E holds float
 ROMC:4A5C FA EA DB         ld   a,(DBEA)
 ROMC:4A5F 47               ld   b,a
 ROMC:4A60 FA E8 DB         ld   a,(DBE8)       // A = Defender's New HP, B = Defender's ATK
 ROMC:4A63 CD 21 4A         call 4A21           // HL = Defender's Total DEF
 ROMC:4A66 7D               ld   a,l
 ROMC:4A67 EA F1 DB         ld   (DBF1),a
 ROMC:4A6A 7C               ld   a,h
 ROMC:4A6B EA F2 DB         ld   (DBF2),a       // Defender's Total DEF
 ROMC:4A6E D1               pop  de             // DE = Attacker's Total ATK
 ROMC:4A6F CD C3 29         call 29C3           // HL = Total DEF - Total ATK
 ROMC:4A72 38 22            jr   c,4A96         // End with A = 0 if Total ATK exceeds Total DEF
 ROMC:4A74 54               ld   d,h
 ROMC:4A75 5D               ld   e,l            // DE = Defender's Total DEF exceeding Attacker's Total ATK
 ROMC:4A76 FA EA DB         ld   a,(DBEA)       // A = Defender's DEF
 ROMC:4A79 07               rlca                // A = Defender's DEF * 2
 ROMC:4A7A 4F               ld   c,a            // C = Defender's DEF * 2
 ROMC:4A7B 06 00            ld   b,00
 ROMC:4A7D CD 21 2A         call 2A21           // DE = Surplus DEF / (Defender's DEF * 2), BC holds float
 ROMC:4A80 78               ld   a,b
 ROMC:4A81 B1               or   c
 ROMC:4A82 28 01            jr   z,4A85
 ROMC:4A84 13               inc  de             // If float exists, DE is incremented
 ROMC:4A85 7A               ld   a,d
 ROMC:4A86 A7               and  a
 ROMC:4A87 20 08            jr   nz,4A91        // End with A = HP if DE > 255
 ROMC:4A89 FA E8 DB         ld   a,(DBE8)
 ROMC:4A8C 57               ld   d,a            // D = HP
 ROMC:4A8D 7B               ld   a,e
 ROMC:4A8E BA               cp   d              // Flags set by Target HP - Old HP
 ROMC:4A8F 38 06            jr   c,4A97         // End with A = Target HP
 ROMC:4A91 FA E8 DB         ld   a,(DBE8)
 ROMC:4A94 18 01            jr   4A97
 ROMC:4A96 AF               xor  a
 ROMC:4A97 C9               ret                 // Damage calculation for attacker
 ROMC:4A98 FA EC DB         ld   a,(DBEC)
 ROMC:4A9B 47               ld   b,a            // B = Defender Level
 ROMC:4A9C FA ED DB         ld   a,(DBED)
 ROMC:4A9F 4F               ld   c,a            // C = Defender Flank
 ROMC:4AA0 FA EE DB         ld   a,(DBEE)       // A = Defender Support
 ROMC:4AA3 CD A2 49         call 49A2           // H = (100 + Support + Level - Flank) / 100, L holds float
 ROMC:4AA6 54               ld   d,h
 ROMC:4AA7 5D               ld   e,l
 ROMC:4AA8 FA E9 DB         ld   a,(DBE9)
 ROMC:4AAB 47               ld   b,a            // B = Defender's Used ATK
 ROMC:4AAC FA E8 DB         ld   a,(DBE8)
 ROMC:4AAF CD FC 49         call 49FC           // HL = Defender's Total ATK
 ROMC:4AB2 7D               ld   a,l
 ROMC:4AB3 EA EF DB         ld   (DBEF),a
 ROMC:4AB6 7C               ld   a,h
 ROMC:4AB7 EA F0 DB         ld   (DBF0),a
 ROMC:4ABA E5               push hl
 ROMC:4ABB 21 64 00         ld   hl,0064
 ROMC:4ABE FA D7 DB         ld   a,(DBD7)
 ROMC:4AC1 47               ld   b,a            // B = Attacker's Level
 ROMC:4AC2 FA D8 DB         ld   a,(DBD8)
 ROMC:4AC5 4F               ld   c,a            // C = Attacker's Flank
 ROMC:4AC6 FA D6 DB         ld   a,(DBD6)       // A = Attacker's Cover
 ROMC:4AC9 CD CC 49         call 49CC
 ROMC:4ACC 54               ld   d,h
 ROMC:4ACD 5D               ld   e,l
 ROMC:4ACE FA D5 DB         ld   a,(DBD5)
 ROMC:4AD1 47               ld   b,a
 ROMC:4AD2 FA D3 DB         ld   a,(DBD3)
 ROMC:4AD5 CD 21 4A         call 4A21
 ROMC:4AD8 7D               ld   a,l
 ROMC:4AD9 EA DC DB         ld   (DBDC),a
 ROMC:4ADC 7C               ld   a,h
 ROMC:4ADD EA DD DB         ld   (DBDD),a
 ROMC:4AE0 D1               pop  de
 ROMC:4AE1 CD C3 29         call 29C3           // HL = Attacker's Total DEF - Defender's Total ATK
 ROMC:4AE4 38 22            jr   c,4B08
 ROMC:4AE6 54               ld   d,h
 ROMC:4AE7 5D               ld   e,l
 ROMC:4AE8 FA D5 DB         ld   a,(DBD5)
 ROMC:4AEB 07               rlca 
 ROMC:4AEC 4F               ld   c,a
 ROMC:4AED 06 00            ld   b,00
 ROMC:4AEF CD 21 2A         call 2A21           // DE / BC: DE holds rounded down answer, BC holds remainder
 ROMC:4AF2 78               ld   a,b
 ROMC:4AF3 B1               or   c
 ROMC:4AF4 28 01            jr   z,4AF7
 ROMC:4AF6 13               inc  de
 ROMC:4AF7 7A               ld   a,d
 ROMC:4AF8 A7               and  a
 ROMC:4AF9 20 08            jr   nz,4B03
 ROMC:4AFB FA D3 DB         ld   a,(DBD3)
 ROMC:4AFE 57               ld   d,a
 ROMC:4AFF 7B               ld   a,e
 ROMC:4B00 BA               cp   d
 ROMC:4B01 38 06            jr   c,4B09
 ROMC:4B03 FA D3 DB         ld   a,(DBD3)
 ROMC:4B06 18 01            jr   4B09
 ROMC:4B08 AF               xor  a
 ROMC:4B09 C9               ret                 // Damage calculation for defender
 ROMC:4B0A FA CF DB         ld   a,(DBCF)
 ROMC:4B0D 47               ld   b,a            // B = attacker's Focus Value
 ROMC:4B0E FA E4 DB         ld   a,(DBE4)       // A = defender's Focus Value
 ROMC:4B11 B8               cp   b
 ROMC:4B12 CA 52 4B         jp   z,4B52         // Simultaneous Fire jump
 ROMC:4B15 D2 35 4B         jp   nc,4B35        // Ambush jump
 ROMC:4B18 CD 26 4A         call 4A26           // Damage calculation for attacker
 ROMC:4B1B EA E8 DB         ld   (DBE8),a       // Defender's Used HP is set
 ROMC:4B1E EA E1 DB         ld   (DBE1),a       // Defender's New HP is set
 ROMC:4B21 A7               and  a
 ROMC:4B22 28 42            jr   z,4B66         // Ends immediately if defender is finished
 ROMC:4B24 FA E4 DB         ld   a,(DBE4)
 ROMC:4B27 A7               and  a
 ROMC:4B28 28 3C            jr   z,4B66         // Ends immediately if defender can't attack anyway due to no available weapon
 ROMC:4B2A CD 98 4A         call 4A98           // Damage calculation for defender
 ROMC:4B2D EA D3 DB         ld   (DBD3),a       // Attacker's Used HP is set
 ROMC:4B30 EA CC DB         ld   (DBCC),a       // Attacker's New HP is set
 ROMC:4B33 18 31            jr   4B66           // And done with First Strike portion
 ROMC:4B35 CD 98 4A         call 4A98           // Damage calculation for defender
 ROMC:4B38 EA D3 DB         ld   (DBD3),a       // Attacker's Used HP is set
 ROMC:4B3B EA CC DB         ld   (DBCC),a       // Attacker's New HP is set
 ROMC:4B3E A7               and  a
 ROMC:4B3F 28 25            jr   z,4B66         // Ends immediately if attacker is finished
 ROMC:4B41 FA CF DB         ld   a,(DBCF)
 ROMC:4B44 A7               and  a
 ROMC:4B45 28 1F            jr   z,4B66         // Ends immediately if attacker can't attack anyway due to no available weapon...waitwhat?
 ROMC:4B47 CD 26 4A         call 4A26           // Damage calculation for attacker
 ROMC:4B4A EA E8 DB         ld   (DBE8),a       // Defender's Used HP is set
 ROMC:4B4D EA E1 DB         ld   (DBE1),a       // Defender's New HP is set
 ROMC:4B50 18 14            jr   4B66           // And done with Ambush portion
 ROMC:4B52 CD 26 4A         call 4A26           // Damage calculation for attacker
 ROMC:4B55 F5               push af             // Stores Defender's New HP
 ROMC:4B56 CD 98 4A         call 4A98           // Damage calculation for defender
 ROMC:4B59 EA D3 DB         ld   (DBD3),a       // Attacker's Used HP is set
 ROMC:4B5C EA CC DB         ld   (DBCC),a       // Attacker's New HP is set
 ROMC:4B5F F1               pop  af             // A = Defender's New HP
 ROMC:4B60 EA E8 DB         ld   (DBE8),a       // Defender's Used HP is set
 ROMC:4B63 EA E1 DB         ld   (DBE1),a       // Defender's New HP is set
 ROMC:4B66 C9               ret                 // Damage calculations based on turn order
 ROMC:4B67 C5               push bc
 ROMC:4B68 D5               push de
 ROMC:4B69 FA CF DB         ld   a,(DBCF)
 ROMC:4B6C 47               ld   b,a            // B = Attacker's Focus
 ROMC:4B6D FA E4 DB         ld   a,(DBE4)       // A = Defender's Focus
 ROMC:4B70 B8               cp   b
 ROMC:4B71 28 2A            jr   z,4B9D
 ROMC:4B73 30 14            jr   nc,4B89
 ROMC:4B75 CD C0 4B         call 4BC0           // Attacker's attack handling of ammo and participation EXP
 ROMC:4B78 FA E1 DB         ld   a,(DBE1)
 ROMC:4B7B A7               and  a
 ROMC:4B7C 28 25            jr   z,4BA3         // Jumps to meetup point if defender is finished
 ROMC:4B7E FA E4 DB         ld   a,(DBE4)
 ROMC:4B81 A7               and  a
 ROMC:4B82 28 1F            jr   z,4BA3         // Jumps to meetup point if defender couldn't attack
 ROMC:4B84 CD D5 4B         call 4BD5           // Defender's attack handling of ammo and participation EXP
 ROMC:4B87 18 1A            jr   4BA3           // This ends the First Strike portion
 ROMC:4B89 CD D5 4B         call 4BD5           // Defender's attack handling of ammo and participation EXP
 ROMC:4B8C FA CC DB         ld   a,(DBCC)
 ROMC:4B8F A7               and  a
 ROMC:4B90 28 11            jr   z,4BA3         // Jumps to meetup point if attacker is finished
 ROMC:4B92 FA CF DB         ld   a,(DBCF)
 ROMC:4B95 A7               and  a
 ROMC:4B96 28 0B            jr   z,4BA3         // Jumps to meetup point if attacker couldn't attack.....wait, what?
 ROMC:4B98 CD C0 4B         call 4BC0           // Attacker's attack handling of ammo and participation EXP
 ROMC:4B9B 18 06            jr   4BA3           // This ends the Ambush portion
 ROMC:4B9D CD C0 4B         call 4BC0           // Attacker's attack handling of ammo and participation EXP
 ROMC:4BA0 CD D5 4B         call 4BD5           // Defender's attack handling of ammo and participation EXP
 ROMC:4BA3 FA D3 DB         ld   a,(DBD3)       // Meetup point
 ROMC:4BA6 47               ld   b,a            // B = Attacker's used HP
 ROMC:4BA7 FA C8 DB         ld   a,(DBC8)       // A = Attacker unit #
 ROMC:4BAA 0E 04            ld   c,04
 ROMC:4BAC EF 12 A1 40                          // First unit's HP set to ($DBD3)
 ROMC:4BB0 FA E8 DB         ld   a,(DBE8)
 ROMC:4BB3 47               ld   b,a
 ROMC:4BB4 FA C9 DB         ld   a,(DBC9)
 ROMC:4BB7 0E 04            ld   c,04
 ROMC:4BB9 EF 12 A1 40                          // Second unit's HP set to ($DBE8)
 ROMC:4BBD D1               pop  de
 ROMC:4BBE C1               pop  bc
 ROMC:4BBF C9               ret                 // HP, Ammo, and Participation EXP updated by combat results
 ROMC:4BC0 FA DE DB         ld   a,(DBDE)
 ROMC:4BC3 4F               ld   c,a            // C = Attacker's Weapon choice
 ROMC:4BC4 FA C8 DB         ld   a,(DBC8)
 ROMC:4BC7 CD EA 4B         call 4BEA           // Ammo decremented for given weapon
 ROMC:4BCA FA C9 DB         ld   a,(DBC9)
 ROMC:4BCD 47               ld   b,a            // B = Defending unit #
 ROMC:4BCE FA C8 DB         ld   a,(DBC8)
 ROMC:4BD1 CD FC 4B         call 4BFC           // Participation EXP for attacker's attack provided
 ROMC:4BD4 C9               ret                 // Attacker's attack handling of ammo and participation EXP
 ROMC:4BD5 FA F3 DB         ld   a,(DBF3)
 ROMC:4BD8 4F               ld   c,a
 ROMC:4BD9 FA C9 DB         ld   a,(DBC9)
 ROMC:4BDC CD EA 4B         call 4BEA           // Ammo decremented for given weapon
 ROMC:4BDF FA C8 DB         ld   a,(DBC8)
 ROMC:4BE2 47               ld   b,a
 ROMC:4BE3 FA C9 DB         ld   a,(DBC9)
 ROMC:4BE6 CD FC 4B         call 4BFC           // Participation EXP for defender's attack provided
 ROMC:4BE9 C9               ret                 // Defender's attack handling of ammo and participation EXP
 ROMC:4BEA 57               ld   d,a
 ROMC:4BEB 79               ld   a,c
 ROMC:4BEC C6 08            add  a,08
 ROMC:4BEE 4F               ld   c,a
 ROMC:4BEF 7A               ld   a,d
 ROMC:4BF0 EF 12 66 40                          // A = remaining ammo for weapon indicated by original C
 ROMC:4BF4 3D               dec  a              // Ammo was used
 ROMC:4BF5 47               ld   b,a            // B = New ammo
 ROMC:4BF6 7A               ld   a,d
 ROMC:4BF7 EF 12 A1 40                          // Ammo decremented for given weapon
 ROMC:4BFB C9               ret  
 ROMC:4BFC 4F               ld   c,a
 ROMC:4BFD FA F6 DB         ld   a,(DBF6)
 ROMC:4C00 FE 01            cp   a,01
 ROMC:4C02 20 12            jr   nz,4C16        // Branch to second EXP allocation branch if range attacking
 ROMC:4C04 79               ld   a,c
 ROMC:4C05 21 02 00         ld   hl,0002
 ROMC:4C08 EF 12 DB 40                          // EXP incremented by 2
 ROMC:4C0C 78               ld   a,b
 ROMC:4C0D 21 01 00         ld   hl,0001
 ROMC:4C10 EF 12 DB 40                          // EXP incremented by 1
 ROMC:4C14 18 10            jr   4C26
 ROMC:4C16 79               ld   a,c
 ROMC:4C17 21 01 00         ld   hl,0001
 ROMC:4C1A EF 12 DB 40                          // EXP incremented by 1
 ROMC:4C1E 78               ld   a,b
 ROMC:4C1F 21 02 00         ld   hl,0002
 ROMC:4C22 EF 12 DB 40                          // EXP incremented by 2
 ROMC:4C26 C9               ret                 // Participation EXP for each attack provided
 ROMC:4C27 FA E1 DB         ld   a,(DBE1)
 ROMC:4C2A 47               ld   b,a
 ROMC:4C2B FA E0 DB         ld   a,(DBE0)
 ROMC:4C2E 90               sub  b              // A = Defender's HP Lost
 ROMC:4C2F 6F               ld   l,a
 ROMC:4C30 26 00            ld   h,00
 ROMC:4C32 FA E1 DB         ld   a,(DBE1)
 ROMC:4C35 A7               and  a
 ROMC:4C36 20 0C            jr   nz,4C44        // Skips Kill EXP
 ROMC:4C38 23               inc  hl
 ROMC:4C39 FA E9 DB         ld   a,(DBE9)
 ROMC:4C3C 47               ld   b,a
 ROMC:4C3D FA D4 DB         ld   a,(DBD4)
 ROMC:4C40 B8               cp   b
 ROMC:4C41 30 01            jr   nc,4C44
 ROMC:4C43 29               add  hl,hl          // Underdog bonus
 ROMC:4C44 FA C8 DB         ld   a,(DBC8)
 ROMC:4C47 EF 12 DB 40                          // Damage EXP for attacker
 ROMC:4C4B FA CC DB         ld   a,(DBCC)
 ROMC:4C4E 47               ld   b,a
 ROMC:4C4F FA CB DB         ld   a,(DBCB)
 ROMC:4C52 90               sub  b
 ROMC:4C53 6F               ld   l,a
 ROMC:4C54 26 00            ld   h,00
 ROMC:4C56 FA CC DB         ld   a,(DBCC)
 ROMC:4C59 A7               and  a
 ROMC:4C5A 20 0C            jr   nz,4C68
 ROMC:4C5C 23               inc  hl
 ROMC:4C5D FA D4 DB         ld   a,(DBD4)
 ROMC:4C60 47               ld   b,a
 ROMC:4C61 FA E9 DB         ld   a,(DBE9)
 ROMC:4C64 B8               cp   b
 ROMC:4C65 30 01            jr   nc,4C68
 ROMC:4C67 29               add  hl,hl          // Underdog bonus
 ROMC:4C68 FA C9 DB         ld   a,(DBC9)
 ROMC:4C6B EF 12 DB 40                          // Damage EXP for defender
 ROMC:4C6F C9               ret                 // Damage EXP for both sides
 ROMC:4C70 F0 82            ld   a,(ff00+82)
 ROMC:4C72 F5               push af
 ROMC:4C73 3E 04            ld   a,04
 ROMC:4C75 E0 82            ld   (ff00+82),a
 ROMC:4C77 E0 70            ld   (ff00+70),a
 ROMC:4C79 CD F3 04         call 04F3           // Shuts off LCD Display if necessary
 ROMC:4C7C EF 01 00 40                          // Graphics holding: VRA0($9000) to VRA0($97FF) then VRA0($8800) to VRA0($8FFF) holds basic text
 ROMC:4C80 AF               xor  a
 ROMC:4C81 E0 95            ld   (ff00+95),a
 ROMC:4C83 E0 96            ld   (ff00+96),a
 ROMC:4C85 CD 18 06         call 0618           // Resets Palettes to absolute default Palettes
 ROMC:4C88 3E 00            ld   a,00
 ROMC:4C8A EF 15 91 66                          // VRA1:($8F30~$8FFF) holds mode menu tile graphics basics; mode menu graphics basics established accordingly
 ROMC:4C8E 01 00 00         ld   bc,0000
 ROMC:4C91 11 12 14         ld   de,1412
 ROMC:4C94 EF 22 47 62                          // Basic setup for table rectangle full screen including defaulted palette for interior's tiles
 ROMC:4C98 3E 03            ld   a,03
 ROMC:4C9A EF 0B 5D 76                          // Establishes faction color palettes in ($C4E0) table (A is number of palettes skipped in table)
 ROMC:4C9E 3E 01            ld   a,01
 ROMC:4CA0 E0 83            ld   (ff00+83),a
 ROMC:4CA2 E0 4F            ld   (ff00+4F),a
 ROMC:4CA4 FA CA DB         ld   a,(DBCA)       // A = Attacker's Unit Type
 ROMC:4CA7 21 00 90         ld   hl,9000
 ROMC:4CAA EF 0B 75 76                          // (HL ~ HL+63) holds unit map graphics
 ROMC:4CAE FA DF DB         ld   a,(DBDF)
 ROMC:4CB1 21 40 90         ld   hl,9040
 ROMC:4CB4 EF 0B 75 76                          // (HL ~ HL+63) holds unit map graphics
 ROMC:4CB8 06 01            ld   b,01
 ROMC:4CBA 0E 03            ld   c,03
 ROMC:4CBC FA CA DB         ld   a,(DBCA)
 ROMC:4CBF 57               ld   d,a            // D = Attacker's Unit Type
 ROMC:4CC0 3E 00            ld   a,00
 ROMC:4CC2 21 4B 98         ld   hl,984B        // Offset coordinates is 11,2
 ROMC:4CC5 EF 0B C9 76                          // Establishes unit graphics at HL (A is tile location on character base, B is palette's VRAM bank, C is first palette + 3, D is unit type)
 ROMC:4CC9 06 01            ld   b,01
 ROMC:4CCB 0E 03            ld   c,03
 ROMC:4CCD FA DF DB         ld   a,(DBDF)
 ROMC:4CD0 57               ld   d,a
 ROMC:4CD1 3E 04            ld   a,04
 ROMC:4CD3 21 50 98         ld   hl,9850        // Offset coordinates is 16,2
 ROMC:4CD6 EF 0B C9 76                          // Establishes unit graphics at HL (A is tile location on character base, B is palette's VRAM bank, C is first palette + 3, D is unit type)
 ROMC:4CDA CD 24 4D         call 4D24           // Establishes both sides' attack order text for battle forecast
 ROMC:4CDD 21 9F 4D         ld   hl,4D9F        // Basic battle forecast text pointers
 ROMC:4CE0 0E 0A            ld   c,0A
 ROMC:4CE2 E5               push hl             // Loop begins here
 ROMC:4CE3 2A               ldi  a,(hl)
 ROMC:4CE4 66               ld   h,(hl)
 ROMC:4CE5 6F               ld   l,a
 ROMC:4CE6 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMC:4CE9 E1               pop  hl
 ROMC:4CEA 23               inc  hl
 ROMC:4CEB 23               inc  hl
 ROMC:4CEC 0D               dec  c
 ROMC:4CED 20 F3            jr   nz,4CE2
 ROMC:4CEF CD 37 35         call 3537           // Establishes all unchecked text into appropriate VRAM bank; bit 7,($C00F) being inactive or LY => 142 stops after only one text portion and leaves it considered unchecked
 ROMC:4CF2 01 06 0B         ld   bc,0B06
 ROMC:4CF5 21 CA DB         ld   hl,DBCA        // HL = location of attacker's stats
 ROMC:4CF8 CD 5D 4D         call 4D5D           // Establishes attacker's numbers text for battle forecast
 ROMC:4CFB CD 37 35         call 3537           // Establishes all unchecked text into appropriate VRAM bank; bit 7,($C00F) being inactive or LY => 142 stops after only one text portion and leaves it considered unchecked
 ROMC:4CFE 01 06 10         ld   bc,1006
 ROMC:4D01 21 DF DB         ld   hl,DBDF        // HL = location of defender's stats
 ROMC:4D04 CD 5D 4D         call 4D5D           // Establishes defender's numbers text for battle forecast
 ROMC:4D07 CD 37 35         call 3537           // Establishes all unchecked text into appropriate VRAM bank; bit 7,($C00F) being inactive or LY => 142 stops after only one text portion and leaves it considered unchecked
 ROMC:4D0A CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 ROMC:4D0D CD A2 05         call 05A2           // Button update, next frame
 ROMC:4D10 F0 91            ld   a,(ff00+91)
 ROMC:4D12 E6 0B            and  a,0B           // A, B, or Start
 ROMC:4D14 28 F7            jr   z,4D0D
 ROMC:4D16 3E 0C            ld   a,0C
 ROMC:4D18 CD 44 38         call 3844
 ROMC:4D1B CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMC:4D1E F1               pop  af
 ROMC:4D1F E0 82            ld   (ff00+82),a
 ROMC:4D21 E0 70            ld   (ff00+70),a
 ROMC:4D23 C9               ret                 // Battle forecast controls
 ROMC:4D24 16 01            ld   d,01
 ROMC:4D26 1E 01            ld   e,01
 ROMC:4D28 FA E4 DB         ld   a,(DBE4)
 ROMC:4D2B 47               ld   b,a
 ROMC:4D2C FA CF DB         ld   a,(DBCF)
 ROMC:4D2F B8               cp   b              // Flags set by Attacker's Focus - Defender's Focus
 ROMC:4D30 28 10            jr   z,4D42         // Simultaneous Fire results in skipping portion with A = Attacker's Focus, D = 1, E = 1
 ROMC:4D32 16 02            ld   d,02
 ROMC:4D34 1E 03            ld   e,03
 ROMC:4D36 30 04            jr   nc,4D3C        // Ambush results in swapping D and E
 ROMC:4D38 16 03            ld   d,03
 ROMC:4D3A 1E 02            ld   e,02
 ROMC:4D3C 78               ld   a,b
 ROMC:4D3D A7               and  a
 ROMC:4D3E 20 02            jr   nz,4D42
 ROMC:4D40 1E 00            ld   e,00           // Portion ended: D is Same, 1st, 2nd; E is None, Same, 1st, 2nd
 ROMC:4D42 01 05 0A         ld   bc,0A05
 ROMC:4D45 7A               ld   a,d            // A = Attacker's Attack Order position
 ROMC:4D46 CD 51 4D         call 4D51           // Establishes attacker's attack order text for battle forecast
 ROMC:4D49 01 05 0F         ld   bc,0F05
 ROMC:4D4C 7B               ld   a,e
 ROMC:4D4D CD 51 4D         call 4D51           // Establishes defender's attack order text for battle forecast
 ROMC:4D50 C9               ret                 // Establishes both sides' attack order text for battle forecast
 ROMC:4D51 D5               push de
 ROMC:4D52 21 0A 4E         ld   hl,4E0A
 ROMC:4D55 CD 93 3A         call 3A93           // HL = (2A + $4E0A)
 ROMC:4D58 CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 ROMC:4D5B D1               pop  de
 ROMC:4D5C C9               ret                 // Establishes given side's attack order text for battle forecast
 ROMC:4D5D 16 03            ld   d,03
 ROMC:4D5F 3E 0A            ld   a,0A
 ROMC:4D61 CD BC 29         call 29BC           // HL += 10
 ROMC:4D64 2A               ldi  a,(hl)         // ATK, B, C, 3
 ROMC:4D65 CD F5 31         call 31F5           // [$C300 + [$FFC8]] holds # of digit bytes, then designated HL (reversed), then number text (A is the number, BC is coordinates, D is the number of digits)
 ROMC:4D68 0C               inc  c
 ROMC:4D69 2A               ldi  a,(hl)         // DEF, B, C+1, 3
 ROMC:4D6A CD F5 31         call 31F5           // [$C300 + [$FFC8]] holds # of digit bytes, then designated HL (reversed), then number text (A is the number, BC is coordinates, D is the number of digits)
 ROMC:4D6D 0C               inc  c
 ROMC:4D6E 2A               ldi  a,(hl)         // Cover, B, C+2, 3
 ROMC:4D6F CD F5 31         call 31F5           // [$C300 + [$FFC8]] holds # of digit bytes, then designated HL (reversed), then number text (A is the number, BC is coordinates, D is the number of digits)
 ROMC:4D72 0C               inc  c
 ROMC:4D73 2A               ldi  a,(hl)         // Level, B, C+3, 3
 ROMC:4D74 CD F5 31         call 31F5           // [$C300 + [$FFC8]] holds # of digit bytes, then designated HL (reversed), then number text (A is the number, BC is coordinates, D is the number of digits)
 ROMC:4D77 0C               inc  c
 ROMC:4D78 2A               ldi  a,(hl)         // Flank, B, C+4, 3
 ROMC:4D79 F5               push af
 ROMC:4D7A CD F5 31         call 31F5           // [$C300 + [$FFC8]] holds # of digit bytes, then designated HL (reversed), then number text (A is the number, BC is coordinates, D is the number of digits)
 ROMC:4D7D F1               pop  af
 ROMC:4D7E A7               and  a
 ROMC:4D7F 28 05            jr   z,4D86
 ROMC:4D81 3E 2D            ld   a,2D           // Subtraction sign since Flank value is the applying penalty
 ROMC:4D83 CD ED 34         call 34ED           // [$C300 + [$FFC8]] 3 byte holds: 1, B + (C+4)%8 * 32, 152 or 24 + (C+4) / 8, Subtraction sign; [$FFCA] incremented (152 or 24 + C / 8 is 24 + C / 8 if [$FFCB] != 0)
 ROMC:4D86 23               inc  hl
 ROMC:4D87 0C               inc  c
 ROMC:4D88 0C               inc  c
 ROMC:4D89 05               dec  b
 ROMC:4D8A E5               push hl
 ROMC:4D8B 2A               ldi  a,(hl)
 ROMC:4D8C 66               ld   h,(hl)
 ROMC:4D8D 6F               ld   l,a            // HL = Total ATK
 ROMC:4D8E 16 04            ld   d,04
 ROMC:4D90 CD 51 32         call 3251           // [$C300 + [$FFC8]] holds # of digit bytes, then designated HL (reversed), then number text (HL is the number, BC is coordinates, D is the number of digits)
 ROMC:4D93 E1               pop  hl
 ROMC:4D94 0C               inc  c
 ROMC:4D95 0C               inc  c
 ROMC:4D96 23               inc  hl
 ROMC:4D97 23               inc  hl
 ROMC:4D98 2A               ldi  a,(hl)
 ROMC:4D99 66               ld   h,(hl)
 ROMC:4D9A 6F               ld   l,a            // Total DEF
 ROMC:4D9B CD 51 32         call 3251           // [$C300 + [$FFC8]] holds # of digit bytes, then designated HL (reversed), then number text (HL is the number, BC is coordinates, D is the number of digits)
 ROMC:4D9E C9               ret                 // Establishes given side's numbers text for battle forecast

 ROMC:4D9F B3 4D                                // Attack
 ROMC:4DA1 BA 4D                                // ATK Power
 ROMC:4DA3 C4 4D                                // DEF Power
 ROMC:4DA5 CE 4D                                // Terrain Effect
 ROMC:4DA7 D7 4D                                // Experience
 ROMC:4DA9 DF 4D                                // Flank Effect
 ROMC:4DAB E8 4D                                // Total
 ROMC:4DAD EF 4D                                // ATK Power
 ROMC:4DAF F9 4D                                // Total
 ROMC:4DB1 00 4E                                // DEF Power

 ROMC:4DB3 01 05
 ROMC:4DB5 6A 63 91 67 00
 ROMC:4DBA 01 06
 ROMC:4DBC 6A 63 91 67 88 AE 68 00
 ROMC:4DC4 01 07
 ROMC:4DC6 A1 63 8F AE 88 AE 68 00
 ROMC:4DCE 01 08
 ROMC:4DD0 71 69 62 6A 63 66 00
 ROMC:4DD7 01 09
 ROMC:4DD9 69 62 69 8D 71 00
 ROMC:4DDF 01 0A
 ROMC:4DE1 7E 63 62 6A 63 66 00
 ROMC:4DE8 01 0C
 ROMC:4DEA 6F 63 92 63 00
 ROMC:4DEF 02 0D
 ROMC:4DF1 6A 63 91 67 88 AE 68 00
 ROMC:4DF9 01 0E
 ROMC:4DFB 6F 63 92 63 00
 ROMC:4E00 02 0F
 ROMC:4E02 A1 63 8F AE 88 AE 68 00

 ROMC:4E0A 21 4E                                // (Not Applicable)
 ROMC:4E0C 1C 4E                                // Same
 ROMC:4E0E 12 4E                                // 1st
 ROMC:4E10 17 4E                                // 2nd
 
 ROMC:4E12 6E 8D 6A 63 00
 ROMC:4E17 6A 63 6A 63 00
 ROMC:4E1C 20 9C 63 94 00
 ROMC:4E21 20 20 2D 2D 00

 ROMC:4E26 C9               ret  
 ROMC:4E27 C5               push bc
 ROMC:4E28 D5               push de
 ROMC:4E29 F0 82            ld   a,(ff00+82)
 ROMC:4E2B F5               push af
 ROMC:4E2C 3E 04            ld   a,04
 ROMC:4E2E E0 82            ld   (ff00+82),a
 ROMC:4E30 E0 70            ld   (ff00+70),a
 ROMC:4E32 CD 4F 46         call 464F           // Establishes battle stats including damage calculations (D is attacker, E is defender)
 ROMC:4E35 FA CC DB         ld   a,(DBCC)
 ROMC:4E38 47               ld   b,a            // B = Attacker's New HP
 ROMC:4E39 FA CB DB         ld   a,(DBCB)       // A = Attacker's Old HP
 ROMC:4E3C 90               sub  b              // A = HP Lost by attacker
 ROMC:4E3D CB 37            swap a
 ROMC:4E3F 4F               ld   c,a
 ROMC:4E40 FA E1 DB         ld   a,(DBE1)
 ROMC:4E43 47               ld   b,a            // B = Defender's New HP
 ROMC:4E44 FA E0 DB         ld   a,(DBE0)       // A = Defender's Old HP
 ROMC:4E47 90               sub  b              // A = HP Lost by defender
 ROMC:4E48 B1               or   c
 ROMC:4E49 4F               ld   c,a
 ROMC:4E4A F1               pop  af
 ROMC:4E4B E0 82            ld   (ff00+82),a
 ROMC:4E4D E0 70            ld   (ff00+70),a
 ROMC:4E4F 79               ld   a,c
 ROMC:4E50 D1               pop  de
 ROMC:4E51 C1               pop  bc
 ROMC:4E52 C9               ret                 // A = Attacker's HP loss * 16 + Defender's HP loss
 ROMC:4E53 3E 01            ld   a,01
 ROMC:4E55 E0 83            ld   (ff00+83),a
 ROMC:4E57 E0 4F            ld   (ff00+4F),a
 ROMC:4E59 11 C6 53         ld   de,53C6
 ROMC:4E5C 21 00 80         ld   hl,8000
 ROMC:4E5F 01 50 02         ld   bc,0250
 ROMC:4E62 CD 59 3B         call 3B59           // VRA1($8000 ~ $824F) = ($53C6 ~ $5615)
 ROMC:4E65 C9               ret  
 ROMC:4E66 C5               push bc
 ROMC:4E67 D5               push de
 ROMC:4E68 AF               xor  a
 ROMC:4E69 E0 B1            ld   (ff00+B1),a    // Water timer paused
 ROMC:4E6B 3E 0D            ld   a,0D
 ROMC:4E6D 06 02            ld   b,02
 ROMC:4E6F 0E 0C            ld   c,0C
 ROMC:4E71 21 16 56         ld   hl,5616
 ROMC:4E74 CD D9 06         call 06D9           // ($C548) to ($C557) hold ($5616) to ($5625)
 ROMC:4E77 01 60 00         ld   bc,0060
 ROMC:4E7A CD 03 07         call 0703           // 6th and 7th Sprite Palette tables is updated
 ROMC:4E7D AF               xor  a
 ROMC:4E7E CB C7            set  0,a
 ROMC:4E80 E0 B1            ld   (ff00+B1),a
 ROMC:4E82 D1               pop  de
 ROMC:4E83 C1               pop  bc
 ROMC:4E84 C9               ret                 // Establishes explosions' sprite palettes
 ROMC:4E85 F0 82            ld   a,(ff00+82)
 ROMC:4E87 F5               push af
 ROMC:4E88 3E 04            ld   a,04
 ROMC:4E8A E0 82            ld   (ff00+82),a
 ROMC:4E8C E0 70            ld   (ff00+70),a
 ROMC:4E8E FA D3 DB         ld   a,(DBD3)
 ROMC:4E91 A7               and  a
 ROMC:4E92 20 0E            jr   nz,4EA2        // Skips next portion if attacker survives
 ROMC:4E94 FA D0 DB         ld   a,(DBD0)
 ROMC:4E97 47               ld   b,a
 ROMC:4E98 FA D1 DB         ld   a,(DBD1)
 ROMC:4E9B 4F               ld   c,a            // BC = attacker's coordinates
 ROMC:4E9C FA C8 DB         ld   a,(DBC8)       // A = attacking unit #
 ROMC:4E9F CD CB 4E         call 4ECB           // Unit loss animation and handling (A is unit #)
 ROMC:4EA2 FA E8 DB         ld   a,(DBE8)       // Meets back here for attacker's survival
 ROMC:4EA5 A7               and  a
 ROMC:4EA6 20 1D            jr   nz,4EC5        // Ends after restoring WRAM Bank if defender survives
 ROMC:4EA8 FA C9 DB         ld   a,(DBC9)       // A = defending unit #
 ROMC:4EAB 0E 00            ld   c,00
 ROMC:4EAD EF 12 66 40                          
 ROMC:4EB1 CB 3F            srl  a              // A = Defender's Unit Type (no side)
 ROMC:4EB3 EF 11 19 4D                          // Increment count of destroyed units of given family of defending White Moon unit
 ROMC:4EB7 FA E5 DB         ld   a,(DBE5)
 ROMC:4EBA 47               ld   b,a
 ROMC:4EBB FA E6 DB         ld   a,(DBE6)
 ROMC:4EBE 4F               ld   c,a            // BC = defender's coordinates
 ROMC:4EBF FA C9 DB         ld   a,(DBC9)       // A = defending unit #
 ROMC:4EC2 CD CB 4E         call 4ECB           // Unit loss animation and handling (A is unit #)
 ROMC:4EC5 F1               pop  af
 ROMC:4EC6 E0 82            ld   (ff00+82),a
 ROMC:4EC8 E0 70            ld   (ff00+70),a
 ROMC:4ECA C9               ret                 // Handles unit loss animation where needed for each unit starting with attacker
 ROMC:4ECB D5               push de
 ROMC:4ECC F5               push af
 ROMC:4ECD C5               push bc
 ROMC:4ECE C5               push bc
 ROMC:4ECF 0E 00            ld   c,00
 ROMC:4ED1 EF 12 66 40                          
 ROMC:4ED5 57               ld   d,a            // D = Unit Type
 ROMC:4ED6 C1               pop  bc
 ROMC:4ED7 EF 0B E1 47                          // Tile on WRAM Bank #1 has Loaded and End Turn Flags cleared, Viable Movement Flag cleared from WRAM Bank #2 equivalent
 ROMC:4EDB C5               push bc
 ROMC:4EDC 7A               ld   a,d            // A = Unit Type
 ROMC:4EDD EF 0B E3 67                          // ($C9E0) 5 byte holds in order: 0, Coordinates, Unit Type, Terrain Type (non-ownership)
 ROMC:4EE1 16 28            ld   d,28
 ROMC:4EE3 CD D2 04         call 04D2           // Next frame
 ROMC:4EE6 EF 0B 15 68                          // Flashing tile's graphics updated every 15 calls
 ROMC:4EEA EF 0B 15 68                          // Flashing tile's graphics updated every 15 calls
 ROMC:4EEE EF 0B 15 68                          // Flashing tile's graphics updated every 15 calls
 ROMC:4EF2 15               dec  d
 ROMC:4EF3 20 EE            jr   nz,4EE3
 ROMC:4EF5 EF 0B FB 67                          // Establishes tile ($C9E1)'s entire graphics
 ROMC:4EF9 C1               pop  bc
 ROMC:4EFA C5               push bc
 ROMC:4EFB AF               xor  a
 ROMC:4EFC EF 0B 98 47                          // Unit tile emptied
 ROMC:4F00 EF 0B E1 47                          // Tile on WRAM Bank #1 has Loaded and End Turn Flags cleared, Viable Movement Flag cleared from WRAM Bank #2 equivalent
 ROMC:4F04 EF 0B D1 43                          // Establishes tile BC's entire graphics
 ROMC:4F08 CD 66 4E         call 4E66           // Establishes explosions' sprite palettes
 ROMC:4F0B C1               pop  bc
 ROMC:4F0C 11 9A 53         ld   de,539A
 ROMC:4F0F CD 59 52         call 5259           // Sets up explosion sprite (DE is pointer to sprite stats modification tables pointers)
 ROMC:4F12 3E 10            ld   a,10
 ROMC:4F14 CD 44 38         call 3844
 ROMC:4F17 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMC:4F1A CD D2 04         call 04D2           // Next frame
 ROMC:4F1D FA 98 C9         ld   a,(C998)
 ROMC:4F20 06 0B            ld   b,0B
 ROMC:4F22 CD 9A 2E         call 2E9A           // A = WRA4($D00B + ($C998) * 16)
 ROMC:4F25 FE FF            cp   a,FF
 ROMC:4F27 20 EE            jr   nz,4F17        // Looping ensures explosion graphic finishes first
 ROMC:4F29 FA 98 C9         ld   a,(C998)
 ROMC:4F2C CD 1F 2E         call 2E1F           // Handles clear-up of sprite
 ROMC:4F2F CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMC:4F32 C1               pop  bc
 ROMC:4F33 F1               pop  af
 ROMC:4F34 EF 12 5C 42                          // Handles destroyed unit's stats, along with any of their cargo's
 ROMC:4F38 D1               pop  de
 ROMC:4F39 C9               ret                 // Unit loss animation and handling (A is unit #)
 ROMC:4F3A 0E 00            ld   c,00
 ROMC:4F3C EF 12 66 40                          
 ROMC:4F40 CB 3F            srl  a              // A = Unit Type (no side)
 ROMC:4F42 FE 2D            cp   a,2D           // Mercenary Missile Frigate?
 ROMC:4F44 28 14            jr   z,4F5A
 ROMC:4F46 FE 33            cp   a,33           // Submarine+?
 ROMC:4F48 28 10            jr   z,4F5A
 ROMC:4F4A CD 29 50         call 5029           // Surrounding area cursor for Anti-City weapon firing confirmation, A = 0 for A Button press, -1 for B Button press
 ROMC:4F4D A7               and  a
 ROMC:4F4E CA 02 50         jp   z,5002         // Branches for A button press (change back to Normal Cursor then end with A = 0)
 ROMC:4F51 EF 0B 80 46                          // Updates Cursor Sprite to Normal Cursor
 ROMC:4F55 3E FF            ld   a,FF
 ROMC:4F57 C3 28 50         jp   5028           // Ends immediately with A = -1 for B Button Press (Bomber)
 ROMC:4F5A AF               xor  a
 ROMC:4F5B EA 9B C9         ld   (C99B),a
 ROMC:4F5E EF 0B A4 46                          // Updates Cursor Sprite to Missile Aiming Cursor Invalid
 ROMC:4F62 EF 0B FA 74                          // General map view graphics update
 ROMC:4F66 CD 87 4F         call 4F87           // Anti-City Missile Fire Valid Flag updated as well as graphics
 ROMC:4F69 FA 91 CA         ld   a,(CA91)
 ROMC:4F6C CB 67            bit  4,a            // Right
 ROMC:4F6E 20 51            jr   nz,4FC1
 ROMC:4F70 CB 6F            bit  5,a            // Left
 ROMC:4F72 20 53            jr   nz,4FC7
 ROMC:4F74 CB 77            bit  6,a            // Up
 ROMC:4F76 20 55            jr   nz,4FCD
 ROMC:4F78 CB 7F            bit  7,a            // Down
 ROMC:4F7A 20 57            jr   nz,4FD3
 ROMC:4F7C CB 47            bit  0,a            // A
 ROMC:4F7E 20 59            jr   nz,4FD9
 ROMC:4F80 CB 4F            bit  1,a            // B
 ROMC:4F82 C2 11 50         jp   nz,5011
 ROMC:4F85 18 DB            jr   4F62
 ROMC:4F87 FA 91 C9         ld   a,(C991)
 ROMC:4F8A 47               ld   b,a
 ROMC:4F8B FA 92 C9         ld   a,(C992)
 ROMC:4F8E 4F               ld   c,a
 ROMC:4F8F FA DE CC         ld   a,(CCDE)
 ROMC:4F92 57               ld   d,a
 ROMC:4F93 FA DF CC         ld   a,(CCDF)
 ROMC:4F96 5F               ld   e,a
 ROMC:4F97 EF 0B 1D 29                          // A = space difference (BC and DE hold comparison coordinates)
 ROMC:4F9B FE 03            cp   a,03
 ROMC:4F9D 38 04            jr   c,4FA3
 ROMC:4F9F FE 08            cp   a,08
 ROMC:4FA1 38 0E            jr   c,4FB1         // So Anti-City Missile range is hard-coded
 ROMC:4FA3 FA 9B C9         ld   a,(C99B)
 ROMC:4FA6 A7               and  a
 ROMC:4FA7 C8               ret  z
 ROMC:4FA8 EF 0B A4 46                          // Updates Cursor Sprite to Missile Aiming Cursor Invalid
 ROMC:4FAC AF               xor  a
 ROMC:4FAD EA 9B C9         ld   (C99B),a
 ROMC:4FB0 C9               ret  
 ROMC:4FB1 FA 9B C9         ld   a,(C99B)
 ROMC:4FB4 FE 01            cp   a,01
 ROMC:4FB6 C8               ret  z
 ROMC:4FB7 EF 0B 98 46                          // Updates Cursor Sprite to Missile Aiming Cursor Valid
 ROMC:4FBB 3E 01            ld   a,01
 ROMC:4FBD EA 9B C9         ld   (C99B),a
 ROMC:4FC0 C9               ret                 // Anti-City Missile Fire Valid Flag updated as well as graphics
 ROMC:4FC1 EF 0B 25 75                          // If view will shift right: ($FFAC) 4 byte holds: OR ($FFAC),$82, ($C98B) + 10, ($C98C), 9; if not, general increase to X coordinate within view
 ROMC:4FC5 18 9B            jr   4F62
 ROMC:4FC7 EF 0B 64 75                          // If view will shift left: ($FFAC) 4 byte holds: OR ($FFAC),$81, ($C98B) - 1, ($C98C), 9; if not, general decrease to X coordinate within view
 ROMC:4FCB 18 95            jr   4F62
 ROMC:4FCD EF 0B DB 75                          // If view will shift up: ($FFAC) 4 byte holds: OR ($FFAC),$84, ($C98B) - (($C98C)%2), ($C98C) - 1, 10 + (($C98C)%2); if not, general decrease to Y coordinate within view
 ROMC:4FD1 18 8F            jr   4F62
 ROMC:4FD3 EF 0B 9C 75                          // If view will shift down: ($FFAC) 4 byte holds: OR ($FFAC),$88, ($C98B) - (($C98C)%2), ($C98C) + 9, 10 + (($C98C)%2); if not, general increase to Y coordinate within view
 ROMC:4FD7 18 89            jr   4F62           // Further wait for button input after D-Pad directions
 ROMC:4FD9 FA 91 C9         ld   a,(C991)       // A Button was pressed
 ROMC:4FDC 47               ld   b,a
 ROMC:4FDD FA 92 C9         ld   a,(C992)
 ROMC:4FE0 4F               ld   c,a
 ROMC:4FE1 FA DE CC         ld   a,(CCDE)
 ROMC:4FE4 57               ld   d,a
 ROMC:4FE5 FA DF CC         ld   a,(CCDF)
 ROMC:4FE8 5F               ld   e,a
 ROMC:4FE9 EF 0B 1D 29                          // A = space difference (BC and DE hold comparison coordinates)
 ROMC:4FED FE 03            cp   a,03
 ROMC:4FEF 38 18            jr   c,5009
 ROMC:4FF1 FE 08            cp   a,08
 ROMC:4FF3 30 14            jr   nc,5009        // Hudson really wanted to make sure Anti-City Missile range was crazy ol' 3~7
 ROMC:4FF5 3E 0A            ld   a,0A
 ROMC:4FF7 CD 44 38         call 3844
 ROMC:4FFA CD 29 50         call 5029           // Surrounding area cursor for Anti-City weapon firing confirmation, A = 0 for A Button press, -1 for B Button press
 ROMC:4FFD FE FF            cp   a,FF
 ROMC:4FFF CA 5A 4F         jp   z,4F5A         // Restart this button input wait portion if weapon firing confirmation was cancelled
 ROMC:5002 EF 0B 80 46                          // Updates Cursor Sprite to Normal Cursor
 ROMC:5006 AF               xor  a
 ROMC:5007 18 1F            jr   5028           // End with A = 0 for full confirmation (or A Button press for Bomber)
 ROMC:5009 3E 03            ld   a,03
 ROMC:500B CD 44 38         call 3844
 ROMC:500E C3 62 4F         jp   4F62           // Further wait for button input after invalid attempt to fire
 ROMC:5011 CD A3 4F         call 4FA3           // Cursor Sprite updated to Missile Aiming Cursor Invalid if necessary (why?)
 ROMC:5014 EF 0B 80 46                          // Updates Cursor Sprite to Normal Cursor
 ROMC:5018 FA DE CC         ld   a,(CCDE)
 ROMC:501B 47               ld   b,a
 ROMC:501C FA DF CC         ld   a,(CCDF)
 ROMC:501F 4F               ld   c,a
 ROMC:5020 EF 0B 01 7B                          // Handles map graphics shift to coordinates BC
 ROMC:5024 3E FF            ld   a,FF
 ROMC:5026 18 00            jr   5028           // Ends with A = -1 and graphics shift to unit's location if B was pressed
 ROMC:5028 C9               ret                 // Controls for Bomb command, end with A = 0 for full confirmation, or -1 for cancellation (A = Unit # of unit wanting to do bombing)
 ROMC:5029 EF 0B B0 46                          // Updates Cursor Sprite to Surrounding Area Cursor
 ROMC:502D CD A2 05         call 05A2           // Button update, next frame
 ROMC:5030 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMC:5033 F0 91            ld   a,(ff00+91)
 ROMC:5035 CB 47            bit  0,a            // A
 ROMC:5037 20 0F            jr   nz,5048
 ROMC:5039 CB 4F            bit  1,a            // B
 ROMC:503B 20 02            jr   nz,503F
 ROMC:503D 18 EE            jr   502D           // Awaits button input
 ROMC:503F 3E 0C            ld   a,0C
 ROMC:5041 CD 44 38         call 3844
 ROMC:5044 3E FF            ld   a,FF
 ROMC:5046 18 06            jr   504E
 ROMC:5048 3E 0A            ld   a,0A
 ROMC:504A CD 44 38         call 3844
 ROMC:504D AF               xor  a
 ROMC:504E C9               ret                 // Surrounding area cursor for Anti-City weapon firing confirmation, A = 0 for A Button press, -1 for B Button press
 ROMC:504F C5               push bc
 ROMC:5050 D5               push de
 ROMC:5051 E5               push hl
 ROMC:5052 F5               push af
 ROMC:5053 CD 66 4E         call 4E66           // Establishes explosions' sprite palettes
 ROMC:5056 AF               xor  a
 ROMC:5057 EA 9A C9         ld   (C99A),a
 ROMC:505A CD 8B 50         call 508B           // Anti-City weapon's full effect on tile BC and its involved unit
 ROMC:505D 1E 00            ld   e,00
 ROMC:505F C5               push bc             // Loop begins here
 ROMC:5060 D5               push de
 ROMC:5061 CD D9 28         call 28D9           // BC = relative coordinates, Set Carry Flag based on relative coordinates being out of bounds
 ROMC:5064 38 0E            jr   c,5074
 ROMC:5066 CD 8B 50         call 508B           // Anti-City weapon's full effect on tile BC and its involved unit
 ROMC:5069 FA 99 C9         ld   a,(C999)
 ROMC:506C 47               ld   b,a
 ROMC:506D FA 9A C9         ld   a,(C99A)
 ROMC:5070 80               add  b
 ROMC:5071 EA 9A C9         ld   (C99A),a
 ROMC:5074 D1               pop  de
 ROMC:5075 C1               pop  bc
 ROMC:5076 1C               inc  e
 ROMC:5077 7B               ld   a,e
 ROMC:5078 FE 06            cp   a,06
 ROMC:507A 20 E3            jr   nz,505F
 ROMC:507C F1               pop  af
 ROMC:507D FA E5 CC         ld   a,(CCE5)
 ROMC:5080 3D               dec  a
 ROMC:5081 EA E5 CC         ld   (CCE5),a
 ROMC:5084 FA 9A C9         ld   a,(C99A)
 ROMC:5087 E1               pop  hl
 ROMC:5088 D1               pop  de
 ROMC:5089 C1               pop  bc
 ROMC:508A C9               ret                 // Anti-City weapon's full effect on tile BC and its surrounding tiles and their involved units, primary weapon ammo decremented, A = total HP damage by bombing
 ROMC:508B C5               push bc
 ROMC:508C D5               push de
 ROMC:508D E5               push hl
 ROMC:508E CD 66 4E         call 4E66           // Establishes explosions' sprite palettes
 ROMC:5091 C5               push bc
 ROMC:5092 11 AE 53         ld   de,53AE
 ROMC:5095 CD 59 52         call 5259           // Sets up explosion sprite (DE is pointer to sprite stats modification tables pointers)
 ROMC:5098 3E 2B            ld   a,2B
 ROMC:509A CD 44 38         call 3844
 ROMC:509D CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMC:50A0 CD D2 04         call 04D2           // Next frame
 ROMC:50A3 FA 98 C9         ld   a,(C998)
 ROMC:50A6 06 0B            ld   b,0B
 ROMC:50A8 CD 9A 2E         call 2E9A           // A = WRA4($D000 + A * 16 + B)
 ROMC:50AB FE FF            cp   a,FF
 ROMC:50AD 20 EE            jr   nz,509D        // Loop ensures explosion graphic finishes first
 ROMC:50AF FA 98 C9         ld   a,(C998)
 ROMC:50B2 CD 1F 2E         call 2E1F           // Handles clear-up of sprite
 ROMC:50B5 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMC:50B8 C1               pop  bc
 ROMC:50B9 AF               xor  a
 ROMC:50BA EA 99 C9         ld   (C999),a
 ROMC:50BD EF 12 4E 41                          // A = unit number of primary occupying unit, -1 if there is none
 ROMC:50C1 FE FF            cp   a,FF
 ROMC:50C3 28 3A            jr   z,50FF
 ROMC:50C5 C5               push bc
 ROMC:50C6 57               ld   d,a
 ROMC:50C7 CD 06 51         call 5106           // A = HP damage done by Anti-City weapon
 ROMC:50CA 5F               ld   e,a            // E = HP damage done by Anti-City weapon
 ROMC:50CB 7A               ld   a,d
 ROMC:50CC 0E 04            ld   c,04
 ROMC:50CE EF 12 66 40                          // A = Current HP
 ROMC:50D2 93               sub  e
 ROMC:50D3 C1               pop  bc
 ROMC:50D4 38 1B            jr   c,50F1
 ROMC:50D6 28 19            jr   z,50F1         // Jump if enemy unit dies
 ROMC:50D8 C5               push bc
 ROMC:50D9 47               ld   b,a
 ROMC:50DA 7A               ld   a,d
 ROMC:50DB 0E 04            ld   c,04
 ROMC:50DD EF 12 A1 40                          // HP set to new HP
 ROMC:50E1 C1               pop  bc
 ROMC:50E2 7B               ld   a,e
 ROMC:50E3 EA 99 C9         ld   (C999),a       // A is HP damage done by Anti-City weapon
 ROMC:50E6 A7               and  a
 ROMC:50E7 28 16            jr   z,50FF         // Won't handle HP Change popup bubble animation if no damage is done by the bombing itself
 ROMC:50E9 2F               cpl  
 ROMC:50EA 3C               inc  a
 ROMC:50EB EF 0C 3E 5D                          // HP Change popup bubble sprite animation (A is HP increase amount)
 ROMC:50EF 18 0E            jr   50FF
 ROMC:50F1 83               add  e
 ROMC:50F2 EA 99 C9         ld   (C999),a       // A is already dead unit's old HP
 ROMC:50F5 2F               cpl  
 ROMC:50F6 3C               inc  a
 ROMC:50F7 EF 0C 3E 5D                          // HP Change popup bubble sprite animation (A is HP increase amount)
 ROMC:50FB 7A               ld   a,d
 ROMC:50FC CD CB 4E         call 4ECB           // Unit loss animation and handling (A is unit #)
 ROMC:50FF CD 38 51         call 5138           // Terrain attack
 ROMC:5102 E1               pop  hl
 ROMC:5103 D1               pop  de
 ROMC:5104 C1               pop  bc
 ROMC:5105 C9               ret                 // Anti-City weapon's full effect on tile BC and its involved unit
 ROMC:5106 C5               push bc
 ROMC:5107 0E 00            ld   c,00
 ROMC:5109 EF 12 66 40                          
 ROMC:510D 0E 18            ld   c,18
 ROMC:510F EF 12 37 40                          // Unit Family
 ROMC:5113 47               ld   b,a
 ROMC:5114 21 2E 51         ld   hl,512E
 ROMC:5117 FA DD CC         ld   a,(CCDD)
 ROMC:511A CB 3F            srl  a
 ROMC:511C FE 23            cp   a,23           // Bomber?
 ROMC:511E 28 07            jr   z,5127
 ROMC:5120 FE 24            cp   a,24           // Mercenary Bomber?
 ROMC:5122 28 03            jr   z,5127
 ROMC:5124 21 33 51         ld   hl,5133
 ROMC:5127 78               ld   a,b            // A = Unit Family
 ROMC:5128 CD BC 29         call 29BC
 ROMC:512B 7E               ld   a,(hl)
 ROMC:512C C1               pop  bc
 ROMC:512D C9               ret                 // A = HP damage done by Anti-City weapon

 ROMC:512E 01 02 00 01 00
 ROMC:5133 02 03 00 01 00 

 ROMC:5138 EF 0B 70 47                          // A = Terrain Type
 ROMC:513C EF 0B 07 47                          // A = Terrain base ID
 ROMC:5140 21 2B 52         ld   hl,522B
 ROMC:5143 CD 93 3A         call 3A93           // HL = (2A + $522B)
 ROMC:5146 E9               jp   hl             // JP (2A + $522B)
HQ or Communications Tower:
 ROMC:5147 CD FC 51         call 51FC           // A = 241 for Bomber, 231 for Mercenary Missile Frigate or Submarine+, 0 otherwise
 ROMC:514A 57               ld   d,a
 ROMC:514B EF 0C 83 58                          // A = Property's Strength for matching property, -1 if there is none
 ROMC:514F 5F               ld   e,a            // D = damage to property, E = Property Strength
 ROMC:5150 7A               ld   a,d
 ROMC:5151 2F               cpl  
 ROMC:5152 3C               inc  a              // A = damage to property (negative sign removed)
 ROMC:5153 BB               cp   e
 ROMC:5154 38 05            jr   c,515B
 ROMC:5156 7B               ld   a,e
 ROMC:5157 3D               dec  a              // A = Property Strength - 1
 ROMC:5158 2F               cpl  
 ROMC:5159 3C               inc  a
 ROMC:515A 57               ld   d,a            // (D)amage to property is capped at Property Strength - 1
 ROMC:515B 7A               ld   a,d
 ROMC:515C EF 0C F2 58                          // Show Property Strength update for given task on Property (A is increase amount)
 ROMC:5160 C3 FB 51         jp   51FB           // Ends immediately without any tile change
Property:
 ROMC:5163 FA DD CC         ld   a,(CCDD)
 ROMC:5166 CD FC 51         call 51FC           // A = 241 for Bomber, 231 for Mercenary Missile Frigate or Submarine+, 0 otherwise
 ROMC:5169 EF 0C F2 58                          // Show Property Strength update for given task on Property (A is increase amount)
 ROMC:516D A7               and  a
 ROMC:516E C2 FB 51         jp   nz,51FB        // Ends immediately if property is not completely ruined
 ROMC:5171 EF 0B 70 47                          // A = Terrain Type
 ROMC:5175 EF 0B E7 41                          // Decrements ($C64A + A)
 ROMC:5179 EF 0B 07 47                          // A = Terrain base ID
 ROMC:517D 21 1F 52         ld   hl,521F
 ROMC:5180 CD BC 29         call 29BC           // HL += A
 ROMC:5183 7E               ld   a,(hl)
 ROMC:5184 57               ld   d,a            // D = Ruined Property Type
 ROMC:5185 EF 0B 76 47                          // Terrain on tile BC updated as Ruined Property Type
 ROMC:5189 7A               ld   a,d
 ROMC:518A EF 0B 07 47                          // A = Terrain base ID
 ROMC:518E EF 0C AF 58                          // A = initial Property Strength
 ROMC:5192 EF 0C 87 58                          // If property exists, WRA1($DD81 + Property # * 3) = A
 ROMC:5196 7A               ld   a,d
 ROMC:5197 EF 0B DB 41                          // Increments ($C64A + A)
 ROMC:519B 7A               ld   a,d
 ROMC:519C 18 53            jr   51F1           // Tile change to respective Ruined Property Type for completed bombing
Simple Airport:
 ROMC:519E C5               push bc
 ROMC:519F FA DD CC         ld   a,(CCDD)
 ROMC:51A2 CD FC 51         call 51FC           // A = 241 for Bomber, 231 for Mercenary Missile Frigate or Submarine+, 0 otherwise
 ROMC:51A5 EF 0C F2 58                          // Show Property Strength update for given task on Property (A is increase amount)
 ROMC:51A9 C1               pop  bc
 ROMC:51AA A7               and  a
 ROMC:51AB C2 FB 51         jp   nz,51FB
 ROMC:51AE EF 0C D5 56                          // Establishes general changes of removal of property at BC
 ROMC:51B2 3E 20            ld   a,20
 ROMC:51B4 EF 0B 76 47                          // Terrain on tile updated as Plains
 ROMC:51B8 EF 0B D1 43                          // Establishes tile BC's entire graphics
 ROMC:51BC 18 3D            jr   51FB
Forest:
 ROMC:51BE 3E 20            ld   a,20
 ROMC:51C0 18 2F            jr   51F1           // Tile change to Plains
Bridge:
 ROMC:51C2 C5               push bc
 ROMC:51C3 3E 28            ld   a,28
 ROMC:51C5 EF 0B 76 47                          // Terrain on tile updated as River
 ROMC:51C9 EF 0B D1 43                          // Establishes tile BC's entire graphics
 ROMC:51CD C1               pop  bc
 ROMC:51CE EF 12 4E 41                          // A = unit number of primary occupying unit, -1 if there is none
 ROMC:51D2 FE FF            cp   a,FF
 ROMC:51D4 28 25            jr   z,51FB         // End if no occupying unit
 ROMC:51D6 57               ld   d,a
 ROMC:51D7 C5               push bc
 ROMC:51D8 0E 00            ld   c,00
 ROMC:51DA EF 12 66 40                          
 ROMC:51DE 0E 18            ld   c,18
 ROMC:51E0 EF 12 37 40                          // Unit Family
 ROMC:51E4 C1               pop  bc
 ROMC:51E5 FE 02            cp   a,02
 ROMC:51E7 30 12            jr   nc,51FB        // End if non-land
 ROMC:51E9 7A               ld   a,d
 ROMC:51EA CD CB 4E         call 4ECB           // Unit loss animation and handling (A is unit #)
 ROMC:51ED 18 0C            jr   51FB
Plains or Road:
 ROMC:51EF 3E 26            ld   a,26
 ROMC:51F1 EF 0B 76 47                          // Terrain on tile updated as Wasteland (Plains for Forest, respective ruined property for property)
 ROMC:51F5 EF 0B D1 43                          // Establishes tile BC's entire graphics
 ROMC:51F9 18 00            jr   51FB
 ROMC:51FB C9               ret  

 ROMC:51FC C5               push bc
 ROMC:51FD FA DD CC         ld   a,(CCDD)
 ROMC:5200 CB 3F            srl  a
 ROMC:5202 FE 23            cp   a,23
 ROMC:5204 28 10            jr   z,5216
 ROMC:5206 FE 24            cp   a,24
 ROMC:5208 28 0C            jr   z,5216
 ROMC:520A FE 2D            cp   a,2D
 ROMC:520C 28 0C            jr   z,521A
 ROMC:520E FE 33            cp   a,33
 ROMC:5210 28 08            jr   z,521A
 ROMC:5212 06 00            ld   b,00
 ROMC:5214 18 06            jr   521C
 ROMC:5216 06 F1            ld   b,F1
 ROMC:5218 18 02            jr   521C
 ROMC:521A 06 E7            ld   b,E7
 ROMC:521C 78               ld   a,b
 ROMC:521D C1               pop  bc
 ROMC:521E C9               ret                 // A = 241 for Bomber, 231 for Mercenary Missile Frigate or Submarine+, 0 otherwise
 
 ROMC:521F 00
 ROMC:5220 00
 ROMC:5221 18 00
 ROMC:5223 1A 00
 ROMC:5225 1C 00 00
 ROMC:5228 1E 00
 ROMC:522A 00
 
 ROMC:522B FB 51                                // Nothing
 ROMC:522D 47 51               ld   d,c
 ROMC:522F 63 51               ld   d,c
 ROMC:5231 FB 51                                // Nothing
 ROMC:5233 63 51               ld   d,c
 ROMC:5235 FB 51                                // Nothing
 ROMC:5237 63 51               ld   d,c
 ROMC:5239 FB 51                                // Nothing
 ROMC:523B 9E 51               ld   d,c
 ROMC:523D 63 51               ld   d,c
 ROMC:523F FB 51                                // Nothing
 ROMC:5241 47 51               ld   d,c
 ROMC:5243 EF 51               ld   d,c
 ROMC:5245 EF 51               ld   d,c
 ROMC:5247 C2 51
 ROMC:5249 C2 51               ld   d,c
 ROMC:524B FB 51                                // Nothing
 ROMC:524D BE 51               ld   d,c
 ROMC:524F FB 51                                // Nothing
 ROMC:5251 FB 51                                // Nothing
 ROMC:5253 FB 51                                // Nothing
 ROMC:5255 FB 51                                // Nothing
 ROMC:5257 FB 51                                // Nothing

 ROMC:5259 C5               push bc
 ROMC:525A 3E 20            ld   a,20
 ROMC:525C 0E 80            ld   c,80
 ROMC:525E 06 0C            ld   b,0C
 ROMC:5260 CD E8 2D         call 2DE8           // A = number of already active sprites; $Dxx5~$DxxB prepared (B is ROM Block of Sprite, C is base Character Tile # / 2 with bit 7 determining VRAM Bank; and DE is pointer to sprite stats modification tables pointers)
 ROMC:5263 EA 98 C9         ld   (C998),a
 ROMC:5266 06 05            ld   b,05
 ROMC:5268 CD C9 2E         call 2EC9           // WRA4($D003 + A * 16) has Palette bits modified according to B
 ROMC:526B C1               pop  bc
 ROMC:526C FA 98 C9         ld   a,(C998)
 ROMC:526F CD 73 52         call 5273           // Defaults sprite A graphic coordinates to center of tile BC
 ROMC:5272 C9               ret                 // Sets up explosion sprite (DE is pointer to sprite stats modification tables pointers)
 ROMC:5273 C5               push bc
 ROMC:5274 D5               push de
 ROMC:5275 67               ld   h,a
 ROMC:5276 FA 8B C9         ld   a,(C98B)
 ROMC:5279 57               ld   d,a
 ROMC:527A 78               ld   a,b
 ROMC:527B 92               sub  d
 ROMC:527C 38 25            jr   c,52A3         // End immediately if BC is west of view
 ROMC:527E 57               ld   d,a
 ROMC:527F FA 8C C9         ld   a,(C98C)
 ROMC:5282 5F               ld   e,a
 ROMC:5283 79               ld   a,c
 ROMC:5284 93               sub  e
 ROMC:5285 38 1C            jr   c,52A3         // End immediately if BC is north of view
 ROMC:5287 5F               ld   e,a
 ROMC:5288 7A               ld   a,d
 ROMC:5289 CB 37            swap a
 ROMC:528B C6 10            add  a,10
 ROMC:528D 57               ld   d,a            // D = X difference * 16 + 16
 ROMC:528E 7B               ld   a,e
 ROMC:528F CB 37            swap a
 ROMC:5291 C6 18            add  a,18
 ROMC:5293 5F               ld   e,a            // D = Y difference * 16 + 24
 ROMC:5294 79               ld   a,c
 ROMC:5295 E6 01            and  a,01
 ROMC:5297 28 04            jr   z,529D
 ROMC:5299 7A               ld   a,d
 ROMC:529A C6 08            add  a,08
 ROMC:529C 57               ld   d,a            // Accounts for row
 ROMC:529D 42               ld   b,d
 ROMC:529E 4B               ld   c,e
 ROMC:529F 7C               ld   a,h
 ROMC:52A0 CD AE 2E         call 2EAE           // WRA4($D001 + A * 16) = C; WRA4($D002 + A * 16) = B
 ROMC:52A3 D1               pop  de
 ROMC:52A4 C1               pop  bc
 ROMC:52A5 C9               ret                 // Defaults sprite A graphic coordinates to center of tile BC

Defeated Unit
 ROMC:52A6 01
 ROMC:52A7 FD FC 00 01

 ROMC:52AB 04
 ROMC:52AC F5 03 02 00
 ROMC:52B0 F5 FB 01 00
 ROMC:52B4 FD 03 04 01
 ROMC:52B8 FD FB 03 01

 ROMC:52BC 0B
 ROMC:52BD FF FF 0F 01
 ROMC:52C1 FF F7 0E 01
 ROMC:52C5 F7 07 0D 01
 ROMC:52C9 F7 FF 0C 01
 ROMC:52CD F7 F7 0B 01
 ROMC:52D1 EF 07 0A 00
 ROMC:52D5 EF FF 09 00
 ROMC:52D9 EF F7 08 00
 ROMC:52DD E7 07 07 00
 ROMC:52E1 E7 FF 06 00
 ROMC:52E5 E7 F7 05 00

 ROMC:52E9 07
 ROMC:52EA F6 00 24 20
 ROMC:52EF F6 F8 24 00
 ROMC:52F2 F1 FF 14 00
 ROMC:52F6 F1 F7 13 00
 ROMC:52FA E9 07 12 00
 ROMC:52FE E9 FF 11 00
 ROMC:5302 E9 F7 10 00

 ROMC:5306 03 EC 07 17 00 EC FF 16 00 EC F7 15 00
 ROMC:5313 03 EC 07 17 00 EC FF 16 00 EC F7 15 00

Anti-City weapon
 ROMC:5320 01 FC FC 18 00
 ROMC:5325 04 F4 00 19 20 FC 00 1A 20 F4 F8 19 00 FC F8 1A 00
 ROMC:5336 06 F0 00 1B 20 F8 00 1C 20 00 00 1D 20 F0 F8 1B 00 F8 F8 1C 00 00 F8 1D 00
 ROMC:534F 06 F0 00 1E 20 F8 00 1F 20 00 00 20 20 F0 F8 1E 00 F8 F8 1F 00 00 F8 20 00
 ROMC:5368 06 F0 00 21 20 F8 00 22 20 00 00 23 20 F0 F8 21 00 F8 F8 22 00 00 F8 23 00
 ROMC:5381 06 F0 00 21 20 F8 00 22 20 00 00 23 20 F0 F8 21 00 F8 F8 22 00 00 F8 23 00
-
Defeated unit
 ROMC:539A A6 52 05
 ROMC:539D AB 52 04
 ROMC:53A0 BC 52 08
 ROMC:53A3 E9 52 06
 ROMC:53A6 06 53 04
 ROMC:53A9 13 53 FF 00 00
Anti-City weapon
 ROMC:53AE 20 53 04
 ROMC:53B1 25 53 03
 ROMC:53B4 36 53 03
 ROMC:53B7 4F 53 07
 ROMC:53BA 68 53 05
 ROMC:53BD 81 53 FF 00 00

 ROMC:53C2 9A 53
 ROMC:53C4 AE 53

 ROMC:53C6 04 3C 3A 46 7D 83 79 87 42 7E 3C 3C 00 00 00 00
 ROMC:53D6 01 3F 7E 01 FF 00 FF 00 7E 81 80 FF 73 7F 0C 0C
 ROMC:53E6 00 00 80 80 40 C0 40 C0 40 C0 C0 C0 80 80 00 00
 ROMC:53F6 0C 00 1E 21 3F 40 3F 40 1E 21 00 1E 00 00 00 00
 ROMC:5406 00 00 00 00 00 80 00 80 00 00 00 00 00 00 00 00
 ROMC:5416 00 01 07 00 1F 00 3F 00 7F 00 7F 00 7F 80 7F 80
 ROMC:5426 00 F0 E4 1C D3 2F F9 07 F8 07 F4 0B FC 03 F8 07
 ROMC:5436 00 00 00 00 00 00 80 80 C0 C0 C0 C0 60 E0 E0 E0
 ROMC:5446 FF 80 AD D2 52 6D 60 7F 38 3F 1E 1F 0F 07 11 01
 ROMC:5456 D0 2F B0 4F C4 3F 01 FF 2B FF 9F FF FE FC F1 F0
 ROMC:5466 60 E0 E0 E0 C0 C0 C0 C0 80 80 00 00 00 00 00 00
 ROMC:5476 17 00 18 00 26 00 21 00 19 01 04 03 03 00 03 03
 ROMC:5486 FD E0 E3 20 0C E0 F0 00 F3 F0 04 F8 F8 00 F8 F8
 ROMC:5496 00 00 00 00 80 00 80 00 00 00 00 00 00 00 00 00
 ROMC:54A6 04 03 07 08 07 08 01 06 00 01 00 00 00 00 00 00
 ROMC:54B6 00 FC 18 E6 F8 06 F0 0C 00 F0 00 00 00 00 00 00
 ROMC:54C6 00 00 03 00 3F 00 4F 10 9F 00 9F 20 87 38 78 07
 ROMC:54D6 00 E0 E0 18 F3 0E F9 07 FD 03 FC 03 FC 03 07 F8
 ROMC:54E6 00 00 00 00 80 00 40 00 20 00 A0 80 A0 80 C0 00
 ROMC:54F6 1F 18 17 1F 0C 0F 03 03 00 00 00 00 00 00 00 00
 ROMC:5506 FF 07 FB FF 06 FE 18 F8 E0 E0 00 00 00 00 00 00
 ROMC:5516 00 00 01 01 04 07 63 7C 04 07 01 01 00 00 00 00
 ROMC:5526 E0 E0 10 F0 E4 1C F8 07 E4 1C 10 F0 E0 E0 00 00
 ROMC:5536 00 00 00 00 00 00 60 E0 00 00 00 00 00 00 00 00
 ROMC:5546 00 00 18 18 24 3C 5A 66 5A 66 24 3C 18 18 00 00
 ROMC:5556 00 00 00 00 00 00 00 01 01 00 01 00 01 02 01 02
 ROMC:5566 03 00 03 04 0F 08 13 1C 11 1E 08 0F 04 07 03 03
 ROMC:5576 00 00 00 01 00 01 01 00 01 02 01 02 01 02 03 00
 ROMC:5586 03 00 03 00 03 00 03 00 03 04 0F 08 0F 08 17 18
 ROMC:5596 13 1C 08 0F 04 07 03 03 00 00 00 00 00 00 00 00
 ROMC:55A6 00 00 01 02 03 04 03 04 31 02 4B 32 37 7A 0A 0D
 ROMC:55B6 04 07 1F 00 2B 1A 51 30 21 60 41 40 01 00 01 02
 ROMC:55C6 03 04 09 0E 0C 0F 07 07 00 00 00 00 00 00 00 00
 ROMC:55D6 00 01 00 04 00 00 00 08 00 00 00 04 00 01 20 60
 ROMC:55E6 C0 40 80 00 00 00 10 10 10 30 30 10 41 21 44 24
 ROMC:55F6 50 30 00 40 10 10 04 04 01 01 00 00 00 00 00 00
 ROMC:5606 05 00 10 00 40 00 00 00 80 00 00 00 20 00 0A 00

 ROMC:5616 B5 3A FF 7F 3F 03 9E 01
 ROMC:561E B5 3A FF 7F F7 5E EF 3D

 ROMC:5626 C5               push bc
 ROMC:5627 D5               push de
 ROMC:5628 E5               push hl
 ROMC:5629 F0 82            ld   a,(ff00+82)
 ROMC:562B F5               push af
 ROMC:562C 3E 01            ld   a,01
 ROMC:562E E0 82            ld   (ff00+82),a
 ROMC:5630 E0 70            ld   (ff00+70),a
 ROMC:5632 AF               xor  a
 ROMC:5633 EA 80 DD         ld   (DD80),a
 ROMC:5636 3E FF            ld   a,FF
 ROMC:5638 21 81 DD         ld   hl,DD81
 ROMC:563B 01 2C 01         ld   bc,012C
 ROMC:563E CD 79 3B         call 3B79           // WRA1($DD81) to ($DEAC) = -1
 ROMC:5641 3E FE            ld   a,FE
 ROMC:5643 22               ldi  (hl),a
 ROMC:5644 22               ldi  (hl),a
 ROMC:5645 22               ldi  (hl),a         // WRA1($DEAD) to ($DEAF) = -2
 ROMC:5646 0E 00            ld   c,00
 ROMC:5648 06 00            ld   b,00           // Loop begins here or next line
 ROMC:564A CD F8 15         call 15F8           // HL = $D000 + B + C * 64
 ROMC:564D 7E               ld   a,(hl)
 ROMC:564E E6 3F            and  a,3F
 ROMC:5650 EF 0B 07 47                          // A = Terrain base ID
 ROMC:5654 FE 0C            cp   a,0C
 ROMC:5656 30 0D            jr   nc,5665
 ROMC:5658 F5               push af
 ROMC:5659 FA 80 DD         ld   a,(DD80)
 ROMC:565C 5F               ld   e,a
 ROMC:565D F1               pop  af
 ROMC:565E CD 7C 56         call 567C           // Sets property's stats (A = Property type, BC = coordinates, E = number of prior properties)
 ROMC:5661 21 80 DD         ld   hl,DD80
 ROMC:5664 34               inc  (hl)
 ROMC:5665 04               inc  b
 ROMC:5666 FA 89 C9         ld   a,(C989)
 ROMC:5669 B8               cp   b
 ROMC:566A 20 DE            jr   nz,564A
 ROMC:566C 0C               inc  c
 ROMC:566D FA 8A C9         ld   a,(C98A)
 ROMC:5670 B9               cp   c
 ROMC:5671 20 D5            jr   nz,5648
 ROMC:5673 F1               pop  af
 ROMC:5674 E0 82            ld   (ff00+82),a
 ROMC:5676 E0 70            ld   (ff00+70),a
 ROMC:5678 E1               pop  hl
 ROMC:5679 D1               pop  de
 ROMC:567A C1               pop  bc
 ROMC:567B C9               ret                 // Sets all base properties' Strength and coordinates within WRAM Bank 1
 ROMC:567C D5               push de
 ROMC:567D E5               push hl
 ROMC:567E 16 00            ld   d,00
 ROMC:5680 87               add  a
 ROMC:5681 21 84 59         ld   hl,5984
 ROMC:5684 CD BC 29         call 29BC           // HL += A
 ROMC:5687 7E               ld   a,(hl)         // A = Property type's initial Strength
 ROMC:5688 F5               push af
 ROMC:5689 21 81 DD         ld   hl,DD81
 ROMC:568C 19               add  hl,de
 ROMC:568D 19               add  hl,de
 ROMC:568E 19               add  hl,de
 ROMC:568F F1               pop  af
 ROMC:5690 22               ldi  (hl),a
 ROMC:5691 70               ld   (hl),b
 ROMC:5692 23               inc  hl
 ROMC:5693 71               ld   (hl),c
 ROMC:5694 E1               pop  hl
 ROMC:5695 D1               pop  de
 ROMC:5696 C9               ret                 // Sets property's stats (A = Property type, BC = coordinates)
 ROMC:5697 D5               push de
 ROMC:5698 E5               push hl
 ROMC:5699 F0 82            ld   a,(ff00+82)
 ROMC:569B F5               push af
 ROMC:569C 3E 01            ld   a,01
 ROMC:569E E0 82            ld   (ff00+82),a
 ROMC:56A0 E0 70            ld   (ff00+70),a
 ROMC:56A2 21 81 DD         ld   hl,DD81
 ROMC:56A5 1E 00            ld   e,00
 ROMC:56A7 2A               ldi  a,(hl)         // A = Property Strength
 ROMC:56A8 FE FF            cp   a,FF
 ROMC:56AA 28 0A            jr   z,56B6
 ROMC:56AC 23               inc  hl
 ROMC:56AD 23               inc  hl
 ROMC:56AE 1C               inc  e
 ROMC:56AF 7B               ld   a,e
 ROMC:56B0 FE 64            cp   a,64
 ROMC:56B2 20 F3            jr   nz,56A7
 ROMC:56B4 18 17            jr   56CD
 ROMC:56B6 EF 0B 70 47                          // A = Terrain Type
 ROMC:56BA EF 0B DB 41                          // Increments ($C64A + A)
 ROMC:56BE EF 0B 07 47                          // A = Terrain base ID
 ROMC:56C2 CD 7C 56         call 567C           // Sets property's stats (A = Property type, BC = coordinates, E = number of prior properties)
 ROMC:56C5 EF 0B 2F 7C                          // Establishes income values
 ROMC:56C9 21 80 DD         ld   hl,DD80
 ROMC:56CC 34               inc  (hl)
 ROMC:56CD F1               pop  af
 ROMC:56CE E0 82            ld   (ff00+82),a
 ROMC:56D0 E0 70            ld   (ff00+70),a
 ROMC:56D2 E1               pop  hl
 ROMC:56D3 D1               pop  de
 ROMC:56D4 C9               ret                 // Establishes new property using first WRA1($DD81) slot (BC holds coordinates of new property)
 ROMC:56D5 D5               push de
 ROMC:56D6 E5               push hl
 ROMC:56D7 57               ld   d,a
 ROMC:56D8 F0 82            ld   a,(ff00+82)
 ROMC:56DA F5               push af
 ROMC:56DB 3E 01            ld   a,01
 ROMC:56DD E0 82            ld   (ff00+82),a
 ROMC:56DF E0 70            ld   (ff00+70),a
 ROMC:56E1 CD 2B 59         call 592B           // A = Property's Strength for matching property, -1 if there is none
 ROMC:56E4 FE FF            cp   a,FF
 ROMC:56E6 28 15            jr   z,56FD
 ROMC:56E8 3E FF            ld   a,FF
 ROMC:56EA 22               ldi  (hl),a
 ROMC:56EB 22               ldi  (hl),a
 ROMC:56EC 22               ldi  (hl),a         // Sets all stats of given property to -1
 ROMC:56ED EF 0B 70 47                          // A = Terrain Type
 ROMC:56F1 EF 0B E7 41                          // Decrements ($C64A + A)
 ROMC:56F5 EF 0B 2F 7C                          // Establishes income values
 ROMC:56F9 21 80 DD         ld   hl,DD80
 ROMC:56FC 35               dec  (hl)
 ROMC:56FD F1               pop  af
 ROMC:56FE E0 82            ld   (ff00+82),a
 ROMC:5700 E0 70            ld   (ff00+70),a
 ROMC:5702 E1               pop  hl
 ROMC:5703 D1               pop  de
 ROMC:5704 C9               ret                 // Establishes general changes of removal of property at BC
 ROMC:5705 C5               push bc
 ROMC:5706 E5               push hl
 ROMC:5707 06 00            ld   b,00
 ROMC:5709 0E 00            ld   c,00
 ROMC:570B 21 4A C6         ld   hl,C64A
 ROMC:570E 2A               ldi  a,(hl)         // Loop begins here
 ROMC:570F 80               add  b
 ROMC:5710 47               ld   b,a
 ROMC:5711 0C               inc  c
 ROMC:5712 79               ld   a,c
 ROMC:5713 FE 20            cp   a,20
 ROMC:5715 20 F7            jr   nz,570E
 ROMC:5717 78               ld   a,b
 ROMC:5718 E1               pop  hl
 ROMC:5719 C1               pop  bc
 ROMC:571A C9               ret                 // A = Total property count
 ROMC:571B C5               push bc
 ROMC:571C D5               push de
 ROMC:571D CD 83 58         call 5883           // A = Property's Strength for matching property, -1 if there is none
 ROMC:5720 FE FF            cp   a,FF
 ROMC:5722 CA F7 57         jp   z,57F7         // End with A = -1 if no property
 ROMC:5725 EA A8 C9         ld   (C9A8),a       // ($C9A8) = Property's Strength
 ROMC:5728 EF 0B 70 47                          // A = Terrain Type
 ROMC:572C EA A7 C9         ld   (C9A7),a       // ($C9A7) = Terrain Type
 ROMC:572F 3E 03            ld   a,03
 ROMC:5731 EF 0B 9D 7A                          // Window tiles in starting area covering 20 by 3 cleared for both VRAM Banks
 ROMC:5735 3E 00            ld   a,00
 ROMC:5737 E0 83            ld   (ff00+83),a
 ROMC:5739 E0 4F            ld   (ff00+4F),a    // VRA0
 ROMC:573B 21 00 8D         ld   hl,8D00
 ROMC:573E 11 FB 59         ld   de,59FB
 ROMC:5741 01 30 01         ld   bc,0130
 ROMC:5744 CD 59 3B         call 3B59           // Tiles 208~226 holds all basic meter graphics
 ROMC:5747 21 2B 5B         ld   hl,5B2B
 ROMC:574A FA A7 C9         ld   a,(C9A7)
 ROMC:574D FE 0C            cp   a,0C
 ROMC:574F 38 09            jr   c,575A         // Skips next portion if Red Star terrain
 ROMC:5751 01 08 00         ld   bc,0008
 ROMC:5754 09               add  hl,bc
 ROMC:5755 FE 17            cp   a,17
 ROMC:5757 38 01            jr   c,575A         // Skips next portion if White Moon terrain
 ROMC:5759 09               add  hl,bc
 ROMC:575A 3E 07            ld   a,07
 ROMC:575C 06 01            ld   b,01
 ROMC:575E CD BC 06         call 06BC           // Last BG Palette holds given faction's equivalent Palette for meter graphics
 ROMC:5761 01 00 80         ld   bc,8000
 ROMC:5764 CD 03 07         call 0703           // Last BG Palette table is updated
 ROMC:5767 3E 00            ld   a,00
 ROMC:5769 E0 83            ld   (ff00+83),a
 ROMC:576B E0 4F            ld   (ff00+4F),a
 ROMC:576D 21 00 8C         ld   hl,8C00
 ROMC:5770 FA A7 C9         ld   a,(C9A7)
 ROMC:5773 EF 0B 77 76                          // (HL ~ HL+63) holds terrain map graphics
 ROMC:5777 21 20 9C         ld   hl,9C20
 ROMC:577A FA A7 C9         ld   a,(C9A7)
 ROMC:577D 57               ld   d,a
 ROMC:577E 06 00            ld   b,00           // VRA0
 ROMC:5780 0E 03            ld   c,03           // Country's Palette
 ROMC:5782 3E C0            ld   a,C0           // Given tile's terrain graphic tiles
 ROMC:5784 EF 0B CF 76                          // Establishes given tile's terrain graphics at VRA0 map coordinates 0,33; also establishes palette
 ROMC:5788 FA A7 C9         ld   a,(C9A7)
 ROMC:578B EF 0B 07 47                          // A = Terrain base ID
 ROMC:578F 21 9C 59         ld   hl,599C        // Terrain's name
 ROMC:5792 CD 93 3A         call 3A93           // HL = (2A + $599C)
 ROMC:5795 01 20 03         ld   bc,0320
 ROMC:5798 CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 ROMC:579B 3E 00            ld   a,00
 ROMC:579D E0 83            ld   (ff00+83),a
 ROMC:579F E0 4F            ld   (ff00+4F),a
 ROMC:57A1 FA A7 C9         ld   a,(C9A7)
 ROMC:57A4 EF 0B 07 47                          // A = Terrain base ID
 ROMC:57A8 CD A3 58         call 58A3           // A = max Property Strength
 ROMC:57AB 47               ld   b,a
 ROMC:57AC 0E 01            ld   c,01
 ROMC:57AE 0C               inc  c              // Loop begins here
 ROMC:57AF 0C               inc  c
 ROMC:57B0 78               ld   a,b
 ROMC:57B1 D6 05            sub  a,05
 ROMC:57B3 47               ld   b,a
 ROMC:57B4 38 02            jr   c,57B8
 ROMC:57B6 20 F6            jr   nz,57AE
 ROMC:57B8 06 00            ld   b,00           // BC = 1 + roundup(Max Property Strength/5) * 2
 ROMC:57BA 11 FC 57         ld   de,57FC        // Numbers text
 ROMC:57BD 21 23 9C         ld   hl,9C23        // 3,33
 ROMC:57C0 CD 59 3B         call 3B59           // (HL ~ HL+BC-1) = (DE ~ DE+BC-1)
 ROMC:57C3 3E 01            ld   a,01
 ROMC:57C5 E0 83            ld   (ff00+83),a
 ROMC:57C7 E0 4F            ld   (ff00+4F),a
 ROMC:57C9 21 43 9C         ld   hl,9C43        // 3,34
 ROMC:57CC 01 10 00         ld   bc,0010
 ROMC:57CF 3E 07            ld   a,07
 ROMC:57D1 CD 84 3B         call 3B84           // (HL ~ HL+BC-1) = A (Country Palette)
 ROMC:57D4 FA A8 C9         ld   a,(C9A8)
 ROMC:57D7 CD 0E 58         call 580E           // Property Strength Meter graphics established
 ROMC:57DA FA 8A C9         ld   a,(C98A)
 ROMC:57DD 3D               dec  a
 ROMC:57DE 3D               dec  a
 ROMC:57DF 47               ld   b,a            // B = Map Height - 2
 ROMC:57E0 FA 92 C9         ld   a,(C992)       // A = Cursor Y Overall Coordinate
 ROMC:57E3 B8               cp   b
 ROMC:57E4 38 0A            jr   c,57F0         // Hides Cursor Sprite only for bottom 2 rows of map
 ROMC:57E6 EF 0B 00 47                          // set 0,WRA4($D000 + ($C98D) * 16)
 ROMC:57EA CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMC:57ED CD D2 04         call 04D2           // Next frame
 ROMC:57F0 3E 78            ld   a,78
 ROMC:57F2 EF 0B 22 48                          // Window scrolls up 4 pixels per frame from Y = 152 to Y = A (A must be a multiple of 4 to avoid an infinite loop error)
 ROMC:57F6 AF               xor  a
 ROMC:57F7 D1               pop  de
 ROMC:57F8 C1               pop  bc
 ROMC:57F9 C9               ret                 // Opens Property Strength showing of highlighted property ending with A = 0; simply ends with A = -1 if there is none

 ROMC:57FA 03 21
 ROMC:57FC D8 D9 D8               ret  c
 ROMC:57FF DA DB DC DD               -    
 ROMC:5803 DE DB DF DD               -    
 ROMC:5807 E0 DB E1 DD               -    
 ROMC:580B E2 DB 00

 ROMC:580E C5               push bc
 ROMC:580F D5               push de
 ROMC:5810 57               ld   d,a
 ROMC:5811 FA A7 C9         ld   a,(C9A7)
 ROMC:5814 EF 0B 07 47                          // A = Terrain base ID
 ROMC:5818 CD A3 58         call 58A3           // A = max Property Strength
 ROMC:581B 47               ld   b,a            // B = Max Property Strength
 ROMC:581C 7A               ld   a,d
 ROMC:581D 0E D0            ld   c,D0
 ROMC:581F 21 43 9C         ld   hl,9C43        // A, Max Property Strength, 208, A, E, $9C43
 ROMC:5822 CD 36 58         call 5836           // Property Strength Meter graphics established
 ROMC:5825 D1               pop  de
 ROMC:5826 C1               pop  bc
 ROMC:5827 C9               ret  
 ROMC:5828 C5               push bc
 ROMC:5829 D5               push de
 ROMC:582A 11 FB 59         ld   de,59FB
 ROMC:582D 01 80 00         ld   bc,0080
 ROMC:5830 CD 59 3B         call 3B59           // (HL ~ HL+BC-1) = (DE ~ DE+BC-1)
 ROMC:5833 D1               pop  de
 ROMC:5834 C1               pop  bc
 ROMC:5835 C9               ret                 // Meter graphics set in (HL) 128 byte
 ROMC:5836 C5               push bc
 ROMC:5837 D5               push de
 ROMC:5838 E5               push hl
 ROMC:5839 57               ld   d,a            // D = Fill Value
 ROMC:583A E5               push hl
 ROMC:583B 1E 00            ld   e,00
 ROMC:583D 1C               inc  e              // Loop begins here
 ROMC:583E 78               ld   a,b            // A = Max Value
 ROMC:583F D6 05            sub  a,05
 ROMC:5841 47               ld   b,a
 ROMC:5842 38 F9            jr   c,583D
 ROMC:5844 20 F7            jr   nz,583D        // E = (B + 4) / 5 + (5 - B%5) * 51; E should be B / 5
 ROMC:5846 E1               pop  hl
 ROMC:5847 3E 00            ld   a,00
 ROMC:5849 E0 83            ld   (ff00+83),a
 ROMC:584B E0 4F            ld   (ff00+4F),a
 ROMC:584D 7A               ld   a,d            // Loop begins here
 ROMC:584E D6 05            sub  a,05
 ROMC:5850 30 05            jr   nc,5857
 ROMC:5852 7A               ld   a,d            // A is set to remainder
 ROMC:5853 16 00            ld   d,00           // D is set to 0 (which is going to be the remainder for further cycles)
 ROMC:5855 18 03            jr   585A
 ROMC:5857 57               ld   d,a            // D is reduced by 5
 ROMC:5858 3E 05            ld   a,05           // A is set to 5
 ROMC:585A E5               push hl
 ROMC:585B 87               add  a
 ROMC:585C 21 77 58         ld   hl,5877
 ROMC:585F CD BC 29         call 29BC           // HL += A
 ROMC:5862 2A               ldi  a,(hl)
 ROMC:5863 46               ld   b,(hl)
 ROMC:5864 E1               pop  hl
 ROMC:5865 81               add  c
 ROMC:5866 CD 2D 0F         call 0F2D           // (HL) = A with cooldown based on bit 1,($FF41)
 ROMC:5869 23               inc  hl
 ROMC:586A 78               ld   a,b
 ROMC:586B 81               add  c
 ROMC:586C CD 2D 0F         call 0F2D           // (HL) = A with cooldown based on bit 1,($FF41)
 ROMC:586F 23               inc  hl
 ROMC:5870 1D               dec  e
 ROMC:5871 20 DA            jr   nz,584D
 ROMC:5873 E1               pop  hl
 ROMC:5874 D1               pop  de
 ROMC:5875 C1               pop  bc
 ROMC:5876 C9               ret                 // Property Strength Meter graphics established

 ROMC:5877 00 04
 ROMC:5879 01 04
 ROMC:587B 02 04
 ROMC:587D 03 05
 ROMC:587F 03 06
 ROMC:5881 03 07

 ROMC:5883 CD 2B 59         call 592B
 ROMC:5886 C9               ret                 // A = Property's Strength for matching property, -1 if there is none
 ROMC:5887 D5               push de
 ROMC:5888 E5               push hl
 ROMC:5889 57               ld   d,a
 ROMC:588A F0 82            ld   a,(ff00+82)
 ROMC:588C F5               push af
 ROMC:588D 3E 01            ld   a,01
 ROMC:588F E0 82            ld   (ff00+82),a
 ROMC:5891 E0 70            ld   (ff00+70),a
 ROMC:5893 CD 2B 59         call 592B           // A = Property's Strength for matching property, -1 if there is none
 ROMC:5896 FE FF            cp   a,FF
 ROMC:5898 28 01            jr   z,589B
 ROMC:589A 72               ld   (hl),d
 ROMC:589B F1               pop  af
 ROMC:589C E0 82            ld   (ff00+82),a
 ROMC:589E E0 70            ld   (ff00+70),a
 ROMC:58A0 E1               pop  hl
 ROMC:58A1 D1               pop  de
 ROMC:58A2 C9               ret                 // If property exists, WRA1($DD81 + Property # * 3) = A
 ROMC:58A3 E5               push hl
 ROMC:58A4 87               add  a
 ROMC:58A5 21 84 59         ld   hl,5984
 ROMC:58A8 CD BC 29         call 29BC           // HL += A
 ROMC:58AB 23               inc  hl
 ROMC:58AC 7E               ld   a,(hl)
 ROMC:58AD E1               pop  hl
 ROMC:58AE C9               ret                 // A = max Property Strength
 ROMC:58AF E5               push hl
 ROMC:58B0 87               add  a
 ROMC:58B1 21 84 59         ld   hl,5984
 ROMC:58B4 CD BC 29         call 29BC           // HL += A
 ROMC:58B7 7E               ld   a,(hl)
 ROMC:58B8 E1               pop  hl
 ROMC:58B9 C9               ret                 // A = initial Property Strength
 ROMC:58BA CD 83 58         call 5883           // A = Property's Strength for matching property, -1 if there is none
 ROMC:58BD CD C1 58         call 58C1           // Compares Current Property Strength to max Property Strength
 ROMC:58C0 C9               ret                 // Compares Current Property Strength to max Property Strength
 ROMC:58C1 D5               push de
 ROMC:58C2 57               ld   d,a
 ROMC:58C3 EF 0B 70 47                          // A = Terrain Type
 ROMC:58C7 EF 0B 07 47                          // A = Terrain base ID
 ROMC:58CB CD A3 58         call 58A3           // A = max Property Strength
 ROMC:58CE BA               cp   d
 ROMC:58CF D1               pop  de
 ROMC:58D0 C9               ret                 // Compares A to max Property Strength
 ROMC:58D1 C5               push bc
 ROMC:58D2 D5               push de
 ROMC:58D3 57               ld   d,a
 ROMC:58D4 CD 83 58         call 5883           // A = Property's Strength for matching property, -1 if there is none
 ROMC:58D7 FE FF            cp   a,FF
 ROMC:58D9 28 14            jr   z,58EF         // End with A = -1 if no property
 ROMC:58DB 82               add  d
 ROMC:58DC 57               ld   d,a            // D = Property Strength + A
 ROMC:58DD CB 7A            bit  7,d
 ROMC:58DF 20 08            jr   nz,58E9        // End with Property Strength = 0 if result of Property Strength + A is computed as >127
 ROMC:58E1 CD C1 58         call 58C1           // Compares A to max Property Strength
 ROMC:58E4 38 04            jr   c,58EA         // Maximizes Property Strength at max value
 ROMC:58E6 7A               ld   a,d
 ROMC:58E7 18 01            jr   58EA
 ROMC:58E9 AF               xor  a
 ROMC:58EA F5               push af
 ROMC:58EB CD 87 58         call 5887           // If property exists, WRA1($DD81 + Property # * 3) = A
 ROMC:58EE F1               pop  af
 ROMC:58EF D1               pop  de
 ROMC:58F0 C1               pop  bc
 ROMC:58F1 C9               ret                 // Adds A to Property Strength while staying within range
 ROMC:58F2 D5               push de
 ROMC:58F3 5F               ld   e,a
 ROMC:58F4 CD 1B 57         call 571B           // Opens Property Strength showing of highlighted property ending with A = 0; simply ends with A = -1 if there is none
 ROMC:58F7 7B               ld   a,e
 ROMC:58F8 CD 83 58         call 5883           // A = Property's Strength for matching property, -1 if there is none
 ROMC:58FB 57               ld   d,a            // D = Property's Strength
 ROMC:58FC 7B               ld   a,e
 ROMC:58FD CD D1 58         call 58D1           // Adds A to Property Strength while staying within range (Absolute Value may be involved for Capture/Bombing)
 ROMC:5900 5F               ld   e,a            // E = new Property Strength
 ROMC:5901 C5               push bc             // Loop begins here
 ROMC:5902 D5               push de
 ROMC:5903 CD A2 05         call 05A2           // Button update, next frame
 ROMC:5906 CD A2 05         call 05A2           // Button update, next frame
 ROMC:5909 D1               pop  de
 ROMC:590A C1               pop  bc
 ROMC:590B 7A               ld   a,d
 ROMC:590C BB               cp   e              // Compares Old Property Strength to New Property Strength
 ROMC:590D 28 11            jr   z,5920
 ROMC:590F 38 03            jr   c,5914
 ROMC:5911 15               dec  d              // New Property Strength is lower
 ROMC:5912 18 01            jr   5915
 ROMC:5914 14               inc  d              // New Property Strength is higher
 ROMC:5915 7A               ld   a,d            // Inches closer to the whole thing
 ROMC:5916 CD 0E 58         call 580E           // Property Strength Meter graphics updated every 2 frames
 ROMC:5919 3E 02            ld   a,02
 ROMC:591B CD 44 38         call 3844
 ROMC:591E 18 E1            jr   5901
 ROMC:5920 EF 0B 60 48                          // Shuts off Window Display, LCD STAT Interrupt, and LYC=LY Coincidence Interrupt
 ROMC:5924 EF 0B F9 46                          // res 0,WRA4[$D000 + ($C98D) * 16]
 ROMC:5928 7B               ld   a,e
 ROMC:5929 D1               pop  de
 ROMC:592A C9               ret                 // Show Property Strength update for given task on Property (A is increase amount)
 ROMC:592B D5               push de
 ROMC:592C F0 82            ld   a,(ff00+82)
 ROMC:592E F5               push af
 ROMC:592F 3E 01            ld   a,01
 ROMC:5931 E0 82            ld   (ff00+82),a
 ROMC:5933 E0 70            ld   (ff00+70),a
 ROMC:5935 21 81 DD         ld   hl,DD81
 ROMC:5938 1E 00            ld   e,00
 ROMC:593A 56               ld   d,(hl)         // Loop begins here; D = Strength
 ROMC:593B 23               inc  hl
 ROMC:593C 2A               ldi  a,(hl)         // A = X coordinate
 ROMC:593D B8               cp   b
 ROMC:593E 20 09            jr   nz,5949        // End cycle if X coordinate doesn't match
 ROMC:5940 2A               ldi  a,(hl)
 ROMC:5941 B9               cp   c
 ROMC:5942 20 06            jr   nz,594A        // Y coordinate version
 ROMC:5944 2B               dec  hl
 ROMC:5945 2B               dec  hl
 ROMC:5946 2B               dec  hl
 ROMC:5947 18 09            jr   5952           // End with A = Property's Strength if coordinates match BC
 ROMC:5949 23               inc  hl
 ROMC:594A 1C               inc  e
 ROMC:594B 7B               ld   a,e
 ROMC:594C FE 64            cp   a,64
 ROMC:594E 20 EA            jr   nz,593A
 ROMC:5950 16 FF            ld   d,FF
 ROMC:5952 F1               pop  af
 ROMC:5953 E0 82            ld   (ff00+82),a
 ROMC:5955 E0 70            ld   (ff00+70),a
 ROMC:5957 7A               ld   a,d
 ROMC:5958 D1               pop  de
 ROMC:5959 C9               ret                 // A = Property's Strength for matching property, -1 if there is none
 ROMC:595A D5               push de
 ROMC:595B F0 82            ld   a,(ff00+82)
 ROMC:595D F5               push af
 ROMC:595E 3E 01            ld   a,01
 ROMC:5960 E0 82            ld   (ff00+82),a
 ROMC:5962 E0 70            ld   (ff00+70),a
 ROMC:5964 21 81 DD         ld   hl,DD81
 ROMC:5967 1E 00            ld   e,00
 ROMC:5969 2A               ldi  a,(hl)         // Loop begins here
 ROMC:596A 56               ld   d,(hl)
 ROMC:596B 23               inc  hl
 ROMC:596C 2A               ldi  a,(hl)
 ROMC:596D B9               cp   c
 ROMC:596E 20 04            jr   nz,5974
 ROMC:5970 7A               ld   a,d
 ROMC:5971 B8               cp   b
 ROMC:5972 28 08            jr   z,597C
 ROMC:5974 1C               inc  e
 ROMC:5975 7B               ld   a,e
 ROMC:5976 FE 64            cp   a,64
 ROMC:5978 20 EF            jr   nz,5969
 ROMC:597A 1E FF            ld   e,FF
 ROMC:597C F1               pop  af
 ROMC:597D E0 82            ld   (ff00+82),a
 ROMC:597F E0 70            ld   (ff00+70),a
 ROMC:5981 7B               ld   a,e
 ROMC:5982 D1               pop  de
 ROMC:5983 C9               ret                 // A = matching Property, -1 if there is none
 
 ROMC:5984 00 00
 ROMC:5986 14 28
 ROMC:5988 0A 1E
 ROMC:598A 00 0A
 ROMC:598C 0A 1E
 ROMC:598E 00 0A
 ROMC:5990 0A 1E
 ROMC:5992 00 0A
 ROMC:5994 0A 14
 ROMC:5996 0A 1E
 ROMC:5998 00 0A
 ROMC:599A 0A 1E
 
 ROMC:599C B4 59
 ROMC:599E B4 59
 ROMC:59A0 B8 59
 ROMC:59A2 BB 59
 ROMC:59A4 C2 59
 ROMC:59A6 C8 59
 ROMC:59A8 D2 59
 ROMC:59AA D7 59
 ROMC:59AC E0 59
 ROMC:59AE E8 59
 ROMC:59B0 EC 59
 ROMC:59B2 F4 59
 
 ROMC:59B4 0D 4E 15 00
 ROMC:59B8 15 0D 00
 ROMC:59BB 1F 04 07 03 15 0D 00
 ROMC:59C2 0B 04 35 4F 04 00
 ROMC:59C8 1F 04 07 03 0B 04 35 4F 04 00
 ROMC:59D2 09 04 0B 04 00
 ROMC:59D7 1F 04 07 03 09 04 0B 04 00
 ROMC:59E0 07 2E 03 09 04 0B 04 00
 ROMC:59E8 21 16 15 00
 ROMC:59EC 1F 04 07 03 21 16 15 00
 ROMC:59F4 13 04 0D 2E 15 04 00

 ROMC:59FB 00 FF 00 92 00 6D 00 6D 00 6D 00 6D 00 6D 00 92
 ROMC:5A0B 00 FF 00 92 20 6D 60 4D 60 4D 60 4D 60 0D 00 92
 ROMC:5A1B 00 FF 00 92 24 6D 6C 49 6C 49 6C 49 6C 01 00 92
 ROMC:5A2B 00 FF 00 92 24 6D 6D 49 6D 49 6D 49 6D 00 00 92
 ROMC:5A3B 00 FF 00 49 00 B6 00 B6 00 B6 00 B6 00 B6 00 49
 ROMC:5A4B 00 FF 00 49 80 B6 80 36 80 36 80 36 80 36 00 49
 ROMC:5A5B 00 FF 00 49 90 B6 B0 26 B0 26 B0 26 B0 06 00 49
 ROMC:5A6B 00 FF 00 49 92 B6 B6 24 B6 24 B6 24 B6 00 00 49          // Meter graphics
 ROMC:5A7B 00 FF 00 FF 00 FF 00 1F 00 5F 00 5F 00 5F 00 1F
 ROMC:5A8B 00 FF 00 FF 00 FF 00 F1 00 F7 00 F1 00 FD 00 F1
 ROMC:5A9B 00 FF 00 FF 00 FF 00 F4 00 F5 00 F5 00 F5 00 F4
 ROMC:5AAB 00 FF 00 FF 00 FF 00 47 00 57 00 57 00 57 00 47
 ROMC:5ABB 00 FF 00 FF 00 FF 00 F4 00 F5 00 F4 00 F7 00 F4
 ROMC:5ACB 00 FF 00 FF 00 FF 00 47 00 D7 00 57 00 57 00 47
 ROMC:5ADB 00 FF 00 FF 00 FF 00 C4 00 F5 00 C5 00 DD 00 C4
 ROMC:5AEB 00 FF 00 FF 00 FF 00 C4 00 F5 00 C4 00 DF 00 C4
 ROMC:5AFB 00 FF 00 FF 00 FF 00 C4 00 F5 00 C5 00 F5 00 C4
 ROMC:5B0B 00 FF 00 FF 00 FF 00 C4 00 F5 00 C4 00 F7 00 C4
 ROMC:5B1B 00 FF 00 FF 00 FF 00 EC 00 CD 00 AD 00 85 00 EC          // Numbers accommodating meter graphics

 ROMC:5B2B 00 00 4E 00 FF 7F 9C 00
 
 ROMC:5B33 00 00 E7 24 FF 7F CD 45

 ROMC:5B3B 00 00 80 02 FF 7F EC 03
 
 ROMC:5B43 C5               push bc
 ROMC:5B44 D5               push de
 ROMC:5B45 AF               xor  a
 ROMC:5B46 E0 B1            ld   (ff00+B1),a    // Water timer paused
 ROMC:5B48 3E 0D            ld   a,0D
 ROMC:5B4A CD BC 06         call 06BC           // ($C548) to ($C547 + B * 8) hold (HL) to (HL + B * 8 - 1)
 ROMC:5B4D CD FE 06         call 06FE           // Sprite Palette tables are updated
 ROMC:5B50 CD D2 04         call 04D2           // Next frame
 ROMC:5B53 AF               xor  a
 ROMC:5B54 CB C7            set  0,a
 ROMC:5B56 E0 B1            ld   (ff00+B1),a
 ROMC:5B58 D1               pop  de
 ROMC:5B59 C1               pop  bc
 ROMC:5B5A C9               ret                 // ($C548) to ($C547 + B * 8) hold (HL) to (HL + B * 8 - 1); Sprite Palette tables updated with frame advance as well as water tile graphics update paused
 ROMC:5B5B C5               push bc
 ROMC:5B5C D5               push de
 ROMC:5B5D CD A9 5B         call 5BA9           // Unit deployment sprite graphics setup
 ROMC:5B60 11 D8 5F         ld   de,5FD8        // Tile Pop Out
 ROMC:5B63 CD C8 5B         call 5BC8           // Sets up unit deployment sprite's animation first half with DE indicating location of used modification tables
 ROMC:5B66 CD FF 5B         call 5BFF           // Sprite ($C9A9) plays out up to its last portion
 ROMC:5B69 D1               pop  de
 ROMC:5B6A C1               pop  bc
 ROMC:5B6B C9               ret                 // Tile Pop Out sprite plays out
 ROMC:5B6C D5               push de
 ROMC:5B6D 11 0E 60         ld   de,600E
 ROMC:5B70 CD E6 5B         call 5BE6           // Has unit deployment sprite's animation second half play out with DE indicating location of used modification tables
 ROMC:5B73 D1               pop  de
 ROMC:5B74 C9               ret                 // Tile Iris In sprite plays out
 ROMC:5B75 C5               push bc
 ROMC:5B76 D5               push de
 ROMC:5B77 CD A9 5B         call 5BA9           // Unit deployment sprite graphics setup
 ROMC:5B7A 11 E9 5F         ld   de,5FE9        // Factory Gate Close
 ROMC:5B7D CD C8 5B         call 5BC8           // Sets up unit deployment sprite's animation first half with DE indicating location of used modification tables
 ROMC:5B80 CD FF 5B         call 5BFF           // Sprite ($C9A9) plays out up to its last portion
 ROMC:5B83 D1               pop  de
 ROMC:5B84 C1               pop  bc
 ROMC:5B85 C9               ret                 // Factory Gate Close sprite plays out
 ROMC:5B86 D5               push de
 ROMC:5B87 11 1F 60         ld   de,601F        // Factory Gate Open
 ROMC:5B8A CD E6 5B         call 5BE6           // Has unit deployment sprite's animation second half play out with DE indicating location of used modification tables
 ROMC:5B8D D1               pop  de
 ROMC:5B8E C9               ret                 // Factory Gate Open sprite plays out
 ROMC:5B8F C5               push bc
 ROMC:5B90 D5               push de
 ROMC:5B91 CD A9 5B         call 5BA9           // Unit deployment sprite graphics setup
 ROMC:5B94 11 C7 5F         ld   de,5FC7
 ROMC:5B97 CD C8 5B         call 5BC8           // Sets up unit deployment sprite's animation first half with DE indicating location of used modification tables
 ROMC:5B9A CD FF 5B         call 5BFF           // Sprite ($C9A9) plays out up to its last portion
 ROMC:5B9D D1               pop  de
 ROMC:5B9E C1               pop  bc
 ROMC:5B9F C9               ret                 // Tile Iris Out sprite plays out
 ROMC:5BA0 D5               push de
 ROMC:5BA1 11 FD 5F         ld   de,5FFD
 ROMC:5BA4 CD E6 5B         call 5BE6           // Has unit deployment sprite's animation second half play out with DE indicating location of used modification tables
 ROMC:5BA7 D1               pop  de
 ROMC:5BA8 C9               ret                 // Tile Pop In sprite plays out
 ROMC:5BA9 C5               push bc
 ROMC:5BAA D5               push de
 ROMC:5BAB 06 01            ld   b,01
 ROMC:5BAD 21 0F 61         ld   hl,610F
 ROMC:5BB0 CD 43 5B         call 5B43           // ($C548) to ($C547 + B * 8) hold (HL) to (HL + B * 8 - 1); Sprite Palette tables updated with frame advance as well as water tile graphics update paused
 ROMC:5BB3 3E 01            ld   a,01
 ROMC:5BB5 E0 83            ld   (ff00+83),a
 ROMC:5BB7 E0 4F            ld   (ff00+4F),a
 ROMC:5BB9 11 3F 60         ld   de,603F
 ROMC:5BBC 21 00 83         ld   hl,8300
 ROMC:5BBF 01 D0 00         ld   bc,00D0
 ROMC:5BC2 CD 59 3B         call 3B59           // VRA1($8300 ~ $83CF) = ($603F ~ $610E)
 ROMC:5BC5 D1               pop  de
 ROMC:5BC6 C1               pop  bc
 ROMC:5BC7 C9               ret                 // Unit deployment sprite graphics setup
 ROMC:5BC8 C5               push bc
 ROMC:5BC9 3E 20            ld   a,20
 ROMC:5BCB 0E 98            ld   c,98
 ROMC:5BCD 06 0C            ld   b,0C
 ROMC:5BCF CD E8 2D         call 2DE8           // A = number of already active sprites; $Dxx5~$DxxB prepared (B is ROM Block of Sprite, C is base Character Tile # / 2 with bit 7 determining VRAM Bank; and DE is pointer to sprite stats modification tables pointers)
 ROMC:5BD2 EA A9 C9         ld   (C9A9),a
 ROMC:5BD5 06 05            ld   b,05
 ROMC:5BD7 FA A9 C9         ld   a,(C9A9)
 ROMC:5BDA CD C9 2E         call 2EC9           // WRA4($D003 + A * 16) has Palette bits modified according to B
 ROMC:5BDD C1               pop  bc
 ROMC:5BDE FA A9 C9         ld   a,(C9A9)
 ROMC:5BE1 EF 0C 73 52                          // Defaults sprite A graphic coordinates to center of tile BC
 ROMC:5BE5 C9               ret                 // Sets up unit deployment sprite's animation first half with DE indicating location of used modification tables
 ROMC:5BE6 C5               push bc
 ROMC:5BE7 D5               push de
 ROMC:5BE8 FA A9 C9         ld   a,(C9A9)
 ROMC:5BEB 06 0C            ld   b,0C
 ROMC:5BED CD E8 2E         call 2EE8           // WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
 ROMC:5BF0 CD FF 5B         call 5BFF           // Sprite ($C9A9) plays out up to its last portion
 ROMC:5BF3 FA A9 C9         ld   a,(C9A9)
 ROMC:5BF6 CD 1F 2E         call 2E1F           // Handles clear-up of sprite
 ROMC:5BF9 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMC:5BFC D1               pop  de
 ROMC:5BFD C1               pop  bc
 ROMC:5BFE C9               ret                 // Has unit deployment sprite's animation second half play out with DE indicating location of used modification tables
 ROMC:5BFF C5               push bc
 ROMC:5C00 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMC:5C03 CD D2 04         call 04D2           // Next frame
 ROMC:5C06 FA A9 C9         ld   a,(C9A9)
 ROMC:5C09 06 0B            ld   b,0B
 ROMC:5C0B CD 9A 2E         call 2E9A           // A = WRA4($D00B + ($C9A9) * 16)
 ROMC:5C0E FE FF            cp   a,FF
 ROMC:5C10 20 EE            jr   nz,5C00
 ROMC:5C12 C1               pop  bc
 ROMC:5C13 C9               ret                 // Sprite ($C9A9) plays out up to its last portion
 ROMC:5C14 C5               push bc
 ROMC:5C15 D5               push de
 ROMC:5C16 F5               push af
 ROMC:5C17 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMC:5C1A CD A2 05         call 05A2           // Button update, next frame
 ROMC:5C1D F1               pop  af
 ROMC:5C1E 3D               dec  a
 ROMC:5C1F 20 F5            jr   nz,5C16
 ROMC:5C21 D1               pop  de
 ROMC:5C22 C1               pop  bc
 ROMC:5C23 C9               ret                 // Force advances the game by A frames
 ROMC:5C24 C5               push bc
 ROMC:5C25 D5               push de
 ROMC:5C26 FA AD C9         ld   a,(C9AD)
 ROMC:5C29 A7               and  a
 ROMC:5C2A 28 3A            jr   z,5C66         // Ends immediately with A = 0 if ($C9AD) = 0
 ROMC:5C2C CD C8 5C         call 5CC8           // Sets up Direction # of Linkup Star
 ROMC:5C2F 06 01            ld   b,01
 ROMC:5C31 21 6D 63         ld   hl,636D
 ROMC:5C34 CD 43 5B         call 5B43           // ($C548) to ($C54F) hold ($636D) to ($6374); Sprite Palette tables updated with frame advance as well as water tile graphics update paused
 ROMC:5C37 3E 01            ld   a,01
 ROMC:5C39 E0 83            ld   (ff00+83),a
 ROMC:5C3B E0 4F            ld   (ff00+4F),a
 ROMC:5C3D FA AD C9         ld   a,(C9AD)
 ROMC:5C40 CD 8A 5C         call 5C8A           // DE = $612D + ($C9AD) * 64 (location of Star sprite A's graphics)
 ROMC:5C43 21 00 83         ld   hl,8300
 ROMC:5C46 01 40 00         ld   bc,0040
 ROMC:5C49 CD 59 3B         call 3B59           // VRA1($8300 ~ $833F) = (DE ~ DE+BC-1)
 ROMC:5C4C FA AA C9         ld   a,(C9AA)       // Receiving unit
 ROMC:5C4F 0E 01            ld   c,01
 ROMC:5C51 EF 12 83 40                          
 ROMC:5C55 43               ld   b,e
 ROMC:5C56 4A               ld   c,d            // BC holds coordinates
 ROMC:5C57 CD 69 5C         call 5C69           // Sets up Star sprite
 ROMC:5C5A CD FE 5C         call 5CFE           // Handles Star sprite's movement by sqrt(4~5) pixels in overall direction per 3 frames for 27 frames
 ROMC:5C5D FA A9 C9         ld   a,(C9A9)
 ROMC:5C60 CD 1F 2E         call 2E1F           // Handles clear-up of sprite
 ROMC:5C63 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMC:5C66 D1               pop  de
 ROMC:5C67 C1               pop  bc
 ROMC:5C68 C9               ret                 // Linkup Star sprite animation plays out
 ROMC:5C69 C5               push bc
 ROMC:5C6A 3E 20            ld   a,20
 ROMC:5C6C 0E 98            ld   c,98
 ROMC:5C6E 06 0C            ld   b,0C
 ROMC:5C70 11 28 61         ld   de,6128
 ROMC:5C73 CD E8 2D         call 2DE8           // A = number of already active sprites; $Dxx5~$DxxB prepared (B is ROM Block of Sprite, C is base Character Tile # / 2 with bit 7 determining VRAM Bank; and DE is pointer to sprite stats modification tables pointers)
 ROMC:5C76 EA A9 C9         ld   (C9A9),a
 ROMC:5C79 06 05            ld   b,05
 ROMC:5C7B FA A9 C9         ld   a,(C9A9)
 ROMC:5C7E CD C9 2E         call 2EC9           // WRA4($D003 + A * 16) has Palette bits modified according to B
 ROMC:5C81 C1               pop  bc
 ROMC:5C82 FA A9 C9         ld   a,(C9A9)
 ROMC:5C85 EF 0C 73 52                          // Defaults sprite A graphic coordinates to center of tile BC
 ROMC:5C89 C9               ret                 // Sets up Star sprite
 ROMC:5C8A 3D               dec  a
 ROMC:5C8B CB 37            swap a
 ROMC:5C8D 6F               ld   l,a
 ROMC:5C8E 26 00            ld   h,00
 ROMC:5C90 29               add  hl,hl
 ROMC:5C91 29               add  hl,hl
 ROMC:5C92 54               ld   d,h
 ROMC:5C93 5D               ld   e,l            // DE = A * 64
 ROMC:5C94 21 2D 61         ld   hl,612D
 ROMC:5C97 19               add  hl,de
 ROMC:5C98 54               ld   d,h
 ROMC:5C99 5D               ld   e,l
 ROMC:5C9A C9               ret                 // DE = $612D + A * 64
 ROMC:5C9B FA E1 CC         ld   a,(CCE1)
 ROMC:5C9E 47               ld   b,a
 ROMC:5C9F FA 42 C9         ld   a,(C942)       // First unit's new HP
 ROMC:5CA2 90               sub  b
 ROMC:5CA3 30 13            jr   nc,5CB8
 ROMC:5CA5 2F               cpl  
 ROMC:5CA6 3C               inc  a
 ROMC:5CA7 EA AD C9         ld   (C9AD),a
 ROMC:5CAA FA D8 C9         ld   a,(C9D8)
 ROMC:5CAD EA AA C9         ld   (C9AA),a
 ROMC:5CB0 FA 41 C9         ld   a,(C941)
 ROMC:5CB3 EA AB C9         ld   (C9AB),a       // Unit 1, Unit 2, ?, Transferred HP
 ROMC:5CB6 18 0F            jr   5CC7
 ROMC:5CB8 EA AD C9         ld   (C9AD),a
 ROMC:5CBB FA 41 C9         ld   a,(C941)
 ROMC:5CBE EA AA C9         ld   (C9AA),a
 ROMC:5CC1 FA D8 C9         ld   a,(C9D8)
 ROMC:5CC4 EA AB C9         ld   (C9AB),a       // Unit 2, Unit 1, ?, Transferred HP
 ROMC:5CC7 C9               ret                 // Sets up Linkup command data of which unit is receiving, which is giving, and how much HP is being transferred
 ROMC:5CC8 1E 00            ld   e,00
 ROMC:5CCA D5               push de             // Loop begins here
 ROMC:5CCB FA AA C9         ld   a,(C9AA)       // Receiving unit
 ROMC:5CCE 0E 01            ld   c,01
 ROMC:5CD0 EF 12 83 40                          
 ROMC:5CD4 43               ld   b,e
 ROMC:5CD5 4A               ld   c,d            // BC holds coordinates
 ROMC:5CD6 D1               pop  de
 ROMC:5CD7 CD D9 28         call 28D9           // BC = relative coordinates, Set Carry Flag based on relative coordinates being out of bounds
 ROMC:5CDA C5               push bc
 ROMC:5CDB D5               push de
 ROMC:5CDC FA AB C9         ld   a,(C9AB)       // Giving unit
 ROMC:5CDF 0E 01            ld   c,01
 ROMC:5CE1 EF 12 83 40                          
 ROMC:5CE5 63               ld   h,e
 ROMC:5CE6 6A               ld   l,d            // HL holds coordinates
 ROMC:5CE7 D1               pop  de
 ROMC:5CE8 C1               pop  bc
 ROMC:5CE9 78               ld   a,b
 ROMC:5CEA BC               cp   h
 ROMC:5CEB 20 06            jr   nz,5CF3
 ROMC:5CED 79               ld   a,c
 ROMC:5CEE BD               cp   l
 ROMC:5CEF 20 02            jr   nz,5CF3
 ROMC:5CF1 18 06            jr   5CF9
 ROMC:5CF3 1C               inc  e
 ROMC:5CF4 7B               ld   a,e
 ROMC:5CF5 FE 06            cp   a,06
 ROMC:5CF7 20 D1            jr   nz,5CCA
 ROMC:5CF9 7B               ld   a,e
 ROMC:5CFA EA AC C9         ld   (C9AC),a
 ROMC:5CFD C9               ret                 // Sets up Direction # of Linkup Star
 ROMC:5CFE FA AC C9         ld   a,(C9AC)       // Direction # of Linkup Star
 ROMC:5D01 87               add  a
 ROMC:5D02 21 32 5D         ld   hl,5D32
 ROMC:5D05 CD BC 29         call 29BC           // HL += A
 ROMC:5D08 56               ld   d,(hl)
 ROMC:5D09 23               inc  hl
 ROMC:5D0A 5E               ld   e,(hl)
 ROMC:5D0B 06 09            ld   b,09
 ROMC:5D0D C5               push bc             // Loop begins here
 ROMC:5D0E 3E 03            ld   a,03
 ROMC:5D10 CD 14 5C         call 5C14           // Force advances the game by 3 frames
 ROMC:5D13 FA A9 C9         ld   a,(C9A9)
 ROMC:5D16 06 01            ld   b,01
 ROMC:5D18 CD 9A 2E         call 2E9A           // A = WRA4($D001 + ($C9A9) * 16)
 ROMC:5D1B 83               add  e
 ROMC:5D1C 4F               ld   c,a
 ROMC:5D1D FA A9 C9         ld   a,(C9A9)
 ROMC:5D20 06 02            ld   b,02
 ROMC:5D22 CD 9A 2E         call 2E9A           // A = WRA4($D002 + ($C9A9) * 16)
 ROMC:5D25 82               add  d
 ROMC:5D26 47               ld   b,a
 ROMC:5D27 FA A9 C9         ld   a,(C9A9)
 ROMC:5D2A CD AE 2E         call 2EAE           // WRA4($D001 + A * 16) = C; WRA4($D002 + A * 16) = B
 ROMC:5D2D C1               pop  bc
 ROMC:5D2E 05               dec  b
 ROMC:5D2F 20 DC            jr   nz,5D0D
 ROMC:5D31 C9               ret                 // Handles Star sprite's movement by sqrt(4~5) pixels in overall direction per 3 frames for 27 frames

 ROMC:5D32 FF FE
 ROMC:5D34 01 FE
 ROMC:5D36 FE 00
 ROMC:5D38 02 00
 ROMC:5D3A FF 02
 ROMC:5D3C 01 02

 ROMC:5D3E C5               push bc
 ROMC:5D3F D5               push de
 ROMC:5D40 A7               and  a
 ROMC:5D41 28 4E            jr   z,5D91         // End immediately if A = 0
 ROMC:5D43 C5               push bc
 ROMC:5D44 EA AA C9         ld   (C9AA),a       // ($C9AA) holds HP increase
 ROMC:5D47 06 02            ld   b,02
 ROMC:5D49 21 F5 64         ld   hl,64F5
 ROMC:5D4C CD 43 5B         call 5B43           // ($C548) to ($C557) hold (HL) to (HL + B * 8 - 1); Sprite Palette tables updated with frame advance as well as water tile graphics update paused
 ROMC:5D4F 3E 01            ld   a,01
 ROMC:5D51 E0 83            ld   (ff00+83),a
 ROMC:5D53 E0 4F            ld   (ff00+4F),a
 ROMC:5D55 11 35 64         ld   de,6435
 ROMC:5D58 21 00 83         ld   hl,8300
 ROMC:5D5B 01 C0 00         ld   bc,00C0
 ROMC:5D5E CD 59 3B         call 3B59           // (HL ~ HL+BC-1) = (DE ~ DE+BC-1)
 ROMC:5D61 FA AA C9         ld   a,(C9AA)
 ROMC:5D64 CD 94 5D         call 5D94           // DE holds pointer to HP change bubble sprite stats modification table pointers (A is HP increase amount)
 ROMC:5D67 3E 20            ld   a,20
 ROMC:5D69 0E 98            ld   c,98
 ROMC:5D6B 06 0C            ld   b,0C
 ROMC:5D6D CD E8 2D         call 2DE8           // A = number of already active sprites; $Dxx5~$DxxB prepared (B is ROM Block of Sprite, C is base Character Tile # / 2 with bit 7 determining VRAM Bank; and DE is pointer to sprite stats modification tables pointers)
 ROMC:5D70 EA A9 C9         ld   (C9A9),a
 ROMC:5D73 06 05            ld   b,05           // 6th or 7th sprite
 ROMC:5D75 FA A9 C9         ld   a,(C9A9)
 ROMC:5D78 CD C9 2E         call 2EC9           // WRA4($D003 + A * 16) has Palette bits modified according to B
 ROMC:5D7B C1               pop  bc
 ROMC:5D7C FA A9 C9         ld   a,(C9A9)
 ROMC:5D7F CD CC 5E         call 5ECC           // Defaults coordinates of popup bubble (A is used popup bubble)
 ROMC:5D82 CD BB 5D         call 5DBB           // Handles ($C9A9) sprite shaking for 17 frames
 ROMC:5D85 FA A9 C9         ld   a,(C9A9)
 ROMC:5D88 CD 1F 2E         call 2E1F           // Handles clear-up of sprite
 ROMC:5D8B CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMC:5D8E CD D2 04         call 04D2           // Next frame
 ROMC:5D91 D1               pop  de
 ROMC:5D92 C1               pop  bc
 ROMC:5D93 C9               ret                 // HP Change popup bubble sprite animation (A is HP increase amount)
 ROMC:5D94 CB 7F            bit  7,a
 ROMC:5D96 20 09            jr   nz,5DA1        // Branch for negative number half
 ROMC:5D98 3D               dec  a
 ROMC:5D99 21 AB 5D         ld   hl,5DAB
 ROMC:5D9C CD 93 3A         call 3A93           // HL = (2A + $5DAB)
 ROMC:5D9F 18 07            jr   5DA8
 ROMC:5DA1 2F               cpl  
 ROMC:5DA2 21 B3 5D         ld   hl,5DB3
 ROMC:5DA5 CD 93 3A         call 3A93           // HL = (2A + $5DB3)
 ROMC:5DA8 54               ld   d,h
 ROMC:5DA9 5D               ld   e,l
 ROMC:5DAA C9               ret                 // DE holds pointer to HP change bubble sprite stats modification table pointers (A is HP increase amount)

 ROMC:5DAB FD 63                                // $63FD
 ROMC:5DAD 02 64
 ROMC:5DAF 07 64
 ROMC:5DB1 0C 64

 ROMC:5DB3 11 64
 ROMC:5DB5 16 64
 ROMC:5DB7 1B 64
 ROMC:5DB9 20 64

 ROMC:5DBB FA A9 C9         ld   a,(C9A9)
 ROMC:5DBE 06 01            ld   b,01
 ROMC:5DC0 CD 9A 2E         call 2E9A           // A = WRA4($D001 + ($C9A9) * 16)
 ROMC:5DC3 D6 04            sub  a,04
 ROMC:5DC5 4F               ld   c,a
 ROMC:5DC6 FA A9 C9         ld   a,(C9A9)
 ROMC:5DC9 06 01            ld   b,01
 ROMC:5DCB CD 87 2E         call 2E87           // WRA4($D001 + ($C9A9) * 16) -= 4
 ROMC:5DCE AF               xor  a
 ROMC:5DCF EA AB C9         ld   (C9AB),a
 ROMC:5DD2 06 0B            ld   b,0B
 ROMC:5DD4 3E 01            ld   a,01           // Loop begins here
 ROMC:5DD6 CD 14 5C         call 5C14           // Force advances the game by 1 frame
 ROMC:5DD9 C5               push bc
 ROMC:5DDA FA A9 C9         ld   a,(C9A9)
 ROMC:5DDD 06 01            ld   b,01
 ROMC:5DDF CD 9A 2E         call 2E9A           // A = WRA4($D001 + ($C9A9) * 16)
 ROMC:5DE2 47               ld   b,a
 ROMC:5DE3 CD FF 5D         call 5DFF           // A holds Y decrease involved for given frame of shaking for involved sprite
 ROMC:5DE6 78               ld   a,b
 ROMC:5DE7 94               sub  h
 ROMC:5DE8 4F               ld   c,a
 ROMC:5DE9 FA A9 C9         ld   a,(C9A9)
 ROMC:5DEC 06 01            ld   b,01
 ROMC:5DEE CD 87 2E         call 2E87           // WRA4($D001 + ($C9A9) * 16) += -1, -1, -1, -1, 0, 1, 1, 0, -1, -1, -1
 ROMC:5DF1 C1               pop  bc
 ROMC:5DF2 21 AB C9         ld   hl,C9AB
 ROMC:5DF5 34               inc  (hl)
 ROMC:5DF6 05               dec  b
 ROMC:5DF7 20 DB            jr   nz,5DD4
 ROMC:5DF9 3E 06            ld   a,06
 ROMC:5DFB CD 14 5C         call 5C14           // Force advances the game by 6 frames
 ROMC:5DFE C9               ret                 // Handles ($C9A9) sprite shaking for 17 frames
 ROMC:5DFF FA AB C9         ld   a,(C9AB)
 ROMC:5E02 21 0B 5E         ld   hl,5E0B
 ROMC:5E05 CD BC 29         call 29BC           // HL += A
 ROMC:5E08 7E               ld   a,(hl)
 ROMC:5E09 67               ld   h,a
 ROMC:5E0A C9               ret                 // A holds Y decrease involved for given frame of shaking for involved sprite

 ROMC:5E0B 01 01 01         ld   bc,0101
 ROMC:5E0E 01 00 FF         ld   bc,FF00
 ROMC:5E11 FF               rst  38
 ROMC:5E12 00               nop  
 ROMC:5E13 01 01 01         ld   bc,0101

 ROMC:5E16 C5               push bc
 ROMC:5E17 D5               push de
 ROMC:5E18 C5               push bc
 ROMC:5E19 06 01            ld   b,01
 ROMC:5E1B 21 B3 66         ld   hl,66B3
 ROMC:5E1E CD 43 5B         call 5B43           // ($C548) to ($C547 + B * 8) hold (HL) to (HL + B * 8 - 1); Sprite Palette tables updated with frame advance as well as water tile graphics update paused
 ROMC:5E21 3E 01            ld   a,01
 ROMC:5E23 E0 83            ld   (ff00+83),a
 ROMC:5E25 E0 4F            ld   (ff00+4F),a
 ROMC:5E27 11 73 65         ld   de,6573
 ROMC:5E2A 21 00 83         ld   hl,8300
 ROMC:5E2D 01 40 01         ld   bc,0140
 ROMC:5E30 CD 59 3B         call 3B59           // VRA1($8300 ~ $843F) = ($6573 ~ $66B2)
 ROMC:5E33 3E 20            ld   a,20
 ROMC:5E35 0E 98            ld   c,98
 ROMC:5E37 06 0C            ld   b,0C
 ROMC:5E39 11 59 65         ld   de,6559        // "YIKES!"
 ROMC:5E3C CD E8 2D         call 2DE8           // A = number of already active sprites; $Dxx5~$DxxB prepared (B is ROM Block of Sprite, C is base Character Tile # / 2 with bit 7 determining VRAM Bank; and DE is pointer to sprite stats modification tables pointers)
 ROMC:5E3F EA A9 C9         ld   (C9A9),a
 ROMC:5E42 06 05            ld   b,05
 ROMC:5E44 FA A9 C9         ld   a,(C9A9)
 ROMC:5E47 CD C9 2E         call 2EC9           // WRA4($D003 + A * 16) has Palette bits modified according to B
 ROMC:5E4A C1               pop  bc
 ROMC:5E4B FA A9 C9         ld   a,(C9A9)
 ROMC:5E4E CD CC 5E         call 5ECC           // Defaults coordinates of popup bubble (A is used popup bubble)
 ROMC:5E51 CD 78 38         call 3878           // A = 1 if ($C105) is active, 0 otherwise
 ROMC:5E54 A7               and  a
 ROMC:5E55 20 FA            jr   nz,5E51        // Cycles until sound is finished
 ROMC:5E57 3E 07            ld   a,07
 ROMC:5E59 CD 44 38         call 3844
 ROMC:5E5C CD BB 5D         call 5DBB           // Handles ($C9A9) sprite shaking for 17 frames
 ROMC:5E5F CD FF 5B         call 5BFF           // Sprite ($C9A9) plays out up to its last portion
 ROMC:5E62 FA A9 C9         ld   a,(C9A9)
 ROMC:5E65 CD 1F 2E         call 2E1F           // Handles clear-up of sprite
 ROMC:5E68 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMC:5E6B CD D2 04         call 04D2           // Next frame
 ROMC:5E6E D1               pop  de
 ROMC:5E6F C1               pop  bc
 ROMC:5E70 C9               ret                 // "YIKES!" Sprite animation
 ROMC:5E71 C5               push bc
 ROMC:5E72 D5               push de
 ROMC:5E73 C5               push bc
 ROMC:5E74 06 01            ld   b,01
 ROMC:5E76 21 B3 66         ld   hl,66B3
 ROMC:5E79 CD 43 5B         call 5B43           // ($C548) to ($C54F) hold ($66B3) to ($66BA); Sprite Palette tables updated with frame advance as well as water tile graphics update paused
 ROMC:5E7C 3E 01            ld   a,01
 ROMC:5E7E E0 83            ld   (ff00+83),a
 ROMC:5E80 E0 4F            ld   (ff00+4F),a
 ROMC:5E82 11 73 65         ld   de,6573
 ROMC:5E85 21 00 83         ld   hl,8300
 ROMC:5E88 01 40 01         ld   bc,0140
 ROMC:5E8B CD 59 3B         call 3B59           // VRA1($8300 ~ $843F) = ($6573 ~ $66B2)
 ROMC:5E8E 3E 20            ld   a,20
 ROMC:5E90 0E 98            ld   c,98
 ROMC:5E92 06 0C            ld   b,0C
 ROMC:5E94 11 64 65         ld   de,6564        // "Level Up!"
 ROMC:5E97 CD E8 2D         call 2DE8           // A = number of already active sprites; $Dxx5~$DxxB prepared (B is ROM Block of Sprite, C is base Character Tile # / 2 with bit 7 determining VRAM Bank; and DE is pointer to sprite stats modification tables pointers)
 ROMC:5E9A EA A9 C9         ld   (C9A9),a
 ROMC:5E9D 06 05            ld   b,05
 ROMC:5E9F FA A9 C9         ld   a,(C9A9)
 ROMC:5EA2 CD C9 2E         call 2EC9           // WRA4($D003 + A * 16) has Palette bits modified according to B
 ROMC:5EA5 C1               pop  bc
 ROMC:5EA6 FA A9 C9         ld   a,(C9A9)
 ROMC:5EA9 CD CC 5E         call 5ECC           // Defaults coordinates of popup bubble (A is used popup bubble)
 ROMC:5EAC CD 78 38         call 3878           // A = 1 if ($C105) is active, 0 otherwise
 ROMC:5EAF A7               and  a
 ROMC:5EB0 20 FA            jr   nz,5EAC
 ROMC:5EB2 3E 07            ld   a,07
 ROMC:5EB4 CD 44 38         call 3844
 ROMC:5EB7 CD BB 5D         call 5DBB           // Handles ($C9A9) sprite shaking for 17 frames
 ROMC:5EBA CD FF 5B         call 5BFF           // Sprite ($C9A9) plays out up to its last portion
 ROMC:5EBD FA A9 C9         ld   a,(C9A9)
 ROMC:5EC0 CD 1F 2E         call 2E1F           // Handles clear-up of sprite
 ROMC:5EC3 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMC:5EC6 CD D2 04         call 04D2           // Next frame
 ROMC:5EC9 D1               pop  de
 ROMC:5ECA C1               pop  bc
 ROMC:5ECB C9               ret                 // "Level Up!" Sprite animation
 ROMC:5ECC C5               push bc
 ROMC:5ECD D5               push de
 ROMC:5ECE 67               ld   h,a
 ROMC:5ECF FA 8B C9         ld   a,(C98B)
 ROMC:5ED2 57               ld   d,a
 ROMC:5ED3 78               ld   a,b
 ROMC:5ED4 92               sub  d
 ROMC:5ED5 38 2D            jr   c,5F04         // End immediately if B is left of view
 ROMC:5ED7 57               ld   d,a
 ROMC:5ED8 FA 8C C9         ld   a,(C98C)
 ROMC:5EDB 5F               ld   e,a
 ROMC:5EDC 79               ld   a,c
 ROMC:5EDD 93               sub  e
 ROMC:5EDE 38 24            jr   c,5F04         // End immediately if C is above view
 ROMC:5EE0 5F               ld   e,a
 ROMC:5EE1 7A               ld   a,d
 ROMC:5EE2 CB 37            swap a
 ROMC:5EE4 C6 10            add  a,10
 ROMC:5EE6 57               ld   d,a            // D = X difference * 16 + 16
 ROMC:5EE7 7B               ld   a,e
 ROMC:5EE8 CB 37            swap a
 ROMC:5EEA C6 18            add  a,18
 ROMC:5EEC 5F               ld   e,a            // E = Y difference * 16 + 24
 ROMC:5EED 79               ld   a,c
 ROMC:5EEE E6 01            and  a,01
 ROMC:5EF0 28 04            jr   z,5EF6
 ROMC:5EF2 7A               ld   a,d
 ROMC:5EF3 C6 08            add  a,08
 ROMC:5EF5 57               ld   d,a            // Accounts for even numbered rows
 ROMC:5EF6 79               ld   a,c
 ROMC:5EF7 A7               and  a
 ROMC:5EF8 20 04            jr   nz,5EFE
 ROMC:5EFA 7B               ld   a,e
 ROMC:5EFB C6 08            add  a,08
 ROMC:5EFD 5F               ld   e,a            // Accounts for top row
 ROMC:5EFE 42               ld   b,d
 ROMC:5EFF 4B               ld   c,e
 ROMC:5F00 7C               ld   a,h
 ROMC:5F01 CD AE 2E         call 2EAE           // WRA4($D001 + A * 16) = C; WRA4($D002 + A * 16) = B
 ROMC:5F04 D1               pop  de
 ROMC:5F05 C1               pop  bc
 ROMC:5F06 C9               ret                 // Defaults coordinates of popup bubble (A is used popup bubble)

-
 ROMC:5F07 04
 ROMC:5F08 00 00 00 60
 ROMC:5F0C 00 F8 00 40
 ROMC:5F10 F8 00 00 20
 ROMC:5F14 F8 F8 00 00

 ROMC:5F18 04
 ROMC:5F19 00 00 01 60
 ROMC:5F1D 00 F8 01 40
 ROMC:5F21 F8 00 01 20
 ROMC:5F25 F8 F8 01 00

 ROMC:5F29 04
 ROMC:5F2A 00 00 02 60
 ROMC:5F2E 00 F8 02 40
 ROMC:5F32 F8 00 02 20
 ROMC:5F36 F8 F8 02 00
-
 ROMC:5F3A 04
 ROMC:5F3B 00 00 03 00
 ROMC:5F3F 00 F8 03 00
 ROMC:5F43 F8 00 03 00
 ROMC:5F47 F8 F8 03 00
-
 ROMC:5F4B 04
 ROMC:5F4C 00 00 04 60
 ROMC:5F50 00 F8 04 40
 ROMC:5F54 F8 00 04 20
 ROMC:5F58 F8 F8 04 00

 ROMC:5F5C 04
 ROMC:5F5D 00 00 05 60
 ROMC:5F61 00 F8 05 40
 ROMC:5F65 F8 00 05 20
 ROMC:5F69 F8 F8 05 00

 ROMC:5F6D 01
 ROMC:5F6E FA FA 05 00
-
Factory gate:
 ROMC:5F72 04
 ROMC:5F73 00 00 07 20
 ROMC:5F77 F8 00 06 20
 ROMC:5F7B 00 F8 07 00
 ROMC:5F7F F8 F8 06 00

 ROMC:5F83 04
 ROMC:5F84 00 00 09 20
 ROMC:5F88 F8 00 08 20
 ROMC:5F8C 00 F8 09 00
 ROMC:5F90 F8 F8 08 00

 ROMC:5F94 04
 ROMC:5F95 00 00 0B 20
 ROMC:5F99 F8 00 0A 20
 ROMC:5F9D 00 F8 0B 00
 ROMC:5FA1 F8 F8 0A 00

 ROMC:5FA5 04
 ROMC:5FA6 00 00 0B 20
 ROMC:5FAA 00 F8 0B 00
 ROMC:5FAE F8 00 0C 20
 ROMC:5FB2 F8 F8 0C 00

 ROMC:5FB6 04
 ROMC:5FB7 00 00 0B 20
 ROMC:5FBB 00 F8 0B 00
 ROMC:5FBF F8 00 0B 60
 ROMC:5FC3 F8 F8 0B 40
-
 ROMC:5FC7 07 5F 01
 ROMC:5FCA 18 5F 01
 ROMC:5FCD 29 5F 01
 ROMC:5FD0 3A 5F 01
 ROMC:5FD3 3A 5F FF 00 00                       // Tile Iris Out

 ROMC:5FD8 6D 5F 01
 ROMC:5FDB 5C 5F 01
 ROMC:5FDE 4B 5F 01
 ROMC:5FE1 3A 5F 01
 ROMC:5FE4 3A 5F FF 00 00                       // Tile Pop Out

 ROMC:5FE9 B6 5F 03
 ROMC:5FEC A5 5F 02
 ROMC:5FEF 94 5F 02
 ROMC:5FF2 83 5F 02
 ROMC:5FF5 72 5F 03
 ROMC:5FF8 72 5F FF 00 00                       // Factory Gate Close

 ROMC:5FFD 3A 5F 01
 ROMC:6000 4B 5F 01
 ROMC:6003 5C 5F 01
 ROMC:6006 6D 5F 01
 ROMC:6009 6D 5F FF 00 00                       // Tile Pop In

 ROMC:600E 3A 5F 01
 ROMC:6011 29 5F 01
 ROMC:6014 18 5F 01
 ROMC:6017 07 5F 01
 ROMC:601A 07 5F FF 00 00                       // Tile Iris In

 ROMC:601F 72 5F 03
 ROMC:6022 83 5F 02
 ROMC:6025 94 5F 02
 ROMC:6028 A5 5F 02
 ROMC:602B B6 5F 03
 ROMC:602E B6 5F FF 00 00                       // Factory Gate Open

 ROMC:6033 C7 5F
 ROMC:6035 D8 5F
 ROMC:6037 E9 5F
 ROMC:6039 FD 5F
 ROMC:603B 0E 60
 ROMC:603D 1F 60

 ROMC:603F FF 00 FF 00 C0 00 C0 00 C0 00 C0 00 C0 00 C0 00
 ROMC:604F FF 00 FF 00 FF 00 FF 00 F0 00 F0 00 F0 00 F0 00
 ROMC:605F FF 00 FF 00 FF 00 FF 00 FF 00 FF 00 FC 00 FC 00
 ROMC:606F FF 00 FF 00 FF 00 FF 00 FF 00 FF 00 FF 00 FF 00
 ROMC:607F 00 00 00 00 3F 00 3F 00 3F 00 3F 00 3F 00 3F 00
 ROMC:608F 00 00 00 00 00 00 00 00 0F 00 0F 00 0F 00 0F 00

 ROMC:609F FF 00 C0 7F FF 00 C0 7F FF 00 C0 7F FF 00 C0 7F
 ROMC:60AF FF 00 C0 7F FF 00 C0 7F FF 00 C0 7F FF 00 FF 00
 ROMC:60BF FF 00 FF 00 C0 7F FF 00 C0 7F FF 00 C0 7F FF 00
 ROMC:60CF C0 7F FF 00 C0 7F FF 00 80 00 80 00 80 00 FF 00
 ROMC:60DF FF 00 C0 7F FF 00 C0 7F FF 00 C0 7F FF 00 80 00
 ROMC:60EF 80 00 80 00 80 00 80 00 80 00 80 00 80 00 FF 00
 ROMC:60FF FF 00 FF 00 C0 7F FF 00 80 00 80 00 80 00 80 00

 ROMC:610F D2 3E 00 00 94 52 39 67

 ROMC:6117 04
 ROMC:6118 00 00 03 00
 ROMC:611C 00 F8 02 00
 ROMC:6120 F8 00 01 00
 ROMC:6124 F8 F8 00 00

 ROMC:6128 17 61 FF 00 00

 ROMC:612D 00 00 01 00 03 01 03 01 07 03 3E 07 7C 3F 7E 3F
 ROMC:613D 00 00 80 00 C0 80 C0 80 E0 C0 7C E0 7E FC 7E FC
 ROMC:614D 3E 1F 1E 0F 1E 0F 3F 1F 3F 1E 3E 18 18 00 00 00
 ROMC:615D 7C F8 78 F0 78 F0 FC F8 FC 78 7C 18 18 00 00 00          // Star with 1

 ROMC:616D 00 00 01 00 03 01 03 01 07 03 3E 07 7D 3F 7F 3F
 ROMC:617D 00 00 80 00 C0 80 C0 80 E0 C0 3C E0 9E FC 3E FC
 ROMC:618D 3E 1F 1C 0F 1C 0F 3F 1F 3F 1E 3E 18 18 00 00 00
 ROMC:619D 7C F8 F8 F0 18 F0 FC F8 FC 78 7C 18 18 00 00 00          // Star with 2

 ROMC:61AD 00 00 01 00 03 01 03 01 07 03 3E 07 7D 3F 7F 3F
 ROMC:61BD 00 00 80 00 C0 80 C0 80 E0 C0 3C E0 9E FC 3E FC
 ROMC:61CD 3F 1F 1D 0F 1E 0F 3F 1F 3F 1E 3E 18 18 00 00 00
 ROMC:61DD 9C F8 98 F0 38 F0 FC F8 FC 78 7C 18 18 00 00 00          // Star with 3

 ROMC:61ED 00 00 01 00 03 01 03 01 07 03 3F 07 7E 3F 7D 3F
 ROMC:61FD 00 00 80 00 C0 80 C0 80 E0 C0 3C E0 3E FC 3E FC
 ROMC:620D 3B 1F 18 0F 1F 0F 3F 1F 3F 1E 3E 18 18 00 00 00
 ROMC:621D 3C F8 18 F0 38 F0 FC F8 FC 78 7C 18 18 00 00 00          // Star with 4

 ROMC:622D 00 00 01 00 03 01 03 01 07 03 3C 07 7C 3F 7C 3F
 ROMC:623D 00 00 80 00 C0 80 C0 80 E0 C0 3C E0 FE FC 3E FC
 ROMC:624D 3F 1F 1F 0F 1C 0F 3F 1F 3F 1E 3E 18 18 00 00 00
 ROMC:625D 9C F8 98 F0 38 F0 FC F8 FC 78 7C 18 18 00 00 00          // Star with 5

 ROMC:626D 00 00 01 00 03 01 03 01 07 03 3C 07 79 3F 78 3F
 ROMC:627D 00 00 80 00 C0 80 C0 80 E0 C0 3C E0 FE FC 3E FC
 ROMC:628D 39 1F 19 0F 1C 0F 3F 1F 3F 1E 3E 18 18 00 00 00
 ROMC:629D 9C F8 98 F0 38 F0 FC F8 FC 78 7C 18 18 00 00 00          // Star with 6
 
 ROMC:62AD 00 00 01 00 03 01 03 01 07 03 3C 07 7F 3F 7E 3F
 ROMC:62BD 00 00 80 00 C0 80 C0 80 E0 C0 3C E0 3E FC 7E FC
 ROMC:62CD 3E 1F 1E 0F 1E 0F 3F 1F 3F 1E 3E 18 18 00 00 00
 ROMC:62DD 7C F8 78 F0 78 F0 FC F8 FC 78 7C 18 18 00 00 00          // Star with 7

 ROMC:62ED 00 00 01 00 03 01 03 01 07 03 3C 07 79 3F 7C 3F
 ROMC:62FD 00 00 80 00 C0 80 C0 80 E0 C0 3C E0 9E FC 3E FC
 ROMC:630D 39 1F 19 0F 1C 0F 3F 1F 3F 1E 3E 18 18 00 00 00
 ROMC:631D 9C F8 98 F0 38 F0 FC F8 FC 78 7C 18 18 00 00 00          // Star with 8

 ROMC:632D 00 00 01 00 03 01 03 01 07 03 3C 07 79 3F 79 3F
 ROMC:633D 00 00 80 00 C0 80 C0 80 E0 C0 3C E0 9E FC 9E FC
 ROMC:634D 3C 1F 1F 0F 1C 0F 3F 1F 3F 1E 3E 18 18 00 00 00
 ROMC:635D 1C F8 98 F0 38 F0 FC F8 FC 78 7C 18 18 00 00 00          // Star with 9


 ROMC:636D D2 3E 46 00 20 00 FF 03

 ROMC:6375 04 00 00 03 00 00 F8 02 00 F8 00 01 00 F8 F8 00 00
 ROMC:6386 04 00 00 07 00 00 F8 02 00 F8 00 05 00 F8 F8 00 00
 ROMC:6397 04 00 00 09 00 00 F8 02 00 F8 00 08 00 F8 F8 00 00
 ROMC:63A8 04 00 00 0B 00 00 F8 02 00 F8 00 0A 00 F8 F8 00 00

 ROMC:63B9 04 00 00 03 01 00 F8 06 01 F8 00 01 01 F8 F8 04 01
 ROMC:63CA 04 00 00 07 01 00 F8 06 01 F8 00 05 01 F8 F8 04 01
 ROMC:63DB 04 00 00 09 01 00 F8 06 01 F8 00 08 01 F8 F8 04 01
 ROMC:63EC 04 00 00 0B 01 00 F8 06 01 F8 00 0A 01 F8 F8 04 01

 ROMC:63FD 75 63 FF 00 00
 ROMC:6402 86 63 FF 00 00
 ROMC:6407 97 63 FF 00 00
 ROMC:640C A8 63 FF 00 00

 ROMC:6411 B9 63 FF 00 00
 ROMC:6416 CA 63 FF 00 00
 ROMC:641B DB 63 FF 00 00
 ROMC:6420 EC 63 FF 00 00

 ROMC:6425 FD 63
 ROMC:6427 02 64
 ROMC:6429 07 64
 ROMC:642B 0C 64
 ROMC:642D 11 64
 ROMC:642F 16 64
 ROMC:6431 1B 64
 ROMC:6433 20 64

 ROMC:6435 0F 00 30 0F 40 3F 80 7F 80 7F 88 7F 88 7F BE 7F
 ROMC:6445 F0 00 0C F0 02 FC 01 FE 31 FE 71 FE 31 FE 31 FE          // +
 ROMC:6455 88 7F 88 7F 40 3F 30 0F 0F 00 02 01 03 00 00 00
 ROMC:6465 31 FE 31 FE 02 FC 0C F0 30 C0 40 80 80 00 00 00          // 1
 
 ROMC:6475 0F 00 30 0F 40 3F 80 7F 80 7F 80 7F 80 7F BE 7F
 ROMC:6485 F0 00 0C F0 02 FC 01 FE 39 FE 4D FE 19 FE 31 FE          // -
 ROMC:6495 80 7F 80 7F 40 3F 30 0F 0F 00 02 01 03 00 00 00
 ROMC:64A5 61 FE 7D FE 02 FC 0C F0 30 C0 40 80 80 00 00 00          // 2

 ROMC:64B5 F0 00 0C F0 02 FC 01 FE 39 FE 4D FE 19 FE 0D FE
 ROMC:64C5 4D FE 39 FE 02 FC 0C F0 30 C0 40 80 80 00 00 00          // 3

 ROMC:64D5 F0 00 0C F0 02 FC 01 FE 19 FE 39 FE 59 FE 99 FE
 ROMC:64E5 FD FE 19 FE 02 FC 0C F0 30 C0 40 80 80 00 00 00          // 4

 ROMC:64F5 CD 36 00 00 79 7F C0 54
 ROMC:64FD 10 3B 00 00 DF 62 0F 00


 ROMC:6505 04
 ROMC:6506 00 00 03 00
 ROMC:650A 00 F8 02 00
 ROMC:650E F8 00 01 00
 ROMC:6512 F8 F8 00 00

 ROMC:6516 04
 ROMC:6517 00 00 07 00
 ROMC:651B 00 F8 06 00
 ROMC:651F F8 00 05 00
 ROMC:6523 F8 F8 04 00

 ROMC:6527 04
 ROMC:6528 00 00 0B 00
 ROMC:652C 00 F8 0A 00
 ROMC:6530 F8 00 09 00
 ROMC:6534 F8 F8 08 00

 ROMC:6538 08
 ROMC:6539 FF 08 13 00
 ROMC:653D FF 00 12 00
 ROMC:6541 FF F8 11 00
 ROMC:6545 FF F0 10 00
 ROMC:6549 F7 08 0F 00
 ROMC:654D F7 00 0E 00
 ROMC:6551 F7 F8 0D 00
 ROMC:6555 F7 F0 0C 00

 ROMC:6559 05 65 05
 ROMC:655C 16 65 0F
 ROMC:655F 16 65 FF 00 00
 ROMC:6564 27 65 05
 ROMC:6567 38 65 0F
 ROMC:656A 38 65 FF 00 00

 ROMC:656F 59 65
 ROMC:6571 64 65

 ROMC:6573 00 00 00 00 00 00 06 00 05 02 1C 03 10 0F 08 07
 ROMC:6583 00 00 00 00 30 00 50 20 90 60 1C E0 04 F8 08 F0
 ROMC:6593 08 07 10 0F 20 1F 3C 03 05 02 02 00 00 00 00 00
 ROMC:65A3 10 E0 08 F0 04 F8 9C 60 50 20 30 00 00 00 00 00          // Explosion

 ROMC:65B3 00 00 0C 00 0A 04 09 06 79 06 43 3D 23 1D 13 0D
 ROMC:65C3 18 00 28 10 48 30 88 70 CF 30 E1 DE E2 DC E4 D8
 ROMC:65D3 11 0E 21 1E 41 3E 81 7E F8 07 09 06 0A 04 0C 00
 ROMC:65E3 C8 B0 C4 38 C2 BC C1 3E 8F 70 48 30 28 10 18 00          // "YIKES!"

 ROMC:65F3 00 00 00 00 00 00 00 00 00 00 00 00 0F 00 10 0F
 ROMC:6603 00 00 00 00 00 00 00 00 00 00 00 00 F8 00 04 F8
 ROMC:6613 20 1F 20 1F 20 1F 21 1E 23 1C 10 0F 0F 00 00 00
 ROMC:6623 C2 3C E2 1C A2 5C 82 7C 02 FC 04 F8 78 80 80 00          // Music Note

 ROMC:6633 07 00 18 07 20 1F 40 3F 4C 33 4C 33 4C 33 4C 33
 ROMC:6643 FF 00 00 FF 00 FF 00 FF 01 FE D9 26 D9 26 71 8E
 ROMC:6653 FF 00 00 FF 00 FF 00 FF B7 48 B6 49 B6 49 B7 48
 ROMC:6663 F0 00 0C F0 02 FC 01 FE 99 66 D9 26 D9 26 81 7E
 ROMC:6673 4F 30 40 3F 20 1F 18 07 07 00 00 00 00 00 00 00
 ROMC:6683 20 DF 00 FF 00 FF 00 FF FE 01 01 00 01 00 00 00
 ROMC:6693 E6 19 00 FF 00 FF 00 FF 3F C0 40 80 40 80 80 00
 ROMC:66A3 19 E6 01 FE 02 FC 0C F0 F0 00 00 00 00 00 00 00          // Level Up

 ROMC:66B3 D2 3E 00 00 FF 7F 3E 16

 ROMC:66BB C5               push bc
 ROMC:66BC D5               push de
 ROMC:66BD 47               ld   b,a
 ROMC:66BE FA 85 C6         ld   a,(C685)
 ROMC:66C1 CB 57            bit  2,a            // Action Animation
 ROMC:66C3 28 36            jr   z,66FB         // End immediately if Action Animation is off
 ROMC:66C5 78               ld   a,b
 ROMC:66C6 FE 04            cp   a,04
 ROMC:66C8 28 1E            jr   z,66E8         // Jumps on Attack, Linkup, or Wait (none have their own Action Animation)
 ROMC:66CA FA DE C9         ld   a,(C9DE)       // Moving off of a transport?
 ROMC:66CD A7               and  a
 ROMC:66CE 20 02            jr   nz,66D2
 ROMC:66D0 18 1E            jr   66F0           // Branch if not moving off of a transport
 ROMC:66D2 3E 04            ld   a,04           // Process: A = 6 for Aircraft Carrier, 5 for other; ($C4A1) = Unloading unit's type; ($C4A2) = Carrying unit's type (no side)
 ROMC:66D4 CD FE 66         call 66FE           // A is intended process, ($C4A0) bytes set
 ROMC:66D7 CD 11 67         call 6711           // Iris out on cursor coordinates and then play intended portion determined by A
 ROMC:66DA 78               ld   a,b
 ROMC:66DB CD FE 66         call 66FE           // A is intended process, ($C4A0) bytes set
 ROMC:66DE EF 1A 41 45                          // Plays out intended process
 ROMC:66E2 EF 0B E6 69                          // Reestablishes map graphics
 ROMC:66E6 18 13            jr   66FB
 ROMC:66E8 FA DE C9         ld   a,(C9DE)       // Moving off of a transport? (meets back here for anything that doesn't have its own Action Animation)
 ROMC:66EB A7               and  a
 ROMC:66EC 28 0D            jr   z,66FB         // End immediately if not moving off of a transport
 ROMC:66EE 06 04            ld   b,04           // Process: A = 6 for Aircraft Carrier, 5 for other; ($C4A1) = Unloading unit's type; ($C4A2) = Carrying unit's type (no side)
 ROMC:66F0 78               ld   a,b
 ROMC:66F1 CD FE 66         call 66FE           // A is intended process, ($C4A0) bytes set
 ROMC:66F4 CD 11 67         call 6711           // Iris out on cursor coordinates and then play intended portion determined by A
 ROMC:66F7 EF 0B E6 69                          // Reestablishes map graphics
 ROMC:66FB D1               pop  de
 ROMC:66FC C1               pop  bc
 ROMC:66FD C9               ret                 // Action Animation cutscenes play out where applicable (A is 4 for Fire/Linkup/Wait, or the number of the given process otherwise)
 ROMC:66FE C5               push bc
 ROMC:66FF F5               push af
 ROMC:6700 FA 33 C6         ld   a,(C633)
 ROMC:6703 E6 01            and  a,01
 ROMC:6705 EA A0 C4         ld   (C4A0),a       // ($C4A0) holds active player
 ROMC:6708 F1               pop  af
 ROMC:6709 21 33 67         ld   hl,6733
 ROMC:670C CD 8F 3A         call 3A8F           // CALL [HL + 2A]
 ROMC:670F C1               pop  bc
 ROMC:6710 C9               ret                 // A is intended process, ($C4A0) bytes set
 ROMC:6711 C5               push bc
 ROMC:6712 F5               push af
 ROMC:6713 EF 0B 00 47                          // set 0,WRA4($D000 + ($C98D) * 16)
 ROMC:6717 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMC:671A FA 91 C9         ld   a,(C991)
 ROMC:671D 47               ld   b,a
 ROMC:671E FA 92 C9         ld   a,(C992)
 ROMC:6721 4F               ld   c,a
 ROMC:6722 EF 0C 9B 45                          // Iris out on coordinate BC's upper-left quarter
 ROMC:6726 CD D2 04         call 04D2           // Next frame
 ROMC:6729 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMC:672C F1               pop  af
 ROMC:672D EF 1A 41 45                          // Plays out intended process
 ROMC:6731 C1               pop  bc
 ROMC:6732 C9               ret                 // Iris out on cursor coordinates and then play intended portion determined by A

 ROMC:6733 47 67                                // A = inverse of winning property on ($C991); ($C4A1) holds backdrop of terrain; ($C4A2) holds ownership
 ROMC:6735 9E 67                                // A = 2; ($C4A1) holds backdrop of terrain; ($C4A2) holds ownership
 ROMC:6737 A4 67                                // ($C4A1) = Unit Type of first supplier, ($C4A2) = Unit Type of given unit (no side for both), A = 3
 ROMC:6739 C3 67                                // ($C4A1) = Unit Type of given unit, ($C4A2) = Unit Type of Loading unit for not Aircraft Carrier (no side for both), A = 7 for Aircraft Carrier Loading, 4 for non-Aircraft Carrier Loading
 ROMC:673B F4 67                                // A = 6 for Aircraft Carrier, 5 for other; ($C4A1) = Unloading unit's type; ($C4A2) = Carrying unit's type (no side)
 ROMC:673D 38 68                                // A = 2, ($C4A1) = 6 (Build Bridge)
 ROMC:673F 40 68                                // A = 2, ($C4A1) = 5, ($C4A2) = ($C4A0) (Build Simple Airport)
 ROMC:6741 4E 68                                // A = 2, ($C4A1) = 9, ($C4A2) = ($C4A0) (Build Plains)
 ROMC:6743 64 68                                // A = 8
 ROMC:6745 5C 68                                // A = 2, ($C4A1) = 7 (Pave)

 ROMC:6747 C5               push bc
 ROMC:6748 D5               push de
 ROMC:6749 FA 91 C9         ld   a,(C991)
 ROMC:674C 47               ld   b,a
 ROMC:674D FA 92 C9         ld   a,(C992)
 ROMC:6750 4F               ld   c,a
 ROMC:6751 EF 0B 70 47                          // A = Terrain Type
 ROMC:6755 5F               ld   e,a            // E = Terrain Type
 ROMC:6756 EF 0B 07 47                          // A = Terrain base ID
 ROMC:675A 21 8F 67         ld   hl,678F
 ROMC:675D CD BC 29         call 29BC           // HL += A
 ROMC:6760 7E               ld   a,(hl)
 ROMC:6761 EA A1 C4         ld   (C4A1),a
 ROMC:6764 7B               ld   a,e            // A = Terrain Type
 ROMC:6765 FE 17            cp   a,17
 ROMC:6767 30 0B            jr   nc,6774        // Jump if non-owned
 ROMC:6769 FE 0C            cp   a,0C
 ROMC:676B 30 03            jr   nc,6770        // Jump if owned by White Moon
 ROMC:676D AF               xor  a
 ROMC:676E 18 08            jr   6778
 ROMC:6770 3E 01            ld   a,01
 ROMC:6772 18 04            jr   6778
 ROMC:6774 3E 02            ld   a,02
 ROMC:6776 18 00            jr   6778
 ROMC:6778 EA A2 C4         ld   (C4A2),a       // ($C4A2) = Ownership
 ROMC:677B EF 0C 83 58                          // A = Property's Strength for matching property, -1 if there is none
 ROMC:677F 57               ld   d,a            // D = Property's Strength for matching property, -1 if there is none
 ROMC:6780 FA E1 CC         ld   a,(CCE1)
 ROMC:6783 BA               cp   d              // Comparison from unit's HP
 ROMC:6784 30 04            jr   nc,678A
 ROMC:6786 3E 01            ld   a,01
 ROMC:6788 18 02            jr   678C
 ROMC:678A 3E 00            ld   a,00
 ROMC:678C D1               pop  de
 ROMC:678D C1               pop  bc
 ROMC:678E C9               ret                 // A = inverse of winning property on ($C991); ($C4A1) holds backdrop of terrain; ($C4A2) holds ownership

 ROMC:678F FF 00                                // Capital
 ROMC:6791 01 01                                // City
 ROMC:6793 02 02                                // Factory
 ROMC:6795 04 04 05                             // Airport
 ROMC:6798 03 03                                // Harbor
 ROMC:679A 08                                   // Communication Tower
 ROMC:679B FF 07         ld   (07FF),sp
 ROMC:679D 06

 ROMC:679E CD 47 67         call 6747           // A = inverse of winning property on ($C991); ($C4A1) holds backdrop of terrain; ($C4A2) holds ownership
 ROMC:67A1 3E 02            ld   a,02
 ROMC:67A3 C9               ret  
 ROMC:67A4 FA 3B CD         ld   a,(CD3B)
 ROMC:67A7 0E 00            ld   c,00
 ROMC:67A9 EF 12 66 40                          
 ROMC:67AD CB 3F            srl  a
 ROMC:67AF EA A1 C4         ld   (C4A1),a       // ($C4A1) = Unit Type of first supplier (no side)
 ROMC:67B2 FA D8 C9         ld   a,(C9D8)
 ROMC:67B5 0E 00            ld   c,00
 ROMC:67B7 EF 12 66 40                          
 ROMC:67BB CB 3F            srl  a
 ROMC:67BD EA A2 C4         ld   (C4A2),a       // ($C4A2) = Unit Type (no side)
 ROMC:67C0 3E 03            ld   a,03
 ROMC:67C2 C9               ret                 // ($C4A1) = Unit Type of first supplier, ($C4A2) = Unit Type of given unit (no side for both), A = 3
 ROMC:67C3 FA D8 C9         ld   a,(C9D8)
 ROMC:67C6 0E 00            ld   c,00
 ROMC:67C8 EF 12 66 40                          
 ROMC:67CC CB 3F            srl  a
 ROMC:67CE EA A1 C4         ld   (C4A1),a       // ($C4A1) = Unit Type (no side)
 ROMC:67D1 FA D8 C9         ld   a,(C9D8)
 ROMC:67D4 0E 06            ld   c,06
 ROMC:67D6 EF 12 66 40                          // A = Loading Unit's #
 ROMC:67DA 0E 00            ld   c,00
 ROMC:67DC EF 12 66 40                          
 ROMC:67E0 CB 3F            srl  a              // A = Unit Type
 ROMC:67E2 FE 2E            cp   a,2E
 ROMC:67E4 28 0B            jr   z,67F1
 ROMC:67E6 FE 2F            cp   a,2F
 ROMC:67E8 28 07            jr   z,67F1         // End with A = 7 if Loading unit is Aircraft Carrier
 ROMC:67EA EA A2 C4         ld   (C4A2),a
 ROMC:67ED 3E 04            ld   a,04
 ROMC:67EF 18 02            jr   67F3
 ROMC:67F1 3E 07            ld   a,07
 ROMC:67F3 C9               ret                 // ($C4A1) = Unit Type of given unit, ($C4A2) = Unit Type of Loading unit for not Aircraft Carrier (no side for both), A = 7 for Aircraft Carrier Loading, 4 for non-Aircraft Carrier Loading
 ROMC:67F4 FA B0 C9         ld   a,(C9B0)
 ROMC:67F7 EA A1 C4         ld   (C4A1),a
 ROMC:67FA FA B1 C9         ld   a,(C9B1)
 ROMC:67FD EA A2 C4         ld   (C4A2),a
 ROMC:6800 FA AF C9         ld   a,(C9AF)
 ROMC:6803 C9               ret                 // A = 6 for Aircraft Carrier, 5 for other; ($C4A1) = Unloading unit's type; ($C4A2) = Carrying unit's type (no side)
 ROMC:6804 FA D8 C9         ld   a,(C9D8)
 ROMC:6807 0E 00            ld   c,00
 ROMC:6809 EF 12 66 40                          
 ROMC:680D CB 3F            srl  a
 ROMC:680F EA B0 C9         ld   (C9B0),a       // ($C9B0) = Unit Type (no side)
 ROMC:6812 FA D8 C9         ld   a,(C9D8)
 ROMC:6815 0E 06            ld   c,06
 ROMC:6817 EF 12 66 40                          
 ROMC:681B 0E 00            ld   c,00
 ROMC:681D EF 12 66 40                          
 ROMC:6821 CB 3F            srl  a              // A = Loading Unit's Unit Type (no side)
 ROMC:6823 FE 2E            cp   a,2E
 ROMC:6825 28 0B            jr   z,6832
 ROMC:6827 FE 2F            cp   a,2F
 ROMC:6829 28 07            jr   z,6832         // End with A = 6 and ($C9AF) = 6 if Loading unit is Aircraft Carrier
 ROMC:682B EA B1 C9         ld   (C9B1),a       // ($C9B1) = Loading Unit's Unit Type (no side)
 ROMC:682E 3E 05            ld   a,05
 ROMC:6830 18 02            jr   6834
 ROMC:6832 3E 06            ld   a,06
 ROMC:6834 EA AF C9         ld   (C9AF),a
 ROMC:6837 C9               ret                 // ($C9B0) = Unit Type of given unit, ($C9B1) = Unit Type of Loading unit for not Aircraft Carrier (no side for both), A = 6 for Aircraft Carrier Loading, 5 for non-Aircraft Carrier Loading, ($C9AF) = 6 if Loading unit is Aircraft Carrier
 ROMC:6838 3E 06            ld   a,06
 ROMC:683A EA A1 C4         ld   (C4A1),a
 ROMC:683D 3E 02            ld   a,02
 ROMC:683F C9               ret                 // A = 2, ($C4A1) = 6
 ROMC:6840 3E 05            ld   a,05
 ROMC:6842 EA A1 C4         ld   (C4A1),a
 ROMC:6845 FA A0 C4         ld   a,(C4A0)
 ROMC:6848 EA A2 C4         ld   (C4A2),a
 ROMC:684B 3E 02            ld   a,02
 ROMC:684D C9               ret                 // A = 2, ($C4A1) = 5, ($C4A2) = ($C4A0)
 ROMC:684E 3E 09            ld   a,09
 ROMC:6850 EA A1 C4         ld   (C4A1),a
 ROMC:6853 FA A0 C4         ld   a,(C4A0)
 ROMC:6856 EA A2 C4         ld   (C4A2),a
 ROMC:6859 3E 02            ld   a,02
 ROMC:685B C9               ret                 // A = 2, ($C4A1) = 9, ($C4A2) = ($C4A0)
 ROMC:685C 3E 07            ld   a,07
 ROMC:685E EA A1 C4         ld   (C4A1),a
 ROMC:6861 3E 02            ld   a,02
 ROMC:6863 C9               ret                 // A = 2, ($C4A1) = 7
 ROMC:6864 3E 08            ld   a,08
 ROMC:6866 C9               ret                 // A = 8
 ROMC:6867 C5               push bc
 ROMC:6868 D5               push de
 ROMC:6869 FA 2F C6         ld   a,(C62F)
 ROMC:686C FE 01            cp   a,01           // Campaign?
 ROMC:686E C2 03 69         jp   nz,6903        // End if Mode is not Campaign
 ROMC:6871 AF               xor  a
 ROMC:6872 EA B2 C9         ld   (C9B2),a
 ROMC:6875 3E FF            ld   a,FF
 ROMC:6877 EA B3 C9         ld   (C9B3),a
 ROMC:687A 1E 00            ld   e,00
 ROMC:687C 21 B1 C7         ld   hl,C7B1        // Loop begins here
 ROMC:687F 7B               ld   a,e
 ROMC:6880 CD C7 3A         call 3AC7
 ROMC:6883 20 27            jr   nz,68AC        // End cycle if flag is on
 ROMC:6885 7B               ld   a,e
 ROMC:6886 21 06 69         ld   hl,6906
 ROMC:6889 CD 8F 3A         call 3A8F           // CALL [HL + 2A]
 ROMC:688C A7               and  a
 ROMC:688D 20 1D            jr   nz,68AC        // End cycle if concept doesn't need to be talked about
 ROMC:688F 21 B1 C7         ld   hl,C7B1        // Already talked about concepts
 ROMC:6892 7B               ld   a,e
 ROMC:6893 CD D1 3A         call 3AD1           // (HL + A/8) = (HL + A/8) OR 2^A%8
 ROMC:6896 21 B2 C9         ld   hl,C9B2        // Concepts to consider talking about
 ROMC:6899 7B               ld   a,e
 ROMC:689A CD D1 3A         call 3AD1           // (HL + A/8) = (HL + A/8) OR 2^A%8
 ROMC:689D 7B               ld   a,e
 ROMC:689E EA B4 C9         ld   (C9B4),a       // Last concept to talk about
 ROMC:68A1 FA B3 C9         ld   a,(C9B3)
 ROMC:68A4 FE FF            cp   a,FF
 ROMC:68A6 20 04            jr   nz,68AC
 ROMC:68A8 7B               ld   a,e
 ROMC:68A9 EA B3 C9         ld   (C9B3),a       // First concept to talk about
 ROMC:68AC 1C               inc  e
 ROMC:68AD 7B               ld   a,e
 ROMC:68AE FE 04            cp   a,04
 ROMC:68B0 20 CA            jr   nz,687C
 ROMC:68B2 FA B2 C9         ld   a,(C9B2)
 ROMC:68B5 A7               and  a
 ROMC:68B6 28 4B            jr   z,6903         // Ends immediately if nothing to talk about
 ROMC:68B8 CD 0E 69         call 690E           // Repeats "News from Command" popup 3 times
 ROMC:68BB EF 0B 64 21                          // Empties $FFB1 and $FFB2
 ROMC:68BF 1E 00            ld   e,00
 ROMC:68C1 7B               ld   a,e            // Loop begins here
 ROMC:68C2 21 B2 C9         ld   hl,C9B2
 ROMC:68C5 CD C7 3A         call 3AC7           // A = AND (HL + A/8), 2^A%8
 ROMC:68C8 28 21            jr   z,68EB         // End cycle immediately if concept doesn't need to be talked about
 ROMC:68CA 06 00            ld   b,00           // Mini-loop begins here
 ROMC:68CC FA B3 C9         ld   a,(C9B3)
 ROMC:68CF BB               cp   e
 ROMC:68D0 28 02            jr   z,68D4
 ROMC:68D2 06 01            ld   b,01           // B is flag for not being on first concept to talk about
 ROMC:68D4 D5               push de
 ROMC:68D5 7B               ld   a,e
 ROMC:68D6 EF 31 28 76                          // Controls for Campaign Mode concept description screen; ends with A = 0 for A/Start Button press, or -1 for successful B Button press (A is concept, B is scroll-back ability flag)
 ROMC:68DA D1               pop  de
 ROMC:68DB FE FF            cp   a,FF
 ROMC:68DD 20 0C            jr   nz,68EB
 ROMC:68DF 1D               dec  e
 ROMC:68E0 7B               ld   a,e
 ROMC:68E1 21 B2 C9         ld   hl,C9B2
 ROMC:68E4 CD C7 3A         call 3AC7           // A = AND (HL + A/8), 2^A%8
 ROMC:68E7 20 E1            jr   nz,68CA        // Mini-loop results in going to previous valid concept
 ROMC:68E9 18 F4            jr   68DF           // Cycles until previous valid concept
 ROMC:68EB 1C               inc  e
 ROMC:68EC 7B               ld   a,e
 ROMC:68ED FE 04            cp   a,04
 ROMC:68EF 20 D0            jr   nz,68C1        // Next concept if there's any more to talk about
 ROMC:68F1 EF 31 BD 77                          // Controls for Campaign Mode concept postscript screen; ends with A = 0 for A/Start Button press, or -1 for B Button press
 ROMC:68F5 FE FF            cp   a,FF
 ROMC:68F7 20 06            jr   nz,68FF        // Ending stuff on confirmation
 ROMC:68F9 FA B4 C9         ld   a,(C9B4)
 ROMC:68FC 5F               ld   e,a
 ROMC:68FD 18 C2            jr   68C1           // Returns to last concept to talk about on B Button press
 ROMC:68FF EF 0B E6 69                          // Reestablishes map graphics
 ROMC:6903 D1               pop  de
 ROMC:6904 C1               pop  bc
 ROMC:6905 C9               ret                 // Campaign Mode concepts discussion handling as a whole

 ROMC:6906 28 69                                // Deployment
 ROMC:6908 34 69                                // Promotion
 ROMC:690A 4E 69                                // Mercenary Units
 ROMC:690C 66 69                                // Badges

 ROMC:690E C5               push bc
 ROMC:690F D5               push de
 ROMC:6910 06 03            ld   b,03
 ROMC:6912 C5               push bc             // Loop begins here
 ROMC:6913 3E 18            ld   a,18           // News From Militrary HQ
 ROMC:6915 EF 0B B5 51                          // Handles Popup Message as a whole including momentary cursor disabling (A is Popup Message #)
 ROMC:6919 3E 1E            ld   a,1E
 ROMC:691B CD AF 3B         call 3BAF           // Advances game state by 30 frames before any further functions
 ROMC:691E C1               pop  bc
 ROMC:691F 05               dec  b
 ROMC:6920 20 F0            jr   nz,6912
 ROMC:6922 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMC:6925 D1               pop  de
 ROMC:6926 C1               pop  bc
 ROMC:6927 C9               ret                 // Repeats "News from Command" popup 3 times

 ROMC:6928 FA A8 C6         ld   a,(C6A8)
 ROMC:692B A7               and  a
 ROMC:692C 28 03            jr   z,6931
 ROMC:692E AF               xor  a
 ROMC:692F 18 02            jr   6933
 ROMC:6931 3E 01            ld   a,01
 ROMC:6933 C9               ret                 // A = 0 if any units are in reserve, 1 otherwise

 ROMC:6934 D5               push de
 ROMC:6935 1E 00            ld   e,00
 ROMC:6937 7B               ld   a,e            // Loop begins here
 ROMC:6938 EF 12 98 44                          // A = Promoted Unit, 0 if none or unit isn't S-Rank
 ROMC:693C A7               and  a
 ROMC:693D 20 08            jr   nz,6947        // End entire procedure, including loop, with A = 0 if promotion can happen
 ROMC:693F 1C               inc  e
 ROMC:6940 7B               ld   a,e
 ROMC:6941 FE 32            cp   a,32
 ROMC:6943 20 F2            jr   nz,6937
 ROMC:6945 18 03            jr   694A
 ROMC:6947 AF               xor  a
 ROMC:6948 18 02            jr   694C
 ROMC:694A 3E 01            ld   a,01
 ROMC:694C D1               pop  de
 ROMC:694D C9               ret                 // A = 0 if any units can promote, 1 otherwise

 ROMC:694E FA 55 C6         ld   a,(C655)
 ROMC:6951 A7               and  a
 ROMC:6952 20 10            jr   nz,6964
 ROMC:6954 FA 60 C6         ld   a,(C660)
 ROMC:6957 A7               and  a
 ROMC:6958 20 0A            jr   nz,6964
 ROMC:695A FA 69 C6         ld   a,(C669)
 ROMC:695D A7               and  a
 ROMC:695E 20 04            jr   nz,6964
 ROMC:6960 3E 01            ld   a,01
 ROMC:6962 18 01            jr   6965
 ROMC:6964 AF               xor  a
 ROMC:6965 C9               ret                 // A = 0 if any Communication Towers are on the map, 1 otherwise

 ROMC:6966 FA A8 C6         ld   a,(C6A8)
 ROMC:6969 A7               and  a
 ROMC:696A 28 14            jr   z,6980         // If no units in Reserve, ends immediately with A = 1
 ROMC:696C 3E 0E            ld   a,0E
 ROMC:696E CD 8D 05         call 058D           // ($4000) = 14, ($FF81) = 14
 ROMC:6971 CD 93 05         call 0593           // ($0000) = 10
 ROMC:6974 FA 06 A1         ld   a,(A106)
 ROMC:6977 CD 9B 05         call 059B           // ($0000) = 0
 ROMC:697A A7               and  a
 ROMC:697B 28 03            jr   z,6980
 ROMC:697D AF               xor  a
 ROMC:697E 18 02            jr   6982
 ROMC:6980 3E 01            ld   a,01
 ROMC:6982 C9               ret                 // A = 0 for any units in Reserve and any Badges available, 1 otherwise

 ROMC:6983 C5               push bc
 ROMC:6984 FA 33 C6         ld   a,(C633)
 ROMC:6987 E6 01            and  a,01
 ROMC:6989 20 07            jr   nz,6992
 ROMC:698B 3E 00            ld   a,00
 ROMC:698D EA B5 C9         ld   (C9B5),a
 ROMC:6990 18 05            jr   6997
 ROMC:6992 3E 01            ld   a,01
 ROMC:6994 EA B5 C9         ld   (C9B5),a
 ROMC:6997 3E 01            ld   a,01
 ROMC:6999 EA 30 C6         ld   (C630),a
 ROMC:699C C1               pop  bc
 ROMC:699D C9               ret                 // ($C9B5) set to active player's side, ($C630) set to 1
 ROMC:699E EA B5 C9         ld   (C9B5),a
 ROMC:69A1 CD 15 38         call 3815           // Mutes music
 ROMC:69A4 FA B5 C9         ld   a,(C9B5)
 ROMC:69A7 FE 01            cp   a,01
 ROMC:69A9 28 08            jr   z,69B3         // IR Comm Receiver/White Moon is active results in jump
 ROMC:69AB CD F1 69         call 69F1
 ROMC:69AE A7               and  a
 ROMC:69AF 28 0B            jr   z,69BC         // If no signal, end with A = 1
 ROMC:69B1 18 06            jr   69B9
 ROMC:69B3 CD 06 6A         call 6A06
 ROMC:69B6 A7               and  a
 ROMC:69B7 28 03            jr   z,69BC         // If no signal, end with A = 1
 ROMC:69B9 AF               xor  a
 ROMC:69BA 18 02            jr   69BE
 ROMC:69BC 3E 01            ld   a,01
 ROMC:69BE F5               push af
 ROMC:69BF CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMC:69C2 F1               pop  af
 ROMC:69C3 C9               ret  
 ROMC:69C4 CD 15 38         call 3815           // Mutes music
 ROMC:69C7 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMC:69CA FA B5 C9         ld   a,(C9B5)       // IR Comm Receiver/White Moon active flag
 ROMC:69CD A7               and  a
 ROMC:69CE 20 08            jr   nz,69D8        // IR Comm Receiver/White Moon is active results in jump
 ROMC:69D0 CD 33 6A         call 6A33           // Receive
 ROMC:69D3 A7               and  a
 ROMC:69D4 28 13            jr   z,69E9         // If no signal, end with A = 1
 ROMC:69D6 18 06            jr   69DE
 ROMC:69D8 CD 48 6A         call 6A48           // Send
 ROMC:69DB A7               and  a
 ROMC:69DC 28 0B            jr   z,69E9         // If no signal, end with A = 1
 ROMC:69DE FA B5 C9         ld   a,(C9B5)       // Signal Branch
 ROMC:69E1 EE 01            xor  a,01
 ROMC:69E3 EA B5 C9         ld   (C9B5),a
 ROMC:69E6 AF               xor  a
 ROMC:69E7 18 02            jr   69EB
 ROMC:69E9 3E 01            ld   a,01
 ROMC:69EB F5               push af
 ROMC:69EC CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMC:69EF F1               pop  af
 ROMC:69F0 C9               ret  
 ROMC:69F1 CD 7C 6A         call 6A7C           // WRA7 as a whole holds temporary map data
 ROMC:69F4 CD 62 6A         call 6A62           // ($C61E) = 0, ($C61F) = 208, ($C620) = 0, ($C621) = 16, ($C61E) = 7
 ROMC:69F7 3E 00            ld   a,00
 ROMC:69F9 EA 1C C6         ld   (C61C),a
 ROMC:69FC 3E 00            ld   a,00
 ROMC:69FE EA 1D C6         ld   (C61D),a
 ROMC:6A01 EF 18 30 0C                          // Online junk
 ROMC:6A05 C9               ret  
 ROMC:6A06 CD 62 6A         call 6A62           // ($C61E) = 0, ($C61F) = 208, ($C620) = 0, ($C621) = 16, ($C61E) = 7
 ROMC:6A09 3E 00            ld   a,00
 ROMC:6A0B EA 1C C6         ld   (C61C),a
 ROMC:6A0E 3E 01            ld   a,01
 ROMC:6A10 EA 1D C6         ld   (C61D),a       // 0, 1, 0, 208, 0, 16, 7
 ROMC:6A13 EF 18 30 0C                          // Online junk
 ROMC:6A17 A7               and  a
 ROMC:6A18 28 18            jr   z,6A32         // End immediately if no signal
 ROMC:6A1A CD B0 6A         call 6AB0           // Send temporary map data to IR Comm Receiver as SRAM $0D data
 ROMC:6A1D 21 33 C6         ld   hl,C633
 ROMC:6A20 34               inc  (hl)           // Phase change
 ROMC:6A21 21 48 C6         ld   hl,C648
 ROMC:6A24 2A               ldi  a,(hl)
 ROMC:6A25 47               ld   b,a
 ROMC:6A26 4E               ld   c,(hl)         // BC holds White Moon HQ coordinates
 ROMC:6A27 EF 0B CB 7A                          // Establishes view area around White Moon's HQ, then cursor's within view and overall coordinates, and finally cursor's sprite grapics location center
 ROMC:6A2B 3E 01            ld   a,01
 ROMC:6A2D EA 97 C9         ld   (C997),a       // Sets start of phase done flag
 ROMC:6A30 3E 01            ld   a,01
 ROMC:6A32 C9               ret  
 ROMC:6A33 CD 7C 6A         call 6A7C           // WRA7 as a whole holds temporary map data
 ROMC:6A36 CD 62 6A         call 6A62           // ($C61E) = 0, ($C61F) = 208, ($C620) = 0, ($C621) = 16, ($C61E) = 7
 ROMC:6A39 3E 01            ld   a,01
 ROMC:6A3B EA 1C C6         ld   (C61C),a
 ROMC:6A3E 3E 00            ld   a,00
 ROMC:6A40 EA 1D C6         ld   (C61D),a       // 1, 0, 0, 208, 0, 16, 7
 ROMC:6A43 EF 18 30 0C                          // Online junk
 ROMC:6A47 C9               ret  
 ROMC:6A48 CD 62 6A         call 6A62           // ($C61E) = 0, ($C61F) = 208, ($C620) = 0, ($C621) = 16, ($C61E) = 7
 ROMC:6A4B 3E 01            ld   a,01
 ROMC:6A4D EA 1C C6         ld   (C61C),a
 ROMC:6A50 3E 01            ld   a,01
 ROMC:6A52 EA 1D C6         ld   (C61D),a
 ROMC:6A55 EF 18 30 0C                          // Online junk
 ROMC:6A59 A7               and  a
 ROMC:6A5A 28 05            jr   z,6A61         // End immediately if no signal
 ROMC:6A5C CD B0 6A         call 6AB0           // Send temporary map data to IR Comm Receiver as SRAM $0D data
 ROMC:6A5F 3E 01            ld   a,01
 ROMC:6A61 C9               ret  
 ROMC:6A62 3E 00            ld   a,00
 ROMC:6A64 EA 1E C6         ld   (C61E),a
 ROMC:6A67 3E D0            ld   a,D0
 ROMC:6A69 EA 1F C6         ld   (C61F),a
 ROMC:6A6C 3E 07            ld   a,07
 ROMC:6A6E EA 22 C6         ld   (C622),a
 ROMC:6A71 3E 00            ld   a,00
 ROMC:6A73 EA 20 C6         ld   (C620),a
 ROMC:6A76 3E 10            ld   a,10
 ROMC:6A78 EA 21 C6         ld   (C621),a
 ROMC:6A7B C9               ret                 // ($C61E) = 0, ($C61F) = 208, ($C620) = 0, ($C621) = 16, ($C61E) = 7
 ROMC:6A7C C5               push bc
 ROMC:6A7D D5               push de
 ROMC:6A7E CD 93 05         call 0593
 ROMC:6A81 3E 0D            ld   a,0D
 ROMC:6A83 CD 8D 05         call 058D           // ($4000) = 13, ($FF81) = 13
 ROMC:6A86 21 00 A0         ld   hl,A000
 ROMC:6A89 EF 13 E8 5E                          // SRAM $0D first half-block holds temporary map data
 ROMC:6A8D CD 93 05         call 0593
 ROMC:6A90 F0 82            ld   a,(ff00+82)
 ROMC:6A92 F5               push af
 ROMC:6A93 3E 07            ld   a,07
 ROMC:6A95 E0 82            ld   (ff00+82),a
 ROMC:6A97 E0 70            ld   (ff00+70),a
 ROMC:6A99 11 00 A0         ld   de,A000
 ROMC:6A9C 21 00 D0         ld   hl,D000
 ROMC:6A9F 01 00 10         ld   bc,1000
 ROMC:6AA2 CD 50 3B         call 3B50           // WRA7($D000~$DFFF) = SRAD($A000 ~ $AFFF)
 ROMC:6AA5 F1               pop  af
 ROMC:6AA6 E0 82            ld   (ff00+82),a
 ROMC:6AA8 E0 70            ld   (ff00+70),a
 ROMC:6AAA CD 9B 05         call 059B
 ROMC:6AAD D1               pop  de
 ROMC:6AAE C1               pop  bc
 ROMC:6AAF C9               ret                 // WRA7 as a whole holds temporary map data
 ROMC:6AB0 C5               push bc
 ROMC:6AB1 D5               push de
 ROMC:6AB2 CD 93 05         call 0593
 ROMC:6AB5 3E 0D            ld   a,0D
 ROMC:6AB7 CD 8D 05         call 058D           // ($4000) = 13, ($FF81) = 13
 ROMC:6ABA F0 82            ld   a,(ff00+82)
 ROMC:6ABC F5               push af
 ROMC:6ABD 3E 07            ld   a,07
 ROMC:6ABF E0 82            ld   (ff00+82),a
 ROMC:6AC1 E0 70            ld   (ff00+70),a
 ROMC:6AC3 11 00 D0         ld   de,D000
 ROMC:6AC6 21 00 A0         ld   hl,A000
 ROMC:6AC9 01 00 10         ld   bc,1000
 ROMC:6ACC CD 50 3B         call 3B50           // SRAD($A000~$AFFF) = WRA7($D000~$DFFF)
 ROMC:6ACF F1               pop  af
 ROMC:6AD0 E0 82            ld   (ff00+82),a
 ROMC:6AD2 E0 70            ld   (ff00+70),a
 ROMC:6AD4 3E 0D            ld   a,0D
 ROMC:6AD6 EA 7E C8         ld   (C87E),a
 ROMC:6AD9 21 24 A5         ld   hl,A524
 ROMC:6ADC 7D               ld   a,l
 ROMC:6ADD EA 7F C8         ld   (C87F),a
 ROMC:6AE0 7C               ld   a,h
 ROMC:6AE1 EA 80 C8         ld   (C880),a
 ROMC:6AE4 CD 93 05         call 0593
 ROMC:6AE7 21 00 A0         ld   hl,A000
 ROMC:6AEA EF 13 90 60                          // More local parts of save data reestablished
 ROMC:6AEE CD 9B 05         call 059B
 ROMC:6AF1 EF 0B F3 41                          // WRAM Bank 1 updated with any End and/or Transporting units in mind
 ROMC:6AF5 EF 0B 78 41                          // Sets base counts of each property type, as well as each HQ's coordinates
 ROMC:6AF9 EF 0B 2F 7C                          // Establishes income values
 ROMC:6AFD D1               pop  de
 ROMC:6AFE C1               pop  bc
 ROMC:6AFF C9               ret  
 ROMC:6B00 06 07            ld   b,07
 ROMC:6B02 EF 13 55 5E                          // WRA7($D000~DFFF) holds Custom Map A's full data
 ROMC:6B06 CD 62 6A         call 6A62           // ($C61E) = 0, ($C61F) = 208, ($C620) = 0, ($C621) = 16, ($C61E) = 7
 ROMC:6B09 3E 02            ld   a,02
 ROMC:6B0B EA 1C C6         ld   (C61C),a
 ROMC:6B0E 3E 00            ld   a,00
 ROMC:6B10 EA 1D C6         ld   (C61D),a
 ROMC:6B13 EF 18 30 0C                          // Online junk
 ROMC:6B17 A7               and  a
 ROMC:6B18 28 03            jr   z,6B1D
 ROMC:6B1A AF               xor  a
 ROMC:6B1B 18 02            jr   6B1F
 ROMC:6B1D 3E 01            ld   a,01
 ROMC:6B1F C9               ret  
 ROMC:6B20 4F               ld   c,a
 ROMC:6B21 C5               push bc
 ROMC:6B22 CD 62 6A         call 6A62           // ($C61E) = 0, ($C61F) = 208, ($C620) = 0, ($C621) = 16, ($C61E) = 7
 ROMC:6B25 3E 02            ld   a,02
 ROMC:6B27 EA 1C C6         ld   (C61C),a
 ROMC:6B2A 3E 01            ld   a,01
 ROMC:6B2C EA 1D C6         ld   (C61D),a
 ROMC:6B2F EF 18 30 0C                          // Online junk
 ROMC:6B33 C1               pop  bc
 ROMC:6B34 A7               and  a
 ROMC:6B35 28 0A            jr   z,6B41
 ROMC:6B37 79               ld   a,c
 ROMC:6B38 06 07            ld   b,07
 ROMC:6B3A EF 13 83 5E                          // Saves Custom Map A's full data with WRA7($D000~DFFF)
 ROMC:6B3E AF               xor  a
 ROMC:6B3F 18 02            jr   6B43
 ROMC:6B41 3E 01            ld   a,01
 ROMC:6B43 C9               ret  
 ROMC:6B44 C5               push bc
 ROMC:6B45 D5               push de
 ROMC:6B46 E5               push hl
 ROMC:6B47 47               ld   b,a
 ROMC:6B48 0E 03            ld   c,03
 ROMC:6B4A EF 12 66 40                          
 ROMC:6B4E CB 57            bit  2,a
 ROMC:6B50 20 1C            jr   nz,6B6E        // End with A = 1 if unit is already supplied
 ROMC:6B52 78               ld   a,b
 ROMC:6B53 CD DA 6B         call 6BDA           // A = 0 if (full) resupplying is valid, 1 if not
 ROMC:6B56 A7               and  a
 ROMC:6B57 28 19            jr   z,6B72         // End with A = 0 if (full) resupplying is valid
 ROMC:6B59 78               ld   a,b
 ROMC:6B5A CD 1B 6C         call 6C1B           // A = 0 if (full) repairing is valid, 1 if not
 ROMC:6B5D A7               and  a
 ROMC:6B5E 28 12            jr   z,6B72         // End with A = 0 if (full) repairing is valid
 ROMC:6B60 78               ld   a,b
 ROMC:6B61 CD 5C 6C         call 6C5C           // A = 0 if supplying can happen, 1 otherwise; ($CD3A) to ($CD40) set up if unit not Loaded
 ROMC:6B64 A7               and  a
 ROMC:6B65 28 0B            jr   z,6B72         // End with A = 0 if supplying can happen
 ROMC:6B67 78               ld   a,b
 ROMC:6B68 CD C0 6C         call 6CC0           // A = 0 if (full) repairing can be done for Loaded Air unit, 1 otherwise
 ROMC:6B6B A7               and  a
 ROMC:6B6C 28 04            jr   z,6B72         // End with A = 0 if repairing can be done for Loaded air unit
 ROMC:6B6E 3E 01            ld   a,01
 ROMC:6B70 18 01            jr   6B73
 ROMC:6B72 AF               xor  a
 ROMC:6B73 E1               pop  hl
 ROMC:6B74 D1               pop  de
 ROMC:6B75 C1               pop  bc
 ROMC:6B76 C9               ret                 // A = 1 if unit is already supplied or resupply/repairing isn't happening; 0 otherwise
 ROMC:6B77 C5               push bc
 ROMC:6B78 D5               push de
 ROMC:6B79 FA D8 C9         ld   a,(C9D8)
 ROMC:6B7C 0E 04            ld   c,04
 ROMC:6B7E EF 12 66 40                          
 ROMC:6B82 47               ld   b,a            // B = Current HP
 ROMC:6B83 C5               push bc
 ROMC:6B84 FA D8 C9         ld   a,(C9D8)
 ROMC:6B87 CD 58 6E         call 6E58           // Handles property resupply and repair of selected unit
 ROMC:6B8A FA D8 C9         ld   a,(C9D8)
 ROMC:6B8D CD B7 6E         call 6EB7           // Handles resupply and repairs by unit of selected unit
 ROMC:6B90 A7               and  a
 ROMC:6B91 20 06            jr   nz,6B99
 ROMC:6B93 3E 02            ld   a,02           // Resupplying
 ROMC:6B95 EF 0C BB 66                          // Action Animation cutscenes play out where applicable
 ROMC:6B99 FA D8 C9         ld   a,(C9D8)
 ROMC:6B9C 0E 04            ld   c,04
 ROMC:6B9E EF 12 66 40                          // A = Current HP
 ROMC:6BA2 C1               pop  bc
 ROMC:6BA3 90               sub  b
 ROMC:6BA4 57               ld   d,a            // D = HP recovered by repairs
 ROMC:6BA5 FA 91 C9         ld   a,(C991)
 ROMC:6BA8 47               ld   b,a
 ROMC:6BA9 FA 92 C9         ld   a,(C992)
 ROMC:6BAC 4F               ld   c,a
 ROMC:6BAD 7A               ld   a,d
 ROMC:6BAE EF 0C 3E 5D                          // HP Change popup bubble sprite animation (A is HP increase amount)
 ROMC:6BB2 3E 17            ld   a,17
 ROMC:6BB4 CD 44 38         call 3844
 ROMC:6BB7 3E 0B            ld   a,0B           // Supply Complete
 ROMC:6BB9 EF 0B B5 51                          // Handles Popup Message as a whole including momentary cursor disabling (A is Popup Message #)
 ROMC:6BBD FA D8 C9         ld   a,(C9D8)
 ROMC:6BC0 0E 03            ld   c,03
 ROMC:6BC2 EF 12 66 40                          
 ROMC:6BC6 CB D7            set  2,a            // Sets Supplied Flag
 ROMC:6BC8 47               ld   b,a
 ROMC:6BC9 FA D8 C9         ld   a,(C9D8)
 ROMC:6BCC EF 12 A1 40                          // Supply Flag set
 ROMC:6BD0 FA D8 C9         ld   a,(C9D8)
 ROMC:6BD3 EF 0B 74 68                          // Updates any parent unit's stats as necessary, also does finishing tile graphics updating (A is would-be child unit #)
 ROMC:6BD7 D1               pop  de
 ROMC:6BD8 C1               pop  bc
 ROMC:6BD9 C9               ret                 // Supply command as a whole, property takes priority over unit for resupply source
 ROMC:6BDA C5               push bc
 ROMC:6BDB D5               push de
 ROMC:6BDC EA CB C9         ld   (C9CB),a       // ($C9CB) = Unit #
 ROMC:6BDF 0E 00            ld   c,00
 ROMC:6BE1 EF 12 66 40                          // A = Unit Type
 ROMC:6BE5 A7               and  a
 ROMC:6BE6 28 2E            jr   z,6C16         // End with A = 1 if unit doesn't exist
 ROMC:6BE8 EA CC C9         ld   (C9CC),a
 ROMC:6BEB FA CB C9         ld   a,(C9CB)
 ROMC:6BEE 0E 03            ld   c,03
 ROMC:6BF0 EF 12 66 40                          
 ROMC:6BF4 CB 4F            bit  1,a
 ROMC:6BF6 20 1E            jr   nz,6C16        // End with A = 1 if unit is in reserve
 ROMC:6BF8 CB 47            bit  0,a
 ROMC:6BFA 20 1A            jr   nz,6C16        // End with A = 1 if unit is Loaded
 ROMC:6BFC FA CC C9         ld   a,(C9CC)
 ROMC:6BFF 47               ld   b,a            // B = Unit Type
 ROMC:6C00 FA CB C9         ld   a,(C9CB)       // A = Unit #
 ROMC:6C03 EF 12 56 46                          // A = 0 if property can provide valid supplying; -1 otherwise
 ROMC:6C07 A7               and  a
 ROMC:6C08 20 0C            jr   nz,6C16        // End with A = 1 if invalid property for resupplying
 ROMC:6C0A FA CB C9         ld   a,(C9CB)
 ROMC:6C0D CD 07 6D         call 6D07           // A = 0 if (full) resupplying can be spent on, 1 if not
 ROMC:6C10 A7               and  a
 ROMC:6C11 20 03            jr   nz,6C16        // End with A = 1 if (full) resupplying is unneeded or not affordable
 ROMC:6C13 AF               xor  a
 ROMC:6C14 18 02            jr   6C18
 ROMC:6C16 3E 01            ld   a,01
 ROMC:6C18 D1               pop  de
 ROMC:6C19 C1               pop  bc
 ROMC:6C1A C9               ret                 // A = 0 if (full) resupplying is valid, 1 if not
 ROMC:6C1B C5               push bc
 ROMC:6C1C D5               push de
 ROMC:6C1D EA CB C9         ld   (C9CB),a
 ROMC:6C20 0E 00            ld   c,00
 ROMC:6C22 EF 12 66 40                          
 ROMC:6C26 A7               and  a
 ROMC:6C27 28 2E            jr   z,6C57         // End with A = 1 if unit doesn't exist
 ROMC:6C29 EA CC C9         ld   (C9CC),a
 ROMC:6C2C FA CB C9         ld   a,(C9CB)       // Unit #
 ROMC:6C2F 0E 03            ld   c,03
 ROMC:6C31 EF 12 66 40                          
 ROMC:6C35 CB 4F            bit  1,a
 ROMC:6C37 20 1E            jr   nz,6C57        // End with A = 1 if unit is in reserve
 ROMC:6C39 CB 47            bit  0,a
 ROMC:6C3B 20 1A            jr   nz,6C57        // End with A = 1 if unit is loaded
 ROMC:6C3D FA CC C9         ld   a,(C9CC)       // Unit Type
 ROMC:6C40 47               ld   b,a
 ROMC:6C41 FA CB C9         ld   a,(C9CB)
 ROMC:6C44 EF 12 C8 46                          // A = 0 repairs valid, -1 repairs invalid
 ROMC:6C48 A7               and  a
 ROMC:6C49 20 0C            jr   nz,6C57        // End with A = 1 if repairs invalid
 ROMC:6C4B FA CB C9         ld   a,(C9CB)
 ROMC:6C4E CD A3 6D         call 6DA3           // A = 0 if (full) repairing can be spent on, 1 if not
 ROMC:6C51 A7               and  a
 ROMC:6C52 20 03            jr   nz,6C57        // End with A = 1 if (full) repairing is unneeded or not affordable
 ROMC:6C54 AF               xor  a
 ROMC:6C55 18 02            jr   6C59
 ROMC:6C57 3E 01            ld   a,01
 ROMC:6C59 D1               pop  de
 ROMC:6C5A C1               pop  bc
 ROMC:6C5B C9               ret                 // A = 0 if (full) repairing is valid, 1 if not
 ROMC:6C5C C5               push bc
 ROMC:6C5D D5               push de
 ROMC:6C5E EA CB C9         ld   (C9CB),a
 ROMC:6C61 0E 00            ld   c,00
 ROMC:6C63 EF 12 66 40                          
 ROMC:6C67 A7               and  a
 ROMC:6C68 28 51            jr   z,6CBB         // End with A = 1 if unit doesn't exist
 ROMC:6C6A EA CC C9         ld   (C9CC),a
 ROMC:6C6D FA CB C9         ld   a,(C9CB)
 ROMC:6C70 0E 03            ld   c,03
 ROMC:6C72 EF 12 66 40                          
 ROMC:6C76 CB 4F            bit  1,a
 ROMC:6C78 20 41            jr   nz,6CBB        // End with A = 1 if unit is in reserve
 ROMC:6C7A CB 47            bit  0,a
 ROMC:6C7C 20 24            jr   nz,6CA2        // Is unit loaded?
 ROMC:6C7E FA CB C9         ld   a,(C9CB)
 ROMC:6C81 CD 3A 6D         call 6D3A           // A = Materials Cost, DE = Gold Cost (resupplying for both)
 ROMC:6C84 7A               ld   a,d
 ROMC:6C85 B3               or   e
 ROMC:6C86 A7               and  a
 ROMC:6C87 28 32            jr   z,6CBB         // End with A = 1 if Gold for resupplying not needed due to not missing any Ammo or Fuel
 ROMC:6C89 AF               xor  a
 ROMC:6C8A EA CD C9         ld   (C9CD),a
 ROMC:6C8D EA CE C9         ld   (C9CE),a
 ROMC:6C90 EA CF C9         ld   (C9CF),a       // ($C9CD) to ($C9DF) emptied
 ROMC:6C93 FA CB C9         ld   a,(C9CB)
 ROMC:6C96 EF 12 0A 45                          // ($CD3A) holds supplying unit count, ($CD3B) to ($CD40) holds supplying units
 ROMC:6C9A FA 3A CD         ld   a,(CD3A)
 ROMC:6C9D A7               and  a
 ROMC:6C9E 28 1B            jr   z,6CBB         // End with A = 1 if no adjacent supplying units available
 ROMC:6CA0 18 16            jr   6CB8           // End with A = 0 if all conditions fulfilled; Unloaded path done here
 ROMC:6CA2 FA CC C9         ld   a,(C9CC)
 ROMC:6CA5 0E 18            ld   c,18
 ROMC:6CA7 EF 12 37 40                          // Unit Family
 ROMC:6CAB FE 02            cp   a,02
 ROMC:6CAD 20 0C            jr   nz,6CBB        // End with A = 1 if unit isn't aerial
 ROMC:6CAF FA CB C9         ld   a,(C9CB)
 ROMC:6CB2 CD 07 6D         call 6D07           // A = 0 if (full) resupplying can be spent on, 1 if not
 ROMC:6CB5 A7               and  a
 ROMC:6CB6 20 03            jr   nz,6CBB        // End with A = 1 if (full) resupplying can't be spent on
 ROMC:6CB8 AF               xor  a
 ROMC:6CB9 18 02            jr   6CBD
 ROMC:6CBB 3E 01            ld   a,01
 ROMC:6CBD D1               pop  de
 ROMC:6CBE C1               pop  bc
 ROMC:6CBF C9               ret                 // A = 0 if supplying can happen, 1 otherwise; ($CD3A) to ($CD40) set up if unit not Loaded
 ROMC:6CC0 C5               push bc
 ROMC:6CC1 D5               push de
 ROMC:6CC2 EA CB C9         ld   (C9CB),a
 ROMC:6CC5 0E 03            ld   c,03
 ROMC:6CC7 EF 12 66 40                          
 ROMC:6CCB CB 4F            bit  1,a
 ROMC:6CCD 20 33            jr   nz,6D02        // End with A = 1 if unit is in reserve
 ROMC:6CCF CB 47            bit  0,a
 ROMC:6CD1 28 2F            jr   z,6D02         // End with A = 1 if unit isn't Loaded
 ROMC:6CD3 FA CB C9         ld   a,(C9CB)
 ROMC:6CD6 0E 00            ld   c,00
 ROMC:6CD8 EF 12 66 40                          
 ROMC:6CDC EA CC C9         ld   (C9CC),a
 ROMC:6CDF 0E 18            ld   c,18
 ROMC:6CE1 EF 12 37 40                          
 ROMC:6CE5 FE 02            cp   a,02           // Air unit?
 ROMC:6CE7 20 19            jr   nz,6D02        // End with A = 1 if unit isn't Air unit
 ROMC:6CE9 FA CB C9         ld   a,(C9CB)
 ROMC:6CEC 0E 04            ld   c,04
 ROMC:6CEE EF 12 66 40                          
 ROMC:6CF2 FE 0A            cp   a,0A
 ROMC:6CF4 28 0C            jr   z,6D02         // End with A = 1 if unit HP is already 10
 ROMC:6CF6 FA CB C9         ld   a,(C9CB)
 ROMC:6CF9 CD A3 6D         call 6DA3           // A = 0 if (full) repairing can be spent on, 1 if not
 ROMC:6CFC A7               and  a
 ROMC:6CFD 20 03            jr   nz,6D02        // End with A = 1 if (full) repairing can't be done
 ROMC:6CFF AF               xor  a
 ROMC:6D00 18 02            jr   6D04
 ROMC:6D02 3E 01            ld   a,01
 ROMC:6D04 D1               pop  de
 ROMC:6D05 C1               pop  bc
 ROMC:6D06 C9               ret                 // A = 0 if (full) repairing can be done for Loaded Air unit, 1 otherwise
 ROMC:6D07 C5               push bc
 ROMC:6D08 D5               push de
 ROMC:6D09 CD 3A 6D         call 6D3A           // A = Materials Cost, DE = Gold Cost (resupplying for both)
 ROMC:6D0C EA CF C9         ld   (C9CF),a
 ROMC:6D0F 7B               ld   a,e
 ROMC:6D10 EA CD C9         ld   (C9CD),a
 ROMC:6D13 7A               ld   a,d
 ROMC:6D14 EA CE C9         ld   (C9CE),a       // ($C9CD) 2 byte holds Gold Cost, ($C9CF) holds Materials Cost
 ROMC:6D17 B3               or   e
 ROMC:6D18 A7               and  a
 ROMC:6D19 28 1A            jr   z,6D35         // End with A = 1 if no Gold needed for resupplying
 ROMC:6D1B EF 0B B0 7B                          // Carry Flag On if DE > Active Player's Gold
 ROMC:6D1F 38 14            jr   c,6D35         // End with A = 1 if too little Gold for resupplying
 ROMC:6D21 EF 0B DC 7B                          // HL = Active Player's Current Materials
 ROMC:6D25 54               ld   d,h
 ROMC:6D26 5D               ld   e,l            // DE = Active Player's Current Materials
 ROMC:6D27 26 00            ld   h,00
 ROMC:6D29 FA CF C9         ld   a,(C9CF)
 ROMC:6D2C 6F               ld   l,a
 ROMC:6D2D CD CA 29         call 29CA           // Carry Flag active if DE < HL, A = 0 if DE = HL
 ROMC:6D30 38 03            jr   c,6D35         // End with A = 1 if too few Materials for resupplying
 ROMC:6D32 AF               xor  a
 ROMC:6D33 18 02            jr   6D37
 ROMC:6D35 3E 01            ld   a,01
 ROMC:6D37 D1               pop  de
 ROMC:6D38 C1               pop  bc
 ROMC:6D39 C9               ret                 // A = 0 if (full) resupplying can be spent on, 1 if not
 ROMC:6D3A C5               push bc
 ROMC:6D3B F5               push af
 ROMC:6D3C EF 12 62 48                          // Establishes Unit's weapons' stats in ($CCED) to ($CD08)
 ROMC:6D40 FA F7 CC         ld   a,(CCF7)
 ROMC:6D43 47               ld   b,a
 ROMC:6D44 FA FA CC         ld   a,(CCFA)
 ROMC:6D47 90               sub  b              // A = Primary Missing Ammo
 ROMC:6D48 47               ld   b,a            // B = Primary Missing Ammo
 ROMC:6D49 FA F6 CC         ld   a,(CCF6)
 ROMC:6D4C 0E 0F            ld   c,0F
 ROMC:6D4E EF 12 55 48                          // A = Gold Cost per shot
 ROMC:6D52 CD 95 29         call 2995           // HL = Gold Cost for primary weapon resupply
 ROMC:6D55 E5               push hl
 ROMC:6D56 FA 05 CD         ld   a,(CD05)
 ROMC:6D59 47               ld   b,a
 ROMC:6D5A FA 08 CD         ld   a,(CD08)
 ROMC:6D5D 90               sub  b
 ROMC:6D5E 47               ld   b,a
 ROMC:6D5F FA F6 CC         ld   a,(CCF6)       // BUG ALERT!!! Should be FA 04 CD to use secondary weapon's pricing, not primary weapon's pricing
 ROMC:6D62 0E 0F            ld   c,0F
 ROMC:6D64 EF 12 55 48                          
 ROMC:6D68 CD 95 29         call 2995           // HL = Gold Cost for secondary weapon resupply
 ROMC:6D6B D1               pop  de             // DE = Gold Cost for primary weapon resupply
 ROMC:6D6C 19               add  hl,de          // HL = Gold Cost for resupplying both weapons
 ROMC:6D6D F1               pop  af
 ROMC:6D6E 57               ld   d,a
 ROMC:6D6F 0E 07            ld   c,07
 ROMC:6D71 EF 12 66 40                          // A = Unit's Fuel
 ROMC:6D75 47               ld   b,a            // B = Unit's Fuel
 ROMC:6D76 7A               ld   a,d
 ROMC:6D77 0E 00            ld   c,00
 ROMC:6D79 EF 12 66 40                          // A = Unit Type
 ROMC:6D7D 0E 0B            ld   c,0B
 ROMC:6D7F EF 12 37 40                          // A = Unit Type's Max Fuel
 ROMC:6D83 90               sub  b              // A = Unit's Missing Fuel
 ROMC:6D84 5F               ld   e,a            // E = Unit's Missing Fuel
 ROMC:6D85 16 00            ld   d,00
 ROMC:6D87 19               add  hl,de          // HL = Gold Cost for resupplying
 ROMC:6D88 E5               push hl
 ROMC:6D89 FA F6 CC         ld   a,(CCF6)
 ROMC:6D8C FE 1F            cp   a,1F
 ROMC:6D8E 20 0B            jr   nz,6D9B        // Skip portion if "Weapon" isn't Materials
 ROMC:6D90 FA F7 CC         ld   a,(CCF7)
 ROMC:6D93 47               ld   b,a
 ROMC:6D94 FA FA CC         ld   a,(CCFA)
 ROMC:6D97 90               sub  b
 ROMC:6D98 47               ld   b,a            // B = Missing Materials
 ROMC:6D99 18 02            jr   6D9D
 ROMC:6D9B 06 00            ld   b,00
 ROMC:6D9D E1               pop  hl
 ROMC:6D9E 54               ld   d,h
 ROMC:6D9F 5D               ld   e,l
 ROMC:6DA0 78               ld   a,b
 ROMC:6DA1 C1               pop  bc
 ROMC:6DA2 C9               ret                 // A = Materials Cost, DE = Gold Cost (resupplying for both)
 ROMC:6DA3 C5               push bc
 ROMC:6DA4 D5               push de
 ROMC:6DA5 CD D6 6D         call 6DD6           // A = Materials Cost, DE = Gold Cost (repairs for both)
 ROMC:6DA8 EA CF C9         ld   (C9CF),a
 ROMC:6DAB 7B               ld   a,e
 ROMC:6DAC EA CD C9         ld   (C9CD),a
 ROMC:6DAF 7A               ld   a,d
 ROMC:6DB0 EA CE C9         ld   (C9CE),a
 ROMC:6DB3 B3               or   e
 ROMC:6DB4 A7               and  a
 ROMC:6DB5 28 1A            jr   z,6DD1         // End with A = 1 if repairs not needed
 ROMC:6DB7 EF 0B B0 7B                          
 ROMC:6DBB 38 14            jr   c,6DD1         // End with A = 1 if too little Gold for repairing
 ROMC:6DBD EF 0B DC 7B                          // HL = Available Materials
 ROMC:6DC1 54               ld   d,h
 ROMC:6DC2 5D               ld   e,l
 ROMC:6DC3 26 00            ld   h,00
 ROMC:6DC5 FA CF C9         ld   a,(C9CF)
 ROMC:6DC8 6F               ld   l,a
 ROMC:6DC9 CD CA 29         call 29CA           // Carry Flag active if DE < HL, A = 0 if DE = HL
 ROMC:6DCC 38 03            jr   c,6DD1         // End with A = 1 if too few Materials for repairing
 ROMC:6DCE AF               xor  a
 ROMC:6DCF 18 02            jr   6DD3
 ROMC:6DD1 3E 01            ld   a,01
 ROMC:6DD3 D1               pop  de
 ROMC:6DD4 C1               pop  bc
 ROMC:6DD5 C9               ret                 // A = 0 if (full) repairing can be spent on, 1 if not
 ROMC:6DD6 C5               push bc
 ROMC:6DD7 57               ld   d,a
 ROMC:6DD8 0E 04            ld   c,04
 ROMC:6DDA EF 12 66 40                          // A = Unit's HP
 ROMC:6DDE 4F               ld   c,a            // C = Unit's HP
 ROMC:6DDF 7A               ld   a,d
 ROMC:6DE0 CD 2B 6E         call 6E2B           // A = HP repair amount; Property's Strength / 10 is rounded up
 ROMC:6DE3 5F               ld   e,a            // E = HP repair amount; Property's Strength / 10 is rounded up
 ROMC:6DE4 79               ld   a,c
 ROMC:6DE5 83               add  e              // A = Unit's HP + HP repair amount
 ROMC:6DE6 47               ld   b,a
 ROMC:6DE7 3E 0A            ld   a,0A
 ROMC:6DE9 B8               cp   b
 ROMC:6DEA 30 02            jr   nc,6DEE
 ROMC:6DEC 91               sub  c
 ROMC:6DED 5F               ld   e,a            // If Unit's HP + HP repair amount exceeds 10, E = needed amount for healing to 10
 ROMC:6DEE D5               push de
 ROMC:6DEF D5               push de
 ROMC:6DF0 7A               ld   a,d
 ROMC:6DF1 0E 00            ld   c,00
 ROMC:6DF3 EF 12 66 40                          
 ROMC:6DF7 0E 10            ld   c,10
 ROMC:6DF9 EF 12 43 40                          // DE = Gold Cost / 100G
 ROMC:6DFD E1               pop  hl
 ROMC:6DFE 26 00            ld   h,00           // HL = HP repair amount, ceiling of Missing HP
 ROMC:6E00 CD D8 29         call 29D8           // HL *= DE (Signed), BC is Carry Byte
 ROMC:6E03 11 0A 00         ld   de,000A
 ROMC:6E06 CD D8 29         call 29D8           // HL = HP repair amount * Gold Cost / 10G
 ROMC:6E09 D1               pop  de
 ROMC:6E0A E5               push hl
 ROMC:6E0B D5               push de
 ROMC:6E0C 7A               ld   a,d
 ROMC:6E0D 0E 00            ld   c,00
 ROMC:6E0F EF 12 66 40                          // A = Unit Type
 ROMC:6E13 0E 12            ld   c,12
 ROMC:6E15 EF 12 43 40                          // DE = Materials Cost
 ROMC:6E19 E1               pop  hl
 ROMC:6E1A 26 00            ld   h,00
 ROMC:6E1C CD D8 29         call 29D8           // HL *= DE (Signed), BC is Carry Byte
 ROMC:6E1F 54               ld   d,h
 ROMC:6E20 5D               ld   e,l
 ROMC:6E21 01 0A 00         ld   bc,000A
 ROMC:6E24 CD 21 2A         call 2A21           // DE = HP repair amount * Materials Cost / 10M
 ROMC:6E27 7B               ld   a,e
 ROMC:6E28 D1               pop  de
 ROMC:6E29 C1               pop  bc
 ROMC:6E2A C9               ret                 // A = Materials Cost, DE = Gold Cost (repairs for both)
 ROMC:6E2B C5               push bc
 ROMC:6E2C D5               push de
 ROMC:6E2D 57               ld   d,a
 ROMC:6E2E 0E 03            ld   c,03
 ROMC:6E30 EF 12 66 40                          // A = Unit's Status
 ROMC:6E34 CB 47            bit  0,a
 ROMC:6E36 20 1B            jr   nz,6E53        // End with A = 2 if unit is Loaded
 ROMC:6E38 7A               ld   a,d
 ROMC:6E39 0E 01            ld   c,01
 ROMC:6E3B EF 12 83 40                          // DE holds coordinates
 ROMC:6E3F 43               ld   b,e
 ROMC:6E40 4A               ld   c,d            // BC holds coordinates
 ROMC:6E41 EF 0C 83 58                          // A = Property's Strength for matching property, -1 if there is none
 ROMC:6E45 3D               dec  a
 ROMC:6E46 5F               ld   e,a
 ROMC:6E47 16 00            ld   d,00
 ROMC:6E49 01 0A 00         ld   bc,000A
 ROMC:6E4C CD 21 2A         call 2A21           // DE = (Property's Strength - 1) / 10
 ROMC:6E4F 7B               ld   a,e
 ROMC:6E50 3C               inc  a              // A = Property's Strength / 10 rounded up
 ROMC:6E51 18 02            jr   6E55
 ROMC:6E53 3E 02            ld   a,02
 ROMC:6E55 D1               pop  de
 ROMC:6E56 C1               pop  bc
 ROMC:6E57 C9               ret                 // A = HP repair amount; Property's Strength / 10 is rounded up
 ROMC:6E58 C5               push bc
 ROMC:6E59 D5               push de
 ROMC:6E5A EA CB C9         ld   (C9CB),a
 ROMC:6E5D CD DA 6B         call 6BDA           // A = 0 if (full) resupplying is valid, 1 if not
 ROMC:6E60 A7               and  a
 ROMC:6E61 20 24            jr   nz,6E87        // Skip resupplying if invalid
 ROMC:6E63 CD 57 6F         call 6F57           // Gold and Materials both reduced by respective costs
 ROMC:6E66 FA CB C9         ld   a,(C9CB)
 ROMC:6E69 EF 12 41 47                          // Fills unit's Fuel
 ROMC:6E6D FA CB C9         ld   a,(C9CB)
 ROMC:6E70 EF 12 58 47                          // Restocks unit's Ammo
 ROMC:6E74 FA CB C9         ld   a,(C9CB)
 ROMC:6E77 0E 03            ld   c,03
 ROMC:6E79 EF 12 66 40                          
 ROMC:6E7D CB D7            set  2,a            // Sets Supply Flag
 ROMC:6E7F 47               ld   b,a
 ROMC:6E80 FA CB C9         ld   a,(C9CB)
 ROMC:6E83 EF 12 A1 40                          // Unit's Supplied Flag Set
 ROMC:6E87 FA CB C9         ld   a,(C9CB)
 ROMC:6E8A CD 1B 6C         call 6C1B           // A = 0 if (full) repairing is valid, 1 if not
 ROMC:6E8D A7               and  a
 ROMC:6E8E 20 24            jr   nz,6EB4        // End if repairing invalid
 ROMC:6E90 CD 57 6F         call 6F57           // Gold and Materials both reduced by respective costs
 ROMC:6E93 FA CB C9         ld   a,(C9CB)
 ROMC:6E96 CD 2B 6E         call 6E2B
 ROMC:6E99 47               ld   b,a            // B = HP repair amount
 ROMC:6E9A FA CB C9         ld   a,(C9CB)
 ROMC:6E9D EF 12 7D 47                          // Unit's HP recovered by HP repair amount
 ROMC:6EA1 FA CB C9         ld   a,(C9CB)
 ROMC:6EA4 0E 03            ld   c,03
 ROMC:6EA6 EF 12 66 40                          
 ROMC:6EAA CB D7            set  2,a
 ROMC:6EAC 47               ld   b,a
 ROMC:6EAD FA CB C9         ld   a,(C9CB)
 ROMC:6EB0 EF 12 A1 40                          // Unit's Supplied Flag set
 ROMC:6EB4 D1               pop  de
 ROMC:6EB5 C1               pop  bc
 ROMC:6EB6 C9               ret                 // Handles property resupply and repair
 ROMC:6EB7 C5               push bc
 ROMC:6EB8 D5               push de
 ROMC:6EB9 EA CB C9         ld   (C9CB),a
 ROMC:6EBC 3E 01            ld   a,01
 ROMC:6EBE EA D0 C9         ld   (C9D0),a
 ROMC:6EC1 FA CB C9         ld   a,(C9CB)
 ROMC:6EC4 CD 5C 6C         call 6C5C           // A = 0 if supplying can happen, 1 otherwise; ($CD3A) to ($CD40) set up if unit not Loaded
 ROMC:6EC7 A7               and  a
 ROMC:6EC8 20 5A            jr   nz,6F24        // Skip supplying portion if supplying can't happen
 ROMC:6ECA FA CD C9         ld   a,(C9CD)
 ROMC:6ECD 4F               ld   c,a
 ROMC:6ECE FA CE C9         ld   a,(C9CE)
 ROMC:6ED1 B1               or   c
 ROMC:6ED2 A7               and  a
 ROMC:6ED3 20 2B            jr   nz,6F00        // Skip next few checks and manage cost application if money costs are around
 ROMC:6ED5 AF               xor  a
 ROMC:6ED6 EA D0 C9         ld   (C9D0),a
 ROMC:6ED9 FA 3B CD         ld   a,(CD3B)
 ROMC:6EDC 0E 08            ld   c,08
 ROMC:6EDE EF 12 66 40                          
 ROMC:6EE2 3D               dec  a
 ROMC:6EE3 47               ld   b,a
 ROMC:6EE4 FA 3B CD         ld   a,(CD3B)
 ROMC:6EE7 EF 12 A1 40                          // Supplying unit's "Ammo" decremented
 ROMC:6EEB FA CB C9         ld   a,(C9CB)
 ROMC:6EEE 0E 04            ld   c,04
 ROMC:6EF0 EF 12 66 40                          
 ROMC:6EF4 6F               ld   l,a
 ROMC:6EF5 26 00            ld   h,00
 ROMC:6EF7 FA 3B CD         ld   a,(CD3B)
 ROMC:6EFA EF 12 DB 40                          // Supplying unit's EXP += supplying unit's HP
 ROMC:6EFE 18 03            jr   6F03
 ROMC:6F00 CD 57 6F         call 6F57           // Gold and Materials both reduced by respective costs
 ROMC:6F03 FA CB C9         ld   a,(C9CB)
 ROMC:6F06 EF 12 41 47                          // Fills unit's Fuel
 ROMC:6F0A FA CB C9         ld   a,(C9CB)
 ROMC:6F0D EF 12 58 47                          // Restocks unit's Ammo
 ROMC:6F11 FA CB C9         ld   a,(C9CB)
 ROMC:6F14 0E 03            ld   c,03
 ROMC:6F16 EF 12 66 40                          
 ROMC:6F1A CB D7            set  2,a
 ROMC:6F1C 47               ld   b,a
 ROMC:6F1D FA CB C9         ld   a,(C9CB)
 ROMC:6F20 EF 12 A1 40                          // Sets unit's Supplied Flag
 ROMC:6F24 FA CB C9         ld   a,(C9CB)
 ROMC:6F27 CD C0 6C         call 6CC0           // A = 0 if (full) repairing can be done for Loaded Air unit, 1 otherwise
 ROMC:6F2A A7               and  a
 ROMC:6F2B 20 24            jr   nz,6F51        // End with A = 1 if repairing can't be done
 ROMC:6F2D CD 57 6F         call 6F57           // Gold and Materials both reduced by respective costs
 ROMC:6F30 FA CB C9         ld   a,(C9CB)
 ROMC:6F33 CD 2B 6E         call 6E2B           // A = HP repair amount
 ROMC:6F36 47               ld   b,a            // B = HP repair amount
 ROMC:6F37 FA CB C9         ld   a,(C9CB)
 ROMC:6F3A EF 12 7D 47                          // HP Recovery
 ROMC:6F3E FA CB C9         ld   a,(C9CB)
 ROMC:6F41 0E 03            ld   c,03
 ROMC:6F43 EF 12 66 40                          
 ROMC:6F47 CB D7            set  2,a
 ROMC:6F49 47               ld   b,a
 ROMC:6F4A FA CB C9         ld   a,(C9CB)
 ROMC:6F4D EF 12 A1 40                          // Unit's Supply Flag Set
 ROMC:6F51 FA D0 C9         ld   a,(C9D0)
 ROMC:6F54 D1               pop  de
 ROMC:6F55 C1               pop  bc
 ROMC:6F56 C9               ret                 // Handles resupply and repairs by unit of unit A
 ROMC:6F57 D5               push de
 ROMC:6F58 FA CD C9         ld   a,(C9CD)
 ROMC:6F5B 5F               ld   e,a
 ROMC:6F5C FA CE C9         ld   a,(C9CE)
 ROMC:6F5F 57               ld   d,a            // DE = Gold Cost
 ROMC:6F60 EF 0B 98 7B                          // Reduces Current Gold if possible, Sets Carry Flag if not possible
 ROMC:6F64 FA CF C9         ld   a,(C9CF)
 ROMC:6F67 5F               ld   e,a
 ROMC:6F68 16 00            ld   d,00           // DE = Materials Cost
 ROMC:6F6A EF 0B 13 7C                          // Reduces Current Materials by cost
 ROMC:6F6E D1               pop  de
 ROMC:6F6F C9               ret                 // Gold and Materials both reduced by respective costs
 ROMC:6F70 C5               push bc
 ROMC:6F71 21 49 C9         ld   hl,C949
 ROMC:6F74 01 40 00         ld   bc,0040
 ROMC:6F77 AF               xor  a
 ROMC:6F78 CD 79 3B         call 3B79
 ROMC:6F7B C1               pop  bc
 ROMC:6F7C C9               ret                 // Empties ($C949) to ($C988)
 ROMC:6F7D C5               push bc
 ROMC:6F7E 87               add  a
 ROMC:6F7F 47               ld   b,a
 ROMC:6F80 CD 70 6F         call 6F70           // Empties ($C949) to ($C988)
 ROMC:6F83 78               ld   a,b
 ROMC:6F84 0E 1B            ld   c,1B
 ROMC:6F86 EF 12 37 40                          // Carried Type
 ROMC:6F8A FE 03            cp   a,03
 ROMC:6F8C 20 0A            jr   nz,6F98
 ROMC:6F8E 3E 2E            ld   a,2E
 ROMC:6F90 EA 49 C9         ld   (C949),a
 ROMC:6F93 3E 2F            ld   a,2F
 ROMC:6F95 EA 4A C9         ld   (C94A),a
 ROMC:6F98 C1               pop  bc
 ROMC:6F99 C9               ret                 // If unit type A can be carried by Aircraft Carrier, ($C949) 2 byte holds Aircraft Carriers
 ROMC:6F9A C5               push bc
 ROMC:6F9B 47               ld   b,a
 ROMC:6F9C CD 70 6F         call 6F70           // Empties ($C949) to ($C988)
 ROMC:6F9F 78               ld   a,b
 ROMC:6FA0 87               add  a              // A *= 2
 ROMC:6FA1 0E 18            ld   c,18
 ROMC:6FA3 EF 12 37 40                          // A = Unit Family
 ROMC:6FA7 FE 02            cp   a,02           // Air?
 ROMC:6FA9 28 32            jr   z,6FDD
 ROMC:6FAB FE 03            cp   a,03           // Ship?
 ROMC:6FAD 28 35            jr   z,6FE4
 ROMC:6FAF FE 04            cp   a,04           // Submarine?
 ROMC:6FB1 28 31            jr   z,6FE4
 ROMC:6FB3 78               ld   a,b
 ROMC:6FB4 FE 04            cp   a,04           // Work Car?
 ROMC:6FB6 28 19            jr   z,6FD1
 ROMC:6FB8 FE 05            cp   a,05           // Supply Truck?
 ROMC:6FBA 28 15            jr   z,6FD1
 ROMC:6FBC FE 06            cp   a,06           // Supply Truck+?
 ROMC:6FBE 28 11            jr   z,6FD1
 ROMC:6FC0 3E 01            ld   a,01
 ROMC:6FC2 EA 49 C9         ld   (C949),a
 ROMC:6FC5 3E 02            ld   a,02
 ROMC:6FC7 EA 4A C9         ld   (C94A),a
 ROMC:6FCA 3E 04            ld   a,04
 ROMC:6FCC EA 4B C9         ld   (C94B),a
 ROMC:6FCF 18 18            jr   6FE9
 ROMC:6FD1 3E 01            ld   a,01
 ROMC:6FD3 EA 49 C9         ld   (C949),a
 ROMC:6FD6 3E 04            ld   a,04
 ROMC:6FD8 EA 4A C9         ld   (C94A),a
 ROMC:6FDB 18 0C            jr   6FE9
 ROMC:6FDD 3E 06            ld   a,06
 ROMC:6FDF EA 49 C9         ld   (C949),a
 ROMC:6FE2 18 05            jr   6FE9
 ROMC:6FE4 3E 09            ld   a,09
 ROMC:6FE6 EA 49 C9         ld   (C949),a
 ROMC:6FE9 C1               pop  bc
 ROMC:6FEA C9               ret                 // ($C949) 3 byte holds viable repair points for unit type A
 ROMC:6FEB C5               push bc
 ROMC:6FEC 87               add  a
 ROMC:6FED 4F               ld   c,a
 ROMC:6FEE CD 70 6F         call 6F70           // Empties ($C949) to ($C988)
 ROMC:6FF1 06 05            ld   b,05
 ROMC:6FF3 21 49 C9         ld   hl,C949        // B = 5, C = A * 2
 ROMC:6FF6 C5               push bc             // Loop begins here
 ROMC:6FF7 E5               push hl
 ROMC:6FF8 78               ld   a,b
 ROMC:6FF9 87               add  a
 ROMC:6FFA 47               ld   b,a
 ROMC:6FFB 79               ld   a,c
 ROMC:6FFC EF 12 51 43                          // A = 0 if first unit type can be resupplied by second unit type, 1 otherwise
 ROMC:7000 E1               pop  hl
 ROMC:7001 C1               pop  bc
 ROMC:7002 A7               and  a
 ROMC:7003 20 02            jr   nz,7007
 ROMC:7005 70               ld   (hl),b
 ROMC:7006 23               inc  hl
 ROMC:7007 04               inc  b
 ROMC:7008 78               ld   a,b
 ROMC:7009 FE 32            cp   a,32
 ROMC:700B 20 E9            jr   nz,6FF6        // Loop stores viable resupply unit types
 ROMC:700D E5               push hl
 ROMC:700E 79               ld   a,c
 ROMC:700F 0E 1B            ld   c,1B
 ROMC:7011 EF 12 37 40                          // Carried Type
 ROMC:7015 E1               pop  hl
 ROMC:7016 FE 03            cp   a,03
 ROMC:7018 20 06            jr   nz,7020
 ROMC:701A 3E 2E            ld   a,2E
 ROMC:701C 22               ldi  (hl),a
 ROMC:701D 3E 2F            ld   a,2F
 ROMC:701F 22               ldi  (hl),a
 ROMC:7020 C1               pop  bc
 ROMC:7021 C9               ret                 // ($C949) et al stores units capable of resupplying unit type represented by A
 ROMC:7022 C5               push bc
 ROMC:7023 47               ld   b,a
 ROMC:7024 CD 70 6F         call 6F70           // Empties ($C949) to ($C988)
 ROMC:7027 78               ld   a,b
 ROMC:7028 87               add  a
 ROMC:7029 0E 18            ld   c,18
 ROMC:702B EF 12 37 40                          // Unit Family
 ROMC:702F FE 02            cp   a,02           // Air?
 ROMC:7031 28 32            jr   z,7065
 ROMC:7033 FE 03            cp   a,03           // Ship?
 ROMC:7035 28 3A            jr   z,7071
 ROMC:7037 FE 04            cp   a,04           // Diving?
 ROMC:7039 28 36            jr   z,7071
 ROMC:703B 78               ld   a,b
 ROMC:703C FE 04            cp   a,04           // Work Car?
 ROMC:703E 28 19            jr   z,7059
 ROMC:7040 FE 05            cp   a,05           // Supply Truck?
 ROMC:7042 28 15            jr   z,7059
 ROMC:7044 FE 06            cp   a,06           // Supply Truck+?
 ROMC:7046 28 11            jr   z,7059
 ROMC:7048 3E 01            ld   a,01
 ROMC:704A EA 49 C9         ld   (C949),a
 ROMC:704D 3E 02            ld   a,02
 ROMC:704F EA 4A C9         ld   (C94A),a
 ROMC:7052 3E 04            ld   a,04
 ROMC:7054 EA 4B C9         ld   (C94B),a
 ROMC:7057 18 1D            jr   7076
 ROMC:7059 3E 01            ld   a,01
 ROMC:705B EA 49 C9         ld   (C949),a
 ROMC:705E 3E 04            ld   a,04
 ROMC:7060 EA 4A C9         ld   (C94A),a
 ROMC:7063 18 11            jr   7076
 ROMC:7065 3E 06            ld   a,06
 ROMC:7067 EA 49 C9         ld   (C949),a
 ROMC:706A 3E 08            ld   a,08
 ROMC:706C EA 4A C9         ld   (C94A),a
 ROMC:706F 18 05            jr   7076
 ROMC:7071 3E 09            ld   a,09
 ROMC:7073 EA 49 C9         ld   (C949),a
 ROMC:7076 C1               pop  bc
 ROMC:7077 C9               ret                 // ($C949) holds viable resupplying property types for unit type A
 ROMC:7078 C5               push bc
 ROMC:7079 D5               push de
 ROMC:707A E5               push hl
 ROMC:707B FA DD CC         ld   a,(CCDD)
 ROMC:707E CB 3F            srl  a
 ROMC:7080 FE 04            cp   a,04
 ROMC:7082 20 40            jr   nz,70C4        // End with A = 1 if unit isn't Work Car
 ROMC:7084 FA E0 CC         ld   a,(CCE0)
 ROMC:7087 CB 47            bit  0,a
 ROMC:7089 20 39            jr   nz,70C4        // End with A = 1 if unit isn't Loaded
 ROMC:708B EF 0B 70 47                          // A = Terrain Type
 ROMC:708F CD CD 70         call 70CD           // A = 1 if Plains, 2 if Forest or Moor, 0 otherwise
 ROMC:7092 A7               and  a
 ROMC:7093 28 09            jr   z,709E         // Branch if not viable Paving terrain
 ROMC:7095 67               ld   h,a
 ROMC:7096 FA E5 CC         ld   a,(CCE5)
 ROMC:7099 BC               cp   h
 ROMC:709A 30 2C            jr   nc,70C8
 ROMC:709C 18 26            jr   70C4           // Ends with A = inverse of able to Pave over starting tile
 ROMC:709E 1E 00            ld   e,00
 ROMC:70A0 C5               push bc             // Loop begins here
 ROMC:70A1 D5               push de
 ROMC:70A2 CD D9 28         call 28D9           // BC = relative coordinates, Set Carry Flag based on relative coordinates being out of bounds
 ROMC:70A5 38 15            jr   c,70BC
 ROMC:70A7 EF 0B 70 47                          // A = Terrain Type
 ROMC:70AB CD CD 70         call 70CD           // A = 1 if Plains, 2 if Forest or Moor, 0 otherwise
 ROMC:70AE D1               pop  de
 ROMC:70AF C1               pop  bc
 ROMC:70B0 A7               and  a
 ROMC:70B1 28 0B            jr   z,70BE         // Ends cycle if not viable Paving terrain
 ROMC:70B3 67               ld   h,a
 ROMC:70B4 FA E5 CC         ld   a,(CCE5)
 ROMC:70B7 BC               cp   h
 ROMC:70B8 30 0E            jr   nc,70C8        // Ends with A = 0 if able to Pave over tile
 ROMC:70BA 18 02            jr   70BE
 ROMC:70BC D1               pop  de
 ROMC:70BD C1               pop  bc
 ROMC:70BE 1C               inc  e
 ROMC:70BF 7B               ld   a,e
 ROMC:70C0 FE 06            cp   a,06
 ROMC:70C2 20 DC            jr   nz,70A0
 ROMC:70C4 3E 01            ld   a,01
 ROMC:70C6 18 01            jr   70C9
 ROMC:70C8 AF               xor  a
 ROMC:70C9 E1               pop  hl
 ROMC:70CA D1               pop  de
 ROMC:70CB C1               pop  bc
 ROMC:70CC C9               ret                 // A = inverse of ability to Pave starting or adjacent tile
 ROMC:70CD E5               push hl
 ROMC:70CE EF 0B 07 47                          // A = Terrain base ID
 ROMC:70D2 26 01            ld   h,01
 ROMC:70D4 FE 0C            cp   a,0C
 ROMC:70D6 28 0B            jr   z,70E3
 ROMC:70D8 24               inc  h
 ROMC:70D9 FE 11            cp   a,11
 ROMC:70DB 28 06            jr   z,70E3
 ROMC:70DD FE 12            cp   a,12
 ROMC:70DF 28 02            jr   z,70E3
 ROMC:70E1 26 00            ld   h,00
 ROMC:70E3 7C               ld   a,h
 ROMC:70E4 E1               pop  hl
 ROMC:70E5 C9               ret                 // A = 1 if Plains, 2 if Forest or Moor, 0 otherwise
 ROMC:70E6 F0 82            ld   a,(ff00+82)
 ROMC:70E8 F5               push af
 ROMC:70E9 3E 05            ld   a,05
 ROMC:70EB E0 82            ld   (ff00+82),a
 ROMC:70ED E0 70            ld   (ff00+70),a
 ROMC:70EF FA C5 C9         ld   a,(C9C5)
 ROMC:70F2 E6 01            and  a,01
 ROMC:70F4 EE 01            xor  a,01
 ROMC:70F6 EF 0B 3C 57                          // WRAM Bank #6 map has enemy occupied (bit 1) and ZOC tiles (bit 0) marked
 ROMC:70FA 3E FF            ld   a,FF
 ROMC:70FC 21 00 D0         ld   hl,D000
 ROMC:70FF 01 80 0D         ld   bc,0D80
 ROMC:7102 CD 79 3B         call 3B79           // WRA5($D000) to ($DD7F) = -1
 ROMC:7105 F0 82            ld   a,(ff00+82)
 ROMC:7107 F5               push af
 ROMC:7108 3E 07            ld   a,07
 ROMC:710A E0 82            ld   (ff00+82),a
 ROMC:710C E0 70            ld   (ff00+70),a
 ROMC:710E AF               xor  a
 ROMC:710F 21 00 D0         ld   hl,D000
 ROMC:7112 01 80 0D         ld   bc,0D80
 ROMC:7115 CD 79 3B         call 3B79           // Empties WRA7($D000) to ($DD7F)
 ROMC:7118 F1               pop  af
 ROMC:7119 E0 82            ld   (ff00+82),a
 ROMC:711B E0 70            ld   (ff00+70),a
 ROMC:711D EF 0B 39 55                          // A = Movement Range
 ROMC:7121 E0 9B            ld   (ff00+9B),a
 ROMC:7123 3E 0D            ld   a,0D
 ROMC:7125 EF 12 AD 47                          // ($CD43) to ($CD76) hold Movement Costs for Movement Type with 0 MC for all terrain except Plains (1.5), Forest (3), and Moor (3)
 ROMC:7129 FA D9 C9         ld   a,(C9D9)
 ROMC:712C 47               ld   b,a
 ROMC:712D FA DA C9         ld   a,(C9DA)
 ROMC:7130 4F               ld   c,a
 ROMC:7131 FA C9 C9         ld   a,(C9C9)
 ROMC:7134 E0 9D            ld   (ff00+9D),a    // ($FF9D) holds Ammo
 ROMC:7136 CD 43 71         call 7143           // Establishes Movement tile data for Pave Command
 ROMC:7139 EF 0B 8A 42                          // Establishes all on-screen tiles' entire graphics, ($FF95) 2 byte holds screen shift coordinates
 ROMC:713D F1               pop  af
 ROMC:713E E0 82            ld   (ff00+82),a
 ROMC:7140 E0 70            ld   (ff00+70),a
 ROMC:7142 C9               ret                 // Establishes Movement for Pave Command
 ROMC:7143 AF               xor  a
 ROMC:7144 E0 99            ld   (ff00+99),a
 ROMC:7146 E0 9A            ld   (ff00+9A),a
 ROMC:7148 E0 9C            ld   (ff00+9C),a
 ROMC:714A CD F8 15         call 15F8           // HL = $D000 + B + C * 64
 ROMC:714D AF               xor  a
 ROMC:714E 77               ld   (hl),a
 ROMC:714F F0 82            ld   a,(ff00+82)
 ROMC:7151 F5               push af
 ROMC:7152 3E 01            ld   a,01
 ROMC:7154 E0 82            ld   (ff00+82),a
 ROMC:7156 E0 70            ld   (ff00+70),a
 ROMC:7158 7E               ld   a,(hl)
 ROMC:7159 E6 3F            and  a,3F
 ROMC:715B E5               push hl
 ROMC:715C EF 0B 70 47                          // A = Terrain Type
 ROMC:7160 CD CD 70         call 70CD           // A = 1 if Plains, 2 if Forest or Moor, 0 otherwise
 ROMC:7163 57               ld   d,a
 ROMC:7164 3E 07            ld   a,07
 ROMC:7166 E0 82            ld   (ff00+82),a
 ROMC:7168 E0 70            ld   (ff00+70),a
 ROMC:716A E1               pop  hl
 ROMC:716B 72               ld   (hl),d
 ROMC:716C F1               pop  af
 ROMC:716D E0 82            ld   (ff00+82),a
 ROMC:716F E0 70            ld   (ff00+70),a
 ROMC:7171 F0 82            ld   a,(ff00+82)
 ROMC:7173 F5               push af
 ROMC:7174 3E 02            ld   a,02
 ROMC:7176 E0 82            ld   (ff00+82),a
 ROMC:7178 E0 70            ld   (ff00+70),a
 ROMC:717A CB FE            set  7,(hl)
 ROMC:717C F1               pop  af
 ROMC:717D E0 82            ld   (ff00+82),a
 ROMC:717F E0 70            ld   (ff00+70),a
 ROMC:7181 F0 9A            ld   a,(ff00+9A)
 ROMC:7183 CD 18 72         call 7218           // HL = $DE00 + A * 2
 ROMC:7186 70               ld   (hl),b
 ROMC:7187 23               inc  hl
 ROMC:7188 71               ld   (hl),c
 ROMC:7189 21 9A FF         ld   hl,FF9A
 ROMC:718C 34               inc  (hl)
 ROMC:718D F0 99            ld   a,(ff00+99)    // Bigger loop begins here
 ROMC:718F CD 18 72         call 7218           // HL = $DE00 + A * 2
 ROMC:7192 46               ld   b,(hl)
 ROMC:7193 23               inc  hl
 ROMC:7194 4E               ld   c,(hl)
 ROMC:7195 CD F8 15         call 15F8           // HL = $D000 + B + C * 64
 ROMC:7198 7E               ld   a,(hl)         // Movement requirement, most likely
 ROMC:7199 E0 9C            ld   (ff00+9C),a
 ROMC:719B F0 82            ld   a,(ff00+82)
 ROMC:719D F5               push af
 ROMC:719E 3E 07            ld   a,07
 ROMC:71A0 E0 82            ld   (ff00+82),a
 ROMC:71A2 E0 70            ld   (ff00+70),a
 ROMC:71A4 7E               ld   a,(hl)
 ROMC:71A5 E0 9E            ld   (ff00+9E),a
 ROMC:71A7 F1               pop  af
 ROMC:71A8 E0 82            ld   (ff00+82),a
 ROMC:71AA E0 70            ld   (ff00+70),a
 ROMC:71AC 1E 00            ld   e,00
 ROMC:71AE C5               push bc             // Loop begins here
 ROMC:71AF D5               push de
 ROMC:71B0 CD D9 28         call 28D9           // BC = relative coordinates, Set Carry Flag based on relative coordinates being out of bounds
 ROMC:71B3 38 4E            jr   c,7203         // Ends cycle if tile is out of bounds
 ROMC:71B5 CD 21 72         call 7221           // A = 0 if tile BC can be traversed without problem, 1 otherwise
 ROMC:71B8 A7               and  a
 ROMC:71B9 20 48            jr   nz,7203        // Ends cycle if tile isn't going to be possible to traverse
 ROMC:71BB F0 82            ld   a,(ff00+82)
 ROMC:71BD F5               push af
 ROMC:71BE 3E 01            ld   a,01
 ROMC:71C0 E0 82            ld   (ff00+82),a
 ROMC:71C2 E0 70            ld   (ff00+70),a
 ROMC:71C4 7E               ld   a,(hl)
 ROMC:71C5 E6 3F            and  a,3F
 ROMC:71C7 CD CD 70         call 70CD           // A = 1 if Plains, 2 if Forest or Moor, 0 otherwise
 ROMC:71CA 5F               ld   e,a
 ROMC:71CB F1               pop  af
 ROMC:71CC E0 82            ld   (ff00+82),a
 ROMC:71CE E0 70            ld   (ff00+70),a
 ROMC:71D0 F0 9E            ld   a,(ff00+9E)
 ROMC:71D2 83               add  e
 ROMC:71D3 5F               ld   e,a            // E = Cost
 ROMC:71D4 F0 9D            ld   a,(ff00+9D)    // A = Ammo
 ROMC:71D6 BB               cp   e
 ROMC:71D7 38 2A            jr   c,7203         // Ends cycle if tile can't be Paved due to insufficient "Ammo"
 ROMC:71D9 F0 82            ld   a,(ff00+82)
 ROMC:71DB F5               push af
 ROMC:71DC 3E 07            ld   a,07
 ROMC:71DE E0 82            ld   (ff00+82),a
 ROMC:71E0 E0 70            ld   (ff00+70),a
 ROMC:71E2 73               ld   (hl),e         // Marks tile with Total Ammo Cost
 ROMC:71E3 3E 02            ld   a,02
 ROMC:71E5 E0 82            ld   (ff00+82),a
 ROMC:71E7 E0 70            ld   (ff00+70),a
 ROMC:71E9 CB FE            set  7,(hl)         // Marks tile as valid to move onto
 ROMC:71EB F1               pop  af
 ROMC:71EC E0 82            ld   (ff00+82),a
 ROMC:71EE E0 70            ld   (ff00+70),a
 ROMC:71F0 72               ld   (hl),d
 ROMC:71F1 EF 0B AE 57                          // Zero Flag triggered by Enemy ZOC flag inactive on map tile indicated by HL
 ROMC:71F5 20 0C            jr   nz,7203
 ROMC:71F7 F0 9A            ld   a,(ff00+9A)
 ROMC:71F9 CD 18 72         call 7218           // HL = $DE00 + A * 2
 ROMC:71FC 70               ld   (hl),b
 ROMC:71FD 23               inc  hl
 ROMC:71FE 71               ld   (hl),c
 ROMC:71FF 21 9A FF         ld   hl,FF9A
 ROMC:7202 34               inc  (hl)           // Marks given tile for surrounding tiles check if not under Enemy ZOC
 ROMC:7203 D1               pop  de
 ROMC:7204 C1               pop  bc
 ROMC:7205 1C               inc  e
 ROMC:7206 7B               ld   a,e
 ROMC:7207 FE 06            cp   a,06
 ROMC:7209 20 A3            jr   nz,71AE
 ROMC:720B F0 99            ld   a,(ff00+99)
 ROMC:720D 3C               inc  a
 ROMC:720E E0 99            ld   (ff00+99),a
 ROMC:7210 21 9A FF         ld   hl,FF9A
 ROMC:7213 BE               cp   (hl)
 ROMC:7214 C2 8D 71         jp   nz,718D
 ROMC:7217 C9               ret                 // Establishes Movement for Pave Command
 ROMC:7218 6F               ld   l,a
 ROMC:7219 26 00            ld   h,00
 ROMC:721B 29               add  hl,hl
 ROMC:721C 7C               ld   a,h
 ROMC:721D C6 DE            add  a,DE
 ROMC:721F 67               ld   h,a
 ROMC:7220 C9               ret                 // HL = $DE00 + A * 2
 ROMC:7221 C5               push bc
 ROMC:7222 CD F8 15         call 15F8           // HL = $D000 + B + C * 64
 ROMC:7225 EF 0B C2 57                          // Zero Flag triggered by Enemy Occupation flag inactive on map tile indicated by HL
 ROMC:7229 20 30            jr   nz,725B        // Ends immediately with A = 1 if tile is occupied by enemy already
 ROMC:722B E5               push hl
 ROMC:722C F0 82            ld   a,(ff00+82)
 ROMC:722E F5               push af
 ROMC:722F 3E 01            ld   a,01
 ROMC:7231 E0 82            ld   (ff00+82),a
 ROMC:7233 E0 70            ld   (ff00+70),a
 ROMC:7235 7E               ld   a,(hl)
 ROMC:7236 E6 3F            and  a,3F
 ROMC:7238 5F               ld   e,a
 ROMC:7239 16 00            ld   d,00           // DE = Terrain ID
 ROMC:723B 21 43 CD         ld   hl,CD43
 ROMC:723E 19               add  hl,de
 ROMC:723F 5E               ld   e,(hl)         // E = Movement Cost
 ROMC:7240 F1               pop  af
 ROMC:7241 E0 82            ld   (ff00+82),a
 ROMC:7243 E0 70            ld   (ff00+70),a
 ROMC:7245 E1               pop  hl
 ROMC:7246 7B               ld   a,e
 ROMC:7247 A7               and  a
 ROMC:7248 28 11            jr   z,725B         // Ends immediately with A = 1 if movement onto tile isn't happening
 ROMC:724A F0 9C            ld   a,(ff00+9C)    // Movement requirement is a safe bet
 ROMC:724C 83               add  e
 ROMC:724D 38 0C            jr   c,725B         // Ends with A = 1 if total Movement requirement would clear 16 (this should NEVER happen)
 ROMC:724F 57               ld   d,a
 ROMC:7250 BE               cp   (hl)
 ROMC:7251 30 08            jr   nc,725B
 ROMC:7253 F0 9B            ld   a,(ff00+9B)    // A = Movement Range
 ROMC:7255 BA               cp   d
 ROMC:7256 38 03            jr   c,725B         // Ends with A = 1 if tile is out of reach
 ROMC:7258 AF               xor  a
 ROMC:7259 18 02            jr   725D
 ROMC:725B 3E 01            ld   a,01           // Meets back here from Enemy Occupation Flag active
 ROMC:725D C1               pop  bc
 ROMC:725E C9               ret                 // A = 0 if tile BC can be traversed without problem, 1 otherwise
 ROMC:725F F0 82            ld   a,(ff00+82)
 ROMC:7261 F5               push af
 ROMC:7262 3E 05            ld   a,05
 ROMC:7264 E0 82            ld   (ff00+82),a
 ROMC:7266 E0 70            ld   (ff00+70),a
 ROMC:7268 3E 09            ld   a,09           // Paving
 ROMC:726A EF 0C BB 66                          // Action Animation cutscenes play out where applicable
 ROMC:726E 16 00            ld   d,00
 ROMC:7270 7A               ld   a,d            // Loop begins here
 ROMC:7271 87               add  a
 ROMC:7272 21 81 DD         ld   hl,DD81
 ROMC:7275 CD BC 29         call 29BC           // HL = $DD81 + A * 2
 ROMC:7278 46               ld   b,(hl)
 ROMC:7279 23               inc  hl
 ROMC:727A 4E               ld   c,(hl)
 ROMC:727B EF 0B 70 47                          // A = Terrain Type
 ROMC:727F CD CD 70         call 70CD           // A = 1 if Plains, 2 if Forest or Moor, 0 otherwise
 ROMC:7282 A7               and  a
 ROMC:7283 28 1A            jr   z,729F         // Ends cycle if tile can't be converted to Road
 ROMC:7285 67               ld   h,a            // H holds Materials cost for Road conversion
 ROMC:7286 FA E5 CC         ld   a,(CCE5)
 ROMC:7289 94               sub  h
 ROMC:728A EA E5 CC         ld   (CCE5),a       // Materials deduction handled
 ROMC:728D 3E 21            ld   a,21
 ROMC:728F EF 0B 76 47                          // Terrain on tile updated as Road
 ROMC:7293 F0 82            ld   a,(ff00+82)
 ROMC:7295 F5               push af             // Saves WRAM Bank
 ROMC:7296 EF 0B D1 43                          // Establishes tile BC's entire graphics
 ROMC:729A F1               pop  af
 ROMC:729B E0 82            ld   (ff00+82),a
 ROMC:729D E0 70            ld   (ff00+70),a
 ROMC:729F 14               inc  d
 ROMC:72A0 FA 80 DD         ld   a,(DD80)
 ROMC:72A3 BA               cp   d
 ROMC:72A4 20 CA            jr   nz,7270        // Cycles until Work Car has moved full distance
 ROMC:72A6 EF 11 8A 4D                          // set 6,(C783), intended to signify Work Car command usage for the map
 ROMC:72AA EF 11 67 4D                          // Terrain change count incremented (Craft Medal)
 ROMC:72AE F1               pop  af
 ROMC:72AF E0 82            ld   (ff00+82),a
 ROMC:72B1 E0 70            ld   (ff00+70),a
 ROMC:72B3 C9               ret                 // Pave Command playing out upon confirmation
 ROMC:72B4 FA 33 C6         ld   a,(C633)
 ROMC:72B7 E6 01            and  a,01
 ROMC:72B9 87               add  a
 ROMC:72BA 21 93 C9         ld   hl,C993
 ROMC:72BD CD BC 29         call 29BC           // HL += A
 ROMC:72C0 FA 91 C9         ld   a,(C991)
 ROMC:72C3 22               ldi  (hl),a
 ROMC:72C4 FA 92 C9         ld   a,(C992)
 ROMC:72C7 77               ld   (hl),a         // Establishes default coordinates
 ROMC:72C8 FA 97 CA         ld   a,(CA97)
 ROMC:72CB A7               and  a
 ROMC:72CC C2 D4 72         jp   nz,72D4
 ROMC:72CF 3E 01            ld   a,01
 ROMC:72D1 EA 97 CA         ld   (CA97),a
 ROMC:72D4 AF               xor  a
 ROMC:72D5 CD 16 38         call 3816
 ROMC:72D8 3E 0D            ld   a,0D
 ROMC:72DA CD 44 38         call 3844
 ROMC:72DD C9               ret                 // Phase end cursor defaulting with accommodating sounds, ($CA97) defaulted to 1
 ROMC:72DE C5               push bc
 ROMC:72DF D5               push de
 ROMC:72E0 AF               xor  a
 ROMC:72E1 EA 40 C9         ld   (C940),a
 ROMC:72E4 1E 32            ld   e,32
 ROMC:72E6 FA 33 C6         ld   a,(C633)
 ROMC:72E9 E6 01            and  a,01
 ROMC:72EB 28 05            jr   z,72F2
 ROMC:72ED 3E 32            ld   a,32
 ROMC:72EF EA 40 C9         ld   (C940),a
 ROMC:72F2 D5               push de             // Loop begins here
 ROMC:72F3 FA 40 C9         ld   a,(C940)
 ROMC:72F6 0E 00            ld   c,00
 ROMC:72F8 EF 12 66 40                          
 ROMC:72FC A7               and  a
 ROMC:72FD CA 96 73         jp   z,7396         // End cycle if unit doesn't exist
 ROMC:7300 EA 41 C9         ld   (C941),a       // ($C941) holds Unit Type
 ROMC:7303 FA 40 C9         ld   a,(C940)
 ROMC:7306 0E 03            ld   c,03
 ROMC:7308 EF 12 66 40                          
 ROMC:730C CB 4F            bit  1,a
 ROMC:730E C2 96 73         jp   nz,7396        // End cycle if unit is in Reserve
 ROMC:7311 CB 47            bit  0,a
 ROMC:7313 C2 96 73         jp   nz,7396        // Or is Loaded
 ROMC:7316 FA 41 C9         ld   a,(C941)
 ROMC:7319 0E 18            ld   c,18
 ROMC:731B EF 12 37 40                          // Unit Family
 ROMC:731F FE 02            cp   a,02
 ROMC:7321 20 73            jr   nz,7396        // End cycle if non-Air
 ROMC:7323 FA 40 C9         ld   a,(C940)
 ROMC:7326 0E 01            ld   c,01
 ROMC:7328 EF 12 83 40                          
 ROMC:732C 7B               ld   a,e
 ROMC:732D 47               ld   b,a
 ROMC:732E EA 42 C9         ld   (C942),a
 ROMC:7331 7A               ld   a,d
 ROMC:7332 4F               ld   c,a
 ROMC:7333 EA 43 C9         ld   (C943),a       // BC and ($C942) 2 byte hold coordinates
 ROMC:7336 EF 0B 70 47                          
 ROMC:733A 4F               ld   c,a            // C = Terrain Type
 ROMC:733B EF 0B F7 7C                          // A = 0 for owner's turn, 1 for opponent's turn, 2 for Neutral property, or 3 for non-property tile
 ROMC:733F FE 00            cp   a,00
 ROMC:7341 20 0D            jr   nz,7350        // Fuel Upkeep management forced for unit if not owner's turn
 ROMC:7343 79               ld   a,c
 ROMC:7344 EF 0B 07 47                          // A = Terrain base ID
 ROMC:7348 FE 06            cp   a,06           // Airport?
 ROMC:734A 28 4A            jr   z,7396
 ROMC:734C FE 08            cp   a,08           // Simple Airport?
 ROMC:734E 28 46            jr   z,7396         // Skip Fuel Upkeep management and end cycle if on refueling location
 ROMC:7350 FA 41 C9         ld   a,(C941)
 ROMC:7353 0E 0F            ld   c,0F
 ROMC:7355 EF 12 37 40                          // Fuel Upkeep
 ROMC:7359 47               ld   b,a
 ROMC:735A FA 40 C9         ld   a,(C940)
 ROMC:735D 0E 07            ld   c,07
 ROMC:735F EF 12 66 40                          
 ROMC:7363 90               sub  b              // Fuel Upkeep handled
 ROMC:7364 38 0E            jr   c,7374         // Jumps to unit loss if Fuel Upkeep exceeds remaining Fuel
 ROMC:7366 28 0C            jr   z,7374         // Jumps to unit loss if Fuel Upkeep results in 0 Fuel
 ROMC:7368 47               ld   b,a
 ROMC:7369 FA 40 C9         ld   a,(C940)
 ROMC:736C 0E 07            ld   c,07
 ROMC:736E EF 12 A1 40                          // Fuel updated
 ROMC:7372 18 22            jr   7396           // Cycle ended without unit loss for fuel updating
 ROMC:7374 FA 42 C9         ld   a,(C942)
 ROMC:7377 47               ld   b,a
 ROMC:7378 FA 43 C9         ld   a,(C943)
 ROMC:737B 4F               ld   c,a
 ROMC:737C C5               push bc
 ROMC:737D EF 0B 01 7B                          // Handles map graphics shift to coordinates BC
 ROMC:7381 EF 0B 54 46                          // Updates Cursor Sprite based on if building on tile is possible
 ROMC:7385 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMC:7388 C1               pop  bc
 ROMC:7389 FA 40 C9         ld   a,(C940)
 ROMC:738C EF 0C CB 4E                          // Unit loss animation and handling (A is unit #)
 ROMC:7390 3E 0A            ld   a,0A           // Fuel Exhausted
 ROMC:7392 EF 0B B5 51                          // Handles Popup Message as a whole including momentary cursor disabling (A is Popup Message #)
 ROMC:7396 D1               pop  de             // Meet back after simple Fuel update
 ROMC:7397 FA 40 C9         ld   a,(C940)
 ROMC:739A 3C               inc  a
 ROMC:739B EA 40 C9         ld   (C940),a
 ROMC:739E 1D               dec  e
 ROMC:739F C2 F2 72         jp   nz,72F2
 ROMC:73A2 D1               pop  de
 ROMC:73A3 C1               pop  bc
 ROMC:73A4 C9               ret                 // Handles start of phase Fuel Check as a whole
 ROMC:73A5 AF               xor  a
 ROMC:73A6 EA 97 CA         ld   (CA97),a
 ROMC:73A9 EF 0B 00 47                          // set 0,WRA4($D000 + ($C98D) * 16)
 ROMC:73AD CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMC:73B0 FA 33 C6         ld   a,(C633)
 ROMC:73B3 E6 01            and  a,01
 ROMC:73B5 87               add  a
 ROMC:73B6 21 93 C9         ld   hl,C993
 ROMC:73B9 CD BC 29         call 29BC
 ROMC:73BC 46               ld   b,(hl)
 ROMC:73BD 23               inc  hl
 ROMC:73BE 4E               ld   c,(hl)         // BC = active player's default coordinates
 ROMC:73BF EF 0B 01 7B                          // Handles map graphics shift to coordinates BC
 ROMC:73C3 CD 5E 74         call 745E           // New phase card animation
 ROMC:73C6 AF               xor  a
 ROMC:73C7 E0 B1            ld   (ff00+B1),a    // Water timer paused
 ROMC:73C9 EF 0B 57 40                          // Establishes potential cursor sprite graphic palettes
 ROMC:73CD CD F2 06         call 06F2           // Both BG and Sprite Palette tables are updated
 ROMC:73D0 CD D2 04         call 04D2           // Next frame
 ROMC:73D3 AF               xor  a
 ROMC:73D4 CB C7            set  0,a
 ROMC:73D6 E0 B1            ld   (ff00+B1),a
 ROMC:73D8 EF 0B 2F 7C                          // Establishes income values
 ROMC:73DC CD 30 74         call 7430           // Handles income
 ROMC:73DF CD DE 72         call 72DE           // Handles start of phase Fuel Check as a whole
 ROMC:73E2 FA 33 C6         ld   a,(C633)
 ROMC:73E5 E6 01            and  a,01
 ROMC:73E7 EF 12 E0 45                          // Clears Supplied Flag for all units of given side
 ROMC:73EB FA 33 C6         ld   a,(C633)
 ROMC:73EE E6 01            and  a,01           // A determines active player
 ROMC:73F0 21 31 C6         ld   hl,C631
 ROMC:73F3 CD BC 29         call 29BC
 ROMC:73F6 7E               ld   a,(hl)         // A = CPU status of active player
 ROMC:73F7 FE 01            cp   a,01
 ROMC:73F9 28 07            jr   z,7402         // Skip next 3 lines if active player is CPU
 ROMC:73FB FA 85 C6         ld   a,(C685)
 ROMC:73FE CB 5F            bit  3,a            // A = Auto-Supply Flag for configuration
 ROMC:7400 28 1A            jr   z,741C         // Skip rest of Auto-Supplying segment if Auto-Supply Flag is off
 ROMC:7402 CD 03 75         call 7503           // Start of phase resupply/repair
 ROMC:7405 FA 33 C6         ld   a,(C633)
 ROMC:7408 E6 01            and  a,01           // A = active player
 ROMC:740A EF 12 18 46                          // A = number of supplied units
 ROMC:740E A7               and  a
 ROMC:740F 28 0B            jr   z,741C         // Skip rest of Auto-Supplying segment if no units get supplied
 ROMC:7411 3E 0F            ld   a,0F
 ROMC:7413 CD 44 38         call 3844
 ROMC:7416 3E 09            ld   a,09           // All Supply Complete
 ROMC:7418 EF 0B B5 51                          // Handles Popup Message as a whole including momentary cursor disabling (A is Popup Message #)
 ROMC:741C FA 33 C6         ld   a,(C633)       // Skipped to here if Auto-Supplying isn't done
 ROMC:741F E6 01            and  a,01           // A = active player
 ROMC:7421 21 31 C6         ld   hl,C631
 ROMC:7424 CD BC 29         call 29BC
 ROMC:7427 7E               ld   a,(hl)         // A = CPU status of active player
 ROMC:7428 FE 01            cp   a,01
 ROMC:742A C8               ret  z              // End if AI is in control
 ROMC:742B EF 13 A3 5C                          
 ROMC:742F C9               ret  
 ROMC:7430 FA 33 C6         ld   a,(C633)
 ROMC:7433 E6 01            and  a,01
 ROMC:7435 87               add  a
 ROMC:7436 4F               ld   c,a
 ROMC:7437 06 00            ld   b,00
 ROMC:7439 21 3E C6         ld   hl,C63E
 ROMC:743C 09               add  hl,bc
 ROMC:743D 5E               ld   e,(hl)
 ROMC:743E 23               inc  hl
 ROMC:743F 56               ld   d,(hl)         // DE = active player's Gold income / 10
 ROMC:7440 06 0A            ld   b,0A
 ROMC:7442 EF 0B 6F 7B                          // Adds DE to active player's Gold
 ROMC:7446 05               dec  b
 ROMC:7447 20 F9            jr   nz,7442        // This is done 10 times to handle the full income
 ROMC:7449 FA 33 C6         ld   a,(C633)
 ROMC:744C E6 01            and  a,01
 ROMC:744E 87               add  a
 ROMC:744F 4F               ld   c,a
 ROMC:7450 06 00            ld   b,00
 ROMC:7452 21 42 C6         ld   hl,C642
 ROMC:7455 09               add  hl,bc
 ROMC:7456 5E               ld   e,(hl)
 ROMC:7457 23               inc  hl
 ROMC:7458 56               ld   d,(hl)         // DE = active player's Materials income
 ROMC:7459 EF 0B EC 7B                          // Active player's Materials is increased by the income
 ROMC:745D C9               ret                 // Handles income
 ROMC:745E CD 23 76         call 7623           // Establishes start of phase card graphics data
 ROMC:7461 CD A2 05         call 05A2           // Button update, next frame
 ROMC:7464 CD 78 38         call 3878           // A = 1 if ($C105) is active, 0 otherwise
 ROMC:7467 A7               and  a
 ROMC:7468 20 F7            jr   nz,7461
 ROMC:746A FA 33 C6         ld   a,(C633)
 ROMC:746D E6 01            and  a,01
 ROMC:746F C6 60            add  a,60
 ROMC:7471 CD 44 38         call 3844
 ROMC:7474 01 06 05         ld   bc,0506
 ROMC:7477 11 06 0A         ld   de,0A06
 ROMC:747A EF 0B 3D 76                          // Sets up next table of covered graphics within late WRA4 Bank (BC is starting location relative to scroll, DE is size)
 ROMC:747E EF 10 09 6A                          // Tile placement and coloring handled for [$9800 + B + C * 32] table size indicated by DE using [$DC6C] and [$DC6D] as the base
 ROMC:7482 CD 73 75         call 7573           // Establishes all sprites for new phase card
 ROMC:7485 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1 (loop begins here)
 ROMC:7488 CD A2 05         call 05A2           // Button update, next frame
 ROMC:748B F0 91            ld   a,(ff00+91)
 ROMC:748D E6 0B            and  a,0B           // A, B, or Start
 ROMC:748F 20 39            jr   nz,74CA
 ROMC:7491 FA D4 C9         ld   a,(C9D4)       // New phase card nation
 ROMC:7494 06 02            ld   b,02
 ROMC:7496 CD 9A 2E         call 2E9A           // A = WRA4($D002 + ($C9D4) * 16)
 ROMC:7499 C6 04            add  a,04
 ROMC:749B FE 58            cp   a,58
 ROMC:749D 28 1D            jr   z,74BC
 ROMC:749F 4F               ld   c,a
 ROMC:74A0 FA D4 C9         ld   a,(C9D4)       // New phase card nation
 ROMC:74A3 06 02            ld   b,02
 ROMC:74A5 CD 87 2E         call 2E87           // WRA4($D002 + A * 16) = C
 ROMC:74A8 FA D5 C9         ld   a,(C9D5)       // New phase card "DAYS"
 ROMC:74AB CD F3 74         call 74F3           // Subtracts 4 from Sprite A's X Coordinate
 ROMC:74AE FA D6 C9         ld   a,(C9D6)       // New phase card Day # 10s digit
 ROMC:74B1 CD F3 74         call 74F3           // Subtracts 4 from Sprite A's X Coordinate
 ROMC:74B4 FA D7 C9         ld   a,(C9D7)       // New phase card Day # 1s digit
 ROMC:74B7 CD F3 74         call 74F3           // Subtracts 4 from Sprite A's X Coordinate
 ROMC:74BA 18 C9            jr   7485
 ROMC:74BC 16 78            ld   d,78           // 120 frames
 ROMC:74BE CD A2 05         call 05A2           // Button update, next frame
 ROMC:74C1 F0 91            ld   a,(ff00+91)
 ROMC:74C3 E6 03            and  a,03           // A or B
 ROMC:74C5 20 03            jr   nz,74CA
 ROMC:74C7 15               dec  d
 ROMC:74C8 20 F4            jr   nz,74BE
 ROMC:74CA FA D4 C9         ld   a,(C9D4)       // New phase card nation
 ROMC:74CD CD 1F 2E         call 2E1F           // Handles clear-up of sprite
 ROMC:74D0 FA D5 C9         ld   a,(C9D5)       // New phase card "DAYS"
 ROMC:74D3 CD 1F 2E         call 2E1F           // Handles clear-up of sprite
 ROMC:74D6 FA D6 C9         ld   a,(C9D6)       // New phase card Day # 10s digit
 ROMC:74D9 CD 1F 2E         call 2E1F           // Handles clear-up of sprite
 ROMC:74DC FA D7 C9         ld   a,(C9D7)       // New phase card Day # 1s digit
 ROMC:74DF CD 1F 2E         call 2E1F           // Handles clear-up of sprite
 ROMC:74E2 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMC:74E5 CD D2 04         call 04D2           // Next frame
 ROMC:74E8 EF 0B 45 76                          // Restores last table of covered graphics
 ROMC:74EC 3E AB            ld   a,AB
 ROMC:74EE EF 10 CE 68                          // WRA4($DC6C) = 171
 ROMC:74F2 C9               ret                 // New phase card animation
 ROMC:74F3 F5               push af
 ROMC:74F4 06 02            ld   b,02
 ROMC:74F6 CD 9A 2E         call 2E9A           // A = WRA4($D002 + A * 16)
 ROMC:74F9 D6 04            sub  a,04
 ROMC:74FB 4F               ld   c,a
 ROMC:74FC F1               pop  af
 ROMC:74FD 06 02            ld   b,02
 ROMC:74FF CD 87 2E         call 2E87           // WRA4($D002 + A * 16) = C
 ROMC:7502 C9               ret                 // Subtracts 4 from Sprite A's X Coordinate
 ROMC:7503 C5               push bc
 ROMC:7504 D5               push de
 ROMC:7505 AF               xor  a
 ROMC:7506 EA 40 C9         ld   (C940),a       // ($C940) is emptied
 ROMC:7509 1E 32            ld   e,32
 ROMC:750B FA 33 C6         ld   a,(C633)
 ROMC:750E E6 01            and  a,01
 ROMC:7510 28 05            jr   z,7517         // Skip next 2 lines if active player is Red Star
 ROMC:7512 3E 32            ld   a,32
 ROMC:7514 EA 40 C9         ld   (C940),a       // ($C940) is 50 if active player is White Moon
 ROMC:7517 FA 40 C9         ld   a,(C940)       // A is whichever unit is being checked (loop starts here)
 ROMC:751A 0E 00            ld   c,00
 ROMC:751C EF 12 66 40                          // A = Unit Type
 ROMC:7520 A7               and  a
 ROMC:7521 28 07            jr   z,752A         // Skip property resupply and repair if unit doesn't exist
 ROMC:7523 FA 40 C9         ld   a,(C940)
 ROMC:7526 EF 0C 58 6E                          // Handles property resupply and repair
 ROMC:752A FA 40 C9         ld   a,(C940)
 ROMC:752D 3C               inc  a
 ROMC:752E EA 40 C9         ld   (C940),a       // Increment ($C940)
 ROMC:7531 1D               dec  e
 ROMC:7532 20 E3            jr   nz,7517        // Loop process for entire army
 ROMC:7534 AF               xor  a
 ROMC:7535 EA 40 C9         ld   (C940),a       // ($C940) is emptied
 ROMC:7538 1E 32            ld   e,32
 ROMC:753A FA 33 C6         ld   a,(C633)
 ROMC:753D E6 01            and  a,01
 ROMC:753F 28 05            jr   z,7546         // Skip next 2 lines if active player is Red Star
 ROMC:7541 3E 32            ld   a,32
 ROMC:7543 EA 40 C9         ld   (C940),a       // ($C940) is 50 if active player is White Moon
 ROMC:7546 FA 40 C9         ld   a,(C940)       // A is whichever unit is being checked (loop starts here)
 ROMC:7549 0E 00            ld   c,00
 ROMC:754B EF 12 66 40                          // A = Unit Type
 ROMC:754F A7               and  a
 ROMC:7550 28 14            jr   z,7566         // End cycle if unit doesn't exist
 ROMC:7552 FA 40 C9         ld   a,(C940)
 ROMC:7555 0E 03            ld   c,03
 ROMC:7557 EF 12 66 40                          
 ROMC:755B CB 47            bit  0,a
 ROMC:755D 28 07            jr   z,7566         // End cycle if unit isn't Loaded
 ROMC:755F FA 40 C9         ld   a,(C940)
 ROMC:7562 EF 0C B7 6E                          // Handles resupply and repairs of Loaded Air unit
 ROMC:7566 FA 40 C9         ld   a,(C940)
 ROMC:7569 3C               inc  a
 ROMC:756A EA 40 C9         ld   (C940),a       // Increment ($C940)
 ROMC:756D 1D               dec  e
 ROMC:756E 20 D6            jr   nz,7546        // Loop process for entire army
 ROMC:7570 D1               pop  de
 ROMC:7571 C1               pop  bc
 ROMC:7572 C9               ret                 // Start of phase resupply/repair
 ROMC:7573 FA 33 C6         ld   a,(C633)
 ROMC:7576 E6 01            and  a,01
 ROMC:7578 87               add  a
 ROMC:7579 21 01 76         ld   hl,7601
 ROMC:757C CD BC 29         call 29BC           // HL += A
 ROMC:757F 5E               ld   e,(hl)
 ROMC:7580 23               inc  hl
 ROMC:7581 56               ld   d,(hl)
 ROMC:7582 3E 20            ld   a,20
 ROMC:7584 0E 98            ld   c,98
 ROMC:7586 06 0C            ld   b,0C
 ROMC:7588 CD E8 2D         call 2DE8           // A = number of already active sprites; $Dxx5~$DxxB prepared (B is ROM Block of Sprite, C is base Character Tile # / 2 with bit 7 determining VRAM Bank; and DE is pointer to sprite stats modification tables pointers)
 ROMC:758B EA D4 C9         ld   (C9D4),a
 ROMC:758E 06 05            ld   b,05
 ROMC:7590 CD C9 2E         call 2EC9           // WRA4($D003 + A * 16) has Palette bits modified according to B
 ROMC:7593 FA D4 C9         ld   a,(C9D4)       // New phase card nation
 ROMC:7596 06 E8            ld   b,E8
 ROMC:7598 0E 50            ld   c,50           // 224,64
 ROMC:759A CD AE 2E         call 2EAE           // WRA4($D001 + A * 16) = C; WRA4($D002 + A * 16) = B
 ROMC:759D 3E 20            ld   a,20
 ROMC:759F 0E 98            ld   c,98
 ROMC:75A1 06 0C            ld   b,0C
 ROMC:75A3 11 DC 76         ld   de,76DC        // "Days"
 ROMC:75A6 CD E8 2D         call 2DE8           // A = number of already active sprites; $Dxx5~$DxxB prepared (B is ROM Block of Sprite, C is base Character Tile # / 2 with bit 7 determining VRAM Bank; and DE is pointer to sprite stats modification tables pointers)
 ROMC:75A9 EA D5 C9         ld   (C9D5),a
 ROMC:75AC 06 05            ld   b,05
 ROMC:75AE CD C9 2E         call 2EC9           // WRA4($D003 + A * 16) has Palette bits modified according to B
 ROMC:75B1 FA D5 C9         ld   a,(C9D5)       // New phase card "DAYS"
 ROMC:75B4 06 D8            ld   b,D8
 ROMC:75B6 0E 65            ld   c,65           // 208,85
 ROMC:75B8 CD AE 2E         call 2EAE           // WRA4($D001 + A * 16) = C; WRA4($D002 + A * 16) = B
 ROMC:75BB FA 33 C6         ld   a,(C633)
 ROMC:75BE CB 3F            srl  a
 ROMC:75C0 3C               inc  a
 ROMC:75C1 CD 7E 29         call 297E           // A = ((Day # % 160) / 10) * 16 + (Day # % 10), add 1 if Day # is an even number at least 160
 ROMC:75C4 F5               push af
 ROMC:75C5 CB 37            swap a
 ROMC:75C7 CD E3 75         call 75E3           // Establishes new phase card's Day 10s Digit sprite, with A being Sprite #
 ROMC:75CA EA D6 C9         ld   (C9D6),a
 ROMC:75CD 06 B0            ld   b,B0
 ROMC:75CF 0E 65            ld   c,65           // 168,85
 ROMC:75D1 CD AE 2E         call 2EAE           // WRA4($D001 + A * 16) = C; WRA4($D002 + A * 16) = B
 ROMC:75D4 F1               pop  af
 ROMC:75D5 CD E3 75         call 75E3           // Establishes new phase card's Day 1s Digit sprite, with A being Sprite #
 ROMC:75D8 EA D7 C9         ld   (C9D7),a
 ROMC:75DB 06 C0            ld   b,C0
 ROMC:75DD 0E 65            ld   c,65           // 184,85
 ROMC:75DF CD AE 2E         call 2EAE           // WRA4($D001 + A * 16) = C; WRA4($D002 + A * 16) = B
 ROMC:75E2 C9               ret                 // Establishes all sprites for new phase card
 ROMC:75E3 E6 0F            and  a,0F
 ROMC:75E5 21 05 76         ld   hl,7605
 ROMC:75E8 CD BC 29         call 29BC           // HL += A
 ROMC:75EB 7E               ld   a,(hl)
 ROMC:75EC C6 98            add  a,98
 ROMC:75EE 4F               ld   c,a
 ROMC:75EF 06 0C            ld   b,0C
 ROMC:75F1 3E 20            ld   a,20
 ROMC:75F3 11 0F 76         ld   de,760F
 ROMC:75F6 CD E8 2D         call 2DE8           // A = number of already active sprites; $Dxx5~$DxxB prepared (B is ROM Block of Sprite, C is base Character Tile # / 2 with bit 7 determining VRAM Bank; and DE is pointer to sprite stats modification tables pointers)
 ROMC:75F9 F5               push af
 ROMC:75FA 06 05            ld   b,05
 ROMC:75FC CD C9 2E         call 2EC9           // WRA4($D003 + A * 16) has Palette bits modified according to B
 ROMC:75FF F1               pop  af
 ROMC:7600 C9               ret                 // Establishes new phase card's Day Digit sprite, with A being Sprite # (A%16 is digit value)

 ROMC:7601 E1 76
 ROMC:7603 E6 76

 ROMC:7605 00 01 02 03         ld   bc,0302
 ROMC:7609 04 05 06 07            ld   b,07
 ROMC:760D 10 11            <corrupted stop>

 ROMC:760F 12 76 FF

 ROMC:7612 04
 ROMC:7613 F4 F8 00 00
 ROMC:7617 F4 00 01 00
 ROMC:761B FC F8 10 00
 ROMC:761F FC 00 11 00

 ROMC:7623 3E 01            ld   a,01
 ROMC:7625 E0 83            ld   (ff00+83),a
 ROMC:7627 E0 4F            ld   (ff00+4F),a
 ROMC:7629 11 F1 76         ld   de,76F1
 ROMC:762C 21 00 83         ld   hl,8300
 ROMC:762F 01 40 04         ld   bc,0440
 ROMC:7632 CD 59 3B         call 3B59           // (HL ~ HL+BC-1) = (DE ~ DE+BC-1)
 ROMC:7635 3E 00            ld   a,00
 ROMC:7637 E0 83            ld   (ff00+83),a
 ROMC:7639 E0 4F            ld   (ff00+4F),a
 ROMC:763B 11 49 7B         ld   de,7B49
 ROMC:763E 21 00 8C         ld   hl,8C00
 ROMC:7641 01 40 00         ld   bc,0040
 ROMC:7644 CD 59 3B         call 3B59           // (HL ~ HL+BC-1) = (DE ~ DE+BC-1)
 ROMC:7647 3E C1            ld   a,C1
 ROMC:7649 EF 10 CE 68                          // WRA4($DC6C) = 193 (Border Corner)
 ROMC:764D AF               xor  a
 ROMC:764E E0 B1            ld   (ff00+B1),a    // Water timer paused
 ROMC:7650 3E 0D            ld   a,0D
 ROMC:7652 06 03            ld   b,03
 ROMC:7654 21 31 7B         ld   hl,7B31
 ROMC:7657 CD BC 06         call 06BC           // ($C548) to ($C55F) hold ($7B31) to ($7B48)
 ROMC:765A 01 E0 00         ld   bc,00E0
 ROMC:765D CD 03 07         call 0703           // 6th through 8th Sprite Palette tables are updated
 ROMC:7660 CD D2 04         call 04D2           // Next frame
 ROMC:7663 AF               xor  a
 ROMC:7664 CB C7            set  0,a
 ROMC:7666 E0 B1            ld   (ff00+B1),a    // Water timer unpaused
 ROMC:7668 C9               ret                 // Establishes start of phase card graphics data

"Days"
 ROMC:7669 04
 ROMC:766A FC 08 43 00
 ROMC:766E FC 00 42 00
 ROMC:7672 FC F8 41 00
 ROMC:7676 FC F0 40 00

Red Star
 ROMC:767A 0C
 ROMC:767B 00 18 3B 01
 ROMC:767F 00 10 3A 01
 ROMC:7683 00 08 39 01
 ROMC:7687 00 00 38 01
 ROMC:768B F8 18 2B 01
 ROMC:768F F8 10 2A 01
 ROMC:7693 F8 08 29 01
 ROMC:7697 F8 00 28 01
 ROMC:769B 00 F0 35 01
 ROMC:769F 00 E8 34 01
 ROMC:76A3 F8 F0 25 01
 ROMC:76A7 F8 E8 24 01

White Moon
 ROMC:76AB 0C
 ROMC:76AC 00 18 3F 02
 ROMC:76B0 00 10 3E 02
 ROMC:76B4 00 08 3D 02
 ROMC:76B8 00 00 3C 02
 ROMC:76BC F8 18 2F 02
 ROMC:76C0 F8 10 2E 02
 ROMC:76C4 F8 08 2D 02
 ROMC:76C8 F8 00 2C 02
 ROMC:76CC 00 F0 37 02
 ROMC:76D0 00 E8 36 02
 ROMC:76D4 F8 F0 27 02
 ROMC:76D8 F8 E8 26 02

 ROMC:76DC 69 76 FF 00 00
 ROMC:76E1 7A 76 FF 00 00
 ROMC:76E6 AB 76 FF 00 00

 ROMC:76EB DC 76
 ROMC:76ED E1 76
 ROMC:76EF E6 76
 
 ROMC:76F1 00 00 00 3F 3F 40 7C 83 78 84 78 84 78 84 78 84
 ROMC:7701 00 00 00 F8 F8 04 7C 82 3C 42 3C 42 3C 42 3C 42          // 0 Top

 ROMC:7711 00 00 00 00 00 01 01 0E 07 08 01 0E 01 02 01 02
 ROMC:7721 00 00 00 70 60 90 E0 10 E0 10 E0 10 E0 10 E0 10          // 1 Top

 ROMC:7731 00 00 00 7F 7F 80 00 FF 00 00 00 3F 3F 40 7F 80
 ROMC:7741 00 00 00 F8 F8 04 7C 82 3C 42 7C 82 FC 02 FC 02          // 2 Top

 ROMC:7751 00 00 00 7F 3F 40 00 7F 00 00 00 00 00 0F 0F 10
 ROMC:7761 00 00 00 F8 F8 04 7C 82 3C 42 3C 42 7C 82 F8 04          // 3 Top

 ROMC:7771 00 00 00 01 01 02 03 04 07 08 0E 11 1C 22 38 44
 ROMC:7781 00 00 00 F8 F0 08 F0 08 70 88 70 88 70 88 70 88          // 4 Top

 ROMC:7791 00 00 00 FF 7F 80 7C 83 78 84 78 84 7C 83 7F 80
 ROMC:77A1 00 00 00 FE FC 02 00 FE 00 00 00 00 00 FC FC 02          // 5 Top

 ROMC:77B1 00 00 00 3F 3F 40 3E 41 3C 42 3C 42 3E 41 3F 40
 ROMC:77C1 00 00 00 FC FC 02 00 FE 00 00 00 00 00 FC FC 02          // 6 Top

 ROMC:77D1 00 00 00 7F 3F 40 00 7F 00 00 00 00 00 01 01 02
 ROMC:77E1 00 00 00 FE FC 02 3C C2 3C 42 78 84 F0 08 E0 10          // 7 Top

 ROMC:77F1 78 84 78 84 78 84 78 84 7C 83 3F 40 00 3F 00 00
 ROMC:7801 3C 42 3C 42 3C 42 3C 42 7C 82 F8 04 00 F8 00 00          // 0 Bottom

 ROMC:7811 01 02 01 02 01 02 01 02 01 02 01 02 00 03 00 00
 ROMC:7821 E0 10 E0 10 E0 10 E0 10 E0 10 E0 10 00 F0 00 00          // 1 Bottom
 
 ROMC:7831 7F 80 7C 83 78 84 78 84 78 87 7F 80 00 FF 00 00
 ROMC:7841 F8 04 00 F8 00 00 00 00 00 FE FC 02 00 FE 00 00          // 2 Bottom
 
 ROMC:7851 0F 10 00 0F 00 00 00 00 00 7F 3F 40 00 7F 00 00
 ROMC:7861 F8 04 7C 82 3C 42 3C 42 7C 82 F8 04 00 F8 00 00          // 3 Bottom

 ROMC:7871 70 8F 7F 80 7F 80 00 FF 00 00 00 00 00 00 00 00
 ROMC:7881 70 8E FC 02 FC 02 70 8E 70 88 70 88 00 F8 00 00          // 4 Bottom

 ROMC:7891 00 7F 00 00 00 00 00 00 00 FF 7F 80 00 7F 00 00
 ROMC:78A1 7C 82 3C 42 3C 42 3C 42 7C 82 F8 04 00 F8 00 00          // 5 Bottom

 ROMC:78B1 3C 43 3C 42 3C 42 3C 42 3E 41 1F 20 00 1F 00 00
 ROMC:78C1 1C E2 1C 22 1C 22 1C 22 3C C2 F8 04 00 F8 00 00          // 6 Bottom

 ROMC:78D1 03 04 03 04 07 08 07 08 0F 10 0F 10 00 1F 00 00
 ROMC:78E1 C0 20 C0 20 80 40 80 40 00 80 00 80 00 80 00 00          // 7 Bottom

 ROMC:78F1 00 00 00 3F 3F 40 7C 83 78 84 78 84 7C 83 1F 60
 ROMC:7901 00 00 00 F8 F8 04 7C 82 3C 42 3C 42 7C 82 F0 0C          // 8 Top

 ROMC:7911 00 00 00 3F 3F 40 7C 83 78 84 78 84 78 84 78 87
 ROMC:7921 00 00 00 F8 F8 04 7C 82 3C 42 3C 42 3C 42 3C C2          // 9 Top

 ROMC:7931 01 FF 01 FF 03 FE 03 FE 03 FE 07 FC FF FC FF 80
 ROMC:7941 80 FF 80 FF C0 7F C0 7F C0 7F E0 3F FF 3F FF 01          // Star Top

 ROMC:7951 FF 00 FF 00 FF 00 FF 00 FF 00 FF 00 FF 00 FF 00
 ROMC:7961 FF C0 BF F0 CF 78 E7 3C E3 3E E3 3E E1 3F E1 3F          // Moon Top

 ROMC:7971 00 00 07 00 06 00 07 00 06 00 06 00 06 00 00 00
 ROMC:7981 00 00 EF 00 6C 00 EF 00 CC 00 6C 00 6F 00 00 00
 ROMC:7991 00 00 DF 00 1B 00 99 00 19 00 1B 00 DF 00 00 00
 ROMC:79A1 00 00 00 00 80 00 80 00 80 00 80 00 00 00 00 00          // "Red"

 ROMC:79B1 00 00 00 D9 00 D9 00 7F 00 7E 00 36 00 36 00 00
 ROMC:79C1 00 00 00 66 00 66 00 7E 00 66 00 66 00 66 00 00
 ROMC:79D1 00 00 00 DF 00 C6 00 C6 00 C6 00 C6 00 C6 00 00
 ROMC:79E1 00 00 00 BF 00 30 00 3E 00 30 00 30 00 3F 00 00          // "White"
 
 ROMC:79F1 7C 83 78 84 78 84 7C 80 7C 83 3F 40 00 3F 00 00
 ROMC:7A01 7C 82 3C 42 3C 42 3C 42 7C 82 F8 04 00 F8 00 00          // 8 Bottom

 ROMC:7A11 7F 80 00 7F 00 00 00 00 00 FF 7F 80 00 7F 00 00
 ROMC:7A21 FC 02 7C 82 3C 42 3C 42 7C 82 F8 04 00 F8 00 00          // 9 Bottom

 ROMC:7A31 7F E0 1F F8 0F F8 1F F0 1F F1 1E F3 3C EF 30 FF
 ROMC:7A41 FE 07 F8 1F F0 1F F8 0F F8 8F 78 CF 3C F7 0C FF          // Star Bottom

 ROMC:7A51 FF C0 BF E0 DF 7F C0 7F E0 3F F0 1F FC 0F FF 03
 ROMC:7A61 C1 7F 81 FF 03 FE 03 FE 07 FC 0F F8 3F F0 FF C0          // Moon Bottom

 ROMC:7A71 00 00 3F 00 30 00 3F 00 3F 00 03 00 3F 00 00 00
 ROMC:7A81 00 00 7E 00 18 00 18 00 18 00 19 00 19 00 00 00
 ROMC:7A91 00 00 71 00 71 00 91 00 F9 00 19 00 19 00 00 00
 ROMC:7AA1 00 00 F8 00 98 00 F8 00 B0 00 98 00 98 00 00 00          // "Star"

 ROMC:7AB1 00 00 00 73 00 73 00 75 00 55 00 59 00 59 00 00
 ROMC:7AC1 00 00 00 BF 00 B3 00 B3 00 B3 00 B3 00 BF 00 00
 ROMC:7AD1 00 00 00 3F 00 33 00 33 00 33 00 33 00 3F 00 00
 ROMC:7AE1 00 00 00 72 00 72 00 5A 00 5A 00 4E 00 4E 00 00          // "Moon"

 ROMC:7AF1 00 00 3E 00 37 00 33 00 33 00 37 00 3E 00 00 00
 ROMC:7B01 00 00 1C 00 1C 00 24 00 3E 00 46 00 46 00 00 00
 ROMC:7B11 00 00 C5 00 4D 00 69 00 31 00 30 00 31 00 00 00
 ROMC:7B21 00 00 F8 00 80 00 F8 00 F8 00 18 00 F8 00 00 00          // "Days"


 ROMC:7B31 1F 7C BF 02 75 01 00 00
 ROMC:7B39 1F 7C DF 00 FF 7F 00 00
 ROMC:7B41 1F 7C 40 7D FF 7F 00 00

 ROMC:7B49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
 ROMC:7B59 FF FF 80 80 BF 80 BF 9F BF 9F B8 98 B8 98 B8 98
 ROMC:7B69 FF FF 00 00 FF 00 FF FF FF FF 00 00 00 00 00 00
 ROMC:7B79 B8 98 B8 98 B8 98 B8 98 B8 98 B8 98 B8 98 B8 98


 ROMC:7B89 EA 40 C9         ld   (C940),a
 ROMC:7B8C EF 0B E6 69                          // Reestablishes map graphics
 ROMC:7B90 EF 0B FA 74                          // General map view graphics update (loop begins here)
 ROMC:7B94 CD F2 7B         call 7BF2           // Updates Cursor Sprite as necessary based on cursor coordinates' location
 ROMC:7B97 FA 91 CA         ld   a,(CA91)
 ROMC:7B9A CB 67            bit  4,a            // Right
 ROMC:7B9C 20 16            jr   nz,7BB4
 ROMC:7B9E CB 6F            bit  5,a            // Left
 ROMC:7BA0 20 18            jr   nz,7BBA
 ROMC:7BA2 CB 77            bit  6,a            // Up
 ROMC:7BA4 20 1A            jr   nz,7BC0
 ROMC:7BA6 CB 7F            bit  7,a            // Down
 ROMC:7BA8 20 1C            jr   nz,7BC6
 ROMC:7BAA CB 47            bit  0,a            // A
 ROMC:7BAC 20 1E            jr   nz,7BCC
 ROMC:7BAE CB 4F            bit  1,a            // B
 ROMC:7BB0 20 2E            jr   nz,7BE0
 ROMC:7BB2 18 DC            jr   7B90
 ROMC:7BB4 EF 0B 25 75                          // If view will shift right: ($FFAC) 4 byte holds: OR ($FFAC),$82, ($C98B) + 10, ($C98C), 9; if not, general increase to X coordinate within view
 ROMC:7BB8 18 D6            jr   7B90
 ROMC:7BBA EF 0B 64 75                          // If view will shift left: ($FFAC) 4 byte holds: OR ($FFAC),$81, ($C98B) - 1, ($C98C), 9; if not, general decrease to X coordinate within view
 ROMC:7BBE 18 D0            jr   7B90
 ROMC:7BC0 EF 0B DB 75                          // If view will shift up: ($FFAC) 4 byte holds: OR ($FFAC),$84, ($C98B) - (($C98C)%2), ($C98C) - 1, 10 + (($C98C)%2); if not, general decrease to Y coordinate within view
 ROMC:7BC4 18 CA            jr   7B90
 ROMC:7BC6 EF 0B 9C 75                          // If view will shift down: ($FFAC) 4 byte holds: OR ($FFAC),$88, ($C98B) - (($C98C)%2), ($C98C) + 9, 10 + (($C98C)%2); if not, general increase to Y coordinate within view
 ROMC:7BCA 18 C4            jr   7B90
 ROMC:7BCC FA 91 C9         ld   a,(C991)
 ROMC:7BCF 47               ld   b,a
 ROMC:7BD0 FA 92 C9         ld   a,(C992)
 ROMC:7BD3 4F               ld   c,a
 ROMC:7BD4 CD 6A 7C         call 7C6A           // A = inverse of deployment validity on coordinates BC with given unit
 ROMC:7BD7 A7               and  a
 ROMC:7BD8 20 0F            jr   nz,7BE9        // Invalid results in Invalid sound effect before going back to waiting for further button input
 ROMC:7BDA CD 20 7C         call 7C20           // Unit summoning by Summon or from Reserve
 ROMC:7BDD AF               xor  a
 ROMC:7BDE 18 11            jr   7BF1           // Ends immediately; A Button press success results in A = 0
 ROMC:7BE0 3E 0C            ld   a,0C
 ROMC:7BE2 CD 44 38         call 3844
 ROMC:7BE5 3E FF            ld   a,FF
 ROMC:7BE7 18 08            jr   7BF1
 ROMC:7BE9 3E 03            ld   a,03
 ROMC:7BEB CD 44 38         call 3844
 ROMC:7BEE C3 90 7B         jp   7B90
 ROMC:7BF1 C9               ret                 // Controls for Reserve Unit Summoning; ends with A = 0 for success with A Button press, or -1 for B Button press (A = Unit #)
 ROMC:7BF2 FA 91 C9         ld   a,(C991)
 ROMC:7BF5 47               ld   b,a
 ROMC:7BF6 FA 92 C9         ld   a,(C992)
 ROMC:7BF9 4F               ld   c,a
 ROMC:7BFA FA 8E C9         ld   a,(C98E)
 ROMC:7BFD A7               and  a
 ROMC:7BFE 20 11            jr   nz,7C11
 ROMC:7C00 CD 6A 7C         call 7C6A           // A = inverse of deployment validity on coordinates BC with given unit
 ROMC:7C03 A7               and  a
 ROMC:7C04 20 19            jr   nz,7C1F        // Ends immediately for invalid
 ROMC:7C06 EF 0B 8C 46                          // Updates Cursor Sprite to Arrowed Cursor
 ROMC:7C0A 3E 01            ld   a,01
 ROMC:7C0C EA 8E C9         ld   (C98E),a
 ROMC:7C0F 18 0E            jr   7C1F
 ROMC:7C11 CD 6A 7C         call 7C6A           // A = inverse of deployment validity on coordinates BC with given unit
 ROMC:7C14 A7               and  a
 ROMC:7C15 28 08            jr   z,7C1F         // Ends immediately for valid
 ROMC:7C17 EF 0B 80 46                          // Updates Cursor Sprite to Normal Cursor
 ROMC:7C1B AF               xor  a
 ROMC:7C1C EA 8E C9         ld   (C98E),a
 ROMC:7C1F C9               ret                 // Updates Cursor Sprite as necessary based on cursor coordinates' location
 ROMC:7C20 C5               push bc
 ROMC:7C21 D5               push de
 ROMC:7C22 C5               push bc
 ROMC:7C23 58               ld   e,b
 ROMC:7C24 51               ld   d,c
 ROMC:7C25 0E 01            ld   c,01
 ROMC:7C27 FA 40 C9         ld   a,(C940)
 ROMC:7C2A EF 12 BD 40                          // Coordinates established
 ROMC:7C2E FA 40 C9         ld   a,(C940)
 ROMC:7C31 0E 03            ld   c,03
 ROMC:7C33 EF 12 66 40                          
 ROMC:7C37 CB 8F            res  1,a
 ROMC:7C39 CB FF            set  7,a            // Unit no longer in Reserve but has Ended Turn
 ROMC:7C3B 47               ld   b,a
 ROMC:7C3C FA 40 C9         ld   a,(C940)
 ROMC:7C3F EF 12 A1 40                          // Unit's Flags updated after being taken out of reserve
 ROMC:7C43 3E 0A            ld   a,0A
 ROMC:7C45 CD 44 38         call 3844
 ROMC:7C48 C1               pop  bc
 ROMC:7C49 EF 0C 5B 5B                          // Tile Pop Out sprite plays out
 ROMC:7C4D C5               push bc
 ROMC:7C4E FA 40 C9         ld   a,(C940)
 ROMC:7C51 0E 00            ld   c,00
 ROMC:7C53 EF 12 66 40                          // A = Unit type
 ROMC:7C57 C1               pop  bc
 ROMC:7C58 EF 0B 98 47                          // Unit tile updated with Unit type
 ROMC:7C5C FA 40 C9         ld   a,(C940)
 ROMC:7C5F EF 0B 93 68                          // Sets up tile's graphics with Unit A
 ROMC:7C63 EF 0C 6C 5B                          // Tile Iris In sprite plays out
 ROMC:7C67 D1               pop  de
 ROMC:7C68 C1               pop  bc
 ROMC:7C69 C9               ret                 // Unit summoning by Summon or from Reserve
 ROMC:7C6A C5               push bc
 ROMC:7C6B EF 0B BD 59                          // A = property number value if controlled by active player and within 3 spaces of their Capital; otherwise, A = 0 (BC holds current coordinates)
 ROMC:7C6F A7               and  a
 ROMC:7C70 28 0E            jr   z,7C80         // End immediately with A = 1 if property can't be used for deployment
 ROMC:7C72 47               ld   b,a
 ROMC:7C73 CD 84 7C         call 7C84           // A = Repair property base ID, with Factory taking precedence for the Work Car and Supply Truck
 ROMC:7C76 EF 0D 82 54                          // A = inverse of deployment on property type B validity
 ROMC:7C7A A7               and  a
 ROMC:7C7B 20 03            jr   nz,7C80
 ROMC:7C7D AF               xor  a
 ROMC:7C7E 18 02            jr   7C82
 ROMC:7C80 3E 01            ld   a,01
 ROMC:7C82 C1               pop  bc
 ROMC:7C83 C9               ret                 // A = inverse of deployment validity on coordinates BC with given unit
 ROMC:7C84 C5               push bc
 ROMC:7C85 FA 40 C9         ld   a,(C940)
 ROMC:7C88 0E 00            ld   c,00
 ROMC:7C8A EF 12 66 40                          
 ROMC:7C8E CB 3F            srl  a
 ROMC:7C90 FE 04            cp   a,04           // Work Car?
 ROMC:7C92 28 14            jr   z,7CA8
 ROMC:7C94 FE 05            cp   a,05           // Supply Truck?
 ROMC:7C96 28 10            jr   z,7CA8
 ROMC:7C98 FE 06            cp   a,06           // Supply Truck+?
 ROMC:7C9A 28 0C            jr   z,7CA8
 ROMC:7C9C FE 1D            cp   a,1D
 ROMC:7C9E 38 0C            jr   c,7CAC         // Jump if Land
 ROMC:7CA0 FE 2C            cp   a,2C
 ROMC:7CA2 38 0C            jr   c,7CB0         // Jump if Air
 ROMC:7CA4 3E 09            ld   a,09
 ROMC:7CA6 18 0A            jr   7CB2
 ROMC:7CA8 3E 04            ld   a,04
 ROMC:7CAA 18 06            jr   7CB2
 ROMC:7CAC 3E 02            ld   a,02
 ROMC:7CAE 18 02            jr   7CB2
 ROMC:7CB0 3E 06            ld   a,06
 ROMC:7CB2 C1               pop  bc
 ROMC:7CB3 C9               ret                 // A = Repair property base ID, with Factory taking precedence for the Work Car and Supply Truck
 ROMC:7CB4 EA 40 C9         ld   (C940),a
 ROMC:7CB7 EF 0B FA 74                          // General map view graphics update (loop begins here)
 ROMC:7CBB CD 3A 7D         call 7D3A           // Updates Cursor Sprite as necessary based on cursor coordinates' location
 ROMC:7CBE FA 91 CA         ld   a,(CA91)
 ROMC:7CC1 CB 67            bit  4,a            // Right
 ROMC:7CC3 20 12            jr   nz,7CD7
 ROMC:7CC5 CB 6F            bit  5,a            // Left
 ROMC:7CC7 20 14            jr   nz,7CDD
 ROMC:7CC9 CB 77            bit  6,a            // Up
 ROMC:7CCB 20 16            jr   nz,7CE3
 ROMC:7CCD CB 7F            bit  7,a            // Down
 ROMC:7CCF 20 18            jr   nz,7CE9
 ROMC:7CD1 CB 47            bit  0,a            // A
 ROMC:7CD3 20 1A            jr   nz,7CEF
 ROMC:7CD5 18 E0            jr   7CB7
 ROMC:7CD7 EF 0B 25 75                          // If view will shift right: ($FFAC) 4 byte holds: OR ($FFAC),$82, ($C98B) + 10, ($C98C), 9; if not, general increase to X coordinate within view
 ROMC:7CDB 18 DA            jr   7CB7
 ROMC:7CDD EF 0B 64 75                          // If view will shift left: ($FFAC) 4 byte holds: OR ($FFAC),$81, ($C98B) - 1, ($C98C), 9; if not, general decrease to X coordinate within view
 ROMC:7CE1 18 D4            jr   7CB7
 ROMC:7CE3 EF 0B DB 75                          // If view will shift up: ($FFAC) 4 byte holds: OR ($FFAC),$84, ($C98B) - (($C98C)%2), ($C98C) - 1, 10 + (($C98C)%2); if not, general decrease to Y coordinate within view
 ROMC:7CE7 18 CE            jr   7CB7
 ROMC:7CE9 EF 0B 9C 75                          // If view will shift down: ($FFAC) 4 byte holds: OR ($FFAC),$88, ($C98B) - (($C98C)%2), ($C98C) + 9, 10 + (($C98C)%2); if not, general increase to Y coordinate within view
 ROMC:7CED 18 C8            jr   7CB7
 ROMC:7CEF FA 91 C9         ld   a,(C991)
 ROMC:7CF2 47               ld   b,a
 ROMC:7CF3 FA 92 C9         ld   a,(C992)
 ROMC:7CF6 4F               ld   c,a
 ROMC:7CF7 CD 0C 7D         call 7D0C           // A = 1 if occupied; -1 if movement impossible; or 0 if neither
 ROMC:7CFA A7               and  a
 ROMC:7CFB 20 06            jr   nz,7D03
 ROMC:7CFD CD 20 7C         call 7C20           // Unit summoning by Summon or from Reserve
 ROMC:7D00 AF               xor  a
 ROMC:7D01 18 08            jr   7D0B
 ROMC:7D03 3E 03            ld   a,03
 ROMC:7D05 CD 44 38         call 3844
 ROMC:7D08 C3 B7 7C         jp   7CB7
 ROMC:7D0B C9               ret                 // Controls for Summon Map Menu Command; A = -1 for B Button press, or 0 for A Button press with success allowed by ANY valid movement tile--Hello, Mercenary Missile Frigate on a map without a Harbor (A is Unit #)
 ROMC:7D0C C5               push bc
 ROMC:7D0D EF 0B 92 47                          // A = Occupying unit's Type
 ROMC:7D11 A7               and  a
 ROMC:7D12 20 22            jr   nz,7D36        // End with A = 1 if there is already a unit on the tile
 ROMC:7D14 EF 0B 70 47                          // A = Terrain Type
 ROMC:7D18 EF 0B 07 47                          // A = Terrain base ID
 ROMC:7D1C 47               ld   b,a            // B = Terrain base ID
 ROMC:7D1D FA 40 C9         ld   a,(C940)
 ROMC:7D20 0E 00            ld   c,00
 ROMC:7D22 EF 12 66 40                          
 ROMC:7D26 0E 19            ld   c,19
 ROMC:7D28 EF 12 37 40                          // Movement Type
 ROMC:7D2C EF 12 9F 47                          // A = Movement Cost
 ROMC:7D30 A7               and  a              // End with A = -1 if movement impossible
 ROMC:7D31 28 03            jr   z,7D36
 ROMC:7D33 AF               xor  a
 ROMC:7D34 18 02            jr   7D38
 ROMC:7D36 3E 01            ld   a,01
 ROMC:7D38 C1               pop  bc
 ROMC:7D39 C9               ret                 // A = 1 if occupied; -1 if movement impossible; or 0 if neither
 ROMC:7D3A FA 91 C9         ld   a,(C991)
 ROMC:7D3D 47               ld   b,a
 ROMC:7D3E FA 92 C9         ld   a,(C992)
 ROMC:7D41 4F               ld   c,a
 ROMC:7D42 FA 8E C9         ld   a,(C98E)
 ROMC:7D45 A7               and  a
 ROMC:7D46 20 11            jr   nz,7D59        // Jump if building is valid
 ROMC:7D48 CD 0C 7D         call 7D0C           // A = 1 if occupied; -1 if movement impossible; or 0 if neither
 ROMC:7D4B A7               and  a
 ROMC:7D4C 20 19            jr   nz,7D67
 ROMC:7D4E EF 0B 8C 46                          // Updates Cursor Sprite to Arrowed Cursor
 ROMC:7D52 3E 01            ld   a,01
 ROMC:7D54 EA 8E C9         ld   (C98E),a
 ROMC:7D57 18 0E            jr   7D67
 ROMC:7D59 CD 0C 7D         call 7D0C           // A = 1 if occupied; -1 if movement impossible; or 0 if neither
 ROMC:7D5C A7               and  a
 ROMC:7D5D 28 08            jr   z,7D67
 ROMC:7D5F EF 0B 80 46                          // Updates Cursor Sprite to Normal Cursor
 ROMC:7D63 AF               xor  a
 ROMC:7D64 EA 8E C9         ld   (C98E),a
 ROMC:7D67 C9               ret                 // Updates Cursor Sprite as necessary based on cursor coordinates' location

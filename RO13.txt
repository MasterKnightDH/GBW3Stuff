 RO13:4000 21 7E C6         ld   hl,C67E
 RO13:4003 01 00 02         ld   bc,0200
 RO13:4006 AF               xor  a
 RO13:4007 CD 79 3B         call 3B79           // ($C67E ~ $C87D) emptied
 RO13:400A AF               xor  a
 RO13:400B EA 33 C6         ld   (C633),a
 RO13:400E EA 31 C6         ld   (C631),a
 RO13:4011 EA 32 C6         ld   (C632),a
 RO13:4014 EA 30 C6         ld   (C630),a       // ($C630 ~ $C633) emptied
 RO13:4017 EA B5 C9         ld   (C9B5),a
 RO13:401A 21 B3 C8         ld   hl,C8B3
 RO13:401D 01 08 00         ld   bc,0008
 RO13:4020 AF               xor  a
 RO13:4021 CD 79 3B         call 3B79           // ($C8B3 ~ $C8BA) emptied
 RO13:4024 3E 3D            ld   a,3D
 RO13:4026 EA 85 C6         ld   (C685),a       // Default Configuration
 RO13:4029 3E 01            ld   a,01
 RO13:402B EA 86 C6         ld   (C686),a       // Beginner
 RO13:402E C9               ret                 // Empties $C630~$C633, $C67E~$C87D, $C8B3~$C8BA, and $C9B5; then sets $C685 to 61 and $C686 to 1
 RO13:402F EE 01            xor  a,01
 RO13:4031 21 31 C6         ld   hl,C631
 RO13:4034 CD BC 29         call 29BC           // HL = $C631 + 1 - A % 2
 RO13:4037 3E 01            ld   a,01
 RO13:4039 77               ld   (hl),a
 RO13:403A C9               ret                 // AI set for other player
 RO13:403B 21 73 CA         ld   hl,CA73
 RO13:403E 01 1E 00         ld   bc,001E
 RO13:4041 AF               xor  a
 RO13:4042 CD 79 3B         call 3B79           // ($CA73 ~ $CA90) emptied
 RO13:4045 C9               ret  
 RO13:4046 F5               push af
 RO13:4047 CD 3B 40         call 403B           // ($CA73 ~ $CA90) emptied
 RO13:404A F1               pop  af
 RO13:404B 87               add  a
 RO13:404C 21 1C 39         ld   hl,391C
 RO13:404F CD BC 29         call 29BC           // HL = $391C + A * 2
 RO13:4052 2A               ldi  a,(hl)
 RO13:4053 7F               ld   a,a
 RO13:4054 CD 8D 05         call 058D           // ($4000) = 7 + A/2, ($FF81) = 7 + A/2
 RO13:4057 CD 93 05         call 0593           // ($0000) = 10
 RO13:405A 7E               ld   a,(hl)
 RO13:405B 67               ld   h,a
 RO13:405C 2E 00            ld   l,00
 RO13:405E E5               push hl
 RO13:405F 01 08 00         ld   bc,0008
 RO13:4062 09               add  hl,bc
 RO13:4063 54               ld   d,h
 RO13:4064 5D               ld   e,l
 RO13:4065 21 73 CA         ld   hl,CA73
 RO13:4068 01 08 00         ld   bc,0008
 RO13:406B CD 50 3B         call 3B50           // ($CA73 ~ $CA7A) = ($A008/B008 ~ $A00F/B00F)
 RO13:406E E1               pop  hl
 RO13:406F E5               push hl
 RO13:4070 01 10 00         ld   bc,0010
 RO13:4073 09               add  hl,bc
 RO13:4074 54               ld   d,h
 RO13:4075 5D               ld   e,l
 RO13:4076 21 7C CA         ld   hl,CA7C
 RO13:4079 01 0C 00         ld   bc,000C
 RO13:407C CD 50 3B         call 3B50           // ($CA7C ~ $CA87) = ($A010/B010 ~ $A01B/B01B)
 RO13:407F E1               pop  hl
 RO13:4080 01 1C 00         ld   bc,001C
 RO13:4083 09               add  hl,bc
 RO13:4084 54               ld   d,h
 RO13:4085 5D               ld   e,l
 RO13:4086 21 14 CC         ld   hl,CC14
 RO13:4089 01 04 00         ld   bc,0004
 RO13:408C CD 50 3B         call 3B50           // ($CC14 ~ $CC17) = ($A01C/B01C ~ $A01F/B01F)
 RO13:408F EF 26 CB 5C                          // Translates Map Online 7 Digit Code into ASCII from Compact Bytes
 RO13:4093 11 19 CC         ld   de,CC19
 RO13:4096 21 89 CA         ld   hl,CA89
 RO13:4099 01 07 00         ld   bc,0007
 RO13:409C CD 50 3B         call 3B50           // ($CA89~$CA8F) = ($CC19~$CC1F)
 RO13:409F CD 9B 05         call 059B           // ($0000) = 0
 RO13:40A2 C9               ret                 // $CA73 to $CA90 holds online-related information for Custom Map A
 RO13:40A3 2A               ldi  a,(hl)
 RO13:40A4 FE 00            cp   a,00
 RO13:40A6 20 25            jr   nz,40CD        // End immediately with Set Carry Flag if not empty
 RO13:40A8 2A               ldi  a,(hl)
 RO13:40A9 FE 00            cp   a,00
 RO13:40AB 20 20            jr   nz,40CD
 RO13:40AD 2A               ldi  a,(hl)
 RO13:40AE FE 00            cp   a,00
 RO13:40B0 20 1B            jr   nz,40CD
 RO13:40B2 2A               ldi  a,(hl)
 RO13:40B3 FE 00            cp   a,00
 RO13:40B5 20 16            jr   nz,40CD
 RO13:40B7 2A               ldi  a,(hl)
 RO13:40B8 FE 00            cp   a,00
 RO13:40BA 20 11            jr   nz,40CD
 RO13:40BC 2A               ldi  a,(hl)
 RO13:40BD FE 00            cp   a,00
 RO13:40BF 20 0C            jr   nz,40CD
 RO13:40C1 2A               ldi  a,(hl)
 RO13:40C2 FE 00            cp   a,00
 RO13:40C4 20 07            jr   nz,40CD
 RO13:40C6 2A               ldi  a,(hl)
 RO13:40C7 FE 00            cp   a,00
 RO13:40C9 20 02            jr   nz,40CD
 RO13:40CB 18 02            jr   40CF
 RO13:40CD 37               scf  
 RO13:40CE C9               ret  
 RO13:40CF C9               ret                 // Carry Flag set by HL 8 byte not being empty
 RO13:40D0 21 73 CA         ld   hl,CA73
 RO13:40D3 CD A3 40         call 40A3           // Carry Flag set by ($CA73~$CA7A) byte not being empty
 RO13:40D6 38 14            jr   c,40EC         // End immediately with Carry Flag set if ($CA73~$CA7A) isn't empty
 RO13:40D8 CD EE 40         call 40EE           // $CA89 first 3 ASCIIs being 0 results in SCF; otherwise, A = 0
 RO13:40DB 38 02            jr   c,40DF         // Continuation for valid 7 Digit Code
 RO13:40DD AF               xor  a
 RO13:40DE C9               ret  
 RO13:40DF 21 89 CA         ld   hl,CA89
 RO13:40E2 EF 31 75 56                          // All Zeros for Map Online 7 Digit Code results in SCF; otherwise, A = 0 (HL is location of Online 7 Digit Code in ASCII)
 RO13:40E6 38 02            jr   c,40EA         // Ending of A = 0 for all 0s
 RO13:40E8 37               scf  
 RO13:40E9 C9               ret  
 RO13:40EA AF               xor  a
 RO13:40EB C9               ret  
 RO13:40EC 37               scf  
 RO13:40ED C9               ret  
 RO13:40EE 21 89 CA         ld   hl,CA89
 RO13:40F1 EF 19 0E 4F                          // Carry Flag Set if the 5th, 6th, 13th, 14th, 21st, and 22nd bits of HL are active; otherwise, A = 0
 RO13:40F5 38 02            jr   c,40F9         // Triple 0: SCF ending
 RO13:40F7 AF               xor  a
 RO13:40F8 C9               ret  
 RO13:40F9 37               scf  
 RO13:40FA C9               ret  
 RO13:40FB F0 82            ld   a,(ff00+82)
 RO13:40FD F5               push af
 RO13:40FE 3E 04            ld   a,04
 RO13:4100 E0 82            ld   (ff00+82),a
 RO13:4102 E0 70            ld   (ff00+70),a
 RO13:4104 AF               xor  a
 RO13:4105 EA 2A DC         ld   (DC2A),a
 RO13:4108 EA 2B DC         ld   (DC2B),a
 RO13:410B EA 2C DC         ld   (DC2C),a
 RO13:410E EA 2D DC         ld   (DC2D),a
 RO13:4111 EA 2E DC         ld   (DC2E),a
 RO13:4114 EA 2F DC         ld   (DC2F),a
 RO13:4117 EA 31 DC         ld   (DC31),a
 RO13:411A EA 32 DC         ld   (DC32),a
 RO13:411D EA 33 DC         ld   (DC33),a
 RO13:4120 EA 34 DC         ld   (DC34),a
 RO13:4123 EA 4D DC         ld   (DC4D),a
 RO13:4126 EA 4E DC         ld   (DC4E),a
 RO13:4129 EA 4F DC         ld   (DC4F),a
 RO13:412C EA 50 DC         ld   (DC50),a
 RO13:412F EA 35 DC         ld   (DC35),a
 RO13:4132 EA 36 DC         ld   (DC36),a
 RO13:4135 EA 37 DC         ld   (DC37),a
 RO13:4138 EA 38 DC         ld   (DC38),a
 RO13:413B EA 39 DC         ld   (DC39),a
 RO13:413E EA 3A DC         ld   (DC3A),a
 RO13:4141 21 3B DC         ld   hl,DC3B
 RO13:4144 01 09 00         ld   bc,0009
 RO13:4147 3E 00            ld   a,00
 RO13:4149 CD 79 3B         call 3B79           // (HL ~ HL+BC-1) = A
 RO13:414C 21 44 DC         ld   hl,DC44
 RO13:414F 01 09 00         ld   bc,0009
 RO13:4152 3E 00            ld   a,00
 RO13:4154 CD 79 3B         call 3B79           // (HL ~ HL+BC-1) = A
 RO13:4157 F1               pop  af
 RO13:4158 E0 82            ld   (ff00+82),a
 RO13:415A E0 70            ld   (ff00+70),a
 RO13:415C C9               ret                 // Empties WRA4($DC2A~$DC50)
 RO13:415D CD F3 04         call 04F3           // Shuts off LCD Display if necessary
 RO13:4160 CD CE 34         call 34CE           // Empty $FFC8 to $FFCB
 RO13:4163 CD 7C 2D         call 2D7C           // Resets all Sprite-related data
 RO13:4166 AF               xor  a
 RO13:4167 E0 95            ld   (ff00+95),a
 RO13:4169 E0 96            ld   (ff00+96),a
 RO13:416B EF 10 A8 68                          // Sets up basic covered graphics values
 RO13:416F EF 01 00 40                          // Graphics holding: VRA0($9000) to VRA0($97FF) then VRA0($8800) to VRA0($8FFF) holds basic text
 RO13:4173 CD 18 06         call 0618           // Resets Palettes to absolute default Palettes
 RO13:4176 CD 02 0F         call 0F02           // Empties ($9800) to ($9BFF) in both VRAM banks
 RO13:4179 3E 00            ld   a,00
 RO13:417B E0 83            ld   (ff00+83),a
 RO13:417D E0 4F            ld   (ff00+4F),a
 RO13:417F 3E 00            ld   a,00
 RO13:4181 EF 15 91 66                          // VRA1:($8F30~$8FFF) holds mode menu tile graphics basics; mode menu graphics basics established accordingly
 RO13:4185 F0 83            ld   a,(ff00+83)
 RO13:4187 F5               push af
 RO13:4188 3E 01            ld   a,01
 RO13:418A E0 83            ld   (ff00+83),a
 RO13:418C E0 4F            ld   (ff00+4F),a
 RO13:418E 11 CC 57         ld   de,57CC
 RO13:4191 21 00 90         ld   hl,9000
 RO13:4194 01 90 00         ld   bc,0090
 RO13:4197 CD 50 3B         call 3B50           // VRA1($9000~$908F) = ($57CC~$585B) (Design Maps main menu graphics)
 RO13:419A 11 10 5A         ld   de,5A10
 RO13:419D 21 90 90         ld   hl,9090
 RO13:41A0 01 40 01         ld   bc,0140
 RO13:41A3 EF 15 50 3B                          // VRA1($9090~$91CF) = $15:($5A10~$5B4F) ("Map" menu logo)
 RO13:41A7 F1               pop  af
 RO13:41A8 E0 83            ld   (ff00+83),a
 RO13:41AA E0 4F            ld   (ff00+4F),a
 RO13:41AC 3E 00            ld   a,00
 RO13:41AE 06 08            ld   b,08
 RO13:41B0 21 5C 58         ld   hl,585C
 RO13:41B3 CD BC 06         call 06BC           // ($C4E0) to ($C41F) hold ($585C) to ($589B)
 RO13:41B6 CD AF 06         call 06AF           // ($C4E0) 8 byte set to 00 00 00 69 FF 7F 40 72
 RO13:41B9 CD F2 06         call 06F2           // Both BG and Sprite Palette tables are updated
 RO13:41BC 3E 0A            ld   a,0A
 RO13:41BE 01 01 05         ld   bc,0501
 RO13:41C1 11 02 0A         ld   de,0A02
 RO13:41C4 26 09            ld   h,09
 RO13:41C6 EF 15 FD 67                          // (VRA0:$9800 5~14,1~2) = 9~28, (VRA1:$9800 5~14,1~2) = 10 ("Map" menu logo)
 RO13:41CA 3E 0A            ld   a,0A
 RO13:41CC 01 11 0F         ld   bc,0F11
 RO13:41CF 11 01 01         ld   de,0101
 RO13:41D2 26 05            ld   h,05
 RO13:41D4 EF 15 FD 67                          // (VRA0:$9800 15,17) = 5, (VRA1:$9800 15,17) = 10 ("B")
 RO13:41D8 3E 08            ld   a,08
 RO13:41DA 01 11 10         ld   bc,1011
 RO13:41DD 11 01 03         ld   de,0301
 RO13:41E0 26 06            ld   h,06
 RO13:41E2 EF 15 FD 67                          // (VRA0:$9800 16~18,17) = 6~8, (VRA1:$9800 16~18,17) = 8 ("Back")
 RO13:41E6 01 04 05         ld   bc,0504
 RO13:41E9 11 07 0A         ld   de,0A07
 RO13:41EC EF 10 09 6A                          // Tile placement and coloring handled for [$9800 + B + C * 32] table size indicated by DE using [$DC6C] and [$DC6D] as the base
 RO13:41F0 F0 83            ld   a,(ff00+83)
 RO13:41F2 F5               push af
 RO13:41F3 3E 01            ld   a,01
 RO13:41F5 E0 83            ld   (ff00+83),a
 RO13:41F7 E0 4F            ld   (ff00+4F),a
 RO13:41F9 AF               xor  a
 RO13:41FA 01 05 06         ld   bc,0605
 RO13:41FD 11 05 08         ld   de,0805
 RO13:4200 EF 15 D3 6A                          // Sets current VRAM Bank map tiles in rectangle 6,5 to 13,9, to 0
 RO13:4204 F1               pop  af
 RO13:4205 E0 83            ld   (ff00+83),a
 RO13:4207 E0 4F            ld   (ff00+4F),a
 RO13:4209 01 0C 01         ld   bc,010C
 RO13:420C 11 05 12         ld   de,1205
 RO13:420F EF 22 47 62                          // Basic setup for table 1~18,12~16 including defaulted palette for interior's tiles
 RO13:4213 21 41 55         ld   hl,5541        // "EDIT"
 RO13:4216 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 RO13:4219 21 49 55         ld   hl,5549        // "PLAY"
 RO13:421C CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 RO13:421F 21 4F 55         ld   hl,554F        // "COPY"
 RO13:4222 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 RO13:4225 21 55 55         ld   hl,5555        // "DELETE"
 RO13:4228 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 RO13:422B 21 5C 55         ld   hl,555C        // "MAP News"
 RO13:422E CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 RO13:4231 F0 83            ld   a,(ff00+83)
 RO13:4233 F5               push af
 RO13:4234 3E 20            ld   a,20
 RO13:4236 0E 00            ld   c,00
 RO13:4238 06 15            ld   b,15
 RO13:423A 11 6E 6F         ld   de,6F6E        // Pointing Right Bullet
 RO13:423D CD E8 2D         call 2DE8           // A = number of already active sprites; $Dxx5~$DxxB prepared (B is ROM Block of Sprite, C is base Character Tile # / 2 with bit 7 determining VRAM Bank; and DE is pointer to sprite stats modification tables pointers)
 RO13:4240 EA 2C DC         ld   (DC2C),a
 RO13:4243 CD 23 43         call 4323
 RO13:4246 CD 4F 42         call 424F
 RO13:4249 F1               pop  af
 RO13:424A E0 83            ld   (ff00+83),a
 RO13:424C E0 4F            ld   (ff00+4F),a
 RO13:424E C9               ret  
 RO13:424F F0 83            ld   a,(ff00+83)
 RO13:4251 F5               push af
 RO13:4252 3E 00            ld   a,00
 RO13:4254 E0 83            ld   (ff00+83),a
 RO13:4256 E0 4F            ld   (ff00+4F),a
 RO13:4258 AF               xor  a
 RO13:4259 01 0D 02         ld   bc,020D
 RO13:425C 11 03 10         ld   de,1003
 RO13:425F EF 15 D3 6A                          // Sets current VRAM Bank map tiles in rectangle BC, size DE, to A
 RO13:4263 F1               pop  af
 RO13:4264 E0 83            ld   (ff00+83),a
 RO13:4266 E0 4F            ld   (ff00+4F),a
 RO13:4268 21 82 42         ld   hl,4282
 RO13:426B FA 2A DC         ld   a,(DC2A)
 RO13:426E 87               add  a
 RO13:426F 4F               ld   c,a
 RO13:4270 06 00            ld   b,00
 RO13:4272 09               add  hl,bc
 RO13:4273 2A               ldi  a,(hl)
 RO13:4274 5F               ld   e,a
 RO13:4275 7E               ld   a,(hl)
 RO13:4276 57               ld   d,a
 RO13:4277 7A               ld   a,d
 RO13:4278 67               ld   h,a
 RO13:4279 7B               ld   a,e
 RO13:427A 6F               ld   l,a
 RO13:427B 01 0D 02         ld   bc,020D
 RO13:427E CD 38 2B         call 2B38           // VRA0[$9800] 1024 byte string holds dialogue (BC is starting coordinates, HL is dialogue pointer)
 RO13:4281 C9               ret  

 RO13:4282 0F 57               ld   d,a
 RO13:4284 1A 57               ld   d,a
 RO13:4286 3A 57               ld   d,a
 RO13:4288 49 57               ld   d,a
 RO13:428A 59 57

 RO13:428C F0 82            ld   a,(ff00+82)
 RO13:428E F5               push af
 RO13:428F 3E 04            ld   a,04
 RO13:4291 E0 82            ld   (ff00+82),a
 RO13:4293 E0 70            ld   (ff00+70),a
 RO13:4295 CD 5D 41         call 415D
 RO13:4298 3E 02            ld   a,02
 RO13:429A CD 16 38         call 3816           // Menu theme
 RO13:429D CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 RO13:42A0 CD A2 05         call 05A2           // Button update, next frame
 RO13:42A3 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO13:42A6 3E 00            ld   a,00
 RO13:42A8 EF 15 91 67                          // Updates menu shifting diagonally down-right BG graphics (A is modification of where menu BG graphics had been stored)
 RO13:42AC F0 92            ld   a,(ff00+92)
 RO13:42AE CB 77            bit  6,a            // Up
 RO13:42B0 28 1A            jr   z,42CC
 RO13:42B2 3E 01            ld   a,01
 RO13:42B4 CD 44 38         call 3844
 RO13:42B7 FA 2A DC         ld   a,(DC2A)
 RO13:42BA 3D               dec  a
 RO13:42BB FE FF            cp   a,FF
 RO13:42BD 20 02            jr   nz,42C1
 RO13:42BF 3E 04            ld   a,04
 RO13:42C1 EA 2A DC         ld   (DC2A),a
 RO13:42C4 CD 23 43         call 4323
 RO13:42C7 CD 4F 42         call 424F
 RO13:42CA 18 D4            jr   42A0
 RO13:42CC CB 7F            bit  7,a            // Down
 RO13:42CE 28 19            jr   z,42E9
 RO13:42D0 3E 01            ld   a,01
 RO13:42D2 CD 44 38         call 3844
 RO13:42D5 FA 2A DC         ld   a,(DC2A)
 RO13:42D8 3C               inc  a
 RO13:42D9 FE 05            cp   a,05
 RO13:42DB 20 01            jr   nz,42DE
 RO13:42DD AF               xor  a
 RO13:42DE EA 2A DC         ld   (DC2A),a
 RO13:42E1 CD 23 43         call 4323
 RO13:42E4 CD 4F 42         call 424F
 RO13:42E7 18 B7            jr   42A0
 RO13:42E9 CB 47            bit  0,a            // A
 RO13:42EB 28 0C            jr   z,42F9
 RO13:42ED 3E 02            ld   a,02
 RO13:42EF CD 44 38         call 3844
 RO13:42F2 FA 2A DC         ld   a,(DC2A)
 RO13:42F5 18 11            jr   4308
 RO13:42F7 18 A7            jr   42A0
 RO13:42F9 CB 4F            bit  1,a            // B
 RO13:42FB 28 09            jr   z,4306
 RO13:42FD 3E 0C            ld   a,0C
 RO13:42FF CD 44 38         call 3844
 RO13:4302 3E FF            ld   a,FF
 RO13:4304 18 02            jr   4308
 RO13:4306 18 98            jr   42A0
 RO13:4308 57               ld   d,a
 RO13:4309 F1               pop  af
 RO13:430A E0 82            ld   (ff00+82),a
 RO13:430C E0 70            ld   (ff00+70),a
 RO13:430E D5               push de
 RO13:430F CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 RO13:4312 CD 67 2E         call 2E67           // Handles clear-up of all sprite portions and entire ($C400) table, sets ($C00E) to 1
 RO13:4315 D1               pop  de
 RO13:4316 7A               ld   a,d
 RO13:4317 FE 04            cp   a,04
 RO13:4319 20 07            jr   nz,4322
 RO13:431B EF 18 08 5C                          
 RO13:431F C3 8C 42         jp   428C
 RO13:4322 C9               ret  
 RO13:4323 FA 2A DC         ld   a,(DC2A)
 RO13:4326 06 08            ld   b,08
 RO13:4328 CD 95 29         call 2995           // HL = A * B
 RO13:432B 7D               ld   a,l
 RO13:432C C6 3C            add  a,3C
 RO13:432E 4F               ld   c,a
 RO13:432F 06 38            ld   b,38
 RO13:4331 FA 2C DC         ld   a,(DC2C)       // Pointing Down Bullet for Map Edit Options
 RO13:4334 CD AE 2E         call 2EAE           // WRA4($D001 + A * 16) = C; WRA4($D002 + A * 16) = B
 RO13:4337 C9               ret  
 RO13:4338 F5               push af             // Stores what will go into $DC4D
 RO13:4339 CD F3 04         call 04F3           // Shuts off LCD Display if necessary
 RO13:433C CD CE 34         call 34CE           // Empty $FFC8 to $FFCB
 RO13:433F CD 7C 2D         call 2D7C           // Resets all Sprite-related data
 RO13:4342 AF               xor  a
 RO13:4343 E0 95            ld   (ff00+95),a
 RO13:4345 E0 96            ld   (ff00+96),a
 RO13:4347 EF 10 A8 68                          // Sets up basic covered graphics values
 RO13:434B EF 01 00 40                          // Graphics holding: VRA0($9000) to VRA0($97FF) then VRA0($8800) to VRA0($8FFF) holds basic text
 RO13:434F CD 18 06         call 0618           // Resets Palettes to absolute default Palettes
 RO13:4352 CD 02 0F         call 0F02           // Empties ($9800) to ($9BFF) in both VRAM banks
 RO13:4355 3E 00            ld   a,00
 RO13:4357 E0 83            ld   (ff00+83),a
 RO13:4359 E0 4F            ld   (ff00+4F),a
 RO13:435B 3E 00            ld   a,00
 RO13:435D EF 15 91 66                          // VRA1:($8F30~$8FFF) holds mode menu tile graphics basics; mode menu graphics basics established accordingly
 RO13:4361 F0 83            ld   a,(ff00+83)
 RO13:4363 F5               push af
 RO13:4364 3E 01            ld   a,01
 RO13:4366 E0 83            ld   (ff00+83),a
 RO13:4368 E0 4F            ld   (ff00+4F),a
 RO13:436A 11 CC 57         ld   de,57CC
 RO13:436D 21 00 90         ld   hl,9000
 RO13:4370 01 90 00         ld   bc,0090
 RO13:4373 CD 50 3B         call 3B50           // VRA1($9000~$908F) = ($57CC~$585B) (Design Maps main menu graphics)
 RO13:4376 F1               pop  af
 RO13:4377 E0 83            ld   (ff00+83),a
 RO13:4379 E0 4F            ld   (ff00+4F),a
 RO13:437B FA 50 DC         ld   a,(DC50)       // Quick Open Type
 RO13:437E FE 08            cp   a,08
 RO13:4380 38 1E            jr   c,43A0         // Branches for not Online exclusive option
 RO13:4382 3E 00            ld   a,00
 RO13:4384 06 08            ld   b,08
 RO13:4386 21 9C 58         ld   hl,589C
 RO13:4389 CD BC 06         call 06BC           // ($C4E0) to ($C51F) hold ($589C) to ($58DB)
 RO13:438C CD AF 06         call 06AF           // ($C4E0) 8 byte set to 00 00 00 69 FF 7F 40 72
 RO13:438F 3E 07            ld   a,07
 RO13:4391 06 01            ld   b,01
 RO13:4393 0E 19            ld   c,19
 RO13:4395 21 24 79         ld   hl,7924
 RO13:4398 CD D9 06         call 06D9           // ($C518) to ($C51F) hold $19:($7924) to $19:($792B)
 RO13:439B CD F2 06         call 06F2           // Both BG and Sprite Palette tables are updated
 RO13:439E 18 1C            jr   43BC
 RO13:43A0 3E 00            ld   a,00
 RO13:43A2 06 08            ld   b,08
 RO13:43A4 21 5C 58         ld   hl,585C
 RO13:43A7 CD BC 06         call 06BC           // ($C4E0) to ($C51F) hold ($585C) to ($589B)
 RO13:43AA CD AF 06         call 06AF           // ($C4E0) 8 byte set to 00 00 00 69 FF 7F 40 72
 RO13:43AD 3E 07            ld   a,07
 RO13:43AF 06 01            ld   b,01
 RO13:43B1 0E 19            ld   c,19
 RO13:43B3 21 24 79         ld   hl,7924
 RO13:43B6 CD D9 06         call 06D9           // ($C518) to ($C51F) hold $19:($7924) to $19:($792B)
 RO13:43B9 CD F2 06         call 06F2           // Both BG and Sprite Palette tables are updated
 RO13:43BC 3E 0A            ld   a,0A
 RO13:43BE 01 11 0F         ld   bc,0F11
 RO13:43C1 11 01 01         ld   de,0101
 RO13:43C4 26 05            ld   h,05           // B Button Icon
 RO13:43C6 EF 15 FD 67                          // (VRA0:$9800 X~D,Y~E) = H + Prior Tiles, (VRA1:$9800 X~D,Y~E) = A
 RO13:43CA 3E 08            ld   a,08
 RO13:43CC 01 11 10         ld   bc,1011
 RO13:43CF 11 01 03         ld   de,0301
 RO13:43D2 26 06            ld   h,06           // "Back"
 RO13:43D4 EF 15 FD 67                          // (VRA0:$9800 X~D,Y~E) = H + Prior Tiles, (VRA1:$9800 X~D,Y~E) = A
 RO13:43D8 01 01 01         ld   bc,0101
 RO13:43DB 11 03 12         ld   de,1203
 RO13:43DE EF 10 09 6A                          // Tile placement and coloring handled for [$9800 + B + C * 32] table size indicated by DE using [$DC6C] and [$DC6D] as the base
 RO13:43E2 F1               pop  af
 RO13:43E3 EA 4D DC         ld   (DC4D),a       // Edit, Play, Copy, Delete, Send, Get
 RO13:43E6 FE 00            cp   a,00           // Edit?
 RO13:43E8 28 28            jr   z,4412
 RO13:43EA FE 01            cp   a,01           // Play?
 RO13:43EC 28 29            jr   z,4417
 RO13:43EE FE 02            cp   a,02           // Copy?
 RO13:43F0 28 2A            jr   z,441C
 RO13:43F2 FE 03            cp   a,03           // Delete?
 RO13:43F4 28 2B            jr   z,4421
 RO13:43F6 FE 04            cp   a,04           // Send?
 RO13:43F8 28 2C            jr   z,4426
 RO13:43FA FE 05            cp   a,05           // Get?
 RO13:43FC 28 2D            jr   z,442B
 RO13:43FE FE 06            cp   a,06
 RO13:4400 28 42            jr   z,4444         // "To which Map will you Save?"
 RO13:4402 FE 08            cp   a,08
 RO13:4404 28 2A            jr   z,4430         // "Upload to where?"
 RO13:4406 FE 09            cp   a,09
 RO13:4408 28 2B            jr   z,4435         // "Delete which one?"
 RO13:440A FE 0A            cp   a,0A
 RO13:440C 28 2C            jr   z,443A         // "Post which one?"
 RO13:440E FE 07            cp   a,07
 RO13:4410 28 2D            jr   z,443F         // "Upload which data?"
 RO13:4412 21 66 55         ld   hl,5566        // "Which Map will you Edit?"
 RO13:4415 18 32            jr   4449
 RO13:4417 21 79 55         ld   hl,5579        // "Which Map will you Play?"
 RO13:441A 18 2D            jr   4449
 RO13:441C 21 8A 55         ld   hl,558A        // "Which Map will you Copy?"
 RO13:441F 18 28            jr   4449
 RO13:4421 21 9B 55         ld   hl,559B        // "Which Map will you Delete?"
 RO13:4424 18 23            jr   4449
 RO13:4426 21 AD 55         ld   hl,55AD        // "Which Map will you Send?"
 RO13:4429 18 1E            jr   4449
 RO13:442B 21 BC 55         ld   hl,55BC        // "To which Map will you Get?"
 RO13:442E 18 19            jr   4449
 RO13:4430 21 CD 55         ld   hl,55CD        // "Upload to where?"
 RO13:4433 18 14            jr   4449
 RO13:4435 21 DE 55         ld   hl,55DE        // "Delete which one?"
 RO13:4438 18 0F            jr   4449
 RO13:443A 21 ED 55         ld   hl,55ED        // "Post which one?"
 RO13:443D 18 0A            jr   4449
 RO13:443F 21 FC 55         ld   hl,55FC        // "Upload which Data?"
 RO13:4442 18 05            jr   4449
 RO13:4444 21 0D 56         ld   hl,560D        // "To which Map will you Save?"
 RO13:4447 18 00            jr   4449
 RO13:4449 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 RO13:444C 01 0C 01         ld   bc,010C
 RO13:444F 11 05 12         ld   de,1205
 RO13:4452 EF 10 09 6A                          // Tile placement and coloring handled for [$9800 + B + C * 32] table size indicated by DE using [$DC6C] and [$DC6D] as the base
 RO13:4456 F0 83            ld   a,(ff00+83)
 RO13:4458 F5               push af
 RO13:4459 3E 01            ld   a,01
 RO13:445B E0 83            ld   (ff00+83),a
 RO13:445D E0 4F            ld   (ff00+4F),a
 RO13:445F AF               xor  a
 RO13:4460 01 02 02         ld   bc,0202
 RO13:4463 11 01 10         ld   de,1001
 RO13:4466 EF 15 D3 6A                          // Sets current VRAM Bank map tiles in rectangle BC, size DE, to A
 RO13:446A AF               xor  a
 RO13:446B 01 0D 02         ld   bc,020D
 RO13:446E 11 03 10         ld   de,1003
 RO13:4471 EF 15 D3 6A                          // Sets current VRAM Bank map tiles in rectangle BC, size DE, to A
 RO13:4475 F1               pop  af
 RO13:4476 E0 83            ld   (ff00+83),a
 RO13:4478 E0 4F            ld   (ff00+4F),a
 RO13:447A 01 06 03         ld   bc,0306
 RO13:447D 16 00            ld   d,00
 RO13:447F CD 29 47         call 4729           // Manages Palettes of 1st file row for Map Editor File selection
 RO13:4482 01 09 03         ld   bc,0309
 RO13:4485 16 05            ld   d,05
 RO13:4487 CD 29 47         call 4729           // Manages Palettes of 2nd file row for Map Editor File selection
 RO13:448A 3E 20            ld   a,20
 RO13:448C 0E 00            ld   c,00
 RO13:448E 06 15            ld   b,15
 RO13:4490 11 44 6F         ld   de,6F44
 RO13:4493 CD E8 2D         call 2DE8           // A = number of already active sprites; $Dxx5~$DxxB prepared (B is ROM Block of Sprite, C is base Character Tile # / 2 with bit 7 determining VRAM Bank; and DE is pointer to sprite stats modification tables pointers)
 RO13:4496 EA 2C DC         ld   (DC2C),a       // Pointing Down Bullet for Map Edit Options
 RO13:4499 CD A0 44         call 44A0           // Map Editor Main Menu Pointing Down Bullet coordinates established
 RO13:449C CD 17 47         call 4717           // Custom Map Description Text management as a whole
 RO13:449F C9               ret  
 RO13:44A0 FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:44A3 06 05            ld   b,05
 RO13:44A5 EF 14 1B 5F                          // B = A / B, A holds remainder
 RO13:44A9 06 18            ld   b,18
 RO13:44AB CD 95 29         call 2995           // HL = A * B
 RO13:44AE 7D               ld   a,l
 RO13:44AF C6 28            add  a,28
 RO13:44B1 EA 2D DC         ld   (DC2D),a
 RO13:44B4 FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:44B7 06 05            ld   b,05
 RO13:44B9 EF 14 1B 5F                          // B = A / B, A holds remainder
 RO13:44BD 78               ld   a,b
 RO13:44BE 06 18            ld   b,18
 RO13:44C0 CD 95 29         call 2995           // HL = A * B
 RO13:44C3 7D               ld   a,l
 RO13:44C4 C6 38            add  a,38
 RO13:44C6 EA 2E DC         ld   (DC2E),a
 RO13:44C9 FA 2F DC         ld   a,(DC2F)
 RO13:44CC FE 01            cp   a,01
 RO13:44CE 20 08            jr   nz,44D8
 RO13:44D0 FA 2E DC         ld   a,(DC2E)
 RO13:44D3 D6 40            sub  a,40
 RO13:44D5 EA 2E DC         ld   (DC2E),a
 RO13:44D8 FA 2D DC         ld   a,(DC2D)
 RO13:44DB 47               ld   b,a
 RO13:44DC FA 2E DC         ld   a,(DC2E)
 RO13:44DF 4F               ld   c,a
 RO13:44E0 FA 2C DC         ld   a,(DC2C)       // Pointing Down Bullet for Map Edit Options
 RO13:44E3 CD AE 2E         call 2EAE           // WRA4($D001 + A * 16) = C; WRA4($D002 + A * 16) = B
 RO13:44E6 C9               ret                 // Map Editor Main Menu Pointing Down Bullet coordinates established
 RO13:44E7 FA 30 DC         ld   a,(DC30)       // 2nd Highlighted Custom Map # on Map Editor Main Menu
 RO13:44EA 06 05            ld   b,05
 RO13:44EC EF 14 1B 5F                          // B = A / B, A holds remainder
 RO13:44F0 06 18            ld   b,18
 RO13:44F2 CD 95 29         call 2995           // HL = A * B
 RO13:44F5 7D               ld   a,l
 RO13:44F6 C6 28            add  a,28
 RO13:44F8 EA 32 DC         ld   (DC32),a
 RO13:44FB FA 30 DC         ld   a,(DC30)       // 2nd Highlighted Custom Map # on Map Editor Main Menu
 RO13:44FE 06 05            ld   b,05
 RO13:4500 EF 14 1B 5F                          // B = A / B, A holds remainder
 RO13:4504 78               ld   a,b
 RO13:4505 06 18            ld   b,18
 RO13:4507 CD 95 29         call 2995           // HL = A * B
 RO13:450A 7D               ld   a,l
 RO13:450B C6 38            add  a,38
 RO13:450D EA 33 DC         ld   (DC33),a
 RO13:4510 FA 34 DC         ld   a,(DC34)
 RO13:4513 FE 01            cp   a,01
 RO13:4515 20 08            jr   nz,451F
 RO13:4517 FA 33 DC         ld   a,(DC33)
 RO13:451A D6 40            sub  a,40
 RO13:451C EA 33 DC         ld   (DC33),a
 RO13:451F FA 32 DC         ld   a,(DC32)
 RO13:4522 47               ld   b,a
 RO13:4523 FA 33 DC         ld   a,(DC33)
 RO13:4526 4F               ld   c,a
 RO13:4527 FA 31 DC         ld   a,(DC31)       // Pointing Down Bullet for Map Edit Copy
 RO13:452A CD AE 2E         call 2EAE           // WRA4($D001 + A * 16) = C; WRA4($D002 + A * 16) = B
 RO13:452D C9               ret                 // Map Editor Main Menu 2nd Pointing Down Bullet coordinates established
 RO13:452E C5               push bc
 RO13:452F D5               push de
 RO13:4530 E5               push hl
 RO13:4531 FA 50 DC         ld   a,(DC50)       // Quick Open Type
 RO13:4534 FE 08            cp   a,08
 RO13:4536 38 08            jr   c,4540         // Branch for option that isn't Online exclusive
 RO13:4538 7A               ld   a,d            // Custom Map #
 RO13:4539 CD 63 45         call 4563           // Carry Flag set if Online Partner Map A doesn't exist; otherwise, A = 0
 RO13:453C 38 15            jr   c,4553         // Ends with Red for Partner Map A is nonexistent
 RO13:453E 18 0F            jr   454F
 RO13:4540 7A               ld   a,d
 RO13:4541 EF 28 AE 40                          // Establishes map basic logistics including map number and game mode, also triggers custom map exists flag if given custom map is used (A is map number)
 RO13:4545 3E 01            ld   a,01
 RO13:4547 21 1D CA         ld   hl,CA1D
 RO13:454A CD C7 3A         call 3AC7           // Does the custom map exist?
 RO13:454D 28 04            jr   z,4553         // End with A = 8 if it does, A = 13 if not
 RO13:454F 3E 08            ld   a,08           // Blue
 RO13:4551 18 02            jr   4555
 RO13:4553 3E 0D            ld   a,0D           // Red
 RO13:4555 E1               pop  hl
 RO13:4556 D1               pop  de
 RO13:4557 C1               pop  bc
 RO13:4558 C9               ret                 // A set to Palette: Blue if Custom Map D exists, Red otherwise
 RO13:4559 06 12            ld   b,12
 RO13:455B CD 95 29         call 2995           // HL = A * 18
 RO13:455E 01 8A BA         ld   bc,BA8A
 RO13:4561 09               add  hl,bc
 RO13:4562 C9               ret                 // HL = $BA8A + A * 18
 RO13:4563 F5               push af
 RO13:4564 3E 0E            ld   a,0E
 RO13:4566 CD 8D 05         call 058D           // ($4000) = 14, ($FF81) = 14
 RO13:4569 CD 93 05         call 0593           // ($0000) = 10
 RO13:456C F1               pop  af
 RO13:456D CD 59 45         call 4559           // HL = $BA8A + A * 18
 RO13:4570 01 00 00         ld   bc,0000
 RO13:4573 09               add  hl,bc
 RO13:4574 7E               ld   a,(hl)
 RO13:4575 FE 00            cp   a,00
 RO13:4577 28 03            jr   z,457C
 RO13:4579 AF               xor  a
 RO13:457A 18 01            jr   457D
 RO13:457C 37               scf  
 RO13:457D CD 9B 05         call 059B           // ($0000) = 0
 RO13:4580 C9               ret  
 RO13:4581 21 9D 45         ld   hl,459D
 RO13:4584 01 0D 02         ld   bc,020D
 RO13:4587 CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 RO13:458A 21 9D 45         ld   hl,459D
 RO13:458D 01 0E 02         ld   bc,020E
 RO13:4590 CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 RO13:4593 21 9D 45         ld   hl,459D
 RO13:4596 01 0F 02         ld   bc,020F
 RO13:4599 CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 RO13:459C C9               ret  

 RO13:459D 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 00

 RO13:45AE 11 3D CA         ld   de,CA3D
 RO13:45B1 21 14 CC         ld   hl,CC14
 RO13:45B4 01 04 00         ld   bc,0004
 RO13:45B7 CD 50 3B         call 3B50           // ($CC14~$CC17) = ($CA3D~$CA40)
 RO13:45BA EF 26 CB 5C                          // Translates Map Online 7 Digit Code into ASCII from Compact Bytes
 RO13:45BE 21 19 CC         ld   hl,CC19
 RO13:45C1 2A               ldi  a,(hl)
 RO13:45C2 FE 30            cp   a,30
 RO13:45C4 20 20            jr   nz,45E6
 RO13:45C6 2A               ldi  a,(hl)
 RO13:45C7 FE 30            cp   a,30
 RO13:45C9 20 1B            jr   nz,45E6
 RO13:45CB 2A               ldi  a,(hl)
 RO13:45CC FE 30            cp   a,30
 RO13:45CE 20 16            jr   nz,45E6
 RO13:45D0 2A               ldi  a,(hl)
 RO13:45D1 FE 30            cp   a,30
 RO13:45D3 20 11            jr   nz,45E6
 RO13:45D5 2A               ldi  a,(hl)
 RO13:45D6 FE 30            cp   a,30
 RO13:45D8 20 0C            jr   nz,45E6
 RO13:45DA 2A               ldi  a,(hl)
 RO13:45DB FE 30            cp   a,30
 RO13:45DD 20 07            jr   nz,45E6
 RO13:45DF 2A               ldi  a,(hl)
 RO13:45E0 FE 30            cp   a,30
 RO13:45E2 20 02            jr   nz,45E6
 RO13:45E4 18 10            jr   45F6           // End with SCF if all digits are Zero
 RO13:45E6 3E 00            ld   a,00
 RO13:45E8 EA 20 CC         ld   (CC20),a
 RO13:45EB 21 1C CC         ld   hl,CC1C
 RO13:45EE 01 0E 08         ld   bc,080E
 RO13:45F1 CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 RO13:45F4 AF               xor  a
 RO13:45F5 C9               ret  
 RO13:45F6 37               scf  
 RO13:45F7 C9               ret                 // For existing Map Online 7 Digit Code, print last 4 digits at 8,14 and set A = 0 and ($CC20) = 0; otherwise, SCF
 RO13:45F8 CD 81 45         call 4581           // Blanks Description Text Box on Map Edit Menu
 RO13:45FB 3E 0E            ld   a,0E
 RO13:45FD CD 8D 05         call 058D           // ($4000) = 14, ($FF81) = 14
 RO13:4600 CD 93 05         call 0593           // ($0000) = 10
 RO13:4603 FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:4606 CD 59 45         call 4559           // HL = $BA8A + A * 18
 RO13:4609 01 01 00         ld   bc,0001
 RO13:460C 09               add  hl,bc
 RO13:460D 54               ld   d,h
 RO13:460E 5D               ld   e,l
 RO13:460F 21 6A CA         ld   hl,CA6A        // Map Name
 RO13:4612 01 08 00         ld   bc,0008
 RO13:4615 CD 50 3B         call 3B50           // (HL ~ HL+BC-1) = (DE ~ DE+BC-1)
 RO13:4618 FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:461B CD 59 45         call 4559           // HL = $BA8A + A * 18
 RO13:461E 01 0A 00         ld   bc,000A
 RO13:4621 09               add  hl,bc
 RO13:4622 54               ld   d,h
 RO13:4623 5D               ld   e,l
 RO13:4624 21 44 DC         ld   hl,DC44
 RO13:4627 01 08 00         ld   bc,0008
 RO13:462A CD 50 3B         call 3B50           // (HL ~ HL+BC-1) = (DE ~ DE+BC-1)
 RO13:462D FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:4630 CD 59 45         call 4559           // HL = $BA8A + A * 18
 RO13:4633 01 00 00         ld   bc,0000
 RO13:4636 09               add  hl,bc
 RO13:4637 7E               ld   a,(hl)
 RO13:4638 FE 00            cp   a,00
 RO13:463A 28 1A            jr   z,4656
 RO13:463C 21 6A CA         ld   hl,CA6A        // Map Name
 RO13:463F 01 0D 02         ld   bc,020D
 RO13:4642 CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 RO13:4645 21 4E 56         ld   hl,564E        // "MAP NO." (2,14)
 RO13:4648 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 RO13:464B 21 44 DC         ld   hl,DC44
 RO13:464E 01 0E 08         ld   bc,080E
 RO13:4651 CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 RO13:4654 18 09            jr   465F
 RO13:4656 21 BE 57         ld   hl,57BE        // "MAP DATA doesn't exist."
 RO13:4659 01 0D 02         ld   bc,020D
 RO13:465C CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 RO13:465F CD 9B 05         call 059B           // ($0000) = 0
 RO13:4662 C9               ret  
 RO13:4663 F5               push af
 RO13:4664 EF 28 AE 40                          // Establishes map basic logistics including map number and game mode, also triggers custom map exists flag if given custom map is used (A is map number)
 RO13:4668 CD 81 45         call 4581           // Blanks Description Text Box on Map Edit Menu
 RO13:466B 3E 01            ld   a,01
 RO13:466D 21 1D CA         ld   hl,CA1D
 RO13:4670 CD C7 3A         call 3AC7           // Does the custom map exist?
 RO13:4673 CA FE 46         jp   z,46FE         // If no, just print "MAP DATA doesn't exist."
 RO13:4676 11 41 CA         ld   de,CA41
 RO13:4679 21 3B DC         ld   hl,DC3B
 RO13:467C 01 08 00         ld   bc,0008
 RO13:467F CD 50 3B         call 3B50           // Load map name into ($DC3B) 8 byte
 RO13:4682 21 3B DC         ld   hl,DC3B
 RO13:4685 01 0D 02         ld   bc,020D
 RO13:4688 CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 RO13:468B FA 4D CA         ld   a,(CA4D)       // Map length
 RO13:468E 01 0D 0D         ld   bc,0D0D
 RO13:4691 16 02            ld   d,02           // Map length, 13, 13, 2
 RO13:4693 CD F5 31         call 31F5           // [$C300 + [$FFC8]] holds # of digit bytes, then designated HL (reversed), then number text (A is the number, BC is coordinates, D is the number of digits)
 RO13:4696 3E 58            ld   a,58           // English Letter X
 RO13:4698 01 0D 0F         ld   bc,0F0D
 RO13:469B CD ED 34         call 34ED           // [$C300 + [$FFC8]] 3 byte holds: 1, B + C%8 * 32, 152 or 24 + C / 8, A; [$FFCA] incremented (152 or 24 + C / 8 is 24 + C / 8 if [$FFCB] != 0)
 RO13:469E FA 4E CA         ld   a,(CA4E)       // Map height
 RO13:46A1 01 0D 10         ld   bc,100D
 RO13:46A4 16 02            ld   d,02           // Map height, 16, 13, 2
 RO13:46A6 CD F5 31         call 31F5           // [$C300 + [$FFC8]] holds # of digit bytes, then designated HL (reversed), then number text (A is the number, BC is coordinates, D is the number of digits)
 RO13:46A9 F1               pop  af             // Map #
 RO13:46AA CD AE 45         call 45AE           // For existing Map Online 7 Digit Code, print last 4 digits at 8,14 and set A = 0 and ($CC20) = 0; otherwise, SCF
 RO13:46AD 38 08            jr   c,46B7         // Skip next part for no Map Online 7 Digit Code
 RO13:46AF 21 4E 56         ld   hl,564E        // "MAP NO." (2,14)
 RO13:46B2 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 RO13:46B5 18 00            jr   46B7
 RO13:46B7 11 31 CA         ld   de,CA31
 RO13:46BA 21 A8 DA         ld   hl,DAA8
 RO13:46BD 01 0C 00         ld   bc,000C
 RO13:46C0 CD 50 3B         call 3B50           // ($DAA8~$DAB3) = ($CA31~$CA3C)
 RO13:46C3 AF               xor  a
 RO13:46C4 EA B4 DA         ld   (DAB4),a
 RO13:46C7 FA A8 DA         ld   a,(DAA8)
 RO13:46CA FE 00            cp   a,00
 RO13:46CC 28 0B            jr   z,46D9
 RO13:46CE 21 A8 DA         ld   hl,DAA8
 RO13:46D1 01 0F 02         ld   bc,020F
 RO13:46D4 CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 RO13:46D7 18 2F            jr   4708           // Immediate ending
 RO13:46D9 11 29 CA         ld   de,CA29
 RO13:46DC 21 A8 DA         ld   hl,DAA8
 RO13:46DF 01 08 00         ld   bc,0008
 RO13:46E2 CD 50 3B         call 3B50           // ($DAA8~$DAAF) = ($CA29~$CA30)
 RO13:46E5 FA A8 DA         ld   a,(DAA8)
 RO13:46E8 FE 00            cp   a,00
 RO13:46EA 28 02            jr   z,46EE
 RO13:46EC 18 05            jr   46F3
 RO13:46EE 21 09 47         ld   hl,4709        // "User Map"
 RO13:46F1 18 03            jr   46F6
 RO13:46F3 21 09 47         ld   hl,4709        // "User Map"
 RO13:46F6 01 0F 02         ld   bc,020F
 RO13:46F9 CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 RO13:46FC 18 0A            jr   4708
 RO13:46FE F1               pop  af
 RO13:46FF 21 BE 57         ld   hl,57BE        // "MAP DATA doesn't exist."
 RO13:4702 01 0D 02         ld   bc,020D
 RO13:4705 CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 RO13:4708 C9               ret  

 RO13:4709 D5 2D E3 2D CF FF F4 00              // "User Map"
 RO13:4711 CF B2 CF FF F4 00                    // "My Map"

 RO13:4717 FA 50 DC         ld   a,(DC50)       // Quick Open Type
 RO13:471A FE 08            cp   a,08
 RO13:471C 38 04            jr   c,4722         // Branches for not Network Only option
 RO13:471E CD F8 45         call 45F8           // Online Map Description Text management including Code #
 RO13:4721 C9               ret  
 RO13:4722 FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:4725 CD 63 46         call 4663           // Standard Custom Map Description Text management
 RO13:4728 C9               ret                 // Custom Map Description Text management as a whole
 RO13:4729 AF               xor  a
 RO13:472A F5               push af
 RO13:472B C5               push bc             // Loop begins here
 RO13:472C D5               push de
 RO13:472D CD 2E 45         call 452E           // A set to Palette: Blue if Custom Map D exists, Red otherwise
 RO13:4730 11 02 02         ld   de,0202
 RO13:4733 26 01            ld   h,01
 RO13:4735 EF 15 FD 67                          // (VRA0:$9800 X~D,Y~E) = H + Prior Tiles, (VRA1:$9800 X~D,Y~E) = A
 RO13:4739 D1               pop  de
 RO13:473A 14               inc  d
 RO13:473B C1               pop  bc
 RO13:473C 04               inc  b
 RO13:473D 04               inc  b
 RO13:473E 04               inc  b
 RO13:473F F1               pop  af
 RO13:4740 3C               inc  a
 RO13:4741 FE 05            cp   a,05
 RO13:4743 28 03            jr   z,4748         // Ends after 5 loops
 RO13:4745 F5               push af
 RO13:4746 18 E3            jr   472B
 RO13:4748 C9               ret                 // Manages Palettes of file row for Map Editor File selection
 RO13:4749 F5               push af
 RO13:474A CD D2 04         call 04D2           // Next frame
 RO13:474D FA 2C DC         ld   a,(DC2C)       // Pointing Down Bullet for Map Edit Options
 RO13:4750 CD 5F 2F         call 2F5F           // set 0,($D000 + A * 16) WRAM bank 4
 RO13:4753 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO13:4756 CD D2 04         call 04D2           // Next frame
 RO13:4759 01 06 01         ld   bc,0106
 RO13:475C 11 05 12         ld   de,1205
 RO13:475F EF 10 01 69                          // Sets up table of covered graphics within late WRA4 Bank, as well as defaulted table of graphics, frame update per row version (BC is starting location, DE is size)
 RO13:4763 F0 83            ld   a,(ff00+83)
 RO13:4765 F5               push af
 RO13:4766 3E 01            ld   a,01
 RO13:4768 E0 83            ld   (ff00+83),a
 RO13:476A E0 4F            ld   (ff00+4F),a
 RO13:476C AF               xor  a
 RO13:476D 01 07 02         ld   bc,0207
 RO13:4770 11 03 10         ld   de,1003
 RO13:4773 EF 15 D3 6A                          // Sets current VRAM Bank map tiles in rectangle BC, size DE, to A
 RO13:4777 F1               pop  af
 RO13:4778 E0 83            ld   (ff00+83),a
 RO13:477A E0 4F            ld   (ff00+4F),a
 RO13:477C F1               pop  af
 RO13:477D FE 00            cp   a,00
 RO13:477F 28 02            jr   z,4783
 RO13:4781 18 05            jr   4788
 RO13:4783 21 B4 47         ld   hl,47B4        // "Can't Upload this Map."
 RO13:4786 18 03            jr   478B
 RO13:4788 21 C8 47         ld   hl,47C8        // "Can't Send this Map."
 RO13:478B 01 07 02         ld   bc,0207
 RO13:478E CD 38 2B         call 2B38           // VRA0[$9800] 1024 byte string holds dialogue (BC is starting coordinates, HL is dialogue pointer)
 RO13:4791 EF 22 0D 62                          // Frame update affecting sprites and base menu BG graphics
 RO13:4795 F0 91            ld   a,(ff00+91)
 RO13:4797 CB 47            bit  0,a            // A
 RO13:4799 20 06            jr   nz,47A1
 RO13:479B CB 4F            bit  1,a            // B
 RO13:479D 20 02            jr   nz,47A1
 RO13:479F 18 F0            jr   4791           // Standby for button input
 RO13:47A1 3E 02            ld   a,02
 RO13:47A3 CD 44 38         call 3844
 RO13:47A6 CD D2 04         call 04D2           // Next frame
 RO13:47A9 EF 10 08 69                          // Restores last table of covered graphics
 RO13:47AD FA 2C DC         ld   a,(DC2C)       // Pointing Down Bullet for Map Edit Options
 RO13:47B0 CD 45 2F         call 2F45           // res 0,($D000 + A * 16) WRAM bank 4
 RO13:47B3 C9               ret  

 RO13:47B4 6A 79 CF FF F4 7A B1 FF F4 DB 2D EC 01
 RO13:47C1 9B 67 7F 6E 8D 2E 00

 RO13:47C8 6A 79 CF FF F4 7A 49 52 72 63 6C 8D 9B 01
 RO13:47D6 61 91 89 6A 74 7A 9B 67 7F 6E 8D 2E 00

 RO13:47E3 4F               ld   c,a
 RO13:47E4 F0 82            ld   a,(ff00+82)
 RO13:47E6 F5               push af
 RO13:47E7 3E 04            ld   a,04
 RO13:47E9 E0 82            ld   (ff00+82),a
 RO13:47EB E0 70            ld   (ff00+70),a
 RO13:47ED 79               ld   a,c
 RO13:47EE EA 50 DC         ld   (DC50),a
 RO13:47F1 CD 38 43         call 4338           // Initializes graphics for Map Editor Quick Menu
 RO13:47F4 3E 02            ld   a,02
 RO13:47F6 CD 16 38         call 3816           // Menu theme
 RO13:47F9 CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 RO13:47FC CD A2 05         call 05A2           // Button update, next frame
 RO13:47FF CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO13:4802 3E 00            ld   a,00
 RO13:4804 EF 15 91 67                          // Updates menu shifting diagonally down-right BG graphics (A is modification of where menu BG graphics had been stored)
 RO13:4808 F0 92            ld   a,(ff00+92)
 RO13:480A CB 77            bit  6,a            // Up
 RO13:480C 28 17            jr   z,4825
 RO13:480E 3E 01            ld   a,01
 RO13:4810 CD 44 38         call 3844
 RO13:4813 FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:4816 D6 05            sub  a,05
 RO13:4818 38 09            jr   c,4823         // No rotation
 RO13:481A EA 2B DC         ld   (DC2B),a
 RO13:481D CD A0 44         call 44A0           // Map Editor Main Menu Pointing Down Bullet coordinates established
 RO13:4820 CD 17 47         call 4717           // Custom Map Description Text management as a whole
 RO13:4823 18 D7            jr   47FC           // Further standby for button input after pressing Up
 RO13:4825 CB 7F            bit  7,a            // Down
 RO13:4827 28 19            jr   z,4842
 RO13:4829 3E 01            ld   a,01
 RO13:482B CD 44 38         call 3844
 RO13:482E FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:4831 C6 05            add  a,05
 RO13:4833 FE 0A            cp   a,0A
 RO13:4835 30 09            jr   nc,4840        // No rotation
 RO13:4837 EA 2B DC         ld   (DC2B),a
 RO13:483A CD A0 44         call 44A0           // Map Editor Main Menu Pointing Down Bullet coordinates established
 RO13:483D CD 17 47         call 4717           // Custom Map Description Text management as a whole
 RO13:4840 18 BA            jr   47FC           // Further standby for button input after pressing Down
 RO13:4842 CB 6F            bit  5,a            // Left
 RO13:4844 28 1A            jr   z,4860
 RO13:4846 3E 01            ld   a,01
 RO13:4848 CD 44 38         call 3844
 RO13:484B FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:484E 3D               dec  a
 RO13:484F FE FF            cp   a,FF
 RO13:4851 20 02            jr   nz,4855
 RO13:4853 3E 09            ld   a,09           // Rotation
 RO13:4855 EA 2B DC         ld   (DC2B),a
 RO13:4858 CD A0 44         call 44A0           // Map Editor Main Menu Pointing Down Bullet coordinates established
 RO13:485B CD 17 47         call 4717           // Custom Map Description Text management as a whole
 RO13:485E 18 9C            jr   47FC           // Further standby for button input after pressing Left
 RO13:4860 CB 67            bit  4,a            // Right
 RO13:4862 28 1A            jr   z,487E
 RO13:4864 3E 01            ld   a,01
 RO13:4866 CD 44 38         call 3844
 RO13:4869 FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:486C 3C               inc  a
 RO13:486D FE 0A            cp   a,0A
 RO13:486F 20 01            jr   nz,4872
 RO13:4871 AF               xor  a              // Rotation
 RO13:4872 EA 2B DC         ld   (DC2B),a
 RO13:4875 CD A0 44         call 44A0           // Map Editor Main Menu Pointing Down Bullet coordinates established
 RO13:4878 CD 17 47         call 4717           // Custom Map Description Text management as a whole
 RO13:487B C3 FC 47         jp   47FC           // Further standby for button input after pressing Right
 RO13:487E CB 47            bit  0,a            // A
 RO13:4880 CA D1 49         jp   z,49D1
 RO13:4883 FA 4D DC         ld   a,(DC4D)       // Edit, Play, Copy, Delete, Send, Get
 RO13:4886 FE 00            cp   a,00
 RO13:4888 CA C2 49         jp   z,49C2
 RO13:488B FE 01            cp   a,01
 RO13:488D CA 9E 49         jp   z,499E
 RO13:4890 FE 02            cp   a,02
 RO13:4892 28 25            jr   z,48B9
 RO13:4894 FE 03            cp   a,03
 RO13:4896 CA 75 49         jp   z,4975
 RO13:4899 FE 04            cp   a,04
 RO13:489B CA 3A 49         jp   z,493A
 RO13:489E FE 05            cp   a,05
 RO13:48A0 CA B8 49         jp   z,49B8
 RO13:48A3 FE 06            cp   a,06
 RO13:48A5 28 2C            jr   z,48D3
 RO13:48A7 FE 08            cp   a,08
 RO13:48A9 28 57            jr   z,4902
 RO13:48AB FE 09            cp   a,09
 RO13:48AD CA 5B 49         jp   z,495B
 RO13:48B0 FE 0A            cp   a,0A
 RO13:48B2 28 6A            jr   z,491E
 RO13:48B4 FE 07            cp   a,07           // Upload
 RO13:48B6 CA 3A 49         jp   z,493A
 RO13:48B9 FA 2B DC         ld   a,(DC2B)       // Rejoins here on Copy
 RO13:48BC CD BD 51         call 51BD           // Zero flag triggered by custom map nonexistance, map basic logistics established just in case
 RO13:48BF CA A6 49         jp   z,49A6         // Jumps to Invalid sound if custom map doesn't exist
 RO13:48C2 3E 02            ld   a,02
 RO13:48C4 CD 44 38         call 3844
 RO13:48C7 CD CA 51         call 51CA           // Map Editor Quick Meny Copy master control
 RO13:48CA CD AC 51         call 51AC           // Updates Palettes of files for Map Editor File selection
 RO13:48CD CD 17 47         call 4717           // Custom Map Description Text management as a whole
 RO13:48D0 C3 DE 49         jp   49DE           // Standby for button input
 RO13:48D3 3E 02            ld   a,02           // Rejoins here on Save
 RO13:48D5 CD 44 38         call 3844
 RO13:48D8 FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:48DB CD BD 51         call 51BD           // Zero flag triggered by custom map nonexistance, map basic logistics established just in case
 RO13:48DE 28 0C            jr   z,48EC         // Skip if no need to Overwrite
 RO13:48E0 3E 01            ld   a,01
 RO13:48E2 CD 01 53         call 5301           // Map Editor Overwrite Confirmation master control, ending with A = 0 for OK, or 1 otherwise
 RO13:48E5 FE 01            cp   a,01
 RO13:48E7 20 03            jr   nz,48EC
 RO13:48E9 C3 DE 49         jp   49DE           // Goes to standby for button input if not doing Overwrite
 RO13:48EC CD A0 44         call 44A0           // Map Editor Main Menu Pointing Down Bullet coordinates established
 RO13:48EF FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:48F2 EA D1 CA         ld   (CAD1),a
 RO13:48F5 FA 2C DC         ld   a,(DC2C)       // Pointing Down Bullet for Map Edit Options
 RO13:48F8 EF 15 1E 5D                          // Sprite A moves down 10 pixels per frame, ending once the Y coordinate exceeds 183 (clearly off-screen)
 RO13:48FC FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:48FF C3 E1 49         jp   49E1           // Save ends with A = Highlighted Custom Map #
 RO13:4902 FA 2B DC         ld   a,(DC2B)       // Rejoins here on Upload Destination
 RO13:4905 CD 63 45         call 4563           // Carry Flag set if Online Partner Map A doesn't exist; otherwise, A = 0
 RO13:4908 D2 A6 49         jp   nc,49A6        // Jumps to Invalid sound if existing
 RO13:490B FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:490E EA D1 CA         ld   (CAD1),a
 RO13:4911 FA 2C DC         ld   a,(DC2C)       // Pointing Down Bullet for Map Edit Options
 RO13:4914 EF 15 1E 5D                          // Sprite A moves down 10 pixels per frame, ending once the Y coordinate exceeds 183 (clearly off-screen)
 RO13:4918 FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:491B C3 E1 49         jp   49E1           // Upload Destination ends with A = Highlighted Custom Map #
 RO13:491E FA 2B DC         ld   a,(DC2B)       // Rejoins here on Post
 RO13:4921 CD 63 45         call 4563           // Carry Flag set if Online Partner Map A doesn't exist; otherwise, A = 0
 RO13:4924 DA A6 49         jp   c,49A6         // Jumps to Invalid sound if not existing
 RO13:4927 FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:492A EA D1 CA         ld   (CAD1),a
 RO13:492D FA 2C DC         ld   a,(DC2C)       // Pointing Down Bullet for Map Edit Options
 RO13:4930 EF 15 1E 5D                          // Sprite A moves down 10 pixels per frame, ending once the Y coordinate exceeds 183 (clearly off-screen)
 RO13:4934 FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:4937 C3 E1 49         jp   49E1           // Post ends with A = Highlighted Custom Map #
 RO13:493A FA 2B DC         ld   a,(DC2B)       // Rejoins here on Send or Upload
 RO13:493D CD BD 51         call 51BD           // Zero flag triggered by custom map nonexistance, map basic logistics established just in case
 RO13:4940 28 64            jr   z,49A6         // Jumps to Invalid sound if map doesn't exist
 RO13:4942 FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:4945 CD 46 40         call 4046           // $CA73 to $CA88 holds online-related information for Custom Map A
 RO13:4948 CD D0 40         call 40D0           // SCF for ($CA73~$CA7A) byte not being empty or valid Map Online 7 Digit Code; otherwise, A = 0
 RO13:494B DA AD 49         jp   c,49AD         // "Can't Upload" stuff if Carry Flag set
 RO13:494E FA 2C DC         ld   a,(DC2C)       // Pointing Down Bullet for Map Edit Options
 RO13:4951 EF 15 1E 5D                          // Sprite A moves down 10 pixels per frame, ending once the Y coordinate exceeds 183 (clearly off-screen)
 RO13:4955 FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:4958 C3 E1 49         jp   49E1           // Send/Upload can end with A = Highlighted Custom Map #
 RO13:495B FA 2B DC         ld   a,(DC2B)       // Rejoins here on Delete Type 2
 RO13:495E CD 63 45         call 4563           // Carry Flag set if Online Partner Map A doesn't exist; otherwise, A = 0
 RO13:4961 38 43            jr   c,49A6         // Jumps to Invalid sound if not existing
 RO13:4963 FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:4966 EA D1 CA         ld   (CAD1),a
 RO13:4969 FA 2C DC         ld   a,(DC2C)       // Pointing Down Bullet for Map Edit Options
 RO13:496C EF 15 1E 5D                          // Sprite A moves down 10 pixels per frame, ending once the Y coordinate exceeds 183 (clearly off-screen)
 RO13:4970 FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:4973 18 6C            jr   49E1           // Delete Type 2 ends with A = Highlighted Custom Map #
 RO13:4975 FA 2B DC         ld   a,(DC2B)       // Rejoins here on Delete
 RO13:4978 CD BD 51         call 51BD           // Zero flag triggered by custom map nonexistance, map basic logistics established just in case
 RO13:497B 28 29            jr   z,49A6         // Jumps to Invalid sound if map doesn't exist
 RO13:497D FA 2C DC         ld   a,(DC2C)       // Pointing Down Bullet for Map Edit Options
 RO13:4980 EF 15 1E 5D                          // Sprite A moves down 10 pixels per frame, ending once the Y coordinate exceeds 183 (clearly off-screen)
 RO13:4984 CD 81 45         call 4581           // Blanks Description Text Box on Map Edit Menu
 RO13:4987 AF               xor  a
 RO13:4988 CD 01 53         call 5301           // Map Editor Delete Confirmation master control, ending with A = 0 for OK, or 1 otherwise
 RO13:498B FE 00            cp   a,00
 RO13:498D 20 07            jr   nz,4996
 RO13:498F FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:4992 EF 13 3F 5E                          // res ($DC2B),SRA0($A00F)
 RO13:4996 CD AC 51         call 51AC           // Updates Palettes of files for Map Editor File selection
 RO13:4999 CD 17 47         call 4717           // Custom Map Description Text management as a whole
 RO13:499C 18 40            jr   49DE           // Jumps to loop restart
 RO13:499E FA 2B DC         ld   a,(DC2B)       // Rejoins here on Play
 RO13:49A1 CD BD 51         call 51BD           // Zero flag triggered by custom map nonexistance, map basic logistics established just in case
 RO13:49A4 20 1C            jr   nz,49C2        // Play ends with A = Highlighted Custom Map # on custom map existence
 RO13:49A6 3E 03            ld   a,03
 RO13:49A8 CD 44 38         call 3844
 RO13:49AB 18 31            jr   49DE           // Standby for button input if map doesn't exist
 RO13:49AD 3E 03            ld   a,03
 RO13:49AF CD 44 38         call 3844
 RO13:49B2 AF               xor  a              // Upload
 RO13:49B3 CD 49 47         call 4749           // Handles Text Window display for inability to Upload map
 RO13:49B6 18 26            jr   49DE           // Standby for button input
 RO13:49B8 FA 2B DC         ld   a,(DC2B)       // Rejoins here on Get ("To Which Map Will You Get?")
 RO13:49BB CD BD 51         call 51BD           // Zero flag triggered by custom map nonexistance, map basic logistics established just in case
 RO13:49BE 28 21            jr   z,49E1         // Get ends with A = Highlighted Custom Map # if not covered already
 RO13:49C0 18 1C            jr   49DE           // Standby for valid button input
 RO13:49C2 FA 2C DC         ld   a,(DC2C)       // Pointing Down Bullet for Map Edit Options (rejoins here on Edit)
 RO13:49C5 EF 15 1E 5D                          // Sprite A moves down 10 pixels per frame, ending once the Y coordinate exceeds 183 (clearly off-screen)
 RO13:49C9 FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:49CC 18 13            jr   49E1           // Edit ends with A = Highlighted Custom Map #
 RO13:49CE C3 FC 47         jp   47FC
 RO13:49D1 CB 4F            bit  1,a            // B
 RO13:49D3 28 09            jr   z,49DE         // Jumps to loop restart if B isn't pressed
 RO13:49D5 3E 0C            ld   a,0C
 RO13:49D7 CD 44 38         call 3844
 RO13:49DA 3E FF            ld   a,FF
 RO13:49DC 18 03            jr   49E1
 RO13:49DE C3 FC 47         jp   47FC           // Cycles back to button input awaiting
 RO13:49E1 57               ld   d,a
 RO13:49E2 F1               pop  af
 RO13:49E3 E0 82            ld   (ff00+82),a
 RO13:49E5 E0 70            ld   (ff00+70),a
 RO13:49E7 D5               push de
 RO13:49E8 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 RO13:49EB CD 67 2E         call 2E67           // Handles clear-up of all sprite portions and entire ($C400) table, sets ($C00E) to 1
 RO13:49EE D1               pop  de
 RO13:49EF 7A               ld   a,d
 RO13:49F0 C9               ret                 // Map Editor Quick Menu master control
 RO13:49F1 CD F3 04         call 04F3           // Shuts off LCD Display if necessary
 RO13:49F4 CD CE 34         call 34CE           // Empty $FFC8 to $FFCB
 RO13:49F7 CD 7C 2D         call 2D7C           // Resets all Sprite-related data
 RO13:49FA AF               xor  a
 RO13:49FB E0 95            ld   (ff00+95),a
 RO13:49FD E0 96            ld   (ff00+96),a
 RO13:49FF EF 10 A8 68                          // Sets up basic covered graphics values
 RO13:4A03 EF 01 00 40                          // Graphics holding: VRA0($9000) to VRA0($97FF) then VRA0($8800) to VRA0($8FFF) holds basic text
 RO13:4A07 CD 18 06         call 0618           // Resets Palettes to absolute default Palettes
 RO13:4A0A CD 02 0F         call 0F02           // Empties ($9800) to ($9BFF) in both VRAM banks
 RO13:4A0D 3E 00            ld   a,00
 RO13:4A0F E0 83            ld   (ff00+83),a
 RO13:4A11 E0 4F            ld   (ff00+4F),a
 RO13:4A13 3E 00            ld   a,00
 RO13:4A15 EF 15 91 66                          // VRA1:($8F30~$8FFF) holds mode menu tile graphics basics; mode menu graphics basics established accordingly
 RO13:4A19 F0 83            ld   a,(ff00+83)
 RO13:4A1B F5               push af
 RO13:4A1C 3E 01            ld   a,01
 RO13:4A1E E0 83            ld   (ff00+83),a
 RO13:4A20 E0 4F            ld   (ff00+4F),a
 RO13:4A22 11 CC 57         ld   de,57CC
 RO13:4A25 21 00 90         ld   hl,9000
 RO13:4A28 01 90 00         ld   bc,0090
 RO13:4A2B CD 50 3B         call 3B50           // VRA1($9000~$908F) = ($57CC~$585B) (Design Maps main menu graphics)
 RO13:4A2E F1               pop  af
 RO13:4A2F E0 83            ld   (ff00+83),a
 RO13:4A31 E0 4F            ld   (ff00+4F),a
 RO13:4A33 3E 00            ld   a,00
 RO13:4A35 06 08            ld   b,08
 RO13:4A37 21 5C 58         ld   hl,585C
 RO13:4A3A CD BC 06         call 06BC           // ($C4E0) to ($C51F) hold ($585C) to ($589B)
 RO13:4A3D CD AF 06         call 06AF           // ($C4E0) 8 byte set to 00 00 00 69 FF 7F 40 72
 RO13:4A40 3E 07            ld   a,07
 RO13:4A42 06 01            ld   b,01
 RO13:4A44 0E 19            ld   c,19
 RO13:4A46 21 24 79         ld   hl,7924
 RO13:4A49 CD D9 06         call 06D9           // ($C518) to ($C51F) hold $19:($7924) to $19:($792B)
 RO13:4A4C CD F2 06         call 06F2           // Both BG and Sprite Palette tables are updated
 RO13:4A4F 3E 0A            ld   a,0A
 RO13:4A51 01 11 0F         ld   bc,0F11
 RO13:4A54 11 01 01         ld   de,0101
 RO13:4A57 26 05            ld   h,05           // B Button icon
 RO13:4A59 EF 15 FD 67                          // (VRA0:$9800 X~D,Y~E) = H + Prior Tiles, (VRA1:$9800 X~D,Y~E) = A
 RO13:4A5D 3E 08            ld   a,08
 RO13:4A5F 01 11 10         ld   bc,1011
 RO13:4A62 11 01 03         ld   de,0301
 RO13:4A65 26 06            ld   h,06           // "Back"
 RO13:4A67 EF 15 FD 67                          // (VRA0:$9800 X~D,Y~E) = H + Prior Tiles, (VRA1:$9800 X~D,Y~E) = A
 RO13:4A6B 01 01 01         ld   bc,0101
 RO13:4A6E 11 04 12         ld   de,1204
 RO13:4A71 EF 22 47 62                          // Basic setup for table rectangle BC, size DE including defaulted palette for interior's tiles
 RO13:4A75 21 57 56         ld   hl,5657        // Map Edit Options Text
 RO13:4A78 01 02 03         ld   bc,0302
 RO13:4A7B CD 38 2B         call 2B38           // VRA0[$9800] 1024 byte string holds dialogue (BC is starting coordinates, HL is dialogue pointer)
 RO13:4A7E 01 0C 01         ld   bc,010C
 RO13:4A81 11 05 12         ld   de,1205
 RO13:4A84 EF 22 47 62                          // Basic setup for table rectangle BC, size DE including defaulted palette for interior's tiles
 RO13:4A88 01 06 03         ld   bc,0306
 RO13:4A8B 16 00            ld   d,00
 RO13:4A8D CD 29 47         call 4729           // Manages Palettes of 1st file row for Map Editor File selection
 RO13:4A90 01 09 03         ld   bc,0309
 RO13:4A93 16 05            ld   d,05
 RO13:4A95 CD 29 47         call 4729           // Manages Palettes of 2nd file row for Map Editor File selection
 RO13:4A98 3E 20            ld   a,20
 RO13:4A9A 0E 00            ld   c,00
 RO13:4A9C 06 15            ld   b,15
 RO13:4A9E 11 98 6F         ld   de,6F98        // Pointing Right Mini-Arrow
 RO13:4AA1 CD E8 2D         call 2DE8           // A = number of already active sprites; $Dxx5~$DxxB prepared (B is ROM Block of Sprite, C is base Character Tile # / 2 with bit 7 determining VRAM Bank; and DE is pointer to sprite stats modification tables pointers)
 RO13:4AA4 EA 37 DC         ld   (DC37),a
 RO13:4AA7 CD C3 4A         call 4AC3           // Sets up coordinates of Pointing Right Mini Arrow on Map Editor
 RO13:4AAA 3E 20            ld   a,20
 RO13:4AAC 0E 00            ld   c,00
 RO13:4AAE 06 15            ld   b,15
 RO13:4AB0 11 44 6F         ld   de,6F44
 RO13:4AB3 CD E8 2D         call 2DE8           // A = number of already active sprites; $Dxx5~$DxxB prepared (B is ROM Block of Sprite, C is base Character Tile # / 2 with bit 7 determining VRAM Bank; and DE is pointer to sprite stats modification tables pointers)
 RO13:4AB6 EA 2C DC         ld   (DC2C),a       // Pointing Down Bullet for Map Edit Options
 RO13:4AB9 CD A0 44         call 44A0           // Map Editor Main Menu Pointing Down Bullet coordinates established
 RO13:4ABC FA 2C DC         ld   a,(DC2C)       // Pointing Down Bullet for Map Edit Options
 RO13:4ABF CD 5F 2F         call 2F5F           // set 0,($D000 + A * 16) WRAM bank 4
 RO13:4AC2 C9               ret                 // Establishes Map Editor Main Menu graphics
 RO13:4AC3 FA 36 DC         ld   a,(DC36)       // Map Editor Primary Option #
 RO13:4AC6 06 03            ld   b,03
 RO13:4AC8 EF 14 1B 5F                          // B = A / B, A holds remainder
 RO13:4ACC 06 30            ld   b,30           // 6 column tiles right
 RO13:4ACE CD 95 29         call 2995           // HL = A * B
 RO13:4AD1 7D               ld   a,l
 RO13:4AD2 C6 1C            add  a,1C
 RO13:4AD4 EA 38 DC         ld   (DC38),a
 RO13:4AD7 FA 36 DC         ld   a,(DC36)       // Map Editor Primary Option #
 RO13:4ADA 06 03            ld   b,03
 RO13:4ADC EF 14 1B 5F                          // B = A / B, A holds remainder
 RO13:4AE0 78               ld   a,b            // 0 or 1 (Row)
 RO13:4AE1 06 08            ld   b,08
 RO13:4AE3 CD 95 29         call 2995           // HL = A * B
 RO13:4AE6 7D               ld   a,l
 RO13:4AE7 C6 24            add  a,24
 RO13:4AE9 EA 39 DC         ld   (DC39),a
 RO13:4AEC FA 3A DC         ld   a,(DC3A)
 RO13:4AEF FE 01            cp   a,01
 RO13:4AF1 20 08            jr   nz,4AFB
 RO13:4AF3 FA 39 DC         ld   a,(DC39)
 RO13:4AF6 D6 08            sub  a,08
 RO13:4AF8 EA 39 DC         ld   (DC39),a
 RO13:4AFB FA 38 DC         ld   a,(DC38)
 RO13:4AFE 47               ld   b,a
 RO13:4AFF FA 39 DC         ld   a,(DC39)
 RO13:4B02 4F               ld   c,a
 RO13:4B03 FA 37 DC         ld   a,(DC37)       // Pointing Right Mini Arrow for Map Edit Options
 RO13:4B06 CD AE 2E         call 2EAE           // WRA4($D001 + A * 16) = C; WRA4($D002 + A * 16) = B
 RO13:4B09 C9               ret                 // Sets up coordinates of Pointing Right Mini Arrow on Map Editor
 RO13:4B0A F0 83            ld   a,(ff00+83)
 RO13:4B0C F5               push af
 RO13:4B0D 3E 00            ld   a,00
 RO13:4B0F E0 83            ld   (ff00+83),a
 RO13:4B11 E0 4F            ld   (ff00+4F),a
 RO13:4B13 AF               xor  a
 RO13:4B14 01 0D 02         ld   bc,020D
 RO13:4B17 11 03 10         ld   de,1003
 RO13:4B1A EF 15 D3 6A                          // Sets current VRAM Bank map tiles in rectangle BC, size DE, to A
 RO13:4B1E F1               pop  af
 RO13:4B1F E0 83            ld   (ff00+83),a
 RO13:4B21 E0 4F            ld   (ff00+4F),a
 RO13:4B23 21 3D 4B         ld   hl,4B3D
 RO13:4B26 FA 36 DC         ld   a,(DC36)       // Map Editor Primary Option #
 RO13:4B29 87               add  a
 RO13:4B2A 4F               ld   c,a
 RO13:4B2B 06 00            ld   b,00
 RO13:4B2D 09               add  hl,bc
 RO13:4B2E 2A               ldi  a,(hl)
 RO13:4B2F 5F               ld   e,a
 RO13:4B30 7E               ld   a,(hl)
 RO13:4B31 57               ld   d,a
 RO13:4B32 7A               ld   a,d
 RO13:4B33 67               ld   h,a
 RO13:4B34 7B               ld   a,e
 RO13:4B35 6F               ld   l,a
 RO13:4B36 01 0D 02         ld   bc,020D
 RO13:4B39 CD 38 2B         call 2B38           // VRA0[$9800] 1024 byte string holds dialogue (BC is starting coordinates, HL is dialogue pointer)
 RO13:4B3C C9               ret                 // Establishes description text of current highlighted option on Map Editor Main Menu

 RO13:4B3D 0F 57               ld   d,a
 RO13:4B3F 3A 57               ld   d,a
 RO13:4B41 78 57               ld   d,a
 RO13:4B43 1A 57               ld   d,a
 RO13:4B45 49 57               ld   d,a
 RO13:4B47 9E 57

 RO13:4B49 FA 36 DC         ld   a,(DC36)       // Map Editor Primary Option #
 RO13:4B4C FE 00            cp   a,00           // Edit
 RO13:4B4E 28 14            jr   z,4B64
 RO13:4B50 FE 01            cp   a,01           // Copy
 RO13:4B52 28 15            jr   z,4B69
 RO13:4B54 FE 02            cp   a,02           // Send
 RO13:4B56 28 16            jr   z,4B6E
 RO13:4B58 FE 03            cp   a,03           // Play
 RO13:4B5A 28 17            jr   z,4B73
 RO13:4B5C FE 04            cp   a,04           // Delete
 RO13:4B5E 28 18            jr   z,4B78
 RO13:4B60 FE 05            cp   a,05           // Get
 RO13:4B62 28 19            jr   z,4B7D
 RO13:4B64 21 66 55         ld   hl,5566        // "Which Map will you Edit?"
 RO13:4B67 18 19            jr   4B82
 RO13:4B69 21 8A 55         ld   hl,558A        // "Which Map will you Copy?"
 RO13:4B6C 18 14            jr   4B82
 RO13:4B6E 21 AD 55         ld   hl,55AD        // "Which Map will you Send?"
 RO13:4B71 18 0F            jr   4B82
 RO13:4B73 21 79 55         ld   hl,5579        // "Which Map will you Play?"
 RO13:4B76 18 0A            jr   4B82
 RO13:4B78 21 9B 55         ld   hl,559B        // "Which Map will you Delete?"
 RO13:4B7B 18 05            jr   4B82
 RO13:4B7D 21 BC 55         ld   hl,55BC        // "To which Map will you Get?"
 RO13:4B80 18 00            jr   4B82
 RO13:4B82 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 RO13:4B85 C9               ret                 // Establishes Map Choice prompt text for Map Editor primary choice
 RO13:4B86 F0 82            ld   a,(ff00+82)
 RO13:4B88 F5               push af
 RO13:4B89 3E 04            ld   a,04
 RO13:4B8B E0 82            ld   (ff00+82),a
 RO13:4B8D E0 70            ld   (ff00+70),a
 RO13:4B8F AF               xor  a
 RO13:4B90 EA 50 DC         ld   (DC50),a
 RO13:4B93 CD F1 49         call 49F1           // Establishes Map Editor Main Menu graphics
 RO13:4B96 CD 0A 4B         call 4B0A           // Establishes description text of current highlighted option on Map Editor Main Menu
 RO13:4B99 3E 02            ld   a,02
 RO13:4B9B CD 16 38         call 3816           // Menu theme
 RO13:4B9E CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 RO13:4BA1 CD A2 05         call 05A2           // Button update, next frame
 RO13:4BA4 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO13:4BA7 3E 00            ld   a,00
 RO13:4BA9 EF 15 91 67                          // Updates menu shifting diagonally down-right BG graphics (A is modification of where menu BG graphics had been stored)
 RO13:4BAD F0 92            ld   a,(ff00+92)
 RO13:4BAF CB 77            bit  6,a            // Up
 RO13:4BB1 28 17            jr   z,4BCA
 RO13:4BB3 3E 01            ld   a,01
 RO13:4BB5 CD 44 38         call 3844
 RO13:4BB8 FA 36 DC         ld   a,(DC36)       // Map Editor Primary Option #
 RO13:4BBB D6 03            sub  a,03
 RO13:4BBD 38 09            jr   c,4BC8         // No rotation
 RO13:4BBF EA 36 DC         ld   (DC36),a
 RO13:4BC2 CD C3 4A         call 4AC3           // Sets up coordinates of Pointing Right Mini Arrow on Map Editor
 RO13:4BC5 CD 0A 4B         call 4B0A           // Establishes description text of current highlighted option on Map Editor Main Menu
 RO13:4BC8 18 D7            jr   4BA1           // Further wait for button input after pressing Up
 RO13:4BCA CB 7F            bit  7,a            // Down
 RO13:4BCC 28 19            jr   z,4BE7
 RO13:4BCE 3E 01            ld   a,01
 RO13:4BD0 CD 44 38         call 3844
 RO13:4BD3 FA 36 DC         ld   a,(DC36)       // Map Editor Primary Option #
 RO13:4BD6 C6 03            add  a,03
 RO13:4BD8 FE 06            cp   a,06
 RO13:4BDA 30 09            jr   nc,4BE5        // No rotation
 RO13:4BDC EA 36 DC         ld   (DC36),a
 RO13:4BDF CD C3 4A         call 4AC3           // Sets up coordinates of Pointing Right Mini Arrow on Map Editor
 RO13:4BE2 CD 0A 4B         call 4B0A           // Establishes description text of current highlighted option on Map Editor Main Menu
 RO13:4BE5 18 BA            jr   4BA1           // Further wait for button input after pressing Down
 RO13:4BE7 CB 6F            bit  5,a            // Left
 RO13:4BE9 28 1A            jr   z,4C05
 RO13:4BEB 3E 01            ld   a,01
 RO13:4BED CD 44 38         call 3844
 RO13:4BF0 FA 36 DC         ld   a,(DC36)       // Map Editor Primary Option #
 RO13:4BF3 3D               dec  a
 RO13:4BF4 FE FF            cp   a,FF
 RO13:4BF6 20 02            jr   nz,4BFA
 RO13:4BF8 3E 05            ld   a,05
 RO13:4BFA EA 36 DC         ld   (DC36),a
 RO13:4BFD CD C3 4A         call 4AC3           // Sets up coordinates of Pointing Right Mini Arrow on Map Editor
 RO13:4C00 CD 0A 4B         call 4B0A           // Establishes description text of current highlighted option on Map Editor Main Menu
 RO13:4C03 18 9C            jr   4BA1           // Further wait for button input after pressing Left
 RO13:4C05 CB 67            bit  4,a            // Right
 RO13:4C07 28 1A            jr   z,4C23
 RO13:4C09 3E 01            ld   a,01
 RO13:4C0B CD 44 38         call 3844
 RO13:4C0E FA 36 DC         ld   a,(DC36)       // Map Editor Primary Option #
 RO13:4C11 3C               inc  a
 RO13:4C12 FE 06            cp   a,06
 RO13:4C14 20 01            jr   nz,4C17
 RO13:4C16 AF               xor  a
 RO13:4C17 EA 36 DC         ld   (DC36),a
 RO13:4C1A CD C3 4A         call 4AC3           // Sets up coordinates of Pointing Right Mini Arrow on Map Editor
 RO13:4C1D CD 0A 4B         call 4B0A           // Establishes description text of current highlighted option on Map Editor Main Menu
 RO13:4C20 C3 A1 4B         jp   4BA1           // Further wait for button input after pressing Right
 RO13:4C23 CB 47            bit  0,a            // A
 RO13:4C25 CA 33 4C         jp   z,4C33
 RO13:4C28 3E 02            ld   a,02
 RO13:4C2A CD 44 38         call 3844
 RO13:4C2D FA 36 DC         ld   a,(DC36)       // Map Editor Primary Option #
 RO13:4C30 C3 44 4C         jp   4C44
 RO13:4C33 CB 4F            bit  1,a            // B
 RO13:4C35 28 0A            jr   z,4C41
 RO13:4C37 3E 0C            ld   a,0C
 RO13:4C39 CD 44 38         call 3844
 RO13:4C3C 3E FF            ld   a,FF
 RO13:4C3E C3 16 4D         jp   4D16           // Ending with A = -1
 RO13:4C41 C3 A1 4B         jp   4BA1           // Standby for button input
 RO13:4C44 FE 00            cp   a,00           // Edit
 RO13:4C46 28 16            jr   z,4C5E
 RO13:4C48 FE 01            cp   a,01           // Copy
 RO13:4C4A 28 17            jr   z,4C63
 RO13:4C4C FE 02            cp   a,02           // Send
 RO13:4C4E 28 18            jr   z,4C68
 RO13:4C50 FE 03            cp   a,03           // Play
 RO13:4C52 28 19            jr   z,4C6D
 RO13:4C54 FE 04            cp   a,04           // Delete
 RO13:4C56 CA B3 4C         jp   z,4CB3
 RO13:4C59 FE 05            cp   a,05           // Get
 RO13:4C5B CA B7 4C         jp   z,4CB7
 RO13:4C5E 3E 00            ld   a,00           // Edit
 RO13:4C60 C3 BB 4C         jp   4CBB
 RO13:4C63 3E 02            ld   a,02           // Copy
 RO13:4C65 C3 BB 4C         jp   4CBB
 RO13:4C68 3E 04            ld   a,04           // Send
 RO13:4C6A C3 BB 4C         jp   4CBB
 RO13:4C6D 3E 04            ld   a,04
 RO13:4C6F 06 03            ld   b,03           // Map Edit
 RO13:4C71 EF 13 17 59                          // Bit Weight for Active Game Mode
 RO13:4C75 28 38            jr   z,4CAF         // Branch if no quick save
 RO13:4C77 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 RO13:4C7A EF 0F 5F 40                          // Map Editor Quick Save check, ending with A = 1 for no Quick Save, 0 for opening Quick Save, or A = -1 for B Button press
 RO13:4C7E FE FF            cp   a,FF           // B Button Press
 RO13:4C80 28 1C            jr   z,4C9E
 RO13:4C82 FE 01            cp   a,01           // Deleted Data
 RO13:4C84 28 18            jr   z,4C9E
 RO13:4C86 CD 67 2E         call 2E67           // Handles clear-up of all sprite portions and entire ($C400) table, sets ($C00E) to 1
 RO13:4C89 EF 0F 3D 40                          // Plays out Map Editor Quick Save
 RO13:4C8D CD F1 49         call 49F1           // Establishes Map Editor Main Menu graphics
 RO13:4C90 CD 0A 4B         call 4B0A           // Establishes description text of current highlighted option on Map Editor Main Menu
 RO13:4C93 3E 02            ld   a,02
 RO13:4C95 CD 16 38         call 3816           // Menu theme
 RO13:4C98 CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 RO13:4C9B C3 A1 4B         jp   4BA1           // Back to standby for button input after finishing core gameplay
 RO13:4C9E CD F1 49         call 49F1           // Establishes Map Editor Main Menu graphics
 RO13:4CA1 CD 0A 4B         call 4B0A           // Establishes description text of current highlighted option on Map Editor Main Menu
 RO13:4CA4 3E 02            ld   a,02
 RO13:4CA6 CD 16 38         call 3816           // Menu theme
 RO13:4CA9 CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 RO13:4CAC C3 A1 4B         jp   4BA1           // Back to standby for button input after cancelling with B Button or saying No
 RO13:4CAF 3E 01            ld   a,01           // Play
 RO13:4CB1 18 08            jr   4CBB
 RO13:4CB3 3E 03            ld   a,03           // Delete
 RO13:4CB5 18 04            jr   4CBB
 RO13:4CB7 3E 05            ld   a,05           // Get
 RO13:4CB9 18 00            jr   4CBB           // Edit, Play, Copy, Delete, Send, Get
 RO13:4CBB EA 4D DC         ld   (DC4D),a
 RO13:4CBE FA 37 DC         ld   a,(DC37)       // Pointing Right Mini Arrow for Map Edit Options
 RO13:4CC1 CD 5F 2F         call 2F5F           // set 0,($D000 + A * 16) WRAM bank 4
 RO13:4CC4 01 01 01         ld   bc,0101
 RO13:4CC7 11 04 12         ld   de,1204
 RO13:4CCA EF 10 FA 68                          // Sets up table of covered graphics within late WRA4 Bank, as well as defaulted table of graphics (BC is starting location, DE is size)
 RO13:4CCE F0 83            ld   a,(ff00+83)
 RO13:4CD0 F5               push af
 RO13:4CD1 3E 01            ld   a,01
 RO13:4CD3 E0 83            ld   (ff00+83),a
 RO13:4CD5 E0 4F            ld   (ff00+4F),a
 RO13:4CD7 AF               xor  a
 RO13:4CD8 01 02 02         ld   bc,0202
 RO13:4CDB 11 01 10         ld   de,1001
 RO13:4CDE EF 15 D3 6A                          // Sets current VRAM Bank map tiles in rectangle BC, size DE, to A
 RO13:4CE2 F1               pop  af
 RO13:4CE3 E0 83            ld   (ff00+83),a
 RO13:4CE5 E0 4F            ld   (ff00+4F),a
 RO13:4CE7 CD 49 4B         call 4B49           // Establishes Map Choice prompt text for Map Editor primary choice
 RO13:4CEA FA 2C DC         ld   a,(DC2C)       // Pointing Down Bullet for Map Edit Options
 RO13:4CED CD 45 2F         call 2F45           // res 0,($D000 + A * 16) WRAM bank 4
 RO13:4CF0 CD 17 47         call 4717           // Custom Map Description Text management as a whole
 RO13:4CF3 CD BA 4F         call 4FBA           // Map Editor Map Choosing master control
 RO13:4CF6 FA 2C DC         ld   a,(DC2C)       // Pointing Down Bullet for Map Edit Options
 RO13:4CF9 CD 5F 2F         call 2F5F           // set 0,($D000 + A * 16) WRAM bank 4
 RO13:4CFC EF 10 08 69                          // Restores last table of covered graphics
 RO13:4D00 FA 37 DC         ld   a,(DC37)       // Pointing Right Mini Arrow for Map Edit Options
 RO13:4D03 CD 45 2F         call 2F45           // res 0,($D000 + A * 16) WRAM bank 4
 RO13:4D06 CD 0A 4B         call 4B0A           // Establishes description text of current highlighted option on Map Editor Main Menu
 RO13:4D09 FA 69 CA         ld   a,(CA69)       // Transition return necessity flag
 RO13:4D0C FE 01            cp   a,01
 RO13:4D0E 20 03            jr   nz,4D13
 RO13:4D10 CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 RO13:4D13 C3 A1 4B         jp   4BA1           // Further standby for button input after finishing task assigned from pressing A
 RO13:4D16 57               ld   d,a
 RO13:4D17 F1               pop  af
 RO13:4D18 E0 82            ld   (ff00+82),a
 RO13:4D1A E0 70            ld   (ff00+70),a
 RO13:4D1C D5               push de
 RO13:4D1D CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 RO13:4D20 CD 67 2E         call 2E67           // Handles clear-up of all sprite portions and entire ($C400) table, sets ($C00E) to 1
 RO13:4D23 D1               pop  de
 RO13:4D24 7A               ld   a,d
 RO13:4D25 C9               ret                 // Map Editor master control
 RO13:4D26 FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:4D29 EA 30 DC         ld   (DC30),a
 RO13:4D2C 01 01 01         ld   bc,0101
 RO13:4D2F 11 04 12         ld   de,1204
 RO13:4D32 EF 10 FA 68                          // Sets up table of covered graphics within late WRA4 Bank, as well as defaulted table of graphics (BC is starting location, DE is size)
 RO13:4D36 F0 83            ld   a,(ff00+83)
 RO13:4D38 F5               push af
 RO13:4D39 3E 01            ld   a,01
 RO13:4D3B E0 83            ld   (ff00+83),a
 RO13:4D3D E0 4F            ld   (ff00+4F),a
 RO13:4D3F AF               xor  a
 RO13:4D40 01 02 02         ld   bc,0202
 RO13:4D43 11 01 10         ld   de,1001
 RO13:4D46 EF 15 D3 6A                          // Sets current VRAM Bank map tiles in rectangle BC, size DE, to A
 RO13:4D4A F1               pop  af
 RO13:4D4B E0 83            ld   (ff00+83),a
 RO13:4D4D E0 4F            ld   (ff00+4F),a
 RO13:4D4F 21 77 56         ld   hl,5677        // "Copy to where?"
 RO13:4D52 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 RO13:4D55 FA 2C DC         ld   a,(DC2C)       // Pointing Down Bullet for Map Edit Options
 RO13:4D58 CD 11 2F         call 2F11           // set 1,WRA4[$D000 + A * 16] (Pause Timer)
 RO13:4D5B 3E 20            ld   a,20
 RO13:4D5D 0E 00            ld   c,00
 RO13:4D5F 06 15            ld   b,15
 RO13:4D61 11 44 6F         ld   de,6F44
 RO13:4D64 CD E8 2D         call 2DE8           // A = number of already active sprites; $Dxx5~$DxxB prepared (B is ROM Block of Sprite, C is base Character Tile # / 2 with bit 7 determining VRAM Bank; and DE is pointer to sprite stats modification tables pointers)
 RO13:4D67 EA 31 DC         ld   (DC31),a       // Pointing Down Bullet for Map Edit Copy
 RO13:4D6A CD E7 44         call 44E7           // Map Editor Main Menu 2nd Pointing Down Bullet coordinates established
 RO13:4D6D FA 30 DC         ld   a,(DC30)       // 2nd Highlighted Custom Map # on Map Editor Main Menu
 RO13:4D70 CD 63 46         call 4663           // Standard Custom Map Description Text management
 RO13:4D73 CD A2 05         call 05A2           // Button update, next frame
 RO13:4D76 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO13:4D79 3E 00            ld   a,00
 RO13:4D7B EF 15 91 67                          // Updates menu shifting diagonally down-right BG graphics (A is modification of where menu BG graphics had been stored)
 RO13:4D7F F0 92            ld   a,(ff00+92)
 RO13:4D81 CB 77            bit  6,a            // Up
 RO13:4D83 28 1A            jr   z,4D9F
 RO13:4D85 3E 01            ld   a,01
 RO13:4D87 CD 44 38         call 3844
 RO13:4D8A FA 30 DC         ld   a,(DC30)       // 2nd Highlighted Custom Map # on Map Editor Main Menu
 RO13:4D8D D6 05            sub  a,05
 RO13:4D8F 38 0C            jr   c,4D9D         // No rotation
 RO13:4D91 EA 30 DC         ld   (DC30),a
 RO13:4D94 CD E7 44         call 44E7           // Map Editor Main Menu 2nd Pointing Down Bullet coordinates established
 RO13:4D97 FA 30 DC         ld   a,(DC30)       // 2nd Highlighted Custom Map # on Map Editor Main Menu
 RO13:4D9A CD 63 46         call 4663           // Standard Custom Map Description Text management
 RO13:4D9D 18 D4            jr   4D73           // Further standby for button input after pressing Up
 RO13:4D9F CB 7F            bit  7,a            // Down
 RO13:4DA1 28 1C            jr   z,4DBF
 RO13:4DA3 3E 01            ld   a,01
 RO13:4DA5 CD 44 38         call 3844
 RO13:4DA8 FA 30 DC         ld   a,(DC30)       // 2nd Highlighted Custom Map # on Map Editor Main Menu
 RO13:4DAB C6 05            add  a,05
 RO13:4DAD FE 0A            cp   a,0A
 RO13:4DAF 30 0C            jr   nc,4DBD        // No rotation
 RO13:4DB1 EA 30 DC         ld   (DC30),a
 RO13:4DB4 CD E7 44         call 44E7           // Map Editor Main Menu 2nd Pointing Down Bullet coordinates established
 RO13:4DB7 FA 30 DC         ld   a,(DC30)       // 2nd Highlighted Custom Map # on Map Editor Main Menu
 RO13:4DBA CD 63 46         call 4663           // Standard Custom Map Description Text management
 RO13:4DBD 18 B4            jr   4D73           // Further standby for button input after pressing 
 RO13:4DBF CB 6F            bit  5,a            // Left
 RO13:4DC1 28 1D            jr   z,4DE0
 RO13:4DC3 3E 01            ld   a,01
 RO13:4DC5 CD 44 38         call 3844
 RO13:4DC8 FA 30 DC         ld   a,(DC30)       // 2nd Highlighted Custom Map # on Map Editor Main Menu
 RO13:4DCB 3D               dec  a
 RO13:4DCC FE FF            cp   a,FF
 RO13:4DCE 20 02            jr   nz,4DD2
 RO13:4DD0 3E 09            ld   a,09           // Rotation
 RO13:4DD2 EA 30 DC         ld   (DC30),a
 RO13:4DD5 CD E7 44         call 44E7           // Map Editor Main Menu 2nd Pointing Down Bullet coordinates established
 RO13:4DD8 FA 30 DC         ld   a,(DC30)       // 2nd Highlighted Custom Map # on Map Editor Main Menu
 RO13:4DDB CD 63 46         call 4663           // Standard Custom Map Description Text management
 RO13:4DDE 18 93            jr   4D73           // Further standby for button input after pressing Left
 RO13:4DE0 CB 67            bit  4,a            // Right
 RO13:4DE2 28 1C            jr   z,4E00
 RO13:4DE4 3E 01            ld   a,01
 RO13:4DE6 CD 44 38         call 3844
 RO13:4DE9 FA 30 DC         ld   a,(DC30)       // 2nd Highlighted Custom Map # on Map Editor Main Menu
 RO13:4DEC 3C               inc  a
 RO13:4DED FE 0A            cp   a,0A
 RO13:4DEF 20 01            jr   nz,4DF2
 RO13:4DF1 AF               xor  a              // Rotation
 RO13:4DF2 EA 30 DC         ld   (DC30),a
 RO13:4DF5 CD E7 44         call 44E7           // Map Editor Main Menu 2nd Pointing Down Bullet coordinates established
 RO13:4DF8 FA 30 DC         ld   a,(DC30)       // 2nd Highlighted Custom Map # on Map Editor Main Menu
 RO13:4DFB CD 63 46         call 4663           // Standard Custom Map Description Text management
 RO13:4DFE 18 56            jr   4E56           // Further standby for button input after pressing Right
 RO13:4E00 CB 47            bit  0,a            // A
 RO13:4E02 28 3D            jr   z,4E41
 RO13:4E04 3E 02            ld   a,02
 RO13:4E06 CD 44 38         call 3844
 RO13:4E09 FA 30 DC         ld   a,(DC30)       // 2nd Highlighted Custom Map # on Map Editor Main Menu
 RO13:4E0C CD BD 51         call 51BD           // Zero flag triggered by custom map nonexistance, map basic logistics established just in case
 RO13:4E0F 28 09            jr   z,4E1A         // No need for confirmation if 2nd Highlighted Custom Map doesn't already exist
 RO13:4E11 3E 01            ld   a,01
 RO13:4E13 CD 01 53         call 5301           // Map Editor Overwrite Confirmation master control, ending with A = 0 for OK, or 1 otherwise
 RO13:4E16 FE 01            cp   a,01
 RO13:4E18 28 3C            jr   z,4E56         // Further standby for button input if not OK
 RO13:4E1A FA 31 DC         ld   a,(DC31)       // Pointing Down Bullet for Map Edit Copy
 RO13:4E1D EF 15 1E 5D                          // Sprite A moves down 10 pixels per frame, ending once the Y coordinate exceeds 183 (clearly off-screen)
 RO13:4E21 CD F4 52         call 52F4           // Copies 1st higlighted Custom Map's full data onto 2nd one's
 RO13:4E24 FA 30 DC         ld   a,(DC30)       // 2nd Highlighted Custom Map # on Map Editor Main Menu
 RO13:4E27 EA 2B DC         ld   (DC2B),a       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:4E2A CD A0 44         call 44A0           // Map Editor Main Menu Pointing Down Bullet coordinates established
 RO13:4E2D FA 31 DC         ld   a,(DC31)       // Pointing Down Bullet for Map Edit Copy
 RO13:4E30 CD 1F 2E         call 2E1F           // Handles clear-up of sprite
 RO13:4E33 EF 10 08 69                          // Restores last table of covered graphics
 RO13:4E37 18 20            jr   4E59           // Ends when Copy is done
 RO13:4E39 CD AC 51         call 51AC           // Updates Palettes of files for Map Editor File selection
 RO13:4E3C CD 17 47         call 4717           // Custom Map Description Text management as a whole
 RO13:4E3F 18 15            jr   4E56
 RO13:4E41 CB 4F            bit  1,a            // B
 RO13:4E43 28 11            jr   z,4E56
 RO13:4E45 3E 0C            ld   a,0C
 RO13:4E47 CD 44 38         call 3844
 RO13:4E4A FA 31 DC         ld   a,(DC31)       // Pointing Down Bullet for Map Edit Copy
 RO13:4E4D CD 1F 2E         call 2E1F           // Handles clear-up of sprite
 RO13:4E50 EF 10 08 69                          // Restores last table of covered graphics
 RO13:4E54 18 03            jr   4E59
 RO13:4E56 C3 73 4D         jp   4D73           // Standby for button input
 RO13:4E59 FA 2C DC         ld   a,(DC2C)       // Pointing Down Bullet for Map Edit Options
 RO13:4E5C CD 2B 2F         call 2F2B           // res 1,WRA4[$D000 + A * 16]
 RO13:4E5F C9               ret                 // Map Copy Destination Choosing master control
 RO13:4E60 01 01 01         ld   bc,0101
 RO13:4E63 11 04 12         ld   de,1204
 RO13:4E66 EF 10 FA 68                          // Sets up table of covered graphics within late WRA4 Bank, as well as defaulted table of graphics (BC is starting location, DE is size)
 RO13:4E6A F0 83            ld   a,(ff00+83)
 RO13:4E6C F5               push af
 RO13:4E6D 3E 01            ld   a,01
 RO13:4E6F E0 83            ld   (ff00+83),a
 RO13:4E71 E0 4F            ld   (ff00+4F),a
 RO13:4E73 AF               xor  a
 RO13:4E74 01 02 02         ld   bc,0202
 RO13:4E77 11 01 10         ld   de,1001
 RO13:4E7A EF 15 D3 6A                          // Sets current VRAM Bank map tiles in rectangle BC, size DE, to A
 RO13:4E7E F1               pop  af
 RO13:4E7F E0 83            ld   (ff00+83),a
 RO13:4E81 E0 4F            ld   (ff00+4F),a
 RO13:4E83 CD 49 4B         call 4B49           // Establishes Map Choice prompt text for Map Editor primary choice
 RO13:4E86 FA 37 DC         ld   a,(DC37)       // Pointing Right Mini Arrow for Map Edit Options
 RO13:4E89 CD 5F 2F         call 2F5F           // set 0,($D000 + A * 16) WRAM bank 4
 RO13:4E8C FA 2C DC         ld   a,(DC2C)       // Pointing Down Bullet for Map Edit Options
 RO13:4E8F CD 45 2F         call 2F45           // res 0,($D000 + A * 16) WRAM bank 4
 RO13:4E92 CD 17 47         call 4717           // Custom Map Description Text management as a whole
 RO13:4E95 3E 02            ld   a,02
 RO13:4E97 CD 16 38         call 3816           // Menu theme
 RO13:4E9A C9               ret                 // Map Editor Primary Choice sub-selection prompt display graphics setup
 RO13:4E9B F5               push af
 RO13:4E9C EF 26 AC 56                          
 RO13:4EA0 01 08 00         ld   bc,0008
 RO13:4EA3 3E 30            ld   a,30
 RO13:4EA5 21 A8 DA         ld   hl,DAA8
 RO13:4EA8 CD 79 3B         call 3B79           // (HL ~ HL+BC-1) = A
 RO13:4EAB AF               xor  a
 RO13:4EAC EA B0 DA         ld   (DAB0),a
 RO13:4EAF 21 CD CB         ld   hl,CBCD
 RO13:4EB2 01 00 00         ld   bc,0000
 RO13:4EB5 7E               ld   a,(hl)
 RO13:4EB6 FE 00            cp   a,00
 RO13:4EB8 28 04            jr   z,4EBE
 RO13:4EBA 03               inc  bc
 RO13:4EBB 23               inc  hl
 RO13:4EBC 18 F7            jr   4EB5
 RO13:4EBE C5               push bc
 RO13:4EBF 3E 08            ld   a,08
 RO13:4EC1 91               sub  c
 RO13:4EC2 21 A8 DA         ld   hl,DAA8
 RO13:4EC5 CD BC 29         call 29BC           // HL += A
 RO13:4EC8 C1               pop  bc
 RO13:4EC9 11 CD CB         ld   de,CBCD
 RO13:4ECC CD 50 3B         call 3B50           // (HL ~ HL+BC-1) = (DE ~ DE+BC-1)
 RO13:4ECF F1               pop  af
 RO13:4ED0 87               add  a
 RO13:4ED1 21 1C 39         ld   hl,391C
 RO13:4ED4 CD BC 29         call 29BC           // HL += A
 RO13:4ED7 2A               ldi  a,(hl)         // A = ($391C + A * 2)
 RO13:4ED8 7F               ld   a,a
 RO13:4ED9 CD 8D 05         call 058D           // ($4000) = 7 + A/2, ($FF81) = 7 + A/2
 RO13:4EDC CD 93 05         call 0593           // ($0000) = 10
 RO13:4EDF 7E               ld   a,(hl)
 RO13:4EE0 67               ld   h,a
 RO13:4EE1 2E 00            ld   l,00
 RO13:4EE3 01 08 00         ld   bc,0008
 RO13:4EE6 09               add  hl,bc
 RO13:4EE7 11 A8 DA         ld   de,DAA8
 RO13:4EEA 01 08 00         ld   bc,0008
 RO13:4EED CD 50 3B         call 3B50           // (HL ~ HL+BC-1) = (DE ~ DE+BC-1)
 RO13:4EF0 CD 9B 05         call 059B           // ($0000) = 0
 RO13:4EF3 C9               ret  
 RO13:4EF4 87               add  a
 RO13:4EF5 21 1C 39         ld   hl,391C
 RO13:4EF8 CD BC 29         call 29BC           // HL += A
 RO13:4EFB 2A               ldi  a,(hl)
 RO13:4EFC 7F               ld   a,a
 RO13:4EFD CD 8D 05         call 058D           // ($4000) = 7 + A/2, ($FF81) = 7 + A/2
 RO13:4F00 CD 93 05         call 0593           // ($0000) = 10
 RO13:4F03 7E               ld   a,(hl)
 RO13:4F04 67               ld   h,a
 RO13:4F05 2E 00            ld   l,00
 RO13:4F07 01 08 00         ld   bc,0008
 RO13:4F0A 09               add  hl,bc
 RO13:4F0B 01 08 00         ld   bc,0008
 RO13:4F0E AF               xor  a
 RO13:4F0F CD 79 3B         call 3B79           // (HL ~ HL+BC-1) = A
 RO13:4F12 CD 9B 05         call 059B           // ($0000) = 0
 RO13:4F15 C9               ret  
 RO13:4F16 F5               push af
 RO13:4F17 EF 26 AC 56                          
 RO13:4F1B F1               pop  af
 RO13:4F1C 87               add  a
 RO13:4F1D 21 1C 39         ld   hl,391C
 RO13:4F20 CD BC 29         call 29BC           // HL += A
 RO13:4F23 2A               ldi  a,(hl)
 RO13:4F24 7F               ld   a,a
 RO13:4F25 CD 8D 05         call 058D           // ($4000) = 7 + A/2, ($FF81) = 7 + A/2
 RO13:4F28 CD 93 05         call 0593           // ($0000) = 10
 RO13:4F2B 7E               ld   a,(hl)
 RO13:4F2C 67               ld   h,a
 RO13:4F2D 2E 00            ld   l,00
 RO13:4F2F 01 08 00         ld   bc,0008
 RO13:4F32 09               add  hl,bc
 RO13:4F33 11 CD CB         ld   de,CBCD
 RO13:4F36 01 08 00         ld   bc,0008
 RO13:4F39 CD 50 3B         call 3B50           // (HL ~ HL+BC-1) = (DE ~ DE+BC-1)
 RO13:4F3C CD 9B 05         call 059B           // ($0000) = 0
 RO13:4F3F C9               ret  
 RO13:4F40 F5               push af
 RO13:4F41 57               ld   d,a
 RO13:4F42 F0 82            ld   a,(ff00+82)
 RO13:4F44 F5               push af
 RO13:4F45 3E 07            ld   a,07
 RO13:4F47 E0 82            ld   (ff00+82),a
 RO13:4F49 E0 70            ld   (ff00+70),a
 RO13:4F4B 7A               ld   a,d
 RO13:4F4C F5               push af
 RO13:4F4D 21 10 DC         ld   hl,DC10
 RO13:4F50 01 D0 02         ld   bc,02D0
 RO13:4F53 AF               xor  a
 RO13:4F54 CD 79 3B         call 3B79           // (HL ~ HL+BC-1) = A
 RO13:4F57 21 A8 DA         ld   hl,DAA8
 RO13:4F5A 01 68 01         ld   bc,0168
 RO13:4F5D AF               xor  a
 RO13:4F5E CD 79 3B         call 3B79           // (HL ~ HL+BC-1) = A (Empties WRA7($DAA8~$DEDF))
 RO13:4F61 F1               pop  af
 RO13:4F62 87               add  a
 RO13:4F63 21 1C 39         ld   hl,391C
 RO13:4F66 CD BC 29         call 29BC           // HL += A
 RO13:4F69 2A               ldi  a,(hl)
 RO13:4F6A 7F               ld   a,a
 RO13:4F6B CD 8D 05         call 058D           // ($4000) = 7 + A/2, ($FF81) = 7 + A/2
 RO13:4F6E CD 93 05         call 0593           // ($0000) = 10
 RO13:4F71 7E               ld   a,(hl)
 RO13:4F72 67               ld   h,a
 RO13:4F73 2E 00            ld   l,00
 RO13:4F75 01 08 00         ld   bc,0008
 RO13:4F78 09               add  hl,bc
 RO13:4F79 54               ld   d,h
 RO13:4F7A 5D               ld   e,l
 RO13:4F7B 21 A8 DA         ld   hl,DAA8
 RO13:4F7E 01 08 00         ld   bc,0008
 RO13:4F81 CD 50 3B         call 3B50           // (HL ~ HL+BC-1) = (DE ~ DE+BC-1)
 RO13:4F84 CD 9B 05         call 059B           // ($0000) = 0
 RO13:4F87 EF 26 AC 56                          
 RO13:4F8B 11 CD CB         ld   de,CBCD
 RO13:4F8E 21 10 DC         ld   hl,DC10
 RO13:4F91 01 08 00         ld   bc,0008
 RO13:4F94 CD 50 3B         call 3B50           // (HL ~ HL+BC-1) = (DE ~ DE+BC-1)
 RO13:4F97 21 A8 DA         ld   hl,DAA8
 RO13:4F9A EF 19 02 55                          
 RO13:4F9E 11 10 DC         ld   de,DC10
 RO13:4FA1 EF 0A 53 4A                          
 RO13:4FA5 30 02            jr   nc,4FA9
 RO13:4FA7 18 0A            jr   4FB3
 RO13:4FA9 F1               pop  af
 RO13:4FAA E0 82            ld   (ff00+82),a
 RO13:4FAC E0 70            ld   (ff00+70),a
 RO13:4FAE F1               pop  af
 RO13:4FAF CD F4 4E         call 4EF4
 RO13:4FB2 C9               ret  
 RO13:4FB3 F1               pop  af
 RO13:4FB4 E0 82            ld   (ff00+82),a
 RO13:4FB6 E0 70            ld   (ff00+70),a
 RO13:4FB8 F1               pop  af
 RO13:4FB9 C9               ret  
 RO13:4FBA AF               xor  a
 RO13:4FBB EA 69 CA         ld   (CA69),a
 RO13:4FBE CD A2 05         call 05A2           // Button update, next frame
 RO13:4FC1 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO13:4FC4 3E 00            ld   a,00
 RO13:4FC6 EF 15 91 67                          // Updates menu shifting diagonally down-right BG graphics (A is modification of where menu BG graphics had been stored)
 RO13:4FCA F0 92            ld   a,(ff00+92)
 RO13:4FCC CB 77            bit  6,a            // Up
 RO13:4FCE 28 17            jr   z,4FE7
 RO13:4FD0 3E 01            ld   a,01
 RO13:4FD2 CD 44 38         call 3844
 RO13:4FD5 FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:4FD8 D6 05            sub  a,05
 RO13:4FDA 38 09            jr   c,4FE5         // No rotation
 RO13:4FDC EA 2B DC         ld   (DC2B),a
 RO13:4FDF CD A0 44         call 44A0           // Map Editor Main Menu Pointing Down Bullet coordinates established
 RO13:4FE2 CD 17 47         call 4717           // Custom Map Description Text management as a whole
 RO13:4FE5 18 D7            jr   4FBE           // Further standby for button input after pressing Up
 RO13:4FE7 CB 7F            bit  7,a            // Down
 RO13:4FE9 28 19            jr   z,5004
 RO13:4FEB 3E 01            ld   a,01
 RO13:4FED CD 44 38         call 3844
 RO13:4FF0 FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:4FF3 C6 05            add  a,05
 RO13:4FF5 FE 0A            cp   a,0A
 RO13:4FF7 30 09            jr   nc,5002        // No rotation
 RO13:4FF9 EA 2B DC         ld   (DC2B),a
 RO13:4FFC CD A0 44         call 44A0           // Map Editor Main Menu Pointing Down Bullet coordinates established
 RO13:4FFF CD 17 47         call 4717           // Custom Map Description Text management as a whole
 RO13:5002 18 BA            jr   4FBE           // Further standby for button input after pressing Down
 RO13:5004 CB 6F            bit  5,a            // Left
 RO13:5006 28 1A            jr   z,5022
 RO13:5008 3E 01            ld   a,01
 RO13:500A CD 44 38         call 3844
 RO13:500D FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:5010 3D               dec  a
 RO13:5011 FE FF            cp   a,FF
 RO13:5013 20 02            jr   nz,5017
 RO13:5015 3E 09            ld   a,09           // Rotation
 RO13:5017 EA 2B DC         ld   (DC2B),a
 RO13:501A CD A0 44         call 44A0           // Map Editor Main Menu Pointing Down Bullet coordinates established
 RO13:501D CD 17 47         call 4717           // Custom Map Description Text management as a whole
 RO13:5020 18 9C            jr   4FBE           // Further standby for button input after pressing Left
 RO13:5022 CB 67            bit  4,a            // Right
 RO13:5024 28 1A            jr   z,5040
 RO13:5026 3E 01            ld   a,01
 RO13:5028 CD 44 38         call 3844
 RO13:502B FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:502E 3C               inc  a
 RO13:502F FE 0A            cp   a,0A
 RO13:5031 20 01            jr   nz,5034
 RO13:5033 AF               xor  a              // Rotation
 RO13:5034 EA 2B DC         ld   (DC2B),a
 RO13:5037 CD A0 44         call 44A0           // Map Editor Main Menu Pointing Down Bullet coordinates established
 RO13:503A CD 17 47         call 4717           // Custom Map Description Text management as a whole
 RO13:503D C3 BE 4F         jp   4FBE           // Further standby for button input after pressing Right
 RO13:5040 CB 47            bit  0,a            // A
 RO13:5042 CA 26 51         jp   z,5126
 RO13:5045 FA 4D DC         ld   a,(DC4D)       // Edit, Play, Copy, Delete, Send, Get
 RO13:5048 FE 00            cp   a,00           // Edit?
 RO13:504A CA 89 51         jp   z,5189
 RO13:504D FE 01            cp   a,01           // Play?
 RO13:504F CA E8 50         jp   z,50E8
 RO13:5052 FE 02            cp   a,02           // Copy?
 RO13:5054 28 0F            jr   z,5065
 RO13:5056 FE 03            cp   a,03           // Delete?
 RO13:5058 CA B6 50         jp   z,50B6
 RO13:505B FE 04            cp   a,04           // Send?
 RO13:505D CA 7F 50         jp   z,507F
 RO13:5060 FE 05            cp   a,05           // Get?
 RO13:5062 CA 4A 51         jp   z,514A
 RO13:5065 FA 2B DC         ld   a,(DC2B)       // Rejoins here on Copy
 RO13:5068 CD BD 51         call 51BD           // Zero flag triggered by custom map nonexistance, map basic logistics established just in case
 RO13:506B CA 35 51         jp   z,5135         // Invalid choice for custom map not existing
 RO13:506E 3E 02            ld   a,02
 RO13:5070 CD 44 38         call 3844
 RO13:5073 CD 26 4D         call 4D26           // Map Copy Destination Choosing master control
 RO13:5076 CD AC 51         call 51AC           // Updates Palettes of files for Map Editor File selection
 RO13:5079 CD 17 47         call 4717           // Custom Map Description Text management as a whole
 RO13:507C C3 A8 51         jp   51A8           // Further standby for button input after Copy branch
 RO13:507F FA 2B DC         ld   a,(DC2B)       // Rejoins here on Send
 RO13:5082 CD BD 51         call 51BD           // Zero flag triggered by custom map nonexistance, map basic logistics established just in case
 RO13:5085 CA 35 51         jp   z,5135         // Invalid choice for custom map not existing
 RO13:5088 FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:508B CD 46 40         call 4046           // $CA73 to $CA88 holds online-related information for Custom Map A
 RO13:508E CD D0 40         call 40D0           // SCF for ($CA73~$CA7A) byte not being empty or valid Map Online 7 Digit Code; otherwise, A = 0
 RO13:5091 DA 3D 51         jp   c,513D         // "Can't send" stuff unless owner
 RO13:5094 FA 2C DC         ld   a,(DC2C)       // Pointing Down Bullet for Map Edit Options
 RO13:5097 EF 15 1E 5D                          // Sprite A moves down 10 pixels per frame, ending once the Y coordinate exceeds 183 (clearly off-screen)
 RO13:509B FA 2B DC         ld   a,(DC2B)
 RO13:509E CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 RO13:50A1 FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:50A4 EF 0C 00 6B                          
 RO13:50A8 CD F1 49         call 49F1           // Establishes Map Editor Main Menu graphics
 RO13:50AB 3E 02            ld   a,02
 RO13:50AD CD 16 38         call 3816           // Menu theme
 RO13:50B0 CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 RO13:50B3 C3 AB 51         jp   51AB
 RO13:50B6 FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu (Delete branch)
 RO13:50B9 CD BD 51         call 51BD           // Zero flag triggered by custom map nonexistance, map basic logistics established just in case
 RO13:50BC 28 77            jr   z,5135         // Invalid choice for custom map not existing
 RO13:50BE 3E 02            ld   a,02
 RO13:50C0 CD 44 38         call 3844
 RO13:50C3 CD 81 45         call 4581           // Blanks Description Text Box on Map Edit Menu
 RO13:50C6 AF               xor  a
 RO13:50C7 CD 01 53         call 5301           // Map Editor Delete Confirmation master control, ending with A = 0 for OK, or 1 otherwise
 RO13:50CA FE 00            cp   a,00
 RO13:50CC 20 0E            jr   nz,50DC        // Skip Deletion management if not OK
 RO13:50CE FA 2C DC         ld   a,(DC2C)       // Pointing Down Bullet for Map Edit Options
 RO13:50D1 EF 15 1E 5D                          // Sprite A moves down 10 pixels per frame, ending once the Y coordinate exceeds 183 (clearly off-screen)
 RO13:50D5 FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:50D8 EF 13 3F 5E                          // res ($DC2B),SRA0($A00F)
 RO13:50DC CD A0 44         call 44A0           // Map Editor Main Menu Pointing Down Bullet coordinates established
 RO13:50DF CD AC 51         call 51AC           // Updates Palettes of files for Map Editor File selection
 RO13:50E2 CD 17 47         call 4717           // Custom Map Description Text management as a whole
 RO13:50E5 C3 A8 51         jp   51A8           // Further standby for button input after Delete branch
 RO13:50E8 FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu (Play branch)
 RO13:50EB CD BD 51         call 51BD           // Zero flag triggered by custom map nonexistance, map basic logistics established just in case
 RO13:50EE CA 35 51         jp   z,5135         // Invalid choice for custom map not existing
 RO13:50F1 FA 2C DC         ld   a,(DC2C)       // Pointing Down Bullet for Map Edit Options
 RO13:50F4 EF 15 1E 5D                          // Sprite A moves down 10 pixels per frame, ending once the Y coordinate exceeds 183 (clearly off-screen)
 RO13:50F8 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 RO13:50FB CD 67 2E         call 2E67           // Handles clear-up of all sprite portions and entire ($C400) table, sets ($C00E) to 1
 RO13:50FE FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:5101 EF 0F 4E 40                          // Plays out Map Editor Play option Map Choice, ending with A = -1 for backing out of Preview, or 0 for done (A is Map Choice)
 RO13:5105 FE FF            cp   a,FF           // Back out of Preveiw check
 RO13:5107 28 11            jr   z,511A
 RO13:5109 CD F1 49         call 49F1           // Establishes Map Editor Main Menu graphics
 RO13:510C CD 60 4E         call 4E60           // Map Editor Primary Choice sub-selection prompt display graphics setup
 RO13:510F CD 37 35         call 3537           // Establishes all unchecked text into appropriate VRAM bank; bit 7,($C00F) being inactive or LY => 142 stops after only one text portion and leaves it considered unchecked
 RO13:5112 3E 01            ld   a,01
 RO13:5114 EA 69 CA         ld   (CA69),a
 RO13:5117 C3 AB 51         jp   51AB           // End immediately after Play branch committal
 RO13:511A CD F1 49         call 49F1           // Establishes Map Editor Main Menu graphics
 RO13:511D CD 60 4E         call 4E60           // Map Editor Primary Choice sub-selection prompt display graphics setup
 RO13:5120 CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 RO13:5123 C3 A8 51         jp   51A8           // Further standby for button input after backing out of Preview check on Play branch
 RO13:5126 CB 4F            bit  1,a            // B
 RO13:5128 CA A8 51         jp   z,51A8         // Standby for button input
 RO13:512B 3E 0C            ld   a,0C
 RO13:512D CD 44 38         call 3844
 RO13:5130 3E FF            ld   a,FF
 RO13:5132 C3 AB 51         jp   51AB           // Immediate ending of A = -1 after B Button Press
 RO13:5135 3E 03            ld   a,03
 RO13:5137 CD 44 38         call 3844
 RO13:513A C3 A8 51         jp   51A8           // Further standby for button input after invalid choice
 RO13:513D 3E 03            ld   a,03
 RO13:513F CD 44 38         call 3844
 RO13:5142 3E 01            ld   a,01
 RO13:5144 CD 49 47         call 4749           // Handles Text Window display for inability to Send map
 RO13:5147 C3 A8 51         jp   51A8           // Further standby for button input after inability to Send map
 RO13:514A 3E 02            ld   a,02           // Get branch
 RO13:514C CD 44 38         call 3844
 RO13:514F FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:5152 CD BD 51         call 51BD           // Zero flag triggered by custom map nonexistance, map basic logistics established just in case
 RO13:5155 28 0E            jr   z,5165
 RO13:5157 3E 01            ld   a,01
 RO13:5159 CD 01 53         call 5301           // Map Editor Overwrite Confirmation master control, ending with A = 0 for OK, or 1 otherwise
 RO13:515C FE 01            cp   a,01
 RO13:515E 20 05            jr   nz,5165
 RO13:5160 CD A0 44         call 44A0           // Map Editor Main Menu Pointing Down Bullet coordinates established
 RO13:5163 18 43            jr   51A8           // Further standby for button input after refusal to overwrite existing map on Get branch
 RO13:5165 FA 2C DC         ld   a,(DC2C)       // Pointing Down Bullet for Map Edit Options (Write OK branch)
 RO13:5168 EF 15 1E 5D                          // Sprite A moves down 10 pixels per frame, ending once the Y coordinate exceeds 183 (clearly off-screen)
 RO13:516C CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 RO13:516F FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:5172 EF 0C 20 6B                          
 RO13:5176 FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:5179 CD 40 4F         call 4F40
 RO13:517C CD F1 49         call 49F1           // Establishes Map Editor Main Menu graphics
 RO13:517F 3E 02            ld   a,02
 RO13:5181 CD 16 38         call 3816           // Menu theme
 RO13:5184 CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 RO13:5187 18 22            jr   51AB
 RO13:5189 FA 2C DC         ld   a,(DC2C)       // Pointing Down Bullet for Map Edit Options (Edit starts here)
 RO13:518C EF 15 1E 5D                          // Sprite A moves down 10 pixels per frame, ending once the Y coordinate exceeds 183 (clearly off-screen)
 RO13:5190 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 RO13:5193 CD 67 2E         call 2E67           // Handles clear-up of all sprite portions and entire ($C400) table, sets ($C00E) to 1
 RO13:5196 FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:5199 EF 0F 00 40                          // Starts up Design Maps session, providing zoomed out map preview that can be cancelled if necessary; ends with A = 0
 RO13:519D CD F1 49         call 49F1           // Establishes Map Editor Main Menu graphics
 RO13:51A0 CD 60 4E         call 4E60           // Map Editor Primary Choice sub-selection prompt display graphics setup
 RO13:51A3 CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 RO13:51A6 18 00            jr   51A8
 RO13:51A8 C3 BE 4F         jp   4FBE           // Standby for button input
 RO13:51AB C9               ret                 // Map Editor Map Choosing master control
 RO13:51AC 01 06 03         ld   bc,0306
 RO13:51AF 16 00            ld   d,00
 RO13:51B1 CD 29 47         call 4729           // Manages Palettes of 1st file row for Map Editor File selection
 RO13:51B4 01 09 03         ld   bc,0309
 RO13:51B7 16 05            ld   d,05
 RO13:51B9 CD 29 47         call 4729           // Manages Palettes of 2nd file row for Map Editor File selection
 RO13:51BC C9               ret                 // Updates Palettes of files for Map Editor File selection
 RO13:51BD EF 28 AE 40                          // Establishes map basic logistics including map number and game mode, also triggers custom map exists flag if given custom map is used (A is map number)
 RO13:51C1 3E 01            ld   a,01
 RO13:51C3 21 1D CA         ld   hl,CA1D
 RO13:51C6 CD C7 3A         call 3AC7           // Does the custom map exist?
 RO13:51C9 C9               ret                 // Zero flag triggered by custom map nonexistance, map basic logistics established just in case
 RO13:51CA FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:51CD EA 30 DC         ld   (DC30),a       // 2nd Highlighted Custom Map # on Map Editor Main Menu
 RO13:51D0 01 01 01         ld   bc,0101
 RO13:51D3 11 03 12         ld   de,1203
 RO13:51D6 EF 10 FA 68                          // Sets up table of covered graphics within late WRA4 Bank, as well as defaulted table of graphics (BC is starting location, DE is size)
 RO13:51DA F0 83            ld   a,(ff00+83)
 RO13:51DC F5               push af
 RO13:51DD 3E 01            ld   a,01
 RO13:51DF E0 83            ld   (ff00+83),a
 RO13:51E1 E0 4F            ld   (ff00+4F),a
 RO13:51E3 AF               xor  a
 RO13:51E4 01 02 02         ld   bc,0202
 RO13:51E7 11 01 10         ld   de,1001
 RO13:51EA EF 15 D3 6A                          // Sets current VRAM Bank map tiles in rectangle BC, size DE, to A
 RO13:51EE F1               pop  af
 RO13:51EF E0 83            ld   (ff00+83),a
 RO13:51F1 E0 4F            ld   (ff00+4F),a
 RO13:51F3 21 77 56         ld   hl,5677
 RO13:51F6 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 RO13:51F9 FA 2C DC         ld   a,(DC2C)       // Pointing Down Bullet for Map Edit Options
 RO13:51FC CD 11 2F         call 2F11           // set 1,WRA4[$D000 + A * 16]
 RO13:51FF 3E 20            ld   a,20
 RO13:5201 0E 00            ld   c,00
 RO13:5203 06 15            ld   b,15
 RO13:5205 11 44 6F         ld   de,6F44
 RO13:5208 CD E8 2D         call 2DE8           // A = number of already active sprites; $Dxx5~$DxxB prepared (B is ROM Block of Sprite, C is base Character Tile # / 2 with bit 7 determining VRAM Bank; and DE is pointer to sprite stats modification tables pointers)
 RO13:520B EA 31 DC         ld   (DC31),a       // Pointing Down Bullet for Map Edit Copy
 RO13:520E CD E7 44         call 44E7           // Map Editor Main Menu 2nd Pointing Down Bullet coordinates established
 RO13:5211 FA 30 DC         ld   a,(DC30)       // 2nd Highlighted Custom Map # on Map Editor Main Menu
 RO13:5214 CD 63 46         call 4663           // Standard Custom Map Description Text management
 RO13:5217 CD A2 05         call 05A2           // Button update, next frame
 RO13:521A CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO13:521D 3E 00            ld   a,00
 RO13:521F EF 15 91 67                          // Updates menu shifting diagonally down-right BG graphics (A is modification of where menu BG graphics had been stored)
 RO13:5223 F0 92            ld   a,(ff00+92)
 RO13:5225 CB 77            bit  6,a            // Up
 RO13:5227 28 1A            jr   z,5243
 RO13:5229 3E 01            ld   a,01
 RO13:522B CD 44 38         call 3844
 RO13:522E FA 30 DC         ld   a,(DC30)       // 2nd Highlighted Custom Map # on Map Editor Main Menu
 RO13:5231 D6 05            sub  a,05
 RO13:5233 38 0C            jr   c,5241         // No rotation
 RO13:5235 EA 30 DC         ld   (DC30),a
 RO13:5238 CD E7 44         call 44E7           // Map Editor Main Menu 2nd Pointing Down Bullet coordinates established
 RO13:523B FA 30 DC         ld   a,(DC30)       // 2nd Highlighted Custom Map # on Map Editor Main Menu
 RO13:523E CD 63 46         call 4663           // Standard Custom Map Description Text management
 RO13:5241 18 D4            jr   5217           // Further standby for button input after pressing Up
 RO13:5243 CB 7F            bit  7,a            // Down
 RO13:5245 28 1C            jr   z,5263
 RO13:5247 3E 01            ld   a,01
 RO13:5249 CD 44 38         call 3844
 RO13:524C FA 30 DC         ld   a,(DC30)       // 2nd Highlighted Custom Map # on Map Editor Main Menu
 RO13:524F C6 05            add  a,05
 RO13:5251 FE 0A            cp   a,0A
 RO13:5253 30 0C            jr   nc,5261        // No rotation
 RO13:5255 EA 30 DC         ld   (DC30),a
 RO13:5258 CD E7 44         call 44E7           // Map Editor Main Menu 2nd Pointing Down Bullet coordinates established
 RO13:525B FA 30 DC         ld   a,(DC30)       // 2nd Highlighted Custom Map # on Map Editor Main Menu
 RO13:525E CD 63 46         call 4663           // Standard Custom Map Description Text management
 RO13:5261 18 B4            jr   5217           // Further standby for button input after pressing Down
 RO13:5263 CB 6F            bit  5,a            // Left
 RO13:5265 28 1D            jr   z,5284
 RO13:5267 3E 01            ld   a,01
 RO13:5269 CD 44 38         call 3844
 RO13:526C FA 30 DC         ld   a,(DC30)       // 2nd Highlighted Custom Map # on Map Editor Main Menu
 RO13:526F 3D               dec  a
 RO13:5270 FE FF            cp   a,FF
 RO13:5272 20 02            jr   nz,5276
 RO13:5274 3E 09            ld   a,09           // Rotation
 RO13:5276 EA 30 DC         ld   (DC30),a
 RO13:5279 CD E7 44         call 44E7           // Map Editor Main Menu 2nd Pointing Down Bullet coordinates established
 RO13:527C FA 30 DC         ld   a,(DC30)       // 2nd Highlighted Custom Map # on Map Editor Main Menu
 RO13:527F CD 63 46         call 4663           // Standard Custom Map Description Text management
 RO13:5282 18 93            jr   5217           // Further standby for button input after pressing Left
 RO13:5284 CB 67            bit  4,a            // Right
 RO13:5286 28 1C            jr   z,52A4
 RO13:5288 3E 01            ld   a,01
 RO13:528A CD 44 38         call 3844
 RO13:528D FA 30 DC         ld   a,(DC30)       // 2nd Highlighted Custom Map # on Map Editor Main Menu
 RO13:5290 3C               inc  a
 RO13:5291 FE 0A            cp   a,0A
 RO13:5293 20 01            jr   nz,5296
 RO13:5295 AF               xor  a              // Rotation
 RO13:5296 EA 30 DC         ld   (DC30),a
 RO13:5299 CD E7 44         call 44E7           // Map Editor Main Menu 2nd Pointing Down Bullet coordinates established
 RO13:529C FA 30 DC         ld   a,(DC30)       // 2nd Highlighted Custom Map # on Map Editor Main Menu
 RO13:529F CD 63 46         call 4663           // Standard Custom Map Description Text management
 RO13:52A2 18 46            jr   52EA           // Further standby for button input after pressing Right
 RO13:52A4 CB 47            bit  0,a            // A
 RO13:52A6 28 2D            jr   z,52D5
 RO13:52A8 3E 02            ld   a,02
 RO13:52AA CD 44 38         call 3844
 RO13:52AD FA 30 DC         ld   a,(DC30)       // 2nd Highlighted Custom Map # on Map Editor Main Menu
 RO13:52B0 CD BD 51         call 51BD           // Zero flag triggered by custom map nonexistance, map basic logistics established just in case
 RO13:52B3 28 09            jr   z,52BE         // Skips Overwrite confirmation check if not needed
 RO13:52B5 3E 01            ld   a,01
 RO13:52B7 CD 01 53         call 5301           // Map Editor Overwrite Confirmation master control, ending with A = 0 for OK, or 1 otherwise
 RO13:52BA FE 01            cp   a,01
 RO13:52BC 28 2C            jr   z,52EA         // Goes to standby for button input if not overwriting
 RO13:52BE CD F4 52         call 52F4           // Copies 1st higlighted Custom Map's full data onto 2nd one's
 RO13:52C1 FA 31 DC         ld   a,(DC31)       // Pointing Down Bullet for Map Edit Copy
 RO13:52C4 CD 1F 2E         call 2E1F           // Handles clear-up of sprite
 RO13:52C7 EF 10 08 69                          // Restores last table of covered graphics
 RO13:52CB 18 20            jr   52ED           // Ends procedure when done copying
 RO13:52CD CD AC 51         call 51AC           // Updates Palettes of files for Map Editor File selection
 RO13:52D0 CD 17 47         call 4717           // Custom Map Description Text management as a whole
 RO13:52D3 18 15            jr   52EA
 RO13:52D5 CB 4F            bit  1,a            // B
 RO13:52D7 28 11            jr   z,52EA
 RO13:52D9 3E 03            ld   a,03
 RO13:52DB CD 44 38         call 3844
 RO13:52DE FA 31 DC         ld   a,(DC31)       // Pointing Down Bullet for Map Edit Copy
 RO13:52E1 CD 1F 2E         call 2E1F           // Handles clear-up of sprite
 RO13:52E4 EF 10 08 69                          // Restores last table of covered graphics
 RO13:52E8 18 03            jr   52ED           // Ends procedure on B Button press
 RO13:52EA C3 17 52         jp   5217           // Standby for button input
 RO13:52ED FA 2C DC         ld   a,(DC2C)       // Pointing Down Bullet for Map Edit Options
 RO13:52F0 CD 2B 2F         call 2F2B           // res 1,WRA4[$D000 + A * 16]
 RO13:52F3 C9               ret                 // Map Editor Quick Meny Copy master control
 RO13:52F4 FA 2B DC         ld   a,(DC2B)       // Highlighted Custom Map # on Map Editor Main Menu
 RO13:52F7 47               ld   b,a
 RO13:52F8 FA 30 DC         ld   a,(DC30)       // 2nd Highlighted Custom Map # on Map Editor Main Menu
 RO13:52FB 4F               ld   c,a
 RO13:52FC EF 13 1E 5E                          // Copy Custom Map B's full data onto Custom Map C's full data
 RO13:5300 C9               ret                 // Copies 1st higlighted Custom Map's full data onto 2nd one's
 RO13:5301 F5               push af
 RO13:5302 3E 01            ld   a,01
 RO13:5304 EA 4E DC         ld   (DC4E),a
 RO13:5307 01 0C 01         ld   bc,010C
 RO13:530A 11 05 12         ld   de,1205
 RO13:530D EF 10 FA 68                          // Sets up table of covered graphics within late WRA4 Bank, as well as defaulted table of graphics (BC is starting location, DE is size)
 RO13:5311 F0 83            ld   a,(ff00+83)
 RO13:5313 F5               push af
 RO13:5314 3E 01            ld   a,01
 RO13:5316 E0 83            ld   (ff00+83),a
 RO13:5318 E0 4F            ld   (ff00+4F),a
 RO13:531A AF               xor  a
 RO13:531B 01 0D 02         ld   bc,020D
 RO13:531E 11 03 0F         ld   de,0F03
 RO13:5321 EF 15 D3 6A                          // Sets current VRAM Bank map tiles in rectangle BC, size DE, to A
 RO13:5325 F1               pop  af
 RO13:5326 E0 83            ld   (ff00+83),a
 RO13:5328 E0 4F            ld   (ff00+4F),a
 RO13:532A F1               pop  af
 RO13:532B FE 00            cp   a,00
 RO13:532D 20 08            jr   nz,5337
 RO13:532F 21 8E 56         ld   hl,568E        // "Delete?"
 RO13:5332 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 RO13:5335 18 06            jr   533D
 RO13:5337 21 9A 56         ld   hl,569A        // "Overwrite?"
 RO13:533A CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 RO13:533D 01 0F 07         ld   bc,070F
 RO13:5340 CD D7 53         call 53D7           // Establishes "OK/NO" graphics at coordinates BC with "NO" highlighted
 RO13:5343 CD A2 05         call 05A2           // Button update, next frame
 RO13:5346 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO13:5349 3E 00            ld   a,00
 RO13:534B EF 15 91 67                          // Updates menu shifting diagonally down-right BG graphics (A is modification of where menu BG graphics had been stored)
 RO13:534F F0 92            ld   a,(ff00+92)
 RO13:5351 CB 6F            bit  5,a            // Left
 RO13:5353 28 11            jr   z,5366
 RO13:5355 3E 01            ld   a,01
 RO13:5357 CD 44 38         call 3844
 RO13:535A AF               xor  a
 RO13:535B EA 4E DC         ld   (DC4E),a
 RO13:535E 01 0F 07         ld   bc,070F
 RO13:5361 CD AE 53         call 53AE           // Establishes "OK/NO" graphics at coordinates BC with "OK" highlighted
 RO13:5364 18 3F            jr   53A5           // Further standby for button input after pressing Left
 RO13:5366 CB 67            bit  4,a            // Right
 RO13:5368 28 12            jr   z,537C
 RO13:536A 3E 01            ld   a,01
 RO13:536C CD 44 38         call 3844
 RO13:536F 3E 01            ld   a,01
 RO13:5371 EA 4E DC         ld   (DC4E),a
 RO13:5374 01 0F 07         ld   bc,070F
 RO13:5377 CD D7 53         call 53D7           // Establishes "OK/NO" graphics at coordinates BC with "NO" highlighted
 RO13:537A 18 29            jr   53A5           // Further standby for button input after pressing Right
 RO13:537C CB 47            bit  0,a            // A
 RO13:537E 28 18            jr   z,5398
 RO13:5380 FA 4E DC         ld   a,(DC4E)       // Confirmation Choice (0: OK; 1: NO)
 RO13:5383 FE 00            cp   a,00
 RO13:5385 20 08            jr   nz,538F        // Branch for NO
 RO13:5387 3E 02            ld   a,02
 RO13:5389 CD 44 38         call 3844
 RO13:538C AF               xor  a
 RO13:538D 18 18            jr   53A7
 RO13:538F 3E 0C            ld   a,0C
 RO13:5391 CD 44 38         call 3844
 RO13:5394 3E 01            ld   a,01
 RO13:5396 18 0F            jr   53A7           // Ends with A = Confirmation Inverse Choice Flag
 RO13:5398 CB 4F            bit  1,a            // B
 RO13:539A 28 09            jr   z,53A5
 RO13:539C 3E 0C            ld   a,0C
 RO13:539E CD 44 38         call 3844
 RO13:53A1 3E 01            ld   a,01
 RO13:53A3 18 02            jr   53A7
 RO13:53A5 18 9C            jr   5343           // Standby for button input
 RO13:53A7 F5               push af
 RO13:53A8 EF 10 08 69                          // Restores last table of covered graphics
 RO13:53AC F1               pop  af
 RO13:53AD C9               ret                 // Map Editor Delete/Overwrite Confirmation master control, ending with A = 0 for OK, or 1 otherwise (A is 0 for Delete, non-0 for Overwrite)
 RO13:53AE C5               push bc
 RO13:53AF 3E 0F            ld   a,0F
 RO13:53B1 11 01 02         ld   de,0201
 RO13:53B4 26 FB            ld   h,FB
 RO13:53B6 EF 15 FD 67                          // (VRA0:$9800 X~D,Y~E) = H + Prior Tiles, (VRA1:$9800 X~D,Y~E) = A
 RO13:53BA C1               pop  bc
 RO13:53BB 04               inc  b
 RO13:53BC 04               inc  b
 RO13:53BD C5               push bc
 RO13:53BE 3E 08            ld   a,08
 RO13:53C0 11 01 01         ld   de,0101
 RO13:53C3 26 FD            ld   h,FD
 RO13:53C5 EF 15 FD 67                          // (VRA0:$9800 X~D,Y~E) = H + Prior Tiles, (VRA1:$9800 X~D,Y~E) = A
 RO13:53C9 C1               pop  bc
 RO13:53CA 04               inc  b
 RO13:53CB 3E 08            ld   a,08
 RO13:53CD 11 01 02         ld   de,0201
 RO13:53D0 26 FE            ld   h,FE
 RO13:53D2 EF 15 FD 67                          // (VRA0:$9800 X~D,Y~E) = H + Prior Tiles, (VRA1:$9800 X~D,Y~E) = A
 RO13:53D6 C9               ret  
 RO13:53D7 C5               push bc
 RO13:53D8 3E 08            ld   a,08
 RO13:53DA 11 01 02         ld   de,0201
 RO13:53DD 26 FB            ld   h,FB
 RO13:53DF EF 15 FD 67                          // (VRA0:$9800 X~D,Y~E) = H + Prior Tiles, (VRA1:$9800 X~D,Y~E) = A
 RO13:53E3 C1               pop  bc
 RO13:53E4 04               inc  b
 RO13:53E5 04               inc  b
 RO13:53E6 C5               push bc
 RO13:53E7 3E 08            ld   a,08
 RO13:53E9 11 01 01         ld   de,0101
 RO13:53EC 26 FD            ld   h,FD
 RO13:53EE EF 15 FD 67                          // (VRA0:$9800 X~D,Y~E) = H + Prior Tiles, (VRA1:$9800 X~D,Y~E) = A
 RO13:53F2 C1               pop  bc
 RO13:53F3 04               inc  b
 RO13:53F4 3E 0F            ld   a,0F
 RO13:53F6 11 01 02         ld   de,0201
 RO13:53F9 26 FE            ld   h,FE
 RO13:53FB EF 15 FD 67                          // (VRA0:$9800 X~D,Y~E) = H + Prior Tiles, (VRA1:$9800 X~D,Y~E) = A
 RO13:53FF C9               ret  
 RO13:5400 CD F3 04         call 04F3           // Shuts off LCD Display if necessary
 RO13:5403 CD CE 34         call 34CE           // Empty $FFC8 to $FFCB
 RO13:5406 CD 7C 2D         call 2D7C           // Resets all Sprite-related data
 RO13:5409 AF               xor  a
 RO13:540A E0 95            ld   (ff00+95),a
 RO13:540C E0 96            ld   (ff00+96),a
 RO13:540E EF 10 A8 68                          // Sets up basic covered graphics values
 RO13:5412 EF 01 00 40                          // Graphics holding: VRA0($9000) to VRA0($97FF) then VRA0($8800) to VRA0($8FFF) holds basic text
 RO13:5416 CD 18 06         call 0618           // Resets Palettes to absolute default Palettes
 RO13:5419 CD 02 0F         call 0F02           // Empties ($9800) to ($9BFF) in both VRAM banks
 RO13:541C 3E 00            ld   a,00
 RO13:541E E0 83            ld   (ff00+83),a
 RO13:5420 E0 4F            ld   (ff00+4F),a
 RO13:5422 3E 00            ld   a,00
 RO13:5424 EF 15 91 66                          // VRA1:($8F30~$8FFF) holds mode menu tile graphics basics; mode menu graphics basics established accordingly
 RO13:5428 01 01 01         ld   bc,0101
 RO13:542B 11 05 12         ld   de,1205
 RO13:542E EF 22 47 62                          // Basic setup for table rectangle BC, size DE including defaulted palette for interior's tiles
 RO13:5432 01 06 01         ld   bc,0106
 RO13:5435 11 0B 12         ld   de,120B
 RO13:5438 EF 22 47 62                          // Basic setup for table rectangle BC, size DE including defaulted palette for interior's tiles
 RO13:543C 21 AF 56         ld   hl,56AF        // "All SAVE DATA's..." (3,7)
 RO13:543F CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 RO13:5442 21 BE 56         ld   hl,56BE        // "...continue Play?" (3,8)
 RO13:5445 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 RO13:5448 01 0B 07         ld   bc,070B
 RO13:544B CD AE 53         call 53AE           // Establishes "OK/NO" graphics at coordinates BC with "OK" highlighted
 RO13:544E AF               xor  a
 RO13:544F EA 4F DC         ld   (DC4F),a       // Map Edit Quick Save Choice set to OK
 RO13:5452 21 CE 56         ld   hl,56CE        // "MAP:"
 RO13:5455 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 RO13:5458 FA 33 C6         ld   a,(C633)
 RO13:545B CB 3F            srl  a
 RO13:545D 3C               inc  a
 RO13:545E 01 03 02         ld   bc,0203
 RO13:5461 16 02            ld   d,02           // Day #, 2, 3, 2
 RO13:5463 CD F5 31         call 31F5           // [$C300 + [$FFC8]] holds # of digit bytes, then designated HL (reversed), then number text (A is the number, BC is coordinates, D is the number of digits)
 RO13:5466 21 F5 56         ld   hl,56F5        // "Day"
 RO13:5469 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 RO13:546C FA 1F CA         ld   a,(CA1F)
 RO13:546F 3C               inc  a              // Map #
 RO13:5470 01 02 06         ld   bc,0602
 RO13:5473 16 02            ld   d,02
 RO13:5475 CD 37 32         call 3237           // [$C300 + [$FFC8]] holds # of digit bytes, then designated HL (reversed), then number text (A is the number, BC is coordinates, D is the number of digits)
 RO13:5478 11 41 CA         ld   de,CA41        // Map Name
 RO13:547B 21 3B DC         ld   hl,DC3B
 RO13:547E 01 08 00         ld   bc,0008
 RO13:5481 CD 50 3B         call 3B50           // ($DC3B~$DC42) = ($CA41~$CA48) (Map name)
 RO13:5484 21 3B DC         ld   hl,DC3B
 RO13:5487 01 02 09         ld   bc,0902
 RO13:548A CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 RO13:548D 21 D5 56         ld   hl,56D5        // "Warning" (7,13)
 RO13:5490 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 RO13:5493 21 DC 56         ld   hl,56DC        // "Choosing NO..." (6,14)
 RO13:5496 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 RO13:5499 21 E6 56         ld   hl,56E6        // "...will remove SAVE DATA."
 RO13:549C CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 RO13:549F FA 2F C6         ld   a,(C62F)
 RO13:54A2 FE 03            cp   a,03
 RO13:54A4 20 01            jr   nz,54A7        // Continue if not Map Edit
 RO13:54A6 C9               ret  
 RO13:54A7 FA 30 C6         ld   a,(C630)       // Active VS Mode
 RO13:54AA FE 01            cp   a,01           // IR Comm
 RO13:54AC 28 04            jr   z,54B2
 RO13:54AE FE 00            cp   a,00           // Man
 RO13:54B0 28 07            jr   z,54B9
 RO13:54B2 21 FB 56         ld   hl,56FB        // "IR COMM VS"
 RO13:54B5 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 RO13:54B8 C9               ret  
 RO13:54B9 21 08 57         ld   hl,5708        // "VS"
 RO13:54BC CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 RO13:54BF C9               ret  
 RO13:54C0 F0 82            ld   a,(ff00+82)
 RO13:54C2 F5               push af
 RO13:54C3 3E 04            ld   a,04
 RO13:54C5 E0 82            ld   (ff00+82),a
 RO13:54C7 E0 70            ld   (ff00+70),a
 RO13:54C9 CD 00 54         call 5400           // Establishes graphics for Map Editor Save Prompt
 RO13:54CC CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 RO13:54CF CD A2 05         call 05A2           // Button update, next frame
 RO13:54D2 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 RO13:54D5 3E 00            ld   a,00
 RO13:54D7 EF 15 91 67                          // Updates menu shifting diagonally down-right BG graphics (A is modification of where menu BG graphics had been stored)
 RO13:54DB F0 92            ld   a,(ff00+92)
 RO13:54DD CB 6F            bit  5,a            // Left
 RO13:54DF 28 11            jr   z,54F2
 RO13:54E1 3E 01            ld   a,01
 RO13:54E3 CD 44 38         call 3844
 RO13:54E6 AF               xor  a
 RO13:54E7 EA 4F DC         ld   (DC4F),a
 RO13:54EA 01 0B 07         ld   bc,070B
 RO13:54ED CD AE 53         call 53AE           // Establishes "OK/NO" graphics at coordinates BC with "OK" highlighted
 RO13:54F0 18 40            jr   5532           // Further standby for button input
 RO13:54F2 CB 67            bit  4,a            // Right
 RO13:54F4 28 12            jr   z,5508
 RO13:54F6 3E 01            ld   a,01
 RO13:54F8 CD 44 38         call 3844
 RO13:54FB 3E 01            ld   a,01
 RO13:54FD EA 4F DC         ld   (DC4F),a
 RO13:5500 01 0B 07         ld   bc,070B
 RO13:5503 CD D7 53         call 53D7           // Establishes "OK/NO" graphics at coordinates BC with "NO" highlighted
 RO13:5506 18 2A            jr   5532           // Further standby for button input
 RO13:5508 CB 47            bit  0,a            // A
 RO13:550A 28 19            jr   z,5525
 RO13:550C FA 4F DC         ld   a,(DC4F)
 RO13:550F FE 00            cp   a,00
 RO13:5511 20 09            jr   nz,551C
 RO13:5513 3E 02            ld   a,02           // OK branch
 RO13:5515 CD 44 38         call 3844
 RO13:5518 3E 00            ld   a,00
 RO13:551A 18 18            jr   5534
 RO13:551C 3E 0C            ld   a,0C           // NO branch
 RO13:551E CD 44 38         call 3844
 RO13:5521 3E 01            ld   a,01
 RO13:5523 18 0F            jr   5534
 RO13:5525 CB 4F            bit  1,a            // B
 RO13:5527 28 09            jr   z,5532
 RO13:5529 3E 0C            ld   a,0C
 RO13:552B CD 44 38         call 3844
 RO13:552E 3E FF            ld   a,FF
 RO13:5530 18 02            jr   5534
 RO13:5532 18 9B            jr   54CF           // Standby for button input
 RO13:5534 47               ld   b,a
 RO13:5535 C5               push bc
 RO13:5536 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 RO13:5539 C1               pop  bc
 RO13:553A F1               pop  af
 RO13:553B E0 82            ld   (ff00+82),a
 RO13:553D E0 70            ld   (ff00+70),a
 RO13:553F 78               ld   a,b
 RO13:5540 C9               ret  

 RO13:5541 07 05                                // "EDIT"
 RO13:5543 B4 EB F8 FF C4 00
 RO13:5549 07 06                                // "PLAY"
 RO13:554B F4 DA B2 00
 RO13:554F 07 07                                // "COPY"
 RO13:5551 BA F3 2D 00
 RO13:5555 07 08                                // "DELETE"
 RO13:5557 EB D8 2D C4 00
 RO13:555C 07 09                                // "MAP News"
 RO13:555E CF FF F4 72 63 6C 8D 00

 RO13:5566 02 02
 RO13:5568 9C 79 EB 2D C0 60 B4 EB F8 FF C4 6C 7F 6D 66 3F 00
 RO13:5579 02 02
 RO13:557B 9C 79 EB 2D C0 60 F4 DA B2 6C 7F 6D 66 3F 00
 RO13:558A 02 02
 RO13:558C 9C 79 EB 2D C0 60 BA F3 2D 6C 7F 6D 66 3F 00
 RO13:559B 02 02
 RO13:559D 9C 79 EB 2D C0 60 6B 68 94 AE 6C 7F 6D 66 3F 00
 RO13:55AD 02 02
 RO13:55AF 9C 79 EB 2D C0 60 61 91 7F 6D 66 3F 00
 RO13:55BC 02 02
 RO13:55BE 9C 6A 76 EB 2D C0 60 83 87 62 7F 6D 66 3F 00
 RO13:55CD 02 02
 RO13:55CF 9C 6A 76 B1 FF F4 DB 2D EC 6C 7F 6D 66 3F 00
 RO13:55DE 02 02
 RO13:55E0 9C 8A 60 6B 68 94 AE 6C 7F 6D 66 3F 00
 RO13:55ED 02 02
 RO13:55EF 9C 8A 60 74 63 6A 63 6C 7F 6D 66 3F 00
 RO13:55FC 02 02
 RO13:55FE 9C 79 EB 2D C0 60 B1 FF F4 6C 7F 6D 66 3F 00
 RO13:560D 02 02
 RO13:560F 9C 6A 76 EB 2D C0 60 BE 2D EF 6C 7F 6D 66 3F 00

 RO13:561F 03 0D
 RO13:5621 91 8D 93 62               ld   h,d
 RO13:5625 CF FF F4               -    
 RO13:5628 E8 B3 DD               -    
 RO13:562B DB 2D EC               -    
 RO13:562E 79 00

 RO13:5630 03 0D
 RO13:5632 91 8D 93 62               ld   h,d
 RO13:5636 CF FF F4               -    
 RO13:5639 B1 FF F4               -    
 RO13:563C DB 2D EC               -    
 RO13:563F 79 00

 RO13:5641 03 0E
 RO13:5643 D8 B8 B4 BD C4 71 AD 63 9B 6D 00     // "Requesting"

 RO13:564E 02 0E
 RO13:5650 CF FF F4 4E 4F 2F 00

 RO13:5657 B4 EB F8 FF C4 20 BA F3 2D 20 20 20 61 91 89 01
 RO13:5667 F4 DA B2 20 20 20 EB D8 2D C4 20 20 83 87 63 00

 RO13:5677 02 02
 RO13:5679 9C 6A 76 BA F3 2D 6C 7F 6D 66 3F 00
 RO13:5685 03               inc  bc
 RO13:5686 0D               dec  c
 RO13:5687 6A               ld   l,d
 RO13:5688 79               ld   a,c
 RO13:5689 EB               -    
 RO13:568A 2D               dec  l
 RO13:568B C0               ret  nz
 RO13:568C 60               ld   h,b
 RO13:568D 00
 RO13:568E 03 0D
 RO13:5690 6B 68 94 AE 6C 7F 6D 66 3F 00
 RO13:569A 03 0D
 RO13:569C 63 8C 8E 67 6C 7F 6D 66 3F 00
 RO13:56A6 03               inc  bc
 RO13:56A7 0E 62            ld   c,62
 RO13:56A9 62               ld   h,d
 RO13:56AA 9B               sbc  e
 RO13:56AB 6D               ld   l,l
 RO13:56AC 66               ld   h,(hl)
 RO13:56AD 3F               ccf  
 RO13:56AE 00
 RO13:56AF 03 07
 RO13:56B1 96 8D 66 62 79 BE 2D EF EB 2D C0 79 00
 RO13:56BE 03 08
 RO13:56C0 72 9A 67 66 87 F4 DA B2 6C 7F 6D 66 3F 00
 RO13:56CE 02 02
 RO13:56D0 CF FF F4 3A 00
 RO13:56D5 07 0D
 RO13:56D7 71 AD 63 62 00
 RO13:56DC 06 0E
 RO13:56DE 4E 4F 60 64 87 9F 74 00
 RO13:56E6 04 0F
 RO13:56E8 BE 2D EF EB 2D C0 7A 67 64 7F 6D 2E 00
 RO13:56F5 04 03
 RO13:56F7 76 71 82 00
 RO13:56FB 02 04
 RO13:56FD 49 52 72 63 6C 8D 70 62 6E 8D 00
 RO13:5708 02 04
 RO13:570A 70 62 6E 8D 00

 RO13:570F CF FF F4 60 72 68 88 7F 6D 2E 00

 RO13:571A B4 EB F8 FF C4 6C 70 CF FF F4 84 01
 RO13:5726 E8 B3 DD DB 2D EC 6C 70 CF FF F4 60 01
 RO13:5733 61 6F 9E 7F 6D 2E 00

 RO13:573A CF FF F4 EB 2D C0 60 BA F3 2D 6C 7F 6D 2E 00
 RO13:5749 CF FF F4 EB 2D C0 60 6B 68 94 AE 6C 7F 6D 2E 00

 RO13:5759 49 52 72 63 6C 8D 9B 01
 RO13:5761 CF FF F4 EB 2D C0 60               ld   h,b
 RO13:5768 61 91 70 88 01
 RO13:576D 83 87 AF 70 88               adc  b
 RO13:5772 9B 67 7F 6D 2E 00

 RO13:5778 49 52 72 63 6C 8D 60 72 66 AF 73 01
 RO13:5784 94 9F 8D 8E 72 68 AF 70 CF FF F4 EB 2D C0 60 01
 RO13:5794 61 62 73 76 61 91 7F 6D 2E 00

 RO13:579E 49 52 72 63 6C 8D 60 72 66 AF 73 01
 RO13:57AA CF FF F4 EB 2D C0 60 01
 RO13:57B2 61 62 73 66 87 83 87 62 7F 6D 2E 00

 RO13:57BE CF FF F4 EB 2D C0 8E 61 88 7F 6E 8D 2E 00

 RO13:57CC 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
 RO13:57DC 00 00 7F 00 7F 00 45 3A 5D 22 45 3A 5D 22 5D 22
 RO13:57EC 00 00 FE 00 FE 00 70 8E 76 88 70 8E 76 88 10 EE
 RO13:57FC 7F 00 77 00 7F 00 00 00 1F 6F 6F 60 6F 20 00 00
 RO13:580C FE 00 EE 00 FE 00 00 00 80 7E 7E 7E 7E 7C 00 00
 RO13:581C 81 FF 00 C7 00 DB 00 C7 00 DB 00 DB 00 C7 81 FF
 RO13:582C 00 00 00 20 00 FC 00 20 00 F8 00 42 00 42 00 3C
 RO13:583C 00 0A 00 40 00 4E 00 30 00 40 00 80 00 80 00 7E
 RO13:584C 00 00 00 7C 00 08 00 3C 00 C2 00 32 00 4A 00 3C

 RO13:585C 00 00 00 69 FF 7F 40 72
 RO13:5864 FF 7F B5 56 6B 2D 00 00
 RO13:586C FF 7F 6C 03 08 02 00 00
 RO13:5874 00 69 9F 00 FF 7F 00 00
 RO13:587C 10 42 6B 2D C6 18 00 00
 RO13:5884 00 00 9F 00 FF 7F 1F 42
 RO13:588C 1F 7C 1F 7C 1F 7C 1F 7C
 RO13:5894 1F 7C 1F 7C 1F 7C 1F 7C

 RO13:589C 00 00 80 69 FF 7F C0 72
 RO13:58A4 FF 7F B5 56 6B 2D 00 00
 RO13:58AC FF 7F BF 02 75 01 00 00
 RO13:58B4 80 7D 9F 00 FF 7F 00 00
 RO13:58BC 10 42 6B 2D C6 18 00 00
 RO13:58C4 00 00 9F 00 FF 7F 1F 42
 RO13:58CC 1F 7C 1F 7C 1F 7C 1F 7C
 RO13:58D4 1F 7C 1F 7C 1F 7C 1F 7C

 RO13:58DC E5               push hl
 RO13:58DD 21 07 A0         ld   hl,A007
 RO13:58E0 85               add  l
 RO13:58E1 6F               ld   l,a
 RO13:58E2 7C               ld   a,h
 RO13:58E3 CE 00            adc  a,00
 RO13:58E5 67               ld   h,a
 RO13:58E6 CD 93 05         call 0593           // ($0000) = 10
 RO13:58E9 3E 00            ld   a,00
 RO13:58EB CD 8D 05         call 058D           // ($4000) = 0, ($FF81) = 0
 RO13:58EE 7E               ld   a,(hl)
 RO13:58EF CD 9B 05         call 059B           // ($0000) = 0
 RO13:58F2 E1               pop  hl
 RO13:58F3 C9               ret                 // SRA0($A007 + A)
 RO13:58F4 E5               push hl
 RO13:58F5 3E 00            ld   a,00
 RO13:58F7 CD DC 58         call 58DC           // SRA0($A007)
 RO13:58FA CB 47            bit  0,a
 RO13:58FC 20 15            jr   nz,5913
 RO13:58FE 3E 01            ld   a,01
 RO13:5900 CD DC 58         call 58DC           // SRA0($A008)
 RO13:5903 CB 47            bit  0,a
 RO13:5905 20 0C            jr   nz,5913
 RO13:5907 3E 02            ld   a,02
 RO13:5909 CD DC 58         call 58DC           // SRA0($A009)
 RO13:590C CB 47            bit  0,a
 RO13:590E 20 03            jr   nz,5913
 RO13:5910 AF               xor  a
 RO13:5911 18 02            jr   5915
 RO13:5913 3E 01            ld   a,01
 RO13:5915 E1               pop  hl
 RO13:5916 C9               ret                 // A = bit 0,SRA0($A007) OR bit 0,SRA0($A008) OR bit 0,SRA0($A009)
 RO13:5917 C5               push bc
 RO13:5918 E5               push hl
 RO13:5919 4F               ld   c,a
 RO13:591A 3E 00            ld   a,00
 RO13:591C CD 8D 05         call 058D           // ($4000) = 0, ($FF81) = 0
 RO13:591F CD 93 05         call 0593           // ($0000) = 10
 RO13:5922 79               ld   a,c
 RO13:5923 21 D4 38         ld   hl,38D4
 RO13:5926 CD 93 3A         call 3A93           // HL = $A080 + A * $0200
 RO13:5929 3E 0C            ld   a,0C
 RO13:592B CD BC 29         call 29BC           // HL = $A08C + A * $0200
 RO13:592E 78               ld   a,b
 RO13:592F CD C7 3A         call 3AC7           // A = AND SRA0($A08C + A * $0200 + B/8), 2^B%8
 RO13:5932 CD 9B 05         call 059B           // ($0000) = 0
 RO13:5935 E1               pop  hl
 RO13:5936 C1               pop  bc
 RO13:5937 C9               ret                 // A = AND SRA0($A08C + A * $0200 + B/8), 2^B%8
 RO13:5938 C5               push bc
 RO13:5939 E5               push hl
 RO13:593A 4F               ld   c,a
 RO13:593B 3E 00            ld   a,00
 RO13:593D CD 8D 05         call 058D           // ($4000) = 0, ($FF81) = 0
 RO13:5940 CD 93 05         call 0593           // ($0000) = 10
 RO13:5943 79               ld   a,c
 RO13:5944 21 D4 38         ld   hl,38D4
 RO13:5947 CD 93 3A         call 3A93           // HL = $A080 + A * $0200
 RO13:594A 3E 0C            ld   a,0C
 RO13:594C CD BC 29         call 29BC           // HL = $A08C + A * $0200
 RO13:594F 78               ld   a,b
 RO13:5950 CD DC 3A         call 3ADC           // res B,($A08C + A * $0200 + B/8)
 RO13:5953 79               ld   a,c
 RO13:5954 21 07 A0         ld   hl,A007
 RO13:5957 CD BC 29         call 29BC           // HL = $A007 + A
 RO13:595A CB 86            res  0,(hl)         // res 0,SRA0($A007 + A)
 RO13:595C CD 9B 05         call 059B           // ($0000) = 0
 RO13:595F E1               pop  hl
 RO13:5960 C1               pop  bc
 RO13:5961 C9               ret  
 RO13:5962 C5               push bc
 RO13:5963 47               ld   b,a
 RO13:5964 3E 00            ld   a,00
 RO13:5966 CD 8D 05         call 058D           // ($4000) = 0, ($FF81) = 0
 RO13:5969 CD 93 05         call 0593           // ($0000) = 10
 RO13:596C 78               ld   a,b
 RO13:596D 21 D4 38         ld   hl,38D4
 RO13:5970 CD 93 3A         call 3A93           // HL = $A080 + A * $0200
 RO13:5973 06 00            ld   b,00
 RO13:5975 09               add  hl,bc          // HL = $A080 + A * $0200 + C
 RO13:5976 7E               ld   a,(hl)         // A = SRA0($A080 + A * $0200 + C)
 RO13:5977 CD 9B 05         call 059B           // ($0000) = 0
 RO13:597A C1               pop  bc
 RO13:597B C9               ret  
 RO13:597C C5               push bc
 RO13:597D D5               push de
 RO13:597E E5               push hl
 RO13:597F E5               push hl
 RO13:5980 21 D4 38         ld   hl,38D4
 RO13:5983 CD 93 3A         call 3A93           // HL = $A080 + A * $0200
 RO13:5986 CD 93 05         call 0593           // ($0000) = 10
 RO13:5989 3E 00            ld   a,00
 RO13:598B CD 8D 05         call 058D           // ($4000) = 0, ($FF81) = 0
 RO13:598E 54               ld   d,h
 RO13:598F 5D               ld   e,l            // DE = $A080 + A * $0200
 RO13:5990 E1               pop  hl
 RO13:5991 01 07 00         ld   bc,0007
 RO13:5994 CD 50 3B         call 3B50           // (HL ~ HL+6) = SRA0($A080 + A * $0200 ~ $A086 + A * $0200)
 RO13:5997 CD 9B 05         call 059B           // ($0000) = 0
 RO13:599A E1               pop  hl
 RO13:599B D1               pop  de
 RO13:599C C1               pop  bc
 RO13:599D C9               ret  
 RO13:599E C5               push bc
 RO13:599F D5               push de
 RO13:59A0 E5               push hl
 RO13:59A1 54               ld   d,h
 RO13:59A2 5D               ld   e,l
 RO13:59A3 21 7E C6         ld   hl,C67E
 RO13:59A6 01 07 00         ld   bc,0007
 RO13:59A9 CD 50 3B         call 3B50           // ($C67E ~ $C684) = (HL ~ HL+6)
 RO13:59AC E1               pop  hl
 RO13:59AD D1               pop  de
 RO13:59AE C1               pop  bc
 RO13:59AF C9               ret  
 RO13:59B0 D5               push de
 RO13:59B1 21 D4 38         ld   hl,38D4
 RO13:59B4 CD 93 3A         call 3A93           // HL = $A080 + A * $0200
 RO13:59B7 11 0D 00         ld   de,000D
 RO13:59BA 19               add  hl,de          // HL = $A08D + A * $0200
 RO13:59BB CD 93 05         call 0593           // ($0000) = 10
 RO13:59BE 7E               ld   a,(hl)
 RO13:59BF CD 9B 05         call 059B           // ($0000) = 0
 RO13:59C2 D1               pop  de
 RO13:59C3 C9               ret  
 RO13:59C4 FA 85 C6         ld   a,(C685)
 RO13:59C7 C9               ret  
 RO13:59C8 EA 85 C6         ld   (C685),a
 RO13:59CB C9               ret  
 RO13:59CC C5               push bc
 RO13:59CD D5               push de
 RO13:59CE 21 D4 38         ld   hl,38D4
 RO13:59D1 CD 93 3A         call 3A93           // HL = $A080 + A * $0200
 RO13:59D4 5D               ld   e,l
 RO13:59D5 54               ld   d,h
 RO13:59D6 21 07 00         ld   hl,0007
 RO13:59D9 19               add  hl,de          // HL = $A087 + A * $0200
 RO13:59DA CD 93 05         call 0593           // ($0000) = 10
 RO13:59DD 3E 00            ld   a,00
 RO13:59DF CD 8D 05         call 058D           // ($4000) = 0, ($FF81) = 0
 RO13:59E2 FA 85 C6         ld   a,(C685)       // Configuration Flags
 RO13:59E5 22               ldi  (hl),a
 RO13:59E6 FA 86 C6         ld   a,(C686)       // Mode
 RO13:59E9 77               ld   (hl),a
 RO13:59EA 21 00 00         ld   hl,0000
 RO13:59ED 19               add  hl,de          // HL = $A080 + A * $0200
 RO13:59EE 11 7E C6         ld   de,C67E
 RO13:59F1 01 07 00         ld   bc,0007
 RO13:59F4 CD 50 3B         call 3B50           // (HL ~ HL+BC-1) = (DE ~ DE+BC-1)
 RO13:59F7 CD 9B 05         call 059B           // ($0000) = 0
 RO13:59FA D1               pop  de
 RO13:59FB C1               pop  bc
 RO13:59FC C9               ret                 // Writes CO Name, Configuration flags, and Selected Mode onto Save File A
 RO13:59FD C5               push bc
 RO13:59FE 4F               ld   c,a
 RO13:59FF CD 93 05         call 0593           // ($0000) = 10
 RO13:5A02 3E 00            ld   a,00
 RO13:5A04 CD 8D 05         call 058D           // ($4000) = 0, ($FF81) = 0
 RO13:5A07 79               ld   a,c
 RO13:5A08 21 D4 38         ld   hl,38D4
 RO13:5A0B CD 93 3A         call 3A93           // HL = $A080 + A * $0200
 RO13:5A0E 3E 09            ld   a,09
 RO13:5A10 CD BC 29         call 29BC           // HL = $A089 + A * $0200
 RO13:5A13 2A               ldi  a,(hl)
 RO13:5A14 EA 97 CC         ld   (CC97),a
 RO13:5A17 2A               ldi  a,(hl)
 RO13:5A18 EA 98 CC         ld   (CC98),a
 RO13:5A1B 2A               ldi  a,(hl)
 RO13:5A1C EA 99 CC         ld   (CC99),a
 RO13:5A1F CD 9B 05         call 059B           // ($0000) = 0
 RO13:5A22 C1               pop  bc
 RO13:5A23 C9               ret                 // Reads Medals Obtained from File A
 RO13:5A24 C5               push bc
 RO13:5A25 D5               push de
 RO13:5A26 4F               ld   c,a
 RO13:5A27 CD 93 05         call 0593           // ($0000) = 10
 RO13:5A2A 3E 00            ld   a,00
 RO13:5A2C CD 8D 05         call 058D           // ($4000) = 0, ($FF81) = 0
 RO13:5A2F 79               ld   a,c
 RO13:5A30 21 D4 38         ld   hl,38D4
 RO13:5A33 CD 93 3A         call 3A93           // HL = $A080 + A * $0200
 RO13:5A36 3E 25            ld   a,25
 RO13:5A38 80               add  b
 RO13:5A39 CD BC 29         call 29BC           // HL = $A0A5 + A * $0200 + B
 RO13:5A3C 56               ld   d,(hl)         // D = ($A0A5 + A * $0200 + B)
 RO13:5A3D AF               xor  a
 RO13:5A3E EA 94 CC         ld   (CC94),a       // ($CC94) is emptied
 RO13:5A41 78               ld   a,b            // A = B
 RO13:5A42 FE 00            cp   a,00           // Beginner
 RO13:5A44 28 14            jr   z,5A5A
 RO13:5A46 FE 01            cp   a,01           // Campaign
 RO13:5A48 28 20            jr   z,5A6A
 RO13:5A4A 7A               ld   a,d            // A = Map in play
 RO13:5A4B EF 28 5A 40                          // ($CA1A) 3 byte holds map data location, ($CA1D) = 1 if map is already cleared, ($CA1E) holds 2, ($CA1F) holds Map # based on Standard, ($CA21) to ($CA4E) holds general map information
 RO13:5A4F 79               ld   a,c
 RO13:5A50 CD FC 5A         call 5AFC           // Standard Progress flags and count established
 RO13:5A53 3E 3C            ld   a,3C
 RO13:5A55 EA 96 CC         ld   (CC96),a
 RO13:5A58 18 1E            jr   5A78
 RO13:5A5A 7A               ld   a,d            // A = Map in play
 RO13:5A5B EF 28 00 40                          // ($CA1A) 3 byte holds map data location, ($CA1D) = 1 if map is already cleared, ($CA1E) holds 0, ($CA1F) holds Map # based on Beginner, ($CA21) to ($CA4E) holds general map information
 RO13:5A5F 79               ld   a,c
 RO13:5A60 CD BB 5A         call 5ABB           // ($CC95) = Number of maps cleared in Beginner; set 0,($CC94) if Beginner is finished
 RO13:5A63 3E 10            ld   a,10
 RO13:5A65 EA 96 CC         ld   (CC96),a
 RO13:5A68 18 0E            jr   5A78
 RO13:5A6A 7A               ld   a,d            // A = Map in play
 RO13:5A6B EF 28 24 40                          // ($CA1A) 3 byte holds map data location, ($CA1D) = 4 if map is open but not cleared, ($CA1E) holds 1, ($CA1F) holds Map # based on Campaign, ($CA21) to ($CA4E) holds general map information
 RO13:5A6F 79               ld   a,c
 RO13:5A70 CD DB 5A         call 5ADB           // Campaign Progress flags and count established
 RO13:5A73 3E 2D            ld   a,2D
 RO13:5A75 EA 96 CC         ld   (CC96),a       // ($CC96) = number of maps for the active mode
 RO13:5A78 CD 89 5A         call 5A89           // Sets up Map Name and Map #
 RO13:5A7B CD A2 5A         call 5AA2           // ($CC93) holds Current Phase # of Saved file, or -1 if none
 RO13:5A7E 3E 00            ld   a,00
 RO13:5A80 CD 8D 05         call 058D           // ($4000) = 0, ($FF81) = 0
 RO13:5A83 CD 9B 05         call 059B           // ($0000) = 0
 RO13:5A86 D1               pop  de
 RO13:5A87 C1               pop  bc
 RO13:5A88 C9               ret                 // Reads Save A for Mode B Save info to get important data for text
 RO13:5A89 C5               push bc
 RO13:5A8A D5               push de
 RO13:5A8B 11 41 CA         ld   de,CA41
 RO13:5A8E 21 89 CC         ld   hl,CC89
 RO13:5A91 01 08 00         ld   bc,0008
 RO13:5A94 CD 50 3B         call 3B50           // ($CC89) 8 byte holds map name
 RO13:5A97 AF               xor  a
 RO13:5A98 22               ldi  (hl),a         // ($CC91) is emptied
 RO13:5A99 FA 1F CA         ld   a,(CA1F)
 RO13:5A9C EA 92 CC         ld   (CC92),a       // ($CC92) holds Map # of given mode
 RO13:5A9F D1               pop  de
 RO13:5AA0 C1               pop  bc
 RO13:5AA1 C9               ret  
 RO13:5AA2 3E FF            ld   a,FF
 RO13:5AA4 EA 93 CC         ld   (CC93),a
 RO13:5AA7 79               ld   a,c
 RO13:5AA8 CD 17 59         call 5917           // A = AND SRA0($A08C + C * $0200 + B/8), 2^B%8
 RO13:5AAB C8               ret  z
 RO13:5AAC CD 93 05         call 0593           // ($0000) = 10
 RO13:5AAF 79               ld   a,c
 RO13:5AB0 11 04 00         ld   de,0004
 RO13:5AB3 CD 48 5B         call 5B48           // SRAM Bank set according to file, HL = $A004/$B004
 RO13:5AB6 7E               ld   a,(hl)
 RO13:5AB7 EA 93 CC         ld   (CC93),a
 RO13:5ABA C9               ret                 // ($CC93) holds Current Phase # of Saved file, or -1 if none
 RO13:5ABB C5               push bc
 RO13:5ABC D5               push de
 RO13:5ABD 21 D4 38         ld   hl,38D4
 RO13:5AC0 CD 93 3A         call 3A93           // HL = $A080 + A * $0200
 RO13:5AC3 11 0F 00         ld   de,000F
 RO13:5AC6 19               add  hl,de          // HL = $A08F + A * $0200
 RO13:5AC7 3E 10            ld   a,10
 RO13:5AC9 CD 1D 5B         call 5B1D           // A = Number of maps cleared in Beginner
 RO13:5ACC EA 95 CC         ld   (CC95),a       // ($CC95) = Number of maps cleared in Beginner
 RO13:5ACF FE 10            cp   a,10
 RO13:5AD1 20 05            jr   nz,5AD8
 RO13:5AD3 21 94 CC         ld   hl,CC94
 RO13:5AD6 CB C6            set  0,(hl)
 RO13:5AD8 D1               pop  de
 RO13:5AD9 C1               pop  bc
 RO13:5ADA C9               ret                 // ($CC95) = Number of maps cleared in Beginner; set 0,($CC94) if Beginner is finished
 RO13:5ADB C5               push bc
 RO13:5ADC D5               push de
 RO13:5ADD 21 D4 38         ld   hl,38D4
 RO13:5AE0 CD 93 3A         call 3A93           // HL = $A080 + A * $0200
 RO13:5AE3 E5               push hl
 RO13:5AE4 11 11 00         ld   de,0011
 RO13:5AE7 19               add  hl,de          // HL = $A091 + A * $0200
 RO13:5AE8 3E 2D            ld   a,2D
 RO13:5AEA CD 1D 5B         call 5B1D           // A = Number of maps cleared in Campaign
 RO13:5AED EA 95 CC         ld   (CC95),a       // ($CC95) = Number of maps cleared in Campaign
 RO13:5AF0 E1               pop  hl             // HL = $A080 + A * $0200
 RO13:5AF1 11 28 00         ld   de,0028
 RO13:5AF4 19               add  hl,de          // HL = $A0A8 + A * $0200
 RO13:5AF5 7E               ld   a,(hl)
 RO13:5AF6 EA 94 CC         ld   (CC94),a
 RO13:5AF9 D1               pop  de
 RO13:5AFA C1               pop  bc
 RO13:5AFB C9               ret                 // Campaign Progress flags and count established
 RO13:5AFC C5               push bc
 RO13:5AFD D5               push de
 RO13:5AFE 21 D4 38         ld   hl,38D4
 RO13:5B01 CD 93 3A         call 3A93           // HL = $A080 + A * $0200
 RO13:5B04 E5               push hl
 RO13:5B05 11 17 00         ld   de,0017
 RO13:5B08 19               add  hl,de          // HL = $A097 + A * $0200
 RO13:5B09 3E 3C            ld   a,3C
 RO13:5B0B CD 1D 5B         call 5B1D           // A = Number of maps cleared in Standard
 RO13:5B0E EA 95 CC         ld   (CC95),a       // ($CC95) = Number of maps cleared in Standard
 RO13:5B11 E1               pop  hl             // HL = $A080 + A * $0200
 RO13:5B12 11 29 00         ld   de,0029
 RO13:5B15 19               add  hl,de          // HL = $A0A9 + A * $0200
 RO13:5B16 7E               ld   a,(hl)         // Standard Mode progress flags
 RO13:5B17 EA 94 CC         ld   (CC94),a
 RO13:5B1A D1               pop  de
 RO13:5B1B C1               pop  bc
 RO13:5B1C C9               ret                 // Standard Progress flags and count established
 RO13:5B1D 47               ld   b,a
 RO13:5B1E 0E 00            ld   c,00
 RO13:5B20 78               ld   a,b            // Loop begins here
 RO13:5B21 3D               dec  a
 RO13:5B22 CD C7 3A         call 3AC7           // A = AND (HL + A/8), 2^A%8
 RO13:5B25 28 01            jr   z,5B28
 RO13:5B27 0C               inc  c
 RO13:5B28 05               dec  b
 RO13:5B29 20 F5            jr   nz,5B20
 RO13:5B2B 79               ld   a,c
 RO13:5B2C C9               ret                 // A = number of bits active in (HL) for original A bits
 RO13:5B2D C5               push bc
 RO13:5B2E 47               ld   b,a
 RO13:5B2F FA 2F C6         ld   a,(C62F)
 RO13:5B32 4F               ld   c,a
 RO13:5B33 CD 38 5B         call 5B38           // HL = $38E0 + A * 10 + Active Game Mode * 2
 RO13:5B36 C1               pop  bc
 RO13:5B37 C9               ret  
 RO13:5B38 C5               push bc
 RO13:5B39 78               ld   a,b
 RO13:5B3A 87               add  a
 RO13:5B3B 87               add  a
 RO13:5B3C 80               add  b
 RO13:5B3D 81               add  c
 RO13:5B3E 87               add  a
 RO13:5B3F 4F               ld   c,a            // C = B * 10 + C * 2
 RO13:5B40 06 00            ld   b,00
 RO13:5B42 21 E0 38         ld   hl,38E0
 RO13:5B45 09               add  hl,bc          // HL = $38E0 + B * 10 + C * 2
 RO13:5B46 C1               pop  bc
 RO13:5B47 C9               ret  
 RO13:5B48 4F               ld   c,a
 RO13:5B49 87               add  a
 RO13:5B4A 87               add  a
 RO13:5B4B 81               add  c
 RO13:5B4C 80               add  b
 RO13:5B4D 87               add  a              // A = A * 10 + B * 2
 RO13:5B4E 21 E0 38         ld   hl,38E0
 RO13:5B51 CD BC 29         call 29BC           // HL = $38E0 + A * 10 + B * 2
 RO13:5B54 2A               ldi  a,(hl)
 RO13:5B55 CD 8D 05         call 058D           // ($4000) = A, ($FF81) = A
 RO13:5B58 66               ld   h,(hl)
 RO13:5B59 2E 00            ld   l,00
 RO13:5B5B 19               add  hl,de
 RO13:5B5C C9               ret                 // SRAM Bank set according to file, HL = DE + $A000/$B000
 RO13:5B5D FE 03            cp   a,03
 RO13:5B5F 30 06            jr   nc,5B67
 RO13:5B61 EA 0D A0         ld   (A00D),a
 RO13:5B64 EA 9B CC         ld   (CC9B),a
 RO13:5B67 C9               ret                 // If A < 3, ($A00D) and ($CC9B) are set to A
 RO13:5B68 F5               push af
 RO13:5B69 21 7E C6         ld   hl,C67E
 RO13:5B6C 01 00 02         ld   bc,0200
 RO13:5B6F AF               xor  a
 RO13:5B70 CD 79 3B         call 3B79           // ($C67E) to ($C87D) emptied
 RO13:5B73 3E 20            ld   a,20
 RO13:5B75 EA 7E C6         ld   (C67E),a       // ($C67E) set to 32
 RO13:5B78 3E 3D            ld   a,3D
 RO13:5B7A EA 85 C6         ld   (C685),a       // Default Configuration
 RO13:5B7D 3E 01            ld   a,01
 RO13:5B7F EA 86 C6         ld   (C686),a       // Beginner
 RO13:5B82 AF               xor  a
 RO13:5B83 21 9D C6         ld   hl,C69D
 RO13:5B86 CD D1 3A         call 3AD1           // Campaign Map 1 opened
 RO13:5B89 F1               pop  af
 RO13:5B8A CD 15 5C         call 5C15           // Writes Save Data of Save File A
 RO13:5B8D C9               ret                 // New File setup in Save File A
 RO13:5B8E C5               push bc
 RO13:5B8F 47               ld   b,a
 RO13:5B90 FA 9B CC         ld   a,(CC9B)
 RO13:5B93 CD BB 5B         call 5BBB           // Fully Copies Original Save File to Save File Initial A as needed
 RO13:5B96 78               ld   a,b
 RO13:5B97 CD 15 5C         call 5C15           // Writes Save Data of Save File A
 RO13:5B9A FA 9A CC         ld   a,(CC9A)
 RO13:5B9D FE 00            cp   a,00
 RO13:5B9F 28 06            jr   z,5BA7         // Skips temporary map data holding if not single player quick save
 RO13:5BA1 C5               push bc
 RO13:5BA2 78               ld   a,b
 RO13:5BA3 CD C2 5E         call 5EC2           // SRAM half-block based on File indicated by A holds temporary map data
 RO13:5BA6 C1               pop  bc
 RO13:5BA7 78               ld   a,b
 RO13:5BA8 CD D1 61         call 61D1           // SRA0($A27E + A * $0200) 2 byte holds sum of all values of SRA0($A080 + A * $0200 to $A27D + A * $0200)
 RO13:5BAB C1               pop  bc
 RO13:5BAC C9               ret                 // Saves all Quick Save data onto File A
 RO13:5BAD F5               push af
 RO13:5BAE CD 15 5C         call 5C15           // Writes Save Data of Save File A
 RO13:5BB1 F1               pop  af
 RO13:5BB2 F5               push af
 RO13:5BB3 CD C2 5E         call 5EC2           // SRAM half-block based on File indicated by A holds temporary map data
 RO13:5BB6 F1               pop  af
 RO13:5BB7 CD D1 61         call 61D1           // SRA0($A27E + A * $0200) 2 byte holds sum of all values of SRA0($A080 + A * $0200 to $A27D + A * $0200)
 RO13:5BBA C9               ret                 // Updates Save Data of Save File A, including Map Data unconditional
 RO13:5BBB C5               push bc
 RO13:5BBC B8               cp   b
 RO13:5BBD 28 0F            jr   z,5BCE         // End immediately if A = B
 RO13:5BBF 0E 00            ld   c,00           // Beginner
 RO13:5BC1 CD D0 5B         call 5BD0           // Copies Save File A to Save File B
 RO13:5BC4 0E 01            ld   c,01           // Campaign
 RO13:5BC6 CD D0 5B         call 5BD0           // Copies Save File A to Save File B
 RO13:5BC9 0E 02            ld   c,02           // Standard
 RO13:5BCB CD D0 5B         call 5BD0           // Copies Save File A to Save File B
 RO13:5BCE C1               pop  bc
 RO13:5BCF C9               ret                 // Fully Copies Save File A to Save File B as needed
 RO13:5BD0 F5               push af
 RO13:5BD1 C5               push bc
 RO13:5BD2 D5               push de
 RO13:5BD3 5F               ld   e,a
 RO13:5BD4 CD 93 05         call 0593           // ($0000) = 10
 RO13:5BD7 F0 82            ld   a,(ff00+82)
 RO13:5BD9 F5               push af
 RO13:5BDA 3E 05            ld   a,05
 RO13:5BDC E0 82            ld   (ff00+82),a
 RO13:5BDE E0 70            ld   (ff00+70),a
 RO13:5BE0 C5               push bc
 RO13:5BE1 43               ld   b,e            // B set to File #
 RO13:5BE2 CD 38 5B         call 5B38           // HL = $38E0 + A * 10 + C * 2
 RO13:5BE5 2A               ldi  a,(hl)         // SRAM Bank
 RO13:5BE6 CD 8D 05         call 058D           // ($4000) = ($38E0 + A * 10 + C * 2), ($FF81) = ($38E0 + A * 10 + C * 2)
 RO13:5BE9 56               ld   d,(hl)         // D = ($38E0 + A * 10 + C * 2 + 1)
 RO13:5BEA 1E 00            ld   e,00
 RO13:5BEC 21 00 D0         ld   hl,D000
 RO13:5BEF 01 00 10         ld   bc,1000
 RO13:5BF2 CD 50 3B         call 3B50           // WRA5($D000 ~ $DFFF) = SRAx($A000/$B000 ~ $AFFF/$BFFF)
 RO13:5BF5 C1               pop  bc
 RO13:5BF6 CD 38 5B         call 5B38           // HL = $38E0 + B * 10 + C * 2
 RO13:5BF9 2A               ldi  a,(hl)
 RO13:5BFA CD 8D 05         call 058D           // ($4000) = ($38E0 + B * 10 + C * 2), ($FF81) = ($38E0 + B * 10 + C * 2)
 RO13:5BFD 66               ld   h,(hl)         // H = ($38E0 + B * 10 + C * 2 + 1)
 RO13:5BFE 2E 00            ld   l,00
 RO13:5C00 11 00 D0         ld   de,D000
 RO13:5C03 01 00 10         ld   bc,1000
 RO13:5C06 CD 50 3B         call 3B50           // SRAy($A000/$B000 ~ $AFFF/$BFFF) = WRA5($D000 ~ $DFFF)
 RO13:5C09 CD 9B 05         call 059B           // ($0000) = 0
 RO13:5C0C F1               pop  af
 RO13:5C0D E0 82            ld   (ff00+82),a
 RO13:5C0F E0 70            ld   (ff00+70),a
 RO13:5C11 D1               pop  de
 RO13:5C12 C1               pop  bc
 RO13:5C13 F1               pop  af
 RO13:5C14 C9               ret                 // Writes Save File A, Reads Save File B, both using WRA5
 RO13:5C15 C5               push bc
 RO13:5C16 D5               push de
 RO13:5C17 E5               push hl
 RO13:5C18 F5               push af
 RO13:5C19 21 D4 38         ld   hl,38D4
 RO13:5C1C CD 93 3A         call 3A93           // HL = $A080 + A * $0200
 RO13:5C1F CD 93 05         call 0593           // ($0000) = 10
 RO13:5C22 3E 00            ld   a,00
 RO13:5C24 CD 8D 05         call 058D           // ($4000) = 0, ($FF81) = 0
 RO13:5C27 FA 2F C6         ld   a,(C62F)
 RO13:5C2A EA 8C C6         ld   (C68C),a       // ($C68C) = active game mode
 RO13:5C2D 11 7E C6         ld   de,C67E
 RO13:5C30 01 00 02         ld   bc,0200
 RO13:5C33 CD 50 3B         call 3B50           // SRA0($A080 ~ $A27F) = ($C67E ~ $C87D)
 RO13:5C36 F1               pop  af
 RO13:5C37 CD 61 5C         call 5C61           // SRA0($AA97) to SRA0($AA9E) holds Cleared Standard map flags
 RO13:5C3A CD 5D 5B         call 5B5D           // If A < 3, SRA0($A00D) and ($CC9B) are set to A
 RO13:5C3D CD CC 5C         call 5CCC           // If single player, res 0,SRA0($A00A), and SRA0($A00E) emptied
 RO13:5C40 4F               ld   c,a
 RO13:5C41 06 00            ld   b,00
 RO13:5C43 21 07 A0         ld   hl,A007
 RO13:5C46 09               add  hl,bc
 RO13:5C47 CB C6            set  0,(hl)         // set 0,SRA0($A007 + A)
 RO13:5C49 21 D4 38         ld   hl,38D4
 RO13:5C4C CD 93 3A         call 3A93           // HL = $A080 + A * $0200
 RO13:5C4F 3E 0C            ld   a,0C
 RO13:5C51 CD BC 29         call 29BC           // HL = $A08C + A * $0200
 RO13:5C54 FA 2F C6         ld   a,(C62F)
 RO13:5C57 CD DC 3A         call 3ADC           // res Active game mode,($A08C)
 RO13:5C5A CD 9B 05         call 059B           // ($0000) = 0
 RO13:5C5D E1               pop  hl
 RO13:5C5E D1               pop  de
 RO13:5C5F C1               pop  bc
 RO13:5C60 C9               ret                 // Writes Save Data of Save File A
 RO13:5C61 F5               push af
 RO13:5C62 C5               push bc
 RO13:5C63 D5               push de
 RO13:5C64 FE 03            cp   a,03
 RO13:5C66 30 0F            jr   nc,5C77        // Ends immediately if A >= 3
 RO13:5C68 11 95 C6         ld   de,C695
 RO13:5C6B 21 97 AA         ld   hl,AA97
 RO13:5C6E 0E 08            ld   c,08
 RO13:5C70 1A               ld   a,(de)         // Loop begins here
 RO13:5C71 13               inc  de
 RO13:5C72 B6               or   (hl)
 RO13:5C73 22               ldi  (hl),a         // ($AA97) to ($AA9E) holds Cleared Standard map flags
 RO13:5C74 0D               dec  c
 RO13:5C75 20 F9            jr   nz,5C70
 RO13:5C77 D1               pop  de
 RO13:5C78 C1               pop  bc
 RO13:5C79 F1               pop  af
 RO13:5C7A C9               ret                 // ($AA97) to ($AA9E) holds Cleared Standard map flags
 RO13:5C7B C5               push bc
 RO13:5C7C D5               push de
 RO13:5C7D E5               push hl
 RO13:5C7E F5               push af
 RO13:5C7F 21 D4 38         ld   hl,38D4
 RO13:5C82 CD 93 3A         call 3A93           // HL = $A080 + A * $0200
 RO13:5C85 54               ld   d,h
 RO13:5C86 5D               ld   e,l            // DE = $A080 + A * $0200
 RO13:5C87 CD 93 05         call 0593           // ($0000) = 10
 RO13:5C8A 3E 00            ld   a,00
 RO13:5C8C CD 8D 05         call 058D           // ($4000) = 0, ($FF81) = 0
 RO13:5C8F 21 7E C6         ld   hl,C67E
 RO13:5C92 01 00 02         ld   bc,0200
 RO13:5C95 CD 50 3B         call 3B50           // ($C67E ~ $C87D) = SRA0($A080 + A * $0200 ~ $A27F + A * $0200)
 RO13:5C98 F1               pop  af
 RO13:5C99 CD 5D 5B         call 5B5D           // If A < 3, SRA0($A00D) and ($CC9B) are set to A
 RO13:5C9C CD 9B 05         call 059B           // ($0000) = 0
 RO13:5C9F E1               pop  hl
 RO13:5CA0 D1               pop  de
 RO13:5CA1 C1               pop  bc
 RO13:5CA2 C9               ret                 // Load Save File A's data onto Current Save File data
 RO13:5CA3 C5               push bc
 RO13:5CA4 D5               push de
 RO13:5CA5 E5               push hl
 RO13:5CA6 FA 2F C6         ld   a,(C62F)
 RO13:5CA9 FE 03            cp   a,03
 RO13:5CAB 30 1B            jr   nc,5CC8        // End immediately if mode is not Beginner, Campaign, or Standard
 RO13:5CAD 3E 03            ld   a,03
 RO13:5CAF CD AD 5B         call 5BAD           // Updates Save Data of Interruption Save File, including Map Data unconditional
 RO13:5CB2 CD 93 05         call 0593           // ($0000) = 10
 RO13:5CB5 3E 00            ld   a,00
 RO13:5CB7 CD 8D 05         call 058D           // ($4000) = 0, ($FF81) = 0
 RO13:5CBA 3E 01            ld   a,01
 RO13:5CBC EA 0E A0         ld   (A00E),a       // Establish Interrupt Save
 RO13:5CBF FA 9B CC         ld   a,(CC9B)
 RO13:5CC2 EA 11 A0         ld   (A011),a
 RO13:5CC5 CD 9B 05         call 059B           // ($0000) = 0
 RO13:5CC8 E1               pop  hl
 RO13:5CC9 D1               pop  de
 RO13:5CCA C1               pop  bc
 RO13:5CCB C9               ret  
 RO13:5CCC F5               push af
 RO13:5CCD FA 2F C6         ld   a,(C62F)       // A = active game mode
 RO13:5CD0 FE 03            cp   a,03
 RO13:5CD2 30 0E            jr   nc,5CE2        // Ends immediately if not Beginner, Campaign, or Standard
 RO13:5CD4 AF               xor  a
 RO13:5CD5 EA 0E A0         ld   (A00E),a       // ($A00E) emptied
 RO13:5CD8 0E 03            ld   c,03
 RO13:5CDA 06 00            ld   b,00
 RO13:5CDC 21 07 A0         ld   hl,A007
 RO13:5CDF 09               add  hl,bc
 RO13:5CE0 CB 86            res  0,(hl)
 RO13:5CE2 F1               pop  af
 RO13:5CE3 C9               ret                 // res 0,($A00A); ($A00E) emptied
 RO13:5CE4 3E 03            ld   a,03
 RO13:5CE6 CD 7B 5C         call 5C7B           // Load Save File A's data onto Current Save File data
 RO13:5CE9 CD 93 05         call 0593           // ($0000) = 10
 RO13:5CEC 3E 00            ld   a,00
 RO13:5CEE CD 8D 05         call 058D           // ($4000) = 0, ($FF81) = 0
 RO13:5CF1 FA 11 A0         ld   a,(A011)       // Interrupt Save's File #
 RO13:5CF4 EA 9B CC         ld   (CC9B),a
 RO13:5CF7 FA 8E A6         ld   a,(A68E)
 RO13:5CFA CD 9B 05         call 059B           // ($0000) = 0
 RO13:5CFD C9               ret                 // Load Interrupt Save's data; A = Active Game Mode
 RO13:5CFE C5               push bc
 RO13:5CFF D5               push de
 RO13:5D00 E5               push hl
 RO13:5D01 47               ld   b,a
 RO13:5D02 C5               push bc
 RO13:5D03 CD 93 05         call 0593           // ($0000) = 10
 RO13:5D06 78               ld   a,b
 RO13:5D07 87               add  a
 RO13:5D08 21 1C 39         ld   hl,391C
 RO13:5D0B CD BC 29         call 29BC           // HL += A
 RO13:5D0E 2A               ldi  a,(hl)
 RO13:5D0F CD 8D 05         call 058D           // ($4000) = 7 + A/2, ($FF81) = 7 + A/2
 RO13:5D12 66               ld   h,(hl)
 RO13:5D13 2E 00            ld   l,00
 RO13:5D15 E5               push hl
 RO13:5D16 CD BF 5F         call 5FBF           // $A000/$B000 holds map information in first 46 bytes, then compacts map terrain data into bytes equal to the map's total tiles
 RO13:5D19 CD FD 5F         call 5FFD           // HL holds coordinates and then Unit Type of each unit in 3 times as many bytes as units
 RO13:5D1C 3E FF            ld   a,FF
 RO13:5D1E 22               ldi  (hl),a
 RO13:5D1F D1               pop  de
 RO13:5D20 CD 39 60         call 6039           // DE's 3rd and 4th bytes holds number of relevant bytes in reverse; and then the 5th byte holds the sum of all values of the relevant bytes, quantity modulo 256, for checksum
 RO13:5D23 C1               pop  bc
 RO13:5D24 3E 00            ld   a,00
 RO13:5D26 CD 8D 05         call 058D           // ($4000) = 0, ($FF81) = 0
 RO13:5D29 78               ld   a,b
 RO13:5D2A 21 0F A0         ld   hl,A00F
 RO13:5D2D CD D1 3A         call 3AD1           // SRA0($A00F + A/8) = SRA0($A00F + A/8) OR 2^A%8
 RO13:5D30 CD 9B 05         call 059B           // ($0000) = 0
 RO13:5D33 E1               pop  hl
 RO13:5D34 D1               pop  de
 RO13:5D35 C1               pop  bc
 RO13:5D36 C9               ret                 // Hardwrites saved Custom Map data
 RO13:5D37 C5               push bc
 RO13:5D38 D5               push de
 RO13:5D39 E5               push hl
 RO13:5D3A 87               add  a
 RO13:5D3B 21 1C 39         ld   hl,391C
 RO13:5D3E CD BC 29         call 29BC           // HL += A
 RO13:5D41 2A               ldi  a,(hl)
 RO13:5D42 EA 7E C8         ld   (C87E),a
 RO13:5D45 2A               ldi  a,(hl)
 RO13:5D46 EA 80 C8         ld   (C880),a
 RO13:5D49 AF               xor  a
 RO13:5D4A EA 7F C8         ld   (C87F),a
 RO13:5D4D CD 61 61         call 6161           // Active map data set up in WRAM banks 1 and 2
 RO13:5D50 E1               pop  hl
 RO13:5D51 D1               pop  de
 RO13:5D52 C1               pop  bc
 RO13:5D53 C9               ret                 // Custom Map A data set up in WRAM Banks 1 and 2
 RO13:5D54 C5               push bc
 RO13:5D55 06 00            ld   b,00
 RO13:5D57 CD 93 05         call 0593           // ($0000) = 10 (Loop begins here)
 RO13:5D5A 3E 00            ld   a,00
 RO13:5D5C CD 8D 05         call 058D           // ($4000) = 0, ($FF81) = 0
 RO13:5D5F 78               ld   a,b
 RO13:5D60 21 0F A0         ld   hl,A00F
 RO13:5D63 CD C7 3A         call 3AC7           // A = AND (HL + A/8), 2^A%8
 RO13:5D66 CD 9B 05         call 059B           // ($0000) = 0
 RO13:5D69 28 1F            jr   z,5D8A
 RO13:5D6B 78               ld   a,b
 RO13:5D6C CD 92 5D         call 5D92
 RO13:5D6F 28 19            jr   z,5D8A
 RO13:5D71 CD 93 05         call 0593           // ($0000) = 10
 RO13:5D74 3E 00            ld   a,00
 RO13:5D76 CD 8D 05         call 058D           // ($4000) = 0, ($FF81) = 0
 RO13:5D79 78               ld   a,b
 RO13:5D7A 21 0F A0         ld   hl,A00F
 RO13:5D7D CD DC 3A         call 3ADC           // res B,($A00F)
 RO13:5D80 CD 9B 05         call 059B           // ($0000) = 0
 RO13:5D83 78               ld   a,b
 RO13:5D84 C6 07            add  a,07
 RO13:5D86 EF 14 50 4B                          // Manages display of text window with "Edit Map # was erased."
 RO13:5D8A 04               inc  b
 RO13:5D8B 78               ld   a,b
 RO13:5D8C FE 0A            cp   a,0A
 RO13:5D8E 20 C7            jr   nz,5D57
 RO13:5D90 C1               pop  bc
 RO13:5D91 C9               ret  
 RO13:5D92 C5               push bc
 RO13:5D93 D5               push de
 RO13:5D94 E5               push hl
 RO13:5D95 87               add  a
 RO13:5D96 21 1C 39         ld   hl,391C
 RO13:5D99 CD BC 29         call 29BC           // HL = $391C + 2A
 RO13:5D9C CD 93 05         call 0593           // ($0000) = 10
 RO13:5D9F 2A               ldi  a,(hl)         // A = 7 + A/2
 RO13:5DA0 CD 8D 05         call 058D           // ($4000) = 7 + A/2, ($FF81) = 7 + A/2
 RO13:5DA3 56               ld   d,(hl)
 RO13:5DA4 1E 00            ld   e,00           // DE = $A000/$B000
 RO13:5DA6 D5               push de
 RO13:5DA7 21 02 00         ld   hl,0002
 RO13:5DAA 19               add  hl,de
 RO13:5DAB 4E               ld   c,(hl)
 RO13:5DAC 23               inc  hl
 RO13:5DAD 46               ld   b,(hl)
 RO13:5DAE E1               pop  hl
 RO13:5DAF E5               push hl
 RO13:5DB0 11 20 00         ld   de,0020
 RO13:5DB3 19               add  hl,de
 RO13:5DB4 16 00            ld   d,00
 RO13:5DB6 2A               ldi  a,(hl)         // Loop begins here
 RO13:5DB7 82               add  d
 RO13:5DB8 57               ld   d,a
 RO13:5DB9 0B               dec  bc
 RO13:5DBA 78               ld   a,b
 RO13:5DBB B1               or   c
 RO13:5DBC 20 F8            jr   nz,5DB6
 RO13:5DBE E1               pop  hl
 RO13:5DBF 7A               ld   a,d
 RO13:5DC0 01 04 00         ld   bc,0004
 RO13:5DC3 09               add  hl,bc
 RO13:5DC4 BE               cp   (hl)
 RO13:5DC5 CD 9B 05         call 059B           // ($0000) = 0
 RO13:5DC8 E1               pop  hl
 RO13:5DC9 D1               pop  de
 RO13:5DCA C1               pop  bc
 RO13:5DCB C9               ret  
 RO13:5DCC F5               push af
 RO13:5DCD 87               add  a
 RO13:5DCE 21 1C 39         ld   hl,391C
 RO13:5DD1 CD BC 29         call 29BC           // HL = $391C + A * 2
 RO13:5DD4 CD 93 05         call 0593           // ($0000) = 10
 RO13:5DD7 2A               ldi  a,(hl)         // A = 7 + A/2
 RO13:5DD8 CD 8D 05         call 058D           // ($4000) = 7 + A/2, ($FF81) = 7 + A/2
 RO13:5DDB EA 1A CA         ld   (CA1A),a       // ($CA1A) = 7 + A/2
 RO13:5DDE AF               xor  a
 RO13:5DDF EA 1B CA         ld   (CA1B),a
 RO13:5DE2 5F               ld   e,a
 RO13:5DE3 2A               ldi  a,(hl)
 RO13:5DE4 EA 1C CA         ld   (CA1C),a       // ($CA1C) = 160 + 16 * A%2
 RO13:5DE7 57               ld   d,a
 RO13:5DE8 21 21 CA         ld   hl,CA21
 RO13:5DEB 01 20 00         ld   bc,0020
 RO13:5DEE CD 50 3B         call 3B50           // Loads map general info into SRAx($A000/$B000 ~ $A01F/$B01F)
 RO13:5DF1 21 41 CA         ld   hl,CA41
 RO13:5DF4 01 08 00         ld   bc,0008
 RO13:5DF7 CD 50 3B         call 3B50           // Loads map name into SRAx($A020/$B020 ~ $A027/$B027)
 RO13:5DFA 21 49 CA         ld   hl,CA49
 RO13:5DFD 01 06 00         ld   bc,0006
 RO13:5E00 CD 50 3B         call 3B50           // Loads map stats into SRAx($A028/$B028 ~ $A02D/$B02D)
 RO13:5E03 3E 00            ld   a,00
 RO13:5E05 CD 8D 05         call 058D           // ($4000) = 0, ($FF81) = 0
 RO13:5E08 F1               pop  af
 RO13:5E09 21 0F A0         ld   hl,A00F
 RO13:5E0C CD C7 3A         call 3AC7           // A = AND SRA0($A00F + A/8), 2^A%8
 RO13:5E0F 28 05            jr   z,5E16
 RO13:5E11 AF               xor  a
 RO13:5E12 CB CF            set  1,a
 RO13:5E14 18 01            jr   5E17
 RO13:5E16 AF               xor  a              // A = 2 * nz(bit A,SRA0($A00F))
 RO13:5E17 EA 1D CA         ld   (CA1D),a       // ($CA1D) = 2 * nz(bit A,SRA0($A00F))
 RO13:5E1A CD 9B 05         call 059B           // ($0000) = 0
 RO13:5E1D C9               ret                 // Establishes map basic logistics, also triggers custom map exists flag if given custom map is used
 RO13:5E1E C5               push bc
 RO13:5E1F D5               push de
 RO13:5E20 E5               push hl
 RO13:5E21 F0 82            ld   a,(ff00+82)
 RO13:5E23 F5               push af
 RO13:5E24 3E 05            ld   a,05
 RO13:5E26 E0 82            ld   (ff00+82),a
 RO13:5E28 E0 70            ld   (ff00+70),a
 RO13:5E2A 78               ld   a,b
 RO13:5E2B 06 05            ld   b,05
 RO13:5E2D CD 55 5E         call 5E55           // WRA5($D000~DFFF) holds Custom Map A's full data
 RO13:5E30 79               ld   a,c
 RO13:5E31 06 05            ld   b,05
 RO13:5E33 CD 83 5E         call 5E83           // Saves Custom Map A's full data with WRA5($D000~DFFF)
 RO13:5E36 F1               pop  af
 RO13:5E37 E0 82            ld   (ff00+82),a
 RO13:5E39 E0 70            ld   (ff00+70),a
 RO13:5E3B E1               pop  hl
 RO13:5E3C D1               pop  de
 RO13:5E3D C1               pop  bc
 RO13:5E3E C9               ret  
 RO13:5E3F C5               push bc
 RO13:5E40 47               ld   b,a
 RO13:5E41 CD 93 05         call 0593           // ($0000) = 10
 RO13:5E44 3E 00            ld   a,00
 RO13:5E46 CD 8D 05         call 058D           // ($4000) = 0, ($FF81) = 0
 RO13:5E49 21 0F A0         ld   hl,A00F
 RO13:5E4C 78               ld   a,b
 RO13:5E4D CD DC 3A         call 3ADC           // res A,SRA0($A00F)
 RO13:5E50 CD 9B 05         call 059B           // ($0000) = 0
 RO13:5E53 C1               pop  bc
 RO13:5E54 C9               ret  
 RO13:5E55 C5               push bc
 RO13:5E56 D5               push de
 RO13:5E57 4F               ld   c,a
 RO13:5E58 F0 82            ld   a,(ff00+82)
 RO13:5E5A F5               push af
 RO13:5E5B CD 93 05         call 0593           // ($0000) = 10
 RO13:5E5E 78               ld   a,b
 RO13:5E5F E0 82            ld   (ff00+82),a
 RO13:5E61 E0 70            ld   (ff00+70),a
 RO13:5E63 79               ld   a,c
 RO13:5E64 87               add  a
 RO13:5E65 21 1C 39         ld   hl,391C
 RO13:5E68 CD BC 29         call 29BC           // HL = $391C + A * 2
 RO13:5E6B 2A               ldi  a,(hl)
 RO13:5E6C CD 8D 05         call 058D           // ($4000) = 7 + A/2, ($FF81) = 7 + A/2
 RO13:5E6F 56               ld   d,(hl)
 RO13:5E70 1E 00            ld   e,00
 RO13:5E72 21 00 D0         ld   hl,D000
 RO13:5E75 01 00 10         ld   bc,1000
 RO13:5E78 CD 50 3B         call 3B50           // ($D000 ~ $DFFF) = (DE ~ DE+BC-1)
 RO13:5E7B F1               pop  af
 RO13:5E7C E0 82            ld   (ff00+82),a
 RO13:5E7E E0 70            ld   (ff00+70),a
 RO13:5E80 D1               pop  de
 RO13:5E81 C1               pop  bc
 RO13:5E82 C9               ret  
 RO13:5E83 C5               push bc
 RO13:5E84 D5               push de
 RO13:5E85 4F               ld   c,a
 RO13:5E86 F0 82            ld   a,(ff00+82)
 RO13:5E88 F5               push af
 RO13:5E89 CD 93 05         call 0593           // ($0000) = 10
 RO13:5E8C 78               ld   a,b
 RO13:5E8D E0 82            ld   (ff00+82),a
 RO13:5E8F E0 70            ld   (ff00+70),a
 RO13:5E91 C5               push bc
 RO13:5E92 79               ld   a,c
 RO13:5E93 87               add  a
 RO13:5E94 21 1C 39         ld   hl,391C
 RO13:5E97 CD BC 29         call 29BC           // HL += A
 RO13:5E9A 2A               ldi  a,(hl)
 RO13:5E9B CD 8D 05         call 058D           // ($4000) = 7 + A/2, ($FF81) = 7 + A/2
 RO13:5E9E 66               ld   h,(hl)
 RO13:5E9F 2E 00            ld   l,00
 RO13:5EA1 11 00 D0         ld   de,D000
 RO13:5EA4 01 00 10         ld   bc,1000
 RO13:5EA7 CD 50 3B         call 3B50           // (HL ~ HL+BC-1) = ($D000 ~ $DFFF)
 RO13:5EAA C1               pop  bc
 RO13:5EAB 3E 00            ld   a,00
 RO13:5EAD CD 8D 05         call 058D           // ($4000) = 0, ($FF81) = 0
 RO13:5EB0 21 0F A0         ld   hl,A00F
 RO13:5EB3 79               ld   a,c
 RO13:5EB4 CD D1 3A         call 3AD1           // (HL + A/8) = (HL + A/8) OR 2^A%8
 RO13:5EB7 CD 9B 05         call 059B           // ($0000) = 0
 RO13:5EBA F1               pop  af
 RO13:5EBB E0 82            ld   (ff00+82),a
 RO13:5EBD E0 70            ld   (ff00+70),a
 RO13:5EBF D1               pop  de
 RO13:5EC0 C1               pop  bc
 RO13:5EC1 C9               ret  
 RO13:5EC2 47               ld   b,a
 RO13:5EC3 3E 00            ld   a,00
 RO13:5EC5 CD 8D 05         call 058D           // ($4000) = 0, ($FF81) = 0
 RO13:5EC8 CD 93 05         call 0593           // ($0000) = 10
 RO13:5ECB 78               ld   a,b
 RO13:5ECC 21 D4 38         ld   hl,38D4
 RO13:5ECF CD 93 3A         call 3A93           // HL = $A080 + A * $0200
 RO13:5ED2 3E 0C            ld   a,0C
 RO13:5ED4 CD BC 29         call 29BC           // HL = $A08C + A * $0200
 RO13:5ED7 FA 2F C6         ld   a,(C62F)
 RO13:5EDA CD D1 3A         call 3AD1           // SRA0($A080 + A * $0200) = SRA0($A080 + A * $0200) OR 2^($C62F)%8
 RO13:5EDD 78               ld   a,b
 RO13:5EDE CD 2D 5B         call 5B2D           // HL = $38E0 + A * 10 + Active Game Mode * 2
 RO13:5EE1 2A               ldi  a,(hl)
 RO13:5EE2 CD 8D 05         call 058D           // ($4000) = A, ($FF81) = A
 RO13:5EE5 66               ld   h,(hl)
 RO13:5EE6 2E 00            ld   l,00
 RO13:5EE8 E5               push hl
 RO13:5EE9 FA 8B C9         ld   a,(C98B)
 RO13:5EEC 22               ldi  (hl),a         // 0: Columns to left of view
 RO13:5EED FA 8C C9         ld   a,(C98C)
 RO13:5EF0 22               ldi  (hl),a         // 1: Rows above view
 RO13:5EF1 FA 8F C9         ld   a,(C98F)
 RO13:5EF4 22               ldi  (hl),a         // 2: Cursor X within view coordinates
 RO13:5EF5 FA 90 C9         ld   a,(C990)
 RO13:5EF8 22               ldi  (hl),a         // 3: Cursor Y within view coordinates
 RO13:5EF9 FA 33 C6         ld   a,(C633)
 RO13:5EFC 22               ldi  (hl),a         // 4: Current Phase #
 RO13:5EFD FA 34 C6         ld   a,(C634)
 RO13:5F00 22               ldi  (hl),a         // 5: Red Star Gold byte 1
 RO13:5F01 FA 35 C6         ld   a,(C635)
 RO13:5F04 22               ldi  (hl),a         // 6: Red Star Gold byte 2
 RO13:5F05 FA 36 C6         ld   a,(C636)
 RO13:5F08 22               ldi  (hl),a         // 7: Red Star Gold byte 3
 RO13:5F09 FA 37 C6         ld   a,(C637)
 RO13:5F0C 22               ldi  (hl),a         // 8: White Moon Gold byte 1
 RO13:5F0D FA 38 C6         ld   a,(C638)
 RO13:5F10 22               ldi  (hl),a         // 9: White Moon Gold byte 2
 RO13:5F11 FA 39 C6         ld   a,(C639)
 RO13:5F14 22               ldi  (hl),a         // 10: White Moon Gold byte 3
 RO13:5F15 FA 3A C6         ld   a,(C63A)
 RO13:5F18 22               ldi  (hl),a         // 11: Red Star Materials byte 1
 RO13:5F19 FA 3B C6         ld   a,(C63B)
 RO13:5F1C 22               ldi  (hl),a         // 12: Red Star Materials byte 2
 RO13:5F1D FA 3C C6         ld   a,(C63C)
 RO13:5F20 22               ldi  (hl),a         // 13: White Moon Materials byte 1
 RO13:5F21 FA 3D C6         ld   a,(C63D)
 RO13:5F24 22               ldi  (hl),a         // 14: White Moon Materials byte 1
 RO13:5F25 CD 62 5F         call 5F62           // ($A00F/$B00F) 1000 byte holds unit stats (HP and Load Count together, Ammo Counts together, unused stats not stored)
 RO13:5F28 CD A7 5F         call 5FA7           // ($A3F7/$B3F7) 301 byte holds current property info
 RO13:5F2B E5               push hl
 RO13:5F2C CD BF 5F         call 5FBF           // ($A524/$B524) holds map information in first 46 bytes, then compacts map terrain data into bytes equal to the map's total tiles
 RO13:5F2F 3E FF            ld   a,FF
 RO13:5F31 22               ldi  (hl),a
 RO13:5F32 D1               pop  de             // DE = $A524/$B524
 RO13:5F33 CD 39 60         call 6039           // ($A526/$B526) 2 byte holds number of map data bytes in reverse; and then ($A528/$B528) holds the sum of all values of the map tiles, quantity modulo 256, for map data checksum
 RO13:5F36 E1               pop  hl
 RO13:5F37 E5               push hl
 RO13:5F38 CD 93 05         call 0593           // ($0000) = 10
 RO13:5F3B 11 1A 0F         ld   de,0F1A        // Saving can't handle any map bigger than 50x50
 RO13:5F3E 19               add  hl,de          // HL = $AF1A/$BF1A
 RO13:5F3F 11 B3 C8         ld   de,C8B3
 RO13:5F42 01 08 00         ld   bc,0008
 RO13:5F45 CD 50 3B         call 3B50           // ($AF1A/$BF1A) 8 byte holds Built/Lost counts
 RO13:5F48 E1               pop  hl
 RO13:5F49 11 18 0F         ld   de,0F18
 RO13:5F4C 19               add  hl,de
 RO13:5F4D FA 2F C6         ld   a,(C62F)
 RO13:5F50 22               ldi  (hl),a         // ($AF18/$BF18) holds active game mode
 RO13:5F51 FA 83 C8         ld   a,(C883)
 RO13:5F54 22               ldi  (hl),a         // ($AF19/$BF19) holds Map #
 RO13:5F55 7C               ld   a,h
 RO13:5F56 E6 F0            and  a,F0
 RO13:5F58 67               ld   h,a
 RO13:5F59 2E 00            ld   l,00
 RO13:5F5B CD 1B 62         call 621B           // SRAM block ends with RAM checksum
 RO13:5F5E CD 9B 05         call 059B           // ($0000) = 0
 RO13:5F61 C9               ret                 // SRAM half-block based on File indicated by A holds temporary map data
 RO13:5F62 F0 82            ld   a,(ff00+82)
 RO13:5F64 F5               push af
 RO13:5F65 3E 03            ld   a,03
 RO13:5F67 E0 82            ld   (ff00+82),a
 RO13:5F69 E0 70            ld   (ff00+70),a
 RO13:5F6B 11 00 D0         ld   de,D000
 RO13:5F6E 0E 64            ld   c,64
 RO13:5F70 1A               ld   a,(de)         // Loop begins here
 RO13:5F71 22               ldi  (hl),a         // Stores Unit Type
 RO13:5F72 13               inc  de             // 1: X Coordinate
 RO13:5F73 1A               ld   a,(de)
 RO13:5F74 22               ldi  (hl),a         // Stores X Coordinate
 RO13:5F75 13               inc  de             // 2: Y Coordinate
 RO13:5F76 1A               ld   a,(de)
 RO13:5F77 22               ldi  (hl),a         // Stores Y Coordinate
 RO13:5F78 13               inc  de             // 3: Status
 RO13:5F79 1A               ld   a,(de)
 RO13:5F7A 22               ldi  (hl),a         // Stores Status
 RO13:5F7B 13               inc  de             // 4: HP
 RO13:5F7C 1A               ld   a,(de)
 RO13:5F7D CB 37            swap a
 RO13:5F7F 47               ld   b,a
 RO13:5F80 13               inc  de             // 5: Load Count
 RO13:5F81 1A               ld   a,(de)
 RO13:5F82 B0               or   b
 RO13:5F83 22               ldi  (hl),a         // Stores HP and Load Count together
 RO13:5F84 13               inc  de             // 6: Parent Transport's #
 RO13:5F85 1A               ld   a,(de)
 RO13:5F86 22               ldi  (hl),a         // Stores Parent Transport's #
 RO13:5F87 13               inc  de             // 7: Fuel
 RO13:5F88 1A               ld   a,(de)
 RO13:5F89 22               ldi  (hl),a         // Stores Fuel
 RO13:5F8A 13               inc  de             // 8: Ammo for Weapon 1
 RO13:5F8B 1A               ld   a,(de)
 RO13:5F8C CB 37            swap a
 RO13:5F8E 47               ld   b,a
 RO13:5F8F 13               inc  de             // 9: Ammo for Weapon 2
 RO13:5F90 1A               ld   a,(de)
 RO13:5F91 B0               or   b
 RO13:5F92 22               ldi  (hl),a         // Stores both Ammo counts together
 RO13:5F93 13               inc  de             // A: EXP % 256
 RO13:5F94 1A               ld   a,(de)
 RO13:5F95 22               ldi  (hl),a         // Stores EXP % 256
 RO13:5F96 13               inc  de             // B: EXP / 256
 RO13:5F97 1A               ld   a,(de)
 RO13:5F98 22               ldi  (hl),a         // Stores EXP / 256
 RO13:5F99 13               inc  de             // C
 RO13:5F9A 13               inc  de             // D
 RO13:5F9B 13               inc  de             // E
 RO13:5F9C 13               inc  de             // F
 RO13:5F9D 13               inc  de             // 0: Next Unit's Unit Type
 RO13:5F9E 0D               dec  c
 RO13:5F9F 20 CF            jr   nz,5F70
 RO13:5FA1 F1               pop  af
 RO13:5FA2 E0 82            ld   (ff00+82),a
 RO13:5FA4 E0 70            ld   (ff00+70),a
 RO13:5FA6 C9               ret                 // HL 1000 byte holds unit stats (HP and Load Count together, Ammo Counts together, unused stats not stored)
 RO13:5FA7 F0 82            ld   a,(ff00+82)
 RO13:5FA9 F5               push af
 RO13:5FAA 3E 01            ld   a,01
 RO13:5FAC E0 82            ld   (ff00+82),a
 RO13:5FAE E0 70            ld   (ff00+70),a
 RO13:5FB0 11 80 DD         ld   de,DD80
 RO13:5FB3 01 2D 01         ld   bc,012D
 RO13:5FB6 CD 50 3B         call 3B50           // (HL ~ HL+BC-1) = (DE ~ DE+BC-1)
 RO13:5FB9 F1               pop  af
 RO13:5FBA E0 82            ld   (ff00+82),a
 RO13:5FBC E0 70            ld   (ff00+70),a
 RO13:5FBE C9               ret                 // HL 301 byte holds current property info
 RO13:5FBF C5               push bc
 RO13:5FC0 D5               push de
 RO13:5FC1 F0 82            ld   a,(ff00+82)
 RO13:5FC3 F5               push af
 RO13:5FC4 3E 01            ld   a,01
 RO13:5FC6 E0 82            ld   (ff00+82),a
 RO13:5FC8 E0 70            ld   (ff00+70),a
 RO13:5FCA 11 85 C8         ld   de,C885
 RO13:5FCD 01 2E 00         ld   bc,002E
 RO13:5FD0 CD 50 3B         call 3B50           // HL 46 byte holds map information
 RO13:5FD3 11 00 D0         ld   de,D000
 RO13:5FD6 0E 00            ld   c,00
 RO13:5FD8 06 00            ld   b,00           // Loop for new row begins here
 RO13:5FDA D5               push de
 RO13:5FDB 1A               ld   a,(de)         // Loop begins here
 RO13:5FDC 22               ldi  (hl),a
 RO13:5FDD 13               inc  de
 RO13:5FDE 04               inc  b
 RO13:5FDF FA B1 C8         ld   a,(C8B1)
 RO13:5FE2 B8               cp   b
 RO13:5FE3 20 F6            jr   nz,5FDB        // Current row loop
 RO13:5FE5 D1               pop  de
 RO13:5FE6 7B               ld   a,e
 RO13:5FE7 C6 40            add  a,40
 RO13:5FE9 5F               ld   e,a
 RO13:5FEA 7A               ld   a,d
 RO13:5FEB CE 00            adc  a,00
 RO13:5FED 57               ld   d,a
 RO13:5FEE 0C               inc  c
 RO13:5FEF FA B2 C8         ld   a,(C8B2)
 RO13:5FF2 B9               cp   c
 RO13:5FF3 20 E3            jr   nz,5FD8
 RO13:5FF5 F1               pop  af
 RO13:5FF6 E0 82            ld   (ff00+82),a
 RO13:5FF8 E0 70            ld   (ff00+70),a
 RO13:5FFA D1               pop  de
 RO13:5FFB C1               pop  bc
 RO13:5FFC C9               ret                 // HL holds map information in first 46 bytes, and then compacts map terrain data into bytes equal to the map's total tiles
 RO13:5FFD C5               push bc
 RO13:5FFE D5               push de
 RO13:5FFF F0 82            ld   a,(ff00+82)
 RO13:6001 F5               push af
 RO13:6002 3E 02            ld   a,02
 RO13:6004 E0 82            ld   (ff00+82),a
 RO13:6006 E0 70            ld   (ff00+70),a
 RO13:6008 11 00 D0         ld   de,D000
 RO13:600B 0E 00            ld   c,00
 RO13:600D 06 00            ld   b,00           // Loop for new row begins here
 RO13:600F D5               push de
 RO13:6010 1A               ld   a,(de)         // Loop begins here
 RO13:6011 A7               and  a
 RO13:6012 28 05            jr   z,6019         // End cycle if no units are on tile
 RO13:6014 70               ld   (hl),b
 RO13:6015 23               inc  hl
 RO13:6016 71               ld   (hl),c
 RO13:6017 23               inc  hl
 RO13:6018 22               ldi  (hl),a         // Records coordinates and then unit type
 RO13:6019 04               inc  b
 RO13:601A 13               inc  de
 RO13:601B FA B1 C8         ld   a,(C8B1)
 RO13:601E B8               cp   b
 RO13:601F 20 EF            jr   nz,6010
 RO13:6021 D1               pop  de
 RO13:6022 7B               ld   a,e
 RO13:6023 C6 40            add  a,40
 RO13:6025 5F               ld   e,a
 RO13:6026 7A               ld   a,d
 RO13:6027 CE 00            adc  a,00
 RO13:6029 57               ld   d,a
 RO13:602A 0C               inc  c
 RO13:602B FA B2 C8         ld   a,(C8B2)
 RO13:602E B9               cp   c
 RO13:602F 20 DC            jr   nz,600D
 RO13:6031 F1               pop  af
 RO13:6032 E0 82            ld   (ff00+82),a
 RO13:6034 E0 70            ld   (ff00+70),a
 RO13:6036 D1               pop  de
 RO13:6037 C1               pop  bc
 RO13:6038 C9               ret                 // HL holds coordinates and then Unit Type of each unit in 3 times as many bytes as units
 RO13:6039 C5               push bc
 RO13:603A D5               push de
 RO13:603B E5               push hl
 RO13:603C D5               push de
 RO13:603D CD C3 29         call 29C3           // HL -= DE
 RO13:6040 11 20 00         ld   de,0020
 RO13:6043 CD C3 29         call 29C3           // HL = HL - DE - 32
 RO13:6046 D1               pop  de             // DE = DE
 RO13:6047 D5               push de
 RO13:6048 E5               push hl
 RO13:6049 44               ld   b,h
 RO13:604A 4D               ld   c,l            // BC = HL - DE - 32
 RO13:604B 21 20 00         ld   hl,0020
 RO13:604E 19               add  hl,de          // HL = DE + 32
 RO13:604F AF               xor  a
 RO13:6050 EA 88 CC         ld   (CC88),a
 RO13:6053 FA 88 CC         ld   a,(CC88)       // Loop begins here
 RO13:6056 86               add  (hl)
 RO13:6057 EA 88 CC         ld   (CC88),a
 RO13:605A 23               inc  hl
 RO13:605B 0B               dec  bc
 RO13:605C 78               ld   a,b
 RO13:605D B1               or   c
 RO13:605E 20 F3            jr   nz,6053
 RO13:6060 E1               pop  hl             // HL = HL - DE - 32
 RO13:6061 D1               pop  de             // DE = DE
 RO13:6062 13               inc  de
 RO13:6063 13               inc  de
 RO13:6064 7D               ld   a,l
 RO13:6065 12               ld   (de),a
 RO13:6066 13               inc  de
 RO13:6067 7C               ld   a,h
 RO13:6068 12               ld   (de),a
 RO13:6069 13               inc  de
 RO13:606A FA 88 CC         ld   a,(CC88)       // Map Checksum
 RO13:606D 12               ld   (de),a
 RO13:606E E1               pop  hl
 RO13:606F D1               pop  de
 RO13:6070 C1               pop  bc
 RO13:6071 C9               ret                 // DE's 3rd and 4th bytes holds number of relevant bytes in reverse; and then the 5th byte holds the sum of all values of the relevant bytes, quantity modulo 256, for checksum
 RO13:6072 CD 2D 5B         call 5B2D           // HL = $38E0 + A * 10 + Active Game Mode * 2
 RO13:6075 2A               ldi  a,(hl)
 RO13:6076 CD 8D 05         call 058D           // ($4000) = A, ($FF81) = A
 RO13:6079 EA 7E C8         ld   (C87E),a
 RO13:607C 66               ld   h,(hl)
 RO13:607D 2E 00            ld   l,00
 RO13:607F E5               push hl
 RO13:6080 01 24 05         ld   bc,0524
 RO13:6083 09               add  hl,bc
 RO13:6084 7D               ld   a,l
 RO13:6085 EA 7F C8         ld   (C87F),a
 RO13:6088 7C               ld   a,h
 RO13:6089 EA 80 C8         ld   (C880),a       // Map data location pointer established with saved data
 RO13:608C E1               pop  hl
 RO13:608D CD 93 05         call 0593           // ($0000) = 10
 RO13:6090 E5               push hl
 RO13:6091 2A               ldi  a,(hl)
 RO13:6092 EA 8B C9         ld   (C98B),a
 RO13:6095 2A               ldi  a,(hl)
 RO13:6096 EA 8C C9         ld   (C98C),a       // Camera area location reestablished
 RO13:6099 2A               ldi  a,(hl)
 RO13:609A EA 8F C9         ld   (C98F),a
 RO13:609D 2A               ldi  a,(hl)
 RO13:609E EA 90 C9         ld   (C990),a       // Cursor location reestablished
 RO13:60A1 2A               ldi  a,(hl)
 RO13:60A2 EA 33 C6         ld   (C633),a       // Phase number reestablished
 RO13:60A5 2A               ldi  a,(hl)
 RO13:60A6 EA 34 C6         ld   (C634),a
 RO13:60A9 2A               ldi  a,(hl)
 RO13:60AA EA 35 C6         ld   (C635),a
 RO13:60AD 2A               ldi  a,(hl)
 RO13:60AE EA 36 C6         ld   (C636),a
 RO13:60B1 2A               ldi  a,(hl)
 RO13:60B2 EA 37 C6         ld   (C637),a
 RO13:60B5 2A               ldi  a,(hl)
 RO13:60B6 EA 38 C6         ld   (C638),a
 RO13:60B9 2A               ldi  a,(hl)
 RO13:60BA EA 39 C6         ld   (C639),a
 RO13:60BD 2A               ldi  a,(hl)
 RO13:60BE EA 3A C6         ld   (C63A),a
 RO13:60C1 2A               ldi  a,(hl)
 RO13:60C2 EA 3B C6         ld   (C63B),a
 RO13:60C5 2A               ldi  a,(hl)
 RO13:60C6 EA 3C C6         ld   (C63C),a
 RO13:60C9 2A               ldi  a,(hl)
 RO13:60CA EA 3D C6         ld   (C63D),a       // Current resources reestablished (currently on $A00F/$B00F)
 RO13:60CD CD F8 60         call 60F8           // Reestablishes units' stats for save loading (uses 1000/$3E8 bytes)
 RO13:60D0 CD 45 61         call 6145           // Reestablishes properties' stats for save loading
 RO13:60D3 CD 61 61         call 6161           // Active map data set up in WRAM banks 1 and 2
 RO13:60D6 E1               pop  hl
 RO13:60D7 E5               push hl
 RO13:60D8 CD 93 05         call 0593           // ($0000) = 10
 RO13:60DB 11 1A 0F         ld   de,0F1A
 RO13:60DE 19               add  hl,de
 RO13:60DF 54               ld   d,h
 RO13:60E0 5D               ld   e,l
 RO13:60E1 21 B3 C8         ld   hl,C8B3
 RO13:60E4 01 08 00         ld   bc,0008
 RO13:60E7 CD 50 3B         call 3B50           // Built/Lost counts reestablished
 RO13:60EA E1               pop  hl
 RO13:60EB 11 18 0F         ld   de,0F18
 RO13:60EE 19               add  hl,de
 RO13:60EF 2A               ldi  a,(hl)
 RO13:60F0 2A               ldi  a,(hl)
 RO13:60F1 EA 83 C8         ld   (C883),a       // Map # reestablished
 RO13:60F4 CD 9B 05         call 059B           // ($0000) = 0
 RO13:60F7 C9               ret                 // Saved data for active map reestablished
 RO13:60F8 F0 82            ld   a,(ff00+82)
 RO13:60FA F5               push af
 RO13:60FB 3E 03            ld   a,03
 RO13:60FD E0 82            ld   (ff00+82),a
 RO13:60FF E0 70            ld   (ff00+70),a
 RO13:6101 11 00 D0         ld   de,D000
 RO13:6104 0E 64            ld   c,64
 RO13:6106 2A               ldi  a,(hl)         // Loop begins here
 RO13:6107 12               ld   (de),a         // Unit Type
 RO13:6108 13               inc  de
 RO13:6109 2A               ldi  a,(hl)
 RO13:610A 12               ld   (de),a         // X Coordinate
 RO13:610B 13               inc  de
 RO13:610C 2A               ldi  a,(hl)
 RO13:610D 12               ld   (de),a         // Y Coordinate
 RO13:610E 13               inc  de
 RO13:610F 2A               ldi  a,(hl)
 RO13:6110 12               ld   (de),a         // Status
 RO13:6111 13               inc  de
 RO13:6112 2A               ldi  a,(hl)
 RO13:6113 47               ld   b,a            // HP and Load Count were stored together
 RO13:6114 CB 37            swap a
 RO13:6116 E6 0F            and  a,0F
 RO13:6118 12               ld   (de),a         // HP
 RO13:6119 13               inc  de
 RO13:611A 78               ld   a,b
 RO13:611B E6 0F            and  a,0F
 RO13:611D 12               ld   (de),a         // Load Count
 RO13:611E 13               inc  de
 RO13:611F 2A               ldi  a,(hl)
 RO13:6120 12               ld   (de),a         // Parent Transport's #
 RO13:6121 13               inc  de
 RO13:6122 2A               ldi  a,(hl)
 RO13:6123 12               ld   (de),a         // Fuel
 RO13:6124 13               inc  de
 RO13:6125 2A               ldi  a,(hl)
 RO13:6126 47               ld   b,a
 RO13:6127 CB 37            swap a
 RO13:6129 E6 0F            and  a,0F
 RO13:612B 12               ld   (de),a         // Ammo 1
 RO13:612C 13               inc  de
 RO13:612D 78               ld   a,b
 RO13:612E E6 0F            and  a,0F
 RO13:6130 12               ld   (de),a         // Ammo 2
 RO13:6131 13               inc  de
 RO13:6132 2A               ldi  a,(hl)
 RO13:6133 12               ld   (de),a         // EXP % 256
 RO13:6134 13               inc  de
 RO13:6135 2A               ldi  a,(hl)
 RO13:6136 12               ld   (de),a         // EXP / 256
 RO13:6137 13               inc  de
 RO13:6138 13               inc  de
 RO13:6139 13               inc  de
 RO13:613A 13               inc  de
 RO13:613B 13               inc  de
 RO13:613C 0D               dec  c
 RO13:613D 20 C7            jr   nz,6106
 RO13:613F F1               pop  af
 RO13:6140 E0 82            ld   (ff00+82),a
 RO13:6142 E0 70            ld   (ff00+70),a
 RO13:6144 C9               ret                 // Reestablishes units' stats for save loading
 RO13:6145 F0 82            ld   a,(ff00+82)
 RO13:6147 F5               push af
 RO13:6148 3E 01            ld   a,01
 RO13:614A E0 82            ld   (ff00+82),a
 RO13:614C E0 70            ld   (ff00+70),a
 RO13:614E 54               ld   d,h
 RO13:614F 5D               ld   e,l
 RO13:6150 21 80 DD         ld   hl,DD80
 RO13:6153 01 2D 01         ld   bc,012D
 RO13:6156 CD 50 3B         call 3B50           // (HL ~ HL+BC-1) = (DE ~ DE+BC-1)
 RO13:6159 62               ld   h,d
 RO13:615A 6B               ld   l,e
 RO13:615B F1               pop  af
 RO13:615C E0 82            ld   (ff00+82),a
 RO13:615E E0 70            ld   (ff00+70),a
 RO13:6160 C9               ret                 // Reestablishes properties' stats for save loading
 RO13:6161 CD 14 16         call 1614           // Active map data set up in WRAM banks 1 and 2
 RO13:6164 C9               ret  
 RO13:6165 C5               push bc
 RO13:6166 D5               push de
 RO13:6167 E5               push hl
 RO13:6168 16 00            ld   d,00
 RO13:616A 7A               ld   a,d            // Loop begins here
 RO13:616B CD DC 58         call 58DC           // SRA0($A007 + (0~5))
 RO13:616E A7               and  a
 RO13:616F 28 0A            jr   z,617B
 RO13:6171 7A               ld   a,d
 RO13:6172 CD 85 61         call 6185
 RO13:6175 28 04            jr   z,617B
 RO13:6177 7A               ld   a,d
 RO13:6178 CD A8 61         call 61A8
 RO13:617B 14               inc  d
 RO13:617C 7A               ld   a,d
 RO13:617D FE 06            cp   a,06
 RO13:617F 20 E9            jr   nz,616A
 RO13:6181 E1               pop  hl
 RO13:6182 D1               pop  de
 RO13:6183 C1               pop  bc
 RO13:6184 C9               ret  
 RO13:6185 C5               push bc
 RO13:6186 D5               push de
 RO13:6187 4F               ld   c,a
 RO13:6188 CD FC 61         call 61FC
 RO13:618B 20 18            jr   nz,61A5
 RO13:618D 06 00            ld   b,00           // Beginner
 RO13:618F 79               ld   a,c
 RO13:6190 CD 17 59         call 5917           // A = AND SRA0($A08C + A * $0200 + B/8), 2^B%8
 RO13:6193 28 0A            jr   z,619F
 RO13:6195 C5               push bc
 RO13:6196 79               ld   a,c
 RO13:6197 48               ld   c,b
 RO13:6198 47               ld   b,a
 RO13:6199 CD 42 62         call 6242
 RO13:619C C1               pop  bc
 RO13:619D 20 06            jr   nz,61A5
 RO13:619F 04               inc  b
 RO13:61A0 78               ld   a,b
 RO13:61A1 FE 03            cp   a,03
 RO13:61A3 20 EA            jr   nz,618F
 RO13:61A5 D1               pop  de
 RO13:61A6 C1               pop  bc
 RO13:61A7 C9               ret  
 RO13:61A8 C5               push bc
 RO13:61A9 D5               push de
 RO13:61AA 4F               ld   c,a
 RO13:61AB 06 00            ld   b,00
 RO13:61AD CD 93 05         call 0593           // ($0000) = 10
 RO13:61B0 3E 00            ld   a,00
 RO13:61B2 CD 8D 05         call 058D           // ($4000) = 0, ($FF81) = 0
 RO13:61B5 21 07 A0         ld   hl,A007
 RO13:61B8 09               add  hl,bc
 RO13:61B9 CB 86            res  0,(hl)
 RO13:61BB 79               ld   a,c
 RO13:61BC C6 00            add  a,00
 RO13:61BE EF 14 50 4B                          // Manages display of text window with "(Save Location) was erased."
 RO13:61C2 79               ld   a,c
 RO13:61C3 FE 03            cp   a,03
 RO13:61C5 20 04            jr   nz,61CB
 RO13:61C7 AF               xor  a
 RO13:61C8 EA 0E A0         ld   (A00E),a       // Clear Interrupt Save
 RO13:61CB CD 9B 05         call 059B           // ($0000) = 0
 RO13:61CE D1               pop  de
 RO13:61CF C1               pop  bc
 RO13:61D0 C9               ret  
 RO13:61D1 C5               push bc
 RO13:61D2 D5               push de
 RO13:61D3 E5               push hl
 RO13:61D4 47               ld   b,a
 RO13:61D5 CD 93 05         call 0593           // ($0000) = 10
 RO13:61D8 3E 00            ld   a,00
 RO13:61DA CD 8D 05         call 058D           // ($4000) = 0, ($FF81) = 0
 RO13:61DD 78               ld   a,b
 RO13:61DE CD EF 61         call 61EF           // HL = $A080 + A * $0200, BC holds sum of all values of $A080 + A * $0200 to $A27D + A * $0200
 RO13:61E1 11 FE 01         ld   de,01FE
 RO13:61E4 19               add  hl,de          // HL = $A27E + A * $0200
 RO13:61E5 71               ld   (hl),c
 RO13:61E6 23               inc  hl
 RO13:61E7 70               ld   (hl),b         // SRA0($A27E + A * $0200) 2 byte holds sum of all values of SRA0($A080 + A * $0200 to $A27D + A * $0200)
 RO13:61E8 CD 9B 05         call 059B           // ($0000) = 0
 RO13:61EB E1               pop  hl
 RO13:61EC D1               pop  de
 RO13:61ED C1               pop  bc
 RO13:61EE C9               ret  
 RO13:61EF 21 D4 38         ld   hl,38D4
 RO13:61F2 CD 93 3A         call 3A93           // HL = $A080 + A * $0200
 RO13:61F5 11 FE 01         ld   de,01FE
 RO13:61F8 CD C7 39         call 39C7           // BC holds sum of all values of $A080 + A * $0200 to $A27D + A * $0200
 RO13:61FB C9               ret                 // HL = $A080 + A * $0200, BC holds sum of all values of $A080 + A * $0200 to $A27D + A * $0200
 RO13:61FC C5               push bc
 RO13:61FD D5               push de
 RO13:61FE 47               ld   b,a
 RO13:61FF CD 93 05         call 0593           // ($0000) = 10
 RO13:6202 3E 00            ld   a,00
 RO13:6204 CD 8D 05         call 058D           // ($4000) = 0, ($FF81) = 0
 RO13:6207 78               ld   a,b
 RO13:6208 CD EF 61         call 61EF           // HL = $A080 + A * $0200, BC holds sum of all values of $A080 + A * $0200 to $A27D + A * $0200
 RO13:620B 11 FE 01         ld   de,01FE
 RO13:620E 19               add  hl,de
 RO13:620F 2A               ldi  a,(hl)
 RO13:6210 B9               cp   c
 RO13:6211 20 02            jr   nz,6215
 RO13:6213 7E               ld   a,(hl)
 RO13:6214 B8               cp   b
 RO13:6215 CD 9B 05         call 059B           // ($0000) = 0
 RO13:6218 D1               pop  de
 RO13:6219 C1               pop  bc
 RO13:621A C9               ret  
 RO13:621B C5               push bc
 RO13:621C D5               push de
 RO13:621D E5               push hl
 RO13:621E 11 FE 0F         ld   de,0FFE
 RO13:6221 CD C7 39         call 39C7           // BC holds sum of all values of HL to HL+4093
 RO13:6224 11 FE 0F         ld   de,0FFE
 RO13:6227 19               add  hl,de
 RO13:6228 71               ld   (hl),c
 RO13:6229 23               inc  hl
 RO13:622A 70               ld   (hl),b
 RO13:622B E1               pop  hl
 RO13:622C D1               pop  de
 RO13:622D C1               pop  bc
 RO13:622E C9               ret                 // RAM portion indicated by HL ends with RAM checksum
 RO13:622F D5               push de
 RO13:6230 CD 38 5B         call 5B38           // HL = $38E0 + B * 10 + C * 2
 RO13:6233 2A               ldi  a,(hl)
 RO13:6234 CD 8D 05         call 058D           // ($4000) = A, ($FF81) = A
 RO13:6237 66               ld   h,(hl)
 RO13:6238 2E 00            ld   l,00
 RO13:623A 11 FE 0F         ld   de,0FFE
 RO13:623D CD C7 39         call 39C7           // BC holds sum of all values within SRAM portion of file portion indicated by initial BC
 RO13:6240 D1               pop  de
 RO13:6241 C9               ret  
 RO13:6242 CD 93 05         call 0593           // ($0000) = 10
 RO13:6245 CD 2F 62         call 622F
 RO13:6248 11 FE 0F         ld   de,0FFE
 RO13:624B 19               add  hl,de
 RO13:624C 2A               ldi  a,(hl)
 RO13:624D B9               cp   c
 RO13:624E 20 02            jr   nz,6252
 RO13:6250 7E               ld   a,(hl)
 RO13:6251 B8               cp   b
 RO13:6252 CD 9B 05         call 059B           // ($0000) = 0
 RO13:6255 C9               ret  
 RO13:6256 AF               xor  a
 RO13:6257 EA CC C4         ld   (C4CC),a
 RO13:625A EA CD C4         ld   (C4CD),a
 RO13:625D EA CE C4         ld   (C4CE),a
 RO13:6260 EA D1 C4         ld   (C4D1),a
 RO13:6263 EA D2 C4         ld   (C4D2),a
 RO13:6266 3E 01            ld   a,01
 RO13:6268 EA D3 C4         ld   (C4D3),a
 RO13:626B 3E 0E            ld   a,0E
 RO13:626D EA D4 C4         ld   (C4D4),a
 RO13:6270 3E 62            ld   a,62
 RO13:6272 EA D5 C4         ld   (C4D5),a
 RO13:6275 3E 8E            ld   a,8E
 RO13:6277 EA D6 C4         ld   (C4D6),a
 RO13:627A 3E 13            ld   a,13
 RO13:627C EA D7 C4         ld   (C4D7),a       // Instruction $13:$628E
 RO13:627F 3E BF            ld   a,BF
 RO13:6281 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO13:6285 FA D0 C4         ld   a,(C4D0)
 RO13:6288 CD E8 2E         call 2EE8           // WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
 RO13:628B C3 8A 02         jp   028A
 RO13:628E 3E FF            ld   a,FF
 RO13:6290 EA CC C4         ld   (C4CC),a
 RO13:6293 AF               xor  a
 RO13:6294 EA CD C4         ld   (C4CD),a
 RO13:6297 EA CE C4         ld   (C4CE),a
 RO13:629A EA D1 C4         ld   (C4D1),a
 RO13:629D EA D2 C4         ld   (C4D2),a
 RO13:62A0 EA D3 C4         ld   (C4D3),a
 RO13:62A3 3E 2D            ld   a,2D
 RO13:62A5 EA D4 C4         ld   (C4D4),a
 RO13:62A8 3E 74            ld   a,74
 RO13:62AA EA D5 C4         ld   (C4D5),a
 RO13:62AD 3E B3            ld   a,B3
 RO13:62AF EA D6 C4         ld   (C4D6),a
 RO13:62B2 3E 1A            ld   a,1A
 RO13:62B4 EA D7 C4         ld   (C4D7),a       // Instruction $1A:$74B3
 RO13:62B7 3E C3            ld   a,C3
 RO13:62B9 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO13:62BD FA D0 C4         ld   a,(C4D0)
 RO13:62C0 CD E8 2E         call 2EE8           // WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
 RO13:62C3 3E 7E            ld   a,7E
 RO13:62C5 EA DB C4         ld   (C4DB),a
 RO13:62C8 C3 8A 02         jp   028A
 RO13:62CB AF               xor  a
 RO13:62CC EA CC C4         ld   (C4CC),a
 RO13:62CF EA CE C4         ld   (C4CE),a
 RO13:62D2 EA D1 C4         ld   (C4D1),a
 RO13:62D5 EA D2 C4         ld   (C4D2),a
 RO13:62D8 AF               xor  a
 RO13:62D9 EA D3 C4         ld   (C4D3),a
 RO13:62DC 3E 01            ld   a,01
 RO13:62DE EA D4 C4         ld   (C4D4),a
 RO13:62E1 AF               xor  a
 RO13:62E2 EA D5 C4         ld   (C4D5),a
 RO13:62E5 EA D6 C4         ld   (C4D6),a
 RO13:62E8 EA D7 C4         ld   (C4D7),a
 RO13:62EB 3E 79            ld   a,79
 RO13:62ED CD 44 38         call 3844
 RO13:62F0 C3 8A 02         jp   028A
 RO13:62F3 3E 01            ld   a,01
 RO13:62F5 EA CC C4         ld   (C4CC),a
 RO13:62F8 3E 80            ld   a,80
 RO13:62FA EA CD C4         ld   (C4CD),a
 RO13:62FD AF               xor  a
 RO13:62FE EA CE C4         ld   (C4CE),a
 RO13:6301 EA CF C4         ld   (C4CF),a
 RO13:6304 EA D1 C4         ld   (C4D1),a
 RO13:6307 3E 1E            ld   a,1E
 RO13:6309 EA D2 C4         ld   (C4D2),a
 RO13:630C AF               xor  a
 RO13:630D EA D3 C4         ld   (C4D3),a
 RO13:6310 3E B4            ld   a,B4
 RO13:6312 EA D4 C4         ld   (C4D4),a
 RO13:6315 AF               xor  a
 RO13:6316 EA D5 C4         ld   (C4D5),a
 RO13:6319 EA D6 C4         ld   (C4D6),a
 RO13:631C EA D7 C4         ld   (C4D7),a
 RO13:631F 3E DD            ld   a,DD
 RO13:6321 EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO13:6325 FA D0 C4         ld   a,(C4D0)
 RO13:6328 CD E8 2E         call 2EE8           // WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
 RO13:632B C3 8A 02         jp   028A
 RO13:632E 3E 01            ld   a,01
 RO13:6330 EA CC C4         ld   (C4CC),a
 RO13:6333 3E 80            ld   a,80
 RO13:6335 EA CD C4         ld   (C4CD),a
 RO13:6338 AF               xor  a
 RO13:6339 EA CE C4         ld   (C4CE),a
 RO13:633C EA CF C4         ld   (C4CF),a
 RO13:633F EA D1 C4         ld   (C4D1),a
 RO13:6342 3E 1E            ld   a,1E
 RO13:6344 EA D2 C4         ld   (C4D2),a
 RO13:6347 EA D3 C4         ld   (C4D3),a
 RO13:634A 3E AA            ld   a,AA
 RO13:634C EA D4 C4         ld   (C4D4),a
 RO13:634F AF               xor  a
 RO13:6350 EA D5 C4         ld   (C4D5),a
 RO13:6353 EA D6 C4         ld   (C4D6),a
 RO13:6356 EA D7 C4         ld   (C4D7),a
 RO13:6359 3E DE            ld   a,DE
 RO13:635B EF 1A 10 45                          // B holds sprite A's ROM block, DE holds location of list of pointers to sprite stats modification tables for sprite A
 RO13:635F FA D0 C4         ld   a,(C4D0)
 RO13:6362 CD E8 2E         call 2EE8           // WRA4[$D005 + A * 16] to WRA4[$D00B + A * 16] established (B is intended temporary ROM block, DE is basic pointer)
 RO13:6365 C3 8A 02         jp   028A


 ROMF:4000 EA 4F CA         ld   (CA4F),a
 ROMF:4003 CD B4 40         call 40B4           // Defaults Terrain and Unit selections as well as cursor coordinates in Design Maps
 ROMF:4006 FA 1D CA         ld   a,(CA1D)
 ROMF:4009 CB 4F            bit  1,a
 ROMF:400B 20 05            jr   nz,4012        // Jumps if the Custom Map already exists
 ROMF:400D CD EB 40         call 40EB           // Establishes stats of new custom map
 ROMF:4010 18 23            jr   4035           // Jumps to Design Map session controls
 ROMF:4012 FA 4F CA         ld   a,(CA4F)
 ROMF:4015 EF 13 37 5D                          // Custom Map A data set up in WRAM Banks 1 and 2
 ROMF:4019 EF 0B F3 41                          // WRAM Bank 1 updated with any End and/or Transporting units in mind
 ROMF:401D FA B1 C8         ld   a,(C8B1)
 ROMF:4020 EA 89 C9         ld   (C989),a
 ROMF:4023 FA B2 C8         ld   a,(C8B2)
 ROMF:4026 EA 8A C9         ld   (C98A),a
 ROMF:4029 EF 0B 78 41                          // Sets base counts of each property type, as well as each HQ's coordinates
 ROMF:402D EF 28 C1 40                          // Map preview, ending with A = -1 for B Button, or 0 for A Button; latter has BC as view selection center tile
 ROMF:4031 FE FF            cp   a,FF
 ROMF:4033 28 07            jr   z,403C         // End immediately on B Button press
 ROMF:4035 CD 70 41         call 4170           // Controls for Design Maps session as a whole
 ROMF:4038 CD 67 2E         call 2E67           // Handles clear-up of all sprite portions and entire ($C400) table, sets ($C00E) to 1
 ROMF:403B AF               xor  a
 ROMF:403C C9               ret                 // Starts up Design Maps session, providing zoomed out map preview that can be cancelled if necessary
 ROMF:403D 3E 04            ld   a,04           // Map Editor Quick Save
 ROMF:403F EF 13 7B 5C                          // Load Save File A's data onto Current Save File data
 ROMF:4043 3E 04            ld   a,04
 ROMF:4045 EF 0B EE 40                          // Reestablishes interrupt save data (A is the given file)
 ROMF:4049 EF 0B 26 6B                          // Core Gameplay master control
 ROMF:404D C9               ret  
 ROMF:404E EA 4F CA         ld   (CA4F),a       // A is Custom Map #
 ROMF:4051 EF 28 C1 40                          // Map preview, ending with A = -1 for B Button, or 0 for A Button; latter has BC as view selection center tile
 ROMF:4055 FE FF            cp   a,FF
 ROMF:4057 28 05            jr   z,405E         // End immediately on B Button press
 ROMF:4059 EF 0B 26 6B                          // Core Gameplay master control
 ROMF:405D AF               xor  a
 ROMF:405E C9               ret  
 ROMF:405F C5               push bc
 ROMF:4060 3E 04            ld   a,04
 ROMF:4062 06 03            ld   b,03           // Map Editor
 ROMF:4064 CD 80 40         call 4080           // Map Editor Quick Save check, ending with A = 1 for no Quick Save, 0 for opening Quick Save, or A = -1 for B Button press
 ROMF:4067 C1               pop  bc
 ROMF:4068 C9               ret  
 ROMF:4069 C5               push bc
 ROMF:406A 3E 05            ld   a,05
 ROMF:406C 06 04            ld   b,04           // VS
 ROMF:406E CD 80 40         call 4080           // VS Quick Save check, ending with A = 1 for no Quick Save, 0 for opening Quick Save, or A = -1 for B Button press
 ROMF:4071 C1               pop  bc
 ROMF:4072 C9               ret  
 ROMF:4073 3E 05            ld   a,05
 ROMF:4075 EF 13 7B 5C                          // Load Save File A's data onto Current Save File data
 ROMF:4079 3E 05            ld   a,05
 ROMF:407B EF 0B EE 40                          // Reestablishes interrupt save data (A is the given file)
 ROMF:407F C9               ret  
 ROMF:4080 D5               push de
 ROMF:4081 E5               push hl
 ROMF:4082 EA 68 CA         ld   (CA68),a
 ROMF:4085 EF 13 17 59                          // Bit Weight for Active Game Mode (A is File, B is Mode)
 ROMF:4089 28 24            jr   z,40AF         // End with A = 1 if no quick save
 ROMF:408B C5               push bc
 ROMF:408C FA 68 CA         ld   a,(CA68)
 ROMF:408F EF 0B EE 40                          // Reestablishes interrupt save data (A is the given file)
 ROMF:4093 11 7E C8         ld   de,C87E
 ROMF:4096 21 1A CA         ld   hl,CA1A
 ROMF:4099 01 35 00         ld   bc,0035
 ROMF:409C CD 50 3B         call 3B50           // (HL ~ HL+BC-1) = (DE ~ DE+BC-1)
 ROMF:409F EF 13 C0 54                          // Map Editor Save Open Prompt master control; ends with A = confirmation inverse flag for A Button press, or -1 for B Button press
 ROMF:40A3 C1               pop  bc
 ROMF:40A4 FE 01            cp   a,01
 ROMF:40A6 20 09            jr   nz,40B1        // Ending of A != 1 if A != 1
 ROMF:40A8 FA 68 CA         ld   a,(CA68)
 ROMF:40AB EF 13 38 59                          // Clears Bit Weight for Save of Mode (A is File, B is Mode)
 ROMF:40AF 3E 01            ld   a,01
 ROMF:40B1 D1               pop  de
 ROMF:40B2 E1               pop  hl
 ROMF:40B3 C9               ret  
 ROMF:40B4 3E 01            ld   a,01
 ROMF:40B6 21 59 CA         ld   hl,CA59
 ROMF:40B9 01 05 00         ld   bc,0005
 ROMF:40BC CD 79 3B         call 3B79           // (HL ~ HL+BC-1) = A
 ROMF:40BF 3E 01            ld   a,01
 ROMF:40C1 21 5E CA         ld   hl,CA5E
 ROMF:40C4 01 07 00         ld   bc,0007
 ROMF:40C7 CD 79 3B         call 3B79           // (HL ~ HL+BC-1) = A ($CA59 to $CA64 hold 1)
 ROMF:40CA AF               xor  a
 ROMF:40CB EA 52 CA         ld   (CA52),a
 ROMF:40CE EA 57 CA         ld   (CA57),a
 ROMF:40D1 EA 58 CA         ld   (CA58),a
 ROMF:40D4 CD 26 52         call 5226           // Stores Selected Terrain ID and Selected Unit ID
 ROMF:40D7 AF               xor  a
 ROMF:40D8 EA 8B C9         ld   (C98B),a
 ROMF:40DB EA 8C C9         ld   (C98C),a
 ROMF:40DE 3E 04            ld   a,04
 ROMF:40E0 EA 8F C9         ld   (C98F),a
 ROMF:40E3 EA 90 C9         ld   (C990),a
 ROMF:40E6 EF 12 00 40                          // Unit stats table emptied, ($CD09) and ($CD0A) emptied
 ROMF:40EA C9               ret                 // Defaults Terrain and Unit selections as well as cursor coordinates in Design Maps
 ROMF:40EB 21 85 C8         ld   hl,C885
 ROMF:40EE 01 20 00         ld   bc,0020
 ROMF:40F1 AF               xor  a
 ROMF:40F2 CD 79 3B         call 3B79           // Blanks map general info
 ROMF:40F5 3E 20            ld   a,20
 ROMF:40F7 EA 85 C8         ld   (C885),a
 ROMF:40FA AF               xor  a
 ROMF:40FB EA AD C8         ld   (C8AD),a
 ROMF:40FE EA AE C8         ld   (C8AE),a
 ROMF:4101 EA AF C8         ld   (C8AF),a
 ROMF:4104 EA B0 C8         ld   (C8B0),a       // Defaults the resources
 ROMF:4107 3E 14            ld   a,14
 ROMF:4109 EA B1 C8         ld   (C8B1),a
 ROMF:410C EA B2 C8         ld   (C8B2),a
 ROMF:410F EA 89 C9         ld   (C989),a
 ROMF:4112 EA 8A C9         ld   (C98A),a       // Defaults the map size to 20x20
 ROMF:4115 CD 33 41         call 4133           // Sets up default name of Custom Map
 ROMF:4118 EF 0B 24 45                          // Empties map data stored on WRAM Banks 1 and 2
 ROMF:411C 01 00 00         ld   bc,0000
 ROMF:411F FA 89 C9         ld   a,(C989)
 ROMF:4122 57               ld   d,a
 ROMF:4123 15               dec  d
 ROMF:4124 FA 8A C9         ld   a,(C98A)
 ROMF:4127 5F               ld   e,a
 ROMF:4128 1D               dec  e              // DE = coordinates of southeast corner
 ROMF:4129 3E 29            ld   a,29
 ROMF:412B CD DA 52         call 52DA           // Entire map is filled with Sea, units within erased with appropriate headcount decrements
 ROMF:412E EF 0B 78 41                          // Sets base counts of each property type, as well as each HQ's coordinates
 ROMF:4132 C9               ret                 // Establishes stats of new custom map
 ROMF:4133 21 A5 C8         ld   hl,C8A5
 ROMF:4136 01 08 00         ld   bc,0008
 ROMF:4139 3E 20            ld   a,20
 ROMF:413B CD 79 3B         call 3B79           // Default blank name
 ROMF:413E 11 6D 41         ld   de,416D
 ROMF:4141 21 A5 C8         ld   hl,C8A5
 ROMF:4144 01 03 00         ld   bc,0003
 ROMF:4147 CD 50 3B         call 3B50           // First 3 characters set to "MAP"
 ROMF:414A FA 4F CA         ld   a,(CA4F)
 ROMF:414D FE 09            cp   a,09
 ROMF:414F 20 0C            jr   nz,415D        // Jumps to set digits "0x" for any Custom Map other than 10th
 ROMF:4151 3E 31            ld   a,31
 ROMF:4153 EA A8 C8         ld   (C8A8),a
 ROMF:4156 3E 30            ld   a,30
 ROMF:4158 EA A9 C8         ld   (C8A9),a
 ROMF:415B 18 0A            jr   4167           // Sets digits "10" for 10th Custom Map
 ROMF:415D C6 31            add  a,31
 ROMF:415F EA A9 C8         ld   (C8A9),a
 ROMF:4162 3E 30            ld   a,30
 ROMF:4164 EA A8 C8         ld   (C8A8),a
 ROMF:4167 3E 00            ld   a,00
 ROMF:4169 EA AA C8         ld   (C8AA),a
 ROMF:416C C9               ret                 // Sets up default name of Custom Map

 ROMF:416D CF FF F4

 ROMF:4170 CD F3 04         call 04F3           // Shuts off LCD Display if necessary
 ROMF:4173 CD 02 0F         call 0F02           // Empties ($9800) to ($9BFF) in both VRAM banks
 ROMF:4176 EF 0B 00 40                          // Sets up graphics holding and palettes for the map where gameplay takes place
 ROMF:417A EF 0B 8A 42                          // Establishes all on-screen tiles' entire graphics, ($FF95) 2 byte holds screen shift coordinates
 ROMF:417E EF 0B F9 46                          // res 0,WRA4[$D000 + ($C98D) * 16]
 ROMF:4182 CD 1D 08         call 081D           // Shifts palettes closer to new colors from all white over the span of 8 frames
 ROMF:4185 3E 1F            ld   a,1F
 ROMF:4187 CD 16 38         call 3816           // Map Editor music
 ROMF:418A AF               xor  a
 ROMF:418B EA 67 CA         ld   (CA67),a
 ROMF:418E CB C7            set  0,a
 ROMF:4190 E0 B1            ld   (ff00+B1),a
 ROMF:4192 CD A2 05         call 05A2           // Button update, next frame
 ROMF:4195 EF 0B FA 74                          // General map view graphics update
 ROMF:4199 CD 90 44         call 4490           // Handles timer for flashing selected tile's graphics between selected terrain/unit and default graphics to place every 10 frames
 ROMF:419C FA 67 CA         ld   a,(CA67)
 ROMF:419F CB 47            bit  0,a            // A + Direction (Continued tile edit attempt)
 ROMF:41A1 20 29            jr   nz,41CC
 ROMF:41A3 FA 91 CA         ld   a,(CA91)
 ROMF:41A6 CB 47            bit  0,a            // A (Tile edit attempt)
 ROMF:41A8 20 2E            jr   nz,41D8
 ROMF:41AA CB 4F            bit  1,a            // B (Terrain/Unit selection)
 ROMF:41AC 20 2F            jr   nz,41DD
 ROMF:41AE CB 57            bit  2,a            // Select (Zoomed out map)
 ROMF:41B0 20 3D            jr   nz,41EF
 ROMF:41B2 CB 5F            bit  3,a            // Start (Menu)
 ROMF:41B4 20 61            jr   nz,4217
 ROMF:41B6 CB 6F            bit  5,a            // Right (Move right)
 ROMF:41B8 C2 44 42         jp   nz,4244
 ROMF:41BB CB 67            bit  4,a            // Left (Move left)
 ROMF:41BD C2 3B 42         jp   nz,423B
 ROMF:41C0 CB 77            bit  6,a            // Up (Move up)
 ROMF:41C2 C2 4D 42         jp   nz,424D
 ROMF:41C5 CB 7F            bit  7,a            // Down (Move down)
 ROMF:41C7 C2 56 42         jp   nz,4256
 ROMF:41CA 18 C9            jr   4195           // Waiting for button input
 ROMF:41CC AF               xor  a
 ROMF:41CD EA 67 CA         ld   (CA67),a
 ROMF:41D0 CD 90 42         call 4290           // A = 0 if tile edit update works, -1 if not
 ROMF:41D3 A7               and  a
 ROMF:41D4 28 CD            jr   z,41A3
 ROMF:41D6 18 BD            jr   4195
 ROMF:41D8 CD 90 42         call 4290           // A = 0 if tile edit update works, -1 if not
 ROMF:41DB 18 B8            jr   4195           // Waiting for further input after pressing A
 ROMF:41DD CD CE 44         call 44CE           // Establishes graphics of tile where cursor is placed, ($CA51) emptied
 ROMF:41E0 EF 0B 00 47                          // set 0,WRA4($D000 + ($C98D) * 16)
 ROMF:41E4 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMF:41E7 CD D2 04         call 04D2           // Next frame
 ROMF:41EA CD 04 4E         call 4E04           // Controls for Terrain Selection in Design Maps; also indirectly handles controls for Unit Selection in Design Maps
 ROMF:41ED 18 A6            jr   4195           // Waiting for further input after pressing B
 ROMF:41EF CD 64 21         call 2164           // Empties $FFB1 and $FFB2
 ROMF:41F2 AF               xor  a
 ROMF:41F3 EF 13 CC 5D                          // Establishes map basic logistics, also triggers custom map exists flag if given custom map is used
 ROMF:41F7 CD CE 44         call 44CE           // Establishes graphics of tile where cursor is placed, ($CA51) emptied
 ROMF:41FA EF 0B 00 47                          // set 0,WRA4($D000 + ($C98D) * 16)
 ROMF:41FE CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMF:4201 CD D2 04         call 04D2           // Next frame
 ROMF:4204 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMF:4207 EF 0B BC 52                          // Zoomed out map view controls, ending with A = -1 for B Button, or 0 for A Button; latter has BC as view selection center tile
 ROMF:420B FE FF            cp   a,FF
 ROMF:420D CA 70 41         jp   z,4170         // Restart entire procedure immediately if Zoomed out map view was ended by B Button press
 ROMF:4210 EF 0B CB 7A                          // Establishes view area based on coordinates BC, then cursor's within view and overall coordinates, and finally cursor's sprite grapics location center
 ROMF:4214 C3 70 41         jp   4170           // Restarts entire procedure immediately after done with using Zoomed out map via Select
 ROMF:4217 CD CE 44         call 44CE           // Establishes graphics of tile where cursor is placed, ($CA51) emptied
 ROMF:421A CD EE 44         call 44EE           // Design Maps main menu controls; A = committed choice, -1 if cancelled
 ROMF:421D FE FF            cp   a,FF
 ROMF:421F 28 0F            jr   z,4230         // Jumps to base continuation
 ROMF:4221 21 80 42         ld   hl,4280
 ROMF:4224 CD 8F 3A         call 3A8F           // CALL [HL + 2A]
 ROMF:4227 FE FF            cp   a,FF
 ROMF:4229 28 46            jr   z,4271         // Basically ends the Design Maps procedure as a whole after confirming to do so
 ROMF:422B FE FE            cp   a,FE
 ROMF:422D CA 70 41         jp   z,4170         // Basically restarts procedure to restore the graphics after screen swap
 ROMF:4230 EF 0B 21 46                          // Sets up Cursor tiles in VRA0 tiles 96~122
 ROMF:4234 EF 0B F9 46                          // res 0,WRA4[$D000 + ($C98D) * 16]
 ROMF:4238 C3 95 41         jp   4195           // Back to waiting for button input after handling menu from pressing Start
 ROMF:423B CD CE 44         call 44CE           // Establishes graphics of tile where cursor is placed, ($CA51) emptied
 ROMF:423E EF 0B 25 75                          // If view will shift right: ($FFAC) 4 byte holds: OR ($FFAC),$82, ($C98B) + 10, ($C98C), 9; if not, general increase to X coordinate within view
 ROMF:4242 18 1B            jr   425F           // Left Movement
 ROMF:4244 CD CE 44         call 44CE           // Establishes graphics of tile where cursor is placed, ($CA51) emptied
 ROMF:4247 EF 0B 64 75                          // If view will shift left: ($FFAC) 4 byte holds: OR ($FFAC),$81, ($C98B) - 1, ($C98C), 9; if not, general decrease to X coordinate within view
 ROMF:424B 18 12            jr   425F           // Right Movement
 ROMF:424D CD CE 44         call 44CE           // Establishes graphics of tile where cursor is placed, ($CA51) emptied
 ROMF:4250 EF 0B DB 75                          // If view will shift up: ($FFAC) 4 byte holds: OR ($FFAC),$84, ($C98B) - (($C98C)%2), ($C98C) - 1, 10 + (($C98C)%2); if not, general decrease to Y coordinate within view
 ROMF:4254 18 09            jr   425F           // Up Movement
 ROMF:4256 CD CE 44         call 44CE           // Establishes graphics of tile where cursor is placed, ($CA51) emptied
 ROMF:4259 EF 0B 9C 75                          // If view will shift down: ($FFAC) 4 byte holds: OR ($FFAC),$88, ($C98B) - (($C98C)%2), ($C98C) + 9, 10 + (($C98C)%2); if not, general increase to Y coordinate within view
 ROMF:425D 18 00            jr   425F           // Down Movement
 ROMF:425F F0 90            ld   a,(ff00+90)
 ROMF:4261 CB 47            bit  0,a            // A
 ROMF:4263 CA 95 41         jp   z,4195
 ROMF:4266 FA 67 CA         ld   a,(CA67)
 ROMF:4269 CB C7            set  0,a
 ROMF:426B EA 67 CA         ld   (CA67),a
 ROMF:426E C3 95 41         jp   4195
 ROMF:4271 CD 64 21         call 2164           // Empties $FFB1 and $FFB2
 ROMF:4274 CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMF:4277 CD 67 2E         call 2E67           // Handles clear-up of all sprite portions and entire ($C400) table, sets ($C00E) to 1
 ROMF:427A AF               xor  a
 ROMF:427B E0 95            ld   (ff00+95),a
 ROMF:427D E0 96            ld   (ff00+96),a
 ROMF:427F C9               ret                 // Controls for Design Maps session as a whole

 ROMF:4280 0F 46                                // $460F: Mode (A = 0 unconditional)
 ROMF:4282 61 46                                // $4661: Size (A = 0 unconditional)
 ROMF:4284 FF 46                                // $46FF: Gold (A = 0 unconditional)
 ROMF:4286 44 47                                // $4744: Parts (A = 0 unconditional)
 ROMF:4288 89 47                                // $4789: Name (A = -2 unconditional; results in entire procedure restart)
 ROMF:428A 86 49                                // $4986: Fill (A = 0 or WRAM Bank)
 ROMF:428C B3 47                                // $47B3: Save (A = 0 unconditional)
 ROMF:428E 66 48                                // $4866: End (A = -1 for Save successful or No Save, 0 otherwise; former results in procedure end)

 ROMF:4290 C5               push bc
 ROMF:4291 D5               push de
 ROMF:4292 FA 52 CA         ld   a,(CA52)
 ROMF:4295 A7               and  a
 ROMF:4296 20 17            jr   nz,42AF        // Branches for Unit Mode
 ROMF:4298 FA 91 C9         ld   a,(C991)
 ROMF:429B 47               ld   b,a
 ROMF:429C FA 92 C9         ld   a,(C992)
 ROMF:429F 4F               ld   c,a
 ROMF:42A0 CD D5 42         call 42D5           // A = 0 for terrain modification being valid, -1 for invalid
 ROMF:42A3 A7               and  a
 ROMF:42A4 20 2A            jr   nz,42D0        // End immediately with A = -1 if terrain modification is invalid
 ROMF:42A6 FA 65 CA         ld   a,(CA65)       // A = Selected terrain ID
 ROMF:42A9 EF 0B 76 47                          // Terrain on tile BC updated as selected terrain
 ROMF:42AD 18 15            jr   42C4           // Graphics update, end with A = 0
 ROMF:42AF FA 91 C9         ld   a,(C991)
 ROMF:42B2 47               ld   b,a
 ROMF:42B3 FA 92 C9         ld   a,(C992)
 ROMF:42B6 4F               ld   c,a
 ROMF:42B7 CD 5A 43         call 435A           // A = 0 if unit is to be added or Delete is to be handled, -1 if not
 ROMF:42BA A7               and  a
 ROMF:42BB 20 13            jr   nz,42D0        // End immediately with A = -1 if unit adding or Delete command is invalid
 ROMF:42BD FA 66 CA         ld   a,(CA66)       // A = Selected Unit ID
 ROMF:42C0 EF 0B 98 47                          // Unit tile updated with seleted unit type
 ROMF:42C4 EF 0B D1 43                          // Establishes tile BC's entire graphics
 ROMF:42C8 3E 02            ld   a,02
 ROMF:42CA CD 44 38         call 3844
 ROMF:42CD AF               xor  a
 ROMF:42CE 18 02            jr   42D2
 ROMF:42D0 3E FF            ld   a,FF
 ROMF:42D2 D1               pop  de
 ROMF:42D3 C1               pop  bc
 ROMF:42D4 C9               ret                 // A = 0 if tile edit update works, -1 if not
 ROMF:42D5 C5               push bc
 ROMF:42D6 E5               push hl
 ROMF:42D7 EF 0B 92 47                          // A = Unit Type of occupying unit
 ROMF:42DB A7               and  a
 ROMF:42DC 28 1B            jr   z,42F9         // Branches if no occupying unit
 ROMF:42DE C5               push bc
 ROMF:42DF D5               push de
 ROMF:42E0 57               ld   d,a
 ROMF:42E1 FA 65 CA         ld   a,(CA65)       // A = Selected terrain ID
 ROMF:42E4 EF 0B 07 47                          // A = Terrain base ID
 ROMF:42E8 47               ld   b,a            // B = Terrain base ID
 ROMF:42E9 7A               ld   a,d            // A = Unit Type of occupying unit
 ROMF:42EA 0E 19            ld   c,19
 ROMF:42EC EF 12 37 40                          
 ROMF:42F0 EF 12 9F 47                          // A = Movement Cost
 ROMF:42F4 D1               pop  de
 ROMF:42F5 C1               pop  bc
 ROMF:42F6 A7               and  a
 ROMF:42F7 28 3C            jr   z,4335         // End with A = -1 if movement invalid
 ROMF:42F9 FA 65 CA         ld   a,(CA65)       // A = Selected terrain ID
 ROMF:42FC FE 20            cp   a,20
 ROMF:42FE 30 17            jr   nc,4317
 ROMF:4300 EF 0B 70 47                          // A = Terrain base ID
 ROMF:4304 FE 20            cp   a,20
 ROMF:4306 38 0F            jr   c,4317
 ROMF:4308 EF 0C 05 57                          // A = Total property count
 ROMF:430C FE 64            cp   a,64
 ROMF:430E 20 07            jr   nz,4317        // Max property count not already reached branch
 ROMF:4310 CD 00 44         call 4400           // Handles Limit Warning of the map editor (too many properties)
 ROMF:4313 3E FF            ld   a,FF
 ROMF:4315 18 27            jr   433E           // End immediately with A = -1 to avoid adding another property
 ROMF:4317 CD 41 43         call 4341           // A = -1 if terrain is HQ and HQ exists; 0 otherwise
 ROMF:431A A7               and  a
 ROMF:431B 20 18            jr   nz,4335        // End with Invalid sound effect and A = -1 to avoid HQ duplicate
 ROMF:431D FA 65 CA         ld   a,(CA65)       // A = Selected terrain ID
 ROMF:4320 21 4A C6         ld   hl,C64A
 ROMF:4323 CD BC 29         call 29BC           // HL += A
 ROMF:4326 34               inc  (hl)
 ROMF:4327 EF 0B 70 47                          // A = Terrain base ID
 ROMF:432B 21 4A C6         ld   hl,C64A
 ROMF:432E CD BC 29         call 29BC           // HL += A
 ROMF:4331 35               dec  (hl)           // Decreases previous owner's count for given property type
 ROMF:4332 AF               xor  a
 ROMF:4333 18 09            jr   433E
 ROMF:4335 3E 03            ld   a,03
 ROMF:4337 CD 44 38         call 3844
 ROMF:433A 3E FF            ld   a,FF
 ROMF:433C 18 00            jr   433E
 ROMF:433E E1               pop  hl
 ROMF:433F C1               pop  bc
 ROMF:4340 C9               ret                 // A = 0 for terrain modification being valid, -1 for invalid
 ROMF:4341 FA 65 CA         ld   a,(CA65)       // A = Selected terrain ID
 ROMF:4344 FE 01            cp   a,01
 ROMF:4346 28 06            jr   z,434E
 ROMF:4348 FE 0C            cp   a,0C
 ROMF:434A 28 02            jr   z,434E
 ROMF:434C AF               xor  a
 ROMF:434D C9               ret                 // Only ends with A = 0 if not an HQ
 ROMF:434E 21 4A C6         ld   hl,C64A
 ROMF:4351 CD BC 29         call 29BC           // HL += A
 ROMF:4354 7E               ld   a,(hl)
 ROMF:4355 A7               and  a
 ROMF:4356 C8               ret  z
 ROMF:4357 3E FF            ld   a,FF
 ROMF:4359 C9               ret                 // Ends with A = -1 if terrain is HQ and HQ exists
 ROMF:435A C5               push bc
 ROMF:435B E5               push hl
 ROMF:435C FA 66 CA         ld   a,(CA66)       // A = Selected Unit ID
 ROMF:435F A7               and  a
 ROMF:4360 28 6A            jr   z,43CC
 ROMF:4362 C5               push bc
 ROMF:4363 EF 0B 70 47                          // A = Terrain ID
 ROMF:4367 EF 0B 07 47                          // A = Terrain base ID
 ROMF:436B 47               ld   b,a
 ROMF:436C FA 66 CA         ld   a,(CA66)       // A = Selected Unit ID
 ROMF:436F 0E 19            ld   c,19
 ROMF:4371 EF 12 37 40                          
 ROMF:4375 EF 12 9F 47                          // A = Movement Cost
 ROMF:4379 C1               pop  bc
 ROMF:437A A7               and  a
 ROMF:437B 28 5F            jr   z,43DC         // End with A = -1 if movement invalid
 ROMF:437D EF 0B 92 47                          // A = Unit Type of occupying unit
 ROMF:4381 A7               and  a
 ROMF:4382 28 25            jr   z,43A9         // Branches if no occupant
 ROMF:4384 E6 01            and  a,01
 ROMF:4386 4F               ld   c,a            // C holds side of occupying unit
 ROMF:4387 FA 66 CA         ld   a,(CA66)       // A = Selected Unit ID
 ROMF:438A E6 01            and  a,01
 ROMF:438C B9               cp   c
 ROMF:438D 20 03            jr   nz,4392        // Branches if different sides
 ROMF:438F AF               xor  a
 ROMF:4390 18 51            jr   43E3           // End with A = 0 if same side
 ROMF:4392 21 09 CD         ld   hl,CD09
 ROMF:4395 CD BC 29         call 29BC           // HL += A
 ROMF:4398 7E               ld   a,(hl)
 ROMF:4399 FE 32            cp   a,32
 ROMF:439B 28 38            jr   z,43D5         // Max unit count already reached branch
 ROMF:439D 34               inc  (hl)
 ROMF:439E 79               ld   a,c
 ROMF:439F 21 09 CD         ld   hl,CD09
 ROMF:43A2 CD BC 29         call 29BC           // HL += A
 ROMF:43A5 35               dec  (hl)
 ROMF:43A6 AF               xor  a              // Transfer headcount point from occupying unit
 ROMF:43A7 18 3A            jr   43E3           // End with A = 0
 ROMF:43A9 FA 66 CA         ld   a,(CA66)       // A = Selected Unit ID
 ROMF:43AC E6 01            and  a,01
 ROMF:43AE 21 09 CD         ld   hl,CD09
 ROMF:43B1 CD BC 29         call 29BC           // HL += A
 ROMF:43B4 7E               ld   a,(hl)
 ROMF:43B5 FE 32            cp   a,32
 ROMF:43B7 28 1C            jr   z,43D5         // Max unit count already reached branch
 ROMF:43B9 34               inc  (hl)           // Increment headcount of added unit's side
 ROMF:43BA AF               xor  a
 ROMF:43BB 18 26            jr   43E3           // End with A = 0
 ROMF:43BD FA 66 CA         ld   a,(CA66)       // A = Selected Unit ID
 ROMF:43C0 E6 01            and  a,01
 ROMF:43C2 21 09 CD         ld   hl,CD09
 ROMF:43C5 CD BC 29         call 29BC           // HL += A
 ROMF:43C8 34               inc  (hl)
 ROMF:43C9 AF               xor  a
 ROMF:43CA 18 17            jr   43E3
 ROMF:43CC CD E6 43         call 43E6           // A = -1 if no occupant, 0 otherwise; decrements from occupant's side if there is one
 ROMF:43CF A7               and  a
 ROMF:43D0 20 0A            jr   nz,43DC        // End with A = -1 if no occupant
 ROMF:43D2 AF               xor  a
 ROMF:43D3 18 0E            jr   43E3
 ROMF:43D5 CD 04 44         call 4404           // Handles Limit Warning of the map editor (too many units)
 ROMF:43D8 3E FF            ld   a,FF
 ROMF:43DA 18 07            jr   43E3           // End immediately with A = -1 to avoid adding another unit due to max units
 ROMF:43DC 3E 03            ld   a,03
 ROMF:43DE CD 44 38         call 3844
 ROMF:43E1 3E FF            ld   a,FF
 ROMF:43E3 E1               pop  hl
 ROMF:43E4 C1               pop  bc
 ROMF:43E5 C9               ret                 // A = 0 if unit is to be added or Delete is to be handled, -1 if not
 ROMF:43E6 C5               push bc
 ROMF:43E7 E5               push hl
 ROMF:43E8 EF 0B 92 47                          // A = Unit Type of occupying unit
 ROMF:43EC A7               and  a
 ROMF:43ED 28 0C            jr   z,43FB         // End with A = -1 if no occupant
 ROMF:43EF E6 01            and  a,01
 ROMF:43F1 21 09 CD         ld   hl,CD09
 ROMF:43F4 CD BC 29         call 29BC           // HL += A
 ROMF:43F7 35               dec  (hl)
 ROMF:43F8 AF               xor  a
 ROMF:43F9 18 02            jr   43FD
 ROMF:43FB 3E FF            ld   a,FF
 ROMF:43FD E1               pop  hl
 ROMF:43FE C1               pop  bc
 ROMF:43FF C9               ret                 // A = -1 if no occupant, 0 otherwise; decrements from occupant's side if there is one
 ROMF:4400 3E 00            ld   a,00
 ROMF:4402 18 02            jr   4406
 ROMF:4404 3E 01            ld   a,01
 ROMF:4406 F5               push af
 ROMF:4407 EF 0B 00 47                          // set 0,WRA4($D000 + ($C98D) * 16)
 ROMF:440B CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMF:440E CD D2 04         call 04D2           // Next frame
 ROMF:4411 3E 03            ld   a,03
 ROMF:4413 CD 44 38         call 3844
 ROMF:4416 EF 01 FC 40                          // Graphics holding: VRA0($8600) to VRA0($87FF) holds Hiragana up to "ma", then VRA0($8D00) to ($8FFF) holds rest of Hiragana
 ROMF:441A 01 20 00         ld   bc,0020
 ROMF:441D 11 05 14         ld   de,1405
 ROMF:4420 EF 10 09 6A                          // Tile placement and coloring handled for [$9C00] table 20x5 using [$DC6C] and [$DC6D] as the base
 ROMF:4424 F1               pop  af
 ROMF:4425 A7               and  a
 ROMF:4426 20 0E            jr   nz,4436
 ROMF:4428 21 64 44         ld   hl,4464        // "Property placement.."
 ROMF:442B CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:442E 21 7F 44         ld   hl,447F        // "..would exceed limit."
 ROMF:4431 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:4434 18 0C            jr   4442
 ROMF:4436 21 72 44         ld   hl,4472        // "Unit addition.."
 ROMF:4439 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:443C 21 7F 44         ld   hl,447F        // "..would exceed limit."
 ROMF:443F CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:4442 3E 68            ld   a,68
 ROMF:4444 EF 0B 22 48                          // Window scrolls up 4 pixels per frame from Y = 152 to Y = A (A must be a multiple of 4 to avoid an infinite loop error)
 ROMF:4448 CD A2 05         call 05A2           // Button update, next frame
 ROMF:444B F0 91            ld   a,(ff00+91)
 ROMF:444D CB 47            bit  0,a            // A
 ROMF:444F 20 06            jr   nz,4457
 ROMF:4451 CB 4F            bit  1,a            // B
 ROMF:4453 20 02            jr   nz,4457
 ROMF:4455 18 F1            jr   4448
 ROMF:4457 EF 0B 60 48                          // Shuts off Window Display, LCD STAT Interrupt, and LYC=LY Coincidence Interrupt
 ROMF:445B EF 0B 21 46                          // Sets up Cursor tiles in VRA0 tiles 96~122
 ROMF:445F EF 0B F9 46                          // res 0,WRA4[$D000 + ($C98D) * 16]
 ROMF:4463 C9               ret                 // Handles Limit Warning of the map editor

 ROMF:4464 02 21                                // "Property placement.."
 ROMF:4466 70 73 D3 79 60 6E FF 71 EB 67 D9 00
 ROMF:4472 02 21                                // "Unit addition.."
 ROMF:4474 EF 70 62 60 7A 62 71 EB 67 D9 00
 ROMF:447F 02 22                                // "..would exceed limit."
 ROMF:4481 6B 62 E8 62 6D 63 60 6A 64 73 62 7F 6D 57 00

 ROMF:4490 FA 51 CA         ld   a,(CA51)
 ROMF:4493 3C               inc  a
 ROMF:4494 EA 51 CA         ld   (CA51),a
 ROMF:4497 FE 0A            cp   a,0A
 ROMF:4499 28 09            jr   z,44A4
 ROMF:449B FE 14            cp   a,14
 ROMF:449D 20 08            jr   nz,44A7
 ROMF:449F CD CE 44         call 44CE           // Establishes graphics of tile where cursor is placed, ($CA51) emptied
 ROMF:44A2 18 03            jr   44A7
 ROMF:44A4 CD A8 44         call 44A8           // Establishes terrain/unit tile graphics at cursor's coordinates based on selected terrain/unit
 ROMF:44A7 C9               ret                 // Handles timer for flashing selected tile's graphics between selected terrain/unit and default graphics to place every 10 frames
 ROMF:44A8 FA 52 CA         ld   a,(CA52)
 ROMF:44AB A7               and  a
 ROMF:44AC 20 06            jr   nz,44B4        // Branches for Unit Mode
 ROMF:44AE FA 65 CA         ld   a,(CA65)       // A = Selected terrain ID
 ROMF:44B1 57               ld   d,a            // D = Selected terrain ID
 ROMF:44B2 18 0C            jr   44C0
 ROMF:44B4 FA 66 CA         ld   a,(CA66)       // A = Selected Unit ID
 ROMF:44B7 C6 34            add  a,34
 ROMF:44B9 57               ld   d,a            // D = Selected Unit ID + 52
 ROMF:44BA FE 34            cp   a,34
 ROMF:44BC 20 02            jr   nz,44C0
 ROMF:44BE 16 35            ld   d,35           // Delete icon
 ROMF:44C0 FA 91 C9         ld   a,(C991)
 ROMF:44C3 47               ld   b,a
 ROMF:44C4 FA 92 C9         ld   a,(C992)
 ROMF:44C7 4F               ld   c,a
 ROMF:44C8 7A               ld   a,d
 ROMF:44C9 EF 0B 4D 44                          // Establishes terrain/unit tile graphics at cursor's coordinates based on selected terrain/unit
 ROMF:44CD C9               ret  
 ROMF:44CE FA 91 C9         ld   a,(C991)
 ROMF:44D1 47               ld   b,a
 ROMF:44D2 FA 92 C9         ld   a,(C992)
 ROMF:44D5 4F               ld   c,a
 ROMF:44D6 EF 0B 92 47                          // A = Unit Type of occupying unit
 ROMF:44DA A7               and  a
 ROMF:44DB 20 06            jr   nz,44E3
 ROMF:44DD EF 0B 70 47                          // A = Terrain base ID
 ROMF:44E1 18 02            jr   44E5
 ROMF:44E3 C6 34            add  a,34
 ROMF:44E5 EF 0B 4D 44                          // Establishes terrain/unit tile graphics (A is terrain/unit, BC is tile's coordinates)
 ROMF:44E9 AF               xor  a
 ROMF:44EA EA 51 CA         ld   (CA51),a
 ROMF:44ED C9               ret                 // Establishes graphics of tile where cursor is placed, ($CA51) emptied
 ROMF:44EE 3E FF            ld   a,FF
 ROMF:44F0 EA 45 C9         ld   (C945),a
 ROMF:44F3 EF 0B 00 47                          // set 0,WRA4($D000 + ($C98D) * 16)
 ROMF:44F7 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMF:44FA CD D2 04         call 04D2           // Next frame
 ROMF:44FD EF 01 FC 40                          // Graphics holding: VRA0($8600) to VRA0($87FF) holds Hiragana up to "ma", then VRA0($8D00) to ($8FFF) holds rest of Hiragana
 ROMF:4501 01 20 00         ld   bc,0020
 ROMF:4504 11 06 14         ld   de,1406
 ROMF:4507 EF 10 09 6A                          // Tile placement and coloring handled for [$9C00] table 20x6 using [$DC6C] and [$DC6D] as the base
 ROMF:450B CD AA 45         call 45AA           // Sets up text for potential choices on main menu of Design Maps
 ROMF:450E AF               xor  a
 ROMF:450F EA 40 C9         ld   (C940),a       // Defaults to Arrange Mode option
 ROMF:4512 16 55            ld   d,55
 ROMF:4514 CD 86 45         call 4586           // Sets up right pointer arrow for Arrange Mode option
 ROMF:4517 3E 60            ld   a,60
 ROMF:4519 EF 0B 22 48                          // Window scrolls up 4 pixels per frame from Y = 152 to Y = A (A must be a multiple of 4 to avoid an infinite loop error)
 ROMF:451D CD A2 05         call 05A2           // Button update, next frame
 ROMF:4520 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMF:4523 F0 92            ld   a,(ff00+92)
 ROMF:4525 CB 4F            bit  1,a            // B
 ROMF:4527 20 11            jr   nz,453A
 ROMF:4529 CB 47            bit  0,a            // A
 ROMF:452B 20 06            jr   nz,4533
 ROMF:452D E6 F0            and  a,F0           // D-Pad
 ROMF:452F 20 1B            jr   nz,454C
 ROMF:4531 18 EA            jr   451D
 ROMF:4533 3E 02            ld   a,02
 ROMF:4535 CD 44 38         call 3844
 ROMF:4538 18 0A            jr   4544
 ROMF:453A 3E 0C            ld   a,0C
 ROMF:453C CD 44 38         call 3844
 ROMF:453F 3E FF            ld   a,FF
 ROMF:4541 EA 40 C9         ld   (C940),a       // Set to -1 to indicate selection off
 ROMF:4544 EF 0B 60 48                          // Shuts off Window Display, LCD STAT Interrupt, and LYC=LY Coincidence Interrupt
 ROMF:4548 FA 40 C9         ld   a,(C940)
 ROMF:454B C9               ret                 // Design Maps main menu controls; A = committed choice, -1 if cancelled
 ROMF:454C FA 40 C9         ld   a,(C940)
 ROMF:454F 21 92 FF         ld   hl,FF92
 ROMF:4552 CB 76            bit  6,(hl)         // Up
 ROMF:4554 20 0B            jr   nz,4561
 ROMF:4556 CB 7E            bit  7,(hl)         // Down
 ROMF:4558 20 10            jr   nz,456A
 ROMF:455A EE 01            xor  a,01           // Choice side is switched
 ROMF:455C CD 73 45         call 4573           // Moves pointer arrow for choice change
 ROMF:455F 18 BC            jr   451D
 ROMF:4561 D6 02            sub  a,02           // Up was pressed
 ROMF:4563 E6 07            and  a,07           // Opposite side if already on top 2 options
 ROMF:4565 CD 73 45         call 4573
 ROMF:4568 18 B3            jr   451D
 ROMF:456A C6 02            add  a,02           // Down was pressed
 ROMF:456C E6 07            and  a,07           // Opposite side if already on bottom 2 options
 ROMF:456E CD 73 45         call 4573
 ROMF:4571 18 AA            jr   451D           // Goes back to waiting
 ROMF:4573 16 80            ld   d,80           // Blank
 ROMF:4575 CD 86 45         call 4586           // Sets up Blank for pointer location of old choice location
 ROMF:4578 EA 40 C9         ld   (C940),a
 ROMF:457B 16 55            ld   d,55           // Pointing right arrow
 ROMF:457D CD 86 45         call 4586           // Sets up pointing right arrow for pointer location of new choice location
 ROMF:4580 3E 01            ld   a,01
 ROMF:4582 CD 44 38         call 3844
 ROMF:4585 C9               ret                 // Moves pointer arrow for choice change
 ROMF:4586 F5               push af
 ROMF:4587 FA 40 C9         ld   a,(C940)
 ROMF:458A 87               add  a
 ROMF:458B 21 9A 45         ld   hl,459A
 ROMF:458E CD BC 29         call 29BC           // HL += A
 ROMF:4591 46               ld   b,(hl)
 ROMF:4592 23               inc  hl
 ROMF:4593 4E               ld   c,(hl)
 ROMF:4594 7A               ld   a,d
 ROMF:4595 CD ED 34         call 34ED           // [$C300 + [$FFC8]] 3 byte holds: 1, B + C%8 * 32, 152 + C / 8, A; [$FFCA] incremented
 ROMF:4598 F1               pop  af
 ROMF:4599 C9               ret                 // Sets up character D for pointer location of active choice on main menu of Design Maps

 ROMF:459A 01 21
 ROMF:459C 0B 21
 ROMF:459E 01 22
 ROMF:45A0 0B 22
 ROMF:45A2 01 23
 ROMF:45A4 0B 23
 ROMF:45A6 01 24
 ROMF:45A8 0B 24

 ROMF:45AA 0E 00            ld   c,00
 ROMF:45AC 79               ld   a,c            // Loop begins here
 ROMF:45AD 21 BD 45         ld   hl,45BD
 ROMF:45B0 CD 93 3A         call 3A93           // HL = (2A + HL) 2 byte reverse
 ROMF:45B3 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:45B6 0C               inc  c
 ROMF:45B7 79               ld   a,c
 ROMF:45B8 FE 08            cp   a,08
 ROMF:45BA 20 F0            jr   nz,45AC
 ROMF:45BC C9               ret                 // Sets up text for potential choices on main menu of Design Maps
 
 ROMF:45BD CD 45
 ROMF:45BF D7 45
 ROMF:45C1 E0 45
 ROMF:45C3 E6 45
 ROMF:45C5 EC 45
 ROMF:45C7 F6 45
 ROMF:45C9 FE 45
 ROMF:45CB 06 46

 ROMF:45CD 02 21                                // "Arrange Mode"
 ROMF:45CF 7A 62 71 24 51 3D 80 00
 ROMF:45D7 0C 21                                // "Map Size"
 ROMF:45D9 20 50 45 0C 03 36 00
 ROMF:45E0 02 22                                // "Gold"
 ROMF:45E2 6C 67 DD 00
 ROMF:45E6 0C 22                                // "Parts"
 ROMF:45E8 6C E3 62 00
 ROMF:45EC 02 23                                // "Map Name"
 ROMF:45EE 20 50 45 79 75 7F 64 00
 ROMF:45F6 0C 23                                // "Fill"
 ROMF:45F8 77 D8 72 EF 6C 00
 ROMF:45FE 02 24                                // "Save"
 ROMF:4600 0F 51 40 6D D9 00
 ROMF:4606 0C 24                                // "End"
 ROMF:4608 6C FD 63 D8 FE 63 00
 
 ROMF:460F 3E 00            ld   a,00
 ROMF:4611 EA 45 C9         ld   (C945),a
 ROMF:4614 FA 52 CA         ld   a,(CA52)
 ROMF:4617 EA 40 C9         ld   (C940),a       // Defaults to current Arrange Mode
 ROMF:461A CD 3A 4C         call 4C3A           // Sets up text
 ROMF:461D 16 55            ld   d,55
 ROMF:461F CD E2 4D         call 4DE2           // Sets up right pointer arrow for current Mode
 ROMF:4622 3E 68            ld   a,68
 ROMF:4624 EF 0B 22 48                          // Window scrolls up 4 pixels per frame from Y = 152 to Y = A (A must be a multiple of 4 to avoid an infinite loop error)
 ROMF:4628 CD A2 05         call 05A2           // Button update, next frame
 ROMF:462B F0 92            ld   a,(ff00+92)
 ROMF:462D CB 47            bit  0,a            // A
 ROMF:462F 20 18            jr   nz,4649
 ROMF:4631 CB 4F            bit  1,a            // B
 ROMF:4633 20 21            jr   nz,4656
 ROMF:4635 CB 77            bit  6,a            // Up
 ROMF:4637 20 06            jr   nz,463F
 ROMF:4639 CB 7F            bit  7,a            // Down
 ROMF:463B 20 02            jr   nz,463F
 ROMF:463D 18 E9            jr   4628           // Waiting for button input
 ROMF:463F FA 40 C9         ld   a,(C940)       // Up/Down pressed
 ROMF:4642 EE 01            xor  a,01
 ROMF:4644 CD CF 4D         call 4DCF           // Updates right pointing arrow location for choice within submenu of Design Maps
 ROMF:4647 18 DF            jr   4628
 ROMF:4649 3E 02            ld   a,02           // A pressed
 ROMF:464B CD 44 38         call 3844
 ROMF:464E FA 40 C9         ld   a,(C940)
 ROMF:4651 EA 52 CA         ld   (CA52),a       // Selected Mode
 ROMF:4654 18 05            jr   465B
 ROMF:4656 3E 0C            ld   a,0C           // B button pressed
 ROMF:4658 CD 44 38         call 3844
 ROMF:465B EF 0B 60 48                          // Shuts off Window Display, LCD STAT Interrupt, and LYC=LY Coincidence Interrupt
 ROMF:465F AF               xor  a
 ROMF:4660 C9               ret                 // Controls for Mode submenu in Design Maps; ends with A = 0 when closed
 ROMF:4661 FA 89 C9         ld   a,(C989)
 ROMF:4664 EA 41 C9         ld   (C941),a
 ROMF:4667 FA 8A C9         ld   a,(C98A)
 ROMF:466A EA 42 C9         ld   (C942),a
 ROMF:466D 3E 14            ld   a,14
 ROMF:466F EA 44 C9         ld   (C944),a
 ROMF:4672 3E 32            ld   a,32
 ROMF:4674 EA 43 C9         ld   (C943),a
 ROMF:4677 AF               xor  a
 ROMF:4678 EA 40 C9         ld   (C940),a       // Defaults to Horizontal
 ROMF:467B 3E 01            ld   a,01
 ROMF:467D EA 45 C9         ld   (C945),a
 ROMF:4680 CD 3A 4C         call 4C3A           // Sets up text
 ROMF:4683 16 55            ld   d,55
 ROMF:4685 CD E2 4D         call 4DE2           // Sets up right pointer arrow for choice Horizontal
 ROMF:4688 3E 68            ld   a,68
 ROMF:468A EF 0B 22 48                          // Window scrolls up 4 pixels per frame from Y = 152 to Y = A (A must be a multiple of 4 to avoid an infinite loop error)
 ROMF:468E CD B4 4B         call 4BB4           // Controls for value manipulation in submenu in Design Maps; ends with A = 0 if closed with A button, A = -1 if closed with B button
 ROMF:4691 FE FF            cp   a,FF
 ROMF:4693 28 64            jr   z,46F9         // B button just ends the Call with window closure and A = 0
 ROMF:4695 CD 79 48         call 4879           // Controls for Confirm Selection; result is A = 0 for confirmation, -1 otherwise
 ROMF:4698 FE FF            cp   a,FF
 ROMF:469A 28 DB            jr   z,4677         // Moves back to setting up the dimensions if cancelled
 ROMF:469C FA 89 C9         ld   a,(C989)
 ROMF:469F 47               ld   b,a
 ROMF:46A0 0E 00            ld   c,00
 ROMF:46A2 16 32            ld   d,32
 ROMF:46A4 1E 32            ld   e,32
 ROMF:46A6 3E 29            ld   a,29
 ROMF:46A8 CD DA 52         call 52DA           // Rectangle H,0 to 50,50 is filled with Sea, units within erased with appropriate headcount decrements
 ROMF:46AB FA 8A C9         ld   a,(C98A)
 ROMF:46AE 4F               ld   c,a
 ROMF:46AF 06 00            ld   b,00
 ROMF:46B1 16 32            ld   d,32
 ROMF:46B3 1E 32            ld   e,32
 ROMF:46B5 3E 29            ld   a,29
 ROMF:46B7 CD DA 52         call 52DA           // Rectangle 0,V to 50,50 is filled with Sea, units within erased with appropriate headcount decrements
 ROMF:46BA FA 41 C9         ld   a,(C941)
 ROMF:46BD EA 89 C9         ld   (C989),a
 ROMF:46C0 FA 42 C9         ld   a,(C942)
 ROMF:46C3 EA 8A C9         ld   (C98A),a
 ROMF:46C6 FA 89 C9         ld   a,(C989)
 ROMF:46C9 47               ld   b,a
 ROMF:46CA 0E 00            ld   c,00
 ROMF:46CC 16 3F            ld   d,3F
 ROMF:46CE 1E 36            ld   e,36
 ROMF:46D0 AF               xor  a
 ROMF:46D1 CD DA 52         call 52DA           // Rectangle H,0 to 63,54 is filled with Null, units within erased with appropriate headcount decrements
 ROMF:46D4 FA 8A C9         ld   a,(C98A)
 ROMF:46D7 4F               ld   c,a
 ROMF:46D8 06 00            ld   b,00
 ROMF:46DA 16 3F            ld   d,3F
 ROMF:46DC 1E 36            ld   e,36
 ROMF:46DE AF               xor  a
 ROMF:46DF CD DA 52         call 52DA           // Rectangle 0,V to 63,54 is filled with Null, units within erased with appropriate headcount decrements
 ROMF:46E2 AF               xor  a
 ROMF:46E3 EA 8B C9         ld   (C98B),a
 ROMF:46E6 EA 8C C9         ld   (C98C),a       // Northwest in-view tile coordinates set to 0
 ROMF:46E9 3E 04            ld   a,04
 ROMF:46EB EA 8F C9         ld   (C98F),a
 ROMF:46EE EA 90 C9         ld   (C990),a       // Cursor location default
 ROMF:46F1 EF 0B 8A 42                          // Establishes all on-screen tiles' entire graphics, ($FF95) 2 byte holds screen shift coordinates
 ROMF:46F5 EF 0B 78 41                          // Sets base counts of each property type, as well as each HQ's coordinates
 ROMF:46F9 EF 0B 60 48                          // Shuts off Window Display, LCD STAT Interrupt, and LYC=LY Coincidence Interrupt
 ROMF:46FD AF               xor  a
 ROMF:46FE C9               ret                 // Controls for Size submenu of Design Maps; ends with A = 0 when closed
 ROMF:46FF 3E 02            ld   a,02
 ROMF:4701 EA 45 C9         ld   (C945),a
 ROMF:4704 FA AD C8         ld   a,(C8AD)
 ROMF:4707 EA 41 C9         ld   (C941),a
 ROMF:470A FA AE C8         ld   a,(C8AE)
 ROMF:470D EA 42 C9         ld   (C942),a
 ROMF:4710 AF               xor  a
 ROMF:4711 EA 44 C9         ld   (C944),a
 ROMF:4714 3E 63            ld   a,63
 ROMF:4716 EA 43 C9         ld   (C943),a
 ROMF:4719 AF               xor  a
 ROMF:471A EA 40 C9         ld   (C940),a
 ROMF:471D CD 3A 4C         call 4C3A           // Sets up text
 ROMF:4720 16 55            ld   d,55
 ROMF:4722 CD E2 4D         call 4DE2           // Sets up right pointer arrow for choice Red Star
 ROMF:4725 3E 68            ld   a,68
 ROMF:4727 EF 0B 22 48                          // Window scrolls up 4 pixels per frame from Y = 152 to Y = A (A must be a multiple of 4 to avoid an infinite loop error)
 ROMF:472B CD B4 4B         call 4BB4           // Controls for value manipulation in submenu in Design Maps; ends with A = 0 if closed with A button, A = -1 if closed with B button
 ROMF:472E FE FF            cp   a,FF
 ROMF:4730 28 0C            jr   z,473E         // B button ending
 ROMF:4732 FA 41 C9         ld   a,(C941)
 ROMF:4735 EA AD C8         ld   (C8AD),a
 ROMF:4738 FA 42 C9         ld   a,(C942)
 ROMF:473B EA AE C8         ld   (C8AE),a
 ROMF:473E EF 0B 60 48                          // Shuts off Window Display, LCD STAT Interrupt, and LYC=LY Coincidence Interrupt
 ROMF:4742 AF               xor  a
 ROMF:4743 C9               ret                 // Controls for Gold submenu of Design Maps; ends with A = 0 when closed
 ROMF:4744 3E 03            ld   a,03
 ROMF:4746 EA 45 C9         ld   (C945),a
 ROMF:4749 FA AF C8         ld   a,(C8AF)
 ROMF:474C EA 41 C9         ld   (C941),a
 ROMF:474F FA B0 C8         ld   a,(C8B0)
 ROMF:4752 EA 42 C9         ld   (C942),a
 ROMF:4755 AF               xor  a
 ROMF:4756 EA 44 C9         ld   (C944),a
 ROMF:4759 3E 63            ld   a,63
 ROMF:475B EA 43 C9         ld   (C943),a
 ROMF:475E AF               xor  a
 ROMF:475F EA 40 C9         ld   (C940),a
 ROMF:4762 CD 3A 4C         call 4C3A           // Sets up text
 ROMF:4765 16 55            ld   d,55
 ROMF:4767 CD E2 4D         call 4DE2           // Sets up right pointer arrow for choice Red Star
 ROMF:476A 3E 68            ld   a,68
 ROMF:476C EF 0B 22 48                          // Window scrolls up 4 pixels per frame from Y = 152 to Y = A (A must be a multiple of 4 to avoid an infinite loop error)
 ROMF:4770 CD B4 4B         call 4BB4           // Controls for value manipulation in submenu in Design Maps; ends with A = 0 if closed with A button, A = -1 if closed with B button
 ROMF:4773 FE FF            cp   a,FF
 ROMF:4775 28 0C            jr   z,4783         // B button ending
 ROMF:4777 FA 41 C9         ld   a,(C941)
 ROMF:477A EA AF C8         ld   (C8AF),a
 ROMF:477D FA 42 C9         ld   a,(C942)
 ROMF:4780 EA B0 C8         ld   (C8B0),a
 ROMF:4783 EF 0B 60 48                          // Shuts off Window Display, LCD STAT Interrupt, and LYC=LY Coincidence Interrupt
 ROMF:4787 AF               xor  a
 ROMF:4788 C9               ret                 // Controls for Parts submenu of Design Maps; ends with A = 0 when closed
 ROMF:4789 CD 64 21         call 2164           // Empties $FFB1 and $FFB2
 ROMF:478C CD B4 07         call 07B4           // Shifts palettes closer to all white over the span of 8 frames
 ROMF:478F 11 A5 C8         ld   de,C8A5
 ROMF:4792 01 08 00         ld   bc,0008
 ROMF:4795 21 2F CC         ld   hl,CC2F
 ROMF:4798 CD 50 3B         call 3B50           // (HL ~ HL+BC-1) = (DE ~ DE+BC-1) (Map Name uploaded)
 ROMF:479B 3E 00            ld   a,00
 ROMF:479D 22               ldi  (hl),a
 ROMF:479E 3E 02            ld   a,02
 ROMF:47A0 EF 14 4C 4E                          // Naming Screen procedure as a whole
 ROMF:47A4 11 2F CC         ld   de,CC2F
 ROMF:47A7 21 A5 C8         ld   hl,C8A5
 ROMF:47AA 01 08 00         ld   bc,0008
 ROMF:47AD CD 50 3B         call 3B50           // (HL ~ HL+BC-1) = (DE ~ DE+BC-1) (Map Name downloaded)
 ROMF:47B0 3E FE            ld   a,FE
 ROMF:47B2 C9               ret                 // Controls for Name submenu of Design Maps; ends with A = -2 when closed
 ROMF:47B3 CD 79 48         call 4879           // Controls for Confirm Selection; result is A = 0 for confirmation, -1 otherwise
 ROMF:47B6 F5               push af
 ROMF:47B7 EF 0B 60 48                          // Shuts off Window Display, LCD STAT Interrupt, and LYC=LY Coincidence Interrupt
 ROMF:47BB F1               pop  af
 ROMF:47BC FE FF            cp   a,FF
 ROMF:47BE 28 03            jr   z,47C3         // End immediately with A = 0 if Save cancelled
 ROMF:47C0 CD C5 47         call 47C5           // Save confirmation attempt stuff; ends with A = 0 if Save is successful, -1 if not due to missing HQs
 ROMF:47C3 AF               xor  a
 ROMF:47C4 C9               ret                 // Controls for Save submenu of Design Maps; ends with A = 0 when closed
 ROMF:47C5 FA 4B C6         ld   a,(C64B)
 ROMF:47C8 FE 01            cp   a,01           // Red Star HQ check
 ROMF:47CA 20 1C            jr   nz,47E8
 ROMF:47CC FA 56 C6         ld   a,(C656)
 ROMF:47CF FE 01            cp   a,01           // White Moon HQ check
 ROMF:47D1 20 15            jr   nz,47E8        // Failure to place 1 of each results in ending with A = -1 in addition to a warning
 ROMF:47D3 FA 89 C9         ld   a,(C989)
 ROMF:47D6 EA B1 C8         ld   (C8B1),a
 ROMF:47D9 FA 8A C9         ld   a,(C98A)
 ROMF:47DC EA B2 C8         ld   (C8B2),a
 ROMF:47DF FA 4F CA         ld   a,(CA4F)
 ROMF:47E2 EF 13 FE 5C                          // Hardwrites saved Custom Map data
 ROMF:47E6 AF               xor  a
 ROMF:47E7 C9               ret                 // Handles Save command stuff
 ROMF:47E8 CD EE 47         call 47EE           // Handles Save Without HQs warning
 ROMF:47EB 3E FF            ld   a,FF
 ROMF:47ED C9               ret                 // Save confirmation attempt stuff; ends with A = 0 if Save is successful, -1 if not due to missing HQs
 ROMF:47EE 3E 03            ld   a,03
 ROMF:47F0 CD 44 38         call 3844
 ROMF:47F3 EF 0B 00 47                          // set 0,WRA4($D000 + ($C98D) * 16)
 ROMF:47F7 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMF:47FA CD D2 04         call 04D2           // Next frame
 ROMF:47FD 01 20 00         ld   bc,0020
 ROMF:4800 11 05 14         ld   de,1405
 ROMF:4803 EF 10 09 6A                          // Tile placement and coloring handled for [$9C00] table 20x5 using [$DC6C] and [$DC6D] as the base
 ROMF:4807 21 37 48         ld   hl,4837
 ROMF:480A CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:480D 21 49 48         ld   hl,4849
 ROMF:4810 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:4813 21 55 48         ld   hl,4855
 ROMF:4816 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:4819 3E 68            ld   a,68
 ROMF:481B EF 0B 22 48                          // Window scrolls up 4 pixels per frame from Y = 152 to Y = A (A must be a multiple of 4 to avoid an infinite loop error)
 ROMF:481F CD A2 05         call 05A2           // Button update, next frame
 ROMF:4822 F0 91            ld   a,(ff00+91)
 ROMF:4824 CB 47            bit  0,a            // A
 ROMF:4826 20 06            jr   nz,482E
 ROMF:4828 CB 4F            bit  1,a            // B
 ROMF:482A 20 02            jr   nz,482E
 ROMF:482C 18 F1            jr   481F           // Waiting for A/B Button press
 ROMF:482E EF 0B 60 48                          // Shuts off Window Display, LCD STAT Interrupt, and LYC=LY Coincidence Interrupt
 ROMF:4832 EF 0B F9 46                          // res 0,WRA4[$D000 + ($C98D) * 16]
 ROMF:4836 C9               ret                 // Handles Save Without HQs warning
 
 ROMF:4837 02 21                                // "Incorrect HQ count.."
 ROMF:4839 0D 4E 15 79 66 E5 DE 70 E8 6C 68 75 62 79 EB 00
 ROMF:4849 02 22                                // "..disallows Save."
 ROMF:484B 0F 51 40 EB 67 7F 6E DD 57 00
 ROMF:4855 02 23                                // "Please place 1 each."
 ROMF:4857 82 6A E5 72 7A 62 71 6C 73 68 E8 6B 62 57 00

 ROMF:4866 CD C7 48         call 48C7           // Controls for End submenu in Design Maps; ends with A = 0 for No or Successful Save, -1 otherwise
 ROMF:4869 F5               push af
 ROMF:486A EF 0B 60 48                          // Shuts off Window Display, LCD STAT Interrupt, and LYC=LY Coincidence Interrupt
 ROMF:486E F1               pop  af
 ROMF:486F FE FF            cp   a,FF
 ROMF:4871 20 03            jr   nz,4876        // Ends with A = -1 for successful quit
 ROMF:4873 AF               xor  a
 ROMF:4874 18 02            jr   4878           // Ends with A = 0 for no/unsucessful quit
 ROMF:4876 3E FF            ld   a,FF
 ROMF:4878 C9               ret                 // Controls for End submenu as a whole in Design Maps; A = -1 for No or Successful Save (will quit), 0 otherwise
 ROMF:4879 3E 08            ld   a,08
 ROMF:487B EA 45 C9         ld   (C945),a
 ROMF:487E AF               xor  a
 ROMF:487F EA 40 C9         ld   (C940),a       // Defaults to No
 ROMF:4882 CD 3A 4C         call 4C3A           // Sets up text
 ROMF:4885 16 55            ld   d,55
 ROMF:4887 CD E2 4D         call 4DE2           // Sets up right pointer arrow for choice No
 ROMF:488A 3E 68            ld   a,68
 ROMF:488C EF 0B 22 48                          // Window scrolls up 4 pixels per frame from Y = 152 to Y = A (A must be a multiple of 4 to avoid an infinite loop error)
 ROMF:4890 CD A2 05         call 05A2           // Button update, next frame
 ROMF:4893 F0 92            ld   a,(ff00+92)
 ROMF:4895 CB 47            bit  0,a            // A
 ROMF:4897 20 18            jr   nz,48B1
 ROMF:4899 CB 4F            bit  1,a            // B
 ROMF:489B 20 1F            jr   nz,48BC
 ROMF:489D CB 77            bit  6,a            // Up
 ROMF:489F 20 06            jr   nz,48A7
 ROMF:48A1 CB 7F            bit  7,a            // Down
 ROMF:48A3 20 02            jr   nz,48A7
 ROMF:48A5 18 E9            jr   4890           // Wait for button input
 ROMF:48A7 FA 40 C9         ld   a,(C940)       // Up/Down pressed
 ROMF:48AA EE 01            xor  a,01           // Menu choice changed
 ROMF:48AC CD CF 4D         call 4DCF           // Updates right pointing arrow location for choice within submenu of Design Maps
 ROMF:48AF 18 DF            jr   4890           // Further button input wait
 ROMF:48B1 3E 02            ld   a,02           // A button pressed
 ROMF:48B3 CD 44 38         call 3844
 ROMF:48B6 FA 40 C9         ld   a,(C940)
 ROMF:48B9 A7               and  a
 ROMF:48BA 20 09            jr   nz,48C5        // For Yes, end immediately with A = 0
 ROMF:48BC 3E 0C            ld   a,0C           // B button pressed
 ROMF:48BE CD 44 38         call 3844
 ROMF:48C1 3E FF            ld   a,FF
 ROMF:48C3 18 01            jr   48C6
 ROMF:48C5 AF               xor  a
 ROMF:48C6 C9               ret                 // Controls for Confirm Selection; result is A = 0 for confirmation, -1 otherwise
 ROMF:48C7 3E 09            ld   a,09
 ROMF:48C9 EA 45 C9         ld   (C945),a
 ROMF:48CC AF               xor  a
 ROMF:48CD EA 40 C9         ld   (C940),a       // Defaults to Save End
 ROMF:48D0 01 20 00         ld   bc,0020
 ROMF:48D3 11 06 14         ld   de,1406
 ROMF:48D6 EF 10 09 6A                          // Tile placement and coloring handled for [$9C00] table 20x6 using [$DC6C] and [$DC6D] as the base
 ROMF:48DA 21 54 49         ld   hl,4954        // "End?"
 ROMF:48DD CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:48E0 21 62 49         ld   hl,4962        // "Save End"
 ROMF:48E3 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:48E6 21 70 49         ld   hl,4970        // "No Save End"
 ROMF:48E9 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:48EC 21 80 49         ld   hl,4980        // "Back"
 ROMF:48EF CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:48F2 16 55            ld   d,55
 ROMF:48F4 CD E2 4D         call 4DE2           // Sets up right pointer arrow for choice Save End
 ROMF:48F7 3E 60            ld   a,60
 ROMF:48F9 EF 0B 22 48                          // Window scrolls up 4 pixels per frame from Y = 152 to Y = A (A must be a multiple of 4 to avoid an infinite loop error)
 ROMF:48FD CD A2 05         call 05A2           // Button update, next frame
 ROMF:4900 F0 92            ld   a,(ff00+92)
 ROMF:4902 CB 47            bit  0,a            // A
 ROMF:4904 20 2A            jr   nz,4930
 ROMF:4906 CB 4F            bit  1,a            // B
 ROMF:4908 20 3F            jr   nz,4949
 ROMF:490A CB 77            bit  6,a            // Up
 ROMF:490C 20 06            jr   nz,4914
 ROMF:490E CB 7F            bit  7,a            // Down
 ROMF:4910 20 10            jr   nz,4922
 ROMF:4912 18 E9            jr   48FD           // Waiting for button input
 ROMF:4914 FA 40 C9         ld   a,(C940)       // Up was pressed
 ROMF:4917 A7               and  a
 ROMF:4918 20 02            jr   nz,491C
 ROMF:491A 3E 03            ld   a,03
 ROMF:491C 3D               dec  a
 ROMF:491D CD CF 4D         call 4DCF           // Updates right pointing arrow location for choice within End submenu of Design Maps
 ROMF:4920 18 DB            jr   48FD           // Further button input wait
 ROMF:4922 FA 40 C9         ld   a,(C940)       // Down was pressed
 ROMF:4925 3C               inc  a
 ROMF:4926 FE 03            cp   a,03
 ROMF:4928 20 01            jr   nz,492B
 ROMF:492A AF               xor  a
 ROMF:492B CD CF 4D         call 4DCF           // Updates right pointing arrow location for choice within End submenu of Design Maps
 ROMF:492E 18 CD            jr   48FD           // Further button input wait
 ROMF:4930 3E 02            ld   a,02           // A was pressed
 ROMF:4932 CD 44 38         call 3844
 ROMF:4935 FA 40 C9         ld   a,(C940)
 ROMF:4938 FE 01            cp   a,01
 ROMF:493A 28 16            jr   z,4952         // End with A = 0 if ending without saving
 ROMF:493C FE 02            cp   a,02
 ROMF:493E 28 09            jr   z,4949
 ROMF:4940 CD C5 47         call 47C5           // Save confirmation attempt stuff; ends with A = 0 if Save is successful, -1 if not due to missing HQs
 ROMF:4943 FE FF            cp   a,FF
 ROMF:4945 28 0C            jr   z,4953         // Ends immediately with A = -1 if missing the HQs
 ROMF:4947 18 09            jr   4952
 ROMF:4949 3E 0C            ld   a,0C           // B button pressed or Back selected
 ROMF:494B CD 44 38         call 3844
 ROMF:494E 3E FF            ld   a,FF
 ROMF:4950 18 01            jr   4953
 ROMF:4952 AF               xor  a
 ROMF:4953 C9               ret                 // Controls for End submenu in Design Maps; ends with A = 0 for No or Successful Save, -1 otherwise
 
 ROMF:4954 02 21                                // "End?"
 ROMF:4956 6C FD 63 D8 FE 63 6C 7F 6D 66 56 00
 ROMF:4962 04 22                                // "Save End"
 ROMF:4964 0F 51 40 6C 73 6C FD 63 D8 FE 63 00
 ROMF:4970 04 23                                // "No Save End"
 ROMF:4972 0F 51 40 6C 75 62 EB 6C FD 63 D8 FE 63 00
 ROMF:4980 04 24                                // "Back"
 ROMF:4982 D3 EC D9 00

 ROMF:4986 3E 02            ld   a,02
 ROMF:4988 CD 44 38         call 3844
 ROMF:498B FA 52 CA         ld   a,(CA52)
 ROMF:498E A7               and  a
 ROMF:498F 20 0D            jr   nz,499E        // Branches for Unit Mode
 ROMF:4991 FA 57 CA         ld   a,(CA57)
 ROMF:4994 FE 03            cp   a,03
 ROMF:4996 DA 9E 49         jp   c,499E         // Branches for properties
 ROMF:4999 CD 07 4A         call 4A07           // Controls for Fill submenu in Design Maps; A = 0 for B Button end, preserved active WRAM Bank number for A Button end
 ROMF:499C 18 4E            jr   49EC
 ROMF:499E 3E 03            ld   a,03
 ROMF:49A0 CD 44 38         call 3844
 ROMF:49A3 EF 0B 00 47                          // set 0,WRA4($D000 + ($C98D) * 16)
 ROMF:49A7 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMF:49AA CD D2 04         call 04D2           // Next frame
 ROMF:49AD EF 01 FC 40                          // Graphics holding: VRA0($8600) to VRA0($87FF) holds Hiragana up to "ma", then VRA0($8D00) to ($8FFF) holds rest of Hiragana
 ROMF:49B1 01 20 00         ld   bc,0020
 ROMF:49B4 11 05 14         ld   de,1405
 ROMF:49B7 EF 10 09 6A                          // Tile placement and coloring handled for [$9C00] table 20x5 using [$DC6C] and [$DC6D] as the base
 ROMF:49BB 21 ED 49         ld   hl,49ED
 ROMF:49BE CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:49C1 21 F9 49         ld   hl,49F9
 ROMF:49C4 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:49C7 3E 68            ld   a,68
 ROMF:49C9 EF 0B 22 48                          // Window scrolls up 4 pixels per frame from Y = 152 to Y = A (A must be a multiple of 4 to avoid an infinite loop error)
 ROMF:49CD CD A2 05         call 05A2           // Button update, next frame
 ROMF:49D0 F0 91            ld   a,(ff00+91)
 ROMF:49D2 CB 47            bit  0,a            // A
 ROMF:49D4 20 0A            jr   nz,49E0
 ROMF:49D6 CB 4F            bit  1,a            // B
 ROMF:49D8 20 06            jr   nz,49E0
 ROMF:49DA CB 5F            bit  3,a            // Start
 ROMF:49DC 20 02            jr   nz,49E0
 ROMF:49DE 18 ED            jr   49CD
 ROMF:49E0 EF 0B 60 48                          // Shuts off Window Display, LCD STAT Interrupt, and LYC=LY Coincidence Interrupt
 ROMF:49E4 EF 0B 21 46                          // Sets up Cursor tiles in VRA0 tiles 96~122
 ROMF:49E8 EF 0B F9 46                          // res 0,WRA4[$D000 + ($C98D) * 16]
 ROMF:49EC C9               ret                 // Controls for Fill submenu as a whole in Design Maps; A = 0~7 when closed

 ROMF:49ED 02 21                                // "Units and buildings.."
 ROMF:49EF EF 70 62 D4 70 73 D3 79 7A 00
 ROMF:49F9 02 22                                // "..can't be used for Fill."
 ROMF:49FB 77 D8 72 EF 6C EB 67 7F 6E DD 57 00

 ROMF:4A07 AF               xor  a
 ROMF:4A08 EA 55 CA         ld   (CA55),a
 ROMF:4A0B 01 20 00         ld   bc,0020
 ROMF:4A0E 11 05 14         ld   de,1405
 ROMF:4A11 EF 10 09 6A                          // Tile placement and coloring handled for [$9C00] table 20x5 using [$DC6C] and [$DC6D] as the base
 ROMF:4A15 CD E7 4A         call 4AE7           // Establishes text for Fill command on Design Maps
 ROMF:4A18 EF 0B 00 47                          // set 0,WRA4($D000 + ($C98D) * 16)
 ROMF:4A1C CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMF:4A1F CD D2 04         call 04D2           // Next frame
 ROMF:4A22 EF 01 FC 40                          // Graphics holding: VRA0($8600) to VRA0($87FF) holds Hiragana up to "ma", then VRA0($8D00) to ($8FFF) holds rest of Hiragana
 ROMF:4A26 3E 68            ld   a,68
 ROMF:4A28 EF 0B 22 48                          // Window scrolls up 4 pixels per frame from Y = 152 to Y = A (A must be a multiple of 4 to avoid an infinite loop error)
 ROMF:4A2C EF 0B FA 74                          // General map view graphics update
 ROMF:4A30 CD 90 44         call 4490           // Handles timer for flashing selected tile's graphics between selected terrain/unit and default graphics to place every 10 frames
 ROMF:4A33 FA 91 CA         ld   a,(CA91)
 ROMF:4A36 A7               and  a
 ROMF:4A37 28 F3            jr   z,4A2C         // Loops back if to 4 lines above if no button presses
 ROMF:4A39 EF 0B 60 48                          // Shuts off Window Display, LCD STAT Interrupt, and LYC=LY Coincidence Interrupt
 ROMF:4A3D EF 0B 21 46                          // Sets up Cursor tiles in VRA0 tiles 96~122
 ROMF:4A41 EF 0B F9 46                          // res 0,WRA4[$D000 + ($C98D) * 16]
 ROMF:4A45 18 0A            jr   4A51
 ROMF:4A47 EF 0B FA 74                          // General map view graphics update (button input wait loop begins here)
 ROMF:4A4B CD 90 44         call 4490           // Handles timer for flashing selected tile's graphics between selected terrain/unit and default graphics to place every 10 frames
 ROMF:4A4E CD 39 4B         call 4B39           // Starting Fill Tile flashing is handled
 ROMF:4A51 FA 91 CA         ld   a,(CA91)
 ROMF:4A54 CB 47            bit  0,a            // A
 ROMF:4A56 20 51            jr   nz,4AA9
 ROMF:4A58 CB 4F            bit  1,a            // B
 ROMF:4A5A 20 38            jr   nz,4A94
 ROMF:4A5C CB 6F            bit  5,a            // Left
 ROMF:4A5E 20 19            jr   nz,4A79
 ROMF:4A60 CB 67            bit  4,a            // Right
 ROMF:4A62 20 0C            jr   nz,4A70
 ROMF:4A64 CB 77            bit  6,a            // Up
 ROMF:4A66 20 1A            jr   nz,4A82
 ROMF:4A68 CB 7F            bit  7,a            // Down
 ROMF:4A6A C2 8B 4A         jp   nz,4A8B
 ROMF:4A6D C3 47 4A         jp   4A47           // Waiting for button input
 ROMF:4A70 CD CE 44         call 44CE           // Establishes graphics of tile where cursor is placed, ($CA51) emptied
 ROMF:4A73 EF 0B 25 75                          // If view will shift right: ($FFAC) 4 byte holds: OR ($FFAC),$82, ($C98B) + 10, ($C98C), 9; if not, general increase to X coordinate within view
 ROMF:4A77 18 CE            jr   4A47           // Right is done
 ROMF:4A79 CD CE 44         call 44CE           // Establishes graphics of tile where cursor is placed, ($CA51) emptied
 ROMF:4A7C EF 0B 64 75                          // If view will shift left: ($FFAC) 4 byte holds: OR ($FFAC),$81, ($C98B) - 1, ($C98C), 9; if not, general decrease to X coordinate within view
 ROMF:4A80 18 C5            jr   4A47           // Left is done
 ROMF:4A82 CD CE 44         call 44CE           // Establishes graphics of tile where cursor is placed, ($CA51) emptied
 ROMF:4A85 EF 0B DB 75                          // If view will shift up: ($FFAC) 4 byte holds: OR ($FFAC),$84, ($C98B) - (($C98C)%2), ($C98C) - 1, 10 + (($C98C)%2); if not, general decrease to Y coordinate within view
 ROMF:4A89 18 BC            jr   4A47           // Up is done
 ROMF:4A8B CD CE 44         call 44CE           // Establishes graphics of tile where cursor is placed, ($CA51) emptied
 ROMF:4A8E EF 0B 9C 75                          // If view will shift down: ($FFAC) 4 byte holds: OR ($FFAC),$88, ($C98B) - (($C98C)%2), ($C98C) + 9, 10 + (($C98C)%2); if not, general increase to Y coordinate within view
 ROMF:4A92 18 B3            jr   4A47           // Down is done
 ROMF:4A94 3E 0C            ld   a,0C
 ROMF:4A96 CD 44 38         call 3844
 ROMF:4A99 FA 55 CA         ld   a,(CA55)
 ROMF:4A9C A7               and  a
 ROMF:4A9D 28 47            jr   z,4AE6         // Ends immediately if first fill tile isn't set
 ROMF:4A9F 3D               dec  a
 ROMF:4AA0 EA 55 CA         ld   (CA55),a       // Shuts off flag for first fill tile being set
 ROMF:4AA3 CD 8D 4B         call 4B8D           // Establishes default terrain/unit tile graphics on first Fill tile coordinates, resets first Fill tile flashing timer
 ROMF:4AA6 C3 0B 4A         jp   4A0B           // Basically restarts/ends entire procedure for B Button
 ROMF:4AA9 3E 0A            ld   a,0A
 ROMF:4AAB CD 44 38         call 3844
 ROMF:4AAE FA 55 CA         ld   a,(CA55)
 ROMF:4AB1 A7               and  a
 ROMF:4AB2 20 14            jr   nz,4AC8        // Branches if first Fill tile is already set
 ROMF:4AB4 FA 91 C9         ld   a,(C991)
 ROMF:4AB7 EA 53 CA         ld   (CA53),a
 ROMF:4ABA FA 92 C9         ld   a,(C992)
 ROMF:4ABD EA 54 CA         ld   (CA54),a
 ROMF:4AC0 3E 01            ld   a,01
 ROMF:4AC2 EA 55 CA         ld   (CA55),a       // Sets flag indicating that first fill tile is set
 ROMF:4AC5 C3 0B 4A         jp   4A0B           // Basically restarts procedure due to similar controls for ending tile
 ROMF:4AC8 FA 53 CA         ld   a,(CA53)
 ROMF:4ACB 47               ld   b,a
 ROMF:4ACC FA 54 CA         ld   a,(CA54)
 ROMF:4ACF 4F               ld   c,a
 ROMF:4AD0 FA 91 C9         ld   a,(C991)
 ROMF:4AD3 57               ld   d,a
 ROMF:4AD4 FA 92 C9         ld   a,(C992)
 ROMF:4AD7 5F               ld   e,a
 ROMF:4AD8 FA 65 CA         ld   a,(CA65)       // A = Selected terrain ID
 ROMF:4ADB CD DA 52         call 52DA           // Rectangle BC to DE is filled with selected terrain, units within erased with appropriate headcount decrements
 ROMF:4ADE EF 0B 78 41                          // Sets base counts of each property type, as well as each HQ's coordinates
 ROMF:4AE2 EF 0B 8A 42                          // Establishes all on-screen tiles' entire graphics, ($FF95) 2 byte holds screen shift coordinates
 ROMF:4AE6 C9               ret                 // Controls for Fill submenu in Design Maps; A = 0 for B Button end, preserved active WRAM Bank number for A Button end
 ROMF:4AE7 21 08 4B         ld   hl,4B08        // "Fill extent's.."
 ROMF:4AEA CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:4AED FA 55 CA         ld   a,(CA55)
 ROMF:4AF0 A7               and  a
 ROMF:4AF1 20 08            jr   nz,4AFB
 ROMF:4AF3 21 14 4B         ld   hl,4B14        // "..start HEX.."
 ROMF:4AF6 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:4AF9 18 06            jr   4B01
 ROMF:4AFB 21 20 4B         ld   hl,4B20        // "..end HEX.."
 ROMF:4AFE CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:4B01 21 2B 4B         ld   hl,4B2B        // "..please decide."
 ROMF:4B04 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:4B07 C9               ret                 // Establishes text for Fill command on Design Maps

 ROMF:4B08 02 21                                // "Fill extent's.."
 ROMF:4B0A 77 D8 72 EF 6D 7A DD 62 79 00
 ROMF:4B14 02 22                                // "..start HEX.."
 ROMF:4B16 6B 62 6C FE 79 92 8F A2 60 00
 ROMF:4B20 02 22                                // "..end HEX.."
 ROMF:4B22 6B 62 E2 79 92 8F A2 60 00
 ROMF:4B2B 02 23                                // "..please decide."
 ROMF:4B2D 69 FF 73 62 6C 73 68 E8 6B 62 57 00

 ROMF:4B39 FA 55 CA         ld   a,(CA55)
 ROMF:4B3C A7               and  a
 ROMF:4B3D 28 2F            jr   z,4B6E         // End immediately if first fill tile isn't set
 ROMF:4B3F FA 53 CA         ld   a,(CA53)
 ROMF:4B42 47               ld   b,a
 ROMF:4B43 FA 54 CA         ld   a,(CA54)
 ROMF:4B46 4F               ld   c,a
 ROMF:4B47 EF 0B C6 44                          // A = 0 if coordinates are in view; 1 if not
 ROMF:4B4B A7               and  a
 ROMF:4B4C 20 20            jr   nz,4B6E        // End immediately if first Fill tile isn't in view
 ROMF:4B4E FA 56 CA         ld   a,(CA56)
 ROMF:4B51 3C               inc  a
 ROMF:4B52 EA 56 CA         ld   (CA56),a
 ROMF:4B55 FE 0A            cp   a,0A
 ROMF:4B57 28 0D            jr   z,4B66
 ROMF:4B59 FE 14            cp   a,14
 ROMF:4B5B 28 0E            jr   z,4B6B
 ROMF:4B5D FE 1E            cp   a,1E
 ROMF:4B5F 20 0D            jr   nz,4B6E
 ROMF:4B61 CD 8D 4B         call 4B8D           // Establishes default terrain/unit tile graphics on first Fill tile coordinates, resets first Fill tile flashing timer
 ROMF:4B64 18 08            jr   4B6E           // Ended after frame 30 procedure
 ROMF:4B66 CD 6F 4B         call 4B6F           // Establishes selected terrain tile graphics on first Fill tile coordinates (Frame 10 procedure)
 ROMF:4B69 18 03            jr   4B6E           // Ended after frame 10 procedure; frame 20 procedure is right below
 ROMF:4B6B CD 7F 4B         call 4B7F           // Establishes Null tile graphics on first Fill tile coordinates (Frame 20 procedure)
 ROMF:4B6E C9               ret                 // Starting Fill Tile flashing is handled
 ROMF:4B6F FA 53 CA         ld   a,(CA53)
 ROMF:4B72 47               ld   b,a
 ROMF:4B73 FA 54 CA         ld   a,(CA54)
 ROMF:4B76 4F               ld   c,a
 ROMF:4B77 FA 65 CA         ld   a,(CA65)       // A = Selected terrain ID
 ROMF:4B7A EF 0B 4D 44                          // Establishes selected terrain tile graphics on first Fill tile coordinates
 ROMF:4B7E C9               ret  
 ROMF:4B7F FA 53 CA         ld   a,(CA53)
 ROMF:4B82 47               ld   b,a
 ROMF:4B83 FA 54 CA         ld   a,(CA54)
 ROMF:4B86 4F               ld   c,a
 ROMF:4B87 AF               xor  a
 ROMF:4B88 EF 0B 4D 44                          // Establishes Null tile graphics on first Fill tile coordinates
 ROMF:4B8C C9               ret  
 ROMF:4B8D FA 53 CA         ld   a,(CA53)
 ROMF:4B90 47               ld   b,a
 ROMF:4B91 FA 54 CA         ld   a,(CA54)
 ROMF:4B94 4F               ld   c,a            // BC holds coordinates of first Fill tile
 ROMF:4B95 EF 0B C6 44                          // A = 0 if coordinates are in view; 1 if not
 ROMF:4B99 A7               and  a
 ROMF:4B9A 20 13            jr   nz,4BAF        // End with simply resetting first Fill tile flashing timer to 0 if not in view
 ROMF:4B9C EF 0B 92 47                          // A = Unit Type of occupying unit
 ROMF:4BA0 A7               and  a
 ROMF:4BA1 20 06            jr   nz,4BA9
 ROMF:4BA3 EF 0B 70 47                          // A = Terrain base ID
 ROMF:4BA7 18 02            jr   4BAB
 ROMF:4BA9 C6 34            add  a,34
 ROMF:4BAB EF 0B 4D 44                          // Establishes default terrain/unit tile graphics on first Fill tile coordinates
 ROMF:4BAF AF               xor  a
 ROMF:4BB0 EA 56 CA         ld   (CA56),a
 ROMF:4BB3 C9               ret  
 ROMF:4BB4 CD A2 05         call 05A2           // Button update, next frame
 ROMF:4BB7 F0 92            ld   a,(ff00+92)
 ROMF:4BB9 CB 47            bit  0,a            // A
 ROMF:4BBB 20 16            jr   nz,4BD3
 ROMF:4BBD CB 4F            bit  1,a            // B
 ROMF:4BBF 20 1A            jr   nz,4BDB
 ROMF:4BC1 CB 6F            bit  5,a            // Left
 ROMF:4BC3 20 1E            jr   nz,4BE3
 ROMF:4BC5 CB 67            bit  4,a            // Right
 ROMF:4BC7 20 3F            jr   nz,4C08
 ROMF:4BC9 CB 77            bit  6,a            // Up
 ROMF:4BCB 20 60            jr   nz,4C2D
 ROMF:4BCD CB 7F            bit  7,a            // Down
 ROMF:4BCF 20 5C            jr   nz,4C2D
 ROMF:4BD1 18 E1            jr   4BB4           // Waiting for button input
 ROMF:4BD3 3E 02            ld   a,02           // A was pressed
 ROMF:4BD5 CD 44 38         call 3844
 ROMF:4BD8 AF               xor  a
 ROMF:4BD9 18 07            jr   4BE2           // End immediately with A = 0
 ROMF:4BDB 3E 0C            ld   a,0C           // B was pressed
 ROMF:4BDD CD 44 38         call 3844
 ROMF:4BE0 3E FF            ld   a,FF
 ROMF:4BE2 C9               ret  
 ROMF:4BE3 3E 01            ld   a,01           // Left was pressed
 ROMF:4BE5 CD 44 38         call 3844
 ROMF:4BE8 FA 40 C9         ld   a,(C940)
 ROMF:4BEB 21 41 C9         ld   hl,C941
 ROMF:4BEE CD BC 29         call 29BC           // HL += A
 ROMF:4BF1 7E               ld   a,(hl)
 ROMF:4BF2 47               ld   b,a
 ROMF:4BF3 FA 44 C9         ld   a,(C944)
 ROMF:4BF6 B8               cp   b
 ROMF:4BF7 20 09            jr   nz,4C02        // Match results in rotation to maximum
 ROMF:4BF9 FA 43 C9         ld   a,(C943)
 ROMF:4BFC 77               ld   (hl),a
 ROMF:4BFD CD 65 4D         call 4D65           // Updates number text of given choice on submenu in Design Maps; Gold and Parts both have 1s digit unaffected without condition
 ROMF:4C00 18 B2            jr   4BB4
 ROMF:4C02 35               dec  (hl)
 ROMF:4C03 CD 65 4D         call 4D65           // Updates number text of given choice on submenu in Design Maps; Gold and Parts both have 1s digit unaffected without condition
 ROMF:4C06 18 AC            jr   4BB4           // Further button input wait
 ROMF:4C08 3E 01            ld   a,01           // Right was pressed
 ROMF:4C0A CD 44 38         call 3844
 ROMF:4C0D FA 40 C9         ld   a,(C940)
 ROMF:4C10 21 41 C9         ld   hl,C941
 ROMF:4C13 CD BC 29         call 29BC           // HL += A
 ROMF:4C16 7E               ld   a,(hl)
 ROMF:4C17 47               ld   b,a
 ROMF:4C18 FA 43 C9         ld   a,(C943)
 ROMF:4C1B B8               cp   b
 ROMF:4C1C 20 09            jr   nz,4C27        // Match results in rotation to maximum
 ROMF:4C1E FA 44 C9         ld   a,(C944)
 ROMF:4C21 77               ld   (hl),a
 ROMF:4C22 CD 65 4D         call 4D65           // Updates number text of given choice on submenu in Design Maps; Gold and Parts both have 1s digit unaffected without condition
 ROMF:4C25 18 8D            jr   4BB4
 ROMF:4C27 34               inc  (hl)
 ROMF:4C28 CD 65 4D         call 4D65           // Updates number text of given choice on submenu in Design Maps; Gold and Parts both have 1s digit unaffected without condition
 ROMF:4C2B 18 87            jr   4BB4           // Further button input wait
 ROMF:4C2D FA 40 C9         ld   a,(C940)       // Up or Down was pressed
 ROMF:4C30 EE 01            xor  a,01
 ROMF:4C32 CD CF 4D         call 4DCF           // Updates right pointing arrow location for choice within submenu of Design Maps
 ROMF:4C35 3E 02            ld   a,02
 ROMF:4C37 C3 B4 4B         jp   4BB4           // Further button input wait
 ROMF:4C3A 01 20 00         ld   bc,0020
 ROMF:4C3D 11 05 14         ld   de,1405
 ROMF:4C40 EF 10 09 6A                          // Tile placement and coloring handled for [$9C00] table 20x5 using [$DC6C] and [$DC6D] as the base
 ROMF:4C44 16 55            ld   d,55           // Right pointing arrow
 ROMF:4C46 CD E2 4D         call 4DE2           // Sets up right pointing arrow for default choice
 ROMF:4C49 FA 45 C9         ld   a,(C945)
 ROMF:4C4C FE 00            cp   a,00           // Unit Arrange
 ROMF:4C4E 28 10            jr   z,4C60
 ROMF:4C50 FE 01            cp   a,01           // Map Size
 ROMF:4C52 28 1F            jr   z,4C73
 ROMF:4C54 FE 02            cp   a,02           // Gold
 ROMF:4C56 28 2F            jr   z,4C87
 ROMF:4C58 FE 03            cp   a,03           // Materials
 ROMF:4C5A 28 3F            jr   z,4C9B
 ROMF:4C5C FE 08            cp   a,08           // Save
 ROMF:4C5E 28 4F            jr   z,4CAF
 ROMF:4C60 21 30 4D         ld   hl,4D30        // "Arrange Mode"
 ROMF:4C63 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:4C66 21 39 4D         ld   hl,4D39        // "Map Edit"
 ROMF:4C69 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:4C6C 21 44 4D         ld   hl,4D44        // "Unit Arrange"
 ROMF:4C6F CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:4C72 C9               ret  
 ROMF:4C73 21 D5 4C         ld   hl,4CD5        // "Map Size"
 ROMF:4C76 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:4C79 21 DE 4C         ld   hl,4CDE        // "Horizontal"
 ROMF:4C7C CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:4C7F 21 E3 4C         ld   hl,4CE3        // "Vertical"
 ROMF:4C82 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:4C85 18 3B            jr   4CC2           // Sets up number text for both choices on submenu in Design Maps; Gold and Parts not (yet) having 1s digit set up
 ROMF:4C87 21 E8 4C         ld   hl,4CE8        // "Gold"
 ROMF:4C8A CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:4C8D 21 EE 4C         ld   hl,4CEE
 ROMF:4C90 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:4C93 21 FE 4C         ld   hl,4CFE
 ROMF:4C96 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:4C99 18 27            jr   4CC2           // Sets up number text for both choices on submenu in Design Maps; Gold and Parts not (yet) having 1s digit set up
 ROMF:4C9B 21 0E 4D         ld   hl,4D0E        // "Materials"
 ROMF:4C9E CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:4CA1 21 14 4D         ld   hl,4D14
 ROMF:4CA4 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:4CA7 21 22 4D         ld   hl,4D22
 ROMF:4CAA CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:4CAD 18 13            jr   4CC2           // Sets up number text for both choices on submenu in Design Maps; Gold and Parts not (yet) having 1s digit set up
 ROMF:4CAF 21 4F 4D         ld   hl,4D4F        // "Is this okay?"
 ROMF:4CB2 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:4CB5 21 5A 4D         ld   hl,4D5A        // "No"
 ROMF:4CB8 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:4CBB 21 60 4D         ld   hl,4D60        // "Yes"
 ROMF:4CBE CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:4CC1 C9               ret  
 ROMF:4CC2 CD 2E 35         call 352E           // Text catchup
 ROMF:4CC5 3E 01            ld   a,01
 ROMF:4CC7 EA 40 C9         ld   (C940),a
 ROMF:4CCA CD 65 4D         call 4D65           // Updates number text of 2nd choice on submenu in Design Maps; Gold and Parts both have 1s digit unaffected without condition
 ROMF:4CCD AF               xor  a
 ROMF:4CCE EA 40 C9         ld   (C940),a
 ROMF:4CD1 CD 65 4D         call 4D65           // Updates number text of 1st choice on submenu in Design Maps; Gold and Parts both have 1s digit unaffected without condition
 ROMF:4CD4 C9               ret                 // Sets up text on submenu Mode/Size/Gold/Parts/Confirm on Design Maps; 1s digit for both choices on Gold and Parts is not forgotten
 
 ROMF:4CD5 02 21                                // "Map Size"
 ROMF:4CD7 20 50 45 0C 03 36 00
 ROMF:4CDE 07 22                                // "Horizontal"
 ROMF:4CE0 27 0B 00
 ROMF:4CE3 07 23                                // "Vertical"
 ROMF:4CE5 11 14 00

 ROMF:4CE8 02 21                                // "Gold"
 ROMF:4CEA 6C 67 DD 00
 ROMF:4CEE 04 22                                // "Red Star"
 ROMF:4CF0 2B 50 3D 0E 11 51 80 80 80 80 81 81 81 00
 ROMF:4CFE 04 23                                // "White Moon"
 ROMF:4D00 1F 2D 03 15 22 51 2E 80 80 80 81 81 81 00

 ROMF:4D0E 02 21                                // "Parts"
 ROMF:4D10 6C E3 62 00
 ROMF:4D14 04 22                                // "Red Star"
 ROMF:4D16 2B 50 3D 0E 11 51 80 80 80 80 81 00
 ROMF:4D22 04 23                                // "White Moon"
 ROMF:4D24 1F 2D 03 15 22 51 2E 80 80 80 81 00

 ROMF:4D30 02 21                                // "Arrange Mode"
 ROMF:4D32 7A 62 71 24 51 3D 00
 ROMF:4D39 06 22                                // "Map Edit"
 ROMF:4D3B 20 50 45 05 3C 49 50 15 00
 ROMF:4D44 06 23                                // "Unit Arrange"
 ROMF:4D46 26 17 50 15 7A 62 71 80 00

 ROMF:4D4F 02 21                                // "Is this okay?"
 ROMF:4D51 D6 DB 6C 62 EB 6D 66 56 00
 ROMF:4D5A 09 22                                // "No"
 ROMF:4D5C 62 62 64 00
 ROMF:4D60 09 23                                // "Yes"
 ROMF:4D62 7A 62 00

 ROMF:4D65 FA 45 C9         ld   a,(C945)
 ROMF:4D68 4F               ld   c,a
 ROMF:4D69 06 00            ld   b,00           // BC holds chosen submenu
 ROMF:4D6B 21 C0 4D         ld   hl,4DC0
 ROMF:4D6E 09               add  hl,bc
 ROMF:4D6F 46               ld   b,(hl)
 ROMF:4D70 FA 40 C9         ld   a,(C940)
 ROMF:4D73 C6 22            add  a,22
 ROMF:4D75 4F               ld   c,a            // BC holds coordinates....probably
 ROMF:4D76 21 41 C9         ld   hl,C941
 ROMF:4D79 FA 40 C9         ld   a,(C940)
 ROMF:4D7C 5F               ld   e,a
 ROMF:4D7D 16 00            ld   d,00
 ROMF:4D7F 19               add  hl,de
 ROMF:4D80 7E               ld   a,(hl)
 ROMF:4D81 16 02            ld   d,02
 ROMF:4D83 FA 45 C9         ld   a,(C945)
 ROMF:4D86 FE 02            cp   a,02           // Gold
 ROMF:4D88 28 0B            jr   z,4D95
 ROMF:4D8A FE 03            cp   a,03           // Parts
 ROMF:4D8C 28 21            jr   z,4DAF
 ROMF:4D8E 7E               ld   a,(hl)
 ROMF:4D8F EF 0B 2A 79                          // Upwards of 3 digit number text for VRA0 BC coordinates (A is number, D is total digits)
 ROMF:4D93 18 2A            jr   4DBF
 ROMF:4D95 7E               ld   a,(hl)
 ROMF:4D96 A7               and  a
 ROMF:4D97 20 08            jr   nz,4DA1
 ROMF:4D99 21 C4 4D         ld   hl,4DC4        // 4 digits of placeholder text for 0 Gold
 ROMF:4D9C CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 ROMF:4D9F 18 1E            jr   4DBF
 ROMF:4DA1 EF 0B 2A 79                          // Gold/1K text for VRA0 BC coordinates
 ROMF:4DA5 04               inc  b
 ROMF:4DA6 04               inc  b
 ROMF:4DA7 21 C9 4D         ld   hl,4DC9        // Hundreds and tens digit both set to 0
 ROMF:4DAA CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 ROMF:4DAD 18 10            jr   4DBF
 ROMF:4DAF 7E               ld   a,(hl)
 ROMF:4DB0 A7               and  a
 ROMF:4DB1 20 08            jr   nz,4DBB
 ROMF:4DB3 21 CC 4D         ld   hl,4DCC        // 2 digits of placeholder text for 0 Parts
 ROMF:4DB6 CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 ROMF:4DB9 18 04            jr   4DBF
 ROMF:4DBB EF 0B 2A 79                          // Upwards of 3 digit number text for VRA0 BC coordinates (A is number, D is total digits)
 ROMF:4DBF C9               ret                 // Updates number text of given choice on submenu in Design Maps; Gold and Parts both have 1s digit unaffected without condition

 ROMF:4DC0 FF 0A 0C 0C

 ROMF:4DC4 80 80 80 80 00

 ROMF:4DC9 81 81 00

 ROMF:4DCC 80 80 00

 ROMF:4DCF 16 80            ld   d,80           // Blank
 ROMF:4DD1 CD E2 4D         call 4DE2           // Sets up blank for old choice
 ROMF:4DD4 EA 40 C9         ld   (C940),a       // Update choice
 ROMF:4DD7 16 55            ld   d,55           // Right pointing arrow
 ROMF:4DD9 CD E2 4D         call 4DE2           // Sets up right pointing arrow for new choice
 ROMF:4DDC 3E 01            ld   a,01
 ROMF:4DDE CD 44 38         call 3844
 ROMF:4DE1 C9               ret                 // Updates right pointing arrow location for choice within submenu of Design Maps
 ROMF:4DE2 F5               push af
 ROMF:4DE3 FA 45 C9         ld   a,(C945)
 ROMF:4DE6 4F               ld   c,a
 ROMF:4DE7 06 00            ld   b,00
 ROMF:4DE9 21 FA 4D         ld   hl,4DFA
 ROMF:4DEC 09               add  hl,bc
 ROMF:4DED 46               ld   b,(hl)
 ROMF:4DEE FA 40 C9         ld   a,(C940)       // Choice
 ROMF:4DF1 C6 22            add  a,22
 ROMF:4DF3 4F               ld   c,a            // BC holds coordinates
 ROMF:4DF4 7A               ld   a,d
 ROMF:4DF5 CD ED 34         call 34ED           // [$C300 + [$FFC8]] 3 byte holds: 1, B + C%8 * 32, 152 + C / 8, A; [$FFCA] incremented
 ROMF:4DF8 F1               pop  af
 ROMF:4DF9 C9               ret                 // Sets up character D at pointer location of given choice for submenu of Design Maps

 ROMF:4DFA 05               dec  b
 ROMF:4DFB 06
 ROMF:4DFC 03            ld   b,03
 ROMF:4DFD 03               inc  bc
 ROMF:4DFE FF               rst  38
 ROMF:4DFF FF               rst  38
 ROMF:4E00 FF               rst  38
 ROMF:4E01 FF               rst  38
 ROMF:4E02 08
 ROMF:4E03 03

 ROMF:4E04 FA 52 CA         ld   a,(CA52)
 ROMF:4E07 A7               and  a              // Unit Mode check
 ROMF:4E08 C2 2B 50         jp   nz,502B        // Controls for Unit Selection in Design Maps if Unit Mode is active
 ROMF:4E0B CD CD 4E         call 4ECD           // Establishes terrain selection's basic text and selected terrain types graphics
 ROMF:4E0E CD 52 4F         call 4F52           // Terrain type text established with terrain group selection
 ROMF:4E11 3E 60            ld   a,60
 ROMF:4E13 EF 0B 22 48                          // Window scrolls up 4 pixels per frame from Y = 152 to Y = A (A must be a multiple of 4 to avoid an infinite loop error)
 ROMF:4E17 EF 0B F9 46                          // res 0,WRA4[$D000 + ($C98D) * 16]
 ROMF:4E1B CD A2 05         call 05A2           // Button update, next frame
 ROMF:4E1E CD 33 4F         call 4F33           // Establishes base coordinates for cursor based on selected terrain group
 ROMF:4E21 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMF:4E24 F0 92            ld   a,(ff00+92)
 ROMF:4E26 CB 47            bit  0,a            // A
 ROMF:4E28 20 1A            jr   nz,4E44
 ROMF:4E2A CB 4F            bit  1,a            // B
 ROMF:4E2C 20 16            jr   nz,4E44
 ROMF:4E2E CB 6F            bit  5,a            // Left
 ROMF:4E30 20 34            jr   nz,4E66
 ROMF:4E32 CB 67            bit  4,a            // Right
 ROMF:4E34 20 3C            jr   nz,4E72
 ROMF:4E36 CB 77            bit  6,a            // Up
 ROMF:4E38 20 51            jr   nz,4E8B
 ROMF:4E3A CB 7F            bit  7,a            // Down
 ROMF:4E3C 20 58            jr   nz,4E96
 ROMF:4E3E CB 57            bit  2,a            // Select
 ROMF:4E40 20 09            jr   nz,4E4B
 ROMF:4E42 18 D7            jr   4E1B           // Waiting for button input
 ROMF:4E44 3E 02            ld   a,02
 ROMF:4E46 CD 44 38         call 3844
 ROMF:4E49 18 68            jr   4EB3           // A/B Button ends with window closure; RAM has terrain selection covered
 ROMF:4E4B 3E 02            ld   a,02
 ROMF:4E4D CD 44 38         call 3844
 ROMF:4E50 EF 0B 00 47                          // set 0,WRA4($D000 + ($C98D) * 16)
 ROMF:4E54 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMF:4E57 CD D2 04         call 04D2           // Next frame
 ROMF:4E5A EF 0B 60 48                          // Shuts off Window Display, LCD STAT Interrupt, and LYC=LY Coincidence Interrupt
 ROMF:4E5E 3E 01            ld   a,01
 ROMF:4E60 EA 52 CA         ld   (CA52),a       // Change to Unit Mode
 ROMF:4E63 C3 2B 50         jp   502B           // Select transitions to Unit Mode
 ROMF:4E66 FA 57 CA         ld   a,(CA57)       // Left starts here
 ROMF:4E69 3D               dec  a
 ROMF:4E6A FE FF            cp   a,FF
 ROMF:4E6C 20 0D            jr   nz,4E7B        // Jumps if not already on Red Star properties
 ROMF:4E6E 3E 04            ld   a,04
 ROMF:4E70 18 09            jr   4E7B           // Jump unconditional for leg room for Right
 ROMF:4E72 FA 57 CA         ld   a,(CA57)       // Right starts here
 ROMF:4E75 3C               inc  a
 ROMF:4E76 FE 05            cp   a,05
 ROMF:4E78 38 01            jr   c,4E7B
 ROMF:4E7A AF               xor  a
 ROMF:4E7B EA 57 CA         ld   (CA57),a       // Starting end result of Left/Right
 ROMF:4E7E 3E 01            ld   a,01
 ROMF:4E80 CD 44 38         call 3844
 ROMF:4E83 CD 26 52         call 5226           // Stores Selected Terrain ID and Selected Unit ID
 ROMF:4E86 CD 52 4F         call 4F52           // Terrain type text established with terrain group selection
 ROMF:4E89 18 90            jr   4E1B           // Further wait for button input after Left/Right
 ROMF:4E8B CD B8 4E         call 4EB8           // A = item number in Terrain Group; B = number of Terrain Types in group; HL = Terrain Group item number holder
 ROMF:4E8E 3D               dec  a
 ROMF:4E8F A7               and  a
 ROMF:4E90 20 01            jr   nz,4E93        // Next line is basically rotation as necessary
 ROMF:4E92 78               ld   a,b
 ROMF:4E93 77               ld   (hl),a
 ROMF:4E94 18 09            jr   4E9F           // Jump unconditional for leg room for Down
 ROMF:4E96 CD B8 4E         call 4EB8           // A = item number in Terrain Group; B = number of Terrain Types in group; HL = Terrain Group item number holder
 ROMF:4E99 B8               cp   b
 ROMF:4E9A 20 01            jr   nz,4E9D        // Next line is basically rotation as necessary
 ROMF:4E9C AF               xor  a
 ROMF:4E9D 3C               inc  a
 ROMF:4E9E 77               ld   (hl),a         // Terrain Group item number holder updated
 ROMF:4E9F CD 26 52         call 5226           // Stores Selected Terrain ID and Selected Unit ID (starting end result of Up/Down)
 ROMF:4EA2 CD 52 4F         call 4F52           // Terrain type text established with terrain group selection
 ROMF:4EA5 FA 57 CA         ld   a,(CA57)
 ROMF:4EA8 CD F1 4E         call 4EF1           // Updates given terrain group's graphics on terrain group selection (A is terrain group)
 ROMF:4EAB 3E 01            ld   a,01
 ROMF:4EAD CD 44 38         call 3844
 ROMF:4EB0 C3 1B 4E         jp   4E1B           // Further wait for button input after Up/Down
 ROMF:4EB3 EF 0B 60 48                          // Shuts off Window Display, LCD STAT Interrupt, and LYC=LY Coincidence Interrupt
 ROMF:4EB7 C9               ret                 // Controls for Terrain Selection in Design Maps; also indirectly handles controls for Unit Selection in Design Maps
 ROMF:4EB8 FA 57 CA         ld   a,(CA57)
 ROMF:4EBB 21 6E 52         ld   hl,526E
 ROMF:4EBE CD 93 3A         call 3A93           // HL = Terrain Group # pointer
 ROMF:4EC1 46               ld   b,(hl)         // B = number of Terrain Types in group
 ROMF:4EC2 FA 57 CA         ld   a,(CA57)
 ROMF:4EC5 21 59 CA         ld   hl,CA59
 ROMF:4EC8 CD BC 29         call 29BC           // HL += A
 ROMF:4ECB 7E               ld   a,(hl)
 ROMF:4ECC C9               ret                 // A = item number in Terrain Group; B = number of Terrain Types in group; HL = Terrain Group item number holder
 ROMF:4ECD 01 20 00         ld   bc,0020
 ROMF:4ED0 11 06 14         ld   de,1406
 ROMF:4ED3 EF 10 09 6A                          // Tile placement and coloring handled for [$9C00] table 20x6 using [$DC6C] and [$DC6D] as the base
 ROMF:4ED7 21 EA 4E         ld   hl,4EEA        // "Land:"
 ROMF:4EDA CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:4EDD 0E 00            ld   c,00
 ROMF:4EDF 79               ld   a,c            // Loop begins here
 ROMF:4EE0 CD F1 4E         call 4EF1           // Updates given terrain group's graphics on terrain group selection (A is terrain group)
 ROMF:4EE3 0C               inc  c
 ROMF:4EE4 79               ld   a,c
 ROMF:4EE5 FE 05            cp   a,05
 ROMF:4EE7 20 F6            jr   nz,4EDF
 ROMF:4EE9 C9               ret                 // Establishes terrain selection's basic text and selected terrain types graphics
 
 ROMF:4EEA 02 24                                // "Land:"
 ROMF:4EEC 12 0A 03 A6 00

 ROMF:4EF1 C5               push bc
 ROMF:4EF2 D5               push de
 ROMF:4EF3 47               ld   b,a
 ROMF:4EF4 21 59 CA         ld   hl,CA59
 ROMF:4EF7 CD BC 29         call 29BC           // HL += A
 ROMF:4EFA 4E               ld   c,(hl)         // C = item number in terrain group determined by A
 ROMF:4EFB 78               ld   a,b
 ROMF:4EFC 21 6E 52         ld   hl,526E
 ROMF:4EFF CD 93 3A         call 3A93           // HL = Terrain Group # pointer determined by A
 ROMF:4F02 79               ld   a,c
 ROMF:4F03 CD BC 29         call 29BC           // HL += A
 ROMF:4F06 4E               ld   c,(hl)         // C = Terrain ID
 ROMF:4F07 3E 00            ld   a,00
 ROMF:4F09 E0 83            ld   (ff00+83),a
 ROMF:4F0B E0 4F            ld   (ff00+4F),a
 ROMF:4F0D 78               ld   a,b
 ROMF:4F0E CD 18 52         call 5218           // HL = $8C00 + 4 * SWAP A
 ROMF:4F11 79               ld   a,c            // A = Terrain ID
 ROMF:4F12 EF 0B 77 76                          // (HL ~ HL+63) holds terrain map graphics
 ROMF:4F16 C5               push bc
 ROMF:4F17 78               ld   a,b
 ROMF:4F18 87               add  a
 ROMF:4F19 80               add  b
 ROMF:4F1A C6 03            add  a,03
 ROMF:4F1C 47               ld   b,a
 ROMF:4F1D 0E 21            ld   c,21
 ROMF:4F1F CD D4 0E         call 0ED4           // HL = $9C20 + (A + 1) * 3
 ROMF:4F22 C1               pop  bc
 ROMF:4F23 51               ld   d,c
 ROMF:4F24 78               ld   a,b
 ROMF:4F25 87               add  a
 ROMF:4F26 87               add  a
 ROMF:4F27 C6 C0            add  a,C0
 ROMF:4F29 01 03 00         ld   bc,0003
 ROMF:4F2C EF 0B CF 76                          // Establishes terrain graphics at HL (A is tile location on character base, B is palette's VRAM bank, C is first palette + 3, D is terrain type)
 ROMF:4F30 D1               pop  de
 ROMF:4F31 C1               pop  bc
 ROMF:4F32 C9               ret                 // Updates given terrain group's graphics on terrain group selection (A is terrain group)
 ROMF:4F33 C5               push bc
 ROMF:4F34 FA 57 CA         ld   a,(CA57)
 ROMF:4F37 47               ld   b,a
 ROMF:4F38 87               add  a
 ROMF:4F39 80               add  b              // A = Selected Terrain Group # * 3
 ROMF:4F3A C6 03            add  a,03
 ROMF:4F3C 07               rlca 
 ROMF:4F3D 07               rlca 
 ROMF:4F3E 07               rlca 
 ROMF:4F3F C6 10            add  a,10
 ROMF:4F41 47               ld   b,a            // B = 16 + 24 * (Selected Terrain Group #)
 ROMF:4F42 3E 0D            ld   a,0D
 ROMF:4F44 07               rlca 
 ROMF:4F45 07               rlca 
 ROMF:4F46 07               rlca                // A = 104
 ROMF:4F47 C6 18            add  a,18           // A = 128
 ROMF:4F49 4F               ld   c,a            // C = 128
 ROMF:4F4A FA 8D C9         ld   a,(C98D)
 ROMF:4F4D CD AE 2E         call 2EAE           // WRA4($D001 + A * 16) = C; WRA4($D002 + A * 16) = B
 ROMF:4F50 C1               pop  bc
 ROMF:4F51 C9               ret                 // Establishes base coordinates for cursor based on selected terrain group
 ROMF:4F52 C5               push bc
 ROMF:4F53 FA 65 CA         ld   a,(CA65)       // A = Selected terrain ID
 ROMF:4F56 EF 0B 07 47                          // A = Terrain base ID
 ROMF:4F5A CD 68 4F         call 4F68           // ($C011~$C01A) holds terrain type text (A is terrain type)
 ROMF:4F5D 21 11 C0         ld   hl,C011
 ROMF:4F60 01 24 06         ld   bc,0624
 ROMF:4F63 CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 ROMF:4F66 C1               pop  bc
 ROMF:4F67 C9               ret                 // Terrain type text established with terrain group selection
 ROMF:4F68 C5               push bc
 ROMF:4F69 D5               push de
 ROMF:4F6A F5               push af
 ROMF:4F6B 21 11 C0         ld   hl,C011
 ROMF:4F6E 01 09 00         ld   bc,0009
 ROMF:4F71 3E 80            ld   a,80
 ROMF:4F73 CD 79 3B         call 3B79           // (HL ~ HL+BC-1) = A
 ROMF:4F76 3E 00            ld   a,00
 ROMF:4F78 EA 1A C0         ld   (C01A),a
 ROMF:4F7B F1               pop  af
 ROMF:4F7C 21 90 4F         ld   hl,4F90
 ROMF:4F7F CD 93 3A         call 3A93           // HL = ($4F90 + 2A)
 ROMF:4F82 11 11 C0         ld   de,C011
 ROMF:4F85 2A               ldi  a,(hl)
 ROMF:4F86 A7               and  a
 ROMF:4F87 28 04            jr   z,4F8D         // Ends immediately on a 0
 ROMF:4F89 12               ld   (de),a
 ROMF:4F8A 13               inc  de
 ROMF:4F8B 18 F8            jr   4F85
 ROMF:4F8D D1               pop  de
 ROMF:4F8E C1               pop  bc
 ROMF:4F8F C9               ret                 // ($C011~$C01A) holds terrain type text (A is terrain type)

 ROMF:4F90 BE 4F                                // HQ
 ROMF:4F92 BE 4F                                // HQ
 ROMF:4F94 C2 4F                                // City
 ROMF:4F96 C5 4F                                // Ruined City
 ROMF:4F98 CC 4F                                // Factory
 ROMF:4F9A D2 4F                                // Ruined Factory
 ROMF:4F9C DC 4F                                // Airport
 ROMF:4F9E E1 4F                                // Ruined Airport
 ROMF:4FA0 EA 4F                                // Simple Airport
 ROMF:4FA2 F2 4F                                // Harbor
 ROMF:4FA4 F6 4F                                // Ruined Harbor
 ROMF:4FA6 FE 4F                                // Communication Tower
 ROMF:4FA8 05 50                                // Plains
 ROMF:4FAA 09 50                                // Road
 ROMF:4FAC 0D 50                                // Bridge
 ROMF:4FAE 10 50                                // Bridge
 ROMF:4FB0 13 50                                // Mountain
 ROMF:4FB2 16 50                                // Forest
 ROMF:4FB4 19 50                                // Wasteland
 ROMF:4FB6 1D 50                                // Desert
 ROMF:4FB8 21 50                                // River
 ROMF:4FBA 24 50                                // Sea
 ROMF:4FBC 27 50                                // Beach

 ROMF:4FBE 0D 4E 15 00
 ROMF:4FC2 15 0D 00
 ROMF:4FC5 1F 04 07 03 15 0D 00
 ROMF:4FCC 0B 04 35 4F 04 00
 ROMF:4FD2 1F 04 07 03 0B 04 35 4F 04 00               nop  
 ROMF:4FDC 09 04 0B 04 00               nop  
 ROMF:4FE1 1F 04 07 03 09 04 0B 04 00               nop  
 ROMF:4FEA 07 2E 03 09 04 0B 04 00               nop  
 ROMF:4FF2 21 16 15 00               nop  
 ROMF:4FF6 1F 04 07 03 21 16 15 00               nop  
 ROMF:4FFE 13 04 0D 2E 15 04 00               nop  
 ROMF:5005 1E 03 12 00               nop  
 ROMF:5009 3D 04 2C 00               nop  
 ROMF:500D 1B 0D 00               nop  
 ROMF:5010 1B 0D 00               nop  
 ROMF:5013 25 20 00            jr   nz,5016
 ROMF:5016 24 29 00               nop  
 ROMF:5019 02 2B 12 00               nop  
 ROMF:501D 0C 3E 09 00               nop  
 ROMF:5021 07 2D 00               nop  
 ROMF:5024 04 21 00
 ROMF:5027 02 0C 0F 00               nop  

 ROMF:502B CD EC 50         call 50EC           // Establishes unit selection's basic text, selected unit types graphics, and show of the current tile's terrain
 ROMF:502E CD F2 51         call 51F2           // Sets up unit type's name or "UNIT DELETE" on unit selection menu
 ROMF:5031 3E 60            ld   a,60
 ROMF:5033 EF 0B 22 48                          // Window scrolls up 4 pixels per frame from Y = 152 to Y = A (A must be a multiple of 4 to avoid an infinite loop error)
 ROMF:5037 EF 0B F9 46                          // res 0,WRA4[$D000 + ($C98D) * 16]
 ROMF:503B CD A2 05         call 05A2           // Button update, next frame
 ROMF:503E CD D1 51         call 51D1           // Establishes base coordinates for cursor based on selected unit group
 ROMF:5041 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMF:5044 F0 92            ld   a,(ff00+92)
 ROMF:5046 CB 47            bit  0,a            // A
 ROMF:5048 20 1A            jr   nz,5064
 ROMF:504A CB 4F            bit  1,a            // B
 ROMF:504C 20 16            jr   nz,5064
 ROMF:504E CB 6F            bit  5,a            // Left
 ROMF:5050 20 2E            jr   nz,5080
 ROMF:5052 CB 67            bit  4,a            // Right
 ROMF:5054 20 36            jr   nz,508C
 ROMF:5056 CB 77            bit  6,a            // Up
 ROMF:5058 20 4B            jr   nz,50A5
 ROMF:505A CB 7F            bit  7,a            // Down
 ROMF:505C 20 52            jr   nz,50B0
 ROMF:505E CB 57            bit  2,a            // Select
 ROMF:5060 20 09            jr   nz,506B
 ROMF:5062 18 D7            jr   503B           // Waiting for button input
 ROMF:5064 3E 02            ld   a,02           // A or B was pressed
 ROMF:5066 CD 44 38         call 3844
 ROMF:5069 18 67            jr   50D2           // A/B Button ends with window closure; RAM has unit selection covered
 ROMF:506B EF 0B 00 47                          // set 0,WRA4($D000 + ($C98D) * 16)
 ROMF:506F CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMF:5072 CD D2 04         call 04D2           // Next frame
 ROMF:5075 EF 0B 60 48                          // Shuts off Window Display, LCD STAT Interrupt, and LYC=LY Coincidence Interrupt
 ROMF:5079 AF               xor  a
 ROMF:507A EA 52 CA         ld   (CA52),a       // Change to Terrain Mode
 ROMF:507D C3 04 4E         jp   4E04           // Select transitions to Terrain Mode
 ROMF:5080 FA 58 CA         ld   a,(CA58)       // Left begins here
 ROMF:5083 3D               dec  a
 ROMF:5084 FE FF            cp   a,FF
 ROMF:5086 20 0D            jr   nz,5095        // Jumps if not already Red Star land units
 ROMF:5088 3E 06            ld   a,06
 ROMF:508A 18 09            jr   5095           // Unconditional Jump over portion for Right
 ROMF:508C FA 58 CA         ld   a,(CA58)       // Right begins here
 ROMF:508F 3C               inc  a
 ROMF:5090 FE 07            cp   a,07
 ROMF:5092 38 01            jr   c,5095         // Next line is rotation as necessary
 ROMF:5094 AF               xor  a
 ROMF:5095 EA 58 CA         ld   (CA58),a       // Starting end result of Left/Right
 ROMF:5098 3E 01            ld   a,01
 ROMF:509A CD 44 38         call 3844
 ROMF:509D CD 26 52         call 5226           // Stores Selected Terrain ID and Selected Unit ID
 ROMF:50A0 CD F2 51         call 51F2           // Sets up unit type's name or "UNIT DELETE" on unit selection menu
 ROMF:50A3 18 96            jr   503B           // Further wait for button input after pressing Left/Right
 ROMF:50A5 CD D7 50         call 50D7           // A = item number in Unit Group; B = number of Unit Types in group; HL = Unit Group item number holder
 ROMF:50A8 3D               dec  a
 ROMF:50A9 A7               and  a
 ROMF:50AA 20 01            jr   nz,50AD        // Next line is rotation as necessary
 ROMF:50AC 78               ld   a,b
 ROMF:50AD 77               ld   (hl),a
 ROMF:50AE 18 09            jr   50B9           // Unconditional Jump over portion for Down
 ROMF:50B0 CD D7 50         call 50D7           // A = item number in Unit Group; B = number of Unit Types in group; HL = Unit Group item number holder
 ROMF:50B3 B8               cp   b
 ROMF:50B4 20 01            jr   nz,50B7        // Next line is rotation as necessary
 ROMF:50B6 AF               xor  a
 ROMF:50B7 3C               inc  a
 ROMF:50B8 77               ld   (hl),a         // Unit Group item number holder updated
 ROMF:50B9 CD 26 52         call 5226           // Stores Selected Terrain ID and Selected Unit ID
 ROMF:50BC CD F2 51         call 51F2           // Sets up unit type's name or "UNIT DELETE" on unit selection menu
 ROMF:50BF FA 58 CA         ld   a,(CA58)
 ROMF:50C2 FE 06            cp   a,06
 ROMF:50C4 CA 3B 50         jp   z,503B         // Branches for Delete
 ROMF:50C7 CD 7E 51         call 517E           // Establishes graphics for selected unit within unit group A at designated coordinates on unit group selection
 ROMF:50CA 3E 01            ld   a,01
 ROMF:50CC CD 44 38         call 3844
 ROMF:50CF C3 3B 50         jp   503B           // Further wait for button input after pressing Up/Down
 ROMF:50D2 EF 0B 60 48                          // Shuts off Window Display, LCD STAT Interrupt, and LYC=LY Coincidence Interrupt
 ROMF:50D6 C9               ret                 // Controls for Unit Selection in Design Maps
 ROMF:50D7 FA 58 CA         ld   a,(CA58)
 ROMF:50DA 21 99 52         ld   hl,5299
 ROMF:50DD CD 93 3A         call 3A93           // HL = ($5299 + ($CA58))
 ROMF:50E0 46               ld   b,(hl)
 ROMF:50E1 FA 58 CA         ld   a,(CA58)
 ROMF:50E4 21 5E CA         ld   hl,CA5E
 ROMF:50E7 CD BC 29         call 29BC           // HL += A
 ROMF:50EA 7E               ld   a,(hl)
 ROMF:50EB C9               ret                 // A = item number in Unit Group; B = number of Unit Types in group; HL = Unit Group item number holder
 ROMF:50EC 01 20 00         ld   bc,0020
 ROMF:50EF 11 06 14         ld   de,1406
 ROMF:50F2 EF 10 09 6A                          // Tile placement and coloring handled for [$9C00] table 20x6 using [$DC6C] and [$DC6D] as the base
 ROMF:50F6 21 6E 51         ld   hl,516E        // "Unit:"
 ROMF:50F9 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:50FC 21 76 51         ld   hl,5176        // Vertical separator
 ROMF:50FF CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:5102 21 7A 51         ld   hl,517A        // Vertical separator
 ROMF:5105 CD 6E 33         call 336E           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text, with HRAM bytes updated as necessary
 ROMF:5108 0E 00            ld   c,00
 ROMF:510A 79               ld   a,c            // Loop begins here
 ROMF:510B CD 7E 51         call 517E           // Establishes graphics for selected unit within unit group A at designated coordinates on unit group selection
 ROMF:510E 0C               inc  c
 ROMF:510F 79               ld   a,c
 ROMF:5110 FE 06            cp   a,06
 ROMF:5112 20 F6            jr   nz,510A
 ROMF:5114 3E 00            ld   a,00
 ROMF:5116 E0 83            ld   (ff00+83),a
 ROMF:5118 E0 4F            ld   (ff00+4F),a
 ROMF:511A 3E 06            ld   a,06
 ROMF:511C CD 18 52         call 5218           // HL = $8D80
 ROMF:511F 3E 6A            ld   a,6A
 ROMF:5121 EF 0B 75 76                          // ($8D80) 64 byte holds DEL graphics
 ROMF:5125 01 21 0D         ld   bc,0D21
 ROMF:5128 CD D4 0E         call 0ED4           // HL = $9800 + 13 + 33 * 32 = $9C2D
 ROMF:512B 16 6A            ld   d,6A           // Delete graphics
 ROMF:512D 01 03 00         ld   bc,0003
 ROMF:5130 3E 06            ld   a,06
 ROMF:5132 87               add  a
 ROMF:5133 87               add  a              // A = 24
 ROMF:5134 C6 C0            add  a,C0
 ROMF:5136 EF 0B C9 76                          // Establishes DEL graphics at HL (A is tile location on character base, B is palette's VRAM bank, C is first palette + 3)
 ROMF:513A FA 91 C9         ld   a,(C991)
 ROMF:513D 47               ld   b,a
 ROMF:513E FA 92 C9         ld   a,(C992)
 ROMF:5141 4F               ld   c,a
 ROMF:5142 EF 0B 70 47                          // A = Terrain base ID
 ROMF:5146 4F               ld   c,a
 ROMF:5147 3E 00            ld   a,00
 ROMF:5149 E0 83            ld   (ff00+83),a
 ROMF:514B E0 4F            ld   (ff00+4F),a
 ROMF:514D 3E 07            ld   a,07
 ROMF:514F CD 18 52         call 5218           // HL = $8DC0
 ROMF:5152 79               ld   a,c
 ROMF:5153 EF 0B 77 76                          // (HL ~ HL+63) holds terrain map graphics
 ROMF:5157 C5               push bc
 ROMF:5158 01 21 10         ld   bc,1021
 ROMF:515B CD D4 0E         call 0ED4           // HL = $9800 + 16 + 33 * 32 = $9C30
 ROMF:515E C1               pop  bc
 ROMF:515F 51               ld   d,c
 ROMF:5160 3E 07            ld   a,07
 ROMF:5162 87               add  a
 ROMF:5163 87               add  a
 ROMF:5164 C6 C0            add  a,C0
 ROMF:5166 01 03 00         ld   bc,0003
 ROMF:5169 EF 0B CF 76                          // Establishes terrain graphics at HL (A is tile location on character base, B is palette's VRAM bank, C is first palette + 3, D is terrain type)
 ROMF:516D C9               ret                 // Establishes unit selection's basic text, selected unit types graphics, and show of the current tile's terrain

 ROMF:516E 01 24                                // "Unit:"
 ROMF:5170 26 17 50 15 A6 00

 ROMF:5176 0F 21
 ROMF:5178 A9 00

 ROMF:517A 0F 22
 ROMF:517C A9 00

 ROMF:517E C5               push bc
 ROMF:517F D5               push de
 ROMF:5180 47               ld   b,a
 ROMF:5181 21 5E CA         ld   hl,CA5E
 ROMF:5184 CD BC 29         call 29BC           // HL += A
 ROMF:5187 4E               ld   c,(hl)         // C holds selected unit group's current number
 ROMF:5188 78               ld   a,b
 ROMF:5189 21 99 52         ld   hl,5299
 ROMF:518C CD 93 3A         call 3A93           // HL = ($5299 + 2A) 2 byte reverse
 ROMF:518F 79               ld   a,c
 ROMF:5190 CD BC 29         call 29BC           // HL += A
 ROMF:5193 7E               ld   a,(hl)
 ROMF:5194 87               add  a              // A holds given current unit's type
 ROMF:5195 4F               ld   c,a
 ROMF:5196 78               ld   a,b
 ROMF:5197 FE 03            cp   a,03
 ROMF:5199 38 01            jr   c,519C         // Skips increment for Red Star
 ROMF:519B 0C               inc  c              // C holds given unit's type including side
 ROMF:519C 3E 00            ld   a,00
 ROMF:519E E0 83            ld   (ff00+83),a
 ROMF:51A0 E0 4F            ld   (ff00+4F),a
 ROMF:51A2 78               ld   a,b
 ROMF:51A3 CD 18 52         call 5218           // HL = $8C00 + 64 * A
 ROMF:51A6 79               ld   a,c
 ROMF:51A7 EF 0B 75 76                          // (HL ~ HL+63) holds unit map graphics
 ROMF:51AB C5               push bc
 ROMF:51AC 78               ld   a,b
 ROMF:51AD 21 CA 51         ld   hl,51CA
 ROMF:51B0 CD BC 29         call 29BC           // HL += A
 ROMF:51B3 46               ld   b,(hl)
 ROMF:51B4 0E 21            ld   c,21
 ROMF:51B6 CD D4 0E         call 0ED4           // HL = $9C20 + B
 ROMF:51B9 C1               pop  bc
 ROMF:51BA 51               ld   d,c
 ROMF:51BB 78               ld   a,b
 ROMF:51BC 87               add  a
 ROMF:51BD 87               add  a
 ROMF:51BE C6 C0            add  a,C0
 ROMF:51C0 01 03 00         ld   bc,0003
 ROMF:51C3 EF 0B C9 76                          // Establishes unit graphics at HL (A is tile location on character base, B is palette's VRAM bank, C is first palette + 3, D is unit type)
 ROMF:51C7 D1               pop  de
 ROMF:51C8 C1               pop  bc
 ROMF:51C9 C9               ret                 // Establishes graphics for selected unit within unit group A at designated coordinates on unit group selection

 ROMF:51CA 01 03 05
 ROMF:51CD 07 09 0B
 ROMF:51D0 0D

 ROMF:51D1 C5               push bc
 ROMF:51D2 FA 58 CA         ld   a,(CA58)
 ROMF:51D5 21 CA 51         ld   hl,51CA
 ROMF:51D8 CD BC 29         call 29BC           // HL += A
 ROMF:51DB 7E               ld   a,(hl)
 ROMF:51DC 07               rlca 
 ROMF:51DD 07               rlca 
 ROMF:51DE 07               rlca 
 ROMF:51DF C6 10            add  a,10
 ROMF:51E1 47               ld   b,a
 ROMF:51E2 3E 0D            ld   a,0D
 ROMF:51E4 07               rlca 
 ROMF:51E5 07               rlca 
 ROMF:51E6 07               rlca 
 ROMF:51E7 C6 18            add  a,18
 ROMF:51E9 4F               ld   c,a
 ROMF:51EA FA 8D C9         ld   a,(C98D)
 ROMF:51ED CD AE 2E         call 2EAE           // WRA4($D001 + A * 16) = C; WRA4($D002 + A * 16) = B
 ROMF:51F0 C1               pop  bc
 ROMF:51F1 C9               ret                 // Establishes base coordinates for cursor based on selected unit group
 ROMF:51F2 C5               push bc
 ROMF:51F3 FA 66 CA         ld   a,(CA66)       // A = Selected Unit ID
 ROMF:51F6 A7               and  a
 ROMF:51F7 28 09            jr   z,5202
 ROMF:51F9 EF 12 4F 40                          // ($CD28) to ($CD32) holds unit type's name
 ROMF:51FD 21 28 CD         ld   hl,CD28
 ROMF:5200 28 03            jr   z,5205
 ROMF:5202 21 0D 52         ld   hl,520D        // "UNIT DELETE"
 ROMF:5205 01 24 06         ld   bc,0624
 ROMF:5208 CD 53 33         call 3353           // [$C300 + [$FFC8]] holds # of text bytes, then designated HL (reversed), then text; coordinates BC
 ROMF:520B C1               pop  bc
 ROMF:520C C9               ret                 // Sets up unit type's name or "UNIT DELETE" on unit selection menu

 ROMF:520D 26 17 50 15 0C 09 35 4F 80 80 00

 ROMF:5218 D5               push de
 ROMF:5219 CB 37            swap a
 ROMF:521B 6F               ld   l,a
 ROMF:521C 26 00            ld   h,00
 ROMF:521E 29               add  hl,hl
 ROMF:521F 29               add  hl,hl
 ROMF:5220 11 00 8C         ld   de,8C00
 ROMF:5223 19               add  hl,de
 ROMF:5224 D1               pop  de
 ROMF:5225 C9               ret                 // HL = $8C00 + 4 * SWAP A
 ROMF:5226 FA 57 CA         ld   a,(CA57)
 ROMF:5229 4F               ld   c,a
 ROMF:522A 06 00            ld   b,00           // BC = Selected Terrain Group #
 ROMF:522C 21 59 CA         ld   hl,CA59
 ROMF:522F 09               add  hl,bc
 ROMF:5230 56               ld   d,(hl)         // D = item number in terrain group
 ROMF:5231 FA 57 CA         ld   a,(CA57)
 ROMF:5234 21 6E 52         ld   hl,526E
 ROMF:5237 CD 93 3A         call 3A93           // HL = Terrain Group Pointer #
 ROMF:523A 4A               ld   c,d
 ROMF:523B 06 00            ld   b,00           // BC = item number in terrain group
 ROMF:523D 09               add  hl,bc
 ROMF:523E 7E               ld   a,(hl)         // A = Terrain ID
 ROMF:523F EA 65 CA         ld   (CA65),a
 ROMF:5242 FA 58 CA         ld   a,(CA58)
 ROMF:5245 4F               ld   c,a
 ROMF:5246 06 00            ld   b,00           // BC = Selected Unit Group #
 ROMF:5248 21 5E CA         ld   hl,CA5E
 ROMF:524B 09               add  hl,bc
 ROMF:524C 56               ld   d,(hl)         // D = item number in unit group
 ROMF:524D FA 58 CA         ld   a,(CA58)
 ROMF:5250 21 99 52         ld   hl,5299
 ROMF:5253 CD 93 3A         call 3A93           // HL = Unit Group Pointer #
 ROMF:5256 4A               ld   c,d
 ROMF:5257 06 00            ld   b,00           // BC = item number in unit group
 ROMF:5259 09               add  hl,bc
 ROMF:525A 7E               ld   a,(hl)         // A = Unit ID
 ROMF:525B 87               add  a
 ROMF:525C 47               ld   b,a            // B = Unit ID * 2
 ROMF:525D FA 58 CA         ld   a,(CA58)
 ROMF:5260 FE 03            cp   a,03
 ROMF:5262 38 05            jr   c,5269
 ROMF:5264 FE 06            cp   a,06
 ROMF:5266 28 01            jr   z,5269
 ROMF:5268 04               inc  b
 ROMF:5269 78               ld   a,b
 ROMF:526A EA 66 CA         ld   (CA66),a       // Selected Unit ID stored
 ROMF:526D C9               ret                 // Stores Selected Terrain ID and Selected Unit ID

 ROMF:526E 78 52               ld   d,d
 ROMF:5270 7E 52               ld   d,d
 ROMF:5272 84 52               ld   d,d
 ROMF:5274 8D 52               ld   d,d
 ROMF:5276 94 52

 ROMF:5278 05 01 02 04 06 09                    // Red Star build properties
 ROMF:527E 05 0C 0D 0F 11 14                    // White Moon build properties
 ROMF:5284 08 17 18 19 1A 1B 1C 1D 1E           // Neutral build properties
 ROMF:528D 06 20 24 25 26 27 21                 // Plains, Mountain, Forest, Wasteland, Desert, Road
 ROMF:5294 04 28 22 2A 29                       // River, Bridge, Beach, Sea

 ROMF:5299 A7 52               ld   d,d
 ROMF:529B C1 52               ld   d,d
 ROMF:529D D0 52               ld   d,d
 ROMF:529F A7 52               ld   d,d
 ROMF:52A1 C1 52               ld   d,d
 ROMF:52A3 D0 52               ld   d,d
 ROMF:52A5 D8 52

 ROMF:52A7 19               add  hl,de
 ROMF:52A8 01 02 04 05 06 07 08 09 0A 0B 0C
 ROMF:52B3 0D 0E 0F 10 11 13 14 15 16 17 18 19 1A 1B

 ROMF:52C1 0E 1D 1E 1F 20 21 22 23               inc  hl
 ROMF:52C9 25 26 27 28 29 2A 2B

 ROMF:52D0 07               rlca 
 ROMF:52D1 2C 2E 2F            ld   l,2F
 ROMF:52D4 30 31 32 33

 ROMF:52D8 01 00

 ROMF:52DA C5               push bc
 ROMF:52DB D5               push de
 ROMF:52DC EA 46 C9         ld   (C946),a
 ROMF:52DF 78               ld   a,b
 ROMF:52E0 BA               cp   d
 ROMF:52E1 38 02            jr   c,52E5         // Jumps if B is west of D
 ROMF:52E3 42               ld   b,d
 ROMF:52E4 57               ld   d,a
 ROMF:52E5 79               ld   a,c
 ROMF:52E6 BB               cp   e
 ROMF:52E7 38 02            jr   c,52EB         // Jumps if C is north of E
 ROMF:52E9 4B               ld   c,e
 ROMF:52EA 5F               ld   e,a            // BC is northwest corner, DE is southeast corner
 ROMF:52EB 7A               ld   a,d
 ROMF:52EC 90               sub  b              // A = difference between B and D
 ROMF:52ED 3C               inc  a
 ROMF:52EE 57               ld   d,a            // D holds area's width
 ROMF:52EF 7B               ld   a,e
 ROMF:52F0 91               sub  c
 ROMF:52F1 3C               inc  a
 ROMF:52F2 5F               ld   e,a            // E holds area's height
 ROMF:52F3 F0 82            ld   a,(ff00+82)
 ROMF:52F5 F5               push af
 ROMF:52F6 7A               ld   a,d
 ROMF:52F7 EA 47 C9         ld   (C947),a
 ROMF:52FA FA 47 C9         ld   a,(C947)       // Loop begins here for next row
 ROMF:52FD 57               ld   d,a            // D = remaining columns
 ROMF:52FE EF 0B F8 15                          // HL = $D000 + B + C * 64
 ROMF:5302 3E 01            ld   a,01           // Loop begins here for next column
 ROMF:5304 E0 82            ld   (ff00+82),a
 ROMF:5306 E0 70            ld   (ff00+70),a
 ROMF:5308 FA 46 C9         ld   a,(C946)
 ROMF:530B 77               ld   (hl),a         // Fill terrain set on HL
 ROMF:530C 3E 02            ld   a,02
 ROMF:530E E0 82            ld   (ff00+82),a
 ROMF:5310 E0 70            ld   (ff00+70),a
 ROMF:5312 7E               ld   a,(hl)
 ROMF:5313 A7               and  a
 ROMF:5314 28 0D            jr   z,5323         // End cycle if already blank
 ROMF:5316 E5               push hl
 ROMF:5317 E6 01            and  a,01
 ROMF:5319 21 09 CD         ld   hl,CD09
 ROMF:531C CD BC 29         call 29BC           // HL += A
 ROMF:531F 35               dec  (hl)           // Decrement side's headcount
 ROMF:5320 E1               pop  hl             // HL = Coordinates
 ROMF:5321 AF               xor  a
 ROMF:5322 77               ld   (hl),a         // Empties tile
 ROMF:5323 23               inc  hl
 ROMF:5324 15               dec  d
 ROMF:5325 20 DB            jr   nz,5302
 ROMF:5327 0C               inc  c
 ROMF:5328 1D               dec  e
 ROMF:5329 20 CF            jr   nz,52FA
 ROMF:532B F1               pop  af
 ROMF:532C E0 82            ld   (ff00+82),a
 ROMF:532E E0 70            ld   (ff00+70),a
 ROMF:5330 D1               pop  de
 ROMF:5331 C1               pop  bc
 ROMF:5332 C9               ret                 // Rectangle BC to DE is filled with given terrain determined by A, units within erased with appropriate headcount decrements


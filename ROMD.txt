 ROMD:4000 FA A2 C9         ld   a,(C9A2)
 ROMD:4003 EA EB C5         ld   (C5EB),a       // ($C5EB) holds active player's first unit
 ROMD:4006 1E 32            ld   e,32
 ROMD:4008 FA EB C5         ld   a,(C5EB)       // Loop starts here
 ROMD:400B CD 2D 65         call 652D           // A = Unit Type if unit can move
 ROMD:400E A7               and  a
 ROMD:400F 28 14            jr   z,4025
 ROMD:4011 FA EB C5         ld   a,(C5EB)
 ROMD:4014 CD 1F 48         call 481F           // Various: ($C602) both weapon flags; ($C603) primary flags; ($C604) secondary flags if secondary is ranged; ($C606) primary weapon Range; ($C607) secondary weapon Range
 ROMD:4017 FA 02 C6         ld   a,(C602)
 ROMD:401A CB 7F            bit 7,a
 ROMD:401C 28 07            jr   z,4025         // Branches if not range fire
 ROMD:401E E6 1F            and  a,1F
 ROMD:4020 28 03            jr   z,4025         // Branches if invalid ATK
 ROMD:4022 CD 33 40         call 4033           // AI's attempt to attack where possible (for some reason, the attacker being carried at the start would skip attacking)
 ROMD:4025 FA 94 CA         ld   a,(CA94)
 ROMD:4028 A7               and  a
 ROMD:4029 20 07            jr   nz,4032        // Ends immediately if either army is victorious
 ROMD:402B 21 EB C5         ld   hl,C5EB
 ROMD:402E 34               inc  (hl)
 ROMD:402F 1D               dec  e
 ROMD:4030 20 D6            jr   nz,4008
 ROMD:4032 C9               ret                 // AI's attempt to have any range fire units move and attack
 ROMD:4033 C5               push bc
 ROMD:4034 D5               push de
 ROMD:4035 FA EB C5         ld   a,(C5EB)       // A = Given active unit
 ROMD:4038 CD 10 45         call 4510           // Coordinates update committal
 ROMD:403B FA E0 CC         ld   a,(CCE0)
 ROMD:403E CB 47            bit 0,a
 ROMD:4040 20 14            jr   nz,4056        // Jumps if Loaded (just handles moving closer to the opponent's HQ before ending procedure if that happens)
 ROMD:4042 CD 28 5E         call 5E28           // Handles movement onto transport including Loading animation if transport is directly available to move onto and unit isn't already being carried, with A = 1; otherwise, A = 0
 ROMD:4045 FE 00            cp   a,00
 ROMD:4047 20 4B            jr   nz,4094        // End immediately if transport is happening
 ROMD:4049 FA D8 C9         ld   a,(C9D8)
 ROMD:404C CD E5 48         call 48E5           // ($C5FB) has flags set for valid targets from viable movement points
 ROMD:404F CD 06 41         call 4106           // A = 1 if no valid targets; 2 if any valid targets, with ($C5E7) holding highest priority unit type target and ($C5E8) holding "best" tile to attack from
 ROMD:4052 FE 02            cp   a,02
 ROMD:4054 28 05            jr   z,405B         // Branches for valid targets
 ROMD:4056 CD 21 43         call 4321           // AI's attempt to move closer to the opponent's HQ
 ROMD:4059 18 39            jr   4094           // Jumps to end immediately
 ROMD:405B FA E8 C5         ld   a,(C5E8)
 ROMD:405E 47               ld   b,a
 ROMD:405F FA E9 C5         ld   a,(C5E9)
 ROMD:4062 4F               ld   c,a
 ROMD:4063 78               ld   a,b
 ROMD:4064 EA ED C5         ld   (C5ED),a
 ROMD:4067 79               ld   a,c
 ROMD:4068 EA EE C5         ld   (C5EE),a
 ROMD:406B FA E7 C5         ld   a,(C5E7)
 ROMD:406E EA EF C5         ld   (C5EF),a
 ROMD:4071 CD 5E 09         call 095E           // BC = unit coordinates
 ROMD:4074 78               ld   a,b
 ROMD:4075 EA F0 C5         ld   (C5F0),a
 ROMD:4078 79               ld   a,c
 ROMD:4079 EA F1 C5         ld   (C5F1),a       // "Optimal" attack position coordinates, target, target's coordinates
 ROMD:407C 3E 03            ld   a,03
 ROMD:407E EA EC C5         ld   (C5EC),a       // Combat, "best" tile, target, target's coordinates
 ROMD:4081 CD 07 44         call 4407           // Handles full movement and action of AI unit based on provided information
 ROMD:4084 18 0E            jr   4094           // Ends after Combat handling
 ROMD:4086 CD EE 44         call 44EE           // AI's combat invocation from "best" tile BC
 ROMD:4089 FA DE CC         ld   a,(CCDE)
 ROMD:408C 47               ld   b,a
 ROMD:408D FA DF CC         ld   a,(CCDF)
 ROMD:4090 4F               ld   c,a            // BC = Coordinates
 ROMD:4091 CD 2F 46         call 462F           // Movement to coordinates BC shown ending with "Standby" popup message
 ROMD:4094 D1               pop  de
 ROMD:4095 C1               pop  bc
 ROMD:4096 C9               ret                 // AI's attempt to attack where possible (for some reason, the attacker being carried at the start would skip attacking)
 ROMD:4097 FA A2 C9         ld   a,(C9A2)
 ROMD:409A EA EB C5         ld   (C5EB),a       // ($C5EB) = active player's first unit
 ROMD:409D 1E 32            ld   e,32
 ROMD:409F FA EB C5         ld   a,(C5EB)       // Loop starts here
 ROMD:40A2 CD 2D 65         call 652D           // A = Unit Type if unit can move
 ROMD:40A5 A7               and  a
 ROMD:40A6 28 10            jr   z,40B8         // Basically ends cycle early
 ROMD:40A8 FA EB C5         ld   a,(C5EB)
 ROMD:40AB CD 56 5D         call 5D56           // A = weapons flags (Range Fire, Direct Fire, ?, Sub ATK, Ship ATK, Air ATK, Lite ATK, Armor ATK) set by any available weapons with Direct Fire
 ROMD:40AE CB 77            bit 6,a             // Zero Flag set by not direct fire
 ROMD:40B0 28 06            jr   z,40B8         // Branches if not direct fire
 ROMD:40B2 EA 02 C6         ld   (C602),a       // ($C602) = weapon flags
 ROMD:40B5 CD C6 40         call 40C6           // AI Direct Attack Decision management
 ROMD:40B8 FA 94 CA         ld   a,(CA94)
 ROMD:40BB A7               and  a
 ROMD:40BC 20 07            jr   nz,40C5        // Ends immediately if either army is victorious
 ROMD:40BE 21 EB C5         ld   hl,C5EB
 ROMD:40C1 34               inc  (hl)
 ROMD:40C2 1D               dec  e
 ROMD:40C3 20 DA            jr   nz,409F
 ROMD:40C5 C9               ret                 // AI general procedure: Attempt to have any direct fire units move and attack
 ROMD:40C6 C5               push bc
 ROMD:40C7 D5               push de
 ROMD:40C8 FA EB C5         ld   a,(C5EB)       // A = Given active unit
 ROMD:40CB CD 10 45         call 4510           // Coordinates update committal
 ROMD:40CE CD 28 5E         call 5E28           // Handles movement onto transport including Loading animation if transport is directly available to move onto and unit isn't already being carried, with A = 1; otherwise, A = 0
 ROMD:40D1 FE 00            cp   a,00
 ROMD:40D3 20 2E            jr   nz,4103        // End immediately if Loaded or will get transported
 ROMD:40D5 CD C2 41         call 41C2           // Priority establishment (Surface Units) with A = 2 for any valid targets, 1 otherwise
 ROMD:40D8 FE 02            cp   a,02
 ROMD:40DA 28 0C            jr   z,40E8         // Branches if a valid surface target exists
 ROMD:40DC CD CC 41         call 41CC           // Priority establishment (Air Units) with A = 2 for any valid targets, 1 otherwise
 ROMD:40DF FE 02            cp   a,02
 ROMD:40E1 28 05            jr   z,40E8         // Branches if a valid air target exists
 ROMD:40E3 CD 21 43         call 4321           // AI's attempt to move closer to the player's HQ
 ROMD:40E6 18 1B            jr   4103           // Jumps to end immediately if no valid targets exist
 ROMD:40E8 FA ED C5         ld   a,(C5ED)
 ROMD:40EB 47               ld   b,a
 ROMD:40EC FA EE C5         ld   a,(C5EE)
 ROMD:40EF 4F               ld   c,a            // BC = coordinates for "optimal" attack
 ROMD:40F0 CD 46 45         call 4546           // Unit shifting update with viable movement momentarily established
 ROMD:40F3 CD EE 44         call 44EE           // AI's combat invocation from "best" tile BC
 ROMD:40F6 18 0B            jr   4103           // Ends after combat handling
 ROMD:40F8 FA DE CC         ld   a,(CCDE)
 ROMD:40FB 47               ld   b,a
 ROMD:40FC FA DF CC         ld   a,(CCDF)
 ROMD:40FF 4F               ld   c,a            // BC = Coordinates
 ROMD:4100 CD 2F 46         call 462F           // Movement to coordinates BC shown ending with "Standby" popup message
 ROMD:4103 D1               pop  de
 ROMD:4104 C1               pop  bc
 ROMD:4105 C9               ret  
 ROMD:4106 FA DD CC         ld   a,(CCDD)
 ROMD:4109 CB 3F            srl a               // A = Unit Type no side
 ROMD:410B CD 35 4A         call 4A35           // HL = (2A + $4A43)
 ROMD:410E 7D               ld   a,l
 ROMD:410F E0 99            ld   (ff00+99),a
 ROMD:4111 7C               ld   a,h
 ROMD:4112 E0 9A            ld   (ff00+9A),a
 ROMD:4114 C5               push bc
 ROMD:4115 D5               push de
 ROMD:4116 F0 82            ld   a,(ff00+82)
 ROMD:4118 F5               push af
 ROMD:4119 3E 02            ld   a,02
 ROMD:411B E0 82            ld   (ff00+82),a
 ROMD:411D E0 70            ld   (ff00+70),a
 ROMD:411F 3E FF            ld   a,FF
 ROMD:4121 EA EA C5         ld   (C5EA),a
 ROMD:4124 1E 32            ld   e,32
 ROMD:4126 FA A3 C9         ld   a,(C9A3)
 ROMD:4129 57               ld   d,a            // D = inactive player's first unit
 ROMD:412A 7A               ld   a,d            // Loop begins here
 ROMD:412B CD 65 49         call 4965           // bit A, ($C5FB)
 ROMD:412E 28 5B            jr   z,418B         // Ends cycle if not set
 ROMD:4130 7A               ld   a,d
 ROMD:4131 0E 00            ld   c,00
 ROMD:4133 CD 0B 09         call 090B           // Unit Type
 ROMD:4136 CB 3F            srl a
 ROMD:4138 47               ld   b,a
 ROMD:4139 F0 99            ld   a,(ff00+99)
 ROMD:413B 6F               ld   l,a
 ROMD:413C F0 9A            ld   a,(ff00+9A)
 ROMD:413E 67               ld   h,a
 ROMD:413F 78               ld   a,b
 ROMD:4140 CD A6 41         call 41A6           // A = -1 if no bytes from initial HL to the first byte set to 0 has initial A; otherwise, A = number of bytes before the first byte set to initial A starting at initial HL
 ROMD:4143 FE FF            cp   a,FF
 ROMD:4145 28 44            jr   z,418B         // Ends cycle if no bytes from HL marked by ($FF99) 2 byte reverse to first byte set to 0 has Unit Type basic number
 ROMD:4147 E0 9B            ld   (ff00+9B),a
 ROMD:4149 7A               ld   a,d
 ROMD:414A CD 9D 49         call 499D           // BC holds coordinates of highest Cover value tile valid for attack with repair validity treated as +100 Cover
 ROMD:414D 78               ld   a,b
 ROMD:414E FE FF            cp   a,FF
 ROMD:4150 28 39            jr   z,418B         // End cycle if no valid tiles for attack
 ROMD:4152 E0 9C            ld   (ff00+9C),a
 ROMD:4154 79               ld   a,c
 ROMD:4155 E0 9D            ld   (ff00+9D),a    // ($FF9C) 2 byte holds coordinates of highest Cover value tile valid for attack
 ROMD:4157 7A               ld   a,d
 ROMD:4158 CD B6 46         call 46B6
 ROMD:415B E6 0F            and  a,0F           // A = Defender's HP loss
 ROMD:415D 28 2C            jr   z,418B         // End cycle if no damage will be done
 ROMD:415F 7A               ld   a,d
 ROMD:4160 CD 5E 09         call 095E           // BC = unit coordinates
 ROMD:4163 CD 85 09         call 0985           // A = Terrain type
 ROMD:4166 FE 20            cp   a,20
 ROMD:4168 38 06            jr   c,4170         // Jumps if terrain is a property
 ROMD:416A F0 9B            ld   a,(ff00+9B)
 ROMD:416C C6 40            add  a,40
 ROMD:416E E0 9B            ld   (ff00+9B),a    // Adds 64 to Anti-Priority for non-property
 ROMD:4170 F0 9B            ld   a,(ff00+9B)
 ROMD:4172 47               ld   b,a
 ROMD:4173 FA EA C5         ld   a,(C5EA)       // True Anti-Priority
 ROMD:4176 B8               cp   b
 ROMD:4177 38 12            jr   c,418B         // End cycle if target's unit type has lower priority than prior unit
 ROMD:4179 78               ld   a,b
 ROMD:417A EA EA C5         ld   (C5EA),a
 ROMD:417D 7A               ld   a,d
 ROMD:417E EA E7 C5         ld   (C5E7),a
 ROMD:4181 F0 9C            ld   a,(ff00+9C)
 ROMD:4183 EA E8 C5         ld   (C5E8),a
 ROMD:4186 F0 9D            ld   a,(ff00+9D)
 ROMD:4188 EA E9 C5         ld   (C5E9),a       // ($C5E8) 2 byte holds coordinates of highest Cover value tile valid for attack
 ROMD:418B 14               inc  d
 ROMD:418C 1D               dec  e
 ROMD:418D 20 9B            jr   nz,412A        // Loops for all 50 enemy units
 ROMD:418F FA EA C5         ld   a,(C5EA)
 ROMD:4192 FE FF            cp   a,FF
 ROMD:4194 CA 9B 41         jp   z,419B
 ROMD:4197 06 02            ld   b,02
 ROMD:4199 18 02            jr   419D
 ROMD:419B 06 01            ld   b,01
 ROMD:419D F1               pop  af
 ROMD:419E E0 82            ld   (ff00+82),a
 ROMD:41A0 E0 70            ld   (ff00+70),a
 ROMD:41A2 78               ld   a,b
 ROMD:41A3 D1               pop  de
 ROMD:41A4 C1               pop  bc
 ROMD:41A5 C9               ret                 // A = 1 if no valid targets; 2 if any valid targets, with ($C5E7) holding highest priority unit type target and ($C5E8) holding "best" tile to attack from
 ROMD:41A6 C5               push bc
 ROMD:41A7 47               ld   b,a
 ROMD:41A8 0E 00            ld   c,00
 ROMD:41AA 2A               ldi  a,(hl)         // Loop begins here
 ROMD:41AB A7               and  a
 ROMD:41AC 28 09            jr   z,41B7         // Ends with A = -1 if (HL) = 0
 ROMD:41AE B8               cp   b
 ROMD:41AF 28 03            jr   z,41B4
 ROMD:41B1 0C               inc  c
 ROMD:41B2 18 F6            jr   41AA
 ROMD:41B4 79               ld   a,c
 ROMD:41B5 18 02            jr   41B9
 ROMD:41B7 3E FF            ld   a,FF
 ROMD:41B9 C1               pop  bc
 ROMD:41BA C9               ret                 // A = -1 if no bytes from initial HL to the first byte set to 0 has initial A; otherwise, A = number of bytes before the first byte set to initial A starting at initial HL
 ROMD:41BB FA 02 C6         ld   a,(C602)
 ROMD:41BE CB 57            bit 2,a
 ROMD:41C0 20 0A            jr   nz,41CC        // Jumps for Air valid target
 ROMD:41C2 3E EC            ld   a,EC
 ROMD:41C4 E0 99            ld   (ff00+99),a
 ROMD:41C6 3E 42            ld   a,42
 ROMD:41C8 E0 9A            ld   (ff00+9A),a    // Surface units
 ROMD:41CA 18 08            jr   41D4
 ROMD:41CC 3E 11            ld   a,11
 ROMD:41CE E0 99            ld   (ff00+99),a
 ROMD:41D0 3E 43            ld   a,43
 ROMD:41D2 E0 9A            ld   (ff00+9A),a    // Air units
 ROMD:41D4 C5               push bc
 ROMD:41D5 D5               push de
 ROMD:41D6 F0 82            ld   a,(ff00+82)
 ROMD:41D8 F5               push af
 ROMD:41D9 3E 02            ld   a,02
 ROMD:41DB E0 82            ld   (ff00+82),a
 ROMD:41DD E0 70            ld   (ff00+70),a
 ROMD:41DF 3E FF            ld   a,FF
 ROMD:41E1 EA EA C5         ld   (C5EA),a       // Sets up lowest Priority value
 ROMD:41E4 1E 32            ld   e,32
 ROMD:41E6 FA A3 C9         ld   a,(C9A3)
 ROMD:41E9 57               ld   d,a            // D = inactive player's first unit
 ROMD:41EA D5               push de             // Loop begins here
 ROMD:41EB 7A               ld   a,d
 ROMD:41EC 0E 00            ld   c,00
 ROMD:41EE CD 0B 09         call 090B           // Unit Type
 ROMD:41F1 CB 3F            srl a
 ROMD:41F3 28 7D            jr   z,4272         // Ends cycle if unit doesn't exist
 ROMD:41F5 47               ld   b,a            // B = enemy's Unit Type
 ROMD:41F6 F0 99            ld   a,(ff00+99)
 ROMD:41F8 6F               ld   l,a
 ROMD:41F9 F0 9A            ld   a,(ff00+9A)
 ROMD:41FB 67               ld   h,a            // HL holds list: $42EC for Surface, $4311 for Air
 ROMD:41FC 78               ld   a,b
 ROMD:41FD CD A6 41         call 41A6           // A = -1 if no bytes from initial HL to the first byte set to 0 has initial A; otherwise, A = number of bytes before the first byte set to enemy's Unit Type starting at initial HL
 ROMD:4200 FE FF            cp   a,FF
 ROMD:4202 28 6E            jr   z,4272         // End cycle if no bytes from HL marked by ($FF99) 2 byte reverse to the first byte set to 0 has Unit Type base number
 ROMD:4204 E0 9B            ld   (ff00+9B),a    // Number of bytes before the first byte set to enemy's Unit Type starting at initial HL
 ROMD:4206 78               ld   a,b
 ROMD:4207 87               add  a
 ROMD:4208 0E 18            ld   c,18
 ROMD:420A EF 12 37 40                          // A = Unit Family
 ROMD:420E 21 02 C6         ld   hl,C602
 ROMD:4211 CD C7 3A         call 3AC7           // A = AND (HL + A/8), 2^A%8
 ROMD:4214 28 5C            jr   z,4272         // End cycle if invalid target
 ROMD:4216 7A               ld   a,d
 ROMD:4217 0E 03            ld   c,03
 ROMD:4219 CD 0B 09         call 090B           // Unit Status
 ROMD:421C CB 47            bit 0,a
 ROMD:421E 20 52            jr   nz,4272
 ROMD:4220 CB 4F            bit 1,a
 ROMD:4222 20 4E            jr   nz,4272        // End cycle if given enemy unit is Loaded or in Reserve
 ROMD:4224 7A               ld   a,d
 ROMD:4225 CD 5E 09         call 095E           // BC = unit coordinates
 ROMD:4228 78               ld   a,b
 ROMD:4229 E0 9D            ld   (ff00+9D),a
 ROMD:422B 79               ld   a,c
 ROMD:422C E0 9E            ld   (ff00+9E),a    // ($FF9D) holds enemy's coordinates
 ROMD:422E 7A               ld   a,d
 ROMD:422F CD 8F 42         call 428F           // A = relative space for attacker dealing most HP damage to defender, -1 if no damage will happen
 ROMD:4232 FE FF            cp   a,FF
 ROMD:4234 28 3C            jr   z,4272         // End cycle if no damage can be done to defender
 ROMD:4236 7A               ld   a,d
 ROMD:4237 CD 5E 09         call 095E           // BC = unit coordinates
 ROMD:423A CD 85 09         call 0985           // A = Terrain type
 ROMD:423D FE 20            cp   a,20
 ROMD:423F 38 06            jr   c,4247         // Branches if terrain is property
 ROMD:4241 F0 9B            ld   a,(ff00+9B)
 ROMD:4243 C6 40            add  a,40
 ROMD:4245 E0 9B            ld   (ff00+9B),a    // Anti-priority value increased by 64 for units off of properties
 ROMD:4247 F0 9B            ld   a,(ff00+9B)
 ROMD:4249 47               ld   b,a            // B = Anti-Priority
 ROMD:424A FA EA C5         ld   a,(C5EA)
 ROMD:424D B8               cp   b
 ROMD:424E 38 22            jr   c,4272         // End cycle if old unit type has higher priority
 ROMD:4250 78               ld   a,b            // Check Old - New
 ROMD:4251 EA EA C5         ld   (C5EA),a       // New Anti-Priority value set
 ROMD:4254 7A               ld   a,d
 ROMD:4255 EA E7 C5         ld   (C5E7),a       // Enemy unit # with lowest Anti-Priority value
 ROMD:4258 F0 9D            ld   a,(ff00+9D)
 ROMD:425A 47               ld   b,a
 ROMD:425B EA E8 C5         ld   (C5E8),a
 ROMD:425E F0 9E            ld   a,(ff00+9E)
 ROMD:4260 4F               ld   c,a
 ROMD:4261 EA E9 C5         ld   (C5E9),a
 ROMD:4264 F0 9F            ld   a,(ff00+9F)
 ROMD:4266 5F               ld   e,a
 ROMD:4267 CD D9 28         call 28D9           // BC = relative coordinates, Set Carry Flag based on relative coordinates being out of bounds
 ROMD:426A 78               ld   a,b
 ROMD:426B EA ED C5         ld   (C5ED),a
 ROMD:426E 79               ld   a,c
 ROMD:426F EA EE C5         ld   (C5EE),a       // Enemy unit #, coordinates, Anti-Priority; Relative Coordinates for "optimal" attack
 ROMD:4272 D1               pop  de
 ROMD:4273 14               inc  d
 ROMD:4274 1D               dec  e
 ROMD:4275 C2 EA 41         jp   nz 41EA        // Loop for all 50 enemy units
 ROMD:4278 FA EA C5         ld   a,(C5EA)
 ROMD:427B FE FF            cp   a,FF
 ROMD:427D CA 84 42         jp   z,4284         // End with A = 1 if no valid targets; 2 if a valid target exists
 ROMD:4280 06 02            ld   b,02
 ROMD:4282 18 02            jr   4286
 ROMD:4284 06 01            ld   b,01
 ROMD:4286 F1               pop  af
 ROMD:4287 E0 82            ld   (ff00+82),a
 ROMD:4289 E0 70            ld   (ff00+70),a
 ROMD:428B 78               ld   a,b
 ROMD:428C D1               pop  de
 ROMD:428D C1               pop  bc
 ROMD:428E C9               ret                 // Priority establishment with A = 2 for any valid targets, 1 otherwise
 ROMD:428F C5               push bc
 ROMD:4290 D5               push de
 ROMD:4291 57               ld   d,a
 ROMD:4292 F0 82            ld   a,(ff00+82)
 ROMD:4294 F5               push af
 ROMD:4295 AF               xor  a
 ROMD:4296 E0 9C            ld   (ff00+9C),a
 ROMD:4298 3E FF            ld   a,FF
 ROMD:429A E0 9F            ld   (ff00+9F),a
 ROMD:429C 1E 00            ld   e,00
 ROMD:429E C5               push bc             // Loop begins here
 ROMD:429F CD D9 28         call 28D9           // BC = relative coordinates, Set Carry Flag based on relative coordinates being out of bounds
 ROMD:42A2 38 37            jr   c,42DB         // End cycle if relative coordinates is out of bounds
 ROMD:42A4 3E 05            ld   a,05
 ROMD:42A6 E0 82            ld   (ff00+82),a
 ROMD:42A8 E0 70            ld   (ff00+70),a
 ROMD:42AA CD D7 08         call 08D7           // HL = $D000 + B + C * 64
 ROMD:42AD 7E               ld   a,(hl)
 ROMD:42AE FE FF            cp   a,FF
 ROMD:42B0 28 29            jr   z,42DB         // End cycle if movement impossible
 ROMD:42B2 A7               and  a
 ROMD:42B3 20 07            jr   nz,42BC        // Skip next portion if not initial space
 ROMD:42B5 FA E0 CC         ld   a,(CCE0)
 ROMD:42B8 CB 47            bit 0,a
 ROMD:42BA 28 0B            jr   z,42C7         // Jumps if not Loaded
 ROMD:42BC 3E 02            ld   a,02
 ROMD:42BE E0 82            ld   (ff00+82),a
 ROMD:42C0 E0 70            ld   (ff00+70),a
 ROMD:42C2 7E               ld   a,(hl)
 ROMD:42C3 E6 7F            and  a,7F
 ROMD:42C5 20 14            jr   nz,42DB        // End cycle if already occupied by another unit
 ROMD:42C7 7A               ld   a,d
 ROMD:42C8 CD B6 46         call 46B6
 ROMD:42CB E6 0F            and  a,0F           // A = Defender's HP loss
 ROMD:42CD 28 0C            jr   z,42DB         // End cycle if no damage will be done
 ROMD:42CF 47               ld   b,a
 ROMD:42D0 F0 9C            ld   a,(ff00+9C)
 ROMD:42D2 B8               cp   b
 ROMD:42D3 30 06            jr   nc,42DB        // End cycle if attacking from given space will result in lower HP loss from defender
 ROMD:42D5 78               ld   a,b
 ROMD:42D6 E0 9C            ld   (ff00+9C),a
 ROMD:42D8 7B               ld   a,e
 ROMD:42D9 E0 9F            ld   (ff00+9F),a
 ROMD:42DB C1               pop  bc
 ROMD:42DC 1C               inc  e
 ROMD:42DD 7B               ld   a,e
 ROMD:42DE FE 06            cp   a,06
 ROMD:42E0 20 BC            jr   nz,429E
 ROMD:42E2 F1               pop  af
 ROMD:42E3 E0 82            ld   (ff00+82),a
 ROMD:42E5 E0 70            ld   (ff00+70),a
 ROMD:42E7 F0 9F            ld   a,(ff00+9F)
 ROMD:42E9 D1               pop  de
 ROMD:42EA C1               pop  bc
 ROMD:42EB C9               ret                 // A = relative space for attacker dealing most HP damage to defender, -1 if no damage will happen

 ROMD:42EC 33 32 16 15 10 0F 12 14               inc  d
 ROMD:42F4 13 1C 1B 1A 19 18 17            jr   4312
 ROMD:42FB 0C 0B               dec  bc
 ROMD:42FD 11 0E 0D         ld   de,0D0E
 ROMD:4300 0A 09               add  hl,bc
 ROMD:4302 03 02               ld   (bc),a
 ROMD:4304 01 04 08 07               rlca 
 ROMD:4308 06 05            ld   b,05
 ROMD:430A 2D 31 2F 30         ld   sp,302F
 ROMD:430E 2C 2E 00
Submarines, Artillery pieces, Rocket Launchers, Mercenary Anti-Air Tank, Anti-Air Missile Launchers, Main Battle Tanks, Hunter Tanks, IFVs, Humvees, regular Anti-Air Tank, APCs, Buggies, Commando, Bazooka, Grunt, Work Car, Convoys, Supply Trucks, Mercenary Missile Frigate, Tanker, Small Aircraft Carrier, Lander, Aegis Warship, Large Aircraft Carrier

 ROMD:4311 1F               rra  
 ROMD:4312 24               inc  h
 ROMD:4313 23               inc  hl
 ROMD:4314 25               dec  h
 ROMD:4315 26 29            ld   h,29
 ROMD:4317 2B               dec  hl
 ROMD:4318 2A               ldi  a,(hl)
 ROMD:4319 1D               dec  e
 ROMD:431A 1E 28            ld   e,28
 ROMD:431C 27               daa  
 ROMD:431D 22               ldi  (hl),a
 ROMD:431E 20 21            jr   nz,4341
 ROMD:4320 00
Interceptor, Bombers, big planes, Ship Buster, Transport Helicopters, Fighter, Lite Fighter, Gunships, Lite Bomber, Attacker, Lite Attacker

 ROMD:4321 F0 82            ld   a,(ff00+82)
 ROMD:4323 F5               push af
 ROMD:4324 3E 02            ld   a,02
 ROMD:4326 E0 82            ld   (ff00+82),a
 ROMD:4328 E0 70            ld   (ff00+70),a
 ROMD:432A FA DD CC         ld   a,(CCDD)
 ROMD:432D 0E 18            ld   c,18
 ROMD:432F EF 12 37 40                          
 ROMD:4333 FE 03            cp   a,03           // Ship?
 ROMD:4335 28 5A            jr   z,4391
 ROMD:4337 FE 04            cp   a,04           // Submarine?
 ROMD:4339 28 56            jr   z,4391
 ROMD:433B FE 02            cp   a,02           // Air?
 ROMD:433D 28 4D            jr   z,438C
 ROMD:433F CD B7 43         call 43B7           // BC holds coordinates of closest enemy unit on same land mass as selected unit
 ROMD:4342 78               ld   a,b
 ROMD:4343 FE FF            cp   a,FF
 ROMD:4345 28 0E            jr   z,4355         // Jump if no valid targets on land mass
 ROMD:4347 FA DD CC         ld   a,(CCDD)       // A = Unit Type
 ROMD:434A CD A2 58         call 58A2           // SRAD($A000) table holds total Movement requirements % 16 * 16, SRAD($B000) table holds same / 16
 ROMD:434D CD B5 5B         call 5BB5           // BC = coordinates of destination tile determined by pathfinding for unit to general destination
 ROMD:4350 78               ld   a,b
 ROMD:4351 FE FF            cp   a,FF
 ROMD:4353 20 59            jr   nz,43AE        // Jumps if movement isn't happening
 ROMD:4355 FA 9A DE         ld   a,(DE9A)
 ROMD:4358 FE FF            cp   a,FF
 ROMD:435A 28 16            jr   z,4372         // Jump if no River tiles along the way
 ROMD:435C 47               ld   b,a
 ROMD:435D FA 9B DE         ld   a,(DE9B)
 ROMD:4360 4F               ld   c,a            // BC holds coordinates of first River tile along the way
 ROMD:4361 FA DD CC         ld   a,(CCDD)       // A = Unit Type
 ROMD:4364 CD A2 58         call 58A2           // SRAD($A000) table holds total Movement requirements % 16 * 16, SRAD($B000) table holds same / 16
 ROMD:4367 CD 9B 59         call 599B           // Surrounding tiles of first River tile along the way set up to be treated as invalid stopping points
 ROMD:436A CD B5 5B         call 5BB5           // BC = coordinates of destination tile determined by pathfinding for unit to general destination
 ROMD:436D 78               ld   a,b
 ROMD:436E FE FF            cp   a,FF
 ROMD:4370 20 3C            jr   nz,43AE        // Jumps if moving isn't happening
 ROMD:4372 FA A0 DE         ld   a,(DEA0)
 ROMD:4375 CB 47            bit 0,a             // Enemy HQ reachable by land?
 ROMD:4377 28 38            jr   z,43B1         // End immediately if enemy HQ isn't reachable by land
 ROMD:4379 CD 9C 5D         call 5D9C           // BC hold inactive player's HQ
 ROMD:437C FA DD CC         ld   a,(CCDD)       // A = Unit Type
 ROMD:437F CD A2 58         call 58A2           // SRAD($A000) table holds total Movement requirements % 16 * 16, SRAD($B000) table holds same / 16
 ROMD:4382 CD B5 5B         call 5BB5           // BC = coordinates of destination tile determined by pathfinding for unit to general destination
 ROMD:4385 78               ld   a,b
 ROMD:4386 FE FF            cp   a,FF
 ROMD:4388 20 24            jr   nz,43AE        // Jumps if able to move closer to inactive player's HQ
 ROMD:438A 18 25            jr   43B1           // Ends immediately after covering land unit
 ROMD:438C CD 9C 5D         call 5D9C           // BC hold inactive player's HQ
 ROMD:438F 18 0F            jr   43A0
 ROMD:4391 FA A0 DE         ld   a,(DEA0)
 ROMD:4394 CB 57            bit 2,a
 ROMD:4396 28 19            jr   z,43B1         // End immediately if enemy HQ isn't reachable by sea
 ROMD:4398 FA 9E DE         ld   a,(DE9E)
 ROMD:439B 47               ld   b,a
 ROMD:439C FA 9F DE         ld   a,(DE9F)
 ROMD:439F 4F               ld   c,a            // BC = Harbor/Beach tile closest to enemy HQ
 ROMD:43A0 FA DD CC         ld   a,(CCDD)       // A = Unit Type
 ROMD:43A3 CD A2 58         call 58A2           // SRAD($A000) table holds total Movement requirements % 16 * 16, SRAD($B000) table holds same / 16
 ROMD:43A6 CD B5 5B         call 5BB5           // BC = coordinates of destination tile determined by pathfinding for unit to general destination
 ROMD:43A9 78               ld   a,b
 ROMD:43AA FE FF            cp   a,FF
 ROMD:43AC 28 03            jr   z,43B1         // Ends immediately if not moving closer to closest Harbor/Beach tile to enemy HQ
 ROMD:43AE CD 46 45         call 4546           // Unit shifting update with viable movement momentarily established
 ROMD:43B1 F1               pop  af
 ROMD:43B2 E0 82            ld   (ff00+82),a
 ROMD:43B4 E0 70            ld   (ff00+70),a
 ROMD:43B6 C9               ret                 // AI's attempt to move closer to the opponent's HQ
 ROMD:43B7 D5               push de
 ROMD:43B8 3E FF            ld   a,FF
 ROMD:43BA E0 9A            ld   (ff00+9A),a
 ROMD:43BC E0 9B            ld   (ff00+9B),a
 ROMD:43BE E0 9C            ld   (ff00+9C),a
 ROMD:43C0 1E 32            ld   e,32
 ROMD:43C2 FA A3 C9         ld   a,(C9A3)
 ROMD:43C5 57               ld   d,a            // D = inactive player's first unit
 ROMD:43C6 D5               push de             // Loop begins here
 ROMD:43C7 7A               ld   a,d
 ROMD:43C8 E0 99            ld   (ff00+99),a
 ROMD:43CA 0E 00            ld   c,00
 ROMD:43CC CD 0B 09         call 090B           // Unit Type
 ROMD:43CF A7               and  a
 ROMD:43D0 28 28            jr   z,43FA         // End cycle if unit doesn't exist
 ROMD:43D2 FA D8 C9         ld   a,(C9D8)
 ROMD:43D5 CD 5E 09         call 095E           // BC = unit coordinates
 ROMD:43D8 50               ld   d,b
 ROMD:43D9 59               ld   e,c
 ROMD:43DA F0 99            ld   a,(ff00+99)
 ROMD:43DC CD 5E 09         call 095E           // BC = unit coordinates
 ROMD:43DF CD 1D 29         call 291D           // A = space difference (BC and DE hold comparison coordinates)
 ROMD:43E2 E0 9D            ld   (ff00+9D),a    // Space difference between selected unit and enemy unit loaded into $FF9D
 ROMD:43E4 CD 2B 5D         call 5D2B           // A = 1 if selected unit and enemy unit aren't on same land mass; 0 otherwise
 ROMD:43E7 A7               and  a
 ROMD:43E8 20 10            jr   nz,43FA        // End cycle if selected unit and enemy unit aren't on same land mass
 ROMD:43EA F0 9C            ld   a,(ff00+9C)
 ROMD:43EC 57               ld   d,a
 ROMD:43ED F0 9D            ld   a,(ff00+9D)
 ROMD:43EF BA               cp   d
 ROMD:43F0 30 08            jr   nc,43FA        // End cycle if prior enemy unit is closer
 ROMD:43F2 E0 9C            ld   (ff00+9C),a
 ROMD:43F4 78               ld   a,b
 ROMD:43F5 E0 9A            ld   (ff00+9A),a
 ROMD:43F7 79               ld   a,c
 ROMD:43F8 E0 9B            ld   (ff00+9B),a
 ROMD:43FA D1               pop  de
 ROMD:43FB 14               inc  d
 ROMD:43FC 1D               dec  e
 ROMD:43FD 20 C7            jr   nz,43C6
 ROMD:43FF F0 9A            ld   a,(ff00+9A)
 ROMD:4401 47               ld   b,a
 ROMD:4402 F0 9B            ld   a,(ff00+9B)
 ROMD:4404 4F               ld   c,a
 ROMD:4405 D1               pop  de
 ROMD:4406 C9               ret                 // BC holds coordinates of closest enemy unit on same land mass as selected unit
 ROMD:4407 EF 0B 3D 69                          // ($C9E8) to ($CA19) holds army's Level values
 ROMD:440B CD BE 65         call 65BE           // WRAM Bank #2 has set 7 done to viable movement tiles, WRAM Bank #5 map has Movement requirements, WRAM Bank #6 map has enemy occupied (bit 1) and ZOC tiles (bit 0) marked, graphics update based on cursor shift
 ROMD:440E CD 34 44         call 4434           // Movement animation and stat changes of (AI) unit
 ROMD:4411 FA EC C5         ld   a,(C5EC)
 ROMD:4414 21 26 44         ld   hl,4426
 ROMD:4417 CD 8F 3A         call 3A8F           // CALL [HL + 2A]
 ROMD:441A CD 6B 44         call 446B           // Selected (AI) unit's movement done updates
 ROMD:441D EF 0B 77 69                          // Show any Level Ups resulting from given action
 ROMD:4421 EF 0B 1E 6D                          // Victory condition check results in ($CA94) and ($CA95) being set based on victory condition managed
 ROMD:4425 C9               ret                 // Handles full movement and action of AI unit based on provided information

 ROMD:4426 9F 44                                // Sound #18
 ROMD:4428 A5 44                                // Property capture update
 ROMD:442A AA 44                                // Property develop update
 ROMD:442C B6 44                                // Combat update
 ROMD:442E BA 44                                // Bridge build update
 ROMD:4430 C6 44                                // Bombing update
 ROMD:4432 E2 44                                // Loading update

 ROMD:4434 C5               push bc
 ROMD:4435 D5               push de
 ROMD:4436 FA ED C5         ld   a,(C5ED)
 ROMD:4439 EA DE CC         ld   (CCDE),a
 ROMD:443C 47               ld   b,a
 ROMD:443D FA EE C5         ld   a,(C5EE)
 ROMD:4440 EA DF CC         ld   (CCDF),a
 ROMD:4443 4F               ld   c,a
 ROMD:4444 EF 0B 01 7B                          // Handles map graphics shift to coordinates BC
 ROMD:4448 EF 0B 9B 56                          // ($FFB5) has movement capacity, WRA5($DD81) has coordinates for path starting from BC, A has travel distance
 ROMD:444C EA E5 C9         ld   (C9E5),a
 ROMD:444F EF 0B 6B 56                          // res 7 on every tile in WRAM Bank #2
 ROMD:4453 EF 0B 8A 42                          // Establishes all on-screen tiles' entire graphics, ($FF95) 2 byte holds screen shift coordinates
 ROMD:4457 CD BE 45         call 45BE           // Animation shows movement of active (AI) unit (BUG: Zone of Control isn't considered blocked off in animation.)
 ROMD:445A CD DC 65         call 65DC           // Unloading stat changes handled as necessary
 ROMD:445D EF 0B 3B 68                          // Establishes selected unit's tile's entire graphics, also sets up Unit Type (WRA2) and Transport/End Turn Flags (WRA1) for tile
 ROMD:4461 FA D8 C9         ld   a,(C9D8)
 ROMD:4464 EF 12 2B 41                          // Unit's stats now holds ($CCDD) to ($CCEC)
 ROMD:4468 D1               pop  de
 ROMD:4469 C1               pop  bc
 ROMD:446A C9               ret                 // Movement animation and stat changes of (AI) unit
 ROMD:446B C5               push bc
 ROMD:446C FA D8 C9         ld   a,(C9D8)
 ROMD:446F 0E 00            ld   c,00
 ROMD:4471 CD 0B 09         call 090B           // Unit Type
 ROMD:4474 C1               pop  bc
 ROMD:4475 A7               and  a
 ROMD:4476 28 26            jr   z,449E
 ROMD:4478 EF 0B 09 57                          // Handles selected unit's fuel reduction (NOTICE: mixed number Movement Power requirement is truncated)
 ROMD:447C EF 0B 1E 5E                          // Transporting increases the carrier's EXP and changes the cargo's coordinates to the carrier's new coordinates
 ROMD:4480 FA E0 CC         ld   a,(CCE0)
 ROMD:4483 CB FF            set 7,a
 ROMD:4485 EA E0 CC         ld   (CCE0),a       // Turn Ended flag set
 ROMD:4488 FA D8 C9         ld   a,(C9D8)
 ROMD:448B EF 12 2B 41                          // Unit's stats now holds ($CCDD) to ($CCEC)
 ROMD:448F FA DE CC         ld   a,(CCDE)
 ROMD:4492 47               ld   b,a
 ROMD:4493 FA DF CC         ld   a,(CCDF)
 ROMD:4496 4F               ld   c,a            // BC = Coordinates
 ROMD:4497 FA D8 C9         ld   a,(C9D8)
 ROMD:449A EF 0B 74 68                          // Updates any parent unit's stats as necessary, also does finishing tile graphics updating (A is would-be child unit #)
 ROMD:449E C9               ret                 // Selected (AI) unit's movement done updates
 ROMD:449F 3E 12            ld   a,12
 ROMD:44A1 CD 44 38         call 3844
 ROMD:44A4 C9               ret  
 ROMD:44A5 EF 0B 8C 64                          // Capture process
 ROMD:44A9 C9               ret  
 ROMD:44AA EF 0B 9C 48                          // Develop process fully handled; A = -1 instead if insufficient "ammo"
 ROMD:44AE FA D8 C9         ld   a,(C9D8)
 ROMD:44B1 EF 12 2B 41                          // Unit's stats now holds ($CCDD) to ($CCEC)
 ROMD:44B5 C9               ret  
 ROMD:44B6 CD 1D 47         call 471D           // AI's combat invocation
 ROMD:44B9 C9               ret  
 ROMD:44BA FA F0 C5         ld   a,(C5F0)
 ROMD:44BD 47               ld   b,a
 ROMD:44BE FA F1 C5         ld   a,(C5F1)
 ROMD:44C1 4F               ld   c,a            // Target's Coordinates
 ROMD:44C2 CD 9F 46         call 469F           // Bridge Building by AI at BC
 ROMD:44C5 C9               ret                 // Bridge Building at Target Coordinates
 ROMD:44C6 FA D8 C9         ld   a,(C9D8)
 ROMD:44C9 EF 0C 4F 50                          // Anti-City weapon's full effect on tile BC and its surrounding tiles and their involved units, primary weapon ammo decremented, A = total HP damage by bombing
 ROMD:44CD C6 0A            add  a,0A
 ROMD:44CF 6F               ld   l,a
 ROMD:44D0 26 00            ld   h,00
 ROMD:44D2 FA D8 C9         ld   a,(C9D8)
 ROMD:44D5 EF 12 DB 40                          // Unit's EXP incremented by (A)+10
 ROMD:44D9 FA D8 C9         ld   a,(C9D8)
 ROMD:44DC EF 12 2B 41                          // Unit's stats now holds ($CCDD) to ($CCEC)
 ROMD:44E0 C9               ret  
 ROMD:44E1 C9               ret  
 ROMD:44E2 EF 0B C7 5D                          // Handles Loading being done
 ROMD:44E6 FA D8 C9         ld   a,(C9D8)
 ROMD:44E9 EF 12 06 41                          // ($CCDD) to ($CCEC) holds unit's stats
 ROMD:44ED C9               ret  
 ROMD:44EE 78               ld   a,b
 ROMD:44EF EA ED C5         ld   (C5ED),a
 ROMD:44F2 79               ld   a,c
 ROMD:44F3 EA EE C5         ld   (C5EE),a
 ROMD:44F6 FA E7 C5         ld   a,(C5E7)
 ROMD:44F9 EA EF C5         ld   (C5EF),a
 ROMD:44FC CD 5E 09         call 095E           // BC = unit coordinates
 ROMD:44FF 78               ld   a,b
 ROMD:4500 EA F0 C5         ld   (C5F0),a
 ROMD:4503 79               ld   a,c
 ROMD:4504 EA F1 C5         ld   (C5F1),a
 ROMD:4507 3E 03            ld   a,03
 ROMD:4509 EA EC C5         ld   (C5EC),a       // Combat, "best" tile, target, target's coordinates
 ROMD:450C CD 1D 47         call 471D           // AI's combat invocation
 ROMD:450F C9               ret                 // AI's combat invocation from "best" tile BC
 ROMD:4510 C5               push bc
 ROMD:4511 EA D8 C9         ld   (C9D8),a
 ROMD:4514 EF 12 06 41                          // ($CCDD) to ($CCEC) holds unit's stats
 ROMD:4518 FA D8 C9         ld   a,(C9D8)
 ROMD:451B EF 12 62 48                          // Establishes Unit's weapons' stats in ($CCED) to ($CD08)
 ROMD:451F FA DE CC         ld   a,(CCDE)
 ROMD:4522 EA D9 C9         ld   (C9D9),a
 ROMD:4525 47               ld   b,a
 ROMD:4526 FA DF CC         ld   a,(CCDF)
 ROMD:4529 EA DA C9         ld   (C9DA),a
 ROMD:452C 4F               ld   c,a            // Coordinates set
 ROMD:452D EF 0B 01 7B                          // Handles map graphics shift to coordinates BC
 ROMD:4531 3E 0A            ld   a,0A
 ROMD:4533 CD 44 38         call 3844
 ROMD:4536 EF 0B D4 5E                          // Empties ($C9DD), ($C9DE), and ($C9E5)
 ROMD:453A FA D8 C9         ld   a,(C9D8)
 ROMD:453D CD 8A 5B         call 5B8A           // WRAM Bank #2 has set 7 done to viable movement tiles, WRAM Bank #5 map has Movement requirements, WRAM Bank #6 map has enemy occupied (bit 1) and ZOC tiles (bit 0) marked
 ROMD:4540 EF 0B 6B 56                          // res 7 on every tile in WRAM Bank #2
 ROMD:4544 C1               pop  bc
 ROMD:4545 C9               ret                 // Coordinates update committal
 ROMD:4546 C5               push bc
 ROMD:4547 D5               push de
 ROMD:4548 FA D8 C9         ld   a,(C9D8)
 ROMD:454B CD 8A 5B         call 5B8A           // WRAM Bank #2 has set 7 done to viable movement tiles, WRAM Bank #5 map has Movement requirements, WRAM Bank #6 map has enemy occupied (bit 1) and ZOC tiles (bit 0) marked
 ROMD:454E EF 0B 8A 42                          // Establishes all on-screen tiles' entire graphics, ($FF95) 2 byte holds screen shift coordinates
 ROMD:4552 78               ld   a,b
 ROMD:4553 EA DE CC         ld   (CCDE),a
 ROMD:4556 79               ld   a,c
 ROMD:4557 EA DF CC         ld   (CCDF),a       // Coordinates set
 ROMD:455A EF 0B 01 7B                          // Handles map graphics shift to coordinates BC
 ROMD:455E FA DE CC         ld   a,(CCDE)
 ROMD:4561 47               ld   b,a
 ROMD:4562 FA DF CC         ld   a,(CCDF)
 ROMD:4565 4F               ld   c,a            // BC = Coordinates
 ROMD:4566 EF 0B 9B 56                          // ($FFB5) has movement capacity, WRA5($DD81) has coordinates for path starting from BC, A has travel distance
 ROMD:456A EA E5 C9         ld   (C9E5),a
 ROMD:456D EF 0B 6B 56                          // res 7 on every tile in WRAM Bank #2
 ROMD:4571 EF 0B 8A 42                          // Establishes all on-screen tiles' entire graphics, ($FF95) 2 byte holds screen shift coordinates
 ROMD:4575 CD BE 45         call 45BE           // Animation shows movement of active (AI) unit (BUG: Zone of Control isn't considered blocked off in animation.)
 ROMD:4578 EF 0B F4 68                          // Updates the graphics of tiles BC and the original starting tile
 ROMD:457C EF 0B 09 57                          // Handles selected unit's fuel reduction (NOTICE: mixed number Movement Power requirement is truncated)
 ROMD:4580 EF 0B 1E 5E                          // Transporting increases the carrier's EXP and changes the cargo's coordinates to the carrier's new coordinates
 ROMD:4584 D1               pop  de
 ROMD:4585 C1               pop  bc
 ROMD:4586 C9               ret                 // Unit shifting update with viable movement momentarily established
 ROMD:4587 C5               push bc
 ROMD:4588 D5               push de
 ROMD:4589 78               ld   a,b
 ROMD:458A EA DE CC         ld   (CCDE),a
 ROMD:458D 79               ld   a,c
 ROMD:458E EA DF CC         ld   (CCDF),a       // Coordinates set
 ROMD:4591 EF 0B 01 7B                          // Handles map graphics shift to coordinates BC
 ROMD:4595 FA DE CC         ld   a,(CCDE)
 ROMD:4598 47               ld   b,a
 ROMD:4599 FA DF CC         ld   a,(CCDF)
 ROMD:459C 4F               ld   c,a            // BC = Coordinates
 ROMD:459D EF 0B 9B 56                          // ($FFB5) has movement capacity, WRA5($DD81) has coordinates for path starting from BC, A has travel distance
 ROMD:45A1 EA E5 C9         ld   (C9E5),a
 ROMD:45A4 EF 0B 6B 56                          // res 7 on every tile in WRAM Bank #2
 ROMD:45A8 EF 0B 8A 42                          // Establishes all on-screen tiles' entire graphics, ($FF95) 2 byte holds screen shift coordinates
 ROMD:45AC CD BE 45         call 45BE           // Animation shows movement of active (AI) unit (BUG: Zone of Control isn't considered blocked off in animation.)
 ROMD:45AF EF 0B F4 68                          // Updates the graphics of tiles BC and the original starting tile
 ROMD:45B3 EF 0B 09 57                          // Handles selected unit's fuel reduction (NOTICE: mixed number Movement Power requirement is truncated)
 ROMD:45B7 EF 0B 1E 5E                          // Transporting increases the carrier's EXP and changes the cargo's coordinates to the carrier's new coordinates
 ROMD:45BB D1               pop  de
 ROMD:45BC C1               pop  bc
 ROMD:45BD C9               ret                 // Unit shifting update, silence version
 ROMD:45BE C5               push bc
 ROMD:45BF D5               push de
 ROMD:45C0 F0 82            ld   a,(ff00+82)
 ROMD:45C2 F5               push af
 ROMD:45C3 3E 05            ld   a,05
 ROMD:45C5 E0 82            ld   (ff00+82),a
 ROMD:45C7 E0 70            ld   (ff00+70),a
 ROMD:45C9 FA D9 C9         ld   a,(C9D9)
 ROMD:45CC 47               ld   b,a
 ROMD:45CD FA DA C9         ld   a,(C9DA)
 ROMD:45D0 4F               ld   c,a
 ROMD:45D1 EF 0B 69 68                          // Unit hidden from view of BC coordinates, allowing view of terrain tile
 ROMD:45D5 FA 80 DD         ld   a,(DD80)
 ROMD:45D8 D6 02            sub  a,02
 ROMD:45DA 28 4B            jr   z,4627
 ROMD:45DC 38 49            jr   c,4627         // End immediately for moving no more than 1 space
 ROMD:45DE 5F               ld   e,a            // E = Tiles moved - 1
 ROMD:45DF D5               push de             // Loop begins here
 ROMD:45E0 7B               ld   a,e            // A = Tiles left
 ROMD:45E1 87               add  a
 ROMD:45E2 21 81 DD         ld   hl,DD81
 ROMD:45E5 CD BC 29         call 29BC           // HL += A
 ROMD:45E8 46               ld   b,(hl)
 ROMD:45E9 23               inc  hl
 ROMD:45EA 4E               ld   c,(hl)
 ROMD:45EB C5               push bc
 ROMD:45EC EF 0B 14 47                          // A = Terrain Type (non-ownsership)
 ROMD:45F0 EA 21 C0         ld   (C021),a       // Preserves terrain
 ROMD:45F3 E6 3F            and  a,3F
 ROMD:45F5 EF 0B 40 47
 ROMD:45F9 EF 0B 2A 47                          // A = Unit Type of occupying unit with bit 7 holding viable movement
 ROMD:45FD EA 22 C0         ld   (C022),a       // Preserves occupying unit's type
 ROMD:4600 FA DD CC         ld   a,(CCDD)       // A = Unit Type
 ROMD:4603 EF 0B 58 47                          // Unit Tile holds Unit Type
 ROMD:4607 EF 0B D1 43                          // Establishes tile BC's entire graphics
 ROMD:460B 3E 02            ld   a,02
 ROMD:460D CD AF 3B         call 3BAF           // Advances game state by 2 frame before any further functions
 ROMD:4610 C1               pop  bc
 ROMD:4611 FA 21 C0         ld   a,(C021)
 ROMD:4614 EF 0B 40 47                          
 ROMD:4618 FA 22 C0         ld   a,(C022)
 ROMD:461B EF 0B 58 47                          
 ROMD:461F EF 0B D1 43                          // Establishes tile BC's entire graphics
 ROMD:4623 D1               pop  de
 ROMD:4624 1D               dec  e
 ROMD:4625 20 B8            jr   nz,45DF
 ROMD:4627 F1               pop  af
 ROMD:4628 E0 82            ld   (ff00+82),a
 ROMD:462A E0 70            ld   (ff00+70),a
 ROMD:462C D1               pop  de
 ROMD:462D C1               pop  bc
 ROMD:462E C9               ret                 // Animation shows movement of active (AI) unit (BUG: Zone of Control isn't considered blocked off in animation.)
 ROMD:462F CD 46 45         call 4546           // Unit shifting update with viable movement momentarily established
 ROMD:4632 FA D8 C9         ld   a,(C9D8)
 ROMD:4635 EF 12 2B 41                          // Unit's stats now holds ($CCDD) to ($CCEC)
 ROMD:4639 3E 08            ld   a,08           // Standby
 ROMD:463B EF 0B B5 51                          // Handles Popup Message as a whole including momentary cursor disabling (A is Popup Message #)
 ROMD:463F C9               ret                 // Movement to coordinates BC shown ending with "Standby" popup message
 ROMD:4640 FA D8 C9         ld   a,(C9D8)
 ROMD:4643 CD 5E 09         call 095E           // BC = unit coordinates
 ROMD:4646 18 E7            jr   462F

 ROMD:4648 EF 0C 77 6B                          // Supply command as a whole, property takes priority over unit for resupply source
 ROMD:464C FA D8 C9         ld   a,(C9D8)
 ROMD:464F EF 12 06 41                          // ($CCDD) to ($CCEC) holds unit's stats
 ROMD:4653 C9               ret                 // Resupply selected unit and gathers their stats
 ROMD:4654 3E 01            ld   a,01
 ROMD:4656 EA EC C5         ld   (C5EC),a       // Property capture
 ROMD:4659 78               ld   a,b
 ROMD:465A EA ED C5         ld   (C5ED),a
 ROMD:465D 79               ld   a,c
 ROMD:465E EA EE C5         ld   (C5EE),a
 ROMD:4661 CD 07 44         call 4407           // Handles full movement and action of AI unit based on provided information
 ROMD:4664 C9               ret                 // Selected (AI) unit Captures property at BC
 ROMD:4665 3E 02            ld   a,02
 ROMD:4667 EA EC C5         ld   (C5EC),a       // Property develop
 ROMD:466A 78               ld   a,b
 ROMD:466B EA ED C5         ld   (C5ED),a
 ROMD:466E 79               ld   a,c
 ROMD:466F EA EE C5         ld   (C5EE),a
 ROMD:4672 CD 07 44         call 4407           // Handles full movement and action of AI unit based on provided information
 ROMD:4675 C9               ret                 // Selected (AI) unit Develops property at BC
 ROMD:4676 0E 01            ld   c,01
 ROMD:4678 CD 5E 09         call 095E           // BC = unit coordinates
 ROMD:467B CD 46 45         call 4546           // Unit shifting update with viable movement momentarily established
 ROMD:467E EF 0B C7 5D                          // Handles Loading being done
 ROMD:4682 FA D8 C9         ld   a,(C9D8)
 ROMD:4685 EF 12 06 41                          // ($CCDD) to ($CCEC) holds unit's stats
 ROMD:4689 C9               ret                 // Handles movement toward transport to move onto
 ROMD:468A C9               ret  
 ROMD:468B 3E 05            ld   a,05
 ROMD:468D EA EC C5         ld   (C5EC),a       // Bombing
 ROMD:4690 78               ld   a,b
 ROMD:4691 EA ED C5         ld   (C5ED),a
 ROMD:4694 79               ld   a,c
 ROMD:4695 EA EE C5         ld   (C5EE),a
 ROMD:4698 CD 07 44         call 4407           // Handles full movement and action of AI unit based on provided information
 ROMD:469B C9               ret                 // Selected (AI) unit Bombs at BC
 ROMD:469C C9               ret  
 ROMD:469D C9               ret  
 ROMD:469E C9               ret  
 ROMD:469F EF 0B 01 7B                          // Handles map graphics shift to coordinates BC
 ROMD:46A3 C5               push bc
 ROMD:46A4 3E 0F            ld   a,0F
 ROMD:46A6 CD AF 3B         call 3BAF           // Advances game state by 15 frames before any further functions
 ROMD:46A9 C1               pop  bc
 ROMD:46AA EF 0B F2 4B                          // Build Bridge Process
 ROMD:46AE FA D8 C9         ld   a,(C9D8)
 ROMD:46B1 EF 12 2B 41                          // Unit's stats now holds ($CCDD) to ($CCEC)
 ROMD:46B5 C9               ret                 // Bridge Building by AI at BC
 ROMD:46B6 C5               push bc
 ROMD:46B7 D5               push de
 ROMD:46B8 5F               ld   e,a
 ROMD:46B9 FA D8 C9         ld   a,(C9D8)
 ROMD:46BC 57               ld   d,a
 ROMD:46BD EF 0B 9B 56                          // ($FFB5) has movement capacity, WRA5($DD81) has coordinates for path starting from BC, A has travel distance
 ROMD:46C1 EA E5 C9         ld   (C9E5),a
 ROMD:46C4 F0 82            ld   a,(ff00+82)
 ROMD:46C6 F5               push af
 ROMD:46C7 3E 02            ld   a,02
 ROMD:46C9 E0 82            ld   (ff00+82),a
 ROMD:46CB E0 70            ld   (ff00+70),a
 ROMD:46CD CD D7 08         call 08D7           // HL = $D000 + B + C * 64
 ROMD:46D0 7E               ld   a,(hl)
 ROMD:46D1 EA F2 C5         ld   (C5F2),a       // ($C5F2) holds occupying unit with bit for valid movement for initial BC
 ROMD:46D4 FA DD CC         ld   a,(CCDD)       // A = Unit Type
 ROMD:46D7 77               ld   (hl),a         // Update tile
 ROMD:46D8 C5               push bc
 ROMD:46D9 FA D9 C9         ld   a,(C9D9)
 ROMD:46DC 47               ld   b,a
 ROMD:46DD FA DA C9         ld   a,(C9DA)
 ROMD:46E0 4F               ld   c,a
 ROMD:46E1 CD D7 08         call 08D7           // HL = $D000 + B + C * 64
 ROMD:46E4 7E               ld   a,(hl)
 ROMD:46E5 EA F3 C5         ld   (C5F3),a       // ($C5F3) holds occupying unit with bit for valid movement for unit's original position
 ROMD:46E8 AF               xor  a
 ROMD:46E9 77               ld   (hl),a
 ROMD:46EA C1               pop  bc
 ROMD:46EB F1               pop  af
 ROMD:46EC E0 82            ld   (ff00+82),a
 ROMD:46EE E0 70            ld   (ff00+70),a
 ROMD:46F0 EF 0C 27 4E                          // A = Attacker's HP loss * 16 + Defender's HP loss
 ROMD:46F4 F5               push af
 ROMD:46F5 F0 82            ld   a,(ff00+82)
 ROMD:46F7 F5               push af
 ROMD:46F8 3E 02            ld   a,02
 ROMD:46FA E0 82            ld   (ff00+82),a
 ROMD:46FC E0 70            ld   (ff00+70),a
 ROMD:46FE CD D7 08         call 08D7           // HL = $D000 + B + C * 64
 ROMD:4701 FA F2 C5         ld   a,(C5F2)
 ROMD:4704 77               ld   (hl),a
 ROMD:4705 FA D9 C9         ld   a,(C9D9)
 ROMD:4708 47               ld   b,a
 ROMD:4709 FA DA C9         ld   a,(C9DA)
 ROMD:470C 4F               ld   c,a
 ROMD:470D CD D7 08         call 08D7           // HL = $D000 + B + C * 64
 ROMD:4710 FA F3 C5         ld   a,(C5F3)
 ROMD:4713 77               ld   (hl),a
 ROMD:4714 F1               pop  af
 ROMD:4715 E0 82            ld   (ff00+82),a
 ROMD:4717 E0 70            ld   (ff00+70),a
 ROMD:4719 F1               pop  af             // A = Attacker's HP loss * 16 + Defender's HP loss
 ROMD:471A D1               pop  de
 ROMD:471B C1               pop  bc
 ROMD:471C C9               ret  
 ROMD:471D C5               push bc
 ROMD:471E D5               push de
 ROMD:471F FA F0 C5         ld   a,(C5F0)
 ROMD:4722 47               ld   b,a
 ROMD:4723 FA F1 C5         ld   a,(C5F1)
 ROMD:4726 4F               ld   c,a
 ROMD:4727 EF 0B 01 7B                          // Handles map graphics shift to coordinates BC
 ROMD:472B FA ED C5         ld   a,(C5ED)
 ROMD:472E 47               ld   b,a
 ROMD:472F FA EE C5         ld   a,(C5EE)
 ROMD:4732 4F               ld   c,a
 ROMD:4733 FA D8 C9         ld   a,(C9D8)
 ROMD:4736 57               ld   d,a
 ROMD:4737 FA EF C5         ld   a,(C5EF)
 ROMD:473A 5F               ld   e,a            // "Best" tile, initiator, target
 ROMD:473B EF 0C CF 43                          // Fully handles invoked combat (BC is attacker's coordinates, D is attacker's unit #, E is defender's unit #)
 ROMD:473F EF 0B 69 6D                          // Rout check results in ($CA94) and ($CA95) being set if Rout has happened, or A = 0 if it hasn't
 ROMD:4743 CD B1 66         call 66B1           // ($C9A0) = winning state
 ROMD:4746 D1               pop  de
 ROMD:4747 C1               pop  bc
 ROMD:4748 C9               ret                 // AI's combat invocation
 ROMD:4749 C5               push bc
 ROMD:474A D5               push de
 ROMD:474B F0 82            ld   a,(ff00+82)
 ROMD:474D F5               push af
 ROMD:474E AF               xor  a
 ROMD:474F EA 09 C6         ld   (C609),a
 ROMD:4752 3E FF            ld   a,FF
 ROMD:4754 EA 08 C6         ld   (C608),a
 ROMD:4757 1E 00            ld   e,00
 ROMD:4759 FA ED C5         ld   a,(C5ED)       // Loop begins here
 ROMD:475C 47               ld   b,a
 ROMD:475D FA EE C5         ld   a,(C5EE)
 ROMD:4760 4F               ld   c,a
 ROMD:4761 CD D9 28         call 28D9           // BC = relative coordinates, Set Carry Flag based on relative coordinates being out of bounds
 ROMD:4764 38 39            jr   c,479F         // Cycle ended by tile's nonexistance
 ROMD:4766 EF 12 4E 41                          // A = unit number of primary occupying unit, -1 if there is none
 ROMD:476A FE FF            cp   a,FF
 ROMD:476C 28 31            jr   z,479F         // Cycle ended by tile not occupied
 ROMD:476E 57               ld   d,a            // D holds occupying unit
 ROMD:476F 0E 00            ld   c,00
 ROMD:4771 CD 0B 09         call 090B           // Unit Type
 ROMD:4774 EF 0B 24 7D                          // Zero Flag set by either A = 0, or A and ($C633) are both either odd or even
 ROMD:4778 28 25            jr   z,479F         // Cycle ended by same side unit
 ROMD:477A FA ED C5         ld   a,(C5ED)
 ROMD:477D 47               ld   b,a
 ROMD:477E FA EE C5         ld   a,(C5EE)
 ROMD:4781 4F               ld   c,a
 ROMD:4782 7A               ld   a,d
 ROMD:4783 CD B6 46         call 46B6
 ROMD:4786 47               ld   b,a            // B = Attacker's HP loss * 16 + Defender's HP loss
 ROMD:4787 CD B0 47         call 47B0           // A = inverse of attacker takes less/equal damage or KOs defender
 ROMD:478A A7               and  a
 ROMD:478B 20 12            jr   nz,479F        // End cycle if defender will take less or no damage
 ROMD:478D 78               ld   a,b
 ROMD:478E E6 0F            and  a,0F           // Defender HP loss
 ROMD:4790 47               ld   b,a
 ROMD:4791 FA 09 C6         ld   a,(C609)
 ROMD:4794 B8               cp   b
 ROMD:4795 30 08            jr   nc,479F
 ROMD:4797 78               ld   a,b
 ROMD:4798 EA 09 C6         ld   (C609),a       // ($C609) maximizes to highest "efficient" damage to a target
 ROMD:479B 7A               ld   a,d
 ROMD:479C EA 08 C6         ld   (C608),a       // ($C608) holds target that will take highest "efficient" damage
 ROMD:479F 1C               inc  e
 ROMD:47A0 7B               ld   a,e
 ROMD:47A1 FE 06            cp   a,06
 ROMD:47A3 20 B4            jr   nz,4759
 ROMD:47A5 F1               pop  af
 ROMD:47A6 E0 82            ld   (ff00+82),a
 ROMD:47A8 E0 70            ld   (ff00+70),a
 ROMD:47AA FA 08 C6         ld   a,(C608)
 ROMD:47AD D1               pop  de
 ROMD:47AE C1               pop  bc
 ROMD:47AF C9               ret                 // A holds target that will take the highest "efficient" damage; -1 if there are no targets that will deal excess counterdamage or take no damage
 ROMD:47B0 C5               push bc
 ROMD:47B1 D5               push de
 ROMD:47B2 47               ld   b,a
 ROMD:47B3 FA E1 DB         ld   a,(DBE1)       // Defender new HP
 ROMD:47B6 A7               and  a
 ROMD:47B7 28 10            jr   z,47C9         // End with A = 0 if defender will fall
 ROMD:47B9 78               ld   a,b
 ROMD:47BA E6 0F            and  a,0F
 ROMD:47BC 28 0E            jr   z,47CC         // End with A = 1 if defender will take no damage
 ROMD:47BE 4F               ld   c,a
 ROMD:47BF 78               ld   a,b
 ROMD:47C0 E6 F0            and  a,F0
 ROMD:47C2 CB 37            swap a
 ROMD:47C4 47               ld   b,a            // Attacker HP loss, Defender HP loss
 ROMD:47C5 79               ld   a,c
 ROMD:47C6 B8               cp   b
 ROMD:47C7 38 03            jr   c,47CC         // End with A = 1 if defender will take less damage
 ROMD:47C9 AF               xor  a
 ROMD:47CA 18 02            jr   47CE
 ROMD:47CC 3E 01            ld   a,01
 ROMD:47CE D1               pop  de
 ROMD:47CF C1               pop  bc
 ROMD:47D0 C9               ret                 // A = inverse of attacker takes less/equal damage or KOs defender
 ROMD:47D1 C5               push bc
 ROMD:47D2 D5               push de
 ROMD:47D3 F5               push af
 ROMD:47D4 AF               xor  a
 ROMD:47D5 21 F4 C5         ld   hl,C5F4
 ROMD:47D8 01 07 00         ld   bc,0007
 ROMD:47DB CD 79 3B         call 3B79           // Empties ($C5F4) to ($C5FA)
 ROMD:47DE F1               pop  af
 ROMD:47DF CD 1F 48         call 481F           // Various: ($C602) both weapon flags; ($C603) primary flags; ($C604) secondary flags if secondary is ranged; ($C606) primary weapon Range; ($C607) secondary weapon Range
 ROMD:47E2 FA A3 C9         ld   a,(C9A3)
 ROMD:47E5 57               ld   d,a            // D = inactive player's first unit
 ROMD:47E6 1E 32            ld   e,32
 ROMD:47E8 7A               ld   a,d            // Loop begins here
 ROMD:47E9 0E 00            ld   c,00
 ROMD:47EB CD 0B 09         call 090B           // Unit Type
 ROMD:47EE A7               and  a
 ROMD:47EF 28 27            jr   z,4818         // End cycle if unit doesn't exist
 ROMD:47F1 0E 18            ld   c,18
 ROMD:47F3 EF 12 37 40                          // A = Unit Family
 ROMD:47F7 21 02 C6         ld   hl,C602
 ROMD:47FA CD C7 3A         call 3AC7           // A = AND (HL + A/8), 2^A%8
 ROMD:47FD 28 19            jr   z,4818         // End cycle if attack against Unit Family is invalid
 ROMD:47FF 7A               ld   a,d
 ROMD:4800 0E 03            ld   c,03
 ROMD:4802 CD 0B 09         call 090B           // Unit Status
 ROMD:4805 CB 47            bit 0,a
 ROMD:4807 20 0F            jr   nz,4818
 ROMD:4809 CB 4F            bit 1,a
 ROMD:480B 20 0B            jr   nz,4818        // End cycle if unit is Loaded or in Reserve
 ROMD:480D 7A               ld   a,d
 ROMD:480E 21 A3 C9         ld   hl,C9A3
 ROMD:4811 96               sub  (hl)
 ROMD:4812 21 F4 C5         ld   hl,C5F4
 ROMD:4815 CD D1 3A         call 3AD1           // (HL + A/8) = (HL + A/8) OR 2^A%8
 ROMD:4818 14               inc  d
 ROMD:4819 1D               dec  e
 ROMD:481A 20 CC            jr   nz,47E8
 ROMD:481C D1               pop  de
 ROMD:481D C1               pop  bc
 ROMD:481E C9               ret                 // $C5F4 holds potential valid targets for given unit
 ROMD:481F C5               push bc
 ROMD:4820 D5               push de
 ROMD:4821 47               ld   b,a
 ROMD:4822 AF               xor  a
 ROMD:4823 EA 05 C6         ld   (C605),a
 ROMD:4826 EA 06 C6         ld   (C606),a
 ROMD:4829 EA 07 C6         ld   (C607),a
 ROMD:482C EA 02 C6         ld   (C602),a
 ROMD:482F EA 03 C6         ld   (C603),a
 ROMD:4832 EA 04 C6         ld   (C604),a
 ROMD:4835 78               ld   a,b
 ROMD:4836 0E 00            ld   c,00
 ROMD:4838 CD 0B 09         call 090B
 ROMD:483B 57               ld   d,a            // D = Unit Type
 ROMD:483C 78               ld   a,b
 ROMD:483D 0E 08            ld   c,08
 ROMD:483F CD 0B 09         call 090B
 ROMD:4842 A7               and  a
 ROMD:4843 28 21            jr   z,4866         // Jump if Primary Weapon Ammo doesn't remain
 ROMD:4845 7A               ld   a,d
 ROMD:4846 0E 14            ld   c,14
 ROMD:4848 EF 12 37 40                          // A = Primary Weapon Type
 ROMD:484C A7               and  a
 ROMD:484D 28 17            jr   z,4866         // Jump if Primary Weapon doesn't exist
 ROMD:484F CD 9E 48         call 489E           // A = Flags (Range Fire, Direct Fire, ?, Sub ATK, Ship ATK, Air ATK, Lite ATK, Armor ATK), H = Max Range, L = Min Range
 ROMD:4852 EA 03 C6         ld   (C603),a
 ROMD:4855 A7               and  a
 ROMD:4856 28 0E            jr   z,4866         // Jump if not attacking weapon
 ROMD:4858 CB 7F            bit 7,a
 ROMD:485A 28 0A            jr   z,4866         // Jump if range fire disallowed
 ROMD:485C 7C               ld   a,h
 ROMD:485D CB 37            swap a
 ROMD:485F B5               or   l              // A = Max Range * 8 + Min Range
 ROMD:4860 EA 06 C6         ld   (C606),a
 ROMD:4863 EA 05 C6         ld   (C605),a
 ROMD:4866 78               ld   a,b
 ROMD:4867 0E 09            ld   c,09
 ROMD:4869 CD 0B 09         call 090B
 ROMD:486C A7               and  a
 ROMD:486D 28 21            jr   z,4890         // Jump if Secondary Weapon Ammo doesn't remain
 ROMD:486F 7A               ld   a,d
 ROMD:4870 0E 16            ld   c,16
 ROMD:4872 EF 12 37 40                          // A = Secondary Weapon Type
 ROMD:4876 A7               and  a
 ROMD:4877 28 17            jr   z,4890         // Jump if Secondary Weapon doesn't exist
 ROMD:4879 CD 9E 48         call 489E           // A = Flags (Range Fire, Direct Fire, ?, Sub ATK, Ship ATK, Air ATK, Lite ATK, Armor ATK), H = Max Range, L = Min Range
 ROMD:487C A7               and  a
 ROMD:487D 28 11            jr   z,4890         // Jump if not attacking weapon
 ROMD:487F CB 7F            bit 7,a
 ROMD:4881 28 0D            jr   z,4890         // Jump if range fire disallowed
 ROMD:4883 EA 04 C6         ld   (C604),a
 ROMD:4886 7C               ld   a,h
 ROMD:4887 CB 37            swap a
 ROMD:4889 B5               or   l              // A = Max Range * 8 + Min Range
 ROMD:488A EA 07 C6         ld   (C607),a
 ROMD:488D EA 05 C6         ld   (C605),a
 ROMD:4890 FA 03 C6         ld   a,(C603)
 ROMD:4893 5F               ld   e,a
 ROMD:4894 FA 04 C6         ld   a,(C604)
 ROMD:4897 B3               or   e
 ROMD:4898 EA 02 C6         ld   (C602),a
 ROMD:489B D1               pop  de
 ROMD:489C C1               pop  bc
 ROMD:489D C9               ret                 // Various: ($C602) both weapon flags; ($C603) primary flags; ($C604) secondary flags if secondary is ranged; ($C606) primary weapon Range; ($C607) secondary weapon Range
 ROMD:489E C5               push bc
 ROMD:489F D5               push de
 ROMD:48A0 47               ld   b,a
 ROMD:48A1 CD C6 48         call 48C6           // A = Viable targets flags
 ROMD:48A4 5F               ld   e,a
 ROMD:48A5 78               ld   a,b
 ROMD:48A6 0E 08            ld   c,08
 ROMD:48A8 EF 12 55 48                          // A = Minimum Range
 ROMD:48AC FE 01            cp   a,01
 ROMD:48AE 20 02            jr   nz,48B2        // Jump if not direct-fire
 ROMD:48B0 CB F3            set 6,e             // Direct Fire
 ROMD:48B2 57               ld   d,a
 ROMD:48B3 78               ld   a,b
 ROMD:48B4 0E 09            ld   c,09
 ROMD:48B6 EF 12 55 48                          // A = Maximum Range
 ROMD:48BA FE 02            cp   a,02
 ROMD:48BC 38 02            jr   c,48C0
 ROMD:48BE CB FB            set 7,e             // Range fire flag
 ROMD:48C0 67               ld   h,a
 ROMD:48C1 6A               ld   l,d
 ROMD:48C2 7B               ld   a,e
 ROMD:48C3 D1               pop  de
 ROMD:48C4 C1               pop  bc
 ROMD:48C5 C9               ret                 // A = Flags (Range Fire, Direct Fire, ?, Sub ATK, Ship ATK, Air ATK, Lite ATK, Armor ATK), H = Max Range, L = Min Range
 ROMD:48C6 C5               push bc
 ROMD:48C7 D5               push de
 ROMD:48C8 5F               ld   e,a
 ROMD:48C9 16 05            ld   d,05
 ROMD:48CB 06 00            ld   b,00
 ROMD:48CD CB 20            sla b               // Loop begins here
 ROMD:48CF 7A               ld   a,d
 ROMD:48D0 3D               dec  a
 ROMD:48D1 C6 0A            add  a,0A
 ROMD:48D3 4F               ld   c,a
 ROMD:48D4 7B               ld   a,e
 ROMD:48D5 EF 12 55 48                          // A = Weapon's ATK
 ROMD:48D9 A7               and  a
 ROMD:48DA 28 02            jr   z,48DE
 ROMD:48DC CB C0            set 0,b
 ROMD:48DE 15               dec  d
 ROMD:48DF 20 EC            jr   nz,48CD
 ROMD:48E1 78               ld   a,b
 ROMD:48E2 D1               pop  de
 ROMD:48E3 C1               pop  bc
 ROMD:48E4 C9               ret                 // A = Viable targets flags
 ROMD:48E5 C5               push bc
 ROMD:48E6 D5               push de
 ROMD:48E7 F0 82            ld   a,(ff00+82)
 ROMD:48E9 F5               push af
 ROMD:48EA 3E 05            ld   a,05
 ROMD:48EC E0 82            ld   (ff00+82),a
 ROMD:48EE E0 70            ld   (ff00+70),a
 ROMD:48F0 FA D8 C9         ld   a,(C9D8)
 ROMD:48F3 CD D1 47         call 47D1           // $C5F4 holds flags of potential valid targets for selected unit
 ROMD:48F6 21 FB C5         ld   hl,C5FB
 ROMD:48F9 01 07 00         ld   bc,0007
 ROMD:48FC AF               xor  a
 ROMD:48FD CD 79 3B         call 3B79           // Empties ($C5FB) to ($C601)
 ROMD:4900 CD E7 5D         call 5DE7           // ($C60F) to ($C612) holds: unit x/y coordinate - Movement Power, then unit x/y coordinate + Movement Power, all 4 bytes minimize/maximize to stay within the map
 ROMD:4903 FA 10 C6         ld   a,(C610)
 ROMD:4906 4F               ld   c,a
 ROMD:4907 FA 0F C6         ld   a,(C60F)       // Loop begins here or 3 lines later depending on new row
 ROMD:490A 47               ld   b,a
 ROMD:490B CD D7 08         call 08D7           // HL = $D000 + B + C * 64
 ROMD:490E 2A               ldi  a,(hl)
 ROMD:490F E5               push hl
 ROMD:4910 FE FF            cp   a,FF
 ROMD:4912 28 03            jr   z,4917         // Skip call for invalid movement
 ROMD:4914 CD 2E 49         call 492E           // ($C5FB) has flags set for valid targets from space BC
 ROMD:4917 E1               pop  hl
 ROMD:4918 04               inc  b
 ROMD:4919 FA 11 C6         ld   a,(C611)
 ROMD:491C B8               cp   b
 ROMD:491D 30 EF            jr   nc,490E
 ROMD:491F 0C               inc  c
 ROMD:4920 FA 12 C6         ld   a,(C612)
 ROMD:4923 B9               cp   c
 ROMD:4924 30 E1            jr   nc,4907
 ROMD:4926 F1               pop  af
 ROMD:4927 E0 82            ld   (ff00+82),a
 ROMD:4929 E0 70            ld   (ff00+70),a
 ROMD:492B D1               pop  de
 ROMD:492C C1               pop  bc
 ROMD:492D C9               ret                 // ($C5FB) has flags set for valid targets from viable movement points
 ROMD:492E C5               push bc
 ROMD:492F D5               push de
 ROMD:4930 FA A3 C9         ld   a,(C9A3)
 ROMD:4933 57               ld   d,a            // D = inactive player's first unit
 ROMD:4934 1E 32            ld   e,32
 ROMD:4936 7A               ld   a,d            // Loop begins here
 ROMD:4937 21 A3 C9         ld   hl,C9A3
 ROMD:493A 96               sub  (hl)
 ROMD:493B 21 F4 C5         ld   hl,C5F4
 ROMD:493E CD C7 3A         call 3AC7           // Potential valid target?
 ROMD:4941 28 1B            jr   z,495E         // End cycle if invalid
 ROMD:4943 7A               ld   a,d
 ROMD:4944 CD 65 49         call 4965           // bit D, ($C5FB)
 ROMD:4947 20 15            jr   nz,495E        // End cycle if already set
 ROMD:4949 D5               push de
 ROMD:494A C5               push bc
 ROMD:494B 7A               ld   a,d
 ROMD:494C CD 5E 09         call 095E           // BC = unit coordinates
 ROMD:494F 50               ld   d,b
 ROMD:4950 59               ld   e,c
 ROMD:4951 C1               pop  bc             // BC is original BC, DE is enemy unit's coordinates
 ROMD:4952 CD 7B 49         call 497B           // A = space difference if within range, -1 if not
 ROMD:4955 D1               pop  de
 ROMD:4956 FE FF            cp   a,FF
 ROMD:4958 28 04            jr   z,495E         // End cycle if not within range
 ROMD:495A 7A               ld   a,d
 ROMD:495B CD 70 49         call 4970           // set D, ($C5FB)
 ROMD:495E 14               inc  d
 ROMD:495F 1D               dec  e
 ROMD:4960 20 D4            jr   nz,4936
 ROMD:4962 D1               pop  de
 ROMD:4963 C1               pop  bc
 ROMD:4964 C9               ret                 // ($C5FB) has flags set for valid targets from space BC
 ROMD:4965 21 A3 C9         ld   hl,C9A3
 ROMD:4968 96               sub  (hl)
 ROMD:4969 21 FB C5         ld   hl,C5FB
 ROMD:496C CD C7 3A         call 3AC7           // A = AND (HL + A/8), 2^A%8
 ROMD:496F C9               ret                 // bit A, ($C5FB)
 ROMD:4970 21 A3 C9         ld   hl,C9A3
 ROMD:4973 96               sub  (hl)
 ROMD:4974 21 FB C5         ld   hl,C5FB
 ROMD:4977 CD D1 3A         call 3AD1           // (HL + A/8) = (HL + A/8) OR 2^A%8
 ROMD:497A C9               ret                 // set A, ($C5FB)
 ROMD:497B C5               push bc
 ROMD:497C D5               push de
 ROMD:497D CD 1D 29         call 291D           // A = space difference (BC and DE hold comparison coordinates)
 ROMD:4980 57               ld   d,a
 ROMD:4981 FA 05 C6         ld   a,(C605)
 ROMD:4984 E6 0F            and  a,0F
 ROMD:4986 6F               ld   l,a            // L = Minimum Range
 ROMD:4987 7A               ld   a,d            // A = space difference
 ROMD:4988 BD               cp   l
 ROMD:4989 38 0D            jr   c,4998         // End with A = -1 if space difference is lower than Minimum Range
 ROMD:498B FA 05 C6         ld   a,(C605)
 ROMD:498E E6 F0            and  a,F0
 ROMD:4990 CB 37            swap a              // A = Maximum Range
 ROMD:4992 BA               cp   d
 ROMD:4993 38 03            jr   c,4998         // End with A = -1 if space difference is higher than Maximum Range
 ROMD:4995 7A               ld   a,d
 ROMD:4996 18 02            jr   499A
 ROMD:4998 3E FF            ld   a,FF
 ROMD:499A D1               pop  de
 ROMD:499B C1               pop  bc
 ROMD:499C C9               ret                 // A = space difference if within range, -1 if not
 ROMD:499D D5               push de
 ROMD:499E CD 5E 09         call 095E           // BC = unit coordinates
 ROMD:49A1 50               ld   d,b
 ROMD:49A2 59               ld   e,c
 ROMD:49A3 F0 82            ld   a,(ff00+82)
 ROMD:49A5 F5               push af
 ROMD:49A6 3E 05            ld   a,05
 ROMD:49A8 E0 82            ld   (ff00+82),a
 ROMD:49AA E0 70            ld   (ff00+70),a
 ROMD:49AC AF               xor  a
 ROMD:49AD EA 0A C6         ld   (C60A),a
 ROMD:49B0 3E FF            ld   a,FF
 ROMD:49B2 EA 08 C6         ld   (C608),a
 ROMD:49B5 EA 09 C6         ld   (C609),a
 ROMD:49B8 0E 00            ld   c,00
 ROMD:49BA 06 00            ld   b,00           // Loop begins here or 2 lines later
 ROMD:49BC CD D7 08         call 08D7           // HL = $D000 + B + C * 64
 ROMD:49BF E5               push hl
 ROMD:49C0 CD B5 5D         call 5DB5           // A = 0 if ending Movement command on tile is valid, 1 otherwise
 ROMD:49C3 A7               and  a
 ROMD:49C4 20 22            jr   nz,49E8        // Cycle ends for invalid Movement ending
 ROMD:49C6 CD 7B 49         call 497B           // A = space difference if within range, -1 if not
 ROMD:49C9 FE FF            cp   a,FF
 ROMD:49CB 28 1B            jr   z,49E8         // Cycle ends if outside range
 ROMD:49CD FE 01            cp   a,01
 ROMD:49CF 28 17            jr   z,49E8         // Cycle ends if adjacent
 ROMD:49D1 FA DD CC         ld   a,(CCDD)       // A = Unit Type
 ROMD:49D4 CD 07 4A         call 4A07           // A = Unit's Cover value + 100 * repair validity
 ROMD:49D7 21 0A C6         ld   hl,C60A
 ROMD:49DA BE               cp   (hl)
 ROMD:49DB 38 0B            jr   c,49E8
 ROMD:49DD EA 0A C6         ld   (C60A),a       // ($C60A) maximizes to highest available Cover value tile, repair validity treated as +100 Cover
 ROMD:49E0 78               ld   a,b
 ROMD:49E1 EA 08 C6         ld   (C608),a
 ROMD:49E4 79               ld   a,c
 ROMD:49E5 EA 09 C6         ld   (C609),a
 ROMD:49E8 E1               pop  hl
 ROMD:49E9 23               inc  hl
 ROMD:49EA 04               inc  b
 ROMD:49EB FA 89 C9         ld   a,(C989)
 ROMD:49EE B8               cp   b
 ROMD:49EF 20 CE            jr   nz,49BF
 ROMD:49F1 0C               inc  c
 ROMD:49F2 FA 8A C9         ld   a,(C98A)
 ROMD:49F5 B9               cp   c
 ROMD:49F6 20 C2            jr   nz,49BA
 ROMD:49F8 FA 08 C6         ld   a,(C608)
 ROMD:49FB 47               ld   b,a
 ROMD:49FC FA 09 C6         ld   a,(C609)
 ROMD:49FF 4F               ld   c,a
 ROMD:4A00 F1               pop  af
 ROMD:4A01 E0 82            ld   (ff00+82),a
 ROMD:4A03 E0 70            ld   (ff00+70),a
 ROMD:4A05 D1               pop  de
 ROMD:4A06 C9               ret                 // BC holds coordinates of highest Cover value tile valid for attack with repair validity treated as +100 Cover
 ROMD:4A07 C5               push bc
 ROMD:4A08 D5               push de
 ROMD:4A09 F5               push af
 ROMD:4A0A CD 85 09         call 0985
 ROMD:4A0D 57               ld   d,a            // D = Terrain Type
 ROMD:4A0E 1E 00            ld   e,00
 ROMD:4A10 F1               pop  af
 ROMD:4A11 F5               push af
 ROMD:4A12 C5               push bc
 ROMD:4A13 0E 18            ld   c,18
 ROMD:4A15 EF 12 37 40                          // A = Unit Family
 ROMD:4A19 C1               pop  bc
 ROMD:4A1A FE 02            cp   a,02
 ROMD:4A1C 28 06            jr   z,4A24
 ROMD:4A1E 7A               ld   a,d
 ROMD:4A1F EF 0C 61 48                          // A = Terrain's Cover Value
 ROMD:4A23 5F               ld   e,a            // E = Terrain's Cover Value
 ROMD:4A24 F1               pop  af
 ROMD:4A25 42               ld   b,d
 ROMD:4A26 EF 12 E0 46                          // A = 0 repairs valid, -1 repairs invalid
 ROMD:4A2A A7               and  a
 ROMD:4A2B 20 04            jr   nz,4A31        // End with A = Terrain's Cover value if repairs invalid
 ROMD:4A2D 7B               ld   a,e
 ROMD:4A2E C6 64            add  a,64
 ROMD:4A30 5F               ld   e,a
 ROMD:4A31 7B               ld   a,e
 ROMD:4A32 D1               pop  de
 ROMD:4A33 C1               pop  bc
 ROMD:4A34 C9               ret                 // A = Unit's Cover value + 100 * repair validity
 ROMD:4A35 21 43 4A         ld   hl,4A43
 ROMD:4A38 CD 93 3A         call 3A93
 ROMD:4A3B C9               ret                 // HL = (2A + $4A43)
 ROMD:4A3C 21 F9 4A         ld   hl,4AF9
 ROMD:4A3F CD 93 3A         call 3A93
 ROMD:4A42 C9               ret                 // HL = (2A + $4AF9)

 ROMD:4A43 AB 4A
 ROMD:4A45 AB 4A                                // Grunt - none
 ROMD:4A47 AC 4A                                // Bazooka - armor unit list
 ROMD:4A49 AB 4A                                // Commando - blank list
 ROMD:4A4B AB 4A                                // Work Car - blank list
 ROMD:4A4D AB 4A               ld   c,d
 ROMD:4A4F AB 4A                                // Supply Truck+ - blank list
 ROMD:4A51 AB 4A               ld   c,d
 ROMD:4A53 AB 4A                                // Convoy+ - blank list
 ROMD:4A55 AB 4A               ld   c,d
 ROMD:4A57 AB 4A                                // Buggy+ - blank list
 ROMD:4A59 AB 4A               ld   c,d
 ROMD:4A5B AB 4A                                // Humvee+ - blank list
 ROMD:4A5D AB 4A               ld   c,d
 ROMD:4A5F AB 4A               ld   c,d
 ROMD:4A61 BD 4A                                // Rocket Launcher - surface unit list
 ROMD:4A63 BD 4A                                // Rocket Launcher+ - surface unit list
 ROMD:4A65 AB 4A               ld   c,d
 ROMD:4A67 AB 4A               ld   c,d
 ROMD:4A69 E0 4A                                // Anti-Air Missile Launcher - air unit list
 ROMD:4A6B E0 4A                                // Anti-Air Missile Launcher+ - air unit list
 ROMD:4A6D BD 4A                                // Artillery - surface unit list
 ROMD:4A6F BD 4A                                // Artillery+ - surface unit list
 ROMD:4A71 AB 4A               ld   c,d
 ROMD:4A73 AC 4A                                // IFV+ - armor unit list
 ROMD:4A75 AB 4A               ld   c,d
 ROMD:4A77 AC 4A                                // Hunter Tank - armor unit list
 ROMD:4A79 AB 4A               ld   c,d
 ROMD:4A7B AB 4A               ld   c,d
 ROMD:4A7D AB 4A               ld   c,d
 ROMD:4A7F AB 4A               ld   c,d
 ROMD:4A81 E0 4A                                // Interceptor - air unit list
 ROMD:4A83 AB 4A               ld   c,d
 ROMD:4A85 AB 4A               ld   c,d
 ROMD:4A87 AB 4A               ld   c,d
 ROMD:4A89 AB 4A               ld   c,d
 ROMD:4A8B AB 4A               ld   c,d
 ROMD:4A8D AB 4A               ld   c,d
 ROMD:4A8F AB 4A               ld   c,d
 ROMD:4A91 AB 4A               ld   c,d
 ROMD:4A93 BD 4A               ld   c,d
 ROMD:4A95 AB 4A               ld   c,d
 ROMD:4A97 AB 4A               ld   c,d
 ROMD:4A99 AB 4A               ld   c,d
 ROMD:4A9B F0 4A                                // Aegis Warship - sea unit list
 ROMD:4A9D E0 4A                                // Mercenary Missile Frigate - air unit list
 ROMD:4A9F E0 4A                                // Large Aircraft Carrier - air unit list
 ROMD:4AA1 E0 4A                                // Small Aircraft Carrier - air unit list
 ROMD:4AA3 AB 4A               ld   c,d
 ROMD:4AA5 AB 4A               ld   c,d
 ROMD:4AA7 F0 4A                                // Submarine - sea unit list
 ROMD:4AA9 AB 4A

 ROMD:4AAB 00
 ROMD:4AAC 16 15 10 0F 1C 1B 1A 19 18 17 0E 0D 12 11 14 13 00
(Artillery pieces, Rocket Launchers, Main Battle Tanks, Hunter Tanks, IFVs, APCs, Anti-Air Tanks, Anti-Air Missile Launchers)

 ROMD:4ABD 16 15 10 0F 1C 1B 1A 19 18 17 02 0C 0B 0E 0D 0A 09 03 01 04 12 11 14 13 06 05 08 07 30 31 2D 2C 2E 2F 00
(After IFVs: Bazooka, Humvees, APCs, Buggies, Commando, Grunt, Work Car, Anti-Air units, Supply Trucks, Convoys, Lander, Tanker, Warships, Aircraft Carriers)

 ROMD:4AE0 1F 22 1D 20 1E 21 28 27 29 24 23 25 2B 2A 26 00
(Interceptor, Lite Bomber, Fighter, Attacker, Lite Fighter, Lite Attacker, Gunships, Ship Buster, Bombers, Transport Plane, Transport Helicopters, Supply Plane)

 ROMD:4AF0 33 32 2D 2C 2E 2F 30 31 00
(Submarines, Warships, Aircraft Carriers, Lander, Tanker)

 ROMD:4AF9 61 4B               ld   c,e
 ROMD:4AFB 62 4B               ld   c,e
 ROMD:4AFD 62 4B               ld   c,e
 ROMD:4AFF 62 4B               ld   c,e
 ROMD:4B01 62 4B                                // Work Car
 ROMD:4B03 61 4B               ld   c,e
 ROMD:4B05 61 4B               ld   c,e
 ROMD:4B07 6F 4B                                // Convoy
 ROMD:4B09 6F 4B               ld   c,e
 ROMD:4B0B 6F 4B                                // Buggy
 ROMD:4B0D 6F 4B               ld   c,e
 ROMD:4B0F 6F 4B                                // Humvee
 ROMD:4B11 6F 4B               ld   c,e
 ROMD:4B13 6F 4B                                // APC
 ROMD:4B15 6F 4B               ld   c,e
 ROMD:4B17 61 4B                                // Rocket Launcher
 ROMD:4B19 61 4B               ld   c,e
 ROMD:4B1B 70 4B                                // Anti-Air Tank
 ROMD:4B1D 70 4B               ld   c,e
 ROMD:4B1F 61 4B                                // Anti-Air Missile Launcher
 ROMD:4B21 61 4B               ld   c,e
 ROMD:4B23 61 4B                                // Artillery
 ROMD:4B25 61 4B               ld   c,e
 ROMD:4B27 6F 4B                                // IFV
 ROMD:4B29 6F 4B               ld   c,e
 ROMD:4B2B 6F 4B                                // Tank Hunter
 ROMD:4B2D 6F 4B               ld   c,e
 ROMD:4B2F 6F 4B                                // Main Battle Tank
 ROMD:4B31 6F 4B               ld   c,e
 ROMD:4B33 90 4B                                // Fighter
 ROMD:4B35 90 4B               ld   c,e
 ROMD:4B37 90 4B               ld   c,e
 ROMD:4B39 90 4B                                // Attacker
 ROMD:4B3B 90 4B               ld   c,e
 ROMD:4B3D 61 4B               ld   c,e
 ROMD:4B3F 61 4B                                // Bomber
 ROMD:4B41 61 4B               ld   c,e
 ROMD:4B43 61 4B                                // Transport Plane
 ROMD:4B45 6F 4B                                // Supply Plane
 ROMD:4B47 61 4B                                // Gunship
 ROMD:4B49 6F 4B               ld   c,e
 ROMD:4B4B 6F 4B                                // Ship Buster
 ROMD:4B4D 6F 4B                                // Transport Helicopter
 ROMD:4B4F 6F 4B               ld   c,e
 ROMD:4B51 6F 4B                                // Aegis Warship
 ROMD:4B53 6F 4B               ld   c,e
 ROMD:4B55 6F 4B                                // Large Aircraft Carrier
 ROMD:4B57 6F 4B               ld   c,e
 ROMD:4B59 6F 4B                                // Lander
 ROMD:4B5B 61 4B                                // Tanker
 ROMD:4B5D 61 4B                                // Submarine
 ROMD:4B5F 6F 4B

 ROMD:4B61 00
 ROMD:4B62 02 03 01 04 09 0A 0B 0C 06 05 08 07 00
(Bazooka, Commando, Grunt, Work Car, Buggy, Buggy+, Humvee, Humvee+, Supply Trucks, Convoys)
 ROMD:4B6F 00
 ROMD:4B70 1F 1D 1E 24 23 22 20 21 2B 2A 28 27 29 25 26 01 04 08 07 06 05 09 03 02 16 15 10 0F 14 13 0D 00
(Fighters, Bombers, Attackers, Transport Helicopters, Gunships, Ship Buster, utility planes, Grunt, Work Car, Convoys, Supply Trucks, Buggy, infantry, Artillery, Rocket Launchers, Anti-Air Missile Launchers, APC)
 ROMD:4B90 00

 ROMD:4B91 C5               push bc
 ROMD:4B92 D5               push de
 ROMD:4B93 F0 82            ld   a,(ff00+82)
 ROMD:4B95 F5               push af
 ROMD:4B96 3E 02            ld   a,02
 ROMD:4B98 E0 82            ld   (ff00+82),a
 ROMD:4B9A E0 70            ld   (ff00+70),a    // WRAM Bank #2
 ROMD:4B9C 21 80 DD         ld   hl,DD80
 ROMD:4B9F 01 0D 00         ld   bc,000D
 ROMD:4BA2 AF               xor  a
 ROMD:4BA3 CD 79 3B         call 3B79           // Empties WRA2($DD80) to ($DD8C)
 ROMD:4BA6 1E 00            ld   e,00
 ROMD:4BA8 21 81 DD         ld   hl,DD81
 ROMD:4BAB 3E 01            ld   a,01           // Loop starts here
 ROMD:4BAD E0 82            ld   (ff00+82),a
 ROMD:4BAF E0 70            ld   (ff00+70),a    // Map WRAM Bank
 ROMD:4BB1 2A               ldi  a,(hl)
 ROMD:4BB2 46               ld   b,(hl)
 ROMD:4BB3 23               inc  hl
 ROMD:4BB4 4E               ld   c,(hl)         // A, B, and C hold Property stats
 ROMD:4BB5 23               inc  hl
 ROMD:4BB6 E5               push hl
 ROMD:4BB7 FE FF            cp   a,FF
 ROMD:4BB9 28 17            jr   z,4BD2         // Skip if Property Strength = -1
 ROMD:4BBB CD 85 09         call 0985           // A = Terrain type
 ROMD:4BBE EF 0B 33 7D                          // A = 0 for viable capture, 1 otherwise
 ROMD:4BC2 A7               and  a
 ROMD:4BC3 20 0D            jr   nz,4BD2        // Capture being a little unneeded results in skip
 ROMD:4BC5 3E 02            ld   a,02
 ROMD:4BC7 E0 82            ld   (ff00+82),a
 ROMD:4BC9 E0 70            ld   (ff00+70),a    // WRAM Bank #2
 ROMD:4BCB 7B               ld   a,e
 ROMD:4BCC 21 80 DD         ld   hl,DD80
 ROMD:4BCF CD D1 3A         call 3AD1           // ($DD80 + E/8) = ($DD80 + E/8) OR 2^E%8
 ROMD:4BD2 E1               pop  hl             // Come back here after skip from Property Strength = -1
 ROMD:4BD3 1C               inc  e
 ROMD:4BD4 7B               ld   a,e
 ROMD:4BD5 FE 64            cp   a,64
 ROMD:4BD7 20 D2            jr   nz,4BAB        // Loops for 100 properties
 ROMD:4BD9 F1               pop  af
 ROMD:4BDA E0 82            ld   (ff00+82),a
 ROMD:4BDC E0 70            ld   (ff00+70),a
 ROMD:4BDE D1               pop  de
 ROMD:4BDF C1               pop  bc
 ROMD:4BE0 C9               ret                 // ($DD80) WRAM Bank #2 tables viable captures
 ROMD:4BE1 CD E5 4B         call 4BE5
 ROMD:4BE4 C9               ret  
 ROMD:4BE5 D5               push de
 ROMD:4BE6 F0 82            ld   a,(ff00+82)
 ROMD:4BE8 F5               push af
 ROMD:4BE9 11 00 00         ld   de,0000
 ROMD:4BEC 3E 02            ld   a,02           // Loop begins here
 ROMD:4BEE E0 82            ld   (ff00+82),a
 ROMD:4BF0 E0 70            ld   (ff00+70),a
 ROMD:4BF2 7B               ld   a,e
 ROMD:4BF3 21 80 DD         ld   hl,DD80
 ROMD:4BF6 CD C7 3A         call 3AC7           // A = Viable Capture Flag
 ROMD:4BF9 28 27            jr   z,4C22         // End cycle if invalid
 ROMD:4BFB 3E 01            ld   a,01
 ROMD:4BFD E0 82            ld   (ff00+82),a
 ROMD:4BFF E0 70            ld   (ff00+70),a
 ROMD:4C01 21 81 DD         ld   hl,DD81
 ROMD:4C04 19               add  hl,de
 ROMD:4C05 19               add  hl,de
 ROMD:4C06 19               add  hl,de
 ROMD:4C07 D5               push de
 ROMD:4C08 2A               ldi  a,(hl)
 ROMD:4C09 56               ld   d,(hl)
 ROMD:4C0A 23               inc  hl
 ROMD:4C0B 5E               ld   e,(hl)
 ROMD:4C0C 23               inc  hl             // A holds Property's Strength, DE holds coordinates
 ROMD:4C0D CD 1D 29         call 291D           // A = space difference (BC and DE hold comparison coordinates)
 ROMD:4C10 D1               pop  de
 ROMD:4C11 FE 04            cp   a,04
 ROMD:4C13 30 0D            jr   nc,4C22
 ROMD:4C15 3E 02            ld   a,02
 ROMD:4C17 E0 82            ld   (ff00+82),a
 ROMD:4C19 E0 70            ld   (ff00+70),a
 ROMD:4C1B 7B               ld   a,e
 ROMD:4C1C 21 80 DD         ld   hl,DD80
 ROMD:4C1F CD DC 3A         call 3ADC           // (HL + A/8) = AND CPL 2^A%8,(HL + A/8)
 ROMD:4C22 1C               inc  e
 ROMD:4C23 7B               ld   a,e
 ROMD:4C24 FE 64            cp   a,64
 ROMD:4C26 20 C4            jr   nz,4BEC
 ROMD:4C28 F1               pop  af
 ROMD:4C29 E0 82            ld   (ff00+82),a
 ROMD:4C2B E0 70            ld   (ff00+70),a
 ROMD:4C2D D1               pop  de
 ROMD:4C2E C9               ret                 // Shuts off Viable Capture Flags for any properties within 3 spaces of BC
 ROMD:4C2F 67               ld   h,a
 ROMD:4C30 F0 82            ld   a,(ff00+82)
 ROMD:4C32 F5               push af
 ROMD:4C33 3E 02            ld   a,02
 ROMD:4C35 E0 82            ld   (ff00+82),a
 ROMD:4C37 E0 70            ld   (ff00+70),a
 ROMD:4C39 7C               ld   a,h
 ROMD:4C3A 21 80 DD         ld   hl,DD80
 ROMD:4C3D CD C7 3A         call 3AC7           // A = Viable Capture flag
 ROMD:4C40 28 04            jr   z,4C46
 ROMD:4C42 26 00            ld   h,00
 ROMD:4C44 18 02            jr   4C48
 ROMD:4C46 26 01            ld   h,01
 ROMD:4C48 F1               pop  af
 ROMD:4C49 E0 82            ld   (ff00+82),a
 ROMD:4C4B E0 70            ld   (ff00+70),a
 ROMD:4C4D 7C               ld   a,h
 ROMD:4C4E C9               ret                 // A = Inverse of Viable Capture flag active
 ROMD:4C4F D5               push de
 ROMD:4C50 F0 82            ld   a,(ff00+82)
 ROMD:4C52 F5               push af
 ROMD:4C53 3E FF            ld   a,FF
 ROMD:4C55 E0 9D            ld   (ff00+9D),a
 ROMD:4C57 E0 99            ld   (ff00+99),a
 ROMD:4C59 E0 9A            ld   (ff00+9A),a
 ROMD:4C5B E0 9C            ld   (ff00+9C),a
 ROMD:4C5D CD E7 5D         call 5DE7           // ($C60F) to ($C612) holds: unit x/y coordinate - Movement Power, then unit x/y coordinate + Movement Power, all 4 bytes minimize/maximize to stay within the map
 ROMD:4C60 FA 10 C6         ld   a,(C610)
 ROMD:4C63 4F               ld   c,a
 ROMD:4C64 FA 0F C6         ld   a,(C60F)       // Loop begins here or 3 lines later
 ROMD:4C67 47               ld   b,a
 ROMD:4C68 CD D7 08         call 08D7           // HL = $D000 + B + C * 64
 ROMD:4C6B E5               push hl             // New loop for same row
 ROMD:4C6C E5               push hl
 ROMD:4C6D CD B5 5D         call 5DB5           // A = 0 if ending Movement command on tile is valid, 1 otherwise
 ROMD:4C70 E1               pop  hl
 ROMD:4C71 A7               and  a
 ROMD:4C72 20 39            jr   nz,4CAD        // End cycle for invalid movement
 ROMD:4C74 3E 01            ld   a,01
 ROMD:4C76 E0 82            ld   (ff00+82),a
 ROMD:4C78 E0 70            ld   (ff00+70),a
 ROMD:4C7A 7E               ld   a,(hl)
 ROMD:4C7B E6 3F            and  a,3F
 ROMD:4C7D EF 0B 33 7D                          // A = 0 for viable capture, 1 otherwise
 ROMD:4C81 A7               and  a
 ROMD:4C82 20 29            jr   nz,4CAD        // End cycle for capture not valid
 ROMD:4C84 3E 05            ld   a,05
 ROMD:4C86 E0 82            ld   (ff00+82),a
 ROMD:4C88 E0 70            ld   (ff00+70),a
 ROMD:4C8A 5E               ld   e,(hl)         // E = Movement requirement for tile
 ROMD:4C8B E5               push hl
 ROMD:4C8C EF 0C 83 58                          // A = Property's Strength for matching property, -1 if there is none
 ROMD:4C90 57               ld   d,a            // D = Property's Strength for matching property, -1 if there is none
 ROMD:4C91 21 9C FF         ld   hl,FF9C
 ROMD:4C94 BE               cp   (hl)
 ROMD:4C95 E1               pop  hl
 ROMD:4C96 38 09            jr   c,4CA1         // Skip Movement requirement comparison for lower Property Strength than prior matching properties
 ROMD:4C98 20 13            jr   nz,4CAD        // End cycle for higher Property Strength than prior matching properties
 ROMD:4C9A 7B               ld   a,e
 ROMD:4C9B 21 9D FF         ld   hl,FF9D
 ROMD:4C9E BE               cp   (hl)
 ROMD:4C9F 30 0C            jr   nc,4CAD        // End cycle for higher or equal Movement requirement
 ROMD:4CA1 7A               ld   a,d
 ROMD:4CA2 E0 9C            ld   (ff00+9C),a
 ROMD:4CA4 7B               ld   a,e
 ROMD:4CA5 E0 9D            ld   (ff00+9D),a
 ROMD:4CA7 78               ld   a,b
 ROMD:4CA8 E0 99            ld   (ff00+99),a
 ROMD:4CAA 79               ld   a,c
 ROMD:4CAB E0 9A            ld   (ff00+9A),a
 ROMD:4CAD E1               pop  hl
 ROMD:4CAE 23               inc  hl
 ROMD:4CAF 04               inc  b
 ROMD:4CB0 FA 11 C6         ld   a,(C611)
 ROMD:4CB3 B8               cp   b
 ROMD:4CB4 30 B5            jr   nc,4C6B
 ROMD:4CB6 0C               inc  c
 ROMD:4CB7 FA 12 C6         ld   a,(C612)
 ROMD:4CBA B9               cp   c
 ROMD:4CBB 30 A7            jr   nc,4C64
 ROMD:4CBD F0 99            ld   a,(ff00+99)
 ROMD:4CBF 47               ld   b,a
 ROMD:4CC0 F0 9A            ld   a,(ff00+9A)
 ROMD:4CC2 4F               ld   c,a            // BC holds coordinates of lowest Property Strength of viable capture property in movement range--tiebreaker of Movement requirement, then N/W location
 ROMD:4CC3 F1               pop  af
 ROMD:4CC4 E0 82            ld   (ff00+82),a
 ROMD:4CC6 E0 70            ld   (ff00+70),a
 ROMD:4CC8 D1               pop  de
 ROMD:4CC9 C9               ret  
 ROMD:4CCA D5               push de
 ROMD:4CCB F0 82            ld   a,(ff00+82)
 ROMD:4CCD F5               push af
 ROMD:4CCE 3E 01            ld   a,01
 ROMD:4CD0 E0 82            ld   (ff00+82),a
 ROMD:4CD2 E0 70            ld   (ff00+70),a
 ROMD:4CD4 3E FF            ld   a,FF
 ROMD:4CD6 E0 9D            ld   (ff00+9D),a
 ROMD:4CD8 E0 99            ld   (ff00+99),a
 ROMD:4CDA E0 9A            ld   (ff00+9A),a
 ROMD:4CDC FA DE CC         ld   a,(CCDE)
 ROMD:4CDF 57               ld   d,a
 ROMD:4CE0 FA DF CC         ld   a,(CCDF)
 ROMD:4CE3 5F               ld   e,a            // DE = Coordinates
 ROMD:4CE4 AF               xor  a
 ROMD:4CE5 E0 9B            ld   (ff00+9B),a
 ROMD:4CE7 F0 9B            ld   a,(ff00+9B)    // Loop begins here
 ROMD:4CE9 CD 2F 4C         call 4C2F           // A = Inverse of Viable Capture flag active
 ROMD:4CEC A7               and  a
 ROMD:4CED 20 35            jr   nz,4D24        // Ends cycle if Capture is unneeded or invalid
 ROMD:4CEF F0 9B            ld   a,(ff00+9B)    // A = Property #
 ROMD:4CF1 06 00            ld   b,00
 ROMD:4CF3 4F               ld   c,a
 ROMD:4CF4 21 81 DD         ld   hl,DD81
 ROMD:4CF7 09               add  hl,bc
 ROMD:4CF8 09               add  hl,bc
 ROMD:4CF9 09               add  hl,bc
 ROMD:4CFA 2A               ldi  a,(hl)
 ROMD:4CFB FE FF            cp   a,FF
 ROMD:4CFD 28 25            jr   z,4D24         // Ends cycle if Property Strength = -1
 ROMD:4CFF 46               ld   b,(hl)
 ROMD:4D00 23               inc  hl
 ROMD:4D01 4E               ld   c,(hl)         // BC holds coordinates of property
 ROMD:4D02 CD 2B 5D         call 5D2B           // A = 1 if unit and property aren't on the same land mass; 0 otherwise
 ROMD:4D05 A7               and  a
 ROMD:4D06 20 1C            jr   nz,4D24        // End cycle if unit and property are not on the same land mass
 ROMD:4D08 CD D7 08         call 08D7           // HL = $D000 + B + C * 64
 ROMD:4D0B 7E               ld   a,(hl)
 ROMD:4D0C E6 3F            and  a,3F
 ROMD:4D0E EF 0B 33 7D                          // A = 0 for viable capture, 1 otherwise
 ROMD:4D12 A7               and  a
 ROMD:4D13 CD 1D 29         call 291D           // A = space difference (BC and DE hold comparison coordinates)
 ROMD:4D16 21 9D FF         ld   hl,FF9D
 ROMD:4D19 BE               cp   (hl)
 ROMD:4D1A 30 08            jr   nc,4D24        // End cycle for further or equal distance property
 ROMD:4D1C E0 9D            ld   (ff00+9D),a
 ROMD:4D1E 78               ld   a,b
 ROMD:4D1F E0 99            ld   (ff00+99),a
 ROMD:4D21 79               ld   a,c
 ROMD:4D22 E0 9A            ld   (ff00+9A),a
 ROMD:4D24 F0 9B            ld   a,(ff00+9B)
 ROMD:4D26 3C               inc  a
 ROMD:4D27 E0 9B            ld   (ff00+9B),a
 ROMD:4D29 FE 64            cp   a,64
 ROMD:4D2B 20 BA            jr   nz,4CE7        // Loops for all 100 properties
 ROMD:4D2D F0 99            ld   a,(ff00+99)
 ROMD:4D2F 47               ld   b,a
 ROMD:4D30 F0 9A            ld   a,(ff00+9A)
 ROMD:4D32 4F               ld   c,a
 ROMD:4D33 F1               pop  af
 ROMD:4D34 E0 82            ld   (ff00+82),a
 ROMD:4D36 E0 70            ld   (ff00+70),a
 ROMD:4D38 D1               pop  de
 ROMD:4D39 C9               ret                 // BC = coordinates of closest allowed capture property on land mass--tiebreaker of location
 ROMD:4D3A D5               push de
 ROMD:4D3B F0 82            ld   a,(ff00+82)
 ROMD:4D3D F5               push af
 ROMD:4D3E 3E 05            ld   a,05
 ROMD:4D40 E0 82            ld   (ff00+82),a
 ROMD:4D42 E0 70            ld   (ff00+70),a
 ROMD:4D44 3E FF            ld   a,FF
 ROMD:4D46 E0 9D            ld   (ff00+9D),a
 ROMD:4D48 E0 99            ld   (ff00+99),a
 ROMD:4D4A E0 9A            ld   (ff00+9A),a
 ROMD:4D4C CD E7 5D         call 5DE7           // ($C60F) to ($C612) holds: unit x/y coordinate - Movement Power, then unit x/y coordinate + Movement Power, all 4 bytes minimize/maximize to stay within the map
 ROMD:4D4F FA 10 C6         ld   a,(C610)
 ROMD:4D52 4F               ld   c,a
 ROMD:4D53 FA 0F C6         ld   a,(C60F)       // Loop begins here or 3 lines later
 ROMD:4D56 47               ld   b,a
 ROMD:4D57 CD D7 08         call 08D7           // HL = $D000 + B + C * 64
 ROMD:4D5A E5               push hl             // Row loop begins here
 ROMD:4D5B 56               ld   d,(hl)
 ROMD:4D5C CD B5 5D         call 5DB5           // A = 0 if ending Movement command on tile is valid, 1 otherwise
 ROMD:4D5F A7               and  a
 ROMD:4D60 20 1A            jr   nz,4D7C
 ROMD:4D62 CD 28 4E         call 4E28           // A = Work Car's Materials cost for Develop command
 ROMD:4D65 5F               ld   e,a            // E = Work Car's Materials cost for Develop command
 ROMD:4D66 FA E5 CC         ld   a,(CCE5)       // A = Primary Weapon Ammo
 ROMD:4D69 BB               cp   e
 ROMD:4D6A 38 10            jr   c,4D7C         // End cycle if insufficient Materials or Development invalid
 ROMD:4D6C 7A               ld   a,d
 ROMD:4D6D 21 9D FF         ld   hl,FF9D
 ROMD:4D70 BE               cp   (hl)
 ROMD:4D71 30 09            jr   nc,4D7C        // End cycle if Movement requirement isn't lower
 ROMD:4D73 7A               ld   a,d
 ROMD:4D74 E0 9D            ld   (ff00+9D),a
 ROMD:4D76 78               ld   a,b
 ROMD:4D77 E0 99            ld   (ff00+99),a
 ROMD:4D79 79               ld   a,c
 ROMD:4D7A E0 9A            ld   (ff00+9A),a
 ROMD:4D7C E1               pop  hl
 ROMD:4D7D 23               inc  hl
 ROMD:4D7E 04               inc  b
 ROMD:4D7F FA 11 C6         ld   a,(C611)
 ROMD:4D82 B8               cp   b
 ROMD:4D83 30 D5            jr   nc,4D5A
 ROMD:4D85 0C               inc  c
 ROMD:4D86 FA 12 C6         ld   a,(C612)
 ROMD:4D89 B9               cp   c
 ROMD:4D8A 30 C7            jr   nc,4D53
 ROMD:4D8C F0 99            ld   a,(ff00+99)
 ROMD:4D8E 47               ld   b,a
 ROMD:4D8F F0 9A            ld   a,(ff00+9A)
 ROMD:4D91 4F               ld   c,a
 ROMD:4D92 F1               pop  af
 ROMD:4D93 E0 82            ld   (ff00+82),a
 ROMD:4D95 E0 70            ld   (ff00+70),a
 ROMD:4D97 D1               pop  de
 ROMD:4D98 C9               ret                 // BC holds coordinates of lowest Property Strength of viable development property in movement range--tiebreaker of Movement requirement, then N/W location
 ROMD:4D99 D5               push de
 ROMD:4D9A F0 82            ld   a,(ff00+82)
 ROMD:4D9C F5               push af
 ROMD:4D9D 3E 01            ld   a,01
 ROMD:4D9F E0 82            ld   (ff00+82),a
 ROMD:4DA1 E0 70            ld   (ff00+70),a
 ROMD:4DA3 CD 93 05         call 0593           // ($0000) = 10
 ROMD:4DA6 3E 0D            ld   a,0D
 ROMD:4DA8 CD 8D 05         call 058D           // ($4000) = 13, ($FF81) = 13 (Terrain, Movement requirements from destination)
 ROMD:4DAB 3E FF            ld   a,FF
 ROMD:4DAD E0 99            ld   (ff00+99),a
 ROMD:4DAF E0 9A            ld   (ff00+9A),a
 ROMD:4DB1 E0 9D            ld   (ff00+9D),a
 ROMD:4DB3 E0 9D            ld   (ff00+9D),a
 ROMD:4DB5 AF               xor  a
 ROMD:4DB6 E0 9B            ld   (ff00+9B),a
 ROMD:4DB8 21 81 DD         ld   hl,DD81
 ROMD:4DBB 2A               ldi  a,(hl)         // Loop begins here
 ROMD:4DBC 46               ld   b,(hl)
 ROMD:4DBD 23               inc  hl
 ROMD:4DBE 4E               ld   c,(hl)
 ROMD:4DBF 23               inc  hl
 ROMD:4DC0 E0 9C            ld   (ff00+9C),a
 ROMD:4DC2 E5               push hl
 ROMD:4DC3 FE FF            cp   a,FF
 ROMD:4DC5 28 47            jr   z,4E0E
 ROMD:4DC7 CD 28 4E         call 4E28           // A = Work Car's Materials cost for Develop command
 ROMD:4DCA 5F               ld   e,a
 ROMD:4DCB FA E5 CC         ld   a,(CCE5)
 ROMD:4DCE BB               cp   e              // End cycle if insufficient Materials
 ROMD:4DCF 38 3D            jr   c,4E0E
 ROMD:4DD1 CD D7 08         call 08D7           // HL = $D000 + B + C * 64
 ROMD:4DD4 F0 82            ld   a,(ff00+82)
 ROMD:4DD6 F5               push af
 ROMD:4DD7 3E 02            ld   a,02
 ROMD:4DD9 E0 82            ld   (ff00+82),a
 ROMD:4DDB E0 70            ld   (ff00+70),a
 ROMD:4DDD 5E               ld   e,(hl)
 ROMD:4DDE F1               pop  af
 ROMD:4DDF E0 82            ld   (ff00+82),a
 ROMD:4DE1 E0 70            ld   (ff00+70),a
 ROMD:4DE3 7B               ld   a,e
 ROMD:4DE4 E6 7F            and  a,7F
 ROMD:4DE6 20 26            jr   nz,4E0E        // End cycle if tile is unoccupied
 ROMD:4DE8 7C               ld   a,h
 ROMD:4DE9 C6 D0            add  a,D0
 ROMD:4DEB 67               ld   h,a
 ROMD:4DEC 7E               ld   a,(hl)
 ROMD:4DED FE FF            cp   a,FF
 ROMD:4DEF 28 1D            jr   z,4E0E         // End cycle if tile is unreachable
 ROMD:4DF1 5F               ld   e,a
 ROMD:4DF2 7C               ld   a,h
 ROMD:4DF3 C6 10            add  a,10
 ROMD:4DF5 67               ld   h,a
 ROMD:4DF6 56               ld   d,(hl)         // DE holds Movement requirement (no longer reversed)
 ROMD:4DF7 F0 9D            ld   a,(ff00+9D)
 ROMD:4DF9 6F               ld   l,a
 ROMD:4DFA F0 9D            ld   a,(ff00+9D)
 ROMD:4DFC 67               ld   h,a
 ROMD:4DFD CD CA 29         call 29CA           // Carry Flag active if DE < HL, A = 0 if DE = HL
 ROMD:4E00 30 0C            jr   nc,4E0E
 ROMD:4E02 7B               ld   a,e
 ROMD:4E03 E0 9D            ld   (ff00+9D),a
 ROMD:4E05 7A               ld   a,d
 ROMD:4E06 E0 9D            ld   (ff00+9D),a
 ROMD:4E08 78               ld   a,b
 ROMD:4E09 E0 99            ld   (ff00+99),a
 ROMD:4E0B 79               ld   a,c
 ROMD:4E0C E0 9A            ld   (ff00+9A),a
 ROMD:4E0E E1               pop  hl
 ROMD:4E0F F0 9B            ld   a,(ff00+9B)
 ROMD:4E11 3C               inc  a
 ROMD:4E12 E0 9B            ld   (ff00+9B),a
 ROMD:4E14 FE 64            cp   a,64
 ROMD:4E16 20 A3            jr   nz,4DBB
 ROMD:4E18 F0 99            ld   a,(ff00+99)
 ROMD:4E1A 47               ld   b,a
 ROMD:4E1B F0 9A            ld   a,(ff00+9A)
 ROMD:4E1D 4F               ld   c,a
 ROMD:4E1E CD 9B 05         call 059B           // ($0000) = 0
 ROMD:4E21 F1               pop  af
 ROMD:4E22 E0 82            ld   (ff00+82),a
 ROMD:4E24 E0 70            ld   (ff00+70),a
 ROMD:4E26 D1               pop  de
 ROMD:4E27 C9               ret                 // BC = coordinates of "closest" allowed capture property that is reachable--tiebreaker of location (BUG: rounds down by every 16 spaces)
 ROMD:4E28 D5               push de
 ROMD:4E29 CD 85 09         call 0985           // A = Terrain type
 ROMD:4E2C 57               ld   d,a
 ROMD:4E2D EF 0B 6D 7D                          // A = 1 for anything other than a Ruined property, 0 for any Ruined property
 ROMD:4E31 A7               and  a
 ROMD:4E32 28 13            jr   z,4E47         // End with A = 2 for any Ruined property
 ROMD:4E34 7A               ld   a,d
 ROMD:4E35 EF 0B F7 7C                          // A = 0 for owner's turn, 1 for opponent's turn, 2 for Neutral property, or 3 for non-property tile
 ROMD:4E39 FE 00            cp   a,00
 ROMD:4E3B 20 0E            jr   nz,4E4B        // End with A = -1 if not owner's turn
 ROMD:4E3D EF 0C BA 58                          // Compares Current Property Strength to max Property Strength
 ROMD:4E41 28 08            jr   z,4E4B         // End with A = -1 if Property already has max Strength
 ROMD:4E43 3E 01            ld   a,01
 ROMD:4E45 18 06            jr   4E4D
 ROMD:4E47 3E 02            ld   a,02
 ROMD:4E49 18 02            jr   4E4D
 ROMD:4E4B 3E FF            ld   a,FF
 ROMD:4E4D D1               pop  de
 ROMD:4E4E C9               ret                 // A = Work Car's Materials cost for Develop command
 ROMD:4E4F CD 94 4E         call 4E94           // Sets up AI build possibilities and demand
 ROMD:4E52 C9               ret  
 ROMD:4E53 C5               push bc
 ROMD:4E54 D5               push de
 ROMD:4E55 F0 82            ld   a,(ff00+82)
 ROMD:4E57 F5               push af
 ROMD:4E58 3E 02            ld   a,02
 ROMD:4E5A E0 82            ld   (ff00+82),a
 ROMD:4E5C E0 70            ld   (ff00+70),a
 ROMD:4E5E CD 8E 52         call 528E           // WRAM Bank #2 ($DD81) to ($DDB4) holds available units of each type
 ROMD:4E61 CD 4F 4E         call 4E4F           // Sets up AI build possibilities and demand
 ROMD:4E64 CD 86 51         call 5186           // Check for building: Work Car, Grunt, Bazooka, APC, Lander, Transport Helicopter, Transport Plane
 ROMD:4E67 38 23            jr   c,4E8C
 ROMD:4E69 CD C4 52         call 52C4           // WRA2($DE57) to ($DE8F) established with Fielded unit counts; ($DE8B) holds Land, non-Fighter Air, Fighter, Ship, Subs
 ROMD:4E6C CD 36 53         call 5336           // WRA2($DDE9) 4 byte holds counts of: AI Helicopters, AI Planes, AI Ships, AI Land units
 ROMD:4E6F FA A0 DE         ld   a,(DEA0)
 ROMD:4E72 CB 47            bit 0,a             // Enemy HQ reachable by land?
 ROMD:4E74 28 0B            jr   z,4E81
 ROMD:4E76 CD 08 52         call 5208           // Check for building: Fighter, Attacker, lite equivalent, Gunship; Gunship takes priority if 8 planes available and enemy has fewer than 4 planes
 ROMD:4E79 CD B8 51         call 51B8           // Check for building: MB Tank, Artillery, Anti-Air Tank, IFV, Rocket Launcher, Hunter Tank, Anti-Air Missile Launcher, Humvee, Buggy; Anti-Air Missile Launcher and then Anti-Air Tank take top priority if enemy has multiple air units
 ROMD:4E7C CD 4E 52         call 524E           // Check for building: Aegis Warship, Small Aircraft Carrier, Large Aircraft Carrier; given Aircraft Carrier size takes priority depending on number of helicopter or plane units clearing 5
 ROMD:4E7F 18 0B            jr   4E8C
 ROMD:4E81 CD 08 52         call 5208           // AI attempts to build air units
 ROMD:4E84 CD 4E 52         call 524E           // AI attempts to build sea units
 ROMD:4E87 CD B8 51         call 51B8           // 3 attempts by the AI to build each type of combat land vehicle, with anti-air units given top priority if at least 2 air units are fielded against the AI
 ROMD:4E8A 18 00            jr   4E8C
 ROMD:4E8C F1               pop  af
 ROMD:4E8D E0 82            ld   (ff00+82),a
 ROMD:4E8F E0 70            ld   (ff00+70),a
 ROMD:4E91 D1               pop  de
 ROMD:4E92 C1               pop  bc
 ROMD:4E93 C9               ret  
 ROMD:4E94 F0 82            ld   a,(ff00+82)
 ROMD:4E96 F5               push af
 ROMD:4E97 3E 02            ld   a,02
 ROMD:4E99 E0 82            ld   (ff00+82),a
 ROMD:4E9B E0 70            ld   (ff00+70),a
 ROMD:4E9D AF               xor  a
 ROMD:4E9E EA ED DD         ld   (DDED),a
 ROMD:4EA1 21 B5 DD         ld   hl,DDB5
 ROMD:4EA4 01 34 00         ld   bc,0034
 ROMD:4EA7 AF               xor  a
 ROMD:4EA8 CD 79 3B         call 3B79           // Empties WRA2($DDB5) to ($DDE8)
 ROMD:4EAB 1E 00            ld   e,00
 ROMD:4EAD 7B               ld   a,e            // Loop begins here
 ROMD:4EAE EF 12 70 44                          // A = 0 if unit type is buyable for property, 2 otherwise
 ROMD:4EB2 FE 00            cp   a,00
 ROMD:4EB4 20 0A            jr   nz,4EC0        // Cycle ends for unit type not buyable
 ROMD:4EB6 7B               ld   a,e
 ROMD:4EB7 21 B5 DD         ld   hl,DDB5
 ROMD:4EBA CD BC 29         call 29BC           // HL += A
 ROMD:4EBD 3E 01            ld   a,01
 ROMD:4EBF 77               ld   (hl),a
 ROMD:4EC0 1C               inc  e
 ROMD:4EC1 7B               ld   a,e
 ROMD:4EC2 FE 34            cp   a,34
 ROMD:4EC4 20 E7            jr   nz,4EAD        // WRAM Bank #2 ($DDB5) to ($DDE8) each hold 1 for allowed units, 0 otherwise
 ROMD:4EC6 CD 1F 4F         call 4F1F           // Grunt: 5 for 70+ Properties, min(4,trunc(Properties/8)+1) otherwise; Bazooka: half of Grunt's value rounded down
 ROMD:4EC9 CD B5 4F         call 4FB5           // Work Car: 3
 ROMD:4ECC CD BE 4F         call 4FBE           // Air unit build demand counts discounting transports
 ROMD:4ECF CD 7D 50         call 507D           // Sea unit build demand counts discounting Lander
 ROMD:4ED2 CD 26 51         call 5126           // Land unit build demand counts discounting transports or Supply Truck
 ROMD:4ED5 CD 9F 4F         call 4F9F           // If enemy HQ is reachable by land: APC: 2; IFV: 3
 ROMD:4ED8 CD 58 4F         call 4F58           // Transport Helicopter: ($DEA1)/2 to a minimum of 4; Transport Plane: same
 ROMD:4EDB CD 70 4F         call 4F70           // Reachable by sea: Lander: 4; reachable by land and sea: APC/IFV: Grunt's Value / 2
 ROMD:4EDE F1               pop  af
 ROMD:4EDF E0 82            ld   (ff00+82),a
 ROMD:4EE1 E0 70            ld   (ff00+70),a
 ROMD:4EE3 C9               ret                 // Sets up AI build possibilities and demand
 ROMD:4EE4 2A               ldi  a,(hl)
 ROMD:4EE5 A7               and  a
 ROMD:4EE6 28 09            jr   z,4EF1         // Ending jump for end of list
 ROMD:4EE8 46               ld   b,(hl)
 ROMD:4EE9 23               inc  hl
 ROMD:4EEA E5               push hl
 ROMD:4EEB CD F2 4E         call 4EF2           // Given allowed unit marked by A has respective $DDB5 address set to demanded unit count, $DDED incremented with its respective $DDEE 2 byte address holding Unit Type and Demanded Count
 ROMD:4EEE E1               pop  hl
 ROMD:4EEF 18 F3            jr   4EE4
 ROMD:4EF1 C9               ret                 // List of values for certain units indicated by table at HL
 ROMD:4EF2 C5               push bc
 ROMD:4EF3 4F               ld   c,a
 ROMD:4EF4 21 B5 DD         ld   hl,DDB5
 ROMD:4EF7 CD BC 29         call 29BC           // HL += A
 ROMD:4EFA 7E               ld   a,(hl)
 ROMD:4EFB A7               and  a
 ROMD:4EFC 28 15            jr   z,4F13         // End immediately if ($DDB5 + A) = 0
 ROMD:4EFE 70               ld   (hl),b
 ROMD:4EFF FA ED DD         ld   a,(DDED)
 ROMD:4F02 87               add  a
 ROMD:4F03 21 EE DD         ld   hl,DDEE
 ROMD:4F06 CD BC 29         call 29BC           // HL += A
 ROMD:4F09 FA ED DD         ld   a,(DDED)
 ROMD:4F0C 3C               inc  a
 ROMD:4F0D EA ED DD         ld   (DDED),a
 ROMD:4F10 79               ld   a,c
 ROMD:4F11 22               ldi  (hl),a
 ROMD:4F12 70               ld   (hl),b
 ROMD:4F13 C1               pop  bc
 ROMD:4F14 C9               ret                 // Given allowed unit marked by A has respective $DDB5 address set to demanded unit count, $DDED incremented with its respective $DDEE 2 byte address holding Unit Type and Demanded Count
 ROMD:4F15 CB 3F            srl a
 ROMD:4F17 47               ld   b,a
 ROMD:4F18 FE 04            cp   a,04
 ROMD:4F1A 38 02            jr   c,4F1E
 ROMD:4F1C 06 04            ld   b,04
 ROMD:4F1E C9               ret                 // A = A/2; B = max(4,A/2)
 ROMD:4F1F CD 47 4F         call 4F47           // A = map's total property count
 ROMD:4F22 FE 36            cp   a,36
 ROMD:4F24 30 12            jr   nc,4F38
 ROMD:4F26 FE 1B            cp   a,1B
 ROMD:4F28 30 0A            jr   nc,4F34
 ROMD:4F2A CB 3F            srl a
 ROMD:4F2C CB 3F            srl a
 ROMD:4F2E CB 3F            srl a
 ROMD:4F30 3C               inc  a
 ROMD:4F31 47               ld   b,a
 ROMD:4F32 18 06            jr   4F3A
 ROMD:4F34 06 04            ld   b,04
 ROMD:4F36 18 02            jr   4F3A
 ROMD:4F38 06 05            ld   b,05
 ROMD:4F3A 3E 01            ld   a,01
 ROMD:4F3C CD F2 4E         call 4EF2           // Grunt: 1~5
 ROMD:4F3F 3E 02            ld   a,02
 ROMD:4F41 CB 38            srl b
 ROMD:4F43 CD F2 4E         call 4EF2           // Bazooka: 1~2
 ROMD:4F46 C9               ret                 // Grunt: 5 for 70+ Properties, min(4,trunc(Properties/8)+1) otherwise; Bazooka: half of Grunt's value rounded down
 ROMD:4F47 01 00 00         ld   bc,0000
 ROMD:4F4A 21 4A C6         ld   hl,C64A
 ROMD:4F4D 2A               ldi  a,(hl)         // Loop begins here
 ROMD:4F4E 81               add  c
 ROMD:4F4F 4F               ld   c,a
 ROMD:4F50 04               inc  b
 ROMD:4F51 78               ld   a,b
 ROMD:4F52 FE 20            cp   a,20
 ROMD:4F54 20 F7            jr   nz,4F4D
 ROMD:4F56 79               ld   a,c
 ROMD:4F57 C9               ret                 // A = map's total property count
 ROMD:4F58 FA A0 DE         ld   a,(DEA0)
 ROMD:4F5B CB 4F            bit 1,a             // Enemy HQ reachable by air? (..of course it will be..)
 ROMD:4F5D 28 10            jr   z,4F6F         // End immediately if enemy HQ isn't reachable by air (..how wouldn't it be?)
 ROMD:4F5F FA A1 DE         ld   a,(DEA1)
 ROMD:4F62 CD 15 4F         call 4F15           // A = A/2; B = max(4,A/2)
 ROMD:4F65 3E 2A            ld   a,2A
 ROMD:4F67 CD F2 4E         call 4EF2           // Transport Helicopter: max(4,A/2)
 ROMD:4F6A 3E 25            ld   a,25
 ROMD:4F6C CD F2 4E         call 4EF2           // Transport Plane: max(4,A/2)
 ROMD:4F6F C9               ret                 // Transport Helicopter: ($DEA1)/2 to a minimum of 4; Transport Plane: same
 ROMD:4F70 FA A0 DE         ld   a,(DEA0)
 ROMD:4F73 CB 57            bit 2,a
 ROMD:4F75 28 27            jr   z,4F9E         // End immediately if enemy HQ isn't reachable by sea
 ROMD:4F77 3E 02            ld   a,02
 ROMD:4F79 CD 15 4F         call 4F15           // A = 1; B = 4
 ROMD:4F7C 3E 30            ld   a,30
 ROMD:4F7E CD F2 4E         call 4EF2           // Lander: 4
 ROMD:4F81 FA A0 DE         ld   a,(DEA0)
 ROMD:4F84 CB 47            bit 0,a
 ROMD:4F86 20 16            jr   nz,4F9E        // End immediately if enemy HQ isn't reachable by land
 ROMD:4F88 3E 01            ld   a,01
 ROMD:4F8A 21 B5 DD         ld   hl,DDB5
 ROMD:4F8D CD BC 29         call 29BC           // HL += A
 ROMD:4F90 7E               ld   a,(hl)
 ROMD:4F91 CB 3F            srl a
 ROMD:4F93 47               ld   b,a
 ROMD:4F94 3E 0D            ld   a,0D
 ROMD:4F96 CD F2 4E         call 4EF2           // APC: half of Grunt's value
 ROMD:4F99 3E 17            ld   a,17
 ROMD:4F9B CD F2 4E         call 4EF2           // IFV: half of Grunt's value
 ROMD:4F9E C9               ret                 // Reachable by sea: Lander: 4; reachable by land and sea: APC/IFV: Grunt's Value / 2
 ROMD:4F9F FA A0 DE         ld   a,(DEA0)
 ROMD:4FA2 CB 47            bit 0,a
 ROMD:4FA4 28 0E            jr   z,4FB4         // End immediately if enemy HQ isn't reachable by land
 ROMD:4FA6 3E 0D            ld   a,0D
 ROMD:4FA8 06 02            ld   b,02
 ROMD:4FAA CD F2 4E         call 4EF2           // APC: 2
 ROMD:4FAD 3E 17            ld   a,17
 ROMD:4FAF 06 03            ld   b,03
 ROMD:4FB1 CD F2 4E         call 4EF2           // IFV: 3
 ROMD:4FB4 C9               ret  
 ROMD:4FB5 3E 03            ld   a,03
 ROMD:4FB7 47               ld   b,a
 ROMD:4FB8 3E 04            ld   a,04
 ROMD:4FBA CD F2 4E         call 4EF2           // Work Car: 3
 ROMD:4FBD C9               ret  
 ROMD:4FBE FA A0 DE         ld   a,(DEA0)
 ROMD:4FC1 CB 4F            bit 1,a
 ROMD:4FC3 CA 7C 50         jp   z,507C         // End immediately if enemy HQ isn't reachable by air (..again, how?)
 ROMD:4FC6 CB 47            bit 0,a
 ROMD:4FC8 28 29            jr   z,4FF3         // Jump if enemy HQ isn't reachable by land
 ROMD:4FCA CB 57            bit 2,a
 ROMD:4FCC 28 58            jr   z,5026         // Jump if enemy HQ isn't reachable by sea
 ROMD:4FCE FA 56 DE         ld   a,(DE56)
 ROMD:4FD1 CB 4F            bit 1,a
 ROMD:4FD3 28 08            jr   z,4FDD
 ROMD:4FD5 21 0C 55         ld   hl,550C
 ROMD:4FD8 CD E4 4E         call 4EE4           // Gunship/Fighters: 4; Attackers/Bomber: 2 (Gunship, Attackers, Fighters, Bomber)
 ROMD:4FDB 18 06            jr   4FE3
 ROMD:4FDD 21 19 55         ld   hl,5519
 ROMD:4FE0 CD E4 4E         call 4EE4           // Gunship/Attackers: 4; Bomber: 2 (Gunship, Attackers, Bomber)
 ROMD:4FE3 FA 56 DE         ld   a,(DE56)
 ROMD:4FE6 CB 57            bit 2,a
 ROMD:4FE8 28 07            jr   z,4FF1         // Direct skip of next 3 lines for inactive bit
 ROMD:4FEA 3E 29            ld   a,29
 ROMD:4FEC 06 02            ld   b,02
 ROMD:4FEE CD F2 4E         call 4EF2           // Ship Buster: 2
 ROMD:4FF1 18 2A            jr   501D           // Ending with: Gunship: 4; Attacker: 2, 4 if no air targets; Fighters: 2 if air targets; Bomber: 2; Ship Buster: 2 if any sea targets; Supply Plane: 2
 ROMD:4FF3 FA A0 DE         ld   a,(DEA0)       // Not reachable by land
 ROMD:4FF6 CB 57            bit 2,a
 ROMD:4FF8 28 58            jr   z,5052         // Jump if enemy HQ isn't reachable by land OR sea
 ROMD:4FFA FA 56 DE         ld   a,(DE56)
 ROMD:4FFD CB 4F            bit 1,a
 ROMD:4FFF 28 08            jr   z,5009
 ROMD:5001 21 22 55         ld   hl,5522
 ROMD:5004 CD E4 4E         call 4EE4           // Gunship/Attackers: 4; Fighter (regular)/Bomber: 2 (Gunship, Attackers, Fighter (regular), Bomber)
 ROMD:5007 18 06            jr   500F
 ROMD:5009 21 2D 55         ld   hl,552D
 ROMD:500C CD E4 4E         call 4EE4           // Gunship: 6; Attacker: 5; Lite Attacker/Fighter (regular)/Bomber: 2
 ROMD:500F FA 56 DE         ld   a,(DE56)
 ROMD:5012 CB 57            bit 2,a
 ROMD:5014 28 07            jr   z,501D         // Direct skip of next 3 lines for inactive bit
 ROMD:5016 3E 29            ld   a,29
 ROMD:5018 06 03            ld   b,03
 ROMD:501A CD F2 4E         call 4EF2           // Ship Buster: 3
 ROMD:501D 3E 26            ld   a,26
 ROMD:501F 06 02            ld   b,02
 ROMD:5021 CD F2 4E         call 4EF2           // Supply Plane: 2
 ROMD:5024 18 56            jr   507C           // This is ended immediately
 ROMD:5026 FA 56 DE         ld   a,(DE56)       // Not reachable by sea
 ROMD:5029 CB 4F            bit 1,a
 ROMD:502B 28 08            jr   z,5035
 ROMD:502D 21 38 55         ld   hl,5538
 ROMD:5030 CD E4 4E         call 4EE4           // Gunship/Attackers: 3; Fighter (regular): 2; Bomber: 3
 ROMD:5033 18 06            jr   503B
 ROMD:5035 21 43 55         ld   hl,5543
 ROMD:5038 CD E4 4E         call 4EE4           // Gunship: 3; Attacker (regular): 4; Lite Attacker/(Regular) Fighter: 2; Bomber: 4
 ROMD:503B FA 56 DE         ld   a,(DE56)
 ROMD:503E CB 57            bit 2,a
 ROMD:5040 28 07            jr   z,5049         // Direct skip of next 3 lines for inactive bit
 ROMD:5042 3E 29            ld   a,29
 ROMD:5044 06 04            ld   b,04
 ROMD:5046 CD F2 4E         call 4EF2           // Ship Buster: 4
 ROMD:5049 3E 26            ld   a,26
 ROMD:504B 06 03            ld   b,03
 ROMD:504D CD F2 4E         call 4EF2           // Supply Plane: 3
 ROMD:5050 18 2A            jr   507C           // This is ended immediately
 ROMD:5052 FA 56 DE         ld   a,(DE56)       // Reachable only by air
 ROMD:5055 CB 4F            bit 1,a
 ROMD:5057 28 08            jr   z,5061
 ROMD:5059 21 4E 55         ld   hl,554E
 ROMD:505C CD E4 4E         call 4EE4           // 3, 4, 2, 3, 2, 4 (Gunship, Attacker, Lite Attacker, Fighter, Lite Fighter, Bomber)
 ROMD:505F 18 06            jr   5067
 ROMD:5061 21 4E 55         ld   hl,554E
 ROMD:5064 CD E4 4E         call 4EE4           // 3, 4, 2, 3, 2, 4
 ROMD:5067 FA 56 DE         ld   a,(DE56)
 ROMD:506A CB 57            bit 2,a
 ROMD:506C 28 07            jr   z,5075         // Direct skip of next 3 lines for inactive bit
 ROMD:506E 3E 29            ld   a,29
 ROMD:5070 06 0A            ld   b,0A
 ROMD:5072 CD F2 4E         call 4EF2           // Ship Buster: 10
 ROMD:5075 3E 26            ld   a,26
 ROMD:5077 06 04            ld   b,04
 ROMD:5079 CD F2 4E         call 4EF2           // Supply Plane: 4
 ROMD:507C C9               ret                 // Gunship: 4, 4, 3, 3, 4, 6, 3, 3 (3 if not reachable by sea, 6 if reachable by sea but not by land and also no air targets, 4 otherwise)
                                                // Attacker: 2, 4, 3, 4, 4, 5, 4, 4
												// Lite Attacker: 2, 4, 3, 2, 4, 2, 2, 2
												// Fighter: 4, 0, 2, 2, 2, 2, 3, 3
												// Lite Fighter: 4, 0, 0, 0, 0, 0, 2, 2
												// Bomber: 2, 2, 3, 4, 2, 2, 4, 4
												// Ship Buster: 2, 2, 4, 4, 3, 3, 10, 10 (0 for all instead if no sea targets)
												// Supply Plane: 2, 2, 3, 3, 2, 2, 4, 4
 ROMD:507D FA A0 DE         ld   a,(DEA0)
 ROMD:5080 CB 57            bit 2,a
 ROMD:5082 CA 25 51         jp   z,5125         // End immediately if enemy HQ isn't reachable by sea
 ROMD:5085 CB 47            bit 0,a
 ROMD:5087 28 2A            jr   z,50B3         // Jump if enemy HQ isn't reachable by land
 ROMD:5089 CB 4F            bit 1,a
 ROMD:508B 28 53            jr   z,50E0         // Jump if enemy HQ isn't reachable by air (..yet again, how?)
 ROMD:508D FA 56 DE         ld   a,(DE56)       // Enemy HQ reachable by land and air
 ROMD:5090 CB 57            bit 2,a
 ROMD:5092 28 10            jr   z,50A4
 ROMD:5094 3E 2C            ld   a,2C
 ROMD:5096 06 08            ld   b,08
 ROMD:5098 CD F2 4E         call 4EF2           // Aegis Warship: 8
 ROMD:509B 3E 32            ld   a,32
 ROMD:509D 06 04            ld   b,04
 ROMD:509F CD F2 4E         call 4EF2           // Submarine: 4
 ROMD:50A2 18 07            jr   50AB
 ROMD:50A4 3E 2C            ld   a,2C
 ROMD:50A6 06 0C            ld   b,0C
 ROMD:50A8 CD F2 4E         call 4EF2           // Aegis Warship: 12
 ROMD:50AB 21 66 55         ld   hl,5566
 ROMD:50AE CD E4 4E         call 4EE4           // Aircraft Carriers/Tanker: 2
 ROMD:50B1 18 72            jr   5125           // This is ended immediately
 ROMD:50B3 FA A0 DE         ld   a,(DEA0)       // Enemy HQ unreachable by land
 ROMD:50B6 CB 4F            bit 1,a
 ROMD:50B8 28 46            jr   z,5100         // Jump if enemy HQ isn't reachable by air (...no, seriously, what?)
 ROMD:50BA FA 56 DE         ld   a,(DE56)
 ROMD:50BD CB 57            bit 2,a
 ROMD:50BF 28 10            jr   z,50D1
 ROMD:50C1 3E 2C            ld   a,2C
 ROMD:50C3 06 0A            ld   b,0A
 ROMD:50C5 CD F2 4E         call 4EF2           // Aegis Warship: 10
 ROMD:50C8 3E 32            ld   a,32
 ROMD:50CA 06 04            ld   b,04
 ROMD:50CC CD F2 4E         call 4EF2           // Submarine: 4
 ROMD:50CF 18 07            jr   50D8
 ROMD:50D1 3E 2C            ld   a,2C
 ROMD:50D3 06 0E            ld   b,0E
 ROMD:50D5 CD F2 4E         call 4EF2           // Aegis Warship: 14
 ROMD:50D8 21 6D 55         ld   hl,556D
 ROMD:50DB CD E4 4E         call 4EE4           // Aircraft Carrier (Small): 2; Aircraft Carier (Large)/Tanker: 3
 ROMD:50DE 18 45            jr   5125           // This is ended immediately
 ROMD:50E0 FA 56 DE         ld   a,(DE56)       // Enemy HQ unreachable by air somehow
 ROMD:50E3 CB 57            bit 2,a
 ROMD:50E5 28 10            jr   z,50F7
 ROMD:50E7 3E 2C            ld   a,2C
 ROMD:50E9 06 0D            ld   b,0D
 ROMD:50EB CD F2 4E         call 4EF2           // Aegis Warship: 13
 ROMD:50EE 3E 32            ld   a,32
 ROMD:50F0 06 06            ld   b,06
 ROMD:50F2 CD F2 4E         call 4EF2           // Submarine: 6
 ROMD:50F5 18 07            jr   50FE
 ROMD:50F7 3E 2C            ld   a,2C
 ROMD:50F9 06 13            ld   b,13
 ROMD:50FB CD F2 4E         call 4EF2           // Aegis Warship: 19
 ROMD:50FE 18 1E            jr   511E
 ROMD:5100 FA 56 DE         ld   a,(DE56)       // Enemy HQ unreachable by both land and air somehow
 ROMD:5103 CB 57            bit 2,a
 ROMD:5105 28 10            jr   z,5117
 ROMD:5107 3E 2C            ld   a,2C
 ROMD:5109 06 14            ld   b,14
 ROMD:510B CD F2 4E         call 4EF2           // Aegis Warship: 20
 ROMD:510E 3E 32            ld   a,32
 ROMD:5110 06 08            ld   b,08
 ROMD:5112 CD F2 4E         call 4EF2           // Submarine: 8
 ROMD:5115 18 07            jr   511E
 ROMD:5117 3E 2C            ld   a,2C
 ROMD:5119 06 1C            ld   b,1C
 ROMD:511B CD F2 4E         call 4EF2           // Aegis Warship: 28
 ROMD:511E 3E 31            ld   a,31
 ROMD:5120 06 04            ld   b,04
 ROMD:5122 CD F2 4E         call 4EF2           // Tanker: 4
 ROMD:5125 C9               ret                 // Aegis Warship: 8, 12, 10, 14 (13, 19, 20, 28)
                                                // Submarine: 4, 0, 4, 0 (6, 0, 8, 0)
												// Large Aircraft Carrier: 2, 2, 3, 3 (0, 0, 0, 0)
												// Small Aircraft Carrier: 2, 2, 2, 2 (0, 0, 0, 0)
												// Tanker: 2, 2, 3, 3 (4, 4, 4, 4)
 ROMD:5126 FA A0 DE         ld   a,(DEA0)
 ROMD:5129 CB 47            bit 0,a
 ROMD:512B 28 43            jr   z,5170         // Jump if enemy HQ isn't reachable by land
 ROMD:512D FA A0 DE         ld   a,(DEA0)
 ROMD:5130 CB 4F            bit 1,a
 ROMD:5132 28 1E            jr   z,5152         // Jump if enemy HQ isn't reachable by air (...again, what?)
 ROMD:5134 FA 56 DE         ld   a,(DE56)
 ROMD:5137 CB 4F            bit 1,a
 ROMD:5139 28 08            jr   z,5143
 ROMD:513B 21 74 55         ld   hl,5574
 ROMD:513E CD E4 4E         call 4EE4           // Main Battle Tank: 4; other combat vehicles: 2
 ROMD:5141 18 06            jr   5149
 ROMD:5143 21 85 55         ld   hl,5585
 ROMD:5146 CD E4 4E         call 4EE4           // Main Battle Tank: 6; Artillery: 3; other non-anti-air combat vehicles: 2
 ROMD:5149 3E 05            ld   a,05
 ROMD:514B 06 02            ld   b,02
 ROMD:514D CD F2 4E         call 4EF2           // Convoy: 2
 ROMD:5150 18 33            jr   5185           // This is ended immediately
 ROMD:5152 FA 56 DE         ld   a,(DE56)       // Enemy HQ unreachable by air somehow
 ROMD:5155 CB 4F            bit 1,a
 ROMD:5157 28 08            jr   z,5161
 ROMD:5159 21 92 55         ld   hl,5592
 ROMD:515C CD E4 4E         call 4EE4           // Main Battle Tank: 6; Rocket Launcher: 4; Buggy/other indirects: 3; other combat vehicles: 2
 ROMD:515F 18 06            jr   5167
 ROMD:5161 21 A3 55         ld   hl,55A3
 ROMD:5164 CD E4 4E         call 4EE4           // Hunter Tank: 8; Main Battle Tank: 6; Artillery: 4; Buggy/Rocket Launcher: 3; Humvee: 2
 ROMD:5167 3E 05            ld   a,05
 ROMD:5169 06 06            ld   b,06
 ROMD:516B CD F2 4E         call 4EF2           // Convoy: 6
 ROMD:516E 18 15            jr   5185           // This is ended immediately
 ROMD:5170 FA 56 DE         ld   a,(DE56)       // Enemy HQ unreachable by land
 ROMD:5173 CB 4F            bit 1,a
 ROMD:5175 28 08            jr   z,517F
 ROMD:5177 21 B0 55         ld   hl,55B0
 ROMD:517A CD E4 4E         call 4EE4           // Main Battle Tank: 4; Hunter Tank: 3; other combat vehicles other than Buggy: 2
 ROMD:517D 18 06            jr   5185
 ROMD:517F 21 BF 55         ld   hl,55BF
 ROMD:5182 CD E4 4E         call 4EE4           // Main Battle Tank: 6; Artillery: 3; Hunter Tank/Rocket Launcher: 2
 ROMD:5185 C9               ret  
 ROMD:5186 3E 04            ld   a,04           // Work Car
 ROMD:5188 CD B9 53         call 53B9           // Attempts to build to 3 Work Cars
 ROMD:518B 38 2A            jr   c,51B7
 ROMD:518D 3E 01            ld   a,01           // Grunt
 ROMD:518F CD B9 53         call 53B9           // Attempts to build to 1~5 Grunts
 ROMD:5192 38 23            jr   c,51B7
 ROMD:5194 3E 02            ld   a,02           // Bazooka
 ROMD:5196 CD B9 53         call 53B9           // Attempts to build to 1~2 Bazookas
 ROMD:5199 38 1C            jr   c,51B7
 ROMD:519B 3E 0D            ld   a,0D           // APC
 ROMD:519D CD B9 53         call 53B9           // Attempts to build to 1~2 APCs
 ROMD:51A0 38 15            jr   c,51B7
 ROMD:51A2 3E 30            ld   a,30           // Lander
 ROMD:51A4 CD B9 53         call 53B9           // Attempts to build to 4 Landers
 ROMD:51A7 38 0E            jr   c,51B7
 ROMD:51A9 3E 2A            ld   a,2A           // Transport Helicopter
 ROMD:51AB CD B9 53         call 53B9           // Attempts to build to 4 Transport Helicopters
 ROMD:51AE 38 07            jr   c,51B7
 ROMD:51B0 3E 25            ld   a,25           // Transport Plane
 ROMD:51B2 CD B9 53         call 53B9           // Attempts to build to 4 Transport Planes
 ROMD:51B5 38 00            jr   c,51B7
 ROMD:51B7 C9               ret                 // Check for building: Work Car, Grunt, Bazooka, APC, Lander, Transport Helicopter, Transport Plane
 ROMD:51B8 C5               push bc
 ROMD:51B9 D5               push de
 ROMD:51BA 1E 00            ld   e,00
 ROMD:51BC FA 8C DE         ld   a,(DE8C)       // Big loop begins here
 ROMD:51BF 47               ld   b,a
 ROMD:51C0 FA 8D DE         ld   a,(DE8D)
 ROMD:51C3 80               add  b
 ROMD:51C4 FE 02            cp   a,02
 ROMD:51C6 30 0C            jr   nc,51D4        // Jump result of minimum of 2 air units Fielded
 ROMD:51C8 FA EC DD         ld   a,(DDEC)
 ROMD:51CB FE 0C            cp   a,0C
 ROMD:51CD 30 0A            jr   nc,51D9        // Jump result of minimum of 12 AI land units, even though the result is the same
 ROMD:51CF 21 F2 51         ld   hl,51F2
 ROMD:51D2 18 08            jr   51DC
 ROMD:51D4 21 FC 51         ld   hl,51FC        // Anti-Air Missile Launcher given topmost priority, Anti-Air Tank priority shifted to above MB Tank
 ROMD:51D7 18 03            jr   51DC
 ROMD:51D9 21 F2 51         ld   hl,51F2
 ROMD:51DC 2A               ldi  a,(hl)         // Loop begins here
 ROMD:51DD A7               and  a
 ROMD:51DE 28 09            jr   z,51E9
 ROMD:51E0 E5               push hl
 ROMD:51E1 CD D5 53         call 53D5           // Attempts to build AI unit type A once
 ROMD:51E4 E1               pop  hl
 ROMD:51E5 38 08            jr   c,51EF         // Would end immediately if unit couldn't be purchased, if that was handled properly
 ROMD:51E7 18 F3            jr   51DC
 ROMD:51E9 1C               inc  e
 ROMD:51EA 7B               ld   a,e
 ROMD:51EB FE 03            cp   a,03
 ROMD:51ED 20 CD            jr   nz,51BC
 ROMD:51EF D1               pop  de
 ROMD:51F0 C1               pop  bc
 ROMD:51F1 C9               ret                 // 3 attempts by the AI to build each type of combat land vehicle, with anti-air units given top priority if at least 2 air units are fielded against the AI

 ROMD:51F2 1B 15 11 17 0F 19 13 0B 09 00        // MB Tank, Artillery, Anti-Air Tank, IFV, Rocket Launcher, Hunter Tank, Anti-Air Missile Launcher, Humvee, Buggy

 ROMD:51FC 13 11 1B 15 17 0F 19 0B 09 00        // Anti-Air Missile Launcher, Anti-Air Tank, MB Tank, Artillery, IFV, Rocket Launcher, Hunter Tank, Humvee, Buggy

 ROMD:5206 05 00                                // Supply Truck

 ROMD:5208 FA 8F DE         ld   a,(DE8F)
 ROMD:520B A7               and  a
 ROMD:520C 20 13            jr   nz,5221        // Jumps result of any Submarines Fielded
 ROMD:520E FA 8D DE         ld   a,(DE8D)
 ROMD:5211 FE 04            cp   a,04
 ROMD:5213 30 11            jr   nc,5226        // Jump result of at least 4 Fighter units Fielded
 ROMD:5215 FA EA DD         ld   a,(DDEA)
 ROMD:5218 FE 08            cp   a,08
 ROMD:521A 30 0F            jr   nc,522B        // Jump result of at least 8 AI plane units
 ROMD:521C 21 3A 52         ld   hl,523A        // Fighter, Attacker, Lite Fighter, Lite Attacker, Gunship
 ROMD:521F 18 0D            jr   522E
 ROMD:5221 21 40 52         ld   hl,5240        // Ship Buster
 ROMD:5224 18 08            jr   522E
 ROMD:5226 21 42 52         ld   hl,5242        // Fighter, Attacker, Lite Fighter, Lite Attacker, Gunship
 ROMD:5229 18 03            jr   522E
 ROMD:522B 21 48 52         ld   hl,5248        // Gunship, Fighter, Attacker, Lite Fighter, Lite Attacker
 ROMD:522E 2A               ldi  a,(hl)         // Loop begins here
 ROMD:522F A7               and  a
 ROMD:5230 28 07            jr   z,5239
 ROMD:5232 E5               push hl
 ROMD:5233 CD B9 53         call 53B9           // Attempts to build AI unit type A until done
 ROMD:5236 E1               pop  hl
 ROMD:5237 18 F5            jr   522E
 ROMD:5239 C9               ret  

 ROMD:523A 1D 20 1E 21 27 00
 ROMD:5240 29 00
 ROMD:5242 1D 20 1E 21 27 00
 ROMD:5248 27 1D 20 1E 21 00

 ROMD:524E FA 8F DE         ld   a,(DE8F)
 ROMD:5251 A7               and  a
 ROMD:5252 20 1D            jr   nz,5271        // Jumps result of any Submarines Fielded
 ROMD:5254 FA E9 DD         ld   a,(DDE9)
 ROMD:5257 FE 05            cp   a,05
 ROMD:5259 30 0C            jr   nc,5267        // Jump result of at least 5 helicopter units
 ROMD:525B FA EA DD         ld   a,(DDEA)
 ROMD:525E FE 05            cp   a,05
 ROMD:5260 30 0A            jr   nc,526C        // Jump result of at least 5 plane units
 ROMD:5262 21 80 52         ld   hl,5280        // Aegis Warship, Small Aircraft Carrier, Large Aircraft Carrier
 ROMD:5265 18 0D            jr   5274
 ROMD:5267 21 84 52         ld   hl,5284        // Small Aircraft Carrier, Aegis Warship, Large Aircraft Carrier
 ROMD:526A 18 08            jr   5274
 ROMD:526C 21 88 52         ld   hl,5288        // Large Aircraft Carrier, Aegis Warship, Small Aircraft Carrier
 ROMD:526F 18 03            jr   5274
 ROMD:5271 21 8C 52         ld   hl,528C        // Submarine
 ROMD:5274 2A               ldi  a,(hl)
 ROMD:5275 A7               and  a
 ROMD:5276 28 07            jr   z,527F
 ROMD:5278 E5               push hl
 ROMD:5279 CD B9 53         call 53B9           // Attempts to build AI unit type A until done
 ROMD:527C E1               pop  hl
 ROMD:527D 18 F5            jr   5274
 ROMD:527F C9               ret  

 ROMD:5280 2C 2F 2E 00            ld   l,00
 ROMD:5284 2F 2C 2E 00            ld   l,00
 ROMD:5288 2E 2C 2F 00
 ROMD:528C 32 00

 ROMD:528E C5               push bc
 ROMD:528F D5               push de
 ROMD:5290 F0 82            ld   a,(ff00+82)
 ROMD:5292 F5               push af
 ROMD:5293 3E 02            ld   a,02
 ROMD:5295 E0 82            ld   (ff00+82),a
 ROMD:5297 E0 70            ld   (ff00+70),a
 ROMD:5299 21 81 DD         ld   hl,DD81
 ROMD:529C 01 34 00         ld   bc,0034
 ROMD:529F AF               xor  a
 ROMD:52A0 CD 79 3B         call 3B79           // Empties WRAM Bank #2 ($DD81) to ($DDB4)
 ROMD:52A3 FA A2 C9         ld   a,(C9A2)
 ROMD:52A6 57               ld   d,a            // D = active player's first unit
 ROMD:52A7 1E 32            ld   e,32
 ROMD:52A9 7A               ld   a,d            // Loop begins here
 ROMD:52AA 0E 00            ld   c,00
 ROMD:52AC CD 0B 09         call 090B
 ROMD:52AF CB 3F            srl a               // A = Unit Type no side
 ROMD:52B1 21 81 DD         ld   hl,DD81
 ROMD:52B4 CD BC 29         call 29BC           // HL += A
 ROMD:52B7 34               inc  (hl)
 ROMD:52B8 14               inc  d
 ROMD:52B9 1D               dec  e
 ROMD:52BA 20 ED            jr   nz,52A9
 ROMD:52BC F1               pop  af
 ROMD:52BD E0 82            ld   (ff00+82),a
 ROMD:52BF E0 70            ld   (ff00+70),a
 ROMD:52C1 D1               pop  de
 ROMD:52C2 C1               pop  bc
 ROMD:52C3 C9               ret                 // WRAM Bank #2 ($DD81) to ($DDB4) holds available units of each type
 ROMD:52C4 C5               push bc
 ROMD:52C5 D5               push de
 ROMD:52C6 F0 82            ld   a,(ff00+82)
 ROMD:52C8 F5               push af
 ROMD:52C9 3E 02            ld   a,02
 ROMD:52CB E0 82            ld   (ff00+82),a
 ROMD:52CD E0 70            ld   (ff00+70),a
 ROMD:52CF 21 57 DE         ld   hl,DE57
 ROMD:52D2 01 34 00         ld   bc,0034
 ROMD:52D5 AF               xor  a
 ROMD:52D6 CD 79 3B         call 3B79           // Empties WRA2($DE57) to ($DE8A)
 ROMD:52D9 FA A3 C9         ld   a,(C9A3)
 ROMD:52DC 57               ld   d,a            // D = inactive player's first unit
 ROMD:52DD 1E 32            ld   e,32
 ROMD:52DF 7A               ld   a,d            // Loop begins here
 ROMD:52E0 0E 03            ld   c,03
 ROMD:52E2 CD 0B 09         call 090B
 ROMD:52E5 CB 4F            bit 1,a             // Unit in Reserve?
 ROMD:52E7 20 0F            jr   nz,52F8        // End cycle if unit is in Reserve
 ROMD:52E9 7A               ld   a,d
 ROMD:52EA 0E 00            ld   c,00
 ROMD:52EC CD 0B 09         call 090B
 ROMD:52EF CB 3F            srl a
 ROMD:52F1 21 57 DE         ld   hl,DE57
 ROMD:52F4 CD BC 29         call 29BC           // HL += A
 ROMD:52F7 34               inc  (hl)
 ROMD:52F8 14               inc  d
 ROMD:52F9 1D               dec  e
 ROMD:52FA 20 E3            jr   nz,52DF        // WRA2($DE57) to ($DE8A) holds number of each type of unit Fielded
 ROMD:52FC 06 01            ld   b,01
 ROMD:52FE 0E 1C            ld   c,1C
 ROMD:5300 CD 5F 53         call 535F           // Number of given units Fielded
 ROMD:5303 EA 8B DE         ld   (DE8B),a       // Land units
 ROMD:5306 06 1D            ld   b,1D
 ROMD:5308 0E 1F            ld   c,1F
 ROMD:530A CD 5F 53         call 535F           // Number of given units Fielded
 ROMD:530D EA 8D DE         ld   (DE8D),a       // Fighter units
 ROMD:5310 06 20            ld   b,20
 ROMD:5312 0E 2B            ld   c,2B
 ROMD:5314 CD 5F 53         call 535F           // Number of given units Fielded
 ROMD:5317 EA 8C DE         ld   (DE8C),a       // Non-Fighter air units
 ROMD:531A 06 2C            ld   b,2C
 ROMD:531C 0E 31            ld   c,31
 ROMD:531E CD 5F 53         call 535F           // Number of given units Fielded
 ROMD:5321 EA 8E DE         ld   (DE8E),a       // Ship units
 ROMD:5324 06 32            ld   b,32
 ROMD:5326 0E 33            ld   c,33
 ROMD:5328 CD 5F 53         call 535F           // Number of given units Fielded
 ROMD:532B EA 8F DE         ld   (DE8F),a       // Submarine units
 ROMD:532E F1               pop  af
 ROMD:532F E0 82            ld   (ff00+82),a
 ROMD:5331 E0 70            ld   (ff00+70),a
 ROMD:5333 D1               pop  de
 ROMD:5334 C1               pop  bc
 ROMD:5335 C9               ret                 // WRA2($DE57) to ($DE8F) established with Fielded unit counts; ($DE8B) holds Land, non-Fighter Air, Fighter, Ship, Subs
 ROMD:5336 06 27            ld   b,27
 ROMD:5338 0E 2B            ld   c,2B
 ROMD:533A CD 74 53         call 5374           // Number of given AI units
 ROMD:533D EA E9 DD         ld   (DDE9),a       // Helicopter units
 ROMD:5340 06 1D            ld   b,1D
 ROMD:5342 0E 26            ld   c,26
 ROMD:5344 CD 74 53         call 5374           // Number of given AI units
 ROMD:5347 EA EA DD         ld   (DDEA),a       // Plane units
 ROMD:534A 06 2C            ld   b,2C
 ROMD:534C 0E 31            ld   c,31
 ROMD:534E CD 74 53         call 5374           // Number of given AI units
 ROMD:5351 EA EB DD         ld   (DDEB),a       // Ship units
 ROMD:5354 06 01            ld   b,01
 ROMD:5356 0E 1C            ld   c,1C
 ROMD:5358 CD 74 53         call 5374           // Number of given AI units
 ROMD:535B EA EC DD         ld   (DDEC),a       // Land units
 ROMD:535E C9               ret                 // ($DDE9) 4 byte holds counts of: AI Helicopters, AI Planes, AI Ships, AI Land units
 ROMD:535F D5               push de
 ROMD:5360 78               ld   a,b
 ROMD:5361 21 57 DE         ld   hl,DE57
 ROMD:5364 CD BC 29         call 29BC           // HL += A
 ROMD:5367 16 00            ld   d,00
 ROMD:5369 2A               ldi  a,(hl)
 ROMD:536A 82               add  d
 ROMD:536B 57               ld   d,a
 ROMD:536C 78               ld   a,b
 ROMD:536D 04               inc  b
 ROMD:536E B9               cp   c
 ROMD:536F 20 F8            jr   nz,5369
 ROMD:5371 7A               ld   a,d
 ROMD:5372 D1               pop  de
 ROMD:5373 C9               ret                 // Number of given units Fielded
 ROMD:5374 D5               push de
 ROMD:5375 78               ld   a,b
 ROMD:5376 21 81 DD         ld   hl,DD81
 ROMD:5379 CD BC 29         call 29BC           // HL += A
 ROMD:537C 16 00            ld   d,00
 ROMD:537E 2A               ldi  a,(hl)
 ROMD:537F 82               add  d
 ROMD:5380 57               ld   d,a
 ROMD:5381 78               ld   a,b
 ROMD:5382 04               inc  b
 ROMD:5383 B9               cp   c
 ROMD:5384 20 F8            jr   nz,537E
 ROMD:5386 7A               ld   a,d
 ROMD:5387 D1               pop  de
 ROMD:5388 C9               ret                 // Number of given AI units
 ROMD:5389 D5               push de
 ROMD:538A 57               ld   d,a
 ROMD:538B CD EF 53         call 53EF           // BC holds coordinates of first available property, HQ taking priority as necessary
 ROMD:538E 78               ld   a,b
 ROMD:538F FE FF            cp   a,FF
 ROMD:5391 28 22            jr   z,53B5         // End immediately with A = 1 if no available properties
 ROMD:5393 7A               ld   a,d
 ROMD:5394 21 B5 DD         ld   hl,DDB5
 ROMD:5397 CD BC 29         call 29BC           // HL += A
 ROMD:539A 5E               ld   e,(hl)         // E = value of unit
 ROMD:539B 7A               ld   a,d
 ROMD:539C 21 81 DD         ld   hl,DD81
 ROMD:539F CD BC 29         call 29BC           // HL += A
 ROMD:53A2 7E               ld   a,(hl)         // A = Available count of unit
 ROMD:53A3 BB               cp   e
 ROMD:53A4 30 0F            jr   nc,53B5        // End immediately with A = 1 if value of unit isn't met
 ROMD:53A6 7A               ld   a,d
 ROMD:53A7 87               add  a
 ROMD:53A8 EF 0B 1F 5C                          // A = 0 if all conditions are met; 1 if insufficient Gold; 2 if insufficient Materials; or 3 if 50 Unit Cap is already met
 ROMD:53AC A7               and  a
 ROMD:53AD 20 04            jr   nz,53B3        // End immediately with A = 1 (supposed to be 2) if unable to get unit anyway
 ROMD:53AF 3E 00            ld   a,00
 ROMD:53B1 18 04            jr   53B7
 ROMD:53B3 3E 02            ld   a,02
 ROMD:53B5 3E 01            ld   a,01
 ROMD:53B7 D1               pop  de
 ROMD:53B8 C9               ret                 // A = inverse of unit purchase desire
 ROMD:53B9 C5               push bc
 ROMD:53BA D5               push de
 ROMD:53BB 57               ld   d,a
 ROMD:53BC 7A               ld   a,d
 ROMD:53BD CD 89 53         call 5389           // A = inverse of unit purchase desire
 ROMD:53C0 FE 02            cp   a,02
 ROMD:53C2 28 0D            jr   z,53D1         // Would end with SCF if unit can't be purchased, if that was set properly
 ROMD:53C4 FE 01            cp   a,01
 ROMD:53C6 28 06            jr   z,53CE         // End immediately with A = 0 if unit won't be purchased
 ROMD:53C8 7A               ld   a,d
 ROMD:53C9 CD A8 54         call 54A8           // AI unit type A's building handled at coordinates BC
 ROMD:53CC 18 EE            jr   53BC
 ROMD:53CE AF               xor  a
 ROMD:53CF 18 01            jr   53D2
 ROMD:53D1 37               scf  
 ROMD:53D2 D1               pop  de
 ROMD:53D3 C1               pop  bc
 ROMD:53D4 C9               ret                 // Attempts to build AI unit type A until done
 ROMD:53D5 C5               push bc
 ROMD:53D6 D5               push de
 ROMD:53D7 57               ld   d,a
 ROMD:53D8 7A               ld   a,d
 ROMD:53D9 CD 89 53         call 5389           // A = inverse of unit purchase desire
 ROMD:53DC FE 02            cp   a,02
 ROMD:53DE 28 0B            jr   z,53EB         // Would end with SCF if unit can't be purchased, if that was set properly
 ROMD:53E0 FE 01            cp   a,01
 ROMD:53E2 28 04            jr   z,53E8         // End immediately with A = 0 if unit won't be purchased
 ROMD:53E4 7A               ld   a,d
 ROMD:53E5 CD A8 54         call 54A8           // AI unit type A's building handled at coordinates BC
 ROMD:53E8 AF               xor  a
 ROMD:53E9 18 01            jr   53EC
 ROMD:53EB 37               scf  
 ROMD:53EC D1               pop  de
 ROMD:53ED C1               pop  bc
 ROMD:53EE C9               ret                 // Attempts to build AI unit type A once
 ROMD:53EF D5               push de
 ROMD:53F0 47               ld   b,a
 ROMD:53F1 F0 82            ld   a,(ff00+82)
 ROMD:53F3 F5               push af
 ROMD:53F4 3E 01            ld   a,01
 ROMD:53F6 E0 82            ld   (ff00+82),a
 ROMD:53F8 E0 70            ld   (ff00+70),a
 ROMD:53FA 78               ld   a,b
 ROMD:53FB CD 51 54         call 5451           // A = Property type for deploying unit, -1 if invalid
 ROMD:53FE FE FF            cp   a,FF
 ROMD:5400 28 43            jr   z,5445         // End with BC = -1 if not valid property for deploying unit
 ROMD:5402 57               ld   d,a
 ROMD:5403 FE 02            cp   a,02
 ROMD:5405 20 19            jr   nz,5420        // Jumps if not City
 ROMD:5407 F0 82            ld   a,(ff00+82)
 ROMD:5409 F5               push af
 ROMD:540A 3E 02            ld   a,02
 ROMD:540C E0 82            ld   (ff00+82),a
 ROMD:540E E0 70            ld   (ff00+70),a
 ROMD:5410 CD A5 5D         call 5DA5           // BC hold active player's HQ
 ROMD:5413 CD D7 08         call 08D7           // HL = $D000 + B + C * 64
 ROMD:5416 6E               ld   l,(hl)         // L holds any HQ occupier
 ROMD:5417 F1               pop  af             // WRA1
 ROMD:5418 E0 82            ld   (ff00+82),a
 ROMD:541A E0 70            ld   (ff00+70),a
 ROMD:541C 7D               ld   a,l
 ROMD:541D A7               and  a
 ROMD:541E 28 2A            jr   z,544A         // End immediately if HQ is unoccupied
 ROMD:5420 1E 00            ld   e,00
 ROMD:5422 21 81 DD         ld   hl,DD81
 ROMD:5425 2A               ldi  a,(hl)         // Loop begins here
 ROMD:5426 46               ld   b,(hl)
 ROMD:5427 23               inc  hl
 ROMD:5428 4E               ld   c,(hl)
 ROMD:5429 23               inc  hl
 ROMD:542A FE FF            cp   a,FF
 ROMD:542C 28 11            jr   z,543F         // Cycle ends if property nonexistant
 ROMD:542E EF 0B BD 59                          // A = property number value if controlled by active player and within 3 spaces of their Capital; otherwise, A = 0
 ROMD:5432 A7               and  a
 ROMD:5433 28 0A            jr   z,543F         // Loop end if property is too far away from HQ
 ROMD:5435 C5               push bc
 ROMD:5436 47               ld   b,a
 ROMD:5437 7A               ld   a,d
 ROMD:5438 CD 82 54         call 5482           // A = inverse of deployment on property type B validity
 ROMD:543B C1               pop  bc             // BC = property's coordinates
 ROMD:543C A7               and  a
 ROMD:543D 28 0B            jr   z,544A         // End immediately if deployment valid
 ROMD:543F 1C               inc  e
 ROMD:5440 7B               ld   a,e
 ROMD:5441 FE 64            cp   a,64
 ROMD:5443 20 E0            jr   nz,5425
 ROMD:5445 01 FF FF         ld   bc,FFFF
 ROMD:5448 18 00            jr   544A
 ROMD:544A F1               pop  af
 ROMD:544B E0 82            ld   (ff00+82),a
 ROMD:544D E0 70            ld   (ff00+70),a
 ROMD:544F D1               pop  de
 ROMD:5450 C9               ret                 // BC holds coordinates of first available property, HQ taking priority as necessary
 ROMD:5451 C5               push bc
 ROMD:5452 D5               push de
 ROMD:5453 47               ld   b,a
 ROMD:5454 EF 12 70 44                          // A = 0 if unit is allowed, 2 otherwise
 ROMD:5458 FE 00            cp   a,00
 ROMD:545A 20 21            jr   nz,547D        // End with A = -1 if unit disallowed
 ROMD:545C 78               ld   a,b
 ROMD:545D FE 04            cp   a,04           // Work Car comparison
 ROMD:545F 28 10            jr   z,5471
 ROMD:5461 FE 05            cp   a,05           // Supply Truck comparison
 ROMD:5463 28 0C            jr   z,5471
 ROMD:5465 FE 1D            cp   a,1D           // Fighter comparison; land units handled before it
 ROMD:5467 38 0C            jr   c,5475
 ROMD:5469 FE 2C            cp   a,2C           // Aegis Warship comparison; air units handled before it while starting at Fighter
 ROMD:546B 38 0C            jr   c,5479
 ROMD:546D 3E 09            ld   a,09
 ROMD:546F 18 0E            jr   547F
 ROMD:5471 3E 04            ld   a,04
 ROMD:5473 18 0A            jr   547F
 ROMD:5475 3E 02            ld   a,02
 ROMD:5477 18 06            jr   547F
 ROMD:5479 3E 06            ld   a,06
 ROMD:547B 18 02            jr   547F
 ROMD:547D 3E FF            ld   a,FF
 ROMD:547F D1               pop  de
 ROMD:5480 C1               pop  bc
 ROMD:5481 C9               ret                 // A = Property type for deploying unit, -1 if invalid
 ROMD:5482 FE 04            cp   a,04
 ROMD:5484 28 19            jr   z,549F
 ROMD:5486 FE 06            cp   a,06
 ROMD:5488 28 15            jr   z,549F
 ROMD:548A FE 09            cp   a,09
 ROMD:548C 28 11            jr   z,549F
 ROMD:548E 3E 01            ld   a,01
 ROMD:5490 B8               cp   b
 ROMD:5491 28 0F            jr   z,54A2
 ROMD:5493 3E 02            ld   a,02
 ROMD:5495 B8               cp   b
 ROMD:5496 28 0A            jr   z,54A2
 ROMD:5498 3E 04            ld   a,04
 ROMD:549A B8               cp   b
 ROMD:549B 28 05            jr   z,54A2
 ROMD:549D 18 06            jr   54A5
 ROMD:549F B8               cp   b
 ROMD:54A0 20 03            jr   nz,54A5
 ROMD:54A2 AF               xor  a
 ROMD:54A3 18 02            jr   54A7
 ROMD:54A5 3E 01            ld   a,01
 ROMD:54A7 C9               ret                 // A = inverse of deployment on property type B validity
 ROMD:54A8 C5               push bc
 ROMD:54A9 D5               push de
 ROMD:54AA CD F0 54         call 54F0           // AI's unit count for type incremented
 ROMD:54AD 87               add  a
 ROMD:54AE 57               ld   d,a            // D = A * 2
 ROMD:54AF FA 33 C6         ld   a,(C633)
 ROMD:54B2 E6 01            and  a,01
 ROMD:54B4 82               add  d
 ROMD:54B5 57               ld   d,a            // D = A * 2 + active player
 ROMD:54B6 EF 0B 01 7B                          // Handles map graphics shift to coordinates BC
 ROMD:54BA 7A               ld   a,d
 ROMD:54BB EF 0B 68 5C                          // Handles deployment expenditures
 ROMD:54BF 7A               ld   a,d
 ROMD:54C0 EF 12 41 42                          // Units built incremented by 1, cap of 65,535
 ROMD:54C4 7A               ld   a,d
 ROMD:54C5 EF 12 E3 41                          // Establishes newly created unit's stats with first available unit slot
 ROMD:54C9 EF 12 85 45                          // Unit's End Turn Flag Set
 ROMD:54CD 3E 08            ld   a,08
 ROMD:54CF CD 44 38         call 3844
 ROMD:54D2 EF 0C 75 5B                          // Factory Gate Close sprite plays out
 ROMD:54D6 7A               ld   a,d
 ROMD:54D7 EF 0B 98 47                          // Unit tile updated with unit type
 ROMD:54DB EF 0B D1 43                          // Establishes tile BC's entire graphics
 ROMD:54DF EF 0C 86 5B                          // Factory Gate Open sprite plays out
 ROMD:54E3 3E 02            ld   a,02
 ROMD:54E5 EF 0B 9C 47                          // set 7,($D000 + B + C * 64) WRAM Bank 1 (Turn Ended)
 ROMD:54E9 EF 0B D1 43                          // Establishes tile BC's entire graphics
 ROMD:54ED D1               pop  de
 ROMD:54EE C1               pop  bc
 ROMD:54EF C9               ret                 // AI unit type A's building handled at coordinates BC
 ROMD:54F0 F5               push af
 ROMD:54F1 C5               push bc
 ROMD:54F2 47               ld   b,a
 ROMD:54F3 F0 82            ld   a,(ff00+82)
 ROMD:54F5 F5               push af
 ROMD:54F6 3E 02            ld   a,02
 ROMD:54F8 E0 82            ld   (ff00+82),a
 ROMD:54FA E0 70            ld   (ff00+70),a
 ROMD:54FC 21 81 DD         ld   hl,DD81
 ROMD:54FF 78               ld   a,b
 ROMD:5500 CD BC 29         call 29BC           // HL += A
 ROMD:5503 34               inc  (hl)
 ROMD:5504 F1               pop  af
 ROMD:5505 E0 82            ld   (ff00+82),a
 ROMD:5507 E0 70            ld   (ff00+70),a
 ROMD:5509 C1               pop  bc
 ROMD:550A F1               pop  af
 ROMD:550B C9               ret                 // AI's unit count for type incremented

 ROMD:550C 27 04                                // Gunship: 4
 ROMD:550E 20 02                                // Attacker: 2
 ROMD:5510 21 02                                // Lite Attacker: 2
 ROMD:5512 1D 04                                // Fighter: 4
 ROMD:5514 1E 04                                // Lite Fighter: 4
 ROMD:5516 23 02                                // Bomber: 2
 ROMD:5518 00

 ROMD:5519 27 04                                // Gunship: 4
 ROMD:551B 20 04                                // Attacker: 4
 ROMD:551D 21 04                                // Lite Attacker: 4
 ROMD:551F 23 02                                // Bomber: 2
 ROMD:5521 00

 ROMD:5522 27 04                                // Gunship: 4
 ROMD:5524 20 04                                // Attacker: 4
 ROMD:5526 21 04                                // Lite Attacker: 4
 ROMD:5528 1D 02                                // Fighter: 2
 ROMD:552A 23 02                                // Bomber: 2
 ROMD:552C 00

 ROMD:552D 27 06                                // Gunship: 6
 ROMD:552F 20 05                                // Attacker: 5
 ROMD:5531 21 02                                // Lite Attacker: 2
 ROMD:5533 1D 02                                // Fighter: 2
 ROMD:5535 23 02                                // Bomber: 2
 ROMD:5537 00

 ROMD:5538 27 03                                // Gunship: 3
 ROMD:553A 20 03                                // Attacker: 3
 ROMD:553C 21 03                                // Lite Attacker: 3
 ROMD:553E 1D 02                                // Fighter: 2
 ROMD:5540 23 03                                // Bomber: 3
 ROMD:5542 00

 ROMD:5543 27 03                                // Gunship: 3
 ROMD:5545 20 04                                // Attacker: 4
 ROMD:5547 21 02                                // Lite Attacker: 2
 ROMD:5549 1D 02                                // Fighter: 2
 ROMD:554B 23 04                                // Bomber: 4
 ROMD:554D 00

 ROMD:554E 27 03                                // Gunship: 3
 ROMD:5550 20 04                                // Attacker: 4
 ROMD:5552 21 02                                // Lite Attacker: 2
 ROMD:5554 1D 03                                // Fighter: 3
 ROMD:5556 1E 02                                // Lite Fighter: 2
 ROMD:5558 23 04                                // Bomber: 4
 ROMD:555A 00

 ROMD:555B 27 06                                // Gunship: 6
 ROMD:555D 20 05                                // Attacker: 5
 ROMD:555F 21 05                                // Lite Attacker: 5
 ROMD:5561 1D 02                                // Fighter: 2
 ROMD:5563 23 02                                // Bomber: 2
 ROMD:5565 00

 ROMD:5566 2F 02                                // Aircraft Carrier (Small): 2
 ROMD:5568 2E 02                                // Aircraft Carrier (Large): 2
 ROMD:556A 31 02                                // Tanker: 2
 ROMD:556C 00

 ROMD:556D 2F 02                                // Aircraft Carrier (Small): 2
 ROMD:556F 2E 03                                // Aircraft Carrier (Large): 3
 ROMD:5571 31 03                                // Tanker: 3
 ROMD:5573 00

 ROMD:5574 1B 04                                // Main Battle Tank: 4
 ROMD:5576 15 02                                // Artillery: 2
 ROMD:5578 11 02                                // Anti-Air Tank: 2
 ROMD:557A 0F 02                                // Rocket Launcher: 2
 ROMD:557C 09 02                                // Buggy: 2
 ROMD:557E 0B 02                                // Humvee: 2
 ROMD:5580 19 02                                // Hunter Tank: 2
 ROMD:5582 13 02                                // Anti-Air Missile Launcher: 2
 ROMD:5584 00

 ROMD:5585 09 02                                // Buggy: 2
 ROMD:5587 0B 02                                // Humvee: 2
 ROMD:5589 19 02                                // Hunter Tank: 2
 ROMD:558B 0F 02                                // Rocket Launcher: 2
 ROMD:558D 1B 06                                // Main Battle Tank: 6
 ROMD:558F 15 03                                // Artillery: 3
 ROMD:5591 00

 ROMD:5592 09 03                                // Buggy: 3
 ROMD:5594 0B 02                                // Humvee: 2
 ROMD:5596 19 02                                // Hunter Tank: 2
 ROMD:5598 0F 04                                // Rocket Launcher: 4
 ROMD:559A 1B 06                                // Main Battle Tank: 6
 ROMD:559C 15 03                                // Artillery: 3
 ROMD:559E 11 02                                // Anti-Air Tank: 2
 ROMD:55A0 13 03                                // Anti-Air Missile Launcher: 3
 ROMD:55A2 00

 ROMD:55A3 09 03                                // Buggy: 3
 ROMD:55A5 0B 02                                // Humvee: 2
 ROMD:55A7 19 08                                // Hunter Tank: 8
 ROMD:55A9 0F 03                                // Rocket Launcher: 3
 ROMD:55AB 1B 06                                // Main Battle Tank: 6
 ROMD:55AD 15 04                                // Artillery: 4
 ROMD:55AF 00

 ROMD:55B0 0B 02                                // Humvee: 2
 ROMD:55B2 19 03                                // Hunter Tank: 3
 ROMD:55B4 0F 02                                // Rocket Launcher: 2
 ROMD:55B6 1B 04                                // Main Battle Tank: 4
 ROMD:55B8 15 02                                // Artillery: 2
 ROMD:55BA 11 02                                // Anti-Air Tank: 2
 ROMD:55BC 13 02                                // Anti-Air Missile Launcher: 2
 ROMD:55BE 00

 ROMD:55BF 19 02                                // Hunter Tank: 2
 ROMD:55C1 0F 02                                // Rocket Launcher: 2
 ROMD:55C3 1B 06                                // Main Battle Tank: 6
 ROMD:55C5 15 03                                // Artillery: 3
 ROMD:55C7 00

 ROMD:55C8 FA A2 C9         ld   a,(C9A2)
 ROMD:55CB 57               ld   d,a            // D = active player's first unit
 ROMD:55CC 1E 32            ld   e,32
 ROMD:55CE 7A               ld   a,d            // Loop starts here
 ROMD:55CF CD 2D 65         call 652D           // A = Unit Type if unit can move
 ROMD:55D2 A7               and  a
 ROMD:55D3 28 18            jr   z,55ED         // End cycle if unit can't move
 ROMD:55D5 7A               ld   a,d
 ROMD:55D6 CD 6D 65         call 656D           // ($C9D8) set to unit #; ($CCDD) to ($CD08) hold stuff based on unit; ($C9D9) 2 byte holds unit's coordinates; Empties: ($C613), ($C9DD), ($C9DE), ($C9E5), and ($C5EC); set ($C5ED) to ($C5F1) to -1
 ROMD:55D9 7A               ld   a,d
 ROMD:55DA CD F2 55         call 55F2           // A = 1 for Aircraft Carrier healing validity/necessity, useless results otherwise
 ROMD:55DD FE 01            cp   a,01
 ROMD:55DF 28 0C            jr   z,55ED         // End cycle if unit is on an Aircraft Carrier and needs significant healing
 ROMD:55E1 7A               ld   a,d
 ROMD:55E2 CD 2A 56         call 562A           // Manage Unit A repair, A set to 1 on necessity
 ROMD:55E5 FE 01            cp   a,01
 ROMD:55E7 28 04            jr   z,55ED
 ROMD:55E9 7A               ld   a,d
 ROMD:55EA CD 9E 56         call 569E           // Manage Unit A resupply
 ROMD:55ED 14               inc  d
 ROMD:55EE 1D               dec  e
 ROMD:55EF 20 DD            jr   nz,55CE        // Check for all 50 units
 ROMD:55F1 C9               ret  
 ROMD:55F2 D5               push de
 ROMD:55F3 FA E0 CC         ld   a,(CCE0)       // Unit's Status
 ROMD:55F6 CB 47            bit 0,a
 ROMD:55F8 28 2C            jr   z,5626         // End with A = 0 if unit isn't loaded
 ROMD:55FA FA E3 CC         ld   a,(CCE3)
 ROMD:55FD 0E 00            ld   c,00
 ROMD:55FF CD 0B 09         call 090B
 ROMD:5602 CB 3F            srl a               // A = Unit Type of carrying unit
 ROMD:5604 FE 2E            cp   a,2E
 ROMD:5606 28 04            jr   z,560C         // Skip next 2 lines if carrying unit is Large Aircraft Carrier
 ROMD:5608 FE 2F            cp   a,2F
 ROMD:560A 20 1A            jr   nz,5626        // End with A = 0 if carrying unit isn't an Aircraft Carrier of either size
 ROMD:560C FA E1 CC         ld   a,(CCE1)       // A = Unit's HP
 ROMD:560F FE 07            cp   a,07
 ROMD:5611 30 15            jr   nc,5628        // End with A = Unit's HP if > 6
 ROMD:5613 FA E0 CC         ld   a,(CCE0)
 ROMD:5616 CB FF            set 7,a
 ROMD:5618 EA E0 CC         ld   (CCE0),a       // Unit won't move if Unit's HP < 7
 ROMD:561B FA D8 C9         ld   a,(C9D8)
 ROMD:561E EF 12 2B 41                          // Unit's stats now holds ($CCDD) to ($CCEC)
 ROMD:5622 3E 01            ld   a,01
 ROMD:5624 18 02            jr   5628
 ROMD:5626 3E 00            ld   a,00
 ROMD:5628 D1               pop  de
 ROMD:5629 C9               ret                 // A = 0 if healing is invalid, HP if it's above 6, or 1 if neither condition; units stats stored in last case
 ROMD:562A D5               push de
 ROMD:562B CD 20 57         call 5720           // A = 1 if HP < 7 and repairs valid, 0 otherwise
 ROMD:562E FE 01            cp   a,01
 ROMD:5630 28 50            jr   z,5682         // Leads to ending with A = 1 and no movement if HP < 7 and repairs valid
 ROMD:5632 CD 3C 57         call 573C           // A = 1 if HP < 4, 0 otherwise
 ROMD:5635 FE 00            cp   a,00
 ROMD:5637 28 61            jr   z,569A         // End with A = 0 if unit HP > 3
 ROMD:5639 CD A9 65         call 65A9           // If ($C613) = 0, WRAM Bank #5 map has Movement requirements, WRAM Bank #6 map has enemy occupied (bit 1) and ZOC tiles (bit 0) marked, ($C613) = 1
 ROMD:563C CD 42 58         call 5842           // BC = 65535 if active unit is non-Lander transport and there are no Aircraft Carriers to load onto; otherwise, BC holds coordinates of first available Aircraft Carrier
 ROMD:563F 78               ld   a,b
 ROMD:5640 FE FF            cp   a,FF
 ROMD:5642 20 2C            jr   nz,5670        // Branches for non-transport air unit, or any Aircraft Carriers to load onto
 ROMD:5644 FA DD CC         ld   a,(CCDD)
 ROMD:5647 CB 3F            srl a
 ROMD:5649 EF 0C 9A 6F                          // ($C949) 3 byte holds viable repair points
 ROMD:564D CD 8D 57         call 578D           // A = 0 if tile is reachable within 1 Day, BC holds coordinates of nearest viable repair property
 ROMD:5650 A7               and  a
 ROMD:5651 28 13            jr   z,5666         // Skip next several lines if tile is reachable within 1 Day
 ROMD:5653 78               ld   a,b
 ROMD:5654 FE FF            cp   a,FF
 ROMD:5656 28 42            jr   z,569A         // End with A = 0 if no viable repair properties are possible
 ROMD:5658 FA DD CC         ld   a,(CCDD)
 ROMD:565B CD A2 58         call 58A2           // $A000 table holds Movement requirements, blah blah blah
 ROMD:565E CD B5 5B         call 5BB5           // BC = coordinates of destination tile determined by pathfinding for unit to general destination
 ROMD:5661 78               ld   a,b
 ROMD:5662 FE FF            cp   a,FF
 ROMD:5664 28 34            jr   z,569A         // End with A = 0 if no locations are within pathfinding
 ROMD:5666 78               ld   a,b
 ROMD:5667 EA ED C5         ld   (C5ED),a
 ROMD:566A 79               ld   a,c
 ROMD:566B EA EE C5         ld   (C5EE),a
 ROMD:566E 18 1E            jr   568E           // Movement toward designated destination
 ROMD:5670 78               ld   a,b
 ROMD:5671 EA ED C5         ld   (C5ED),a
 ROMD:5674 79               ld   a,c
 ROMD:5675 EA EE C5         ld   (C5EE),a       // Aircraft Carrier coordinates
 ROMD:5678 3E 06            ld   a,06
 ROMD:567A EA EC C5         ld   (C5EC),a       // Loading
 ROMD:567D CD 07 44         call 4407           // Handles full movement and action of AI unit based on provided information
 ROMD:5680 18 14            jr   5696           // Immediate ending with A = 1
 ROMD:5682 FA D9 C9         ld   a,(C9D9)
 ROMD:5685 EA ED C5         ld   (C5ED),a
 ROMD:5688 FA DA C9         ld   a,(C9DA)
 ROMD:568B EA EE C5         ld   (C5EE),a       // Unit's coordinates
 ROMD:568E 3E 00            ld   a,00
 ROMD:5690 EA EC C5         ld   (C5EC),a       // Sound #18
 ROMD:5693 CD 07 44         call 4407           // Handles full movement and action of AI unit based on provided information
 ROMD:5696 3E 01            ld   a,01
 ROMD:5698 18 02            jr   569C
 ROMD:569A 3E 00            ld   a,00
 ROMD:569C D1               pop  de
 ROMD:569D C9               ret                 // Move unit to viable repair point if needed, A set to 1 on necessity
 ROMD:569E D5               push de
 ROMD:569F CD 4A 57         call 574A           // A = 1 if Fuel < Movement Power * 2, or if Materials or both weapons are dry; 0 otherwise
 ROMD:56A2 FE 01            cp   a,01
 ROMD:56A4 20 78            jr   nz,571E        // End with A = 1 if resupply "unneeded" (..air units...)
 ROMD:56A6 FA D8 C9         ld   a,(C9D8)
 ROMD:56A9 EF 0C 44 6B                          // A = 1 if unit is already supplied or resupply/repairing isn't happening; 0 otherwise
 ROMD:56AD A7               and  a
 ROMD:56AE 28 37            jr   z,56E7         // Jumps if unit is being resupplied
 ROMD:56B0 CD A9 65         call 65A9           // WRAM Bank #5 map has Movement requirements, WRAM Bank #6 map has enemy occupied (bit 1) and ZOC tiles (bit 0) marked, ($C613) = 1
 ROMD:56B3 CD 42 58         call 5842           // BC = 65535 if active unit is non-Lander transport and there are no Aircraft Carriers to load onto; otherwise, BC holds coordinates of first available Aircraft Carrier
 ROMD:56B6 78               ld   a,b
 ROMD:56B7 FE FF            cp   a,FF
 ROMD:56B9 20 3D            jr   nz,56F8        // Branch if Aircraft Carrier is viable
 ROMD:56BB FA DD CC         ld   a,(CCDD)
 ROMD:56BE CB 3F            srl a               // A = Unit Type no side
 ROMD:56C0 EF 0C 22 70                          // ($C949) holds viable resupplying property types for unit type A
 ROMD:56C4 CD 8D 57         call 578D           // A = 0 if tile is reachable within 1 Day, BC holds coordinates of nearest viable repair property
 ROMD:56C7 A7               and  a
 ROMD:56C8 28 13            jr   z,56DD         // Skip next set of lines if reachable in 1 Day
 ROMD:56CA 78               ld   a,b
 ROMD:56CB FE FF            cp   a,FF
 ROMD:56CD 28 4F            jr   z,571E         // End immediately if non-existent
 ROMD:56CF FA DD CC         ld   a,(CCDD)       // A = Unit Type
 ROMD:56D2 CD A2 58         call 58A2           // SRAD($A000) table holds total Movement requirements % 16 * 16, SRAD($B000) table holds same / 16
 ROMD:56D5 CD B5 5B         call 5BB5           // BC = coordinates of destination tile determined by pathfinding for unit to general destination
 ROMD:56D8 78               ld   a,b
 ROMD:56D9 FE FF            cp   a,FF
 ROMD:56DB 28 41            jr   z,571E         // End immediately if no destination within pathfinding
 ROMD:56DD 78               ld   a,b
 ROMD:56DE EA ED C5         ld   (C5ED),a
 ROMD:56E1 79               ld   a,c
 ROMD:56E2 EA EE C5         ld   (C5EE),a       // Destination
 ROMD:56E5 18 2F            jr   5716           // Handles movement
 ROMD:56E7 FA D9 C9         ld   a,(C9D9)       // Unit being resupplied branch
 ROMD:56EA 47               ld   b,a
 ROMD:56EB FA DA C9         ld   a,(C9DA)
 ROMD:56EE 4F               ld   c,a            // Unit coordinates
 ROMD:56EF EF 0B 01 7B                          // Handles map graphics shift to coordinates BC
 ROMD:56F3 CD 48 46         call 4648           // Resupply selected unit and gathers their stats
 ROMD:56F6 18 26            jr   571E           // Immediate ending
 ROMD:56F8 78               ld   a,b            // Aircraft Carrier landing branch
 ROMD:56F9 EA ED C5         ld   (C5ED),a
 ROMD:56FC 79               ld   a,c
 ROMD:56FD EA EE C5         ld   (C5EE),a       // Aircraft Carrier location
 ROMD:5700 3E 06            ld   a,06
 ROMD:5702 EA EC C5         ld   (C5EC),a       // Loading
 ROMD:5705 CD 07 44         call 4407           // Handles full movement and action of AI unit based on provided information
 ROMD:5708 18 14            jr   571E
 ROMD:570A FA D9 C9         ld   a,(C9D9)
 ROMD:570D EA ED C5         ld   (C5ED),a
 ROMD:5710 FA DA C9         ld   a,(C9DA)
 ROMD:5713 EA EE C5         ld   (C5EE),a
 ROMD:5716 3E 00            ld   a,00
 ROMD:5718 EA EC C5         ld   (C5EC),a       // Sound #18
 ROMD:571B CD 07 44         call 4407           // Handles full movement and action of AI unit based on provided information
 ROMD:571E D1               pop  de
 ROMD:571F C9               ret                 // Manage Unit A resupply
 ROMD:5720 FA DD CC         ld   a,(CCDD)
 ROMD:5723 47               ld   b,a
 ROMD:5724 FA D8 C9         ld   a,(C9D8)       // A = Unit #, B = Unit Type
 ROMD:5727 EF 12 C8 46                          // A = 0 repairs valid, -1 repairs invalid
 ROMD:572B A7               and  a
 ROMD:572C 20 0B            jr   nz,5739        // End with A = 0 if repairs invalid
 ROMD:572E FA E1 CC         ld   a,(CCE1)
 ROMD:5731 FE 07            cp   a,07
 ROMD:5733 30 04            jr   nc,5739        // End with A = 0 if HP > 6
 ROMD:5735 3E 01            ld   a,01
 ROMD:5737 18 02            jr   573B
 ROMD:5739 3E 00            ld   a,00
 ROMD:573B C9               ret                 // A = 1 if repairs valid and unit's HP < 7; 0 otherwise
 ROMD:573C FA E1 CC         ld   a,(CCE1)
 ROMD:573F FE 04            cp   a,04
 ROMD:5741 30 04            jr   nc,5747
 ROMD:5743 3E 01            ld   a,01
 ROMD:5745 18 02            jr   5749
 ROMD:5747 3E 00            ld   a,00
 ROMD:5749 C9               ret                 // A = 1 if HP < 4, 0 otherwise
 ROMD:574A C5               push bc
 ROMD:574B FA DD CC         ld   a,(CCDD)
 ROMD:574E 0E 0C            ld   c,0C
 ROMD:5750 EF 12 37 40                          // A = Movement Power
 ROMD:5754 87               add  a
 ROMD:5755 47               ld   b,a            // B = Movement Power * 2
 ROMD:5756 FA E4 CC         ld   a,(CCE4)       // A = Fuel
 ROMD:5759 B8               cp   b
 ROMD:575A 38 29            jr   c,5785         // End with A = 1 if Fuel < Movement Power * 2
 ROMD:575C FA DD CC         ld   a,(CCDD)
 ROMD:575F CB 3F            srl a
 ROMD:5761 FE 04            cp   a,04           // Work Car?
 ROMD:5763 28 1A            jr   z,577F         // Do only Primary Weapon Ammo check if Work Car
 ROMD:5765 FA FA CC         ld   a,(CCFA)
 ROMD:5768 A7               and  a
 ROMD:5769 28 1E            jr   z,5789         // End with A = 0 if no weapons
 ROMD:576B FA F7 CC         ld   a,(CCF7)
 ROMD:576E A7               and  a
 ROMD:576F 20 18            jr   nz,5789        // End with A = 0 if any Primary Weapon Ammo left
 ROMD:5771 FA 08 CD         ld   a,(CD08)
 ROMD:5774 A7               and  a
 ROMD:5775 28 0E            jr   z,5785         // End with A = 1 if no Secondary Weapon
 ROMD:5777 FA 05 CD         ld   a,(CD05)
 ROMD:577A A7               and  a
 ROMD:577B 20 0C            jr   nz,5789        // End with A = 0 if any Secondary Weapon Ammo left
 ROMD:577D 18 06            jr   5785           // End with A = 1 if both weapons are out of ammo
 ROMD:577F FA F7 CC         ld   a,(CCF7)
 ROMD:5782 A7               and  a
 ROMD:5783 20 04            jr   nz,5789        // End with A = 0 if any Materials left
 ROMD:5785 3E 01            ld   a,01
 ROMD:5787 18 02            jr   578B
 ROMD:5789 3E 00            ld   a,00
 ROMD:578B C1               pop  bc
 ROMD:578C C9               ret                 // A = 1 if Fuel < Movement Power * 2, or if Materials or both weapons are dry; 0 otherwise
 ROMD:578D D5               push de
 ROMD:578E F0 82            ld   a,(ff00+82)
 ROMD:5790 F5               push af
 ROMD:5791 3E 0D            ld   a,0D
 ROMD:5793 CD 8D 05         call 058D           // ($4000) = 13, ($FF81) = 13
 ROMD:5796 FA D9 C9         ld   a,(C9D9)
 ROMD:5799 47               ld   b,a
 ROMD:579A FA DA C9         ld   a,(C9DA)
 ROMD:579D 4F               ld   c,a
 ROMD:579E FA DD CC         ld   a,(CCDD)       // A = Unit Type; BC holds unit's coordinates
 ROMD:57A1 CD A2 58         call 58A2           // $A000 table holds total Movement requirements % 16 * 16, $B000 table holds same / 16
 ROMD:57A4 CD 93 05         call 0593           // ($0000) = 10
 ROMD:57A7 3E FF            ld   a,FF
 ROMD:57A9 E0 99            ld   (ff00+99),a
 ROMD:57AB E0 9A            ld   (ff00+9A),a
 ROMD:57AD E0 9D            ld   (ff00+9D),a
 ROMD:57AF E0 9E            ld   (ff00+9E),a
 ROMD:57B1 AF               xor  a
 ROMD:57B2 E0 9B            ld   (ff00+9B),a
 ROMD:57B4 3E 01            ld   a,01
 ROMD:57B6 E0 9C            ld   (ff00+9C),a    // -1, -1, 0, 1, -1, -1
 ROMD:57B8 3E 01            ld   a,01           // Loop starts here
 ROMD:57BA E0 82            ld   (ff00+82),a
 ROMD:57BC E0 70            ld   (ff00+70),a    // Terrain map WRAM Bank
 ROMD:57BE F0 9B            ld   a,(ff00+9B)    // A = Property #
 ROMD:57C0 06 00            ld   b,00
 ROMD:57C2 4F               ld   c,a
 ROMD:57C3 21 81 DD         ld   hl,DD81
 ROMD:57C6 09               add  hl,bc
 ROMD:57C7 09               add  hl,bc
 ROMD:57C8 09               add  hl,bc
 ROMD:57C9 56               ld   d,(hl)
 ROMD:57CA 23               inc  hl
 ROMD:57CB 46               ld   b,(hl)
 ROMD:57CC 23               inc  hl
 ROMD:57CD 4E               ld   c,(hl)         // BC holds coordinates, D holds Strength
 ROMD:57CE 78               ld   a,b
 ROMD:57CF FE FF            cp   a,FF
 ROMD:57D1 28 4F            jr   z,5822         // End cycle if tile doesn't exist
 ROMD:57D3 3E 02            ld   a,02
 ROMD:57D5 E0 82            ld   (ff00+82),a
 ROMD:57D7 E0 70            ld   (ff00+70),a    // WRAM Bank #2
 ROMD:57D9 CD D7 08         call 08D7           // HL = $D000 + B + C * 64
 ROMD:57DC 7E               ld   a,(hl)         // A = WRAM Bank #2 map tile information
 ROMD:57DD A7               and  a
 ROMD:57DE 20 42            jr   nz,5822        // End cycle if tile is already occupied
 ROMD:57E0 3E 05            ld   a,05
 ROMD:57E2 E0 82            ld   (ff00+82),a
 ROMD:57E4 E0 70            ld   (ff00+70),a
 ROMD:57E6 56               ld   d,(hl)         // D = Movement requirement
 ROMD:57E7 3E 01            ld   a,01
 ROMD:57E9 E0 82            ld   (ff00+82),a
 ROMD:57EB E0 70            ld   (ff00+70),a
 ROMD:57ED 7E               ld   a,(hl)         // A = Terrain Type
 ROMD:57EE E6 3F            and  a,3F
 ROMD:57F0 CD 8F 58         call 588F           // A = 0 if property can't repair, Terrain Type if it can
 ROMD:57F3 A7               and  a
 ROMD:57F4 28 2C            jr   z,5822         // End cycle if property can't repair
 ROMD:57F6 7A               ld   a,d
 ROMD:57F7 FE FF            cp   a,FF
 ROMD:57F9 20 38            jr   nz,5833        // End with A and ($FF9C) set to 0 if tile can be reached
 ROMD:57FB 3E A0            ld   a,A0
 ROMD:57FD CD E6 08         call 08E6           // HL = $A000 + B + C * 64
 ROMD:5800 7E               ld   a,(hl)         // A = $A000 table tile information
 ROMD:5801 FE FF            cp   a,FF
 ROMD:5803 28 1D            jr   z,5822         // End cycle if movement isn't happening
 ROMD:5805 5F               ld   e,a
 ROMD:5806 7C               ld   a,h
 ROMD:5807 C6 10            add  a,10
 ROMD:5809 67               ld   h,a
 ROMD:580A 56               ld   d,(hl)         // DE = Movement requirement from destination
 ROMD:580B F0 9D            ld   a,(ff00+9D)
 ROMD:580D 6F               ld   l,a
 ROMD:580E F0 9E            ld   a,(ff00+9E)
 ROMD:5810 67               ld   h,a
 ROMD:5811 CD CA 29         call 29CA           // Carry Flag active if DE < HL, A = 0 if DE = HL
 ROMD:5814 30 0C            jr   nc,5822
 ROMD:5816 7B               ld   a,e
 ROMD:5817 E0 9D            ld   (ff00+9D),a
 ROMD:5819 7A               ld   a,d
 ROMD:581A E0 9E            ld   (ff00+9E),a    // ($FF9D) 2 byte reverse holds minimal Movement
 ROMD:581C 78               ld   a,b
 ROMD:581D E0 99            ld   (ff00+99),a
 ROMD:581F 79               ld   a,c
 ROMD:5820 E0 9A            ld   (ff00+9A),a    // ($FF99) 2 byte holds coordinates of nearest property
 ROMD:5822 F0 9B            ld   a,(ff00+9B)
 ROMD:5824 3C               inc  a
 ROMD:5825 E0 9B            ld   (ff00+9B),a
 ROMD:5827 FE 64            cp   a,64
 ROMD:5829 20 8D            jr   nz,57B8
 ROMD:582B F0 99            ld   a,(ff00+99)
 ROMD:582D 47               ld   b,a
 ROMD:582E F0 9A            ld   a,(ff00+9A)
 ROMD:5830 4F               ld   c,a            // BC holds coordinates of nearest viable repair property
 ROMD:5831 18 03            jr   5836
 ROMD:5833 AF               xor  a
 ROMD:5834 E0 9C            ld   (ff00+9C),a
 ROMD:5836 CD 9B 05         call 059B           // ($0000) = 0
 ROMD:5839 F1               pop  af
 ROMD:583A E0 82            ld   (ff00+82),a
 ROMD:583C E0 70            ld   (ff00+70),a
 ROMD:583E F0 9C            ld   a,(ff00+9C)
 ROMD:5840 D1               pop  de
 ROMD:5841 C9               ret                 // A = 0 if tile is reachable within 1 Day, BC holds coordinates of nearest viable repair property
 ROMD:5842 F0 82            ld   a,(ff00+82)
 ROMD:5844 F5               push af
 ROMD:5845 3E 05            ld   a,05
 ROMD:5847 E0 82            ld   (ff00+82),a
 ROMD:5849 E0 70            ld   (ff00+70),a
 ROMD:584B FA DD CC         ld   a,(CCDD)
 ROMD:584E 06 2E            ld   b,2E
 ROMD:5850 EF 12 29 43                          // If unit A can Load, Z flag depends on IFV's Carried Type being Carrying type
 ROMD:5854 20 30            jr   nz,5886        // End with BC = 65535 for a transport if Loading an IFV isn't happening (would be the case with anything other than the Lander)
 ROMD:5856 FA A2 C9         ld   a,(C9A2)       // A = first unit of active player
 ROMD:5859 57               ld   d,a
 ROMD:585A 1E 32            ld   e,32
 ROMD:585C 7A               ld   a,d            // Loop starts here
 ROMD:585D 0E 00            ld   c,00
 ROMD:585F CD 0B 09         call 090B           // Unit Type
 ROMD:5862 A7               and  a
 ROMD:5863 28 1D            jr   z,5882         // End cycle if unit doesn't exist
 ROMD:5865 CB 3F            srl a
 ROMD:5867 FE 2E            cp   a,2E
 ROMD:5869 28 04            jr   z,586F
 ROMD:586B FE 2F            cp   a,2F
 ROMD:586D 20 13            jr   nz,5882        // End cycle if unit isn't an Aircraft Carrier
 ROMD:586F 7A               ld   a,d
 ROMD:5870 CD 5E 09         call 095E           // BC = unit coordinates
 ROMD:5873 CD D7 08         call 08D7           // HL = $D000 + B + C * 64
 ROMD:5876 7E               ld   a,(hl)         // A = Movement requirement
 ROMD:5877 FE FF            cp   a,FF
 ROMD:5879 28 07            jr   z,5882         // End cycle if movement is invalid
 ROMD:587B EF 0B 84 5D                          // A = 0 if Loading is happening, 1 otherwise
 ROMD:587F A7               and  a
 ROMD:5880 28 07            jr   z,5889         // End with Zero Flag set if Loading is happening
 ROMD:5882 14               inc  d
 ROMD:5883 1D               dec  e
 ROMD:5884 20 D6            jr   nz,585C
 ROMD:5886 01 FF FF         ld   bc,FFFF
 ROMD:5889 F1               pop  af
 ROMD:588A E0 82            ld   (ff00+82),a
 ROMD:588C E0 70            ld   (ff00+70),a
 ROMD:588E C9               ret                 // BC = 65535 if active unit is non-Lander transport and there are no Aircraft Carriers to load onto; otherwise, BC holds coordinates of first available Aircraft Carrier
 ROMD:588F C5               push bc
 ROMD:5890 47               ld   b,a
 ROMD:5891 21 49 C9         ld   hl,C949
 ROMD:5894 7E               ld   a,(hl)         // A = valid repair property (Loop begins here)
 ROMD:5895 A7               and  a
 ROMD:5896 28 08            jr   z,58A0         // End if A = 0
 ROMD:5898 FA A4 C9         ld   a,(C9A4)       // A = 0 or 11 depending on side
 ROMD:589B 86               add  (hl)
 ROMD:589C 23               inc  hl
 ROMD:589D B8               cp   b              // Is A the valid repair property?
 ROMD:589E 20 F4            jr   nz,5894        // Retry if not
 ROMD:58A0 C1               pop  bc
 ROMD:58A1 C9               ret                 // A = 0 if property can't repair, Terrain Type if it can
 ROMD:58A2 C5               push bc
 ROMD:58A3 D5               push de
 ROMD:58A4 C5               push bc
 ROMD:58A5 0E 19            ld   c,19
 ROMD:58A7 EF 12 37 40                          // A = Movement Type
 ROMD:58AB EF 12 AD 47                          // ($CD43) to ($CD76) hold Movement Costs
 ROMD:58AF CD 93 05         call 0593           // ($0000) = 10
 ROMD:58B2 3E 0D            ld   a,0D
 ROMD:58B4 CD 8D 05         call 058D           // ($4000) = 13, ($FF81) = 13
 ROMD:58B7 3E FF            ld   a,FF
 ROMD:58B9 21 00 A0         ld   hl,A000
 ROMD:58BC 01 00 20         ld   bc,2000
 ROMD:58BF CD 79 3B         call 3B79           // SRAD($A000) ~ SRAD($BFFF) = -1
 ROMD:58C2 CD 9B 05         call 059B           // ($0000) = 0
 ROMD:58C5 21 A3 FF         ld   hl,FFA3
 ROMD:58C8 11 F2 58         ld   de,58F2        // HL = $A000 + B + C * 64, ($B000 + B + C * 64) and ($A000 + B + C * 64) emptied, ($DE00 + ($FFA2) * 2) 2 byte = BC, ($FFA2) += 1
 ROMD:58CB CD C0 08         call 08C0           // ($FFA3) 2 byte = $58F2, HL = $FFA5
 ROMD:58CE 11 0F 59         ld   de,590F        // ($FF99) = ($A000 + B + C * 64), ($FF9A) = ($B000 + B + C * 64)
 ROMD:58D1 CD C0 08         call 08C0           // ($FFA5) 2 byte = $590F, HL = $FFA7
 ROMD:58D4 11 3D 59         ld   de,593D        // A = 1 if terrain impassable or ($FF99) 2 byte reversed + Movement Cost => ($B000 + B + C * 64) * 256 + ($A000 + B + C * 64); 0 otherwise
 ROMD:58D7 CD C0 08         call 08C0           // ($FFA7) 2 byte = $593D, HL = $FFA9
 ROMD:58DA 11 28 59         ld   de,5928        // ($B000 + B + C * 64) = D, ($A000 + B + C * 64) = E
 ROMD:58DD CD C0 08         call 08C0           // ($FFA9) 2 byte = $5928, HL = $FFAB
 ROMD:58E0 C1               pop  bc
 ROMD:58E1 CD 93 05         call 0593           // ($0000) = 10
 ROMD:58E4 3E 0D            ld   a,0D
 ROMD:58E6 CD 8D 05         call 058D           // ($4000) = 13, ($FF81) = 13
 ROMD:58E9 CD 50 08         call 0850           // 1st part: HL = $A000 table base location, which is emptied along with $B000 table base location, ($DE00) = coordinates, ($FFA2) += 1
                                                // Loop part 1: ($FF99) = $A000 table location item, ($FF9A) = $B000 table location item (BC = ($DE00 + ($FFA1) * 2) 2 byte)
											    // Loop part 2: A = 1 if terrain impassable or Movement Cost => ($B000 + B + C * 64); 0 otherwise
											    // $A000 table holds total Movement requirements % 16 * 16, $B000 table holds same / 16
 ROMD:58EC CD 9B 05         call 059B           // ($0000) = 0
 ROMD:58EF D1               pop  de
 ROMD:58F0 C1               pop  bc
 ROMD:58F1 C9               ret  
 ROMD:58F2 AF               xor  a
 ROMD:58F3 E0 99            ld   (ff00+99),a
 ROMD:58F5 E0 9A            ld   (ff00+9A),a
 ROMD:58F7 79               ld   a,c
 ROMD:58F8 0F               rrca 
 ROMD:58F9 0F               rrca 
 ROMD:58FA 6F               ld   l,a
 ROMD:58FB E6 0F            and  a,0F
 ROMD:58FD C6 A0            add  a,A0
 ROMD:58FF 67               ld   h,a
 ROMD:5900 7D               ld   a,l
 ROMD:5901 E6 F0            and  a,F0
 ROMD:5903 80               add  b
 ROMD:5904 6F               ld   l,a            // HL = $A000 + B + C * 64
 ROMD:5905 11 00 00         ld   de,0000
 ROMD:5908 CD 28 59         call 5928           // ($B000 + B + C * 64) = 0, ($A000 + B + C * 64) = 0
 ROMD:590B CD C5 08         call 08C5           // ($DE00 + ($FFA2) * 2) 2 byte = BC, ($FFA2) += 1
 ROMD:590E C9               ret  
 ROMD:590F 79               ld   a,c
 ROMD:5910 0F               rrca 
 ROMD:5911 0F               rrca 
 ROMD:5912 6F               ld   l,a
 ROMD:5913 E6 0F            and  a,0F
 ROMD:5915 C6 A0            add  a,A0
 ROMD:5917 67               ld   h,a
 ROMD:5918 7D               ld   a,l
 ROMD:5919 E6 F0            and  a,F0
 ROMD:591B 80               add  b
 ROMD:591C 6F               ld   l,a            // HL = $A000 + B + C * 64
 ROMD:591D 7E               ld   a,(hl)         // A = ($A000 + B + C * 64)
 ROMD:591E E0 99            ld   (ff00+99),a    // ($FF99) = ($A000 + B + C * 64)
 ROMD:5920 7C               ld   a,h
 ROMD:5921 C6 10            add  a,10
 ROMD:5923 67               ld   h,a            // HL = $B000 + B + C * 64
 ROMD:5924 7E               ld   a,(hl)         // A = ($B000 + B + C * 64)
 ROMD:5925 E0 9A            ld   (ff00+9A),a    // ($FF9A) = ($B000 + B + C * 64)
 ROMD:5927 C9               ret                 // ($FF99) = ($A000 + B + C * 64), ($FF9A) = ($B000 + B + C * 64)
 ROMD:5928 79               ld   a,c
 ROMD:5929 0F               rrca 
 ROMD:592A 0F               rrca 
 ROMD:592B 6F               ld   l,a
 ROMD:592C E6 0F            and  a,0F
 ROMD:592E C6 A0            add  a,A0
 ROMD:5930 67               ld   h,a
 ROMD:5931 7D               ld   a,l
 ROMD:5932 E6 F0            and  a,F0
 ROMD:5934 80               add  b
 ROMD:5935 6F               ld   l,a            // HL = $A000 + B + C * 64
 ROMD:5936 73               ld   (hl),e         // ($A000 + B + C * 64) = E
 ROMD:5937 7C               ld   a,h
 ROMD:5938 C6 10            add  a,10
 ROMD:593A 67               ld   h,a
 ROMD:593B 72               ld   (hl),d         // ($B000 + B + C * 64) = D
 ROMD:593C C9               ret  
 ROMD:593D C5               push bc
 ROMD:593E F0 82            ld   a,(ff00+82)
 ROMD:5940 F5               push af
 ROMD:5941 3E 01            ld   a,01
 ROMD:5943 E0 82            ld   (ff00+82),a
 ROMD:5945 E0 70            ld   (ff00+70),a    // Map WRAM Bank
 ROMD:5947 79               ld   a,c
 ROMD:5948 0F               rrca 
 ROMD:5949 0F               rrca 
 ROMD:594A 6F               ld   l,a
 ROMD:594B E6 0F            and  a,0F
 ROMD:594D C6 D0            add  a,D0
 ROMD:594F 67               ld   h,a
 ROMD:5950 7D               ld   a,l
 ROMD:5951 E6 F0            and  a,F0
 ROMD:5953 80               add  b
 ROMD:5954 6F               ld   l,a            // HL = $D000 + B + C * 64
 ROMD:5955 7E               ld   a,(hl)         // A = Terrain type
 ROMD:5956 E6 3F            and  a,3F
 ROMD:5958 5F               ld   e,a            // E = Terrain type
 ROMD:5959 16 00            ld   d,00
 ROMD:595B 21 43 CD         ld   hl,CD43
 ROMD:595E 19               add  hl,de
 ROMD:595F 7E               ld   a,(hl)         // A = Movement Cost
 ROMD:5960 A7               and  a
 ROMD:5961 28 2E            jr   z,5991         // End with A = 1 if terrain can't be traversed
 ROMD:5963 5F               ld   e,a            // E = Movement Cost
 ROMD:5964 16 00            ld   d,00
 ROMD:5966 F0 99            ld   a,(ff00+99)
 ROMD:5968 6F               ld   l,a
 ROMD:5969 F0 9A            ld   a,(ff00+9A)
 ROMD:596B 67               ld   h,a            // HL = ($FF99) 2 byte reversed
 ROMD:596C 19               add  hl,de          // HL = ($FF99) 2 byte reversed + Movement Cost
 ROMD:596D 54               ld   d,h
 ROMD:596E 5D               ld   e,l            // DE = ($FF99) 2 byte reversed + Movement Cost
 ROMD:596F 79               ld   a,c
 ROMD:5970 0F               rrca 
 ROMD:5971 0F               rrca 
 ROMD:5972 6F               ld   l,a
 ROMD:5973 E6 0F            and  a,0F
 ROMD:5975 C6 A0            add  a,A0
 ROMD:5977 67               ld   h,a
 ROMD:5978 7D               ld   a,l
 ROMD:5979 E6 F0            and  a,F0
 ROMD:597B 80               add  b
 ROMD:597C 6F               ld   l,a            // HL = $A000 + B + C * 64
 ROMD:597D E5               push hl
 ROMD:597E C5               push bc
 ROMD:597F 4E               ld   c,(hl)
 ROMD:5980 7C               ld   a,h
 ROMD:5981 C6 10            add  a,10
 ROMD:5983 67               ld   h,a
 ROMD:5984 66               ld   h,(hl)
 ROMD:5985 69               ld   l,c            // HL = ($B000 + B + C * 64) * 256 + ($A000 + B + C * 64)
 ROMD:5986 C1               pop  bc             // BC changed back to coordinates
 ROMD:5987 CD CA 29         call 29CA           // if ($FF99) 2 byte reversed + Movement Cost = ($B000 + B + C * 64) * 256 + ($A000 + B + C * 64), A = 0; Carry Flag set by DE < HL
 ROMD:598A E1               pop  hl             // HL = $A000 + B + C * 64
 ROMD:598B 30 04            jr   nc,5991        // if ($FF99) 2 byte reversed + Movement Cost => ($B000 + B + C * 64) * 256 + ($A000 + B + C * 64), end with A = 1
 ROMD:598D 06 00            ld   b,00
 ROMD:598F 18 02            jr   5993
 ROMD:5991 06 01            ld   b,01
 ROMD:5993 F1               pop  af
 ROMD:5994 E0 82            ld   (ff00+82),a
 ROMD:5996 E0 70            ld   (ff00+70),a
 ROMD:5998 78               ld   a,b
 ROMD:5999 C1               pop  bc
 ROMD:599A C9               ret                 // A = 1 if terrain impassable or ($FF99) 2 byte + Movement Cost => ($B000 + B + C * 64) * 256 + ($A000 + B + C * 64); 0 otherwise
 ROMD:599B C5               push bc
 ROMD:599C D5               push de
 ROMD:599D CD 93 05         call 0593           // ($0000) = 10
 ROMD:59A0 3E 0D            ld   a,0D
 ROMD:59A2 CD 8D 05         call 058D           // ($4000) = 13, ($FF81) = 13
 ROMD:59A5 1E 00            ld   e,00
 ROMD:59A7 D5               push de             // Loop begins here
 ROMD:59A8 C5               push bc
 ROMD:59A9 CD D9 28         call 28D9           // BC = relative coordinates, Set Carry Flag based on relative coordinates being out of bounds
 ROMD:59AC 50               ld   d,b
 ROMD:59AD 59               ld   e,c            // DE = relative coordinates
 ROMD:59AE C1               pop  bc             // BC = original coordinates
 ROMD:59AF 38 16            jr   c,59C7         // End cycle immediately if out of bounds
 ROMD:59B1 7B               ld   a,e
 ROMD:59B2 0F               rrca 
 ROMD:59B3 0F               rrca 
 ROMD:59B4 6F               ld   l,a
 ROMD:59B5 E6 0F            and  a,0F
 ROMD:59B7 C6 A0            add  a,A0
 ROMD:59B9 67               ld   h,a
 ROMD:59BA 7D               ld   a,l
 ROMD:59BB E6 F0            and  a,F0
 ROMD:59BD 82               add  d
 ROMD:59BE 6F               ld   l,a            // HL = $A000 table relative coordinates location
 ROMD:59BF 16 FF            ld   d,FF
 ROMD:59C1 72               ld   (hl),d
 ROMD:59C2 7C               ld   a,h
 ROMD:59C3 C6 10            add  a,10
 ROMD:59C5 67               ld   h,a
 ROMD:59C6 72               ld   (hl),d
 ROMD:59C7 D1               pop  de
 ROMD:59C8 1C               inc  e
 ROMD:59C9 7B               ld   a,e
 ROMD:59CA FE 06            cp   a,06
 ROMD:59CC 20 D9            jr   nz,59A7
 ROMD:59CE CD 9B 05         call 059B           // ($0000) = 0
 ROMD:59D1 D1               pop  de
 ROMD:59D2 C1               pop  bc
 ROMD:59D3 C9               ret                 // Surrounding tiles of BC set up to be treated as invalid stopping points
 ROMD:59D4 D5               push de
 ROMD:59D5 F0 82            ld   a,(ff00+82)
 ROMD:59D7 F5               push af
 ROMD:59D8 3E 01            ld   a,01
 ROMD:59DA E0 82            ld   (ff00+82),a
 ROMD:59DC E0 70            ld   (ff00+70),a    // Map WRAM Bank
 ROMD:59DE CD A5 5D         call 5DA5           // BC hold active player's HQ
 ROMD:59E1 3E 68            ld   a,68           // Movement type is Dummy that has River Treads that can't cross Beaches but treat Ruined properties as normal ones
 ROMD:59E3 CD A2 58         call 58A2           // $A000 table holds total Movement requirements to active player's HQ % 16 * 16, $B000 table holds same / 16
 ROMD:59E6 CD 93 05         call 0593           // ($0000) = 10
 ROMD:59E9 3E 0D            ld   a,0D
 ROMD:59EB CD 8D 05         call 058D           // ($4000) = 13, ($FF81) = 13
 ROMD:59EE CD 9C 5D         call 5D9C           // BC hold inactive player's HQ
 ROMD:59F1 3E FF            ld   a,FF
 ROMD:59F3 E0 9B            ld   (ff00+9B),a
 ROMD:59F5 E0 9C            ld   (ff00+9C),a    // ($FF9B) and ($FF9C) hold -1
 ROMD:59F7 3E A0            ld   a,A0
 ROMD:59F9 CD E6 08         call 08E6           // HL = $A000 + B + C * 64
 ROMD:59FC 7E               ld   a,(hl)         // A = Total Movement requirement from inactive player's HQ to active player's HQ, -1 if not reachable by Dummy
 ROMD:59FD E0 99            ld   (ff00+99),a    // ($FF99) = Total Movement requirement from inactive player's HQ to active player's HQ, -1 if not reachable by Dummy
 ROMD:59FF 5F               ld   e,a            // E = Total Movement requirement from inactive player's HQ to active player's HQ, -1 if not reachable by Dummy
 ROMD:5A00 7C               ld   a,h
 ROMD:5A01 C6 10            add  a,10
 ROMD:5A03 67               ld   h,a
 ROMD:5A04 7E               ld   a,(hl)
 ROMD:5A05 E0 9A            ld   (ff00+9A),a    // ($FF99) 2 byte = Total Movement requirement from inactive player's HQ to active player's HQ, -1 if not reachable by Dummy
 ROMD:5A07 A3               and  e
 ROMD:5A08 FE FF            cp   a,FF
 ROMD:5A0A 28 6A            jr   z,5A76         // End with BC = -1 if unreachable by Dummy
 ROMD:5A0C F0 99            ld   a,(ff00+99)    // Loop begins here
 ROMD:5A0E 6F               ld   l,a
 ROMD:5A0F F0 9A            ld   a,(ff00+9A)
 ROMD:5A11 67               ld   h,a            // HL = Movement required from tile to active player's HQ
 ROMD:5A12 B5               or   l
 ROMD:5A13 28 61            jr   z,5A76         // End with BC = ($FF9B) 2 byte if tile is active player's HQ
 ROMD:5A15 E5               push hl
 ROMD:5A16 CD D7 08         call 08D7           // HL = $D000 + B + C * 64
 ROMD:5A19 7E               ld   a,(hl)
 ROMD:5A1A E6 3F            and  a,3F
 ROMD:5A1C 5F               ld   e,a            // E = terrain
 ROMD:5A1D FE 28            cp   a,28
 ROMD:5A1F 20 06            jr   nz,5A27
 ROMD:5A21 78               ld   a,b
 ROMD:5A22 E0 9B            ld   (ff00+9B),a
 ROMD:5A24 79               ld   a,c
 ROMD:5A25 E0 9C            ld   (ff00+9C),a    // If terrain is River, ($FF9B) 2 byte = BC
 ROMD:5A27 16 00            ld   d,00
 ROMD:5A29 21 43 CD         ld   hl,CD43
 ROMD:5A2C 19               add  hl,de
 ROMD:5A2D 7E               ld   a,(hl)
 ROMD:5A2E 2F               cpl  
 ROMD:5A2F 3C               inc  a
 ROMD:5A30 5F               ld   e,a
 ROMD:5A31 16 FF            ld   d,FF           // DE = -1 * Movement Cost
 ROMD:5A33 E1               pop  hl             // HL = Movement required from tile to active player's HQ
 ROMD:5A34 19               add  hl,de          // DE = Movement required from tile to active player's HQ - Movement Cost
 ROMD:5A35 7D               ld   a,l
 ROMD:5A36 E0 99            ld   (ff00+99),a
 ROMD:5A38 7C               ld   a,h
 ROMD:5A39 E0 9A            ld   (ff00+9A),a    // ($FF99) 2 byte = Movement required from accepted adjacent tile
 ROMD:5A3B 1E 00            ld   e,00
 ROMD:5A3D C5               push bc             // Small loop starts here
 ROMD:5A3E D5               push de
 ROMD:5A3F CD D9 28         call 28D9           // BC = relative coordinates, Set Carry Flag based on relative coordinates being out of bounds
 ROMD:5A42 38 1F            jr   c,5A63         // Checks next adjacent tile if relative coordinates is out of bounds
 ROMD:5A44 79               ld   a,c
 ROMD:5A45 0F               rrca 
 ROMD:5A46 0F               rrca 
 ROMD:5A47 6F               ld   l,a
 ROMD:5A48 E6 0F            and  a,0F
 ROMD:5A4A C6 A0            add  a,A0
 ROMD:5A4C 67               ld   h,a
 ROMD:5A4D 7D               ld   a,l
 ROMD:5A4E E6 F0            and  a,F0
 ROMD:5A50 80               add  b
 ROMD:5A51 6F               ld   l,a            // HL = $A000 + B + C * 64
 ROMD:5A52 5E               ld   e,(hl)
 ROMD:5A53 7C               ld   a,h
 ROMD:5A54 C6 10            add  a,10
 ROMD:5A56 67               ld   h,a
 ROMD:5A57 56               ld   d,(hl)         // DE = Movement required to active player's HQ for relative tile
 ROMD:5A58 F0 99            ld   a,(ff00+99)
 ROMD:5A5A 6F               ld   l,a
 ROMD:5A5B F0 9A            ld   a,(ff00+9A)
 ROMD:5A5D 67               ld   h,a            // HL = Movement required from accepted adjacent tile
 ROMD:5A5E CD CA 29         call 29CA           // if DE = HL, A = 0; otherwise, A = D or E depending on H or L; Carry Flag set by DE < HL
 ROMD:5A61 28 0A            jr   z,5A6D         // Loop restarted if correct tile, with BC as relative coordinates and DE as original coordinates
 ROMD:5A63 D1               pop  de
 ROMD:5A64 C1               pop  bc
 ROMD:5A65 1C               inc  e
 ROMD:5A66 7B               ld   a,e
 ROMD:5A67 FE 06            cp   a,06
 ROMD:5A69 20 D2            jr   nz,5A3D
 ROMD:5A6B 18 04            jr   5A71
 ROMD:5A6D D1               pop  de
 ROMD:5A6E D1               pop  de
 ROMD:5A6F 18 9B            jr   5A0C
 ROMD:5A71 CD A2 05         call 05A2           // Button update, next frame
 ROMD:5A74 18 FB            jr   5A71           // Error stuff?
 ROMD:5A76 F0 9B            ld   a,(ff00+9B)
 ROMD:5A78 47               ld   b,a
 ROMD:5A79 F0 9C            ld   a,(ff00+9C)
 ROMD:5A7B 4F               ld   c,a            // BC holds either Movement required for reaching HQ, or first River along the way
 ROMD:5A7C CD 9B 05         call 059B           // ($0000) = 0
 ROMD:5A7F F1               pop  af
 ROMD:5A80 E0 82            ld   (ff00+82),a
 ROMD:5A82 E0 70            ld   (ff00+70),a
 ROMD:5A84 D1               pop  de
 ROMD:5A85 C9               ret                 // BC holds either first River along the way, or -1; $A000 table has Movement requirements established
 ROMD:5A86 C5               push bc
 ROMD:5A87 F0 82            ld   a,(ff00+82)
 ROMD:5A89 F5               push af
 ROMD:5A8A 3E 02            ld   a,02
 ROMD:5A8C E0 82            ld   (ff00+82),a
 ROMD:5A8E E0 70            ld   (ff00+70),a    // WRAM Bank #2
 ROMD:5A90 CD C2 5A         call 5AC2           // BC holds coordinates of Harbor closest to active player's HQ
 ROMD:5A93 78               ld   a,b
 ROMD:5A94 FE FF            cp   a,FF
 ROMD:5A96 28 23            jr   z,5ABB         // Ends if no Harbor is on the map
 ROMD:5A98 EA 9C DE         ld   (DE9C),a
 ROMD:5A9B 79               ld   a,c
 ROMD:5A9C EA 9D DE         ld   (DE9D),a       // ($DE9C) 2 byte holds coordinates of Harbor closest to active player's HQ
 ROMD:5A9F 3E 60            ld   a,60
 ROMD:5AA1 CD A2 58         call 58A2           // $A000 and $B000 tables hold Lander mobility, destination Harbor closest to active player's HQ
 ROMD:5AA4 CD 1A 5B         call 5B1A           // BC holds coordinates of Beach/Harbor nearest the enemy HQ
 ROMD:5AA7 78               ld   a,b
 ROMD:5AA8 FE FF            cp   a,FF
 ROMD:5AAA 28 0F            jr   z,5ABB         // End if no landing points against enemy HQ are available
 ROMD:5AAC EA 9E DE         ld   (DE9E),a
 ROMD:5AAF 79               ld   a,c
 ROMD:5AB0 EA 9F DE         ld   (DE9F),a       // ($DE9E) holds Beach/Harbor nearest the enemy HQ
 ROMD:5AB3 FA A0 DE         ld   a,(DEA0)
 ROMD:5AB6 CB D7            set 2,a
 ROMD:5AB8 EA A0 DE         ld   (DEA0),a
 ROMD:5ABB F1               pop  af
 ROMD:5ABC E0 82            ld   (ff00+82),a
 ROMD:5ABE E0 70            ld   (ff00+70),a
 ROMD:5AC0 C1               pop  bc
 ROMD:5AC1 C9               ret                 // ($DE9C) 4 byte holds default landing points, ($DEA0) bit 2 holds enemy HQ reachable by sea flag
 ROMD:5AC2 D5               push de
 ROMD:5AC3 F0 82            ld   a,(ff00+82)
 ROMD:5AC5 F5               push af
 ROMD:5AC6 3E 01            ld   a,01
 ROMD:5AC8 E0 82            ld   (ff00+82),a
 ROMD:5ACA E0 70            ld   (ff00+70),a    // Map WRAM Bank
 ROMD:5ACC 3E FF            ld   a,FF
 ROMD:5ACE E0 9A            ld   (ff00+9A),a
 ROMD:5AD0 E0 9B            ld   (ff00+9B),a
 ROMD:5AD2 E0 99            ld   (ff00+99),a    // ($FF99) to ($FF9B) set to 255
 ROMD:5AD4 1E 00            ld   e,00
 ROMD:5AD6 21 81 DD         ld   hl,DD81        // Properties
 ROMD:5AD9 D5               push de             // Loop starts here
 ROMD:5ADA 2A               ldi  a,(hl)
 ROMD:5ADB 46               ld   b,(hl)
 ROMD:5ADC 23               inc  hl
 ROMD:5ADD 4E               ld   c,(hl)
 ROMD:5ADE 23               inc  hl
 ROMD:5ADF E5               push hl
 ROMD:5AE0 FE FF            cp   a,FF           // Does property exist?
 ROMD:5AE2 28 21            jr   z,5B05         // End cycle if not
 ROMD:5AE4 CD 85 09         call 0985           // A = Terrain type
 ROMD:5AE7 CD 9B 09         call 099B           // A = Terrain Type ID
 ROMD:5AEA FE 09            cp   a,09           // Is it a Harbor?
 ROMD:5AEC 20 17            jr   nz,5B05        // End cycle if not
 ROMD:5AEE 50               ld   d,b
 ROMD:5AEF 59               ld   e,c            // DB holds Harbor coordinates
 ROMD:5AF0 CD A5 5D         call 5DA5           // BC holds active player's HQ
 ROMD:5AF3 CD 1D 29         call 291D           // A = minimum distance between player's HQ and given Harbor
 ROMD:5AF6 6F               ld   l,a            // L = minimum distance between player's HQ and given Harbor
 ROMD:5AF7 F0 99            ld   a,(ff00+99)
 ROMD:5AF9 BD               cp   l
 ROMD:5AFA 38 09            jr   c,5B05         // End cycle if a closer Harbor location hasn't been stored yet
 ROMD:5AFC 7D               ld   a,l
 ROMD:5AFD E0 99            ld   (ff00+99),a    // L = minimum distance between player's HQ and given closest Harbor
 ROMD:5AFF 7A               ld   a,d
 ROMD:5B00 E0 9A            ld   (ff00+9A),a
 ROMD:5B02 7B               ld   a,e
 ROMD:5B03 E0 9B            ld   (ff00+9B),a    // ($FF9A) holds coordinates of closest Harbor
 ROMD:5B05 E1               pop  hl
 ROMD:5B06 D1               pop  de
 ROMD:5B07 1C               inc  e
 ROMD:5B08 7B               ld   a,e
 ROMD:5B09 FE 64            cp   a,64
 ROMD:5B0B 20 CC            jr   nz,5AD9
 ROMD:5B0D F1               pop  af
 ROMD:5B0E E0 82            ld   (ff00+82),a
 ROMD:5B10 E0 70            ld   (ff00+70),a
 ROMD:5B12 F0 9A            ld   a,(ff00+9A)
 ROMD:5B14 47               ld   b,a
 ROMD:5B15 F0 9B            ld   a,(ff00+9B)
 ROMD:5B17 4F               ld   c,a
 ROMD:5B18 D1               pop  de
 ROMD:5B19 C9               ret                 // BC holds coordinates of closest Harbor
 ROMD:5B1A D5               push de
 ROMD:5B1B CD 93 05         call 0593           // ($0000) = 10
 ROMD:5B1E 3E FF            ld   a,FF
 ROMD:5B20 E0 9A            ld   (ff00+9A),a
 ROMD:5B22 E0 9B            ld   (ff00+9B),a
 ROMD:5B24 E0 9C            ld   (ff00+9C),a    // ($FF9A) to ($FF9C) set to -1
 ROMD:5B26 3E 0C            ld   a,0C
 ROMD:5B28 CD 8D 05         call 058D           // ($4000) = 12, ($FF81) = 12
 ROMD:5B2B CD 9C 5D         call 5D9C           // BC holds inactive player's HQ
 ROMD:5B2E 3E A0            ld   a,A0
 ROMD:5B30 CD E6 08         call 08E6           // HL = $A000 + B + C * 64
 ROMD:5B33 7E               ld   a,(hl)
 ROMD:5B34 E0 99            ld   (ff00+99),a    // ($FF99) holds relevant land mass number for enemy HQ
 ROMD:5B36 0E 00            ld   c,00
 ROMD:5B38 06 00            ld   b,00
 ROMD:5B3A 3E 0C            ld   a,0C           // Loop starts here
 ROMD:5B3C CD 8D 05         call 058D           // ($4000) = 12, ($FF81) = 12
 ROMD:5B3F 3E A0            ld   a,A0
 ROMD:5B41 CD E6 08         call 08E6           // HL = $A000 + B + C * 64
 ROMD:5B44 F0 99            ld   a,(ff00+99)    // A = relevant land mass number for enemy HQ
 ROMD:5B46 BE               cp   (hl)
 ROMD:5B47 20 28            jr   nz,5B71        // End cycle if different land mass
 ROMD:5B49 3E 0D            ld   a,0D
 ROMD:5B4B CD 8D 05         call 058D           // ($4000) = 13, ($FF81) = 13
 ROMD:5B4E 3E A0            ld   a,A0
 ROMD:5B50 CD E6 08         call 08E6           // HL = $A000 + B + C * 64
 ROMD:5B53 7E               ld   a,(hl)
 ROMD:5B54 FE FF            cp   a,FF
 ROMD:5B56 28 19            jr   z,5B71         // End cycle if tile can't be traversed
 ROMD:5B58 C5               push bc
 ROMD:5B59 50               ld   d,b
 ROMD:5B5A 59               ld   e,c
 ROMD:5B5B CD 9C 5D         call 5D9C           // BC holds inactive player's HQ
 ROMD:5B5E CD 1D 29         call 291D           // A = Minimum distance between enemy HQ and given tile
 ROMD:5B61 57               ld   d,a            // D = Minimum distance between enemy HQ and given tile
 ROMD:5B62 C1               pop  bc             // BC holds tile coordinates
 ROMD:5B63 F0 9A            ld   a,(ff00+9A)
 ROMD:5B65 BA               cp   d
 ROMD:5B66 38 09            jr   c,5B71
 ROMD:5B68 7A               ld   a,d
 ROMD:5B69 E0 9A            ld   (ff00+9A),a
 ROMD:5B6B 78               ld   a,b
 ROMD:5B6C E0 9B            ld   (ff00+9B),a
 ROMD:5B6E 79               ld   a,c
 ROMD:5B6F E0 9C            ld   (ff00+9C),a    // ($FF9A) = Minimum distance between enemy HQ and given tile, ($FF9B) 2 byte holds tile coordinates
 ROMD:5B71 04               inc  b
 ROMD:5B72 FA 89 C9         ld   a,(C989)
 ROMD:5B75 B8               cp   b
 ROMD:5B76 20 C2            jr   nz,5B3A
 ROMD:5B78 0C               inc  c
 ROMD:5B79 FA 8A C9         ld   a,(C98A)
 ROMD:5B7C B9               cp   c
 ROMD:5B7D 20 B9            jr   nz,5B38        // Loop checks every tile
 ROMD:5B7F F0 9B            ld   a,(ff00+9B)
 ROMD:5B81 47               ld   b,a
 ROMD:5B82 F0 9C            ld   a,(ff00+9C)
 ROMD:5B84 4F               ld   c,a
 ROMD:5B85 CD 9B 05         call 059B           // ($0000) = 0
 ROMD:5B88 D1               pop  de
 ROMD:5B89 C9               ret                 // BC holds coordinates of traversible tile on enemy HQ's land mass nearest the enemy HQ
 ROMD:5B8A C5               push bc
 ROMD:5B8B D5               push de
 ROMD:5B8C 5F               ld   e,a
 ROMD:5B8D 0E 00            ld   c,00
 ROMD:5B8F CD 0B 09         call 090B
 ROMD:5B92 EA C5 C9         ld   (C9C5),a       // ($C9C5) = Unit Type
 ROMD:5B95 7B               ld   a,e
 ROMD:5B96 0E 07            ld   c,07
 ROMD:5B98 CD 0B 09         call 090B
 ROMD:5B9B EA C6 C9         ld   (C9C6),a       // ($C9C6) = Fuel
 ROMD:5B9E 7B               ld   a,e
 ROMD:5B9F CD 5E 09         call 095E           // BC = unit coordinates
 ROMD:5BA2 78               ld   a,b
 ROMD:5BA3 EA C7 C9         ld   (C9C7),a
 ROMD:5BA6 79               ld   a,c
 ROMD:5BA7 EA C8 C9         ld   (C9C8),a       // ($C9C7) 2 byte holds coordinates
 ROMD:5BAA AF               xor  a
 ROMD:5BAB EA DD C9         ld   (C9DD),a       // ($C9DD) = 0
 ROMD:5BAE EF 0B E0 54                          // WRAM Bank #2 has set 7 done to viable movement tiles, WRAM Bank #5 map has Movement requirements, WRAM Bank #6 map has enemy occupied (bit 1) and ZOC tiles (bit 0) marked
 ROMD:5BB2 D1               pop  de
 ROMD:5BB3 C1               pop  bc
 ROMD:5BB4 C9               ret                 // Movement data set up based on Unit A
 ROMD:5BB5 D5               push de
 ROMD:5BB6 F0 82            ld   a,(ff00+82)
 ROMD:5BB8 F5               push af
 ROMD:5BB9 3E 05            ld   a,05
 ROMD:5BBB E0 82            ld   (ff00+82),a
 ROMD:5BBD E0 70            ld   (ff00+70),a
 ROMD:5BBF 3E 0D            ld   a,0D
 ROMD:5BC1 CD 8D 05         call 058D           // ($4000) = 13, ($FF81) = 13
 ROMD:5BC4 CD 93 05         call 0593           // Sets up stuff
 ROMD:5BC7 CD E7 5D         call 5DE7           // ($C60F) to ($C612) holds: unit x/y coordinate - Movement Power, then unit x/y coordinate + Movement Power, all 4 bytes minimize/maximize to stay within the map
 ROMD:5BCA 11 FF FF         ld   de,FFFF
 ROMD:5BCD 3E FF            ld   a,FF
 ROMD:5BCF E0 99            ld   (ff00+99),a
 ROMD:5BD1 E0 9A            ld   (ff00+9A),a
 ROMD:5BD3 FA 10 C6         ld   a,(C610)
 ROMD:5BD6 4F               ld   c,a
 ROMD:5BD7 FA 0F C6         ld   a,(C60F)       // Loop starts here for new row
 ROMD:5BDA 47               ld   b,a
 ROMD:5BDB CD D7 08         call 08D7           // HL = $D000 table location
 ROMD:5BDE E5               push hl             // Loop starts here if not new row
 ROMD:5BDF 7E               ld   a,(hl)         // A = Movement requirement
 ROMD:5BE0 FE FF            cp   a,FF
 ROMD:5BE2 28 3E            jr   z,5C22         // End cycle if movement to tile isn't possible
 ROMD:5BE4 A7               and  a              // Need to move?
 ROMD:5BE5 20 09            jr   nz,5BF0        // Branch to existing unit check if needing to move
 ROMD:5BE7 FA E0 CC         ld   a,(CCE0)       // A = Unit Status
 ROMD:5BEA CB 47            bit 0,a
 ROMD:5BEC 20 34            jr   nz,5C22        // End cycle if unit is Loaded
 ROMD:5BEE 18 13            jr   5C03           // Skips existing unit check
 ROMD:5BF0 3E 02            ld   a,02
 ROMD:5BF2 E0 82            ld   (ff00+82),a
 ROMD:5BF4 E0 70            ld   (ff00+70),a
 ROMD:5BF6 7E               ld   a,(hl)         // WRAM Bank #2 $D000 table tile information (Unit Type of any unit on the tile)
 ROMD:5BF7 F5               push af
 ROMD:5BF8 3E 05            ld   a,05
 ROMD:5BFA E0 82            ld   (ff00+82),a
 ROMD:5BFC E0 70            ld   (ff00+70),a
 ROMD:5BFE F1               pop  af
 ROMD:5BFF E6 7F            and  a,7F
 ROMD:5C01 20 1F            jr   nz,5C22        // End cycle if unit exists
 ROMD:5C03 C5               push bc
 ROMD:5C04 7C               ld   a,h
 ROMD:5C05 C6 D0            add  a,D0
 ROMD:5C07 67               ld   h,a
 ROMD:5C08 4E               ld   c,(hl)
 ROMD:5C09 7C               ld   a,h
 ROMD:5C0A C6 10            add  a,10
 ROMD:5C0C 67               ld   h,a
 ROMD:5C0D 66               ld   h,(hl)
 ROMD:5C0E 69               ld   l,c            // HL = Movement requirement from destination
 ROMD:5C0F C1               pop  bc
 ROMD:5C10 7D               ld   a,l
 ROMD:5C11 FE FF            cp   a,FF
 ROMD:5C13 28 0D            jr   z,5C22         // End cycle if movement is not happening
 ROMD:5C15 CD CA 29         call 29CA
 ROMD:5C18 38 08            jr   c,5C22         // End cycle if DE < Movement requirement from destination
 ROMD:5C1A 54               ld   d,h
 ROMD:5C1B 5D               ld   e,l            // DE minimized to Movement requirement from destination
 ROMD:5C1C 78               ld   a,b
 ROMD:5C1D E0 99            ld   (ff00+99),a
 ROMD:5C1F 79               ld   a,c
 ROMD:5C20 E0 9A            ld   (ff00+9A),a    // ($FF99) 2 byte updated with BC if: movement viable, DE => Movement requirement from destination
 ROMD:5C22 E1               pop  hl             // HL = $D000 table location
 ROMD:5C23 23               inc  hl
 ROMD:5C24 04               inc  b
 ROMD:5C25 FA 11 C6         ld   a,(C611)
 ROMD:5C28 B8               cp   b
 ROMD:5C29 30 B3            jr   nc,5BDE        // Loops for each column
 ROMD:5C2B 0C               inc  c
 ROMD:5C2C FA 12 C6         ld   a,(C612)
 ROMD:5C2F B9               cp   c
 ROMD:5C30 30 A5            jr   nc,5BD7        // Loops for each row
 ROMD:5C32 F0 99            ld   a,(ff00+99)
 ROMD:5C34 47               ld   b,a
 ROMD:5C35 F0 9A            ld   a,(ff00+9A)
 ROMD:5C37 4F               ld   c,a            // BC = coordinates of destination tile determined by pathfinding for unit to general destination
 ROMD:5C38 CD 9B 05         call 059B           // ($0000) = 0
 ROMD:5C3B F1               pop  af
 ROMD:5C3C E0 82            ld   (ff00+82),a
 ROMD:5C3E E0 70            ld   (ff00+70),a
 ROMD:5C40 D1               pop  de
 ROMD:5C41 C9               ret  
 ROMD:5C42 F0 82            ld   a,(ff00+82)
 ROMD:5C44 F5               push af
 ROMD:5C45 3E 01            ld   a,01
 ROMD:5C47 E0 82            ld   (ff00+82),a
 ROMD:5C49 E0 70            ld   (ff00+70),a    // Map WRAM Bank
 ROMD:5C4B 3E 0C            ld   a,0C           // A = 12
 ROMD:5C4D CD 8D 05         call 058D           // ($4000) = 12, ($FF81) = 12
 ROMD:5C50 CD 93 05         call 0593           // ($0000) = 10
 ROMD:5C53 21 00 A0         ld   hl,A000
 ROMD:5C56 01 80 0D         ld   bc,0D80
 ROMD:5C59 AF               xor  a
 ROMD:5C5A CD 79 3B         call 3B79           // SRAC($A000 ~ $AD7F) = 0
 ROMD:5C5D 3E 01            ld   a,01
 ROMD:5C5F E0 99            ld   (ff00+99),a    // ($FF99) = 1
 ROMD:5C61 21 A3 FF         ld   hl,FFA3
 ROMD:5C64 11 BC 5C         ld   de,5CBC
 ROMD:5C67 CD C0 08         call 08C0           // ($FFA3) 2 byte = $5CBC, HL = $FFA5 (Procedure: ($DE00 + ($FFA2) * 2) 2 byte = BC, ($FFA2) += 1)
 ROMD:5C6A 11 BF 08         ld   de,08BF
 ROMD:5C6D CD C0 08         call 08C0           // ($FFA5) 2 byte = $08BF, HL = $FFA7 (2nd call would be stopped)
 ROMD:5C70 11 C0 5C         ld   de,5CC0
 ROMD:5C73 CD C0 08         call 08C0           // ($FFA7) 2 byte = $5CC0, HL = $FFA9 (Procedure: A = 1 if terrain is Sea or tile is already marked on $A000 table; 0 otherwise; tile marked with ($FF99), ($FF9A) incremented by property)
 ROMD:5C76 11 BF 08         ld   de,08BF
 ROMD:5C79 CD C0 08         call 08C0           // ($FFA9) 2 byte = $08BF, HL = $FFAB (4th call would do nothing)
 ROMD:5C7C 0E 00            ld   c,00
 ROMD:5C7E 06 00            ld   b,00           // Start of big loop
 ROMD:5C80 C5               push bc
 ROMD:5C81 AF               xor  a
 ROMD:5C82 E0 9A            ld   (ff00+9A),a    // ($FF9A) = 0
 ROMD:5C84 CD C0 5C         call 5CC0           // A = 1 if terrain is Sea or tile is already marked on $A000 table; 0 otherwise; for unmarked land, tile marked with ($FF99), ($FF9A) incremented by property
 ROMD:5C87 A7               and  a
 ROMD:5C88 20 14            jr   nz,5C9E        // End cycle on Sea or already marked tiles
 ROMD:5C8A CD 50 08         call 0850           // If the tile is unmarked land, handle connected unmarked land
                                                // Before loop: ($DE00) 2 byte holds BC
												// Surrounding tiles marked accordingly, and have their own surrounding tiles checked too
 ROMD:5C8D F0 9A            ld   a,(ff00+9A)
 ROMD:5C8F A7               and  a
 ROMD:5C90 20 07            jr   nz,5C99        // Skip next 3 lines if set of land has properties
 ROMD:5C92 F0 99            ld   a,(ff00+99)
 ROMD:5C94 CD 06 5D         call 5D06           // Marks all tiles of land mass on $A000 table to -1
 ROMD:5C97 18 05            jr   5C9E           // Entire set of land is set to -1 in the $A000 table if there are no properties
 ROMD:5C99 F0 99            ld   a,(ff00+99)
 ROMD:5C9B 3C               inc  a
 ROMD:5C9C E0 99            ld   (ff00+99),a    // Increments ($FF99) when the current set of land has properties
 ROMD:5C9E C1               pop  bc             // Meetup point
 ROMD:5C9F 04               inc  b
 ROMD:5CA0 FA 89 C9         ld   a,(C989)
 ROMD:5CA3 B8               cp   b
 ROMD:5CA4 20 DA            jr   nz,5C80        // Loop back if Width hasn't been reached
 ROMD:5CA6 0C               inc  c
 ROMD:5CA7 FA 8A C9         ld   a,(C98A)
 ROMD:5CAA B9               cp   c
 ROMD:5CAB 20 D1            jr   nz,5C7E        // Loop back if Height hasn't been reached
 ROMD:5CAD F0 99            ld   a,(ff00+99)
 ROMD:5CAF 3D               dec  a
 ROMD:5CB0 EA 0C C6         ld   (C60C),a       // ($C60C) = Number of sets of land with properties
 ROMD:5CB3 CD 9B 05         call 059B           // ($0000) = 0
 ROMD:5CB6 F1               pop  af
 ROMD:5CB7 E0 82            ld   (ff00+82),a
 ROMD:5CB9 E0 70            ld   (ff00+70),a
 ROMD:5CBB C9               ret                 // ($C60C) = Number of sets of land with properties, SRAC $A000 table establishes sets of land with properties
 ROMD:5CBC CD C5 08         call 08C5           // ($DE00 + ($FFA2) * 2) 2 byte = BC, ($FFA2) += 1
 ROMD:5CBF C9               ret  
 ROMD:5CC0 C5               push bc
 ROMD:5CC1 F0 82            ld   a,(ff00+82)
 ROMD:5CC3 F5               push af
 ROMD:5CC4 3E 01            ld   a,01
 ROMD:5CC6 E0 82            ld   (ff00+82),a
 ROMD:5CC8 E0 70            ld   (ff00+70),a    // Map WRAM bank
 ROMD:5CCA 79               ld   a,c
 ROMD:5CCB 0F               rrca 
 ROMD:5CCC 0F               rrca                // RRCA (RRCA C)
 ROMD:5CCD 6F               ld   l,a
 ROMD:5CCE E6 0F            and  a,0F
 ROMD:5CD0 C6 D0            add  a,D0
 ROMD:5CD2 67               ld   h,a
 ROMD:5CD3 7D               ld   a,l
 ROMD:5CD4 E6 F0            and  a,F0
 ROMD:5CD6 80               add  b
 ROMD:5CD7 6F               ld   l,a            // HL = $D000 + B + C * 64
 ROMD:5CD8 7E               ld   a,(hl)         // A = Terrain
 ROMD:5CD9 E6 3F            and  a,3F
 ROMD:5CDB FE 2A            cp   a,2A
 ROMD:5CDD 28 04            jr   z,5CE3         // Skip next 2 lines if terrain is Beach
 ROMD:5CDF FE 29            cp   a,29
 ROMD:5CE1 30 19            jr   nc,5CFC        // End with A = 1 if terrain is Sea
 ROMD:5CE3 5F               ld   e,a            // E = Terrain
 ROMD:5CE4 7C               ld   a,h
 ROMD:5CE5 C6 D0            add  a,D0
 ROMD:5CE7 67               ld   h,a
 ROMD:5CE8 7E               ld   a,(hl)
 ROMD:5CE9 A7               and  a
 ROMD:5CEA 20 10            jr   nz,5CFC        // End with A = 1 if tile is marked on $A000 table
 ROMD:5CEC F0 99            ld   a,(ff00+99)
 ROMD:5CEE 77               ld   (hl),a         // Tile marked on $A000 table with ($FF99)
 ROMD:5CEF 7B               ld   a,e
 ROMD:5CF0 FE 20            cp   a,20
 ROMD:5CF2 30 04            jr   nc,5CF8
 ROMD:5CF4 21 9A FF         ld   hl,FF9A
 ROMD:5CF7 34               inc  (hl)           // ($FF9A) is incremented by a property tile
 ROMD:5CF8 06 00            ld   b,00
 ROMD:5CFA 18 02            jr   5CFE
 ROMD:5CFC 06 01            ld   b,01
 ROMD:5CFE F1               pop  af
 ROMD:5CFF E0 82            ld   (ff00+82),a
 ROMD:5D01 E0 70            ld   (ff00+70),a
 ROMD:5D03 78               ld   a,b
 ROMD:5D04 C1               pop  bc
 ROMD:5D05 C9               ret                 // A = 1 if terrain is Sea or tile is already marked on $A000 table; 0 otherwise; tile marked with ($FF99), ($FF9A) incremented by property
 ROMD:5D06 C5               push bc
 ROMD:5D07 D5               push de
 ROMD:5D08 5F               ld   e,a
 ROMD:5D09 0E 00            ld   c,00
 ROMD:5D0B 06 00            ld   b,00
 ROMD:5D0D 3E A0            ld   a,A0
 ROMD:5D0F CD E6 08         call 08E6           // HL = $A000 + C * 64
 ROMD:5D12 7E               ld   a,(hl)
 ROMD:5D13 BB               cp   e
 ROMD:5D14 20 03            jr   nz,5D19
 ROMD:5D16 3E FF            ld   a,FF
 ROMD:5D18 77               ld   (hl),a         // Tile is set to -1
 ROMD:5D19 23               inc  hl
 ROMD:5D1A 04               inc  b
 ROMD:5D1B FA 89 C9         ld   a,(C989)
 ROMD:5D1E B8               cp   b
 ROMD:5D1F 20 F1            jr   nz,5D12
 ROMD:5D21 0C               inc  c
 ROMD:5D22 FA 8A C9         ld   a,(C98A)
 ROMD:5D25 B9               cp   c
 ROMD:5D26 20 E3            jr   nz,5D0B        // Loops for entire map
 ROMD:5D28 D1               pop  de
 ROMD:5D29 C1               pop  bc
 ROMD:5D2A C9               ret                 // Marks all tiles of land mass on $A000 table to -1
 ROMD:5D2B C5               push bc
 ROMD:5D2C D5               push de
 ROMD:5D2D CD 93 05         call 0593           // ($0000) = 10
 ROMD:5D30 3E 0C            ld   a,0C
 ROMD:5D32 CD 8D 05         call 058D           // ($4000) = 12, ($FF81) = 12
 ROMD:5D35 3E A0            ld   a,A0
 ROMD:5D37 CD E6 08         call 08E6           // HL = $A000 + B + C * 64
 ROMD:5D3A 7E               ld   a,(hl)
 ROMD:5D3B FE FF            cp   a,FF
 ROMD:5D3D 28 0F            jr   z,5D4E
 ROMD:5D3F 42               ld   b,d
 ROMD:5D40 4B               ld   c,e
 ROMD:5D41 57               ld   d,a
 ROMD:5D42 3E A0            ld   a,A0
 ROMD:5D44 CD E6 08         call 08E6           // HL = $A000 + B + C * 64
 ROMD:5D47 7E               ld   a,(hl)
 ROMD:5D48 BA               cp   d
 ROMD:5D49 20 03            jr   nz,5D4E
 ROMD:5D4B AF               xor  a
 ROMD:5D4C 18 02            jr   5D50
 ROMD:5D4E 3E 01            ld   a,01
 ROMD:5D50 CD 9B 05         call 059B           // ($0000) = 0
 ROMD:5D53 D1               pop  de
 ROMD:5D54 C1               pop  bc
 ROMD:5D55 C9               ret                 // A = 1 if info of BC location on SRAC($A000) table is either -1, or inequal to info of DE location; 0 otherwise
 ROMD:5D56 C5               push bc
 ROMD:5D57 D5               push de
 ROMD:5D58 1E 00            ld   e,00
 ROMD:5D5A 47               ld   b,a
 ROMD:5D5B 0E 00            ld   c,00
 ROMD:5D5D CD 0B 09         call 090B
 ROMD:5D60 57               ld   d,a
 ROMD:5D61 78               ld   a,b
 ROMD:5D62 0E 08            ld   c,08
 ROMD:5D64 CD 0B 09         call 090B
 ROMD:5D67 A7               and  a
 ROMD:5D68 28 12            jr   z,5D7C         // Jump if no Primary Ammo left
 ROMD:5D6A 7A               ld   a,d
 ROMD:5D6B 0E 14            ld   c,14
 ROMD:5D6D EF 12 37 40                          // Primary Weapon Type
 ROMD:5D71 A7               and  a
 ROMD:5D72 28 08            jr   z,5D7C         // Jump if no Primary Weapon
 ROMD:5D74 CD 9E 48         call 489E           // A = Flags (Range Fire, Direct Fire, ?, Sub ATK, Ship ATK, Air ATK, Lite ATK, Armor ATK), H = Max Range, L = Min Range
 ROMD:5D77 CB 77            bit 6,a
 ROMD:5D79 28 01            jr   z,5D7C         // Jump if not Direct Fire
 ROMD:5D7B 5F               ld   e,a
 ROMD:5D7C 78               ld   a,b
 ROMD:5D7D 0E 09            ld   c,09
 ROMD:5D7F CD 0B 09         call 090B
 ROMD:5D82 A7               and  a
 ROMD:5D83 28 13            jr   z,5D98         // Jump if no Secondary Ammo left
 ROMD:5D85 7A               ld   a,d
 ROMD:5D86 0E 16            ld   c,16
 ROMD:5D88 EF 12 37 40                          // Secondary Weapon Type
 ROMD:5D8C A7               and  a
 ROMD:5D8D 28 09            jr   z,5D98         // Jump if no Secondary Weapon
 ROMD:5D8F CD 9E 48         call 489E           // A = Flags (Range Fire, Direct Fire, ?, Sub ATK, Ship ATK, Air ATK, Lite ATK, Armor ATK), H = Max Range, L = Min Range
 ROMD:5D92 CB 77            bit 6,a
 ROMD:5D94 28 02            jr   z,5D98         // Jump if not Direct Fire
 ROMD:5D96 B3               or   e
 ROMD:5D97 5F               ld   e,a
 ROMD:5D98 7B               ld   a,e
 ROMD:5D99 D1               pop  de
 ROMD:5D9A C1               pop  bc
 ROMD:5D9B C9               ret                 // A = weapons flags (Range Fire, Direct Fire, ?, Sub ATK, Ship ATK, Air ATK, Lite ATK, Armor ATK) set by any available weapons with Direct Fire
 ROMD:5D9C FA 33 C6         ld   a,(C633)
 ROMD:5D9F E6 01            and  a,01
 ROMD:5DA1 EE 01            xor  a,01
 ROMD:5DA3 18 05            jr   5DAA           // A = 1 for Red Star, 0 for White Moon
 ROMD:5DA5 FA 33 C6         ld   a,(C633)
 ROMD:5DA8 E6 01            and  a,01
 ROMD:5DAA 87               add  a
 ROMD:5DAB 21 46 C6         ld   hl,C646
 ROMD:5DAE CD BC 29         call 29BC           // HL = $C646 + 2 * active player
 ROMD:5DB1 46               ld   b,(hl)
 ROMD:5DB2 23               inc  hl
 ROMD:5DB3 4E               ld   c,(hl)         // BC hold active player's HQ
 ROMD:5DB4 C9               ret                 // BC hold active player's HQ, or inactive player's HQ if $5D9C is used instead
 ROMD:5DB5 F0 82            ld   a,(ff00+82)
 ROMD:5DB7 F5               push af
 ROMD:5DB8 3E 05            ld   a,05
 ROMD:5DBA E0 82            ld   (ff00+82),a
 ROMD:5DBC E0 70            ld   (ff00+70),a
 ROMD:5DBE 7E               ld   a,(hl)
 ROMD:5DBF FE FF            cp   a,FF
 ROMD:5DC1 28 1B            jr   z,5DDE         // Ends with A = 1 if movement invalid
 ROMD:5DC3 A7               and  a
 ROMD:5DC4 28 0D            jr   z,5DD3         // Check transport for initial space
 ROMD:5DC6 3E 02            ld   a,02
 ROMD:5DC8 E0 82            ld   (ff00+82),a
 ROMD:5DCA E0 70            ld   (ff00+70),a
 ROMD:5DCC 7E               ld   a,(hl)
 ROMD:5DCD E6 7F            and  a,7F
 ROMD:5DCF 20 0D            jr   nz,5DDE        // End with A = 1 if tile already occupied
 ROMD:5DD1 18 07            jr   5DDA
 ROMD:5DD3 FA E0 CC         ld   a,(CCE0)
 ROMD:5DD6 CB 47            bit 0,a
 ROMD:5DD8 20 04            jr   nz,5DDE        // End with A = 1 if unit is being transported
 ROMD:5DDA 26 00            ld   h,00
 ROMD:5DDC 18 02            jr   5DE0
 ROMD:5DDE 26 01            ld   h,01
 ROMD:5DE0 F1               pop  af
 ROMD:5DE1 E0 82            ld   (ff00+82),a
 ROMD:5DE3 E0 70            ld   (ff00+70),a
 ROMD:5DE5 7C               ld   a,h
 ROMD:5DE6 C9               ret                 // A = 0 if ending Movement command on tile is valid, 1 otherwise
 ROMD:5DE7 C5               push bc
 ROMD:5DE8 D5               push de
 ROMD:5DE9 FA DD CC         ld   a,(CCDD)
 ROMD:5DEC 0E 0C            ld   c,0C
 ROMD:5DEE EF 12 37 40                          // A = Movement Power
 ROMD:5DF2 5F               ld   e,a            // E = Movement Power
 ROMD:5DF3 FA DE CC         ld   a,(CCDE)
 ROMD:5DF6 47               ld   b,a
 ROMD:5DF7 FA DF CC         ld   a,(CCDF)
 ROMD:5DFA 4F               ld   c,a            // BC = coordinates
 ROMD:5DFB 78               ld   a,b
 ROMD:5DFC 93               sub  e
 ROMD:5DFD 30 01            jr   nc,5E00
 ROMD:5DFF AF               xor  a
 ROMD:5E00 EA 0F C6         ld   (C60F),a       // ($C60F) = max(0,x coordinate - Movement Power)
 ROMD:5E03 78               ld   a,b
 ROMD:5E04 83               add  e
 ROMD:5E05 21 89 C9         ld   hl,C989
 ROMD:5E08 BE               cp   (hl)
 ROMD:5E09 38 02            jr   c,5E0D
 ROMD:5E0B 7E               ld   a,(hl)
 ROMD:5E0C 3D               dec  a
 ROMD:5E0D EA 11 C6         ld   (C611),a       // ($C611) = min(Width - 1,x coordinate + Movement Power)
 ROMD:5E10 79               ld   a,c
 ROMD:5E11 93               sub  e
 ROMD:5E12 30 01            jr   nc,5E15
 ROMD:5E14 AF               xor  a
 ROMD:5E15 EA 10 C6         ld   (C610),a       // ($C610) = max(0,y coordinate - Movement Power)
 ROMD:5E18 79               ld   a,c
 ROMD:5E19 83               add  e
 ROMD:5E1A 21 8A C9         ld   hl,C98A
 ROMD:5E1D BE               cp   (hl)
 ROMD:5E1E 38 02            jr   c,5E22
 ROMD:5E20 7E               ld   a,(hl)
 ROMD:5E21 3D               dec  a
 ROMD:5E22 EA 12 C6         ld   (C612),a       // ($C612) = min(Height - 1,y coordinate + Movement Power)
 ROMD:5E25 D1               pop  de
 ROMD:5E26 C1               pop  bc
 ROMD:5E27 C9               ret                 // ($C60F) to ($C612) holds: unit x/y coordinate - Movement Power, then unit x/y coordinate + Movement Power, all 4 bytes minimize/maximize to stay within the map
 ROMD:5E28 C5               push bc
 ROMD:5E29 D5               push de
 ROMD:5E2A FA E0 CC         ld   a,(CCE0)
 ROMD:5E2D CB 47            bit 0,a
 ROMD:5E2F 20 36            jr   nz,5E67        // End with A = 0 if unit is being transported
 ROMD:5E31 CD FA 60         call 60FA           // Unit aims for closest available transport
 ROMD:5E34 FE FF            cp   a,FF
 ROMD:5E36 28 2F            jr   z,5E67         // End with A = 0 if no transports are available
 ROMD:5E38 57               ld   d,a
 ROMD:5E39 CD 5E 09         call 095E           // BC = transport candidate's coordinates
 ROMD:5E3C F0 82            ld   a,(ff00+82)
 ROMD:5E3E F5               push af
 ROMD:5E3F 3E 05            ld   a,05
 ROMD:5E41 E0 82            ld   (ff00+82),a
 ROMD:5E43 E0 70            ld   (ff00+70),a
 ROMD:5E45 CD D7 08         call 08D7           // HL = $D000 + B + C * 64
 ROMD:5E48 5E               ld   e,(hl)         // E = Movement requirement for reaching transport candidate
 ROMD:5E49 F1               pop  af
 ROMD:5E4A E0 82            ld   (ff00+82),a
 ROMD:5E4C E0 70            ld   (ff00+70),a
 ROMD:5E4E 7B               ld   a,e
 ROMD:5E4F FE FF            cp   a,FF
 ROMD:5E51 28 14            jr   z,5E67         // End with A = 0 if transport candidate is on inaccessible tile
 ROMD:5E53 FA DE CC         ld   a,(CCDE)
 ROMD:5E56 47               ld   b,a
 ROMD:5E57 FA DF CC         ld   a,(CCDF)
 ROMD:5E5A 4F               ld   c,a            // BC = Coordinates
 ROMD:5E5B EF 0B 01 7B                          // Handles map graphics shift to coordinates BC
 ROMD:5E5F 7A               ld   a,d
 ROMD:5E60 CD 76 46         call 4676           // Handles movement toward transport to move onto
 ROMD:5E63 3E 01            ld   a,01
 ROMD:5E65 18 01            jr   5E68
 ROMD:5E67 AF               xor  a
 ROMD:5E68 D1               pop  de
 ROMD:5E69 C1               pop  bc
 ROMD:5E6A C9               ret                 // Handles movement onto transport including Loading animation if transport is directly available to move onto and unit isn't already being carried, with A = 1; otherwise, A = 0
 ROMD:5E6B C5               push bc
 ROMD:5E6C 0E 0D            ld   c,0D
 ROMD:5E6E EF 12 37 40                          // Transport Capacity
 ROMD:5E72 C1               pop  bc
 ROMD:5E73 A7               and  a
 ROMD:5E74 C9               ret  
 ROMD:5E75 C5               push bc
 ROMD:5E76 57               ld   d,a
 ROMD:5E77 0E 00            ld   c,00
 ROMD:5E79 CD 0B 09         call 090B
 ROMD:5E7C 0E 18            ld   c,18
 ROMD:5E7E EF 12 37 40                          
 ROMD:5E82 FE 03            cp   a,03           // Sea?
 ROMD:5E84 30 32            jr   nc,5EB8
 ROMD:5E86 FE 02            cp   a,02           // Air?
 ROMD:5E88 28 14            jr   z,5E9E
 ROMD:5E8A 7A               ld   a,d
 ROMD:5E8B CD 5E 09         call 095E           // BC holds coordinates
 ROMD:5E8E CD 85 09         call 0985           // A = Terrain Type
 ROMD:5E91 CD 9B 09         call 099B           // (ID version)
 ROMD:5E94 FE 14            cp   a,14           // Water?
 ROMD:5E96 30 1B            jr   nc,5EB3
 ROMD:5E98 FE 10            cp   a,10           // Mountain?
 ROMD:5E9A 28 17            jr   z,5EB3
 ROMD:5E9C 18 12            jr   5EB0           // End with A = 0 if terrain isn't Mountain or water
 ROMD:5E9E 7A               ld   a,d
 ROMD:5E9F CD 5E 09         call 095E           // BC = unit coordinates
 ROMD:5EA2 CD 85 09         call 0985           // A = Terrain type
 ROMD:5EA5 CD 9B 09         call 099B
 ROMD:5EA8 FE 14            cp   a,14           // Water?
 ROMD:5EAA 30 07            jr   nc,5EB3
 ROMD:5EAC FE 10            cp   a,10           // Mountain?
 ROMD:5EAE 28 03            jr   z,5EB3
 ROMD:5EB0 AF               xor  a
 ROMD:5EB1 18 11            jr   5EC4
 ROMD:5EB3 3E 01            ld   a,01
 ROMD:5EB5 A7               and  a
 ROMD:5EB6 18 0C            jr   5EC4
 ROMD:5EB8 7A               ld   a,d
 ROMD:5EB9 CD 5E 09         call 095E           // BC = unit coordinates
 ROMD:5EBC CD 85 09         call 0985           // A = Terrain type
 ROMD:5EBF CD 9B 09         call 099B
 ROMD:5EC2 FE 09            cp   a,09           // Harbor?
 ROMD:5EC4 C1               pop  bc
 ROMD:5EC5 C9               ret                 // Zero Flag set by any terrain other than Mountain or water for non-sea, or by Harbor for sea
 ROMD:5EC6 C5               push bc
 ROMD:5EC7 D5               push de
 ROMD:5EC8 57               ld   d,a
 ROMD:5EC9 0E 03            ld   c,03
 ROMD:5ECB CD 0B 09         call 090B
 ROMD:5ECE E6 30            and  a,30           // Parent Loading Capped/Valid Flags
 ROMD:5ED0 FE 00            cp   a,00
 ROMD:5ED2 28 00            jr   z,5ED4
 ROMD:5ED4 7A               ld   a,d
 ROMD:5ED5 CD 75 5E         call 5E75           // Zero Flag set by any terrain other than Mountain or water for non-sea, or by Harbor for sea
 ROMD:5ED8 20 12            jr   nz,5EEC        // End immediately if Mountain or water for non-sea, non-Harbor for sea
 ROMD:5EDA 7A               ld   a,d
 ROMD:5EDB 0E 03            ld   c,03
 ROMD:5EDD CD 0B 09         call 090B
 ROMD:5EE0 E6 30            and  a,30
 ROMD:5EE2 F6 10            or   a,10           // Parent Loading Valid
 ROMD:5EE4 47               ld   b,a
 ROMD:5EE5 7A               ld   a,d
 ROMD:5EE6 0E 03            ld   c,03
 ROMD:5EE8 EF 12 A1 40                          // Unit's Status updated
 ROMD:5EEC D1               pop  de
 ROMD:5EED C1               pop  bc
 ROMD:5EEE C9               ret                 // Parent Loading Valid flag established for Unit A
 ROMD:5EEF C5               push bc
 ROMD:5EF0 D5               push de
 ROMD:5EF1 F0 82            ld   a,(ff00+82)
 ROMD:5EF3 F5               push af
 ROMD:5EF4 3E 0D            ld   a,0D
 ROMD:5EF6 E0 82            ld   (ff00+82),a
 ROMD:5EF8 E0 70            ld   (ff00+70),a
 ROMD:5EFA FA A0 DE         ld   a,(DEA0)
 ROMD:5EFD CB 47            bit 0,a
 ROMD:5EFF 20 00            jr   nz,5F01        // Pointless jump instruction, what? Would be involving accessing enemy HQ by land.
 ROMD:5F01 06 FF            ld   b,FF
 ROMD:5F03 F1               pop  af
 ROMD:5F04 E0 82            ld   (ff00+82),a
 ROMD:5F06 E0 70            ld   (ff00+70),a
 ROMD:5F08 78               ld   a,b
 ROMD:5F09 D1               pop  de
 ROMD:5F0A C1               pop  bc
 ROMD:5F0B C9               ret                 // Unfinished instruction involving accessing enemy HQ by land
 ROMD:5F0C FA A2 C9         ld   a,(C9A2)
 ROMD:5F0F EA EB C5         ld   (C5EB),a       // ($C5EB) = active player's first unit
 ROMD:5F12 1E 32            ld   e,32
 ROMD:5F14 FA EB C5         ld   a,(C5EB)       // Loop begins here
 ROMD:5F17 CD 2D 65         call 652D           // A = Unit Type if unit can move
 ROMD:5F1A A7               and  a
 ROMD:5F1B 28 13            jr   z,5F30
 ROMD:5F1D CB 3F            srl a
 ROMD:5F1F FE 25            cp   a,25           // Transport Plane
 ROMD:5F21 28 0A            jr   z,5F2D
 ROMD:5F23 FE 2A            cp   a,2A           // Transport Helicopter
 ROMD:5F25 28 06            jr   z,5F2D
 ROMD:5F27 FE 2B            cp   a,2B           // Transport Helicopter+
 ROMD:5F29 28 02            jr   z,5F2D
 ROMD:5F2B 18 03            jr   5F30
 ROMD:5F2D CD 3E 5F         call 5F3E           // Active Unit movement toward inactive player's HQ if reachable and any transport concerns are covered
 ROMD:5F30 FA 94 CA         ld   a,(CA94)
 ROMD:5F33 A7               and  a
 ROMD:5F34 20 07            jr   nz,5F3D        // Ends immediately if either army is victorious
 ROMD:5F36 21 EB C5         ld   hl,C5EB
 ROMD:5F39 34               inc  (hl)
 ROMD:5F3A 1D               dec  e
 ROMD:5F3B 20 D7            jr   nz,5F14
 ROMD:5F3D C9               ret                 // Air Transport movement
 ROMD:5F3E D5               push de
 ROMD:5F3F FA EB C5         ld   a,(C5EB)       // A = Given active unit
 ROMD:5F42 CD 10 45         call 4510           // Coordinates update committal
 ROMD:5F45 CD 74 5F         call 5F74           // Unit Status: bit 4 active if within 5 spaces of HQ, on non-Mountain/water for non-sea, Harbor for Sea, and isn't at Transport Capacity; bit 5 active if within 5 spaces of HQ, on non-Mountain/water for non-sea, Harbor for Sea, and is Transporting at Capacity
 ROMD:5F48 FA E0 CC         ld   a,(CCE0)
 ROMD:5F4B E6 30            and  a,30
 ROMD:5F4D FE 10            cp   a,10
 ROMD:5F4F 28 1A            jr   z,5F6B         // End with A = AND ($CCE0),$30 if Parent Loading Valid
 ROMD:5F51 FE 20            cp   a,20
 ROMD:5F53 28 18            jr   z,5F6D         // Branch for Parent Loading Capped (intent of moving out)
 ROMD:5F55 CD EC 5F         call 5FEC           // BC hold active player's HQ
 ROMD:5F58 FA DD CC         ld   a,(CCDD)       // A = Unit Type
 ROMD:5F5B CD A2 58         call 58A2           // SRAD($A000) table holds total Movement requirements % 16 * 16, SRAD($B000) table holds same / 16
 ROMD:5F5E CD B5 5B         call 5BB5           // BC = coordinates of destination tile determined by pathfinding for unit to general destination
 ROMD:5F61 78               ld   a,b
 ROMD:5F62 FE FF            cp   a,FF
 ROMD:5F64 28 0C            jr   z,5F72         // End immediately if player's HQ is unreachable (with air units, this should never be a problem)
 ROMD:5F66 CD 46 45         call 4546           // Unit shifting update with viable movement momentarily established
 ROMD:5F69 18 07            jr   5F72
 ROMD:5F6B 18 05            jr   5F72
 ROMD:5F6D CD F0 5F         call 5FF0           // Unit A movement toward inactive player's HQ if reachable
 ROMD:5F70 18 00            jr   5F72
 ROMD:5F72 D1               pop  de
 ROMD:5F73 C9               ret                 // Active Unit movement toward inactive player's HQ if reachable and any transport concerns are covered
 ROMD:5F74 C5               push bc
 ROMD:5F75 D5               push de
 ROMD:5F76 FA E0 CC         ld   a,(CCE0)
 ROMD:5F79 E6 30            and  a,30
 ROMD:5F7B FE 00            cp   a,00
 ROMD:5F7D 28 0C            jr   z,5F8B
 ROMD:5F7F FE 10            cp   a,10
 ROMD:5F81 28 29            jr   z,5FAC         // Jump for parent loading valid
 ROMD:5F83 FE 20            cp   a,20
 ROMD:5F85 28 41            jr   z,5FC8
 ROMD:5F87 FE 30            cp   a,30
 ROMD:5F89 28 3D            jr   z,5FC8         // Jump for parent loading capped
 ROMD:5F8B CD A5 5D         call 5DA5           // BC hold active player's HQ
 ROMD:5F8E 50               ld   d,b
 ROMD:5F8F 59               ld   e,c
 ROMD:5F90 FA DE CC         ld   a,(CCDE)
 ROMD:5F93 47               ld   b,a
 ROMD:5F94 FA DF CC         ld   a,(CCDF)
 ROMD:5F97 4F               ld   c,a            // BC = Coordinates
 ROMD:5F98 CD 1D 29         call 291D           // A = space difference (BC and DE hold comparison coordinates)
 ROMD:5F9B FE 06            cp   a,06
 ROMD:5F9D 30 39            jr   nc,5FD8
 ROMD:5F9F FA EB C5         ld   a,(C5EB)
 ROMD:5FA2 CD 75 5E         call 5E75           // Zero Flag set by any terrain other than Mountain or water for non-sea, or by Harbor for sea
 ROMD:5FA5 20 31            jr   nz,5FD8        // End immediately for Mountain or water for non-sea, or non-Harbor for sea
 ROMD:5FA7 06 10            ld   b,10           // Next Call will set Parent Loading Valid flag
 ROMD:5FA9 CD DB 5F         call 5FDB
 ROMD:5FAC FA DD CC         ld   a,(CCDD)       // Meet here for Parent Loading Valid
 ROMD:5FAF 0E 0D            ld   c,0D
 ROMD:5FB1 EF 12 37 40                          // Transport Capacity
 ROMD:5FB5 57               ld   d,a
 ROMD:5FB6 FA EB C5         ld   a,(C5EB)
 ROMD:5FB9 0E 05            ld   c,05
 ROMD:5FBB CD 0B 09         call 090B           // Load count
 ROMD:5FBE BA               cp   d
 ROMD:5FBF 20 17            jr   nz,5FD8        // End immediately if not at capacity
 ROMD:5FC1 06 20            ld   b,20
 ROMD:5FC3 CD DB 5F         call 5FDB           // Set Parent Loading Capped flag
 ROMD:5FC6 18 10            jr   5FD8           // End immediately
 ROMD:5FC8 FA EB C5         ld   a,(C5EB)       // Meet here for Parent Loading Capped
 ROMD:5FCB 0E 05            ld   c,05
 ROMD:5FCD CD 0B 09         call 090B           // Load count
 ROMD:5FD0 A7               and  a
 ROMD:5FD1 20 05            jr   nz,5FD8        // End immediately if any units are loaded
 ROMD:5FD3 06 00            ld   b,00
 ROMD:5FD5 CD DB 5F         call 5FDB           // Clears any Parent Loaded flags for unit
 ROMD:5FD8 D1               pop  de
 ROMD:5FD9 C1               pop  bc
 ROMD:5FDA C9               ret                 // Unit Status: bit 4 active if within 5 spaces of HQ, on non-Mountain/water for non-sea, Harbor for Sea, and isn't at Transport Capacity; bit 5 active if within 5 spaces of HQ, on non-Mountain/water for non-sea, Harbor for Sea, and is Transporting at Capacity
 ROMD:5FDB FA E0 CC         ld   a,(CCE0)
 ROMD:5FDE E6 CF            and  a,CF
 ROMD:5FE0 B0               or   b
 ROMD:5FE1 EA E0 CC         ld   (CCE0),a
 ROMD:5FE4 FA EB C5         ld   a,(C5EB)
 ROMD:5FE7 EF 12 2B 41                          // Unit's stats now holds ($CCDD) to ($CCEC)
 ROMD:5FEB C9               ret  
 ROMD:5FEC CD A5 5D         call 5DA5           // BC hold active player's HQ
 ROMD:5FEF C9               ret  
 ROMD:5FF0 CD 9C 5D         call 5D9C           // BC hold inactive player's HQ
 ROMD:5FF3 FA DD CC         ld   a,(CCDD)       // A = Unit Type
 ROMD:5FF6 CD A2 58         call 58A2           // SRAD($A000) table holds total Movement requirements % 16 * 16, SRAD($B000) table holds same / 16
 ROMD:5FF9 CD B5 5B         call 5BB5           // BC = coordinates of destination tile determined by pathfinding for unit to general destination
 ROMD:5FFC 78               ld   a,b
 ROMD:5FFD FE FF            cp   a,FF
 ROMD:5FFF 28 03            jr   z,6004         // End immediately if inactive player's HQ is unreachable
 ROMD:6001 CD 46 45         call 4546           // Unit shifting update with viable movement momentarily established
 ROMD:6004 C9               ret                 // Unit A movement toward inactive player's HQ if reachable
 ROMD:6005 FA A2 C9         ld   a,(C9A2)
 ROMD:6008 EA EB C5         ld   (C5EB),a       // ($C5EB) = active player's first unit
 ROMD:600B 1E 32            ld   e,32
 ROMD:600D FA EB C5         ld   a,(C5EB)       // Loop begins here
 ROMD:6010 CD 2D 65         call 652D           // A = Unit Type if unit can move
 ROMD:6013 A7               and  a
 ROMD:6014 28 09            jr   z,601F         // End cycle for non-moving unit
 ROMD:6016 CB 3F            srl a
 ROMD:6018 FE 30            cp   a,30           // Lander
 ROMD:601A 20 03            jr   nz,601F        // Ignore following Call if unit isn't Lander
 ROMD:601C CD 2D 60         call 602D           // Active Unit movement toward Beach/Harbor nearest inactive player's HQ if reachable and any transport concerns are covered
 ROMD:601F FA 94 CA         ld   a,(CA94)
 ROMD:6022 A7               and  a
 ROMD:6023 20 07            jr   nz,602C        // Ends immediately if either army is victorious
 ROMD:6025 21 EB C5         ld   hl,C5EB
 ROMD:6028 34               inc  (hl)
 ROMD:6029 1D               dec  e
 ROMD:602A 20 E1            jr   nz,600D
 ROMD:602C C9               ret  
 ROMD:602D D5               push de
 ROMD:602E FA EB C5         ld   a,(C5EB)       // A = Given active unit
 ROMD:6031 CD 10 45         call 4510           // Coordinates update committal
 ROMD:6034 CD 63 60         call 6063           // Unit Status: bit 4 active if within 5 spaces of HQ, on non-Mountain/water for non-sea, Harbor for Sea, and isn't at Transport Capacity; bit 5 active if within 5 spaces of HQ, on non-Mountain/water for non-sea, Harbor for Sea, and is Transporting at Capacity
 ROMD:6037 FA E0 CC         ld   a,(CCE0)
 ROMD:603A E6 30            and  a,30
 ROMD:603C FE 10            cp   a,10
 ROMD:603E 28 1A            jr   z,605A         // End immediately if Parent Loading Valid
 ROMD:6040 FE 20            cp   a,20
 ROMD:6042 28 18            jr   z,605C         // Parent Loading Capacity: move closer to enemy HQ landing location
 ROMD:6044 CD D7 60         call 60D7           // BC = Harbor closest to player's HQ
 ROMD:6047 FA DD CC         ld   a,(CCDD)       // A = Unit Type
 ROMD:604A CD A2 58         call 58A2           // SRAD($A000) table holds total Movement requirements % 16 * 16, SRAD($B000) table holds same / 16
 ROMD:604D CD B5 5B         call 5BB5           // BC = coordinates of destination tile determined by pathfinding for unit to general destination
 ROMD:6050 78               ld   a,b
 ROMD:6051 FE FF            cp   a,FF
 ROMD:6053 28 0C            jr   z,6061         // End immediately if Harbor closest to player's HQ is unreachable
 ROMD:6055 CD 46 45         call 4546           // Unit shifting update with viable movement momentarily established
 ROMD:6058 18 07            jr   6061
 ROMD:605A 18 05            jr   6061
 ROMD:605C CD E0 60         call 60E0           // Movement toward Beach/Harbor nearest enemy HQ if possible
 ROMD:605F 18 00            jr   6061
 ROMD:6061 D1               pop  de
 ROMD:6062 C9               ret                 // Active Unit movement toward Beach/Harbor nearest inactive player's HQ if reachable and any transport concerns are covered
 ROMD:6063 C5               push bc
 ROMD:6064 D5               push de
 ROMD:6065 FA E0 CC         ld   a,(CCE0)
 ROMD:6068 E6 30            and  a,30
 ROMD:606A FE 00            cp   a,00
 ROMD:606C 28 08            jr   z,6076
 ROMD:606E FE 10            cp   a,10
 ROMD:6070 28 25            jr   z,6097
 ROMD:6072 FE 20            cp   a,20
 ROMD:6074 28 3D            jr   z,60B3
 ROMD:6076 CD A5 5D         call 5DA5           // BC hold active player's HQ
 ROMD:6079 50               ld   d,b
 ROMD:607A 59               ld   e,c
 ROMD:607B FA DE CC         ld   a,(CCDE)
 ROMD:607E 47               ld   b,a
 ROMD:607F FA DF CC         ld   a,(CCDF)
 ROMD:6082 4F               ld   c,a            // BC = Coordinates
 ROMD:6083 CD 1D 29         call 291D           // A = space difference (BC and DE hold comparison coordinates)
 ROMD:6086 FE 06            cp   a,06
 ROMD:6088 30 39            jr   nc,60C3
 ROMD:608A FA EB C5         ld   a,(C5EB)
 ROMD:608D CD 75 5E         call 5E75           // Zero Flag set by any terrain other than Mountain or water for non-sea, or by Harbor for sea
 ROMD:6090 20 31            jr   nz,60C3
 ROMD:6092 06 10            ld   b,10
 ROMD:6094 CD C6 60         call 60C6
 ROMD:6097 FA DD CC         ld   a,(CCDD)
 ROMD:609A 0E 0D            ld   c,0D
 ROMD:609C EF 12 37 40                          // Transport Capacity
 ROMD:60A0 57               ld   d,a
 ROMD:60A1 FA EB C5         ld   a,(C5EB)
 ROMD:60A4 0E 05            ld   c,05
 ROMD:60A6 CD 0B 09         call 090B           // Load count
 ROMD:60A9 BA               cp   d
 ROMD:60AA 20 17            jr   nz,60C3
 ROMD:60AC 06 20            ld   b,20
 ROMD:60AE CD C6 60         call 60C6
 ROMD:60B1 18 10            jr   60C3
 ROMD:60B3 FA EB C5         ld   a,(C5EB)
 ROMD:60B6 0E 05            ld   c,05
 ROMD:60B8 CD 0B 09         call 090B           // Load count
 ROMD:60BB A7               and  a
 ROMD:60BC 20 05            jr   nz,60C3
 ROMD:60BE 06 00            ld   b,00
 ROMD:60C0 CD C6 60         call 60C6
 ROMD:60C3 D1               pop  de
 ROMD:60C4 C1               pop  bc
 ROMD:60C5 C9               ret  
 ROMD:60C6 FA E0 CC         ld   a,(CCE0)
 ROMD:60C9 E6 CF            and  a,CF
 ROMD:60CB B0               or   b
 ROMD:60CC EA E0 CC         ld   (CCE0),a
 ROMD:60CF FA EB C5         ld   a,(C5EB)
 ROMD:60D2 EF 12 2B 41                          // Unit's stats now holds ($CCDD) to ($CCEC)
 ROMD:60D6 C9               ret  
 ROMD:60D7 FA 9C DE         ld   a,(DE9C)
 ROMD:60DA 47               ld   b,a
 ROMD:60DB FA 9D DE         ld   a,(DE9D)
 ROMD:60DE 4F               ld   c,a
 ROMD:60DF C9               ret  
 ROMD:60E0 FA 9E DE         ld   a,(DE9E)
 ROMD:60E3 47               ld   b,a
 ROMD:60E4 FA 9F DE         ld   a,(DE9F)
 ROMD:60E7 4F               ld   c,a            // BC = Beach/Harbor tile closest to enemy HQ
 ROMD:60E8 FA DD CC         ld   a,(CCDD)       // A = Unit Type
 ROMD:60EB CD A2 58         call 58A2           // SRAD($A000) table holds total Movement requirements % 16 * 16, SRAD($B000) table holds same / 16
 ROMD:60EE CD B5 5B         call 5BB5           // BC = coordinates of destination tile determined by pathfinding for unit to general destination
 ROMD:60F1 78               ld   a,b
 ROMD:60F2 FE FF            cp   a,FF
 ROMD:60F4 28 03            jr   z,60F9         // End immediately if Beach/Harbor tile closest to enemy HQ is unreachable
 ROMD:60F6 CD 46 45         call 4546           // Unit shifting update with viable movement momentarily established
 ROMD:60F9 C9               ret                 // Movement toward Beach/Harbor nearest enemy HQ if possible
 ROMD:60FA C5               push bc
 ROMD:60FB D5               push de
 ROMD:60FC 3E FF            ld   a,FF
 ROMD:60FE E0 9C            ld   (ff00+9C),a
 ROMD:6100 E0 9D            ld   (ff00+9D),a
 ROMD:6102 FA EB C5         ld   a,(C5EB)
 ROMD:6105 0E 00            ld   c,00
 ROMD:6107 CD 0B 09         call 090B           // Unit Type
 ROMD:610A E0 9A            ld   (ff00+9A),a
 ROMD:610C FA A2 C9         ld   a,(C9A2)
 ROMD:610F E0 99            ld   (ff00+99),a    // ($FF99) = active player's first unit
 ROMD:6111 1E 32            ld   e,32
 ROMD:6113 D5               push de             // Loop begins here
 ROMD:6114 F0 99            ld   a,(ff00+99)
 ROMD:6116 0E 00            ld   c,00
 ROMD:6118 CD 0B 09         call 090B           // Unit Type
 ROMD:611B A7               and  a
 ROMD:611C 28 57            jr   z,6175         // Ends cycle if secondary unit doesn't exist
 ROMD:611E E0 9B            ld   (ff00+9B),a
 ROMD:6120 F0 99            ld   a,(ff00+99)
 ROMD:6122 0E 03            ld   c,03
 ROMD:6124 CD 0B 09         call 090B           // Status
 ROMD:6127 CB 47            bit 0,a
 ROMD:6129 20 4A            jr   nz,6175
 ROMD:612B CB 4F            bit 1,a
 ROMD:612D 20 46            jr   nz,6175        // Ends cycle if secondary unit is Loaded or in Reserve
 ROMD:612F E6 30            and  a,30
 ROMD:6131 FE 10            cp   a,10
 ROMD:6133 20 40            jr   nz,6175        // Ends cycle if secondary unit is unable to do Loading
 ROMD:6135 F0 9A            ld   a,(ff00+9A)
 ROMD:6137 47               ld   b,a
 ROMD:6138 F0 9B            ld   a,(ff00+9B)
 ROMD:613A EF 12 29 43                          // If secondary unit can Load, Z flag depends on primary unit's Carried Type being Carrying type
 ROMD:613E 20 35            jr   nz,6175        // End cycle if Carried Type isn't accepted
 ROMD:6140 F0 9B            ld   a,(ff00+9B)
 ROMD:6142 0E 0D            ld   c,0D
 ROMD:6144 EF 12 37 40                          // Transport Capacity
 ROMD:6148 47               ld   b,a
 ROMD:6149 F0 99            ld   a,(ff00+99)
 ROMD:614B 0E 05            ld   c,05
 ROMD:614D CD 0B 09         call 090B           // Load count
 ROMD:6150 B8               cp   b
 ROMD:6151 28 22            jr   z,6175         // Ends cycle if secondary unit is at capacity
 ROMD:6153 FA EB C5         ld   a,(C5EB)
 ROMD:6156 CD 5E 09         call 095E           // BC = unit coordinates
 ROMD:6159 50               ld   d,b
 ROMD:615A 59               ld   e,c
 ROMD:615B F0 99            ld   a,(ff00+99)
 ROMD:615D CD 5E 09         call 095E           // BC = unit coordinates
 ROMD:6160 CD 2B 5D         call 5D2B           // A = 1 if transport parent and child aren't on the same land mass; 0 otherwise
 ROMD:6163 A7               and  a
 ROMD:6164 20 0F            jr   nz,6175        // End cycle if units are on different land masses
 ROMD:6166 CD 1D 29         call 291D           // A = space difference (BC and DE hold comparison coordinates)
 ROMD:6169 21 9C FF         ld   hl,FF9C
 ROMD:616C BE               cp   (hl)
 ROMD:616D 30 06            jr   nc,6175
 ROMD:616F E0 9C            ld   (ff00+9C),a
 ROMD:6171 F0 99            ld   a,(ff00+99)
 ROMD:6173 E0 9D            ld   (ff00+9D),a    // Primary unit aims for closest available transport
 ROMD:6175 D1               pop  de
 ROMD:6176 F0 99            ld   a,(ff00+99)
 ROMD:6178 3C               inc  a
 ROMD:6179 E0 99            ld   (ff00+99),a
 ROMD:617B 1D               dec  e
 ROMD:617C 20 95            jr   nz,6113
 ROMD:617E F0 9D            ld   a,(ff00+9D)
 ROMD:6180 D1               pop  de
 ROMD:6181 C1               pop  bc
 ROMD:6182 C9               ret  
 ROMD:6183 F0 82            ld   a,(ff00+82)
 ROMD:6185 F5               push af
 ROMD:6186 3E 02            ld   a,02
 ROMD:6188 E0 82            ld   (ff00+82),a
 ROMD:618A E0 70            ld   (ff00+70),a
 ROMD:618C FA 9A DE         ld   a,(DE9A)
 ROMD:618F FE FF            cp   a,FF
 ROMD:6191 CA 2F 62         jp   z,622F         // End if no River tiles along the way
 ROMD:6194 3E FF            ld   a,FF
 ROMD:6196 EA 21 C0         ld   (C021),a
 ROMD:6199 EA 22 C0         ld   (C022),a
 ROMD:619C FA A2 C9         ld   a,(C9A2)
 ROMD:619F 57               ld   d,a            // D = active player's first unit
 ROMD:61A0 1E 32            ld   e,32
 ROMD:61A2 7A               ld   a,d            // Loop begins here
 ROMD:61A3 CD 2D 65         call 652D           // A = Unit Type if unit can move
 ROMD:61A6 A7               and  a
 ROMD:61A7 28 30            jr   z,61D9         // End cycle if unit can't move
 ROMD:61A9 CB 3F            srl a
 ROMD:61AB FE 04            cp   a,04
 ROMD:61AD 20 2A            jr   nz,61D9        // End cycle if unit isn't Work Car
 ROMD:61AF 7A               ld   a,d
 ROMD:61B0 0E 08            ld   c,08
 ROMD:61B2 CD 0B 09         call 090B
 ROMD:61B5 FE 02            cp   a,02
 ROMD:61B7 38 20            jr   c,61D9         // End cycle if Work Car's Materials are insufficient for building Bridge
 ROMD:61B9 7A               ld   a,d
 ROMD:61BA CD 5E 09         call 095E           // BC = Work Car's Coordinates
 ROMD:61BD D5               push de
 ROMD:61BE FA 9A DE         ld   a,(DE9A)
 ROMD:61C1 57               ld   d,a
 ROMD:61C2 FA 9B DE         ld   a,(DE9B)
 ROMD:61C5 5F               ld   e,a
 ROMD:61C6 CD 1D 29         call 291D           // A = Space difference between Work Car and River
 ROMD:61C9 D1               pop  de             // D = Unit #
 ROMD:61CA 4F               ld   c,a            // C = Space difference
 ROMD:61CB FA 21 C0         ld   a,(C021)
 ROMD:61CE B9               cp   c              // Old - New
 ROMD:61CF 38 08            jr   c,61D9
 ROMD:61D1 79               ld   a,c
 ROMD:61D2 EA 21 C0         ld   (C021),a
 ROMD:61D5 7A               ld   a,d
 ROMD:61D6 EA 22 C0         ld   (C022),a
 ROMD:61D9 14               inc  d
 ROMD:61DA 1D               dec  e
 ROMD:61DB 20 C5            jr   nz,61A2        // Loop here; end result is ($C022) is nearest Work Car (newest unit wins tiebreaker), ($C021) is distance from blocking River
 ROMD:61DD FA 22 C0         ld   a,(C022)
 ROMD:61E0 FE FF            cp   a,FF
 ROMD:61E2 28 4B            jr   z,622F         // End if no Work Cars available
 ROMD:61E4 CD 63 65         call 6563           // ($C9D8) set to A; ($CCDD) to ($CD08) hold stuff based on A; ($C9D9) 2 byte holds unit's coordinates; ($C613) = 1; Empties: ($C9DD), ($C9DE), ($C9E5), and ($C5EC); set ($C5ED) to ($C5F1) to -1; handles WRA5 and WRA6 movement checking
 ROMD:61E7 FA 9A DE         ld   a,(DE9A)
 ROMD:61EA 47               ld   b,a
 ROMD:61EB FA 9B DE         ld   a,(DE9B)
 ROMD:61EE 4F               ld   c,a
 ROMD:61EF 3E 08            ld   a,08           // Work Car (for Movement Type), nearest River tile coordinates
 ROMD:61F1 CD A2 58         call 58A2           // $A000 table holds total Movement requirements % 16 * 16, $B000 table holds same / 16
 ROMD:61F4 CD B5 5B         call 5BB5           // BC = coordinates of destination tile determined by pathfinding for Work Car to nearest River tile
 ROMD:61F7 78               ld   a,b
 ROMD:61F8 FE FF            cp   a,FF
 ROMD:61FA 28 33            jr   z,622F         // End immediately if movement isn't happening
 ROMD:61FC 78               ld   a,b
 ROMD:61FD EA ED C5         ld   (C5ED),a
 ROMD:6200 79               ld   a,c
 ROMD:6201 EA EE C5         ld   (C5EE),a       // ($C5ED) 2 byte holds destination tile
 ROMD:6204 FA 9A DE         ld   a,(DE9A)
 ROMD:6207 EA F0 C5         ld   (C5F0),a
 ROMD:620A 57               ld   d,a
 ROMD:620B FA 9B DE         ld   a,(DE9B)
 ROMD:620E EA F1 C5         ld   (C5F1),a       // ($C5F0) holds nearest River tile coordinates
 ROMD:6211 5F               ld   e,a            // DE holds nearest River tile coordinates
 ROMD:6212 CD 1D 29         call 291D           // A = space difference (BC and DE hold comparison coordinates)
 ROMD:6215 FE 01            cp   a,01
 ROMD:6217 20 0E            jr   nz,6227        // Just movement if not adjacent
 ROMD:6219 3E 04            ld   a,04
 ROMD:621B EA EC C5         ld   (C5EC),a       // Bridge
 ROMD:621E CD 07 44         call 4407           // Handles full movement and action of AI unit based on provided information
 ROMD:6221 CD 70 68         call 6870           // WRA2($DE9A) holds: first River along the way coordinates, Lander start coordinates, Lander end coordinates, flags for opponent's HQ reachable (this is clearly to update if any further Bridge building is needed)
 ROMD:6224 C3 8C 61         jp   618C
 ROMD:6227 3E 00            ld   a,00
 ROMD:6229 EA EC C5         ld   (C5EC),a       // Sound #18
 ROMD:622C CD 07 44         call 4407           // Handles full movement and action of AI unit based on provided information
 ROMD:622F F1               pop  af
 ROMD:6230 E0 82            ld   (ff00+82),a
 ROMD:6232 E0 70            ld   (ff00+70),a
 ROMD:6234 C9               ret  

 ROMD:6235 21 3C 62         ld   hl,623C
 ROMD:6238 CD 72 64         call 6472           // Units within list indicated by HL given instructions to manage movement procedures
 ROMD:623B C9               ret  

 ROMD:623C 01 02 03 00

 ROMD:6240 D5               push de
 ROMD:6241 CD 4F 4C         call 4C4F           // BC holds coordinates of lowest Property Strength of viable capture property in movement range--tiebreaker of Movement requirement, then N/W location
 ROMD:6244 78               ld   a,b
 ROMD:6245 FE FF            cp   a,FF
 ROMD:6247 20 58            jr   nz,62A1        // Property capture within range is top priority
 ROMD:6249 FA D8 C9         ld   a,(C9D8)
 ROMD:624C EA EB C5         ld   (C5EB),a
 ROMD:624F CD 28 5E         call 5E28           // Handles movement onto transport including Loading animation if transport is directly available to move onto and unit isn't already being carried, with A = 1; otherwise, A = 0
 ROMD:6252 FE 00            cp   a,00
 ROMD:6254 20 55            jr   nz,62AB        // End immediately if Loaded or will get transported
 ROMD:6256 CD CA 4C         call 4CCA           // BC = coordinates of closest allowed capture property on land mass--tiebreaker of location
 ROMD:6259 78               ld   a,b
 ROMD:625A FE FF            cp   a,FF
 ROMD:625C 28 4B            jr   z,62A9         // End immediately if no reachable property
 ROMD:625E 50               ld   d,b
 ROMD:625F 59               ld   e,c            // DE = coordinates of closest reachable property
 ROMD:6260 FA DD CC         ld   a,(CCDD)       // A = Unit Type
 ROMD:6263 CD A2 58         call 58A2           // SRAD($A000) table holds total Movement requirements % 16 * 16, SRAD($B000) table holds same / 16
 ROMD:6266 CD B5 5B         call 5BB5           // BC = coordinates of destination tile determined by pathfinding for unit to general destination
 ROMD:6269 78               ld   a,b
 ROMD:626A FE FF            cp   a,FF
 ROMD:626C 28 3B            jr   z,62A9         // End immediately if movement is still rendered impossible
 ROMD:626E C5               push bc
 ROMD:626F 42               ld   b,d
 ROMD:6270 4B               ld   c,e            // BC = coordinates of closest reachable property
 ROMD:6271 CD E1 4B         call 4BE1           // Shuts off Viable Capture Flags for any properties within 3 spaces of BC
 ROMD:6274 C1               pop  bc
 ROMD:6275 78               ld   a,b
 ROMD:6276 EA ED C5         ld   (C5ED),a
 ROMD:6279 79               ld   a,c
 ROMD:627A EA EE C5         ld   (C5EE),a       // Coordinates of desired action (move closer to target property)
 ROMD:627D 3E 00            ld   a,00
 ROMD:627F EA EC C5         ld   (C5EC),a       // Sound #18
 ROMD:6282 CD 49 47         call 4749           // A holds target that will take the highest "efficient" damage; -1 if there are no targets that will deal excess counterdamage or take no damage
 ROMD:6285 FE FF            cp   a,FF
 ROMD:6287 28 13            jr   z,629C         // Skips combat request if no "efficient" damage is available
 ROMD:6289 EA EF C5         ld   (C5EF),a
 ROMD:628C CD 5E 09         call 095E           // BC = unit coordinates
 ROMD:628F 78               ld   a,b
 ROMD:6290 EA F0 C5         ld   (C5F0),a
 ROMD:6293 79               ld   a,c
 ROMD:6294 EA F1 C5         ld   (C5F1),a
 ROMD:6297 3E 03            ld   a,03
 ROMD:6299 EA EC C5         ld   (C5EC),a       // Combat, destination, target, target's coordinates
 ROMD:629C CD 07 44         call 4407           // Handles full movement and action of AI unit based on provided information
 ROMD:629F 18 0A            jr   62AB
 ROMD:62A1 CD E1 4B         call 4BE1           // Shuts off Viable Capture Flags for any properties within 3 spaces of BC
 ROMD:62A4 CD 54 46         call 4654           // Selected (AI) unit captures property at BC
 ROMD:62A7 18 02            jr   62AB
 ROMD:62A9 18 00            jr   62AB
 ROMD:62AB D1               pop  de
 ROMD:62AC C9               ret  

 ROMD:62AD 21 B4 62         ld   hl,62B4
 ROMD:62B0 CD 72 64         call 6472           // Units within list indicated by HL given instructions to manage movement procedures
 ROMD:62B3 C9               ret  

 ROMD:62B4 04 00

 ROMD:62B6 C5               push bc
 ROMD:62B7 D5               push de
 ROMD:62B8 CD 3A 4D         call 4D3A           // BC holds coordinates of lowest Property Strength of viable development property in movement range--tiebreaker of Movement requirement, then N/W location
 ROMD:62BB 78               ld   a,b
 ROMD:62BC FE FF            cp   a,FF
 ROMD:62BE 20 5D            jr   nz,631D        // Property development is top priority
 ROMD:62C0 FA D8 C9         ld   a,(C9D8)
 ROMD:62C3 EA EB C5         ld   (C5EB),a
 ROMD:62C6 CD 28 5E         call 5E28           // Handles movement onto transport including Loading animation if transport is directly available to move onto and unit isn't already being carried, with A = 1; otherwise, A = 0
 ROMD:62C9 FE 00            cp   a,00
 ROMD:62CB 20 55            jr   nz,6322        // End immediately if transport is happening
 ROMD:62CD FA D9 C9         ld   a,(C9D9)
 ROMD:62D0 47               ld   b,a
 ROMD:62D1 FA DA C9         ld   a,(C9DA)
 ROMD:62D4 4F               ld   c,a
 ROMD:62D5 FA DD CC         ld   a,(CCDD)       // A = Unit Type
 ROMD:62D8 CD A2 58         call 58A2           // SRAD($A000) table holds total Movement requirements % 16 * 16, SRAD($B000) table holds same / 16
 ROMD:62DB CD 99 4D         call 4D99           // BC = coordinates of "closest" allowed capture property that is reachable--tiebreaker of location (BUG: rounds down by every 16 spaces)
 ROMD:62DE 78               ld   a,b
 ROMD:62DF FE FF            cp   a,FF
 ROMD:62E1 28 3F            jr   z,6322         // End immediately if no Develop candidate location is reachable
 ROMD:62E3 FA DD CC         ld   a,(CCDD)       // A = Unit Type
 ROMD:62E6 CD A2 58         call 58A2           // SRAD($A000) table holds total Movement requirements % 16 * 16, SRAD($B000) table holds same / 16
 ROMD:62E9 CD B5 5B         call 5BB5           // BC = coordinates of destination tile determined by pathfinding for unit to general destination
 ROMD:62EC 78               ld   a,b
 ROMD:62ED FE FF            cp   a,FF
 ROMD:62EF 28 31            jr   z,6322         // End immediately if movement is rendered impossible
 ROMD:62F1 78               ld   a,b
 ROMD:62F2 EA ED C5         ld   (C5ED),a
 ROMD:62F5 79               ld   a,c
 ROMD:62F6 EA EE C5         ld   (C5EE),a       // Current Day destination
 ROMD:62F9 3E 00            ld   a,00
 ROMD:62FB EA EC C5         ld   (C5EC),a       // Sound #18
 ROMD:62FE CD 49 47         call 4749           // A holds target that will take the highest "efficient" damage; -1 if there are no targets that will deal excess counterdamage or take no damage
 ROMD:6301 FE FF            cp   a,FF
 ROMD:6303 28 13            jr   z,6318         // Branches if no "efficient" damage is available
 ROMD:6305 EA EF C5         ld   (C5EF),a
 ROMD:6308 CD 5E 09         call 095E           // BC = unit coordinates
 ROMD:630B 78               ld   a,b
 ROMD:630C EA F0 C5         ld   (C5F0),a
 ROMD:630F 79               ld   a,c
 ROMD:6310 EA F1 C5         ld   (C5F1),a
 ROMD:6313 3E 03            ld   a,03
 ROMD:6315 EA EC C5         ld   (C5EC),a       // Combat, destination, target, target's coordinates
 ROMD:6318 CD 07 44         call 4407           // Handles full movement and action of AI unit based on provided information
 ROMD:631B 18 05            jr   6322
 ROMD:631D CD 65 46         call 4665           // Selected (AI) unit Develops property at BC
 ROMD:6320 18 00            jr   6322
 ROMD:6322 D1               pop  de
 ROMD:6323 C1               pop  bc
 ROMD:6324 C9               ret  

 ROMD:6325 21 2C 63         ld   hl,632C
 ROMD:6328 CD 72 64         call 6472           // Units within list indicated by HL given instructions to manage movement procedures
 ROMD:632B C9               ret  

 ROMD:632C 23 00                                // Bomber

 ROMD:632E C5               push bc
 ROMD:632F D5               push de
 ROMD:6330 FA E5 CC         ld   a,(CCE5)
 ROMD:6333 A7               and  a
 ROMD:6334 28 56            jr   z,638C         // End immediately if no Primary Ammo left
 ROMD:6336 CD 8F 63         call 638F           // BC = Destination within movement range for Bombing based on enemy property count; tiebreaker S/E
 ROMD:6339 78               ld   a,b
 ROMD:633A FE FF            cp   a,FF
 ROMD:633C 20 45            jr   nz,6383        // Branch to Bomb check if destination exists
 ROMD:633E CD E5 63         call 63E5           // BC = Destination overall for Bombing based on enemy property count; tiebreaker S/E
 ROMD:6341 78               ld   a,b
 ROMD:6342 FE FF            cp   a,FF
 ROMD:6344 28 46            jr   z,638C         // Immediate ending if none
 ROMD:6346 50               ld   d,b
 ROMD:6347 59               ld   e,c
 ROMD:6348 FA DD CC         ld   a,(CCDD)       // A = Unit Type
 ROMD:634B CD A2 58         call 58A2           // SRAD($A000) table holds total Movement requirements % 16 * 16, SRAD($B000) table holds same / 16
 ROMD:634E CD B5 5B         call 5BB5           // BC = coordinates of destination tile determined by pathfinding for unit to general destination
 ROMD:6351 78               ld   a,b
 ROMD:6352 FE FF            cp   a,FF
 ROMD:6354 28 36            jr   z,638C         // End immediately if not reachable (shouldn't ever happen)
 ROMD:6356 78               ld   a,b
 ROMD:6357 EA ED C5         ld   (C5ED),a
 ROMD:635A 79               ld   a,c
 ROMD:635B EA EE C5         ld   (C5EE),a       // Current Day destination
 ROMD:635E C5               push bc
 ROMD:635F F0 82            ld   a,(ff00+82)
 ROMD:6361 F5               push af
 ROMD:6362 3E 05            ld   a,05
 ROMD:6364 E0 82            ld   (ff00+82),a
 ROMD:6366 E0 70            ld   (ff00+70),a
 ROMD:6368 42               ld   b,d
 ROMD:6369 4B               ld   c,e            // Overall Destination
 ROMD:636A CD D7 08         call 08D7           // HL = $D000 + B + C * 64
 ROMD:636D 56               ld   d,(hl)
 ROMD:636E F1               pop  af
 ROMD:636F E0 82            ld   (ff00+82),a
 ROMD:6371 E0 70            ld   (ff00+70),a
 ROMD:6373 C1               pop  bc             // Current Day destination
 ROMD:6374 7A               ld   a,d
 ROMD:6375 FE FF            cp   a,FF
 ROMD:6377 20 0A            jr   nz,6383        // Branch to Bomb check if destination exists
 ROMD:6379 3E 00            ld   a,00
 ROMD:637B EA EC C5         ld   (C5EC),a       // Sound #18
 ROMD:637E CD 07 44         call 4407           // Handles full movement and action of AI unit based on provided information
 ROMD:6381 18 09            jr   638C
 ROMD:6383 CD 43 64         call 6443           // A = number of enemy properties at location BC and surrounding tiles
 ROMD:6386 A7               and  a
 ROMD:6387 28 F0            jr   z,6379
 ROMD:6389 CD 8B 46         call 468B           // Selected (AI) unit Bombs at BC
 ROMD:638C D1               pop  de
 ROMD:638D C1               pop  bc
 ROMD:638E C9               ret  
 ROMD:638F D5               push de
 ROMD:6390 F0 82            ld   a,(ff00+82)
 ROMD:6392 F5               push af
 ROMD:6393 3E FF            ld   a,FF
 ROMD:6395 E0 99            ld   (ff00+99),a
 ROMD:6397 E0 9A            ld   (ff00+9A),a
 ROMD:6399 AF               xor  a
 ROMD:639A E0 9B            ld   (ff00+9B),a
 ROMD:639C CD E7 5D         call 5DE7           // ($C60F) to ($C612) holds: unit x/y coordinate - Movement Power, then unit x/y coordinate + Movement Power, all 4 bytes minimize/maximize to stay within the map
 ROMD:639F FA 10 C6         ld   a,(C610)
 ROMD:63A2 4F               ld   c,a
 ROMD:63A3 FA 0F C6         ld   a,(C60F)       // Loop begins here or 3 lines later
 ROMD:63A6 47               ld   b,a
 ROMD:63A7 CD D7 08         call 08D7           // HL = $D000 + B + C * 64
 ROMD:63AA E5               push hl
 ROMD:63AB E5               push hl
 ROMD:63AC CD B5 5D         call 5DB5           // A = 0 if ending Movement command on tile is valid, 1 otherwise
 ROMD:63AF E1               pop  hl
 ROMD:63B0 A7               and  a
 ROMD:63B1 20 15            jr   nz,63C8        // End cycle if Movement command is invalid
 ROMD:63B3 CD 43 64         call 6443           // A = number of enemy properties at location and surrounding tiles
 ROMD:63B6 FE 02            cp   a,02
 ROMD:63B8 38 0E            jr   c,63C8         // End cycle if 0 or 1 Property
 ROMD:63BA 21 9B FF         ld   hl,FF9B
 ROMD:63BD BE               cp   (hl)           // New - Old
 ROMD:63BE 38 08            jr   c,63C8         // End cycle if Old > New
 ROMD:63C0 E0 9B            ld   (ff00+9B),a
 ROMD:63C2 78               ld   a,b
 ROMD:63C3 E0 99            ld   (ff00+99),a
 ROMD:63C5 79               ld   a,c
 ROMD:63C6 E0 9A            ld   (ff00+9A),a
 ROMD:63C8 E1               pop  hl
 ROMD:63C9 23               inc  hl
 ROMD:63CA 04               inc  b
 ROMD:63CB FA 11 C6         ld   a,(C611)       // X comparison
 ROMD:63CE B8               cp   b
 ROMD:63CF 30 D9            jr   nc,63AA
 ROMD:63D1 0C               inc  c
 ROMD:63D2 FA 12 C6         ld   a,(C612)       // Y comparison
 ROMD:63D5 B9               cp   c
 ROMD:63D6 30 CB            jr   nc,63A3
 ROMD:63D8 F0 99            ld   a,(ff00+99)
 ROMD:63DA 47               ld   b,a
 ROMD:63DB F0 9A            ld   a,(ff00+9A)
 ROMD:63DD 4F               ld   c,a
 ROMD:63DE F1               pop  af
 ROMD:63DF E0 82            ld   (ff00+82),a
 ROMD:63E1 E0 70            ld   (ff00+70),a
 ROMD:63E3 D1               pop  de
 ROMD:63E4 C9               ret                 // BC = Destination for Bombing based on enemy property count; tiebreaker S/E
 ROMD:63E5 D5               push de
 ROMD:63E6 F0 82            ld   a,(ff00+82)
 ROMD:63E8 F5               push af
 ROMD:63E9 3E 01            ld   a,01
 ROMD:63EB E0 82            ld   (ff00+82),a
 ROMD:63ED E0 70            ld   (ff00+70),a
 ROMD:63EF 3E FF            ld   a,FF
 ROMD:63F1 E0 99            ld   (ff00+99),a
 ROMD:63F3 E0 9A            ld   (ff00+9A),a
 ROMD:63F5 AF               xor  a
 ROMD:63F6 E0 9B            ld   (ff00+9B),a
 ROMD:63F8 FA DE CC         ld   a,(CCDE)
 ROMD:63FB 57               ld   d,a
 ROMD:63FC FA DF CC         ld   a,(CCDF)
 ROMD:63FF 5F               ld   e,a            // DE = Coordinates
 ROMD:6400 AF               xor  a
 ROMD:6401 E0 9D            ld   (ff00+9D),a
 ROMD:6403 21 81 DD         ld   hl,DD81
 ROMD:6406 2A               ldi  a,(hl)         // Loop begins here
 ROMD:6407 46               ld   b,(hl)
 ROMD:6408 23               inc  hl
 ROMD:6409 4E               ld   c,(hl)
 ROMD:640A 23               inc  hl
 ROMD:640B E5               push hl
 ROMD:640C FE FF            cp   a,FF
 ROMD:640E 28 1C            jr   z,642C
 ROMD:6410 CD 85 09         call 0985           // A = Terrain type
 ROMD:6413 EF 0B F7 7C                          // A = 0 for owner's turn, 1 for opponent's turn, 2 for Neutral property, or 3 for non-property tile
 ROMD:6417 FE 01            cp   a,01
 ROMD:6419 20 11            jr   nz,642C
 ROMD:641B CD 43 64         call 6443           // A = number of enemy properties at location and surrounding tiles
 ROMD:641E 21 9B FF         ld   hl,FF9B
 ROMD:6421 BE               cp   (hl)           // New - Old
 ROMD:6422 38 08            jr   c,642C         // End cycle if not surrounded by more or equal enemy properties
 ROMD:6424 E0 9B            ld   (ff00+9B),a
 ROMD:6426 78               ld   a,b
 ROMD:6427 E0 99            ld   (ff00+99),a
 ROMD:6429 79               ld   a,c
 ROMD:642A E0 9A            ld   (ff00+9A),a
 ROMD:642C E1               pop  hl
 ROMD:642D F0 9D            ld   a,(ff00+9D)
 ROMD:642F 3C               inc  a
 ROMD:6430 E0 9D            ld   (ff00+9D),a
 ROMD:6432 FE 64            cp   a,64
 ROMD:6434 20 D0            jr   nz,6406        // Loops for all 100 properties
 ROMD:6436 F0 99            ld   a,(ff00+99)
 ROMD:6438 47               ld   b,a
 ROMD:6439 F0 9A            ld   a,(ff00+9A)
 ROMD:643B 4F               ld   c,a
 ROMD:643C F1               pop  af
 ROMD:643D E0 82            ld   (ff00+82),a
 ROMD:643F E0 70            ld   (ff00+70),a
 ROMD:6441 D1               pop  de
 ROMD:6442 C9               ret  
 ROMD:6443 C5               push bc
 ROMD:6444 D5               push de
 ROMD:6445 16 00            ld   d,00
 ROMD:6447 CD 85 09         call 0985           // A = Terrain type
 ROMD:644A EF 0B F7 7C                          // A = 0 for owner's turn, 1 for opponent's turn, 2 for Neutral property, or 3 for non-property tile
 ROMD:644E FE 01            cp   a,01
 ROMD:6450 20 01            jr   nz,6453
 ROMD:6452 14               inc  d
 ROMD:6453 1E 00            ld   e,00
 ROMD:6455 C5               push bc             // Loop begins here
 ROMD:6456 CD D9 28         call 28D9           // BC = relative coordinates, Set Carry Flag based on relative coordinates being out of bounds
 ROMD:6459 38 0C            jr   c,6467
 ROMD:645B CD 85 09         call 0985           // A = Terrain type
 ROMD:645E EF 0B F7 7C                          // A = 0 for owner's turn, 1 for opponent's turn, 2 for Neutral property, or 3 for non-property tile
 ROMD:6462 FE 01            cp   a,01
 ROMD:6464 20 01            jr   nz,6467
 ROMD:6466 14               inc  d
 ROMD:6467 C1               pop  bc
 ROMD:6468 1C               inc  e
 ROMD:6469 7B               ld   a,e
 ROMD:646A FE 06            cp   a,06
 ROMD:646C 20 E7            jr   nz,6455
 ROMD:646E 7A               ld   a,d
 ROMD:646F D1               pop  de
 ROMD:6470 C1               pop  bc
 ROMD:6471 C9               ret                 // A = number of enemy properties at location and surrounding tiles
 ROMD:6472 F0 82            ld   a,(ff00+82)
 ROMD:6474 F5               push af
 ROMD:6475 3E 02            ld   a,02
 ROMD:6477 E0 82            ld   (ff00+82),a
 ROMD:6479 E0 70            ld   (ff00+70),a
 ROMD:647B 11 90 DE         ld   de,DE90
 ROMD:647E 2A               ldi  a,(hl)
 ROMD:647F 12               ld   (de),a
 ROMD:6480 13               inc  de
 ROMD:6481 A7               and  a
 ROMD:6482 20 FA            jr   nz,647E        // WRA2($DE90) holds list
 ROMD:6484 FA A2 C9         ld   a,(C9A2)
 ROMD:6487 57               ld   d,a            // D = active player's first unit
 ROMD:6488 1E 32            ld   e,32
 ROMD:648A 7A               ld   a,d            // Loop begins here
 ROMD:648B CD 2D 65         call 652D           // A = Unit Type if unit can move, 0 otherwise
 ROMD:648E A7               and  a
 ROMD:648F 28 17            jr   z,64A8         // End cycle if unit can't move
 ROMD:6491 CB 3F            srl a
 ROMD:6493 CD AF 64         call 64AF           // A unchanged if there is a match with any entry in WRA2($DE90) list, A = 0 otherwise
 ROMD:6496 A7               and  a
 ROMD:6497 28 0F            jr   z,64A8         // End cycle if no match
 ROMD:6499 F5               push af
 ROMD:649A 7A               ld   a,d
 ROMD:649B CD 63 65         call 6563           // ($C9D8) set to unit #; ($CCDD) to ($CD08) hold stuff based on unit; ($C9D9) 2 byte holds unit's coordinates; ($C613) = 1; Empties: ($C9DD), ($C9DE), ($C9E5), and ($C5EC); set ($C5ED) to ($C5F1) to -1; handles WRA5 and WRA6 movement checking
 ROMD:649E F1               pop  af             // A = Unit Type
 ROMD:649F CD BD 64         call 64BD           // Unit Type A's Specific Procedure
 ROMD:64A2 FA 94 CA         ld   a,(CA94)
 ROMD:64A5 A7               and  a
 ROMD:64A6 20 04            jr   nz,64AC        // Ends immediately if either army is victorious
 ROMD:64A8 14               inc  d
 ROMD:64A9 1D               dec  e
 ROMD:64AA 20 DE            jr   nz,648A
 ROMD:64AC D1               pop  de
 ROMD:64AD C1               pop  bc
 ROMD:64AE C9               ret                 // Units within list indicated by HL given instructions to manage movement procedures
 ROMD:64AF C5               push bc
 ROMD:64B0 47               ld   b,a
 ROMD:64B1 21 90 DE         ld   hl,DE90
 ROMD:64B4 2A               ldi  a,(hl)         // Loop begins here
 ROMD:64B5 B8               cp   b
 ROMD:64B6 28 03            jr   z,64BB         // End immediately with Zero Flag set if match obtained
 ROMD:64B8 A7               and  a
 ROMD:64B9 20 F9            jr   nz,64B4        // Loop back if not end of list
 ROMD:64BB C1               pop  bc
 ROMD:64BC C9               ret                 // A unchanged if there is a match with any entry in WRA2($DE90) list, A = 0 otherwise
 ROMD:64BD 21 C4 64         ld   hl,64C4
 ROMD:64C0 CD 93 3A         call 3A93
 ROMD:64C3 E9               jp   hl             // JP (2A + $64C4)

 ROMD:64C4 00 00                                // Blank - Invalid
 ROMD:64C6 40 62                                // Foot soldier stuff
 ROMD:64C8 40 62                                // Foot soldier stuff
 ROMD:64CA 40 62                                // Foot soldier stuff
 ROMD:64CC B6 62                                // Work Car stuff
 ROMD:64CE 2C 65                                // Nothing
 ROMD:64D0 2C 65                                // Nothing
 ROMD:64D2 2C 65                                // Nothing
 ROMD:64D4 2C 65                                // Nothing
 ROMD:64D6 2C 65                                // Nothing
 ROMD:64D8 2C 65                                // Nothing
 ROMD:64DA 2C 65                                // Nothing
 ROMD:64DC 2C 65                                // Nothing
 ROMD:64DE 2C 65                                // Nothing
 ROMD:64E0 2C 65                                // Nothing
 ROMD:64E2 2C 65                                // Nothing
 ROMD:64E4 2C 65                                // Nothing
 ROMD:64E6 2C 65                                // Nothing
 ROMD:64E8 2C 65                                // Nothing
 ROMD:64EA 2C 65                                // Nothing
 ROMD:64EC 2C 65                                // Nothing
 ROMD:64EE 2C 65                                // Nothing
 ROMD:64F0 2C 65                                // Nothing
 ROMD:64F2 2C 65                                // Nothing
 ROMD:64F4 2C 65                                // Nothing
 ROMD:64F6 2C 65                                // Nothing
 ROMD:64F8 2C 65                                // Nothing
 ROMD:64FA 2C 65                                // Nothing
 ROMD:64FC 2C 65                                // Nothing
 ROMD:64FE 2C 65                                // Nothing
 ROMD:6500 2C 65                                // Nothing
 ROMD:6502 2C 65                                // Nothing
 ROMD:6504 2C 65                                // Nothing
 ROMD:6506 2C 65                                // Nothing
 ROMD:6508 2C 65                                // Nothing
 ROMD:650A 2E 63                                // Bomber stuff
 ROMD:650C 2E 63                                // Bomber stuff
 ROMD:650E 2C 65                                // Nothing
 ROMD:6510 2C 65                                // Nothing
 ROMD:6512 2C 65                                // Nothing
 ROMD:6514 2C 65                                // Nothing
 ROMD:6516 2C 65                                // Nothing
 ROMD:6518 2C 65                                // Nothing
 ROMD:651A 2C 65                                // Nothing
 ROMD:651C 2C 65                                // Nothing
 ROMD:651E 2C 65                                // Nothing
 ROMD:6520 2C 65                                // Nothing
 ROMD:6522 2C 65                                // Nothing
 ROMD:6524 2C 65                                // Nothing
 ROMD:6526 2C 65                                // Nothing
 ROMD:6528 2C 65                                // Nothing
 ROMD:652A 2C 65                                // Nothing

 ROMD:652C C9               ret  
 ROMD:652D C5               push bc
 ROMD:652E 47               ld   b,a
 ROMD:652F 0E 00            ld   c,00
 ROMD:6531 CD 0B 09         call 090B           // Unit Type
 ROMD:6534 A7               and  a
 ROMD:6535 28 29            jr   z,6560         // End with A = 0 if unit is nonexistent
 ROMD:6537 4F               ld   c,a            // B = Unit #, C = unit type
 ROMD:6538 C5               push bc
 ROMD:6539 78               ld   a,b            // A = unit #
 ROMD:653A 0E 03            ld   c,03
 ROMD:653C CD 0B 09         call 090B           // A = unit status
 ROMD:653F C1               pop  bc             // B = Unit #, C = unit type
 ROMD:6540 CB 7F            bit 7,a
 ROMD:6542 20 1C            jr   nz,6560        // End with A = 0 if unit has moved
 ROMD:6544 CB 4F            bit 1,a
 ROMD:6546 20 18            jr   nz,6560        // End with A = 0 if unit is in reserve
 ROMD:6548 CB 47            bit 0,a
 ROMD:654A 28 11            jr   z,655D         // End with A = Unit Type if unit isn't Loaded
 ROMD:654C C5               push bc
 ROMD:654D 78               ld   a,b            // A = unit #
 ROMD:654E 0E 06            ld   c,06
 ROMD:6550 CD 0B 09         call 090B           // A = Loading unit's unit #
 ROMD:6553 0E 03            ld   c,03
 ROMD:6555 CD 0B 09         call 090B           // A = Loading unit's status
 ROMD:6558 C1               pop  bc
 ROMD:6559 CB 47            bit 0,a
 ROMD:655B 20 03            jr   nz,6560        // End with A = 0 if unit is actually stack-loaded
 ROMD:655D 79               ld   a,c
 ROMD:655E 18 01            jr   6561
 ROMD:6560 AF               xor  a
 ROMD:6561 C1               pop  bc
 ROMD:6562 C9               ret                 // A = Unit Type if unit can move
 ROMD:6563 EA D8 C9         ld   (C9D8),a
 ROMD:6566 CD 74 65         call 6574           // ($CCDD) to ($CD08) hold stuff based on A; ($C9D9) 2 byte holds unit's coordinates; Empties: ($C613), ($C9DD), ($C9DE), ($C9E5), and ($C5EC); set ($C5ED) to ($C5F1) to -1
 ROMD:6569 CD A9 65         call 65A9           // WRAM Bank #5 map has Movement requirements, WRAM Bank #6 map has enemy occupied (bit 1) and ZOC tiles (bit 0) marked, ($C613) = 1
 ROMD:656C C9               ret                 // ($C9D8) set to A; ($CCDD) to ($CD08) hold stuff based on A; ($C9D9) 2 byte holds unit's coordinates; ($C613) = 1; Empties: ($C9DD), ($C9DE), ($C9E5), and ($C5EC); set ($C5ED) to ($C5F1) to -1; handles WRA5 and WRA6 movement checking
 ROMD:656D EA D8 C9         ld   (C9D8),a
 ROMD:6570 CD 74 65         call 6574           // ($CCDD) to ($CD08) hold stuff based on A; ($C9D9) 2 byte holds unit's coordinates; Empties: ($C613), ($C9DD), ($C9DE), ($C9E5), and ($C5EC); set ($C5ED) to ($C5F1) to -1
 ROMD:6573 C9               ret                 // ($C9D8) set to A; ($CCDD) to ($CD08) hold stuff based on A; ($C9D9) 2 byte holds unit's coordinates; Empties: ($C613), ($C9DD), ($C9DE), ($C9E5), and ($C5EC); set ($C5ED) to ($C5F1) to -1
 ROMD:6574 AF               xor  a
 ROMD:6575 EA 13 C6         ld   (C613),a       // ($C613) is emptied
 ROMD:6578 FA D8 C9         ld   a,(C9D8)
 ROMD:657B EF 12 06 41                          // ($CCDD) to ($CCEC) holds unit's stats
 ROMD:657F FA D8 C9         ld   a,(C9D8)
 ROMD:6582 EF 12 62 48                          // ($CCED) to ($CD08) hold both weapons' stats
 ROMD:6586 FA DE CC         ld   a,(CCDE)
 ROMD:6589 EA D9 C9         ld   (C9D9),a
 ROMD:658C FA DF CC         ld   a,(CCDF)
 ROMD:658F EA DA C9         ld   (C9DA),a       // ($C9D9) 2 byte holds unit's coordinates
 ROMD:6592 EF 0B D4 5E                          // Empties ($C9DD), ($C9DE), and ($C9E5)
 ROMD:6596 3E FF            ld   a,FF
 ROMD:6598 EA ED C5         ld   (C5ED),a
 ROMD:659B EA EE C5         ld   (C5EE),a
 ROMD:659E EA F0 C5         ld   (C5F0),a
 ROMD:65A1 EA F1 C5         ld   (C5F1),a
 ROMD:65A4 AF               xor  a
 ROMD:65A5 EA EC C5         ld   (C5EC),a
 ROMD:65A8 C9               ret                 // ($CCDD) to ($CD08) hold stuff based on unit in ($C9D8); ($C9D9) 2 byte holds unit's coordinates; Empties: ($C613), ($C9DD), ($C9DE), ($C9E5), and ($C5EC); set ($C5ED) to ($C5F1) to -1
 ROMD:65A9 FA 13 C6         ld   a,(C613)
 ROMD:65AC A7               and  a
 ROMD:65AD C0               ret  nz
 ROMD:65AE FA D8 C9         ld   a,(C9D8)
 ROMD:65B1 CD 8A 5B         call 5B8A           // WRAM Bank #2 has set 7 done to viable movement tiles, WRAM Bank #5 map has Movement requirements, WRAM Bank #6 map has enemy occupied (bit 1) and ZOC tiles (bit 0) marked
 ROMD:65B4 EF 0B 6B 56                          // res 7 on every tile in WRAM Bank #2
 ROMD:65B8 3E 01            ld   a,01
 ROMD:65BA EA 13 C6         ld   (C613),a
 ROMD:65BD C9               ret                 // WRAM Bank #5 map has Movement requirements, WRAM Bank #6 map has enemy occupied (bit 1) and ZOC tiles (bit 0) marked, ($C613) = 1
 ROMD:65BE C5               push bc
 ROMD:65BF FA D9 C9         ld   a,(C9D9)
 ROMD:65C2 47               ld   b,a
 ROMD:65C3 FA DA C9         ld   a,(C9DA)
 ROMD:65C6 4F               ld   c,a
 ROMD:65C7 EF 0B 01 7B                          // Handles map graphics shift to coordinates BC
 ROMD:65CB 3E 02            ld   a,00
 ROMD:65CD CD 44 38         call 3844
 ROMD:65D0 FA D8 C9         ld   a,(C9D8)
 ROMD:65D3 CD 8A 5B         call 5B8A           // WRAM Bank #2 has set 7 done to viable movement tiles, WRAM Bank #5 map has Movement requirements, WRAM Bank #6 map has enemy occupied (bit 1) and ZOC tiles (bit 0) marked
 ROMD:65D6 EF 0B 8A 42                          // Establishes all on-screen tiles' entire graphics, ($FF95) 2 byte holds screen shift coordinates
 ROMD:65DA C1               pop  bc
 ROMD:65DB C9               ret  
 ROMD:65DC FA E0 CC         ld   a,(CCE0)
 ROMD:65DF CB 47            bit 0,a
 ROMD:65E1 C8               ret  z              // End immediately if unit isn't being transported
 ROMD:65E2 C5               push bc
 ROMD:65E3 D5               push de
 ROMD:65E4 CB 87            res 0,a
 ROMD:65E6 EA E0 CC         ld   (CCE0),a       // Unit is no longer being transported
 ROMD:65E9 FA E3 CC         ld   a,(CCE3)
 ROMD:65EC 0E 05            ld   c,05
 ROMD:65EE CD 0B 09         call 090B           // Carrying unit's Load Count
 ROMD:65F1 3D               dec  a
 ROMD:65F2 47               ld   b,a
 ROMD:65F3 FA E3 CC         ld   a,(CCE3)
 ROMD:65F6 CD 42 09         call 0942           // Carrying unit's Load Count is decremented
 ROMD:65F9 FA D9 C9         ld   a,(C9D9)
 ROMD:65FC 47               ld   b,a
 ROMD:65FD FA DA C9         ld   a,(C9DA)
 ROMD:6600 4F               ld   c,a
 ROMD:6601 EF 12 4E 41                          // A = unit number of primary selected unit
 ROMD:6605 EF 0B 9B 68                          // Updates tile graphics of unit A's location
 ROMD:6609 EF 0B D1 43                          // Establishes tile BC's entire graphics
 ROMD:660D D1               pop  de
 ROMD:660E C1               pop  bc
 ROMD:660F C9               ret                 // Unloading stat changes handled as necessary
 ROMD:6610 AF               xor  a
 ROMD:6611 EA 9F C9         ld   (C99F),a
 ROMD:6614 CD 18 66         call 6618           // ($C631) and ($C632) set to determine AI for each player
 ROMD:6617 C9               ret                 // Initializes ($C99F) as 0, also sets AI check bytes
 ROMD:6618 FA 2F C6         ld   a,(C62F)       // A = active game mode
 ROMD:661B FE 05            cp   a,05
 ROMD:661D 28 28            jr   z,6647         // End with (C631) and (C632) set to 1 if active game mode is Attract
 ROMD:661F 3E 00            ld   a,00
 ROMD:6621 EA 31 C6         ld   (C631),a
 ROMD:6624 EA 32 C6         ld   (C632),a       // ($C631) and ($C632) are defaulted to 0
 ROMD:6627 FA 2F C6         ld   a,(C62F)
 ROMD:662A FE 04            cp   a,04
 ROMD:662C 28 21            jr   z,664F         // End procedure immediately if active game mode is VS
 ROMD:662E FE 02            cp   a,02
 ROMD:6630 20 0E            jr   nz,6640        // If active game mode is not Standard, end with ($C632) set to 1
 ROMD:6632 FA 83 C8         ld   a,(C883)       // A = Map # - 1
 ROMD:6635 FE 1E            cp   a,1E
 ROMD:6637 38 07            jr   c,6640         // if Map # < 30, end with ($C632) set to 1
 ROMD:6639 3E 01            ld   a,01
 ROMD:663B EA 31 C6         ld   (C631),a
 ROMD:663E 18 0F            jr   664F           // Ended with ($C631) set to 1
 ROMD:6640 3E 01            ld   a,01
 ROMD:6642 EA 32 C6         ld   (C632),a
 ROMD:6645 18 08            jr   664F           // Ended with ($C632) set to 1
 ROMD:6647 3E 01            ld   a,01
 ROMD:6649 EA 31 C6         ld   (C631),a
 ROMD:664C EA 32 C6         ld   (C632),a       // Ended with ($C631) and ($C632) set to 1
 ROMD:664F C9               ret                 // ($C631) and ($C632) set to determine AI for each player
 ROMD:6650 FA 9F C9         ld   a,(C99F)       // A = ($C99F)
 ROMD:6653 A7               and  a
 ROMD:6654 20 22            jr   nz,6678        // End with A = ($C99F) if ($C99F) is not 0
 ROMD:6656 F0 82            ld   a,(ff00+82)
 ROMD:6658 F5               push af
 ROMD:6659 3E 02            ld   a,02
 ROMD:665B E0 82            ld   (ff00+82),a
 ROMD:665D E0 70            ld   (ff00+70),a    // WRAM Bank #2
 ROMD:665F CD 42 5C         call 5C42           // ($C60C) = Number of sets of land with properties, $A000 table establishes sets of land with properties
 ROMD:6662 CD B1 66         call 66B1           // ($CA90) = winning state
 ROMD:6665 3E 01            ld   a,01
 ROMD:6667 EA 9F C9         ld   (C99F),a
 ROMD:666A AF               xor  a
 ROMD:666B EA 9C C9         ld   (C99C),a
 ROMD:666E 3E 04            ld   a,04
 ROMD:6670 EA A1 DE         ld   (DEA1),a       // ($C99F) = 1, ($C99C) = 0, ($DEA1) WRAM Bank #2 = 4
 ROMD:6673 F1               pop  af
 ROMD:6674 E0 82            ld   (ff00+82),a
 ROMD:6676 E0 70            ld   (ff00+70),a
 ROMD:6678 C9               ret                 // ($C60C) = # of sets w/ properties, $A000 table has sets w/ properties, ($CA90) = winning state, ($C99C) = 0, ($C99F) = 1, ($DEA1) WRAM Bank #2 = 4
 ROMD:6679 CD 56 30         call 3056           // Establishes all active sprite portions in ($C400) table; updates ($FFBC), sets ($C00E) to 1
 ROMD:667C CD 91 4B         call 4B91           // ($DD80) WRAM Bank #2 tables viable captures
 ROMD:667F CD 70 68         call 6870           // WRA2($DE9A) holds: first River along the way coordinates, Lander start coordinates, Lander end coordinates, flags for opponent's HQ reachable
 ROMD:6682 AF               xor  a
 ROMD:6683 EA DE C9         ld   (C9DE),a
 ROMD:6686 EA DD C9         ld   (C9DD),a       // ($C9DE) and ($C9DD) are emptied
 ROMD:6689 FA 33 C6         ld   a,(C633)
 ROMD:668C E6 01            and  a,01
 ROMD:668E 20 05            jr   nz,6695
 ROMD:6690 21 A9 66         ld   hl,66A9
 ROMD:6693 18 03            jr   6698
 ROMD:6695 21 AD 66         ld   hl,66AD        // HL = $66A9 + active player * 4
 ROMD:6698 2A               ldi  a,(hl)
 ROMD:6699 EA 9E C9         ld   (C99E),a       // ($C99E) holds active player
 ROMD:669C 2A               ldi  a,(hl)
 ROMD:669D EA A2 C9         ld   (C9A2),a       // ($C9A2) holds 0 or 50
 ROMD:66A0 2A               ldi  a,(hl)
 ROMD:66A1 EA A3 C9         ld   (C9A3),a       // ($C9A3) holds 50 or 0
 ROMD:66A4 2A               ldi  a,(hl)
 ROMD:66A5 EA A4 C9         ld   (C9A4),a       // ($C9A4) holds 0 or 11
 ROMD:66A8 C9               ret                 // Sprite portion update at start, ($DD80) WRAM Bank #2 tables viable captures, WRAM Bank #2 ($DEA0) involves reaching enemy HQ, ($C9DE) and ($C9DD) are emptied, ($C99E) holds active player, ($C9A2) holds 0 or 50, ($C9A3) holds other, ($C9A4) holds 0 or 11

 ROMD:66A9 00 00 32 00
 ROMD:66AD 01 32 00 0B

 ROMD:66B1 C5               push bc
 ROMD:66B2 D5               push de
 ROMD:66B3 06 00            ld   b,00           // B = 0
 ROMD:66B5 CD 0E 67         call 670E           // HL = Red Star's Total HP * Gold Cost / 1000G, truncated per unit
 ROMD:66B8 7D               ld   a,l
 ROMD:66B9 E0 99            ld   (ff00+99),a
 ROMD:66BB 7C               ld   a,h
 ROMD:66BC E0 9A            ld   (ff00+9A),a    // (FF99) 2 byte = Red Star's Total HP * Gold Cost / 1000G, truncated per unit
 ROMD:66BE E5               push hl
 ROMD:66BF 06 32            ld   b,32
 ROMD:66C1 CD 0E 67         call 670E           // HL = White Moon's Total HP * Gold Cost / 1000G, truncated per unit
 ROMD:66C4 7D               ld   a,l
 ROMD:66C5 E0 9B            ld   (ff00+9B),a
 ROMD:66C7 7C               ld   a,h
 ROMD:66C8 E0 9C            ld   (ff00+9C),a    // (FF9B) 2 byte = White Moon's Total HP * Gold Cost / 1000G, truncated per unit
 ROMD:66CA D1               pop  de             // DE = Red Star's Total HP * Gold Cost / 1000G, truncated per unit
 ROMD:66CB CB 3A            slr d
 ROMD:66CD CB 1B            rr e                // DE is halved
 ROMD:66CF CD CA 29         call 29CA           // Carry Flag active if DE < HL, A = 0 if DE = HL
 ROMD:66D2 28 14            jr   z,66E8         // Jump if RS/2 = WM
 ROMD:66D4 38 12            jr   c,66E8         // Jump if RS/2 < WM
 ROMD:66D6 CB 3A            slr d
 ROMD:66D8 CB 1B            rr e                // DE is halved again
 ROMD:66DA CD CA 29         call 29CA           // Carry Flag active if DE < HL, A = 0 if DE = HL
 ROMD:66DD 28 06            jr   z,66E5         // Jump if RS/4 = WM
 ROMD:66DF 38 04            jr   c,66E5         // Jump if RS/4 < WM
 ROMD:66E1 3E 01            ld   a,01
 ROMD:66E3 18 23            jr   6708           // End with $C9A0 = 1 if RS/4 > WM
 ROMD:66E5 AF               xor  a
 ROMD:66E6 18 20            jr   6708           // End with $C9A0 = 0 if RS/4 <= WM <= RS/2
 ROMD:66E8 F0 99            ld   a,(ff00+99)
 ROMD:66EA 5F               ld   e,a
 ROMD:66EB F0 9A            ld   a,(ff00+9A)
 ROMD:66ED 57               ld   d,a            // DE is changed back
 ROMD:66EE CB 3C            slr h
 ROMD:66F0 CB 1D            rr l                // HL is halved
 ROMD:66F2 CD CA 29         call 29CA           // Carry Flag active if DE < HL, A = 0 if DE = HL
 ROMD:66F5 30 0F            jr   nc,6706        // End with $C9A0 = -1 if RS => WM/2 and WM => RS/2
 ROMD:66F7 CB 3C            slr h
 ROMD:66F9 CB 1D            rr l
 ROMD:66FB CD CA 29         call 29CA           // Carry Flag active if DE < HL, A = 0 if DE = HL
 ROMD:66FE 30 04            jr   nc,6704        // Jump if WM/2 > RS => WM/4
 ROMD:6700 3E 03            ld   a,03
 ROMD:6702 18 04            jr   6708           // End with $C9A0 = 3 if RS < WM/4
 ROMD:6704 3E 02            ld   a,02
 ROMD:6706 3E FF            ld   a,FF
 ROMD:6708 EA A0 C9         ld   (C9A0),a
 ROMD:670B D1               pop  de
 ROMD:670C C1               pop  bc
 ROMD:670D C9               ret                 // ($C9A0) = winning state
 ROMD:670E D5               push de
 ROMD:670F 21 00 00         ld   hl,0000
 ROMD:6712 0E 32            ld   c,32
 ROMD:6714 78               ld   a,b
 ROMD:6715 CD 1F 67         call 671F           // DE = HP * Gold Cost / 1000G
 ROMD:6718 19               add  hl,de
 ROMD:6719 04               inc  b
 ROMD:671A 0D               dec  c
 ROMD:671B 20 F7            jr   nz,6714
 ROMD:671D D1               pop  de
 ROMD:671E C9               ret                 // HL = Total HP * Gold Cost / 1000G, truncated per unit
 ROMD:671F C5               push bc
 ROMD:6720 E5               push hl
 ROMD:6721 47               ld   b,a
 ROMD:6722 0E 03            ld   c,03
 ROMD:6724 CD 0B 09         call 090B           // Unit's Status
 ROMD:6727 CB 4F            bit 1,a             // A = Reserve Flag
 ROMD:6729 20 27            jr   nz,6752        // Jump to end with DE = 0 if Reserve Flag is set
 ROMD:672B 78               ld   a,b
 ROMD:672C 0E 00            ld   c,00
 ROMD:672E CD 0B 09         call 090B           // Unit Type
 ROMD:6731 A7               and  a
 ROMD:6732 28 1E            jr   z,6752         // Jump to end with DE = 0 if unit doesn't exist
 ROMD:6734 0E 10            ld   c,10           // C = 16
 ROMD:6736 EF 12 43 40                          // DE = Gold Cost / 100G
 ROMD:673A D5               push de
 ROMD:673B 78               ld   a,b
 ROMD:673C 0E 04            ld   c,04
 ROMD:673E CD 0B 09         call 090B           // HP
 ROMD:6741 E1               pop  hl             // HL = Gold Cost / 100G
 ROMD:6742 5F               ld   e,a
 ROMD:6743 16 00            ld   d,00           // DE = HP
 ROMD:6745 CD D8 29         call 29D8           // HL = HP * Gold Cost / 100G
 ROMD:6748 54               ld   d,h
 ROMD:6749 5D               ld   e,l            // DE = HP * Gold Cost / 100G
 ROMD:674A 01 0A 00         ld   bc,000A        // BC = 10
 ROMD:674D CD 21 2A         call 2A21           // DE = HP * Gold Cost / 1000G, BC holds remainder
 ROMD:6750 18 03            jr   6755
 ROMD:6752 11 00 00         ld   de,0000
 ROMD:6755 E1               pop  hl
 ROMD:6756 C1               pop  bc
 ROMD:6757 C9               ret                 // DE = HP * Gold Cost / 1000G
 ROMD:6758 C5               push bc
 ROMD:6759 FA A0 C9         ld   a,(C9A0)
 ROMD:675C FE FF            cp   a,FF
 ROMD:675E 28 13            jr   z,6773
 ROMD:6760 CB 3F            srl a
 ROMD:6762 47               ld   b,a            // B = 0 for Red Star winning, 1 for White Moon winning
 ROMD:6763 FA 33 C6         ld   a,(C633)
 ROMD:6766 E6 01            and  a,01
 ROMD:6768 B8               cp   b
 ROMD:6769 20 04            jr   nz,676F
 ROMD:676B 3E 01            ld   a,01
 ROMD:676D 18 05            jr   6774
 ROMD:676F 3E 02            ld   a,02
 ROMD:6771 18 01            jr   6774
 ROMD:6773 AF               xor  a
 ROMD:6774 C1               pop  bc
 ROMD:6775 C9               ret                 // A = 0 for Neutral, 1 for active player winning, 2 for active player losing
 ROMD:6776 C5               push bc
 ROMD:6777 FA 86 C6         ld   a,(C686)       // A = active game mode (Beginner/Campaign/Standard)
 ROMD:677A A7               and  a
 ROMD:677B 28 12            jr   z,678F
 ROMD:677D CD B1 66         call 66B1           // Must establish victory status based on funding
 ROMD:6780 FA 86 C6         ld   a,(C686)       // A = active game mode (Beginner/Campaign/Standard)
 ROMD:6783 CD 94 67         call 6794           // A = (A - 1) * 6 + 3 + (Active player) * 3 + Winning progress state
 ROMD:6786 21 A1 C9         ld   hl,C9A1
 ROMD:6789 BE               cp   (hl)           // Is it the active phase song?
 ROMD:678A 28 06            jr   z,6792
 ROMD:678C EA A1 C9         ld   (C9A1),a       // Updating active phase song
 ROMD:678F CD 16 38         call 3816           // Changes ($C102) to designated song as necessary
 ROMD:6792 C1               pop  bc
 ROMD:6793 C9               ret                 // Sets current phase music
 ROMD:6794 C5               push bc
 ROMD:6795 3D               dec  a
 ROMD:6796 87               add  a
 ROMD:6797 47               ld   b,a
 ROMD:6798 87               add  a
 ROMD:6799 80               add  b
 ROMD:679A C6 03            add  a,03           // A = (A - 1) * 6 + 3
 ROMD:679C 47               ld   b,a            // B = (A - 1) * 6 + 3
 ROMD:679D FA 33 C6         ld   a,(C633)
 ROMD:67A0 E6 01            and  a,01
 ROMD:67A2 4F               ld   c,a            // C = active player
 ROMD:67A3 87               add  a
 ROMD:67A4 80               add  b
 ROMD:67A5 81               add  c              // A = (A - 1) * 6 + 3 + (Active player) * 3
 ROMD:67A6 47               ld   b,a            // B = (A - 1) * 6 + 3 + (Active player) * 3
 ROMD:67A7 CD 58 67         call 6758           // A = 0 for Neutral, 1 for active player winning, 2 for active player losing
 ROMD:67AA 80               add  b
 ROMD:67AB C1               pop  bc
 ROMD:67AC C9               ret                 // A = (A - 1) * 6 + 3 + (Active player) * 3 + Winning progress state
 ROMD:67AD FA 85 C6         ld   a,(C685)
 ROMD:67B0 CB 6F            bit 5,a
 ROMD:67B2 28 30            jr   z,67E4         // if bit 5,($C685) = 0, end with A = 0
 ROMD:67B4 FA 9C C9         ld   a,(C99C)
 ROMD:67B7 A7               and  a
 ROMD:67B8 20 2A            jr   nz,67E4        // if ($C99C) != 0, end with A = 0 (will fight to the bitter end if forced to)
 ROMD:67BA FA 33 C6         ld   a,(C633)
 ROMD:67BD CB 3F            srl a
 ROMD:67BF FE 0A            cp   a,0A
 ROMD:67C1 38 21            jr   c,67E4         // if Day # < 11, end with A = 0
 ROMD:67C3 CD E6 67         call 67E6           // A = 1 if inactive player has more than twice as many units as the active player and inactive player has at least 10 units; 0 otherwise
 ROMD:67C6 A7               and  a
 ROMD:67C7 28 1B            jr   z,67E4         // unless inactive player has more than twice as many units as the active player and inactive player has at least 10 units, end with A = 0
 ROMD:67C9 CD 0D 68         call 680D           // A = 1 if Materials < 30, 0 otherwise
 ROMD:67CC A7               and  a
 ROMD:67CD 28 15            jr   z,67E4         // unless Materials < 30, end with A = 0
 ROMD:67CF CD B1 66         call 66B1           // ($C9A0) = winning state
 ROMD:67D2 CD 58 67         call 6758           // A = 0 for Neutral, 1 for active player winning, 2 for active player losing
 ROMD:67D5 FE 02            cp   a,02
 ROMD:67D7 20 0B            jr   nz,67E4        // unless active player is losing, end with A = 0
 ROMD:67D9 FA A0 C9         ld   a,(C9A0)
 ROMD:67DC CB 47            bit 0,a
 ROMD:67DE 28 04            jr   z,67E4         // unless active player's unit Gold costs sum less than 1/4 of inactive player's, end with A = 0
 ROMD:67E0 3E 01            ld   a,01
 ROMD:67E2 18 01            jr   67E5
 ROMD:67E4 AF               xor  a
 ROMD:67E5 C9               ret                 // A = status set by: bit 5,($C685) active; ($C99C) = 0; Day # > 10; inactive player has more than twice as many units as the active player and inactive player has at least 10 units; Materials < 30; active player is losing in unit Gold totals
 ROMD:67E6 C5               push bc
 ROMD:67E7 FA 9E C9         ld   a,(C99E)
 ROMD:67EA EE 01            xor  a,01           // A = inactive player
 ROMD:67EC 21 09 CD         ld   hl,CD09
 ROMD:67EF CD BC 29         call 29BC
 ROMD:67F2 7E               ld   a,(hl)         // A = enemy army headcount
 ROMD:67F3 FE 0A            cp   a,0A
 ROMD:67F5 38 13            jr   c,680A         // if enemy army has < 10 units, end with A = 0
 ROMD:67F7 47               ld   b,a
 ROMD:67F8 FA 9E C9         ld   a,(C99E)
 ROMD:67FB 21 09 CD         ld   hl,CD09
 ROMD:67FE CD BC 29         call 29BC
 ROMD:6801 7E               ld   a,(hl)
 ROMD:6802 87               add  a              // A = active player's army headcount * 2
 ROMD:6803 B8               cp   b
 ROMD:6804 30 04            jr   nc,680A        // end with A = 0 unless inactive player has more than twice as many units as the active player
 ROMD:6806 3E 01            ld   a,01
 ROMD:6808 18 01            jr   680B
 ROMD:680A AF               xor  a
 ROMD:680B C1               pop  bc
 ROMD:680C C9               ret                 // A = 1 if inactive player has more than twice as many units as the active player and inactive player has at least 10 units; 0 otherwise
 ROMD:680D C5               push bc
 ROMD:680E FA 9E C9         ld   a,(C99E)
 ROMD:6811 87               add  a
 ROMD:6812 21 42 C6         ld   hl,C642
 ROMD:6815 CD BC 29         call 29BC           // (HL) 2 byte is active player's Materials
 ROMD:6818 5E               ld   e,(hl)
 ROMD:6819 23               inc  hl
 ROMD:681A 56               ld   d,(hl)         // DE = active player's Materials
 ROMD:681B 21 1E 00         ld   hl,001E
 ROMD:681E CD CA 29         call 29CA           // Carry Flag active if DE < HL, A = 0 if DE = HL
 ROMD:6821 30 04            jr   nc,6827        // Ends with A = 0 if Materials => 30
 ROMD:6823 3E 01            ld   a,01
 ROMD:6825 18 01            jr   6828
 ROMD:6827 AF               xor  a
 ROMD:6828 C1               pop  bc
 ROMD:6829 C9               ret                 // A = 1 if Materials < 30, 0 otherwise
 ROMD:682A C5               push bc
 ROMD:682B 06 03            ld   b,03
 ROMD:682D C5               push bc             // Loop begins here
 ROMD:682E 3E 13            ld   a,13           // News from Enemy Army
 ROMD:6830 EF 0B B5 51                          // Handles Popup Message as a whole including momentary cursor disabling (A is Popup Message #)
 ROMD:6834 3E 1E            ld   a,1E
 ROMD:6836 CD AF 3B         call 3BAF           // Advances game state by 30 frames before any further functions
 ROMD:6839 C1               pop  bc
 ROMD:683A 05               dec  b
 ROMD:683B 20 F0            jr   nz,682D        // Repeats 3 times
 ROMD:683D CD 64 21         call 2164           // Empties $FFB1 and $FFB2
 ROMD:6840 3E 01            ld   a,01
 ROMD:6842 EA 9C C9         ld   (C99C),a       // Sets AI Yield Offered
 ROMD:6845 FA 33 C6         ld   a,(C633)
 ROMD:6848 E6 01            and  a,01
 ROMD:684A EF 27 5F 7E                          // AI Yield Request master control, ends with A = Choice (A is yielding AI side)
 ROMD:684E A7               and  a
 ROMD:684F 20 0B            jr   nz,685C        // Branch if Yield accepted
 ROMD:6851 EF 11 74 4D                          // Denied Yield count incremented (Reaper Medal)
 ROMD:6855 EF 0B E6 69                          // Reestablishes map graphics
 ROMD:6859 AF               xor  a
 ROMD:685A 18 12            jr   686E
 ROMD:685C 3E 03            ld   a,03
 ROMD:685E EA 95 CA         ld   (CA95),a       // Victory Type Yield
 ROMD:6861 FA 33 C6         ld   a,(C633)
 ROMD:6864 E6 01            and  a,01
 ROMD:6866 EE 01            xor  a,01           // A = inactive player
 ROMD:6868 3C               inc  a
 ROMD:6869 EA 94 CA         ld   (CA94),a       // Inactive player wins
 ROMD:686C 3E 01            ld   a,01
 ROMD:686E C1               pop  bc
 ROMD:686F C9               ret                 // AI Yield Attempt ending with A = Acceptance
 ROMD:6870 F0 82            ld   a,(ff00+82)
 ROMD:6872 F5               push af
 ROMD:6873 3E 02            ld   a,02
 ROMD:6875 E0 82            ld   (ff00+82),a
 ROMD:6877 E0 70            ld   (ff00+70),a    // WRAM Bank #2
 ROMD:6879 AF               xor  a
 ROMD:687A EA A0 DE         ld   (DEA0),a       // Empties ($DEA0) WRAM Bank #2
 ROMD:687D CD D4 59         call 59D4           // BC holds either first River along the way, or -1; SRAD $A000 and $B000 tables have Movement requirements established
 ROMD:6880 78               ld   a,b
 ROMD:6881 EA 9A DE         ld   (DE9A),a
 ROMD:6884 79               ld   a,c
 ROMD:6885 EA 9B DE         ld   (DE9B),a       // Map WRAM ($DE9A) 2 byte holds location of first River tile along the way
 ROMD:6888 CD A5 5D         call 5DA5           // BC hold active player's HQ
 ROMD:688B 3E 02            ld   a,02           // Grunt
 ROMD:688D CD A2 58         call 58A2           // $A000 table holds total Movement requirements to active player's HQ % 16 * 16, $B000 table holds same / 16, using Infantry movement
 ROMD:6890 CD 9C 5D         call 5D9C           // BC hold inactive player's HQ
 ROMD:6893 3E A0            ld   a,A0
 ROMD:6895 CD E6 08         call 08E6           // HL = $A000 + B + C * 64
 ROMD:6898 CD 93 05         call 0593           // ($0000) = 10
 ROMD:689B 3E 0D            ld   a,0D
 ROMD:689D CD 8D 05         call 058D           // ($4000) = 13, ($FF81) = 13
 ROMD:68A0 56               ld   d,(hl)
 ROMD:68A1 CD 9B 05         call 059B           // ($0000) = 0
 ROMD:68A4 7A               ld   a,d            // A = Movement required by foot
 ROMD:68A5 FE FF            cp   a,FF           // Is opponent's HQ reachable by foot?
 ROMD:68A7 28 08            jr   z,68B1
 ROMD:68A9 FA A0 DE         ld   a,(DEA0)
 ROMD:68AC CB C7            set 0,a
 ROMD:68AE EA A0 DE         ld   (DEA0),a       // set 0,($DEA0) if opponent's HQ is reachable by foot
 ROMD:68B1 FA A0 DE         ld   a,(DEA0)
 ROMD:68B4 CB CF            set 1,a
 ROMD:68B6 EA A0 DE         ld   (DEA0),a       // set 1,($DEA0) unconditional
 ROMD:68B9 CD 86 5A         call 5A86           // set 2,($DEA0) if opponent's HQ can be invaded by landing force
 ROMD:68BC F1               pop  af
 ROMD:68BD E0 82            ld   (ff00+82),a
 ROMD:68BF E0 70            ld   (ff00+70),a
 ROMD:68C1 C9               ret                 // WRA2($DE9A) holds: first River along the way coordinates, Lander start coordinates, Lander end coordinates, flags for opponent's HQ reachable


